<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_f_px2" kind="class" language="C++" prot="public">
    <compoundname>KWin::FPx2</compoundname>
    <includes refid="animationeffect_8h" local="no">animationeffect.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_f_px2_1a98605f42f12003edb4253d07dea3dd7f" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float KWin::FPx2::f[2]</definition>
        <argsstring>[2]</argsstring>
        <name>f</name>
        <qualifiedname>KWin::FPx2::f</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="173" column="11" bodyfile="kwin/src/effect/animationeffect.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_f_px2_1aa8af690df9ea08ef5c8d9de5eed18d2b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::FPx2::valid</definition>
        <argsstring></argsstring>
        <name>valid</name>
        <qualifiedname>KWin::FPx2::valid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="174" column="10" bodyfile="kwin/src/effect/animationeffect.h" bodystart="174" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_f_px2_1ae88d53d405869d7f5f26a02c18bd2b54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KWin::FPx2::FPx2</definition>
        <argsstring>()</argsstring>
        <name>FPx2</name>
        <qualifiedname>KWin::FPx2::FPx2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="26" column="5" bodyfile="kwin/src/effect/animationeffect.h" bodystart="26" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_f_px2_1a2c194c43a19dddfbc6a368f2472580d9" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KWin::FPx2::FPx2</definition>
        <argsstring>(float v)</argsstring>
        <name>FPx2</name>
        <qualifiedname>KWin::FPx2::FPx2</qualifiedname>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="31" column="14" bodyfile="kwin/src/effect/animationeffect.h" bodystart="31" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_f_px2_1ab8b14dea4700c7b05867a031d9580620" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KWin::FPx2::FPx2</definition>
        <argsstring>(float v1, float v2)</argsstring>
        <name>FPx2</name>
        <qualifiedname>KWin::FPx2::FPx2</qualifiedname>
        <param>
          <type>float</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="36" column="5" bodyfile="kwin/src/effect/animationeffect.h" bodystart="36" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_f_px2_1abc9de02c56d205974b2156c9446530f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KWin::FPx2::FPx2</definition>
        <argsstring>(const FPx2 &amp;other)</argsstring>
        <name>FPx2</name>
        <qualifiedname>KWin::FPx2::FPx2</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="42" column="5" bodyfile="kwin/src/effect/animationeffect.h" bodystart="42" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_f_px2_1a267b07167612c289c8dd69c104b7f1a0" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KWin::FPx2::FPx2</definition>
        <argsstring>(const QPoint &amp;other)</argsstring>
        <name>FPx2</name>
        <qualifiedname>KWin::FPx2::FPx2</qualifiedname>
        <param>
          <type>const QPoint &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="48" column="14" bodyfile="kwin/src/effect/animationeffect.h" bodystart="48" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_f_px2_1a0121315dcfeab6570b78f072761f5828" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KWin::FPx2::FPx2</definition>
        <argsstring>(const QPointF &amp;other)</argsstring>
        <name>FPx2</name>
        <qualifiedname>KWin::FPx2::FPx2</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="54" column="14" bodyfile="kwin/src/effect/animationeffect.h" bodystart="54" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_f_px2_1a98a7b6581d40d7158829c4dfb9ca2fc0" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KWin::FPx2::FPx2</definition>
        <argsstring>(const QSize &amp;other)</argsstring>
        <name>FPx2</name>
        <qualifiedname>KWin::FPx2::FPx2</qualifiedname>
        <param>
          <type>const QSize &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="60" column="14" bodyfile="kwin/src/effect/animationeffect.h" bodystart="60" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_f_px2_1ae39f1251f224f27290025eff812e52f1" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KWin::FPx2::FPx2</definition>
        <argsstring>(const QSizeF &amp;other)</argsstring>
        <name>FPx2</name>
        <qualifiedname>KWin::FPx2::FPx2</qualifiedname>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="66" column="14" bodyfile="kwin/src/effect/animationeffect.h" bodystart="66" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_f_px2_1ad9543429defe1172752f1a66f55c1aae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::FPx2::invalidate</definition>
        <argsstring>()</argsstring>
        <name>invalidate</name>
        <qualifiedname>KWin::FPx2::invalidate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="72" column="17" bodyfile="kwin/src/effect/animationeffect.h" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_f_px2_1a93e5909ab540735fe92964de45edeb06" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::FPx2::isValid</definition>
        <argsstring>() const</argsstring>
        <name>isValid</name>
        <qualifiedname>KWin::FPx2::isValid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="76" column="17" bodyfile="kwin/src/effect/animationeffect.h" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_f_px2_1ac014039a9994e5816d3a34d0208cfb6d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float KWin::FPx2::operator[]</definition>
        <argsstring>(int n) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>KWin::FPx2::operator[]</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="80" column="18" bodyfile="kwin/src/effect/animationeffect.h" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_f_px2_1ad449c58a14d4e8485a5e778e0f6bcb97" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::FPx2::toString</definition>
        <argsstring>() const</argsstring>
        <name>toString</name>
        <qualifiedname>KWin::FPx2::toString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="84" column="20" bodyfile="kwin/src/effect/animationeffect.h" bodystart="84" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_f_px2_1a23f687c1945c8a07e1fac4c91a4983d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
        <definition>FPx2 &amp; KWin::FPx2::operator=</definition>
        <argsstring>(const FPx2 &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>KWin::FPx2::operator=</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="95" column="17" bodyfile="kwin/src/effect/animationeffect.h" bodystart="95" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_f_px2_1ac73a9a9a51b56829121a42c54b36f562" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
        <definition>FPx2 &amp; KWin::FPx2::operator+=</definition>
        <argsstring>(const FPx2 &amp;other)</argsstring>
        <name>operator+=</name>
        <qualifiedname>KWin::FPx2::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="102" column="17" bodyfile="kwin/src/effect/animationeffect.h" bodystart="102" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_f_px2_1a5c5d3b3bee34f48b7b81f1468131d438" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
        <definition>FPx2 &amp; KWin::FPx2::operator-=</definition>
        <argsstring>(const FPx2 &amp;other)</argsstring>
        <name>operator-=</name>
        <qualifiedname>KWin::FPx2::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="108" column="17" bodyfile="kwin/src/effect/animationeffect.h" bodystart="108" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_f_px2_1a48ed7d94aa906a688ae7a891ff3ef872" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
        <definition>FPx2 &amp; KWin::FPx2::operator*=</definition>
        <argsstring>(float fl)</argsstring>
        <name>operator*=</name>
        <qualifiedname>KWin::FPx2::operator*=</qualifiedname>
        <param>
          <type>float</type>
          <declname>fl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="114" column="17" bodyfile="kwin/src/effect/animationeffect.h" bodystart="114" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_f_px2_1a4a0a1dce23111682e9178e054eeaa7ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
        <definition>FPx2 &amp; KWin::FPx2::operator/=</definition>
        <argsstring>(float fl)</argsstring>
        <name>operator/=</name>
        <qualifiedname>KWin::FPx2::operator/=</qualifiedname>
        <param>
          <type>float</type>
          <declname>fl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="120" column="17" bodyfile="kwin/src/effect/animationeffect.h" bodystart="120" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_f_px2_1ab85988c1b069b59dab412f5ed6ce7c0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::FPx2::set</definition>
        <argsstring>(float v)</argsstring>
        <name>set</name>
        <qualifiedname>KWin::FPx2::set</qualifiedname>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="160" column="17" bodyfile="kwin/src/effect/animationeffect.h" bodystart="160" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_f_px2_1a564e97eb95219a9394bf74af5ddf433c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::FPx2::set</definition>
        <argsstring>(float v1, float v2)</argsstring>
        <name>set</name>
        <qualifiedname>KWin::FPx2::set</qualifiedname>
        <param>
          <type>float</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="165" column="17" bodyfile="kwin/src/effect/animationeffect.h" bodystart="165" bodyend="170"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_k_win_1_1_f_px2_1a3627156b06fa135d51afac1a7cfc8003" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const FPx2 &amp;f1, const FPx2 &amp;f2)</argsstring>
        <name>operator==</name>
        <qualifiedname>KWin::FPx2::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="127" column="24" bodyfile="kwin/src/effect/animationeffect.h" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="friend" id="class_k_win_1_1_f_px2_1a95519cc6df02349d8199c68e33bdd0fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const FPx2 &amp;f1, const FPx2 &amp;f2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>KWin::FPx2::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="131" column="24" bodyfile="kwin/src/effect/animationeffect.h" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="friend" id="class_k_win_1_1_f_px2_1ab72dfe820df4fbb18262bb1ed850b8d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref></type>
        <definition>const FPx2 operator+</definition>
        <argsstring>(const FPx2 &amp;f1, const FPx2 &amp;f2)</argsstring>
        <name>operator+</name>
        <qualifiedname>KWin::FPx2::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="135" column="30" bodyfile="kwin/src/effect/animationeffect.h" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="friend" id="class_k_win_1_1_f_px2_1aa1a86a547f4b5f4c976d6591968b16e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref></type>
        <definition>const FPx2 operator-</definition>
        <argsstring>(const FPx2 &amp;f1, const FPx2 &amp;f2)</argsstring>
        <name>operator-</name>
        <qualifiedname>KWin::FPx2::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="139" column="30" bodyfile="kwin/src/effect/animationeffect.h" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="friend" id="class_k_win_1_1_f_px2_1ab16131d2dfbb5c25919000f461393361" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref></type>
        <definition>const FPx2 operator*</definition>
        <argsstring>(const FPx2 &amp;f, float fl)</argsstring>
        <name>operator*</name>
        <qualifiedname>KWin::FPx2::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="143" column="30" bodyfile="kwin/src/effect/animationeffect.h" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="friend" id="class_k_win_1_1_f_px2_1acbf0a11d1a73b2cfd1136370dfc93199" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref></type>
        <definition>const FPx2 operator*</definition>
        <argsstring>(float fl, const FPx2 &amp;f)</argsstring>
        <name>operator*</name>
        <qualifiedname>KWin::FPx2::operator*</qualifiedname>
        <param>
          <type>float</type>
          <declname>fl</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="147" column="30" bodyfile="kwin/src/effect/animationeffect.h" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="friend" id="class_k_win_1_1_f_px2_1ac7cf0ed4bb0177379f854a10cc7fc500" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref></type>
        <definition>const FPx2 operator-</definition>
        <argsstring>(const FPx2 &amp;f)</argsstring>
        <name>operator-</name>
        <qualifiedname>KWin::FPx2::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="151" column="30" bodyfile="kwin/src/effect/animationeffect.h" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="friend" id="class_k_win_1_1_f_px2_1ad29bdd796b721b24adc9a998c01ab4d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref></type>
        <definition>const FPx2 operator/</definition>
        <argsstring>(const FPx2 &amp;f, float fl)</argsstring>
        <name>operator/</name>
        <qualifiedname>KWin::FPx2::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="155" column="30" bodyfile="kwin/src/effect/animationeffect.h" bodystart="155" bodyend="158"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="kwin/src/effect/animationeffect.h" line="23" column="1" bodyfile="kwin/src/effect/animationeffect.h" bodystart="24" bodyend="175"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_f_px2_1a98605f42f12003edb4253d07dea3dd7f" prot="private" virt="non-virtual"><scope>KWin::FPx2</scope><name>f</name></member>
      <member refid="class_k_win_1_1_f_px2_1ae88d53d405869d7f5f26a02c18bd2b54" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>FPx2</name></member>
      <member refid="class_k_win_1_1_f_px2_1a2c194c43a19dddfbc6a368f2472580d9" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>FPx2</name></member>
      <member refid="class_k_win_1_1_f_px2_1ab8b14dea4700c7b05867a031d9580620" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>FPx2</name></member>
      <member refid="class_k_win_1_1_f_px2_1abc9de02c56d205974b2156c9446530f3" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>FPx2</name></member>
      <member refid="class_k_win_1_1_f_px2_1a267b07167612c289c8dd69c104b7f1a0" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>FPx2</name></member>
      <member refid="class_k_win_1_1_f_px2_1a0121315dcfeab6570b78f072761f5828" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>FPx2</name></member>
      <member refid="class_k_win_1_1_f_px2_1a98a7b6581d40d7158829c4dfb9ca2fc0" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>FPx2</name></member>
      <member refid="class_k_win_1_1_f_px2_1ae39f1251f224f27290025eff812e52f1" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>FPx2</name></member>
      <member refid="class_k_win_1_1_f_px2_1ad9543429defe1172752f1a66f55c1aae" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>invalidate</name></member>
      <member refid="class_k_win_1_1_f_px2_1a93e5909ab540735fe92964de45edeb06" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>isValid</name></member>
      <member refid="class_k_win_1_1_f_px2_1a95519cc6df02349d8199c68e33bdd0fe" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>operator!=</name></member>
      <member refid="class_k_win_1_1_f_px2_1ab16131d2dfbb5c25919000f461393361" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>operator*</name></member>
      <member refid="class_k_win_1_1_f_px2_1acbf0a11d1a73b2cfd1136370dfc93199" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>operator*</name></member>
      <member refid="class_k_win_1_1_f_px2_1a48ed7d94aa906a688ae7a891ff3ef872" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>operator*=</name></member>
      <member refid="class_k_win_1_1_f_px2_1ab72dfe820df4fbb18262bb1ed850b8d5" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>operator+</name></member>
      <member refid="class_k_win_1_1_f_px2_1ac73a9a9a51b56829121a42c54b36f562" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>operator+=</name></member>
      <member refid="class_k_win_1_1_f_px2_1aa1a86a547f4b5f4c976d6591968b16e0" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>operator-</name></member>
      <member refid="class_k_win_1_1_f_px2_1ac7cf0ed4bb0177379f854a10cc7fc500" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>operator-</name></member>
      <member refid="class_k_win_1_1_f_px2_1a5c5d3b3bee34f48b7b81f1468131d438" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>operator-=</name></member>
      <member refid="class_k_win_1_1_f_px2_1ad29bdd796b721b24adc9a998c01ab4d3" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>operator/</name></member>
      <member refid="class_k_win_1_1_f_px2_1a4a0a1dce23111682e9178e054eeaa7ff" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>operator/=</name></member>
      <member refid="class_k_win_1_1_f_px2_1a23f687c1945c8a07e1fac4c91a4983d0" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>operator=</name></member>
      <member refid="class_k_win_1_1_f_px2_1a3627156b06fa135d51afac1a7cfc8003" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>operator==</name></member>
      <member refid="class_k_win_1_1_f_px2_1ac014039a9994e5816d3a34d0208cfb6d" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>operator[]</name></member>
      <member refid="class_k_win_1_1_f_px2_1ab85988c1b069b59dab412f5ed6ce7c0e" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>set</name></member>
      <member refid="class_k_win_1_1_f_px2_1a564e97eb95219a9394bf74af5ddf433c" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>set</name></member>
      <member refid="class_k_win_1_1_f_px2_1ad449c58a14d4e8485a5e778e0f6bcb97" prot="public" virt="non-virtual"><scope>KWin::FPx2</scope><name>toString</name></member>
      <member refid="class_k_win_1_1_f_px2_1aa8af690df9ea08ef5c8d9de5eed18d2b" prot="private" virt="non-virtual"><scope>KWin::FPx2</scope><name>valid</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
