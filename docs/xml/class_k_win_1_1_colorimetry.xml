<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_colorimetry" kind="class" language="C++" prot="public">
    <compoundname>KWin::Colorimetry</compoundname>
    <includes refid="colorspace_8h" local="no">colorspace.h</includes>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_colorimetry_1abdec0c7f99cb7af5dd75fdaadfff4297" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref></type>
        <definition>const Colorimetry KWin::Colorimetry::BT709</definition>
        <argsstring></argsstring>
        <name>BT709</name>
        <qualifiedname>KWin::Colorimetry::BT709</qualifiedname>
        <initializer>= <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref>{
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.64, 0.33},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.30, 0.60},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.15, 0.06},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.3127, 0.3290},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="80" column="30" bodyfile="kwin/src/core/colorspace.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_colorimetry_1a107ea1b4b8720b9efbdef94965e7c901" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref></type>
        <definition>const Colorimetry KWin::Colorimetry::PAL_M</definition>
        <argsstring></argsstring>
        <name>PAL_M</name>
        <qualifiedname>KWin::Colorimetry::PAL_M</qualifiedname>
        <initializer>= <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref>{
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.67, 0.33},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.21, 0.71},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.14, 0.08},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.310, 0.316},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="81" column="30" bodyfile="kwin/src/core/colorspace.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_colorimetry_1abd66983a5bf71b208d3fd7a94c0b4cbf" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref></type>
        <definition>const Colorimetry KWin::Colorimetry::PAL</definition>
        <argsstring></argsstring>
        <name>PAL</name>
        <qualifiedname>KWin::Colorimetry::PAL</qualifiedname>
        <initializer>= <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref>{
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.640, 0.330},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.290, 0.600},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.150, 0.060},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.3127, 0.3290},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="82" column="30" bodyfile="kwin/src/core/colorspace.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_colorimetry_1a5e7d0e0128191d53fa854adaf2e068be" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref></type>
        <definition>const Colorimetry KWin::Colorimetry::NTSC</definition>
        <argsstring></argsstring>
        <name>NTSC</name>
        <qualifiedname>KWin::Colorimetry::NTSC</qualifiedname>
        <initializer>= <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref>{
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.630, 0.340},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.310, 0.595},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.155, 0.070},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.3127, 0.3290},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="83" column="30" bodyfile="kwin/src/core/colorspace.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_colorimetry_1afb37815863eb9774638f9775f6012651" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref></type>
        <definition>const Colorimetry KWin::Colorimetry::GenericFilm</definition>
        <argsstring></argsstring>
        <name>GenericFilm</name>
        <qualifiedname>KWin::Colorimetry::GenericFilm</qualifiedname>
        <initializer>= <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref>{
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.243, 0.692},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.145, 0.049},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.681, 0.319},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.310, 0.316},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="84" column="30" bodyfile="kwin/src/core/colorspace.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_colorimetry_1a99c05e3a03117057e2bb1019b9861acb" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref></type>
        <definition>const Colorimetry KWin::Colorimetry::BT2020</definition>
        <argsstring></argsstring>
        <name>BT2020</name>
        <qualifiedname>KWin::Colorimetry::BT2020</qualifiedname>
        <initializer>= <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref>{
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.708, 0.292},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.170, 0.797},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.131, 0.046},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.3127, 0.3290},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="85" column="30" bodyfile="kwin/src/core/colorspace.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_colorimetry_1a10c7c05ec536476298f155d3fe24dedf" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref></type>
        <definition>const Colorimetry KWin::Colorimetry::CIEXYZ</definition>
        <argsstring></argsstring>
        <name>CIEXYZ</name>
        <qualifiedname>KWin::Colorimetry::CIEXYZ</qualifiedname>
        <initializer>= <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref>{
    <ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref>{1.0, 0.0, 0.0},
    <ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref>{0.0, 1.0, 0.0},
    <ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref>{0.0, 0.0, 1.0},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{1.0 / 3.0, 1.0 / 3.0}.<ref refid="class_k_win_1_1_colorimetry_1aaede1d30151de5781d5854246895b7b2" kindref="member">toXYZ</ref>(),
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="86" column="30" bodyfile="kwin/src/core/colorspace.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_colorimetry_1a1a6699bb221b2b22e87a47caea964b5d" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref></type>
        <definition>const Colorimetry KWin::Colorimetry::DCIP3</definition>
        <argsstring></argsstring>
        <name>DCIP3</name>
        <qualifiedname>KWin::Colorimetry::DCIP3</qualifiedname>
        <initializer>= <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref>{
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.680, 0.320},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.265, 0.690},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.150, 0.060},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.314, 0.351},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="87" column="30" bodyfile="kwin/src/core/colorspace.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_colorimetry_1a7770cc9b47fb1f2f81c975355653a598" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref></type>
        <definition>const Colorimetry KWin::Colorimetry::DisplayP3</definition>
        <argsstring></argsstring>
        <name>DisplayP3</name>
        <qualifiedname>KWin::Colorimetry::DisplayP3</qualifiedname>
        <initializer>= <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref>{
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.680, 0.320},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.265, 0.690},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.150, 0.060},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.3127, 0.3290},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="88" column="30" bodyfile="kwin/src/core/colorspace.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_colorimetry_1a0e1202453526d579d3d2d89fc3c12cdd" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref></type>
        <definition>const Colorimetry KWin::Colorimetry::AdobeRGB</definition>
        <argsstring></argsstring>
        <name>AdobeRGB</name>
        <qualifiedname>KWin::Colorimetry::AdobeRGB</qualifiedname>
        <initializer>= <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref>{
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.6400, 0.3300},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.2100, 0.7100},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.1500, 0.0600},
    <ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref>{0.3127, 0.3290},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="89" column="30" bodyfile="kwin/src/core/colorspace.h" bodystart="89" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_colorimetry_1ab621d5c5ec4465d8d0859899302e0d54" prot="private" static="no" mutable="no">
        <type><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref></type>
        <definition>XYZ KWin::Colorimetry::m_red</definition>
        <argsstring></argsstring>
        <name>m_red</name>
        <qualifiedname>KWin::Colorimetry::m_red</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="146" column="9" bodyfile="kwin/src/core/colorspace.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_colorimetry_1ae9840696c1650e44d458334afd513aac" prot="private" static="no" mutable="no">
        <type><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref></type>
        <definition>XYZ KWin::Colorimetry::m_green</definition>
        <argsstring></argsstring>
        <name>m_green</name>
        <qualifiedname>KWin::Colorimetry::m_green</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="147" column="9" bodyfile="kwin/src/core/colorspace.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_colorimetry_1a8f04108ac53727b6438f6794f3537ffb" prot="private" static="no" mutable="no">
        <type><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref></type>
        <definition>XYZ KWin::Colorimetry::m_blue</definition>
        <argsstring></argsstring>
        <name>m_blue</name>
        <qualifiedname>KWin::Colorimetry::m_blue</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="148" column="9" bodyfile="kwin/src/core/colorspace.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_colorimetry_1a62db3b5f9bdc86a42fceafc886561e19" prot="private" static="no" mutable="no">
        <type><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref></type>
        <definition>XYZ KWin::Colorimetry::m_white</definition>
        <argsstring></argsstring>
        <name>m_white</name>
        <qualifiedname>KWin::Colorimetry::m_white</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="149" column="9" bodyfile="kwin/src/core/colorspace.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_colorimetry_1a07e541cfc85df0c57ce51711e8e5801a" prot="private" static="no" mutable="no">
        <type>QMatrix4x4</type>
        <definition>QMatrix4x4 KWin::Colorimetry::m_toXYZ</definition>
        <argsstring></argsstring>
        <name>m_toXYZ</name>
        <qualifiedname>KWin::Colorimetry::m_toXYZ</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="150" column="16" bodyfile="kwin/src/core/colorspace.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_colorimetry_1a0b655503ff83c104927f03be1924d497" prot="private" static="no" mutable="no">
        <type>QMatrix4x4</type>
        <definition>QMatrix4x4 KWin::Colorimetry::m_fromXYZ</definition>
        <argsstring></argsstring>
        <name>m_fromXYZ</name>
        <qualifiedname>KWin::Colorimetry::m_fromXYZ</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="151" column="16" bodyfile="kwin/src/core/colorspace.h" bodystart="151" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_k_win_1_1_colorimetry_1a7c4edbbb8804bfbdab7670a55691a6b9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QMatrix4x4</type>
        <definition>QMatrix4x4 KWin::Colorimetry::chromaticAdaptationMatrix</definition>
        <argsstring>(XYZ sourceWhitepoint, XYZ destinationWhitepoint)</argsstring>
        <name>chromaticAdaptationMatrix</name>
        <qualifiedname>KWin::Colorimetry::chromaticAdaptationMatrix</qualifiedname>
        <param>
          <type><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref></type>
          <declname>sourceWhitepoint</declname>
        </param>
        <param>
          <type><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref></type>
          <declname>destinationWhitepoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a matrix adapting <ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref> values from the source whitepoint to the destination whitepoint with the Bradford transform </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="94" column="23" bodyfile="kwin/src/core/colorspace.cpp" bodystart="153" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_colorimetry_1a4274b830c99c619ad0d12750d9f95f4d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QMatrix4x4</type>
        <definition>QMatrix4x4 KWin::Colorimetry::calculateToXYZMatrix</definition>
        <argsstring>(XYZ red, XYZ green, XYZ blue, XYZ white)</argsstring>
        <name>calculateToXYZMatrix</name>
        <qualifiedname>KWin::Colorimetry::calculateToXYZMatrix</qualifiedname>
        <param>
          <type><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref></type>
          <declname>red</declname>
        </param>
        <param>
          <type><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref></type>
          <declname>green</declname>
        </param>
        <param>
          <type><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref></type>
          <declname>blue</declname>
        </param>
        <param>
          <type><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref></type>
          <declname>white</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="96" column="23" bodyfile="kwin/src/core/colorspace.cpp" bodystart="192" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_colorimetry_1aedd6e2f525b22ee6f27bd56936674b93" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Colorimetry::isValid</definition>
        <argsstring>(xy red, xy green, xy blue, xy white)</argsstring>
        <name>isValid</name>
        <qualifiedname>KWin::Colorimetry::isValid</qualifiedname>
        <param>
          <type><ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref></type>
          <declname>red</declname>
        </param>
        <param>
          <type><ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref></type>
          <declname>green</declname>
        </param>
        <param>
          <type><ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref></type>
          <declname>blue</declname>
        </param>
        <param>
          <type><ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref></type>
          <declname>white</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>checks if the colorimetry is sane and won&apos;t cause crashes or glitches </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="101" column="17" bodyfile="kwin/src/core/colorspace.cpp" bodystart="216" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_colorimetry_1a7aeb805267db1f037832c3d342db7703" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Colorimetry::isReal</definition>
        <argsstring>(xy red, xy green, xy blue, xy white)</argsstring>
        <name>isReal</name>
        <qualifiedname>KWin::Colorimetry::isReal</qualifiedname>
        <param>
          <type><ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref></type>
          <declname>red</declname>
        </param>
        <param>
          <type><ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref></type>
          <declname>green</declname>
        </param>
        <param>
          <type><ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref></type>
          <declname>blue</declname>
        </param>
        <param>
          <type><ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref></type>
          <declname>white</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>checks if the colorimetry could be from a real display </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="105" column="17" bodyfile="kwin/src/core/colorspace.cpp" bodystart="237" bodyend="255"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_colorimetry_1a29a24408ac5a3a3143199e1ba9d2a134" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::Colorimetry::Colorimetry</definition>
        <argsstring>(XYZ red, XYZ green, XYZ blue, XYZ white)</argsstring>
        <name>Colorimetry</name>
        <qualifiedname>KWin::Colorimetry::Colorimetry</qualifiedname>
        <param>
          <type><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref></type>
          <declname>red</declname>
        </param>
        <param>
          <type><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref></type>
          <declname>green</declname>
        </param>
        <param>
          <type><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref></type>
          <declname>blue</declname>
        </param>
        <param>
          <type><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref></type>
          <declname>white</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="107" column="14" bodyfile="kwin/src/core/colorspace.cpp" bodystart="257" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_colorimetry_1a32daad37a7aa589ef1774dfdf4df4d19" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::Colorimetry::Colorimetry</definition>
        <argsstring>(xyY red, xyY green, xyY blue, xyY white)</argsstring>
        <name>Colorimetry</name>
        <qualifiedname>KWin::Colorimetry::Colorimetry</qualifiedname>
        <param>
          <type><ref refid="struct_k_win_1_1xy_y" kindref="compound">xyY</ref></type>
          <declname>red</declname>
        </param>
        <param>
          <type><ref refid="struct_k_win_1_1xy_y" kindref="compound">xyY</ref></type>
          <declname>green</declname>
        </param>
        <param>
          <type><ref refid="struct_k_win_1_1xy_y" kindref="compound">xyY</ref></type>
          <declname>blue</declname>
        </param>
        <param>
          <type><ref refid="struct_k_win_1_1xy_y" kindref="compound">xyY</ref></type>
          <declname>white</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="108" column="14" bodyfile="kwin/src/core/colorspace.cpp" bodystart="267" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_colorimetry_1a325fe2f07c7c2aa80d740e3ce2790ea9" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::Colorimetry::Colorimetry</definition>
        <argsstring>(xy red, xy green, xy blue, xy white)</argsstring>
        <name>Colorimetry</name>
        <qualifiedname>KWin::Colorimetry::Colorimetry</qualifiedname>
        <param>
          <type><ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref></type>
          <declname>red</declname>
        </param>
        <param>
          <type><ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref></type>
          <declname>green</declname>
        </param>
        <param>
          <type><ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref></type>
          <declname>blue</declname>
        </param>
        <param>
          <type><ref refid="struct_k_win_1_1xy" kindref="compound">xy</ref></type>
          <declname>white</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="109" column="14" bodyfile="kwin/src/core/colorspace.cpp" bodystart="272" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_colorimetry_1aaede1d30151de5781d5854246895b7b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const QMatrix4x4 &amp;</type>
        <definition>const QMatrix4x4 &amp; KWin::Colorimetry::toXYZ</definition>
        <argsstring>() const</argsstring>
        <name>toXYZ</name>
        <qualifiedname>KWin::Colorimetry::toXYZ</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a matrix that transforms from the linear RGB representation of colors in this colorimetry to the <ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref> representation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="114" column="22" bodyfile="kwin/src/core/colorspace.cpp" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_colorimetry_1affb8d026ca85e445a84b8fd366c79881" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const QMatrix4x4 &amp;</type>
        <definition>const QMatrix4x4 &amp; KWin::Colorimetry::fromXYZ</definition>
        <argsstring>() const</argsstring>
        <name>fromXYZ</name>
        <qualifiedname>KWin::Colorimetry::fromXYZ</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a matrix that transforms from the <ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref> representation to the linear RGB representation of colors in this colorimetry </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="118" column="22" bodyfile="kwin/src/core/colorspace.cpp" bodystart="293" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_colorimetry_1a3d5266239c4f0e12609f7b811c582012" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QMatrix4x4</type>
        <definition>QMatrix4x4 KWin::Colorimetry::toLMS</definition>
        <argsstring>() const</argsstring>
        <name>toLMS</name>
        <qualifiedname>KWin::Colorimetry::toLMS</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="119" column="16" bodyfile="kwin/src/core/colorspace.cpp" bodystart="314" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_colorimetry_1a33150c30052465982b9c71b15fd4005a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QMatrix4x4</type>
        <definition>QMatrix4x4 KWin::Colorimetry::fromLMS</definition>
        <argsstring>() const</argsstring>
        <name>fromLMS</name>
        <qualifiedname>KWin::Colorimetry::fromLMS</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="120" column="16" bodyfile="kwin/src/core/colorspace.cpp" bodystart="319" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_colorimetry_1af2c0aea21bb0bf6f5bf44dfba469cc04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Colorimetry::operator==</definition>
        <argsstring>(const Colorimetry &amp;other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>KWin::Colorimetry::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="122" column="10" bodyfile="kwin/src/core/colorspace.cpp" bodystart="356" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_colorimetry_1ae2fa3435b0c26cbe448523c393c78777" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref></type>
        <definition>Colorimetry KWin::Colorimetry::adaptedTo</definition>
        <argsstring>(xyY newWhitepoint) const</argsstring>
        <name>adaptedTo</name>
        <qualifiedname>KWin::Colorimetry::adaptedTo</qualifiedname>
        <param>
          <type><ref refid="struct_k_win_1_1xy_y" kindref="compound">xyY</ref></type>
          <declname>newWhitepoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>this colorimetry, adapted to the new whitepoint using the Bradford transform </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="126" column="17" bodyfile="kwin/src/core/colorspace.cpp" bodystart="324" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_colorimetry_1ac05a68a80fdc3601c76df8f59983cff8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref></type>
        <definition>Colorimetry KWin::Colorimetry::withWhitepoint</definition>
        <argsstring>(xyY newWhitePoint) const</argsstring>
        <name>withWhitepoint</name>
        <qualifiedname>KWin::Colorimetry::withWhitepoint</qualifiedname>
        <param>
          <type><ref refid="struct_k_win_1_1xy_y" kindref="compound">xyY</ref></type>
          <declname>newWhitePoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>replaces the current whitepoint with the new one this does not do whitepoint adaptation! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="131" column="17" bodyfile="kwin/src/core/colorspace.cpp" bodystart="335" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_colorimetry_1a298126a235c07aa8ca700b197dcaf135" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref></type>
        <definition>Colorimetry KWin::Colorimetry::interpolateGamutTo</definition>
        <argsstring>(const Colorimetry &amp;one, double factor) const</argsstring>
        <name>interpolateGamutTo</name>
        <qualifiedname>KWin::Colorimetry::interpolateGamutTo</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref> &amp;</type>
          <declname>one</declname>
        </param>
        <param>
          <type>double</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>interpolates the primaries depending on the passed factor. The whitepoint stays unchanged </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="135" column="17" bodyfile="kwin/src/core/colorspace.cpp" bodystart="201" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_colorimetry_1a59590157301f0f2015d9f9bd43158247" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QMatrix4x4</type>
        <definition>QMatrix4x4 KWin::Colorimetry::relativeColorimetricTo</definition>
        <argsstring>(const Colorimetry &amp;other) const</argsstring>
        <name>relativeColorimetricTo</name>
        <qualifiedname>KWin::Colorimetry::relativeColorimetricTo</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="137" column="16" bodyfile="kwin/src/core/colorspace.cpp" bodystart="346" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_colorimetry_1a89170dd840c5a230d2e3246fb7083978" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QMatrix4x4</type>
        <definition>QMatrix4x4 KWin::Colorimetry::absoluteColorimetricTo</definition>
        <argsstring>(const Colorimetry &amp;other) const</argsstring>
        <name>absoluteColorimetricTo</name>
        <qualifiedname>KWin::Colorimetry::absoluteColorimetricTo</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="138" column="16" bodyfile="kwin/src/core/colorspace.cpp" bodystart="351" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_colorimetry_1a71c35133530f4d6b452d96ee754448bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref> &amp;</type>
        <definition>const XYZ &amp; KWin::Colorimetry::red</definition>
        <argsstring>() const</argsstring>
        <name>red</name>
        <qualifiedname>KWin::Colorimetry::red</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="140" column="15" bodyfile="kwin/src/core/colorspace.cpp" bodystart="361" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_colorimetry_1a8f01dabd52fc482e59321308969b7944" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref> &amp;</type>
        <definition>const XYZ &amp; KWin::Colorimetry::green</definition>
        <argsstring>() const</argsstring>
        <name>green</name>
        <qualifiedname>KWin::Colorimetry::green</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="141" column="15" bodyfile="kwin/src/core/colorspace.cpp" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_colorimetry_1acc678bc504ec9346cbf932a5366789f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref> &amp;</type>
        <definition>const XYZ &amp; KWin::Colorimetry::blue</definition>
        <argsstring>() const</argsstring>
        <name>blue</name>
        <qualifiedname>KWin::Colorimetry::blue</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="142" column="15" bodyfile="kwin/src/core/colorspace.cpp" bodystart="371" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_colorimetry_1a6a394e7b0050f8858444b1e136c2be73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref> &amp;</type>
        <definition>const XYZ &amp; KWin::Colorimetry::white</definition>
        <argsstring>() const</argsstring>
        <name>white</name>
        <qualifiedname>KWin::Colorimetry::white</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="143" column="15" bodyfile="kwin/src/core/colorspace.cpp" bodystart="376" bodyend="379"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Describes the definition of colors in a color space. Red, green and blue define the chromaticities (&quot;absolute colors&quot;) of the red, green and blue LEDs on a display in xy coordinates White defines the the chromaticity of the reference white in xy coordinates </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>KWin::Colorimetry</label>
        <link refid="class_k_win_1_1_colorimetry"/>
        <childnode refid="1" relation="usage">
          <edgelabel>AdobeRGB</edgelabel>
          <edgelabel>BT2020</edgelabel>
          <edgelabel>BT709</edgelabel>
          <edgelabel>CIEXYZ</edgelabel>
          <edgelabel>DCIP3</edgelabel>
          <edgelabel>DisplayP3</edgelabel>
          <edgelabel>GenericFilm</edgelabel>
          <edgelabel>NTSC</edgelabel>
          <edgelabel>PAL</edgelabel>
          <edgelabel>PAL_M</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="kwin/src/core/colorspace.h" line="77" column="1" bodyfile="kwin/src/core/colorspace.h" bodystart="78" bodyend="152"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_colorimetry_1a89170dd840c5a230d2e3246fb7083978" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>absoluteColorimetricTo</name></member>
      <member refid="class_k_win_1_1_colorimetry_1ae2fa3435b0c26cbe448523c393c78777" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>adaptedTo</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a0e1202453526d579d3d2d89fc3c12cdd" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>AdobeRGB</name></member>
      <member refid="class_k_win_1_1_colorimetry_1acc678bc504ec9346cbf932a5366789f6" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>blue</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a99c05e3a03117057e2bb1019b9861acb" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>BT2020</name></member>
      <member refid="class_k_win_1_1_colorimetry_1abdec0c7f99cb7af5dd75fdaadfff4297" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>BT709</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a4274b830c99c619ad0d12750d9f95f4d" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>calculateToXYZMatrix</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a7c4edbbb8804bfbdab7670a55691a6b9" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>chromaticAdaptationMatrix</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a10c7c05ec536476298f155d3fe24dedf" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>CIEXYZ</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a29a24408ac5a3a3143199e1ba9d2a134" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>Colorimetry</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a32daad37a7aa589ef1774dfdf4df4d19" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>Colorimetry</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a325fe2f07c7c2aa80d740e3ce2790ea9" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>Colorimetry</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a1a6699bb221b2b22e87a47caea964b5d" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>DCIP3</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a7770cc9b47fb1f2f81c975355653a598" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>DisplayP3</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a33150c30052465982b9c71b15fd4005a" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>fromLMS</name></member>
      <member refid="class_k_win_1_1_colorimetry_1affb8d026ca85e445a84b8fd366c79881" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>fromXYZ</name></member>
      <member refid="class_k_win_1_1_colorimetry_1afb37815863eb9774638f9775f6012651" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>GenericFilm</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a8f01dabd52fc482e59321308969b7944" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>green</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a298126a235c07aa8ca700b197dcaf135" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>interpolateGamutTo</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a7aeb805267db1f037832c3d342db7703" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>isReal</name></member>
      <member refid="class_k_win_1_1_colorimetry_1aedd6e2f525b22ee6f27bd56936674b93" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>isValid</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a8f04108ac53727b6438f6794f3537ffb" prot="private" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>m_blue</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a0b655503ff83c104927f03be1924d497" prot="private" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>m_fromXYZ</name></member>
      <member refid="class_k_win_1_1_colorimetry_1ae9840696c1650e44d458334afd513aac" prot="private" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>m_green</name></member>
      <member refid="class_k_win_1_1_colorimetry_1ab621d5c5ec4465d8d0859899302e0d54" prot="private" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>m_red</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a07e541cfc85df0c57ce51711e8e5801a" prot="private" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>m_toXYZ</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a62db3b5f9bdc86a42fceafc886561e19" prot="private" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>m_white</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a5e7d0e0128191d53fa854adaf2e068be" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>NTSC</name></member>
      <member refid="class_k_win_1_1_colorimetry_1af2c0aea21bb0bf6f5bf44dfba469cc04" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>operator==</name></member>
      <member refid="class_k_win_1_1_colorimetry_1abd66983a5bf71b208d3fd7a94c0b4cbf" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>PAL</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a107ea1b4b8720b9efbdef94965e7c901" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>PAL_M</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a71c35133530f4d6b452d96ee754448bc" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>red</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a59590157301f0f2015d9f9bd43158247" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>relativeColorimetricTo</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a3d5266239c4f0e12609f7b811c582012" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>toLMS</name></member>
      <member refid="class_k_win_1_1_colorimetry_1aaede1d30151de5781d5854246895b7b2" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>toXYZ</name></member>
      <member refid="class_k_win_1_1_colorimetry_1a6a394e7b0050f8858444b1e136c2be73" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>white</name></member>
      <member refid="class_k_win_1_1_colorimetry_1ac05a68a80fdc3601c76df8f59983cff8" prot="public" virt="non-virtual"><scope>KWin::Colorimetry</scope><name>withWhitepoint</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
