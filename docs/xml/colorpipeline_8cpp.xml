<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="colorpipeline_8cpp" kind="file" language="C++">
    <compoundname>colorpipeline.cpp</compoundname>
    <includes refid="colorpipeline_8h" local="yes">colorpipeline.h</includes>
    <includes refid="iccprofile_8h" local="yes">iccprofile.h</includes>
    <includes local="no">numbers</includes>
    <incdepgraph>
      <node id="3">
        <label>colorlut3d.h</label>
        <link refid="colorlut3d_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>kwin/src/core/colorpipeline.cpp</label>
        <link refid="colorpipeline_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>colorpipeline.h</label>
        <link refid="colorpipeline_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>colorspace.h</label>
        <link refid="colorspace_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>colortransformation.h</label>
        <link refid="colortransformation_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>iccprofile.h</label>
        <link refid="iccprofile_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>QMatrix4x4</label>
      </node>
      <node id="16">
        <label>QString</label>
      </node>
      <node id="4">
        <label>QVector</label>
      </node>
      <node id="10">
        <label>QVector2D</label>
      </node>
      <node id="17">
        <label>expected</label>
      </node>
      <node id="6">
        <label>kwin_export.h</label>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
      <node id="18">
        <label>numbers</label>
      </node>
      <node id="8">
        <label>optional</label>
      </node>
      <node id="12">
        <label>stdint.h</label>
      </node>
      <node id="13">
        <label>tuple</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_k_win">KWin</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="colorpipeline_8cpp_1acf9cf041a210946e63d87f86654f1805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QDebug</type>
        <definition>QDebug operator&lt;&lt;</definition>
        <argsstring>(QDebug debug, const KWin::ColorPipeline &amp;pipeline)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>QDebug</type>
          <declname>debug</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_color_pipeline" kindref="compound">KWin::ColorPipeline</ref> &amp;</type>
          <declname>pipeline</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.cpp" line="393" column="1" bodyfile="kwin/src/core/colorpipeline.cpp" bodystart="393" bodyend="415"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>KWin<sp/>-<sp/>the<sp/>KDE<sp/>window<sp/>manager</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>KDE<sp/>project.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2024<sp/>Xaver<sp/>Hugl<sp/>&lt;xaver.hugl@gmail.com&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="colorpipeline_8h" kindref="compound">colorpipeline.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="iccprofile_8h" kindref="compound">iccprofile.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numbers&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win" kindref="compound">KWin</ref></highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="class_k_win_1_1_value_range_1a387b4774d4df71df16006ad724295f77" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref><sp/><ref refid="class_k_win_1_1_value_range_1a387b4774d4df71df16006ad724295f77" kindref="member">ValueRange::operator*</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mult)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="18"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.min<sp/>=<sp/><ref refid="class_k_win_1_1_value_range_1a66cb166dc8588f1fc9a85bafcdc67bf2" kindref="member">min</ref><sp/>*<sp/>mult,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.max<sp/>=<sp/><ref refid="class_k_win_1_1_value_range_1a851207666f98fcd4c70ab33c96871dbb" kindref="member">max</ref><sp/>*<sp/>mult,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>s_disableTonemapping<sp/>=<sp/>qEnvironmentVariableIntValue(</highlight><highlight class="stringliteral">&quot;KWIN_DISABLE_TONEMAPPING&quot;</highlight><highlight class="normal">)<sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="class_k_win_1_1_color_pipeline_1aa4347025990236c558ca27733ca10fa9" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_color_pipeline_1adc324592f8f50b7126ebd3b2dfb9da27" kindref="member">ColorPipeline</ref><sp/><ref refid="class_k_win_1_1_color_pipeline_1aa4347025990236c558ca27733ca10fa9" kindref="member">ColorPipeline::create</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_description" kindref="compound">ColorDescription</ref><sp/>&amp;from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_description" kindref="compound">ColorDescription</ref><sp/>&amp;to,<sp/><ref refid="namespace_k_win_1a72b8a93022757874f9e6f85fcf9bc4e9" kindref="member">RenderingIntent</ref><sp/>intent)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>range1<sp/>=<sp/><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref>(from.<ref refid="class_k_win_1_1_color_description_1a2e4431da47115bb8d79cbaca87e40997" kindref="member">minLuminance</ref>(),<sp/>from.<ref refid="class_k_win_1_1_color_description_1af5ee8e0ffe6d82b52bf658bab9f7c6de" kindref="member">maxHdrLuminance</ref>().value_or(from.<ref refid="class_k_win_1_1_color_description_1a11f13e7bfe0ad1c4f715d001880d3334" kindref="member">referenceLuminance</ref>()));</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxOutputLuminance<sp/>=<sp/>to.<ref refid="class_k_win_1_1_color_description_1af5ee8e0ffe6d82b52bf658bab9f7c6de" kindref="member">maxHdrLuminance</ref>().value_or(to.<ref refid="class_k_win_1_1_color_description_1a11f13e7bfe0ad1c4f715d001880d3334" kindref="member">referenceLuminance</ref>());</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1adc324592f8f50b7126ebd3b2dfb9da27" kindref="member">ColorPipeline</ref><sp/>ret(<ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.min<sp/>=<sp/>from.<ref refid="class_k_win_1_1_color_description_1a742286b76df2ae57b339e18a921acd19" kindref="member">transferFunction</ref>().<ref refid="class_k_win_1_1_transfer_function_1aa75fbf3835336cb5c96cc14fd93541a1" kindref="member">nitsToEncoded</ref>(range1.min),</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.max<sp/>=<sp/>from.<ref refid="class_k_win_1_1_color_description_1a742286b76df2ae57b339e18a921acd19" kindref="member">transferFunction</ref>().<ref refid="class_k_win_1_1_transfer_function_1aa75fbf3835336cb5c96cc14fd93541a1" kindref="member">nitsToEncoded</ref>(range1.max),</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.addTransferFunction(from.<ref refid="class_k_win_1_1_color_description_1a742286b76df2ae57b339e18a921acd19" kindref="member">transferFunction</ref>());</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME<sp/>this<sp/>assumes<sp/>that<sp/>the<sp/>range<sp/>stays<sp/>the<sp/>same<sp/>with<sp/>matrix<sp/>multiplication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that&apos;s<sp/>not<sp/>necessarily<sp/>true,<sp/>and<sp/>figuring<sp/>out<sp/>the<sp/>actual<sp/>range<sp/>could<sp/>be<sp/>complicated..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.addMatrix(from.<ref refid="class_k_win_1_1_color_description_1a6dc069adbe6c3958bf5d9759de70ae55" kindref="member">toOther</ref>(to,<sp/>intent),<sp/>ret.currentOutputRange()<sp/>*<sp/>(to.<ref refid="class_k_win_1_1_color_description_1a11f13e7bfe0ad1c4f715d001880d3334" kindref="member">referenceLuminance</ref>()<sp/>/<sp/>from.<ref refid="class_k_win_1_1_color_description_1a11f13e7bfe0ad1c4f715d001880d3334" kindref="member">referenceLuminance</ref>()));</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s_disableTonemapping<sp/>&amp;&amp;<sp/>ret.currentOutputRange().max<sp/>&gt;<sp/>maxOutputLuminance<sp/>*<sp/>1.01<sp/>&amp;&amp;<sp/>intent<sp/>==<sp/><ref refid="namespace_k_win_1a72b8a93022757874f9e6f85fcf9bc4e9a09ab3095e9b2d0a7773cc3d2f0f879cd" kindref="member">RenderingIntent::Perceptual</ref>)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.addTonemapper(to.<ref refid="class_k_win_1_1_color_description_1a078edcae56e57ca288e047c38d6a1b0d" kindref="member">containerColorimetry</ref>(),<sp/>to.<ref refid="class_k_win_1_1_color_description_1a11f13e7bfe0ad1c4f715d001880d3334" kindref="member">referenceLuminance</ref>(),<sp/>ret.currentOutputRange().max,<sp/>maxOutputLuminance);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.addInverseTransferFunction(to.<ref refid="class_k_win_1_1_color_description_1a742286b76df2ae57b339e18a921acd19" kindref="member">transferFunction</ref>());</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="class_k_win_1_1_color_pipeline_1adc324592f8f50b7126ebd3b2dfb9da27" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_color_pipeline_1adc324592f8f50b7126ebd3b2dfb9da27" kindref="member">ColorPipeline::ColorPipeline</ref>()</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_color_pipeline_1a44789e08dce965c9351e9d04d1073074" kindref="member">inputRange</ref>(<ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.min<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.max<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="class_k_win_1_1_color_pipeline_1afcae09a7dea6b070331c515a7982c7b8" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_color_pipeline_1adc324592f8f50b7126ebd3b2dfb9da27" kindref="member">ColorPipeline::ColorPipeline</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref><sp/>&amp;<ref refid="class_k_win_1_1_color_pipeline_1a44789e08dce965c9351e9d04d1073074" kindref="member">inputRange</ref>)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_color_pipeline_1a44789e08dce965c9351e9d04d1073074" kindref="member">inputRange</ref>(<ref refid="class_k_win_1_1_color_pipeline_1a44789e08dce965c9351e9d04d1073074" kindref="member">inputRange</ref>)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref><sp/>&amp;<ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">ColorPipeline::currentOutputRange</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="62"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.empty()<sp/>?<sp/><ref refid="class_k_win_1_1_color_pipeline_1a44789e08dce965c9351e9d04d1073074" kindref="member">inputRange</ref><sp/>:<sp/><ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.back().output;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="class_k_win_1_1_color_pipeline_1af2cf9448e1f66763a20ef4feadae8d76" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_pipeline_1af2cf9448e1f66763a20ef4feadae8d76" kindref="member">ColorPipeline::addMultiplier</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>factor)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1af2cf9448e1f66763a20ef4feadae8d76" kindref="member">addMultiplier</ref>(QVector3D(factor,<sp/>factor,<sp/>factor));</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="class_k_win_1_1_color_pipeline_1ad778125cf759a9eedcfbe29278d5b892" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_pipeline_1af2cf9448e1f66763a20ef4feadae8d76" kindref="member">ColorPipeline::addMultiplier</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QVector3D<sp/>&amp;factors)</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(factors<sp/>==<sp/>QVector3D(1,<sp/>1,<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref><sp/>output{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.min<sp/>=<sp/><ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>().<ref refid="class_k_win_1_1_value_range_1a66cb166dc8588f1fc9a85bafcdc67bf2" kindref="member">min</ref><sp/>*<sp/>std::min(factors.x(),<sp/>std::min(factors.y(),<sp/>factors.z())),</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.max<sp/>=<sp/><ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>().<ref refid="class_k_win_1_1_value_range_1a851207666f98fcd4c70ab33c96871dbb" kindref="member">max</ref><sp/>*<sp/>std::max(factors.x(),<sp/>std::max(factors.y(),<sp/>factors.z())),</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*lastOp<sp/>=<sp/>&amp;<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.back().operation;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mat<sp/>=<sp/>std::get_if&lt;ColorMatrix&gt;(lastOp))<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QMatrix4x4<sp/>newMat;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMat.scale(factors);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMat<sp/>*=<sp/>mat-&gt;mat;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.erase(<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.end()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a1a13808050915cb631114e3a8da47bed" kindref="member">addMatrix</ref>(newMat,<sp/>output);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mult<sp/>=<sp/>std::get_if&lt;ColorMultiplier&gt;(lastOp))<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mult-&gt;factors<sp/>*=<sp/>factors;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mult-&gt;factors<sp/>-<sp/>QVector3D(1,<sp/>1,<sp/>1)).lengthSquared()<sp/>&lt;<sp/><ref refid="class_k_win_1_1_color_pipeline_1a4c736fae0c1a4bf9e204b0a44efbd396" kindref="member">s_maxResolution</ref><sp/>*<sp/><ref refid="class_k_win_1_1_color_pipeline_1a4c736fae0c1a4bf9e204b0a44efbd396" kindref="member">s_maxResolution</ref>)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.erase(<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.end()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.back().output<sp/>=<sp/>output;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::abs(factors.x()<sp/>-<sp/>factors.y())<sp/>&lt;<sp/><ref refid="class_k_win_1_1_color_pipeline_1a4c736fae0c1a4bf9e204b0a44efbd396" kindref="member">s_maxResolution</ref><sp/>&amp;&amp;<sp/>std::abs(factors.x()<sp/>-<sp/>factors.z())<sp/>&lt;<sp/><ref refid="class_k_win_1_1_color_pipeline_1a4c736fae0c1a4bf9e204b0a44efbd396" kindref="member">s_maxResolution</ref>)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tf<sp/>=<sp/>std::get_if&lt;ColorTransferFunction&gt;(lastOp))<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf-&gt;tf.minLuminance<sp/>*=<sp/>factors.x();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf-&gt;tf.maxLuminance<sp/>*=<sp/>factors.x();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.back().output<sp/>=<sp/>output;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tf<sp/>=<sp/>std::get_if&lt;InverseColorTransferFunction&gt;(lastOp))<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf-&gt;tf.minLuminance<sp/>/=<sp/>factors.x();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf-&gt;tf.maxLuminance<sp/>/=<sp/>factors.x();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.back().output<sp/>=<sp/>output;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.push_back(<ref refid="class_k_win_1_1_color_op" kindref="compound">ColorOp</ref>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.input<sp/>=<sp/><ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>(),</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.operation<sp/>=<sp/><ref refid="class_k_win_1_1_color_multiplier" kindref="compound">ColorMultiplier</ref>(factors),</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.output<sp/>=<sp/>output,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="class_k_win_1_1_color_pipeline_1a19886bf5733f4b91578fc0a9adea657d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_pipeline_1a19886bf5733f4b91578fc0a9adea657d" kindref="member">ColorPipeline::addTransferFunction</ref>(<ref refid="class_k_win_1_1_transfer_function" kindref="compound">TransferFunction</ref><sp/>tf)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>invTf<sp/>=<sp/>std::get_if&lt;InverseColorTransferFunction&gt;(&amp;<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.back().operation))<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(invTf-&gt;tf<sp/>==<sp/>tf)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.erase(<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.end()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tf.<ref refid="class_k_win_1_1_transfer_function_1a137dbd6906fcbd99032b40e3c37935f2" kindref="member">type</ref><sp/>==<sp/><ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ac4d9acf6c01c7c6872491ce9d8370410" kindref="member">TransferFunction::linear</ref>)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QMatrix4x4<sp/>mat;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat.translate(tf.<ref refid="class_k_win_1_1_transfer_function_1a6c10d6aabeab96c089d86b24f1507a62" kindref="member">minLuminance</ref>,<sp/>tf.<ref refid="class_k_win_1_1_transfer_function_1a6c10d6aabeab96c089d86b24f1507a62" kindref="member">minLuminance</ref>,<sp/>tf.<ref refid="class_k_win_1_1_transfer_function_1a6c10d6aabeab96c089d86b24f1507a62" kindref="member">minLuminance</ref>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat.scale(tf.<ref refid="class_k_win_1_1_transfer_function_1a3c5c23bd4c36320392fdcfb24057a821" kindref="member">maxLuminance</ref><sp/>-<sp/>tf.<ref refid="class_k_win_1_1_transfer_function_1a6c10d6aabeab96c089d86b24f1507a62" kindref="member">minLuminance</ref>);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a1a13808050915cb631114e3a8da47bed" kindref="member">addMatrix</ref>(mat,<sp/><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.min<sp/>=<sp/>(mat<sp/>*<sp/>QVector3D(<ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>().min,<sp/>0,<sp/>0)).x(),</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.max<sp/>=<sp/>(mat<sp/>*<sp/>QVector3D(<ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>().max,<sp/>0,<sp/>0)).x(),</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.push_back(<ref refid="class_k_win_1_1_color_op" kindref="compound">ColorOp</ref>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.input<sp/>=<sp/><ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>(),</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.operation<sp/>=<sp/><ref refid="class_k_win_1_1_color_transfer_function" kindref="compound">ColorTransferFunction</ref>(tf),</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.output<sp/>=<sp/><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.min<sp/>=<sp/>tf.<ref refid="class_k_win_1_1_transfer_function_1a227563617a0e7ecd4b33fb4f67d7f8fd" kindref="member">encodedToNits</ref>(<ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>().min),</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.max<sp/>=<sp/>tf.<ref refid="class_k_win_1_1_transfer_function_1a227563617a0e7ecd4b33fb4f67d7f8fd" kindref="member">encodedToNits</ref>(<ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>().max),</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="class_k_win_1_1_color_pipeline_1a1c7c2fdde86e5f2880cd79f3360aa74a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_pipeline_1a1c7c2fdde86e5f2880cd79f3360aa74a" kindref="member">ColorPipeline::addInverseTransferFunction</ref>(<ref refid="class_k_win_1_1_transfer_function" kindref="compound">TransferFunction</ref><sp/>tf)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>otherTf<sp/>=<sp/>std::get_if&lt;ColorTransferFunction&gt;(&amp;<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.back().operation))<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(otherTf-&gt;tf<sp/>==<sp/>tf)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.erase(<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.end()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tf.<ref refid="class_k_win_1_1_transfer_function_1a137dbd6906fcbd99032b40e3c37935f2" kindref="member">type</ref><sp/>==<sp/><ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ac4d9acf6c01c7c6872491ce9d8370410" kindref="member">TransferFunction::linear</ref>)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QMatrix4x4<sp/>mat;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat.scale(1.0<sp/>/<sp/>(tf.<ref refid="class_k_win_1_1_transfer_function_1a3c5c23bd4c36320392fdcfb24057a821" kindref="member">maxLuminance</ref><sp/>-<sp/>tf.<ref refid="class_k_win_1_1_transfer_function_1a6c10d6aabeab96c089d86b24f1507a62" kindref="member">minLuminance</ref>));</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat.translate(-tf.<ref refid="class_k_win_1_1_transfer_function_1a6c10d6aabeab96c089d86b24f1507a62" kindref="member">minLuminance</ref>,<sp/>-tf.<ref refid="class_k_win_1_1_transfer_function_1a6c10d6aabeab96c089d86b24f1507a62" kindref="member">minLuminance</ref>,<sp/>-tf.<ref refid="class_k_win_1_1_transfer_function_1a6c10d6aabeab96c089d86b24f1507a62" kindref="member">minLuminance</ref>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a1a13808050915cb631114e3a8da47bed" kindref="member">addMatrix</ref>(mat,<sp/><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.min<sp/>=<sp/>(mat<sp/>*<sp/>QVector3D(<ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>().min,<sp/>0,<sp/>0)).x(),</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.max<sp/>=<sp/>(mat<sp/>*<sp/>QVector3D(<ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>().max,<sp/>0,<sp/>0)).x(),</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.push_back(<ref refid="class_k_win_1_1_color_op" kindref="compound">ColorOp</ref>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.input<sp/>=<sp/><ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>(),</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.operation<sp/>=<sp/><ref refid="class_k_win_1_1_inverse_color_transfer_function" kindref="compound">InverseColorTransferFunction</ref>(tf),</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.output<sp/>=<sp/><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.min<sp/>=<sp/>tf.<ref refid="class_k_win_1_1_transfer_function_1aa75fbf3835336cb5c96cc14fd93541a1" kindref="member">nitsToEncoded</ref>(<ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>().min),</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.max<sp/>=<sp/>tf.<ref refid="class_k_win_1_1_transfer_function_1aa75fbf3835336cb5c96cc14fd93541a1" kindref="member">nitsToEncoded</ref>(<ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>().max),</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="namespace_k_win_1a41fc618c01055af18edba50a5fcf7635" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1a41fc618c01055af18edba50a5fcf7635" kindref="member">isFuzzyIdentity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QMatrix4x4<sp/>&amp;mat)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>targetValue<sp/>=<sp/>i<sp/>==<sp/>j<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::abs(mat(i,<sp/>j)<sp/>-<sp/>targetValue)<sp/>&gt;<sp/><ref refid="class_k_win_1_1_color_pipeline_1a4c736fae0c1a4bf9e204b0a44efbd396" kindref="member">ColorPipeline::s_maxResolution</ref>)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isFuzzyScalingOnly(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QMatrix4x4<sp/>&amp;mat)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::abs(mat(i,<sp/>j))<sp/>&gt;<sp/><ref refid="class_k_win_1_1_color_pipeline_1a4c736fae0c1a4bf9e204b0a44efbd396" kindref="member">ColorPipeline::s_maxResolution</ref>)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="class_k_win_1_1_color_pipeline_1a1a13808050915cb631114e3a8da47bed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_pipeline_1a1a13808050915cb631114e3a8da47bed" kindref="member">ColorPipeline::addMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QMatrix4x4<sp/>&amp;mat,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref><sp/>&amp;output)</highlight></codeline>
<codeline lineno="207"><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespace_k_win_1a41fc618c01055af18edba50a5fcf7635" kindref="member">isFuzzyIdentity</ref>(mat))<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*lastOp<sp/>=<sp/>&amp;<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.back().operation;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>otherMat<sp/>=<sp/>std::get_if&lt;ColorMatrix&gt;(lastOp))<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>newMat<sp/>=<sp/>mat<sp/>*<sp/>otherMat-&gt;mat;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.erase(<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.end()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a1a13808050915cb631114e3a8da47bed" kindref="member">addMatrix</ref>(newMat,<sp/>output);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mult<sp/>=<sp/>std::get_if&lt;ColorMultiplier&gt;(lastOp))<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QMatrix4x4<sp/>scaled<sp/>=<sp/>mat;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaled.scale(mult-&gt;factors);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.erase(<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.end()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a1a13808050915cb631114e3a8da47bed" kindref="member">addMatrix</ref>(scaled,<sp/>output);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isFuzzyScalingOnly(mat))<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pure<sp/>scaling,<sp/>this<sp/>can<sp/>be<sp/>simplified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1af2cf9448e1f66763a20ef4feadae8d76" kindref="member">addMultiplier</ref>(QVector3D(mat(0,<sp/>0),<sp/>mat(1,<sp/>1),<sp/>mat(2,<sp/>2)));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.push_back(<ref refid="class_k_win_1_1_color_op" kindref="compound">ColorOp</ref>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.input<sp/>=<sp/><ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>(),</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.operation<sp/>=<sp/><ref refid="class_k_win_1_1_color_matrix" kindref="compound">ColorMatrix</ref>(mat),</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.output<sp/>=<sp/>output,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QMatrix4x4<sp/>s_toICtCp<sp/>=<sp/>QMatrix4x4(</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>2048.0<sp/>/<sp/>4096.0,<sp/>2048.0<sp/>/<sp/>4096.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>6610.0<sp/>/<sp/>4096.0,<sp/>-13613.0<sp/>/<sp/>4096.0,<sp/>7003.0<sp/>/<sp/>4096.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>17933.0<sp/>/<sp/>4096.0,<sp/>-17390.0<sp/>/<sp/>4096.0,<sp/>-543.0<sp/>/<sp/>4096.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QMatrix4x4<sp/>s_fromICtCp<sp/>=<sp/>s_toICtCp.inverted();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="class_k_win_1_1_color_pipeline_1a1e02f2e9770f16f0ce5c038afaced8ca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_pipeline_1a1e02f2e9770f16f0ce5c038afaced8ca" kindref="member">ColorPipeline::addTonemapper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref><sp/>&amp;containerColorimetry,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>referenceLuminance,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxInputLuminance,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxOutputLuminance)</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>from<sp/>rgb<sp/>to<sp/>ICtCp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a1a13808050915cb631114e3a8da47bed" kindref="member">addMatrix</ref>(containerColorimetry.<ref refid="class_k_win_1_1_colorimetry_1a3d5266239c4f0e12609f7b811c582012" kindref="member">toLMS</ref>(),<sp/><ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>());</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_transfer_function" kindref="compound">TransferFunction</ref><sp/>PQ(<ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13a326f23a55a0039ee6a7130470b8b8779" kindref="member">TransferFunction::PerceptualQuantizer</ref>,<sp/>0,<sp/>10&apos;000);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a1c7c2fdde86e5f2880cd79f3360aa74a" kindref="member">addInverseTransferFunction</ref>(PQ);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a1a13808050915cb631114e3a8da47bed" kindref="member">addMatrix</ref>(s_toICtCp,<sp/><ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>());</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>the<sp/>tone<sp/>mapping<sp/>to<sp/>the<sp/>intensity<sp/>component</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.push_back(<ref refid="class_k_win_1_1_color_op" kindref="compound">ColorOp</ref>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.input<sp/>=<sp/><ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>(),</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.operation<sp/>=<sp/><ref refid="class_k_win_1_1_color_tonemapper" kindref="compound">ColorTonemapper</ref>(referenceLuminance,<sp/>maxInputLuminance,<sp/>maxOutputLuminance),</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.output<sp/>=<sp/><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.min<sp/>=<sp/>PQ.<ref refid="class_k_win_1_1_transfer_function_1aa75fbf3835336cb5c96cc14fd93541a1" kindref="member">nitsToEncoded</ref>(<ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>().min),</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.max<sp/>=<sp/>PQ.<ref refid="class_k_win_1_1_transfer_function_1aa75fbf3835336cb5c96cc14fd93541a1" kindref="member">nitsToEncoded</ref>(maxOutputLuminance),</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>back<sp/>to<sp/>rgb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a1a13808050915cb631114e3a8da47bed" kindref="member">addMatrix</ref>(s_fromICtCp,<sp/><ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>());</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a19886bf5733f4b91578fc0a9adea657d" kindref="member">addTransferFunction</ref>(PQ);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a1a13808050915cb631114e3a8da47bed" kindref="member">addMatrix</ref>(containerColorimetry.<ref refid="class_k_win_1_1_colorimetry_1a33150c30052465982b9c71b15fd4005a" kindref="member">fromLMS</ref>(),<sp/><ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>());</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="class_k_win_1_1_color_pipeline_1a71f3dacf8c3534d493eae8adbec15cf4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_pipeline_1a71f3dacf8c3534d493eae8adbec15cf4" kindref="member">ColorPipeline::add1DLUT</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ColorTransformation&gt;<sp/>&amp;transform)</highlight></codeline>
<codeline lineno="268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>min<sp/>=<sp/>transform-&gt;transform(QVector3D(<ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>().min,<sp/><ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>().min,<sp/><ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>().min));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>transform-&gt;transform(QVector3D(<ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>().max,<sp/><ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>().max,<sp/><ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>().max));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.push_back(<ref refid="class_k_win_1_1_color_op" kindref="compound">ColorOp</ref>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.input<sp/>=<sp/><ref refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" kindref="member">currentOutputRange</ref>(),</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.operation<sp/>=<sp/>transform,</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.output<sp/>=<sp/><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.min<sp/>=<sp/>std::min({min.x(),<sp/>min.y(),<sp/>min.z()}),</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.max<sp/>=<sp/>std::max({max.x(),<sp/>max.y(),<sp/>max.z()}),</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="class_k_win_1_1_color_pipeline_1a8cbbe19361783f5809ea8a6511a1ed18" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_pipeline_1a8cbbe19361783f5809ea8a6511a1ed18" kindref="member">ColorPipeline::isIdentity</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="282"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.empty();</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="class_k_win_1_1_color_pipeline_1a403fcdd3276b94a1daa752933fdf0beb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_pipeline_1a403fcdd3276b94a1daa752933fdf0beb" kindref="member">ColorPipeline::add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_op" kindref="compound">ColorOp</ref><sp/>&amp;op)</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mat<sp/>=<sp/>std::get_if&lt;ColorMatrix&gt;(&amp;op.<ref refid="class_k_win_1_1_color_op_1a0e5fd273177b549f312a92499cdbb330" kindref="member">operation</ref>))<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a1a13808050915cb631114e3a8da47bed" kindref="member">addMatrix</ref>(mat-&gt;mat,<sp/>op.<ref refid="class_k_win_1_1_color_op_1ae5edd877718c031f47ab6f87e3373774" kindref="member">output</ref>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mult<sp/>=<sp/>std::get_if&lt;ColorMultiplier&gt;(&amp;op.<ref refid="class_k_win_1_1_color_op_1a0e5fd273177b549f312a92499cdbb330" kindref="member">operation</ref>))<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1af2cf9448e1f66763a20ef4feadae8d76" kindref="member">addMultiplier</ref>(mult-&gt;factors);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tf<sp/>=<sp/>std::get_if&lt;ColorTransferFunction&gt;(&amp;op.<ref refid="class_k_win_1_1_color_op_1a0e5fd273177b549f312a92499cdbb330" kindref="member">operation</ref>))<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a19886bf5733f4b91578fc0a9adea657d" kindref="member">addTransferFunction</ref>(tf-&gt;tf);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tf<sp/>=<sp/>std::get_if&lt;InverseColorTransferFunction&gt;(&amp;op.<ref refid="class_k_win_1_1_color_op_1a0e5fd273177b549f312a92499cdbb330" kindref="member">operation</ref>))<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a1c7c2fdde86e5f2880cd79f3360aa74a" kindref="member">addInverseTransferFunction</ref>(tf-&gt;tf);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.push_back(op);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="class_k_win_1_1_color_pipeline_1a59ad6d64f40c1bdcdd927dc78f329903" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_pipeline_1a403fcdd3276b94a1daa752933fdf0beb" kindref="member">ColorPipeline::add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_pipeline_1adc324592f8f50b7126ebd3b2dfb9da27" kindref="member">ColorPipeline</ref><sp/>&amp;pipeline)</highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;op<sp/>:<sp/>pipeline.<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1a403fcdd3276b94a1daa752933fdf0beb" kindref="member">add</ref>(op);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="class_k_win_1_1_color_pipeline_1a5777bff889b79c54c61f14cd5015b3d9" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_color_pipeline_1adc324592f8f50b7126ebd3b2dfb9da27" kindref="member">ColorPipeline</ref><sp/><ref refid="class_k_win_1_1_color_pipeline_1a5777bff889b79c54c61f14cd5015b3d9" kindref="member">ColorPipeline::merged</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_pipeline_1adc324592f8f50b7126ebd3b2dfb9da27" kindref="member">ColorPipeline</ref><sp/>&amp;onTop)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="309"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline_1adc324592f8f50b7126ebd3b2dfb9da27" kindref="member">ColorPipeline</ref><sp/>ret{<ref refid="class_k_win_1_1_color_pipeline_1a44789e08dce965c9351e9d04d1073074" kindref="member">inputRange</ref>};</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.ops<sp/>=<sp/><ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;op<sp/>:<sp/>onTop.<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.add(op);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="class_k_win_1_1_color_pipeline_1a382839d2ce1a87b70a1a93d23799384d" refkind="member"><highlight class="normal">QVector3D<sp/><ref refid="class_k_win_1_1_color_pipeline_1a382839d2ce1a87b70a1a93d23799384d" kindref="member">ColorPipeline::evaluate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QVector3D<sp/>&amp;<ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="319"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>QVector3D<sp/>ret<sp/>=<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;op<sp/>:<sp/><ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mat<sp/>=<sp/>std::get_if&lt;ColorMatrix&gt;(&amp;op.operation))<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>mat-&gt;mat<sp/>*<sp/>ret;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mult<sp/>=<sp/>std::get_if&lt;ColorMultiplier&gt;(&amp;op.operation))<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>*=<sp/>mult-&gt;factors;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tf<sp/>=<sp/>std::get_if&lt;ColorTransferFunction&gt;(&amp;op.operation))<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>tf-&gt;tf.encodedToNits(ret);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tf<sp/>=<sp/>std::get_if&lt;InverseColorTransferFunction&gt;(&amp;op.operation))<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>tf-&gt;tf.nitsToEncoded(ret);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tonemap<sp/>=<sp/>std::get_if&lt;ColorTonemapper&gt;(&amp;op.operation))<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.setX(tonemap-&gt;map(ret.x()));</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>transform1D<sp/>=<sp/>std::get_if&lt;std::shared_ptr&lt;ColorTransformation&gt;&gt;(&amp;op.operation))<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>(*transform1D)-&gt;transform(ret);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>transform3D<sp/>=<sp/>std::get_if&lt;std::shared_ptr&lt;ColorLUT3D&gt;&gt;(&amp;op.operation))<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>(*transform3D)-&gt;sample(ret);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341" refid="class_k_win_1_1_color_transfer_function_1a87e6019225bb6f3c24fe9cf765242e3f" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_color_transfer_function_1a87e6019225bb6f3c24fe9cf765242e3f" kindref="member">ColorTransferFunction::ColorTransferFunction</ref>(<ref refid="class_k_win_1_1_transfer_function" kindref="compound">TransferFunction</ref><sp/><ref refid="class_k_win_1_1_color_transfer_function_1acdcb13152bc11c4c5044b85f2b69c800" kindref="member">tf</ref>)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_color_transfer_function_1acdcb13152bc11c4c5044b85f2b69c800" kindref="member">tf</ref>(<ref refid="class_k_win_1_1_color_transfer_function_1acdcb13152bc11c4c5044b85f2b69c800" kindref="member">tf</ref>)</highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="class_k_win_1_1_inverse_color_transfer_function_1a2838bfd70a256998a9299d27c498cce9" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_inverse_color_transfer_function_1a2838bfd70a256998a9299d27c498cce9" kindref="member">InverseColorTransferFunction::InverseColorTransferFunction</ref>(<ref refid="class_k_win_1_1_transfer_function" kindref="compound">TransferFunction</ref><sp/><ref refid="class_k_win_1_1_inverse_color_transfer_function_1a38174494c5c910ac44885be55ce87351" kindref="member">tf</ref>)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_inverse_color_transfer_function_1a38174494c5c910ac44885be55ce87351" kindref="member">tf</ref>(<ref refid="class_k_win_1_1_inverse_color_transfer_function_1a38174494c5c910ac44885be55ce87351" kindref="member">tf</ref>)</highlight></codeline>
<codeline lineno="348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="class_k_win_1_1_color_matrix_1ab6f17ba7b53c898997d4216c0ce0a023" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_color_matrix_1ab6f17ba7b53c898997d4216c0ce0a023" kindref="member">ColorMatrix::ColorMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QMatrix4x4<sp/>&amp;<ref refid="class_k_win_1_1_color_matrix_1a5054ad65c2165d05bddd384300a35f3f" kindref="member">mat</ref>)</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_color_matrix_1a5054ad65c2165d05bddd384300a35f3f" kindref="member">mat</ref>(<ref refid="class_k_win_1_1_color_matrix_1a5054ad65c2165d05bddd384300a35f3f" kindref="member">mat</ref>)</highlight></codeline>
<codeline lineno="353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="class_k_win_1_1_color_multiplier_1a91caa20d4fa0a607af7d1ce0fb110ac9" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_color_multiplier_1a3d95dfef5d50b49633b6b1465ff9295f" kindref="member">ColorMultiplier::ColorMultiplier</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QVector3D<sp/>&amp;<ref refid="class_k_win_1_1_color_multiplier_1aa72c6bbdda98658807aaa0b7e35f60b8" kindref="member">factors</ref>)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_color_multiplier_1aa72c6bbdda98658807aaa0b7e35f60b8" kindref="member">factors</ref>(<ref refid="class_k_win_1_1_color_multiplier_1aa72c6bbdda98658807aaa0b7e35f60b8" kindref="member">factors</ref>)</highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361" refid="class_k_win_1_1_color_multiplier_1a3d95dfef5d50b49633b6b1465ff9295f" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_color_multiplier_1a3d95dfef5d50b49633b6b1465ff9295f" kindref="member">ColorMultiplier::ColorMultiplier</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>factor)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_color_multiplier_1aa72c6bbdda98658807aaa0b7e35f60b8" kindref="member">factors</ref>(factor,<sp/>factor,<sp/>factor)</highlight></codeline>
<codeline lineno="363"><highlight class="normal">{</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366" refid="class_k_win_1_1_color_tonemapper_1ab9b6eb4142efad5122b4c77b1bec7879" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_color_tonemapper_1ab9b6eb4142efad5122b4c77b1bec7879" kindref="member">ColorTonemapper::ColorTonemapper</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>referenceLuminance,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxInputLuminance,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxOutputLuminance)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_color_tonemapper_1aac37562efe903a6ba122dac79e81d488" kindref="member">m_inputReferenceLuminance</ref>(referenceLuminance)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_k_win_1_1_color_tonemapper_1ad553dd923b80f7064e3b1d74628fd3f4" kindref="member">m_maxInputLuminance</ref>(maxInputLuminance)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_k_win_1_1_color_tonemapper_1a0f27c04a4af48e64208c1c4398d2cb3c" kindref="member">m_maxOutputLuminance</ref>(maxOutputLuminance)</highlight></codeline>
<codeline lineno="370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_tonemapper_1a4af927dee14cf053b69a0192c268c3b8" kindref="member">m_inputRange</ref><sp/>=<sp/>maxInputLuminance<sp/>/<sp/>referenceLuminance;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>outputRange<sp/>=<sp/>maxOutputLuminance<sp/>/<sp/>referenceLuminance;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>how<sp/>much<sp/>range<sp/>we<sp/>need<sp/>to<sp/>at<sp/>least<sp/>decently<sp/>present<sp/>the<sp/>content</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>50%<sp/>HDR<sp/>headroom<sp/>should<sp/>be<sp/>enough<sp/>for<sp/>the<sp/>tone<sp/>mapper<sp/>to<sp/>do<sp/>a<sp/>good<sp/>enough<sp/>job,<sp/>without<sp/>dimming<sp/>the<sp/>image<sp/>too<sp/>much</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minDecentRange<sp/>=<sp/>std::clamp(<ref refid="class_k_win_1_1_color_tonemapper_1a4af927dee14cf053b69a0192c268c3b8" kindref="member">m_inputRange</ref>,<sp/>1.0,<sp/>1.5);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>output<sp/>doesn&apos;t<sp/>provide<sp/>enough<sp/>HDR<sp/>headroom<sp/>for<sp/>the<sp/>tone<sp/>mapper<sp/>to<sp/>do<sp/>a<sp/>good<sp/>job,<sp/>dim<sp/>the<sp/>image<sp/>to<sp/>create<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_tonemapper_1a0e083e5a4f82a9568a8dba9b264cbf79" kindref="member">m_referenceDimming</ref><sp/>=<sp/>1.0<sp/>/<sp/>std::clamp(minDecentRange<sp/>/<sp/>outputRange,<sp/>1.0,<sp/>minDecentRange);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_tonemapper_1ab541deac62cdec49953c0a8c8d07a09c" kindref="member">m_outputReferenceLuminance</ref><sp/>=<sp/>referenceLuminance<sp/>*<sp/><ref refid="class_k_win_1_1_color_tonemapper_1a0e083e5a4f82a9568a8dba9b264cbf79" kindref="member">m_referenceDimming</ref>;</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381" refid="class_k_win_1_1_color_tonemapper_1a69aa696b0409375bf13178930ee7997b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_tonemapper_1a69aa696b0409375bf13178930ee7997b" kindref="member">ColorTonemapper::map</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pqEncodedLuminance)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="382"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>luminance<sp/>=<sp/><ref refid="class_k_win_1_1_transfer_function" kindref="compound">TransferFunction</ref>(<ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13a326f23a55a0039ee6a7130470b8b8779" kindref="member">TransferFunction::PerceptualQuantizer</ref>).<ref refid="class_k_win_1_1_transfer_function_1a227563617a0e7ecd4b33fb4f67d7f8fd" kindref="member">encodedToNits</ref>(pqEncodedLuminance);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>things<sp/>linear<sp/>up<sp/>to<sp/>the<sp/>reference<sp/>luminance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>low<sp/>=<sp/>std::min(luminance<sp/>*<sp/><ref refid="class_k_win_1_1_color_tonemapper_1a0e083e5a4f82a9568a8dba9b264cbf79" kindref="member">m_referenceDimming</ref>,<sp/><ref refid="class_k_win_1_1_color_tonemapper_1ab541deac62cdec49953c0a8c8d07a09c" kindref="member">m_outputReferenceLuminance</ref>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>apply<sp/>a<sp/>nonlinear<sp/>curve<sp/>above,<sp/>to<sp/>reduce<sp/>the<sp/>luminance<sp/>without<sp/>completely<sp/>removing<sp/>differences</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>relativeHighlight<sp/>=<sp/>std::clamp((luminance<sp/>/<sp/><ref refid="class_k_win_1_1_color_tonemapper_1aac37562efe903a6ba122dac79e81d488" kindref="member">m_inputReferenceLuminance</ref><sp/>-<sp/>1.0)<sp/>/<sp/>(<ref refid="class_k_win_1_1_color_tonemapper_1a4af927dee14cf053b69a0192c268c3b8" kindref="member">m_inputRange</ref><sp/>-<sp/>1.0),<sp/>0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>high<sp/>=<sp/>std::log(relativeHighlight<sp/>*<sp/>(std::numbers::e<sp/>-<sp/>1)<sp/>+<sp/>1)<sp/>*<sp/>(<ref refid="class_k_win_1_1_color_tonemapper_1a0f27c04a4af48e64208c1c4398d2cb3c" kindref="member">m_maxOutputLuminance</ref><sp/>-<sp/><ref refid="class_k_win_1_1_color_tonemapper_1ab541deac62cdec49953c0a8c8d07a09c" kindref="member">m_outputReferenceLuminance</ref>);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_transfer_function" kindref="compound">TransferFunction</ref>(<ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13a326f23a55a0039ee6a7130470b8b8779" kindref="member">TransferFunction::PerceptualQuantizer</ref>).<ref refid="class_k_win_1_1_transfer_function_1aa75fbf3835336cb5c96cc14fd93541a1" kindref="member">nitsToEncoded</ref>(low<sp/>+<sp/>high);</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="colorpipeline_8cpp_1acf9cf041a210946e63d87f86654f1805" refkind="member"><highlight class="normal">QDebug<sp/><ref refid="colorpipeline_8cpp_1acf9cf041a210946e63d87f86654f1805" kindref="member">operator&lt;&lt;</ref>(QDebug<sp/>debug,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_pipeline" kindref="compound">KWin::ColorPipeline</ref><sp/>&amp;pipeline)</highlight></codeline>
<codeline lineno="394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>debug<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ColorPipeline(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;op<sp/>:<sp/>pipeline.<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tf<sp/>=<sp/>std::get_if&lt;KWin::ColorTransferFunction&gt;(&amp;op.operation))<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug<sp/>&lt;&lt;<sp/>tf-&gt;tf;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tf<sp/>=<sp/>std::get_if&lt;KWin::InverseColorTransferFunction&gt;(&amp;op.operation))<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;inverse&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tf-&gt;tf;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mat<sp/>=<sp/>std::get_if&lt;KWin::ColorMatrix&gt;(&amp;op.operation))<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug<sp/>&lt;&lt;<sp/>mat-&gt;mat;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mult<sp/>=<sp/>std::get_if&lt;KWin::ColorMultiplier&gt;(&amp;op.operation))<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug<sp/>&lt;&lt;<sp/>mult-&gt;factors;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tonemap<sp/>=<sp/>std::get_if&lt;KWin::ColorTonemapper&gt;(&amp;op.operation))<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tonemapper(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tonemap-&gt;m_inputReferenceLuminance<sp/>&lt;&lt;<sp/>tonemap-&gt;m_maxInputLuminance<sp/>&lt;&lt;<sp/>tonemap-&gt;m_maxOutputLuminance<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::holds_alternative&lt;std::shared_ptr&lt;KWin::ColorTransformation&gt;&gt;(op.operation))<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;lut1d&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::holds_alternative&lt;std::shared_ptr&lt;KWin::ColorLUT3D&gt;&gt;(op.operation))<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;lut3d&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>debug<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>debug;</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="kwin/src/core/colorpipeline.cpp"/>
  </compounddef>
</doxygen>
