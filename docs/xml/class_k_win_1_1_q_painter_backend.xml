<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_q_painter_backend" kind="class" language="C++" prot="public">
    <compoundname>KWin::QPainterBackend</compoundname>
    <basecompoundref refid="class_k_win_1_1_render_backend" prot="public" virt="non-virtual">KWin::RenderBackend</basecompoundref>
    <derivedcompoundref refid="class_k_win_1_1_drm_q_painter_backend" prot="public" virt="non-virtual">KWin::DrmQPainterBackend</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_virtual_q_painter_backend" prot="public" virt="non-virtual">KWin::VirtualQPainterBackend</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend" prot="public" virt="non-virtual">KWin::Wayland::WaylandQPainterBackend</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_x11_windowed_q_painter_backend" prot="public" virt="non-virtual">KWin::X11WindowedQPainterBackend</derivedcompoundref>
    <includes refid="qpainterbackend_8h" local="no">qpainterbackend.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_q_painter_backend_1a1789ac0a8fbb1c0792f3ec4b3ec5a469" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::QPainterBackend::m_failed</definition>
        <argsstring></argsstring>
        <name>m_failed</name>
        <qualifiedname>KWin::QPainterBackend::m_failed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/platformsupport/scenes/qpainter/qpainterbackend.h" line="62" column="10" bodyfile="kwin/src/platformsupport/scenes/qpainter/qpainterbackend.h" bodystart="62" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_q_painter_backend_1aa9567039bb920bc977ac946de73944c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>KWin::QPainterBackend::~QPainterBackend</definition>
        <argsstring>()</argsstring>
        <name>~QPainterBackend</name>
        <qualifiedname>KWin::QPainterBackend::~QPainterBackend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/platformsupport/scenes/qpainter/qpainterbackend.h" line="30" column="13" bodyfile="kwin/src/platformsupport/scenes/qpainter/qpainterbackend.cpp" bodystart="23" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_q_painter_backend_1aa900b8b99a52720ee4a4755004dd223f" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="namespace_k_win_1aa1e33474a7077a13169f350a5949a79a" kindref="member">CompositingType</ref></type>
        <definition>CompositingType KWin::QPainterBackend::compositingType</definition>
        <argsstring>() const override final</argsstring>
        <name>compositingType</name>
        <qualifiedname>KWin::QPainterBackend::compositingType</qualifiedname>
        <reimplements refid="class_k_win_1_1_render_backend_1a84af4f818dd7b805d02ce523b8a5e7bc">compositingType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/platformsupport/scenes/qpainter/qpainterbackend.h" line="32" column="21" bodyfile="kwin/src/platformsupport/scenes/qpainter/qpainterbackend.cpp" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_q_painter_backend_1aff220169aa2dab357193134bcf2b2614" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_surface_texture" kindref="compound">SurfaceTexture</ref> &gt;</type>
        <definition>std::unique_ptr&lt; SurfaceTexture &gt; KWin::QPainterBackend::createSurfaceTextureWayland</definition>
        <argsstring>(SurfacePixmap *pixmap) override</argsstring>
        <name>createSurfaceTextureWayland</name>
        <qualifiedname>KWin::QPainterBackend::createSurfaceTextureWayland</qualifiedname>
        <reimplements refid="class_k_win_1_1_render_backend_1ae04af70cc6faab27ad41086935c2601c">createSurfaceTextureWayland</reimplements>
        <param>
          <type><ref refid="class_k_win_1_1_surface_pixmap" kindref="compound">SurfacePixmap</ref> *</type>
          <declname>pixmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/platformsupport/scenes/qpainter/qpainterbackend.h" line="34" column="21" bodyfile="kwin/src/platformsupport/scenes/qpainter/qpainterbackend.cpp" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_q_painter_backend_1a42d70b9b9256a11fe6b9cc9d22170330" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::QPainterBackend::isFailed</definition>
        <argsstring>() const</argsstring>
        <name>isFailed</name>
        <qualifiedname>KWin::QPainterBackend::isFailed</qualifiedname>
        <briefdescription>
<para>Whether the creation of the Backend failed. </para>
        </briefdescription>
        <detaileddescription>
<para>The SceneQPainter should test whether the Backend got constructed correctly. If this method returns <computeroutput>true</computeroutput>, the SceneQPainter should not try to start the rendering.</para>
<para><simplesect kind="return"><para>bool <computeroutput>true</computeroutput> if the creation of the Backend failed, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/platformsupport/scenes/qpainter/qpainterbackend.h" line="44" column="10" bodyfile="kwin/src/platformsupport/scenes/qpainter/qpainterbackend.h" bodystart="44" bodyend="47"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_k_win_1_1_q_painter_backend_1aea8d4b3476c2a0d7f05bfc31173e5dd5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::QPainterBackend::QPainterBackend</definition>
        <argsstring>()</argsstring>
        <name>QPainterBackend</name>
        <qualifiedname>KWin::QPainterBackend::QPainterBackend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/platformsupport/scenes/qpainter/qpainterbackend.h" line="50" column="5" bodyfile="kwin/src/platformsupport/scenes/qpainter/qpainterbackend.cpp" bodystart="18" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_q_painter_backend_1a360e5f99249f85996c4ba12cc3029e72" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::QPainterBackend::setFailed</definition>
        <argsstring>(const QString &amp;reason)</argsstring>
        <name>setFailed</name>
        <qualifiedname>KWin::QPainterBackend::setFailed</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
<para>Sets the backend initialization to failed. </para>
        </briefdescription>
        <detaileddescription>
<para>This method should be called by the concrete subclass in case the initialization failed. The given <computeroutput>reason</computeroutput> is logged as a warning.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>The reason why the initialization failed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/platformsupport/scenes/qpainter/qpainterbackend.h" line="59" column="10" bodyfile="kwin/src/platformsupport/scenes/qpainter/qpainterbackend.cpp" bodystart="37" bodyend="41"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>KWin::DrmQPainterBackend</label>
        <link refid="class_k_win_1_1_drm_q_painter_backend"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::QPainterBackend</label>
        <link refid="class_k_win_1_1_q_painter_backend"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>KWin::RenderBackend</label>
        <link refid="class_k_win_1_1_render_backend"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>KWin::VirtualQPainterBackend</label>
        <link refid="class_k_win_1_1_virtual_q_painter_backend"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>KWin::Wayland::WaylandQPainterBackend</label>
        <link refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>KWin::X11WindowedQPainterBackend</label>
        <link refid="class_k_win_1_1_x11_windowed_q_painter_backend"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>KWin::QPainterBackend</label>
        <link refid="class_k_win_1_1_q_painter_backend"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>KWin::RenderBackend</label>
        <link refid="class_k_win_1_1_render_backend"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/platformsupport/scenes/qpainter/qpainterbackend.h" line="25" column="1" bodyfile="kwin/src/platformsupport/scenes/qpainter/qpainterbackend.h" bodystart="26" bodyend="63"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_render_backend_1a995e6152b42f76691d296e99780ef707" prot="public" virt="virtual"><scope>KWin::QPainterBackend</scope><name>checkGraphicsReset</name></member>
      <member refid="class_k_win_1_1_q_painter_backend_1aa900b8b99a52720ee4a4755004dd223f" prot="public" virt="virtual"><scope>KWin::QPainterBackend</scope><name>compositingType</name></member>
      <member refid="class_k_win_1_1_q_painter_backend_1aff220169aa2dab357193134bcf2b2614" prot="public" virt="virtual"><scope>KWin::QPainterBackend</scope><name>createSurfaceTextureWayland</name></member>
      <member refid="class_k_win_1_1_render_backend_1abe178a184592ff07e972f4971de5f964" prot="public" virt="virtual"><scope>KWin::QPainterBackend</scope><name>cursorLayer</name></member>
      <member refid="class_k_win_1_1_render_backend_1a9135e39ee4f8aed8dcfd2771fe0a7773" prot="public" virt="virtual"><scope>KWin::QPainterBackend</scope><name>drmDevice</name></member>
      <member refid="class_k_win_1_1_q_painter_backend_1a42d70b9b9256a11fe6b9cc9d22170330" prot="public" virt="non-virtual"><scope>KWin::QPainterBackend</scope><name>isFailed</name></member>
      <member refid="class_k_win_1_1_q_painter_backend_1a1789ac0a8fbb1c0792f3ec4b3ec5a469" prot="private" virt="non-virtual"><scope>KWin::QPainterBackend</scope><name>m_failed</name></member>
      <member refid="class_k_win_1_1_render_backend_1ad9736308199d71cdd97755a111f5abbe" prot="public" virt="pure-virtual"><scope>KWin::QPainterBackend</scope><name>present</name></member>
      <member refid="class_k_win_1_1_render_backend_1a0862ffb5aba97ee2d82e6488e4d1471d" prot="public" virt="pure-virtual"><scope>KWin::QPainterBackend</scope><name>primaryLayer</name></member>
      <member refid="class_k_win_1_1_q_painter_backend_1aea8d4b3476c2a0d7f05bfc31173e5dd5" prot="protected" virt="non-virtual"><scope>KWin::QPainterBackend</scope><name>QPainterBackend</name></member>
      <member refid="class_k_win_1_1_render_backend_1a64651d2ee05d39d5e1df7391036198d8" prot="public" virt="virtual"><scope>KWin::QPainterBackend</scope><name>repairPresentation</name></member>
      <member refid="class_k_win_1_1_q_painter_backend_1a360e5f99249f85996c4ba12cc3029e72" prot="protected" virt="non-virtual"><scope>KWin::QPainterBackend</scope><name>setFailed</name></member>
      <member refid="class_k_win_1_1_render_backend_1aca3c178c2ab62c1b5f1074200b066c53" prot="public" virt="virtual"><scope>KWin::QPainterBackend</scope><name>supportedFormats</name></member>
      <member refid="class_k_win_1_1_render_backend_1a19fb9a934538fe684e8fe9725f253904" prot="public" virt="virtual"><scope>KWin::QPainterBackend</scope><name>testImportBuffer</name></member>
      <member refid="class_k_win_1_1_q_painter_backend_1aa9567039bb920bc977ac946de73944c4" prot="public" virt="virtual"><scope>KWin::QPainterBackend</scope><name>~QPainterBackend</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
