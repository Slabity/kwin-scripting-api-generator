<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="wayland__qpainter__backend_8cpp" kind="file" language="C++">
    <compoundname>wayland_qpainter_backend.cpp</compoundname>
    <includes refid="wayland__qpainter__backend_8h" local="yes">wayland_qpainter_backend.h</includes>
    <includes refid="graphicsbufferview_8h" local="yes">core/graphicsbufferview.h</includes>
    <includes refid="shmgraphicsbufferallocator_8h" local="yes">core/shmgraphicsbufferallocator.h</includes>
    <includes refid="qpainterswapchain_8h" local="yes">platformsupport/scenes/qpainter/qpainterswapchain.h</includes>
    <includes refid="wayland__backend_8h" local="yes">wayland_backend.h</includes>
    <includes refid="wayland__output_8h" local="yes">wayland_output.h</includes>
    <includes local="no">KWayland/Client/surface.h</includes>
    <includes local="no">cmath</includes>
    <includes local="no">drm_fourcc.h</includes>
    <includes local="no">wayland-client-protocol.h</includes>
    <includes local="yes">moc_wayland_qpainter_backend.cpp</includes>
    <incdepgraph>
      <node id="40">
        <label>wayland_backend.h</label>
        <link refid="wayland__backend_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>wayland_output.h</label>
        <link refid="wayland__output_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>kwin/src/backends/wayland/wayland_qpainter_backend.cpp</label>
        <link refid="wayland__qpainter__backend_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>wayland_qpainter_backend.h</label>
        <link refid="wayland__qpainter__backend_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>core/colorspace.h</label>
        <link refid="colorspace_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>core/graphicsbuffer.h</label>
        <link refid="graphicsbuffer_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>core/graphicsbufferallocator.h</label>
        <link refid="graphicsbufferallocator_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>core/graphicsbufferview.h</label>
        <link refid="graphicsbufferview_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>core/inputbackend.h</label>
        <link refid="inputbackend_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>core/inputdevice.h</label>
        <link refid="inputdevice_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>core/output.h</label>
        <link refid="core_2output_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>core/outputbackend.h</label>
        <link refid="outputbackend_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>core/outputlayer.h</label>
        <link refid="outputlayer_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>core/renderbackend.h</label>
        <link refid="renderbackend_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>renderloop.h</label>
        <link refid="renderloop_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>core/rendertarget.h</label>
        <link refid="rendertarget_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>core/shmgraphicsbufferallocator.h</label>
        <link refid="shmgraphicsbufferallocator_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>effect/globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>platformsupport/scenes/qpainter/qpainterbackend.h</label>
        <link refid="qpainterbackend_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>platformsupport/scenes/qpainter/qpainterswapchain.h</label>
        <link refid="qpainterswapchain_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>utils/damagejournal.h</label>
        <link refid="damagejournal_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>utils/edid.h</label>
        <link refid="edid_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>utils/filedescriptor.h</label>
        <link refid="filedescriptor_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>KSharedConfig</label>
      </node>
      <node id="50">
        <label>KWayland/Client/surface.h</label>
      </node>
      <node id="48">
        <label>KWayland/Client/xdgshell.h</label>
      </node>
      <node id="20">
        <label>QByteArray</label>
      </node>
      <node id="14">
        <label>QCoreApplication</label>
      </node>
      <node id="23">
        <label>QDebug</label>
      </node>
      <node id="46">
        <label>QHash</label>
      </node>
      <node id="15">
        <label>QImage</label>
      </node>
      <node id="21">
        <label>QList</label>
      </node>
      <node id="7">
        <label>QMatrix4x4</label>
      </node>
      <node id="18">
        <label>QObject</label>
      </node>
      <node id="16">
        <label>QPoint</label>
      </node>
      <node id="26">
        <label>QPointer</label>
      </node>
      <node id="24">
        <label>QRect</label>
      </node>
      <node id="27">
        <label>QRegion</label>
      </node>
      <node id="22">
        <label>QSize</label>
      </node>
      <node id="49">
        <label>QTimer</label>
      </node>
      <node id="25">
        <label>QUuid</label>
      </node>
      <node id="17">
        <label>QVariant</label>
      </node>
      <node id="8">
        <label>QVector2D</label>
      </node>
      <node id="28">
        <label>chrono</label>
      </node>
      <node id="51">
        <label>cmath</label>
      </node>
      <node id="13">
        <label>config-kwin.h</label>
      </node>
      <node id="52">
        <label>drm_fourcc.h</label>
      </node>
      <node id="45">
        <label>epoxy/egl.h</label>
      </node>
      <node id="9">
        <label>kwin_export.h</label>
      </node>
      <node id="32">
        <label>memory</label>
      </node>
      <node id="54">
        <label>moc_wayland_qpainter_backend.cpp</label>
      </node>
      <node id="6">
        <label>optional</label>
      </node>
      <node id="36">
        <label>utility</label>
      </node>
      <node id="53">
        <label>wayland-client-protocol.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_k_win">KWin</innernamespace>
    <innernamespace refid="namespace_k_win_1_1_wayland">KWin::Wayland</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>KWin<sp/>-<sp/>the<sp/>KDE<sp/>window<sp/>manager</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>KDE<sp/>project.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2019<sp/>Roman<sp/>Gilg<sp/>&lt;subdiff@gmail.com&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2013,<sp/>2015<sp/>Martin<sp/>Gräßlin<sp/>&lt;mgraesslin@kde.org&gt;</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wayland__qpainter__backend_8h" kindref="compound">wayland_qpainter_backend.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="graphicsbufferview_8h" kindref="compound">core/graphicsbufferview.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shmgraphicsbufferallocator_8h" kindref="compound">core/shmgraphicsbufferallocator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="qpainterswapchain_8h" kindref="compound">platformsupport/scenes/qpainter/qpainterswapchain.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wayland__backend_8h" kindref="compound">wayland_backend.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wayland__output_8h" kindref="compound">wayland_output.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/surface.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drm_fourcc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wayland-client-protocol.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win" kindref="compound">KWin</ref></highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref></highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_primary_layer_1a88c2e79deeb6739004293e91cf0d22be" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_primary_layer_1a88c2e79deeb6739004293e91cf0d22be" kindref="member">WaylandQPainterPrimaryLayer::WaylandQPainterPrimaryLayer</ref>(<ref refid="class_k_win_1_1_wayland_1_1_wayland_output" kindref="compound">WaylandOutput</ref><sp/>*output,<sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_primary_layer_1a7b6b398fd4d27266b8e86c6c408ad351" kindref="member">WaylandQPainterBackend</ref><sp/>*backend)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_output_layer_1a9ee261bca4012bac914df29d5ebf4117" kindref="member">OutputLayer</ref>(output)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_waylandOutput(output)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_backend(backend)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_primary_layer_1afd5f9524fea478083b16f8c4e515390d" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_primary_layer_1afd5f9524fea478083b16f8c4e515390d" kindref="member">WaylandQPainterPrimaryLayer::~WaylandQPainterPrimaryLayer</ref>()</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_primary_layer_1a4352eda50dc3e789693aa41c473d7cde" refkind="member"><highlight class="normal">QRegion<sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_primary_layer_1a4352eda50dc3e789693aa41c473d7cde" kindref="member">WaylandQPainterPrimaryLayer::accumulateDamage</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufferAge)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="40"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_damageJournal.accumulate(bufferAge,<sp/><ref refid="namespace_k_win_1a0655524c1f1ba8dbb2cf16a1e4b9bb97" kindref="member">infiniteRegion</ref>());</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_primary_layer_1ae8e5e56033d0b2eb99b3389f19176e05" refkind="member"><highlight class="normal">std::optional&lt;OutputLayerBeginFrameInfo&gt;<sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_primary_layer_1ae8e5e56033d0b2eb99b3389f19176e05" kindref="member">WaylandQPainterPrimaryLayer::doBeginFrame</ref>()</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QSize<sp/>nativeSize(m_waylandOutput-&gt;modeSize());</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_swapchain<sp/>||<sp/>m_swapchain-&gt;size()<sp/>!=<sp/>nativeSize)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_swapchain<sp/>=<sp/>std::make_unique&lt;QPainterSwapchain&gt;(m_backend-&gt;graphicsBufferAllocator(),<sp/>nativeSize,<sp/>DRM_FORMAT_XRGB8888);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>m_back<sp/>=<sp/>m_swapchain-&gt;acquire();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_back)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>m_renderTime<sp/>=<sp/>std::make_unique&lt;CpuRenderTimeQuery&gt;();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_output_layer_begin_frame_info" kindref="compound">OutputLayerBeginFrameInfo</ref>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.renderTarget<sp/>=<sp/><ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref>(m_back-&gt;view()-&gt;image(),<sp/><ref refid="class_k_win_1_1_output_layer_1a9b035f27d0ea567a73bf27f9ef82f744" kindref="member">m_output</ref>-&gt;colorDescription()),</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.repaint<sp/>=<sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_primary_layer_1a4352eda50dc3e789693aa41c473d7cde" kindref="member">accumulateDamage</ref>(m_back-&gt;age()),</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_primary_layer_1ab0b5a981b36019aa242ecaef8accadfb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_primary_layer_1ab0b5a981b36019aa242ecaef8accadfb" kindref="member">WaylandQPainterPrimaryLayer::doEndFrame</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegion<sp/>&amp;renderedRegion,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegion<sp/>&amp;damagedRegion,<sp/><ref refid="class_k_win_1_1_output_frame" kindref="compound">OutputFrame</ref><sp/>*frame)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>m_renderTime-&gt;end();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>frame-&gt;<ref refid="class_k_win_1_1_output_frame_1aaede3e4b1639e0772c87e0105e49981f" kindref="member">addRenderTimeQuery</ref>(std::move(m_renderTime));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>m_damageJournal.add(damagedRegion);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>m_waylandOutput-&gt;setPrimaryBuffer(m_waylandOutput-&gt;backend()-&gt;importBuffer(m_back-&gt;buffer()));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>m_swapchain-&gt;release(m_back);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_primary_layer_1a2df80abaa96ecfae0d8bede10926883b" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_drm_device" kindref="compound">DrmDevice</ref><sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_primary_layer_1a2df80abaa96ecfae0d8bede10926883b" kindref="member">WaylandQPainterPrimaryLayer::scanoutDevice</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="74"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_backend-&gt;drmDevice();</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_primary_layer_1a04fc92e3f2eeec67e4e213818b86b3c2" refkind="member"><highlight class="normal">QHash&lt;uint32_t,<sp/>QList&lt;uint64_t&gt;&gt;<sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_primary_layer_1a04fc92e3f2eeec67e4e213818b86b3c2" kindref="member">WaylandQPainterPrimaryLayer::supportedDrmFormats</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="79"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{{DRM_FORMAT_ARGB8888,<sp/>{DRM_FORMAT_MOD_LINEAR}}};</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_cursor_layer_1ab025308b13a1bb51ccd7d5b4626c55a5" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_cursor_layer_1ab025308b13a1bb51ccd7d5b4626c55a5" kindref="member">WaylandQPainterCursorLayer::WaylandQPainterCursorLayer</ref>(<ref refid="class_k_win_1_1_wayland_1_1_wayland_output" kindref="compound">WaylandOutput</ref><sp/>*output,<sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend" kindref="compound">WaylandQPainterBackend</ref><sp/>*backend)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_output_layer_1a9ee261bca4012bac914df29d5ebf4117" kindref="member">OutputLayer</ref>(output)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_backend(backend)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_cursor_layer_1a4b5e3ae887f80a0959767a59f91bbe3e" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_cursor_layer_1a4b5e3ae887f80a0959767a59f91bbe3e" kindref="member">WaylandQPainterCursorLayer::~WaylandQPainterCursorLayer</ref>()</highlight></codeline>
<codeline lineno="90"><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_cursor_layer_1af40a33c0ac973d90b68d699fdd10f77b" refkind="member"><highlight class="normal">std::optional&lt;OutputLayerBeginFrameInfo&gt;<sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_cursor_layer_1af40a33c0ac973d90b68d699fdd10f77b" kindref="member">WaylandQPainterCursorLayer::doBeginFrame</ref>()</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/><ref refid="class_k_win_1_1_output_layer_1a55b2e80edaf7ad94832884608aca8042" kindref="member">targetRect</ref>().size().expandedTo(QSize(64,<sp/>64));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QSize<sp/>bufferSize(std::ceil(tmp.width()),<sp/>std::ceil(tmp.height()));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_swapchain<sp/>||<sp/>m_swapchain-&gt;size()<sp/>!=<sp/>bufferSize)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_swapchain<sp/>=<sp/>std::make_unique&lt;QPainterSwapchain&gt;(m_backend-&gt;graphicsBufferAllocator(),<sp/>bufferSize,<sp/>DRM_FORMAT_ARGB8888);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>m_back<sp/>=<sp/>m_swapchain-&gt;acquire();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_back)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>m_renderTime<sp/>=<sp/>std::make_unique&lt;CpuRenderTimeQuery&gt;();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_output_layer_begin_frame_info" kindref="compound">OutputLayerBeginFrameInfo</ref>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.renderTarget<sp/>=<sp/><ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref>(m_back-&gt;view()-&gt;image()),</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.repaint<sp/>=<sp/><ref refid="namespace_k_win_1a0655524c1f1ba8dbb2cf16a1e4b9bb97" kindref="member">infiniteRegion</ref>(),</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_cursor_layer_1a479ffc8dab2b545d4c00324a820f5b77" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_cursor_layer_1a479ffc8dab2b545d4c00324a820f5b77" kindref="member">WaylandQPainterCursorLayer::doEndFrame</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegion<sp/>&amp;renderedRegion,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegion<sp/>&amp;damagedRegion,<sp/><ref refid="class_k_win_1_1_output_frame" kindref="compound">OutputFrame</ref><sp/>*frame)</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frame)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame-&gt;<ref refid="class_k_win_1_1_output_frame_1aaede3e4b1639e0772c87e0105e49981f" kindref="member">addRenderTimeQuery</ref>(std::move(m_renderTime));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_buffer<sp/>*buffer<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_output" kindref="compound">WaylandOutput</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_k_win_1_1_output_layer_1a9b035f27d0ea567a73bf27f9ef82f744" kindref="member">m_output</ref>)-&gt;backend()-&gt;importBuffer(m_back-&gt;buffer());</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_ASSERT(buffer);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_output" kindref="compound">WaylandOutput</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_k_win_1_1_output_layer_1a9b035f27d0ea567a73bf27f9ef82f744" kindref="member">m_output</ref>)-&gt;cursor()-&gt;update(buffer,<sp/><ref refid="class_k_win_1_1_output_layer_1a75cc900617e49a9125da7bf26f3ab986" kindref="member">scale</ref>(),<sp/><ref refid="class_k_win_1_1_output_layer_1ab5b0f0faaea0c7e881db718a64658dc0" kindref="member">hotspot</ref>().toPoint());</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>m_swapchain-&gt;release(m_back);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_cursor_layer_1a5ac103e6eacebfd85c121d07ee76e27d" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_drm_device" kindref="compound">DrmDevice</ref><sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_cursor_layer_1a5ac103e6eacebfd85c121d07ee76e27d" kindref="member">WaylandQPainterCursorLayer::scanoutDevice</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="127"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_backend-&gt;drmDevice();</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_cursor_layer_1a057f3ca5070aaa1e62e653f0f0f08251" refkind="member"><highlight class="normal">QHash&lt;uint32_t,<sp/>QList&lt;uint64_t&gt;&gt;<sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_cursor_layer_1a057f3ca5070aaa1e62e653f0f0f08251" kindref="member">WaylandQPainterCursorLayer::supportedDrmFormats</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="132"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{{DRM_FORMAT_ARGB8888,<sp/>{DRM_FORMAT_MOD_LINEAR}}};</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a25edad794a7518bc2695a30e07093a4e" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a25edad794a7518bc2695a30e07093a4e" kindref="member">WaylandQPainterBackend::WaylandQPainterBackend</ref>(<ref refid="class_k_win_1_1_wayland_1_1_wayland_backend" kindref="compound">Wayland::WaylandBackend</ref><sp/>*b)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_q_painter_backend_1aea8d4b3476c2a0d7f05bfc31173e5dd5" kindref="member">QPainterBackend</ref>()</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_backend(b)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_allocator(std::make_unique&lt;<ref refid="class_k_win_1_1_shm_graphics_buffer_allocator" kindref="compound">ShmGraphicsBufferAllocator</ref>&gt;())</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>waylandOutputs<sp/>=<sp/>m_backend-&gt;waylandOutputs();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*output<sp/>:<sp/>waylandOutputs)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createOutput(output);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(m_backend,<sp/>&amp;<ref refid="class_k_win_1_1_output_backend_1a220e64d9c811434825b3c3bf1b28f947" kindref="member">WaylandBackend::outputAdded</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;WaylandQPainterBackend::createOutput);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(m_backend,<sp/>&amp;<ref refid="class_k_win_1_1_output_backend_1a8f804420de03806fd046f99e80ee8332" kindref="member">WaylandBackend::outputRemoved</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](<ref refid="class_k_win_1_1_output" kindref="compound">Output</ref><sp/>*waylandOutput)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_outputs.erase(waylandOutput);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a6683a87d28008befc871fea6d2807592" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a6683a87d28008befc871fea6d2807592" kindref="member">WaylandQPainterBackend::~WaylandQPainterBackend</ref>()</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WaylandQPainterBackend::createOutput(<ref refid="class_k_win_1_1_output" kindref="compound">Output</ref><sp/>*waylandOutput)</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>m_outputs[waylandOutput]<sp/>=<sp/>Layers{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.primaryLayer<sp/>=<sp/>std::make_unique&lt;WaylandQPainterPrimaryLayer&gt;(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_output" kindref="compound">WaylandOutput</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(waylandOutput),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.cursorLayer<sp/>=<sp/>std::make_unique&lt;WaylandQPainterCursorLayer&gt;(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_output" kindref="compound">WaylandOutput</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(waylandOutput),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1aaed8734b3a2b36f5580fdfae0390212a" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_graphics_buffer_allocator" kindref="compound">GraphicsBufferAllocator</ref><sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1aaed8734b3a2b36f5580fdfae0390212a" kindref="member">WaylandQPainterBackend::graphicsBufferAllocator</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="165"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_allocator.get();</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a2783fd1ddb47a5c623928ed405a6e389" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a2783fd1ddb47a5c623928ed405a6e389" kindref="member">WaylandQPainterBackend::present</ref>(<ref refid="class_k_win_1_1_output" kindref="compound">Output</ref><sp/>*output,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;OutputFrame&gt;<sp/>&amp;frame)</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_output" kindref="compound">WaylandOutput</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(output)-&gt;<ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a2783fd1ddb47a5c623928ed405a6e389" kindref="member">present</ref>(frame);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a051124ccefff0581ac7dde354eaf03ac" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_output_layer" kindref="compound">OutputLayer</ref><sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a051124ccefff0581ac7dde354eaf03ac" kindref="member">WaylandQPainterBackend::primaryLayer</ref>(<ref refid="class_k_win_1_1_output" kindref="compound">Output</ref><sp/>*output)</highlight></codeline>
<codeline lineno="176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_outputs[output].primaryLayer.get();</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1ad043ca14ccf880e10a4c42c58be88316" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_output_layer" kindref="compound">OutputLayer</ref><sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1ad043ca14ccf880e10a4c42c58be88316" kindref="member">WaylandQPainterBackend::cursorLayer</ref>(<ref refid="class_k_win_1_1_output" kindref="compound">Output</ref><sp/>*output)</highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_outputs[output].cursorLayer.get();</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;moc_wayland_qpainter_backend.cpp&quot;</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="kwin/src/backends/wayland/wayland_qpainter_backend.cpp"/>
  </compounddef>
</doxygen>
