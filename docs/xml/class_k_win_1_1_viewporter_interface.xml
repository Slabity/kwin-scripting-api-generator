<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_viewporter_interface" kind="class" language="C++" prot="public">
    <compoundname>KWin::ViewporterInterface</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QObject</basecompoundref>
    <includes refid="viewporter_8h" local="no">viewporter.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_viewporter_interface_1a3ec180fb74a7db55a95a00464d1998b1" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_viewporter_interface_private" kindref="compound">ViewporterInterfacePrivate</ref> &gt;</type>
        <definition>std::unique_ptr&lt;ViewporterInterfacePrivate&gt; KWin::ViewporterInterface::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <qualifiedname>KWin::ViewporterInterface::d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/viewporter.h" line="36" column="21" bodyfile="kwin/src/wayland/viewporter.h" bodystart="36" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_viewporter_interface_1a4f9d14aae9af76973e9bddd6cb6463d8" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::ViewporterInterface::ViewporterInterface</definition>
        <argsstring>(Display *display, QObject *parent=nullptr)</argsstring>
        <name>ViewporterInterface</name>
        <qualifiedname>KWin::ViewporterInterface::ViewporterInterface</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_display" kindref="compound">Display</ref> *</type>
          <declname>display</declname>
        </param>
        <param>
          <type>QObject *</type>
          <declname>parent</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/viewporter.h" line="32" column="14" bodyfile="kwin/src/wayland/viewporter.cpp" bodystart="135" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_viewporter_interface_1a34d4774f5036f8e8c8533956aab92594" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::ViewporterInterface::~ViewporterInterface</definition>
        <argsstring>() override</argsstring>
        <name>~ViewporterInterface</name>
        <qualifiedname>KWin::ViewporterInterface::~ViewporterInterface</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/viewporter.h" line="33" column="5" bodyfile="kwin/src/wayland/viewporter.cpp" bodystart="142" bodyend="144"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="class_k_win_1_1_viewporter_interface" kindref="compound">ViewporterInterface</ref> is an extension that allows clients to crop and scale surfaces.</para>
<para>The <ref refid="class_k_win_1_1_viewporter_interface" kindref="compound">ViewporterInterface</ref> extensions provides a way for <ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref> clients to crop and scale their surfaces. This effectively breaks the direct connection between the buffer and the surface size.</para>
<para><ref refid="class_k_win_1_1_viewporter_interface" kindref="compound">ViewporterInterface</ref> corresponds to the <ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref> interface <computeroutput>wp_viewporter</computeroutput>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>KWin::ViewporterInterface</label>
        <link refid="class_k_win_1_1_viewporter_interface"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>KWin::ViewporterInterface</label>
        <link refid="class_k_win_1_1_viewporter_interface"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/wayland/viewporter.h" line="27" column="1" bodyfile="kwin/src/wayland/viewporter.h" bodystart="28" bodyend="37"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_viewporter_interface_1a3ec180fb74a7db55a95a00464d1998b1" prot="private" virt="non-virtual"><scope>KWin::ViewporterInterface</scope><name>d</name></member>
      <member refid="class_k_win_1_1_viewporter_interface_1a4f9d14aae9af76973e9bddd6cb6463d8" prot="public" virt="non-virtual"><scope>KWin::ViewporterInterface</scope><name>ViewporterInterface</name></member>
      <member refid="class_k_win_1_1_viewporter_interface_1a34d4774f5036f8e8c8533956aab92594" prot="public" virt="non-virtual"><scope>KWin::ViewporterInterface</scope><name>~ViewporterInterface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
