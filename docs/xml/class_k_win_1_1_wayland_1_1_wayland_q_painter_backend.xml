<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend" kind="class" language="C++" prot="public">
    <compoundname>KWin::Wayland::WaylandQPainterBackend</compoundname>
    <basecompoundref refid="class_k_win_1_1_q_painter_backend" prot="public" virt="non-virtual">KWin::QPainterBackend</basecompoundref>
    <includes refid="wayland__qpainter__backend_8h" local="no">wayland_qpainter_backend.h</includes>
    <innerclass refid="struct_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1_1_layers" prot="private">KWin::Wayland::WaylandQPainterBackend::Layers</innerclass>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1ac3ccfbe9934bda89e66e19ed7679a68b" prot="private" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_wayland_1_1_wayland_backend" kindref="compound">WaylandBackend</ref> *</type>
        <definition>WaylandBackend* KWin::Wayland::WaylandQPainterBackend::m_backend</definition>
        <argsstring></argsstring>
        <name>m_backend</name>
        <qualifiedname>KWin::Wayland::WaylandQPainterBackend::m_backend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/wayland/wayland_qpainter_backend.h" line="101" column="20" bodyfile="kwin/src/backends/wayland/wayland_qpainter_backend.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a6a4c5bb204d6dcdb3b920f694144faa9" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_graphics_buffer_allocator" kindref="compound">GraphicsBufferAllocator</ref> &gt;</type>
        <definition>std::unique_ptr&lt;GraphicsBufferAllocator&gt; KWin::Wayland::WaylandQPainterBackend::m_allocator</definition>
        <argsstring></argsstring>
        <name>m_allocator</name>
        <qualifiedname>KWin::Wayland::WaylandQPainterBackend::m_allocator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/wayland/wayland_qpainter_backend.h" line="102" column="21" bodyfile="kwin/src/backends/wayland/wayland_qpainter_backend.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a34656039a733e131eb89473ee3a3dbc0" prot="private" static="no" mutable="no">
        <type>std::map&lt; <ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *, Layers &gt;</type>
        <definition>std::map&lt;Output *, Layers&gt; KWin::Wayland::WaylandQPainterBackend::m_outputs</definition>
        <argsstring></argsstring>
        <name>m_outputs</name>
        <qualifiedname>KWin::Wayland::WaylandQPainterBackend::m_outputs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/wayland/wayland_qpainter_backend.h" line="103" column="14" bodyfile="kwin/src/backends/wayland/wayland_qpainter_backend.h" bodystart="103" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a25edad794a7518bc2695a30e07093a4e" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::Wayland::WaylandQPainterBackend::WaylandQPainterBackend</definition>
        <argsstring>(WaylandBackend *b)</argsstring>
        <name>WaylandQPainterBackend</name>
        <qualifiedname>KWin::Wayland::WaylandQPainterBackend::WaylandQPainterBackend</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_wayland_1_1_wayland_backend" kindref="compound">WaylandBackend</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/wayland/wayland_qpainter_backend.h" line="83" column="14" bodyfile="kwin/src/backends/wayland/wayland_qpainter_backend.cpp" bodystart="136" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a6683a87d28008befc871fea6d2807592" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::Wayland::WaylandQPainterBackend::~WaylandQPainterBackend</definition>
        <argsstring>() override</argsstring>
        <name>~WaylandQPainterBackend</name>
        <qualifiedname>KWin::Wayland::WaylandQPainterBackend::~WaylandQPainterBackend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/wayland/wayland_qpainter_backend.h" line="84" column="5" bodyfile="kwin/src/backends/wayland/wayland_qpainter_backend.cpp" bodystart="152" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1aaed8734b3a2b36f5580fdfae0390212a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_graphics_buffer_allocator" kindref="compound">GraphicsBufferAllocator</ref> *</type>
        <definition>GraphicsBufferAllocator * KWin::Wayland::WaylandQPainterBackend::graphicsBufferAllocator</definition>
        <argsstring>() const</argsstring>
        <name>graphicsBufferAllocator</name>
        <qualifiedname>KWin::Wayland::WaylandQPainterBackend::graphicsBufferAllocator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/wayland/wayland_qpainter_backend.h" line="86" column="29" bodyfile="kwin/src/backends/wayland/wayland_qpainter_backend.cpp" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a2783fd1ddb47a5c623928ed405a6e389" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Wayland::WaylandQPainterBackend::present</definition>
        <argsstring>(Output *output, const std::shared_ptr&lt; OutputFrame &gt; &amp;frame) override</argsstring>
        <name>present</name>
        <qualifiedname>KWin::Wayland::WaylandQPainterBackend::present</qualifiedname>
        <reimplements refid="class_k_win_1_1_render_backend_1ad9736308199d71cdd97755a111f5abbe">present</reimplements>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="class_k_win_1_1_output_frame" kindref="compound">OutputFrame</ref> &gt; &amp;</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/wayland/wayland_qpainter_backend.h" line="88" column="10" bodyfile="kwin/src/backends/wayland/wayland_qpainter_backend.cpp" bodystart="169" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a051124ccefff0581ac7dde354eaf03ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_k_win_1_1_output_layer" kindref="compound">OutputLayer</ref> *</type>
        <definition>OutputLayer * KWin::Wayland::WaylandQPainterBackend::primaryLayer</definition>
        <argsstring>(Output *output) override</argsstring>
        <name>primaryLayer</name>
        <qualifiedname>KWin::Wayland::WaylandQPainterBackend::primaryLayer</qualifiedname>
        <reimplements refid="class_k_win_1_1_render_backend_1a0862ffb5aba97ee2d82e6488e4d1471d">primaryLayer</reimplements>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/wayland/wayland_qpainter_backend.h" line="89" column="17" bodyfile="kwin/src/backends/wayland/wayland_qpainter_backend.cpp" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1ad043ca14ccf880e10a4c42c58be88316" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_k_win_1_1_output_layer" kindref="compound">OutputLayer</ref> *</type>
        <definition>OutputLayer * KWin::Wayland::WaylandQPainterBackend::cursorLayer</definition>
        <argsstring>(Output *output) override</argsstring>
        <name>cursorLayer</name>
        <qualifiedname>KWin::Wayland::WaylandQPainterBackend::cursorLayer</qualifiedname>
        <reimplements refid="class_k_win_1_1_render_backend_1abe178a184592ff07e972f4971de5f964">cursorLayer</reimplements>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/wayland/wayland_qpainter_backend.h" line="90" column="17" bodyfile="kwin/src/backends/wayland/wayland_qpainter_backend.cpp" bodystart="180" bodyend="183"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a169b31928b8b73319067a4c08de274d8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Wayland::WaylandQPainterBackend::createOutput</definition>
        <argsstring>(Output *waylandOutput)</argsstring>
        <name>createOutput</name>
        <qualifiedname>KWin::Wayland::WaylandQPainterBackend::createOutput</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>waylandOutput</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/wayland/wayland_qpainter_backend.h" line="93" column="10" bodyfile="kwin/src/backends/wayland/wayland_qpainter_backend.cpp" bodystart="156" bodyend="162"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>KWin::QPainterBackend</label>
        <link refid="class_k_win_1_1_q_painter_backend"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>KWin::RenderBackend</label>
        <link refid="class_k_win_1_1_render_backend"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::Wayland::WaylandQPainterBackend</label>
        <link refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>KWin::QPainterBackend</label>
        <link refid="class_k_win_1_1_q_painter_backend"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>KWin::RenderBackend</label>
        <link refid="class_k_win_1_1_render_backend"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::Wayland::WaylandQPainterBackend</label>
        <link refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/backends/wayland/wayland_qpainter_backend.h" line="79" column="1" bodyfile="kwin/src/backends/wayland/wayland_qpainter_backend.h" bodystart="80" bodyend="104"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_render_backend_1a995e6152b42f76691d296e99780ef707" prot="public" virt="virtual"><scope>KWin::Wayland::WaylandQPainterBackend</scope><name>checkGraphicsReset</name></member>
      <member refid="class_k_win_1_1_q_painter_backend_1aa900b8b99a52720ee4a4755004dd223f" prot="public" virt="virtual"><scope>KWin::Wayland::WaylandQPainterBackend</scope><name>compositingType</name></member>
      <member refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a169b31928b8b73319067a4c08de274d8" prot="private" virt="non-virtual"><scope>KWin::Wayland::WaylandQPainterBackend</scope><name>createOutput</name></member>
      <member refid="class_k_win_1_1_q_painter_backend_1aff220169aa2dab357193134bcf2b2614" prot="public" virt="virtual"><scope>KWin::Wayland::WaylandQPainterBackend</scope><name>createSurfaceTextureWayland</name></member>
      <member refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1ad043ca14ccf880e10a4c42c58be88316" prot="public" virt="virtual"><scope>KWin::Wayland::WaylandQPainterBackend</scope><name>cursorLayer</name></member>
      <member refid="class_k_win_1_1_render_backend_1a9135e39ee4f8aed8dcfd2771fe0a7773" prot="public" virt="virtual"><scope>KWin::Wayland::WaylandQPainterBackend</scope><name>drmDevice</name></member>
      <member refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1aaed8734b3a2b36f5580fdfae0390212a" prot="public" virt="non-virtual"><scope>KWin::Wayland::WaylandQPainterBackend</scope><name>graphicsBufferAllocator</name></member>
      <member refid="class_k_win_1_1_q_painter_backend_1a42d70b9b9256a11fe6b9cc9d22170330" prot="public" virt="non-virtual"><scope>KWin::Wayland::WaylandQPainterBackend</scope><name>isFailed</name></member>
      <member refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a6a4c5bb204d6dcdb3b920f694144faa9" prot="private" virt="non-virtual"><scope>KWin::Wayland::WaylandQPainterBackend</scope><name>m_allocator</name></member>
      <member refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1ac3ccfbe9934bda89e66e19ed7679a68b" prot="private" virt="non-virtual"><scope>KWin::Wayland::WaylandQPainterBackend</scope><name>m_backend</name></member>
      <member refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a34656039a733e131eb89473ee3a3dbc0" prot="private" virt="non-virtual"><scope>KWin::Wayland::WaylandQPainterBackend</scope><name>m_outputs</name></member>
      <member refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a2783fd1ddb47a5c623928ed405a6e389" prot="public" virt="virtual"><scope>KWin::Wayland::WaylandQPainterBackend</scope><name>present</name></member>
      <member refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a051124ccefff0581ac7dde354eaf03ac" prot="public" virt="virtual"><scope>KWin::Wayland::WaylandQPainterBackend</scope><name>primaryLayer</name></member>
      <member refid="class_k_win_1_1_q_painter_backend_1aea8d4b3476c2a0d7f05bfc31173e5dd5" prot="protected" virt="non-virtual"><scope>KWin::Wayland::WaylandQPainterBackend</scope><name>QPainterBackend</name></member>
      <member refid="class_k_win_1_1_render_backend_1a64651d2ee05d39d5e1df7391036198d8" prot="public" virt="virtual"><scope>KWin::Wayland::WaylandQPainterBackend</scope><name>repairPresentation</name></member>
      <member refid="class_k_win_1_1_q_painter_backend_1a360e5f99249f85996c4ba12cc3029e72" prot="protected" virt="non-virtual"><scope>KWin::Wayland::WaylandQPainterBackend</scope><name>setFailed</name></member>
      <member refid="class_k_win_1_1_render_backend_1aca3c178c2ab62c1b5f1074200b066c53" prot="public" virt="virtual"><scope>KWin::Wayland::WaylandQPainterBackend</scope><name>supportedFormats</name></member>
      <member refid="class_k_win_1_1_render_backend_1a19fb9a934538fe684e8fe9725f253904" prot="public" virt="virtual"><scope>KWin::Wayland::WaylandQPainterBackend</scope><name>testImportBuffer</name></member>
      <member refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a25edad794a7518bc2695a30e07093a4e" prot="public" virt="non-virtual"><scope>KWin::Wayland::WaylandQPainterBackend</scope><name>WaylandQPainterBackend</name></member>
      <member refid="class_k_win_1_1_q_painter_backend_1aa9567039bb920bc977ac946de73944c4" prot="public" virt="virtual"><scope>KWin::Wayland::WaylandQPainterBackend</scope><name>~QPainterBackend</name></member>
      <member refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend_1a6683a87d28008befc871fea6d2807592" prot="public" virt="non-virtual"><scope>KWin::Wayland::WaylandQPainterBackend</scope><name>~WaylandQPainterBackend</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
