<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_plugin_effect_loader" kind="class" language="C++" prot="public">
    <compoundname>KWin::PluginEffectLoader</compoundname>
    <basecompoundref refid="class_k_win_1_1_abstract_effect_loader" prot="public" virt="non-virtual">KWin::AbstractEffectLoader</basecompoundref>
    <includes refid="effectloader_8h" local="no">effectloader.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_plugin_effect_loader_1a66c8771c00306e847573a22a538476d9" prot="private" static="no" mutable="no">
        <type>QStringList</type>
        <definition>QStringList KWin::PluginEffectLoader::m_loadedEffects</definition>
        <argsstring></argsstring>
        <name>m_loadedEffects</name>
        <qualifiedname>KWin::PluginEffectLoader::m_loadedEffects</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="323" column="17" bodyfile="kwin/src/effect/effectloader.h" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_plugin_effect_loader_1a65f6bd7807b9131729596f30b2d8ff9b" prot="private" static="no" mutable="no">
        <type>QString</type>
        <definition>QString KWin::PluginEffectLoader::m_pluginSubDirectory</definition>
        <argsstring></argsstring>
        <name>m_pluginSubDirectory</name>
        <qualifiedname>KWin::PluginEffectLoader::m_pluginSubDirectory</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="324" column="13" bodyfile="kwin/src/effect/effectloader.h" bodystart="324" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_plugin_effect_loader_1ae25716aca3801957e14f7fb40373ea96" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::PluginEffectLoader::PluginEffectLoader</definition>
        <argsstring>(QObject *parent=nullptr)</argsstring>
        <name>PluginEffectLoader</name>
        <qualifiedname>KWin::PluginEffectLoader::PluginEffectLoader</qualifiedname>
        <param>
          <type>QObject *</type>
          <declname>parent</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="305" column="14" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="259" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plugin_effect_loader_1ae6dc2bfb6a7f91e22f6267b76932a0c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::PluginEffectLoader::~PluginEffectLoader</definition>
        <argsstring>() override</argsstring>
        <name>~PluginEffectLoader</name>
        <qualifiedname>KWin::PluginEffectLoader::~PluginEffectLoader</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="306" column="5" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="265" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plugin_effect_loader_1a792df507e54006388082cbe30a3e0e10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::PluginEffectLoader::hasEffect</definition>
        <argsstring>(const QString &amp;name) const override</argsstring>
        <name>hasEffect</name>
        <qualifiedname>KWin::PluginEffectLoader::hasEffect</qualifiedname>
        <reimplements refid="class_k_win_1_1_abstract_effect_loader_1a60477aa2be67a8391bb9d45d2cbb7fb9">hasEffect</reimplements>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Whether this <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> Loader can load the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> with the given <computeroutput>name</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> Loader determines whether it knows or can find an <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> called <computeroutput>name</computeroutput>, and thus whether it can attempt to load the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> to look for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool <computeroutput>true</computeroutput> if the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> Loader knows this effect, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="308" column="10" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="269" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plugin_effect_loader_1a047d7beff7dc7f1520df827f91c4a0fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::PluginEffectLoader::isEffectSupported</definition>
        <argsstring>(const QString &amp;name) const override</argsstring>
        <name>isEffectSupported</name>
        <qualifiedname>KWin::PluginEffectLoader::isEffectSupported</qualifiedname>
        <reimplements refid="class_k_win_1_1_abstract_effect_loader_1af4d8106dd1ba61715e7388583af8cdad">isEffectSupported</reimplements>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Whether the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> with the given <computeroutput>name</computeroutput> is supported by the compositing backend. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool <computeroutput>true</computeroutput> if it is supported, <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="309" column="10" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="287" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plugin_effect_loader_1ae1c513ef89efcd11ac5ad53dfcccbaa9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QStringList</type>
        <definition>QStringList KWin::PluginEffectLoader::listOfKnownEffects</definition>
        <argsstring>() const override</argsstring>
        <name>listOfKnownEffects</name>
        <qualifiedname>KWin::PluginEffectLoader::listOfKnownEffects</qualifiedname>
        <reimplements refid="class_k_win_1_1_abstract_effect_loader_1a37acdd75a09f5b80cd72ab9df2858b81">listOfKnownEffects</reimplements>
        <briefdescription>
<para>All the Effects this loader knows of. </para>
        </briefdescription>
        <detaileddescription>
<para>The implementation should re-query its store whenever this method is invoked. It&apos;s possible that the store of effects changed (e.g. a new one got installed)</para>
<para><simplesect kind="return"><para>QStringList The internal names of the known Effects </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="310" column="17" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="321" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plugin_effect_loader_1a4b70a5057c935d1de35137967f54e7fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::PluginEffectLoader::clear</definition>
        <argsstring>() override</argsstring>
        <name>clear</name>
        <qualifiedname>KWin::PluginEffectLoader::clear</qualifiedname>
        <reimplements refid="class_k_win_1_1_abstract_effect_loader_1a7fe32dee9950b830dbb552d59d79b6ff">clear</reimplements>
        <briefdescription>
<para>Clears the load queue, that is all scheduled Effects are discarded from loading. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="312" column="10" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="409" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plugin_effect_loader_1ad05c86ab5c8baf0a0b4d550a640a5d18" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::PluginEffectLoader::queryAndLoadAll</definition>
        <argsstring>() override</argsstring>
        <name>queryAndLoadAll</name>
        <qualifiedname>KWin::PluginEffectLoader::queryAndLoadAll</qualifiedname>
        <reimplements refid="class_k_win_1_1_abstract_effect_loader_1a5ee594e63dee4af44d512d0a262a5ff1">queryAndLoadAll</reimplements>
        <briefdescription>
<para>The <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> Loader should query its store for all available effects and try to load them. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> Loader is supposed to perform this operation in a highly async way. If there is IO which needs to be performed this should be done in a background thread and a queue should be used to load the effects. The loader should make sure to not load more than one <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> in one event cycle. Loading the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> has to be performed in the <ref refid="class_k_win_1_1_compositor" kindref="compound">Compositor</ref> thread and thus blocks the <ref refid="class_k_win_1_1_compositor" kindref="compound">Compositor</ref>. Therefore after loading one <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> all events should get processed first, so that the <ref refid="class_k_win_1_1_compositor" kindref="compound">Compositor</ref> can perform a painting pass if needed. To simplify this operation one can use the <ref refid="class_k_win_1_1_effect_load_queue" kindref="compound">EffectLoadQueue</ref>. This requires to add another loadEffect method with the custom loader specific type to refer to an <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> and LoadEffectFlags.</para>
<para>The LoadEffectFlags have to be determined by querying the configuration with <ref refid="class_k_win_1_1_abstract_effect_loader_1ac47832e9c8313b3c7fa6b1b5bda554e7" kindref="member">readConfig()</ref>. If the Load flag is set the loading can proceed and all the checks from <ref refid="class_k_win_1_1_plugin_effect_loader_1a2e8b5b4ba517b4f57fbde16117934026" kindref="member">loadEffect(const QString &amp;)</ref> have to be applied. In addition if the CheckDefaultFunction flag is set and the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> provides such a method, it should be queried to determine whether the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> is enabled by default. If such a method returns <computeroutput>false</computeroutput> the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> should not get loaded. If the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> does not provide a way to query whether it&apos;s enabled by default at runtime the flag can get ignored.</para>
<para>If the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> loaded successfully the signal <ref refid="class_k_win_1_1_abstract_effect_loader_1a4a431e11259b47ecb9ba3346b8012e63" kindref="member">effectLoaded(KWin::Effect*,const QString&amp;)</ref> must be emitted.</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_plugin_effect_loader_1a2e8b5b4ba517b4f57fbde16117934026" kindref="member">loadEffect(const QString &amp;)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_abstract_effect_loader_1a4a431e11259b47ecb9ba3346b8012e63" kindref="member">effectLoaded(KWin::Effect*,const QString&amp;)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="313" column="10" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="388" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plugin_effect_loader_1a2e8b5b4ba517b4f57fbde16117934026" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::PluginEffectLoader::loadEffect</definition>
        <argsstring>(const QString &amp;name) override</argsstring>
        <name>loadEffect</name>
        <qualifiedname>KWin::PluginEffectLoader::loadEffect</qualifiedname>
        <reimplements refid="class_k_win_1_1_abstract_effect_loader_1ab2ad0c661413834127d8ba00f7517f76">loadEffect</reimplements>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Synchronous loading of the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> with the given <computeroutput>name</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Loads the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> without checking any configuration value or any enabled by default function provided by the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref>.</para>
<para>The loader is expected to apply the following checks: If the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> is already loaded, the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> should not get loaded again. Thus the loader is expected to track which Effects it has loaded, and which of those have been destroyed. The loader should check whether the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> is supported. If the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> indicates it is not supported, it should not get loaded.</para>
<para>If the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> loaded successfully the signal <ref refid="class_k_win_1_1_abstract_effect_loader_1a4a431e11259b47ecb9ba3346b8012e63" kindref="member">effectLoaded(KWin::Effect*,const QString&amp;)</ref> must be emitted. Otherwise the user of the loader is not able to get the loaded <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref>. It&apos;s not returning the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> as <ref refid="class_k_win_1_1_plugin_effect_loader_1ad05c86ab5c8baf0a0b4d550a640a5d18" kindref="member">queryAndLoadAll()</ref> is working async and thus the users of the loader are expected to be prepared for async loading.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal name of the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> which should be loaded </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool <computeroutput>true</computeroutput> if the effect could be loaded, <computeroutput>false</computeroutput> in error case </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_plugin_effect_loader_1ad05c86ab5c8baf0a0b4d550a640a5d18" kindref="member">queryAndLoadAll()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_abstract_effect_loader_1a4a431e11259b47ecb9ba3346b8012e63" kindref="member">effectLoaded(KWin::Effect*,const QString&amp;)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="314" column="10" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="332" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plugin_effect_loader_1a135646a9a269b16cb1e269ccb3475157" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::PluginEffectLoader::loadEffect</definition>
        <argsstring>(const KPluginMetaData &amp;info, LoadEffectFlags flags)</argsstring>
        <name>loadEffect</name>
        <qualifiedname>KWin::PluginEffectLoader::loadEffect</qualifiedname>
        <param>
          <type>const KPluginMetaData &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>LoadEffectFlags</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="315" column="10" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="338" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plugin_effect_loader_1a0046923309bdabab962ffd857c17463e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PluginEffectLoader::setPluginSubDirectory</definition>
        <argsstring>(const QString &amp;directory)</argsstring>
        <name>setPluginSubDirectory</name>
        <qualifiedname>KWin::PluginEffectLoader::setPluginSubDirectory</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>directory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="317" column="10" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="404" bodyend="407"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_k_win_1_1_plugin_effect_loader_1ac24181833b3c8bec224ec184e9afe28b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; KPluginMetaData &gt;</type>
        <definition>QList&lt; KPluginMetaData &gt; KWin::PluginEffectLoader::findAllEffects</definition>
        <argsstring>() const</argsstring>
        <name>findAllEffects</name>
        <qualifiedname>KWin::PluginEffectLoader::findAllEffects</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="320" column="11" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="399" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plugin_effect_loader_1ad9e61714f2a5efe04f8bf432ff2587c7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>KPluginMetaData</type>
        <definition>KPluginMetaData KWin::PluginEffectLoader::findEffect</definition>
        <argsstring>(const QString &amp;name) const</argsstring>
        <name>findEffect</name>
        <qualifiedname>KWin::PluginEffectLoader::findEffect</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="321" column="21" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="275" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plugin_effect_loader_1aa806e4a8e7fec0acb294444e882f940e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_effect_plugin_factory" kindref="compound">EffectPluginFactory</ref> *</type>
        <definition>EffectPluginFactory * KWin::PluginEffectLoader::factory</definition>
        <argsstring>(const KPluginMetaData &amp;info) const</argsstring>
        <name>factory</name>
        <qualifiedname>KWin::PluginEffectLoader::factory</qualifiedname>
        <param>
          <type>const KPluginMetaData &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="322" column="25" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="295" bodyend="319"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>KWin::AbstractEffectLoader</label>
        <link refid="class_k_win_1_1_abstract_effect_loader"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::PluginEffectLoader</label>
        <link refid="class_k_win_1_1_plugin_effect_loader"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>KWin::AbstractEffectLoader</label>
        <link refid="class_k_win_1_1_abstract_effect_loader"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::PluginEffectLoader</label>
        <link refid="class_k_win_1_1_plugin_effect_loader"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/effect/effectloader.h" line="301" column="1" bodyfile="kwin/src/effect/effectloader.h" bodystart="302" bodyend="325"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_abstract_effect_loader_1abce33027093225995ad61aa665aeb45e" prot="protected" virt="non-virtual"><scope>KWin::PluginEffectLoader</scope><name>AbstractEffectLoader</name></member>
      <member refid="class_k_win_1_1_plugin_effect_loader_1a4b70a5057c935d1de35137967f54e7fc" prot="public" virt="virtual"><scope>KWin::PluginEffectLoader</scope><name>clear</name></member>
      <member refid="class_k_win_1_1_abstract_effect_loader_1a4a431e11259b47ecb9ba3346b8012e63" prot="public" virt="non-virtual"><scope>KWin::PluginEffectLoader</scope><name>effectLoaded</name></member>
      <member refid="class_k_win_1_1_plugin_effect_loader_1aa806e4a8e7fec0acb294444e882f940e" prot="private" virt="non-virtual"><scope>KWin::PluginEffectLoader</scope><name>factory</name></member>
      <member refid="class_k_win_1_1_plugin_effect_loader_1ac24181833b3c8bec224ec184e9afe28b" prot="private" virt="non-virtual"><scope>KWin::PluginEffectLoader</scope><name>findAllEffects</name></member>
      <member refid="class_k_win_1_1_plugin_effect_loader_1ad9e61714f2a5efe04f8bf432ff2587c7" prot="private" virt="non-virtual"><scope>KWin::PluginEffectLoader</scope><name>findEffect</name></member>
      <member refid="class_k_win_1_1_plugin_effect_loader_1a792df507e54006388082cbe30a3e0e10" prot="public" virt="virtual"><scope>KWin::PluginEffectLoader</scope><name>hasEffect</name></member>
      <member refid="class_k_win_1_1_plugin_effect_loader_1a047d7beff7dc7f1520df827f91c4a0fd" prot="public" virt="virtual"><scope>KWin::PluginEffectLoader</scope><name>isEffectSupported</name></member>
      <member refid="class_k_win_1_1_plugin_effect_loader_1ae1c513ef89efcd11ac5ad53dfcccbaa9" prot="public" virt="virtual"><scope>KWin::PluginEffectLoader</scope><name>listOfKnownEffects</name></member>
      <member refid="class_k_win_1_1_plugin_effect_loader_1a2e8b5b4ba517b4f57fbde16117934026" prot="public" virt="virtual"><scope>KWin::PluginEffectLoader</scope><name>loadEffect</name></member>
      <member refid="class_k_win_1_1_plugin_effect_loader_1a135646a9a269b16cb1e269ccb3475157" prot="public" virt="non-virtual"><scope>KWin::PluginEffectLoader</scope><name>loadEffect</name></member>
      <member refid="class_k_win_1_1_plugin_effect_loader_1a66c8771c00306e847573a22a538476d9" prot="private" virt="non-virtual"><scope>KWin::PluginEffectLoader</scope><name>m_loadedEffects</name></member>
      <member refid="class_k_win_1_1_plugin_effect_loader_1a65f6bd7807b9131729596f30b2d8ff9b" prot="private" virt="non-virtual"><scope>KWin::PluginEffectLoader</scope><name>m_pluginSubDirectory</name></member>
      <member refid="class_k_win_1_1_plugin_effect_loader_1ae25716aca3801957e14f7fb40373ea96" prot="public" virt="non-virtual"><scope>KWin::PluginEffectLoader</scope><name>PluginEffectLoader</name></member>
      <member refid="class_k_win_1_1_plugin_effect_loader_1ad05c86ab5c8baf0a0b4d550a640a5d18" prot="public" virt="virtual"><scope>KWin::PluginEffectLoader</scope><name>queryAndLoadAll</name></member>
      <member refid="class_k_win_1_1_abstract_effect_loader_1ac47832e9c8313b3c7fa6b1b5bda554e7" prot="protected" virt="non-virtual"><scope>KWin::PluginEffectLoader</scope><name>readConfig</name></member>
      <member refid="class_k_win_1_1_abstract_effect_loader_1ae8c28c5fb1964a05d46e3fac76016ab1" prot="public" virt="virtual"><scope>KWin::PluginEffectLoader</scope><name>setConfig</name></member>
      <member refid="class_k_win_1_1_plugin_effect_loader_1a0046923309bdabab962ffd857c17463e" prot="public" virt="non-virtual"><scope>KWin::PluginEffectLoader</scope><name>setPluginSubDirectory</name></member>
      <member refid="class_k_win_1_1_abstract_effect_loader_1a4bb5209f35491c73801410b4da6f3933" prot="public" virt="non-virtual"><scope>KWin::PluginEffectLoader</scope><name>~AbstractEffectLoader</name></member>
      <member refid="class_k_win_1_1_plugin_effect_loader_1ae6dc2bfb6a7f91e22f6267b76932a0c5" prot="public" virt="non-virtual"><scope>KWin::PluginEffectLoader</scope><name>~PluginEffectLoader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
