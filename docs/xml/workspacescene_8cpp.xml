<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="workspacescene_8cpp" kind="file" language="C++">
    <compoundname>workspacescene.cpp</compoundname>
    <includes refid="workspacescene_8h" local="yes">scene/workspacescene.h</includes>
    <includes local="yes">compositor.h</includes>
    <includes refid="core_2output_8h" local="yes">core/output.h</includes>
    <includes refid="renderbackend_8h" local="yes">core/renderbackend.h</includes>
    <includes refid="renderlayer_8h" local="yes">core/renderlayer.h</includes>
    <includes refid="renderloop_8h" local="yes">core/renderloop.h</includes>
    <includes refid="renderviewport_8h" local="yes">core/renderviewport.h</includes>
    <includes refid="effecthandler_8h" local="yes">effect/effecthandler.h</includes>
    <includes refid="internalwindow_8h" local="yes">internalwindow.h</includes>
    <includes refid="decorationitem_8h" local="yes">scene/decorationitem.h</includes>
    <includes refid="dndiconitem_8h" local="yes">scene/dndiconitem.h</includes>
    <includes refid="itemrenderer_8h" local="yes">scene/itemrenderer.h</includes>
    <includes refid="rootitem_8h" local="yes">scene/rootitem.h</includes>
    <includes refid="shadowitem_8h" local="yes">scene/shadowitem.h</includes>
    <includes refid="surfaceitem_8h" local="yes">scene/surfaceitem.h</includes>
    <includes refid="windowitem_8h" local="yes">scene/windowitem.h</includes>
    <includes local="yes">shadow.h</includes>
    <includes refid="seat_8h" local="yes">wayland/seat.h</includes>
    <includes refid="surface_8h" local="yes">wayland/surface.h</includes>
    <includes refid="wayland__server_8h" local="yes">wayland_server.h</includes>
    <includes refid="waylandwindow_8h" local="yes">waylandwindow.h</includes>
    <includes local="yes">window.h</includes>
    <includes refid="workspace_8h" local="yes">workspace.h</includes>
    <includes local="no">QtMath</includes>
    <includes local="yes">moc_workspacescene.cpp</includes>
    <incdepgraph>
      <node id="3">
        <label>core/colorspace.h</label>
        <link refid="colorspace_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>core/graphicsbuffer.h</label>
        <link refid="graphicsbuffer_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>core/inputdevice.h</label>
        <link refid="inputdevice_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>core/output.h</label>
        <link refid="core_2output_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>outputlayer.h</label>
        <link refid="outputlayer_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>core/renderbackend.h</label>
        <link refid="renderbackend_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>core/renderlayer.h</label>
        <link refid="renderlayer_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>core/renderlayerdelegate.h</label>
        <link refid="renderlayerdelegate_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>renderloop.h</label>
        <link refid="renderloop_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>core/rendertarget.h</label>
        <link refid="rendertarget_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>core/renderviewport.h</label>
        <link refid="renderviewport_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>cursor.h</label>
        <link refid="cursor_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>effect/effect.h</label>
        <link refid="effect_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>effect/effecthandler.h</label>
        <link refid="effecthandler_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>effect/effectwindow.h</label>
        <link refid="effectwindow_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>effect/globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>internalwindow.h</label>
        <link refid="internalwindow_8h"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>main.h</label>
        <link refid="main_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>opengl/glvertexbuffer.h</label>
        <link refid="glvertexbuffer_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>options.h</label>
        <link refid="options_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>rules.h</label>
        <link refid="rules_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>scene/decorationitem.h</label>
        <link refid="decorationitem_8h"/>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>scene/dndiconitem.h</label>
        <link refid="dndiconitem_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>scene/item.h</label>
        <link refid="item_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>scene/itemgeometry.h</label>
        <link refid="itemgeometry_8h"/>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>scene/itemrenderer.h</label>
        <link refid="itemrenderer_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>scene/rootitem.h</label>
        <link refid="rootitem_8h"/>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>scene/scene.h</label>
        <link refid="scene_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>scene/shadowitem.h</label>
        <link refid="shadowitem_8h"/>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>scene/surfaceitem.h</label>
        <link refid="surfaceitem_8h"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>scene/windowitem.h</label>
        <link refid="windowitem_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>kwin/src/scene/workspacescene.cpp</label>
        <link refid="workspacescene_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>scene/workspacescene.h</label>
        <link refid="workspacescene_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>sm.h</label>
        <link refid="sm_8h"/>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>utils/common.h</label>
        <link refid="common_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>utils/edid.h</label>
        <link refid="edid_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>utils/filedescriptor.h</label>
        <link refid="filedescriptor_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>utils/version.h</label>
        <link refid="version_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>wayland/seat.h</label>
        <link refid="seat_8h"/>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>wayland/surface.h</label>
        <link refid="surface_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>wayland_server.h</label>
        <link refid="wayland__server_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>waylandwindow.h</label>
        <link refid="waylandwindow_8h"/>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>window.h</label>
        <link refid="window_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>workspace.h</label>
        <link refid="workspace_8h"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>KConfigGroup</label>
      </node>
      <node id="64">
        <label>KConfigWatcher</label>
      </node>
      <node id="41">
        <label>KPluginFactory</label>
      </node>
      <node id="42">
        <label>KSharedConfig</label>
      </node>
      <node id="61">
        <label>QAbstractNativeEventFilter</label>
      </node>
      <node id="62">
        <label>QApplication</label>
      </node>
      <node id="24">
        <label>QByteArray</label>
      </node>
      <node id="77">
        <label>QColor</label>
      </node>
      <node id="12">
        <label>QCoreApplication</label>
      </node>
      <node id="98">
        <label>QDBusContext</label>
      </node>
      <node id="99">
        <label>QDataStream</label>
      </node>
      <node id="27">
        <label>QDebug</label>
      </node>
      <node id="45">
        <label>QEasingCurve</label>
      </node>
      <node id="70">
        <label>QElapsedTimer</label>
      </node>
      <node id="49">
        <label>QHash</label>
      </node>
      <node id="46">
        <label>QIcon</label>
      </node>
      <node id="13">
        <label>QImage</label>
      </node>
      <node id="71">
        <label>QKeySequence</label>
      </node>
      <node id="25">
        <label>QList</label>
      </node>
      <node id="50">
        <label>QLoggingCategory</label>
      </node>
      <node id="36">
        <label>QMap</label>
      </node>
      <node id="5">
        <label>QMatrix4x4</label>
      </node>
      <node id="18">
        <label>QObject</label>
      </node>
      <node id="47">
        <label>QPair</label>
      </node>
      <node id="14">
        <label>QPoint</label>
      </node>
      <node id="33">
        <label>QPointer</label>
      </node>
      <node id="63">
        <label>QProcessEnvironment</label>
      </node>
      <node id="28">
        <label>QRect</label>
      </node>
      <node id="38">
        <label>QRectF</label>
      </node>
      <node id="16">
        <label>QRegion</label>
      </node>
      <node id="48">
        <label>QSet</label>
      </node>
      <node id="26">
        <label>QSize</label>
      </node>
      <node id="51">
        <label>QStack</label>
      </node>
      <node id="68">
        <label>QString</label>
      </node>
      <node id="100">
        <label>QStringList</label>
      </node>
      <node id="72">
        <label>QTimer</label>
      </node>
      <node id="81">
        <label>QTransform</label>
      </node>
      <node id="29">
        <label>QUuid</label>
      </node>
      <node id="15">
        <label>QVariant</label>
      </node>
      <node id="6">
        <label>QVector2D</label>
      </node>
      <node id="44">
        <label>QWindow</label>
      </node>
      <node id="103">
        <label>QtMath</label>
      </node>
      <node id="17">
        <label>chrono</label>
      </node>
      <node id="69">
        <label>climits</label>
      </node>
      <node id="20">
        <label>compositor.h</label>
      </node>
      <node id="11">
        <label>config-kwin.h</label>
      </node>
      <node id="87">
        <label>deque</label>
      </node>
      <node id="78">
        <label>epoxy/gl.h</label>
      </node>
      <node id="52">
        <label>functional</label>
      </node>
      <node id="7">
        <label>kwin_export.h</label>
      </node>
      <node id="19">
        <label>memory</label>
      </node>
      <node id="104">
        <label>moc_workspacescene.cpp</label>
      </node>
      <node id="102">
        <label>netwm_def.h</label>
      </node>
      <node id="4">
        <label>optional</label>
      </node>
      <node id="79">
        <label>ranges</label>
      </node>
      <node id="89">
        <label>shadow.h</label>
      </node>
      <node id="80">
        <label>span</label>
      </node>
      <node id="55">
        <label>utility</label>
      </node>
      <node id="95">
        <label>window.h</label>
      </node>
      <node id="58">
        <label>xcb/xcb.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_k_win">KWin</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>KWin<sp/>-<sp/>the<sp/>KDE<sp/>window<sp/>manager</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>KDE<sp/>project.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2006<sp/>Lubos<sp/>Lunak<sp/>&lt;l.lunak@kde.org&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>Design:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>When<sp/>compositing<sp/>is<sp/>turned<sp/>on,<sp/>XComposite<sp/>extension<sp/>is<sp/>used<sp/>to<sp/>redirect</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>drawing<sp/>of<sp/>windows<sp/>to<sp/>pixmaps<sp/>and<sp/>XDamage<sp/>extension<sp/>is<sp/>used<sp/>to<sp/>get<sp/>informed</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>about<sp/>damage<sp/>(changes)<sp/>to<sp/>window<sp/>contents.<sp/>This<sp/>code<sp/>is<sp/>mostly<sp/>in<sp/>composite.cpp<sp/>.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>Compositor::performCompositing()<sp/>starts<sp/>one<sp/>painting<sp/>pass.<sp/>Painting<sp/>is<sp/>done</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>by<sp/>painting<sp/>the<sp/>screen,<sp/>which<sp/>in<sp/>turn<sp/>paints<sp/>every<sp/>window.<sp/>Painting<sp/>can<sp/>be<sp/>affected</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>using<sp/>effects,<sp/>which<sp/>are<sp/>chained.<sp/>E.g.<sp/>painting<sp/>a<sp/>screen<sp/>means<sp/>that<sp/>actually</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>paintScreen()<sp/>of<sp/>the<sp/>first<sp/>effect<sp/>is<sp/>called,<sp/>which<sp/>possibly<sp/>does<sp/>modifications</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>and<sp/>calls<sp/>next<sp/>effect&apos;s<sp/>paintScreen()<sp/>and<sp/>so<sp/>on,<sp/>until<sp/>Scene::finalPaintScreen()</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>is<sp/>called.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>There<sp/>are<sp/>3<sp/>phases<sp/>of<sp/>every<sp/>paint<sp/>(not<sp/>necessarily<sp/>done<sp/>together):</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>The<sp/>pre-paint<sp/>phase,<sp/>the<sp/>paint<sp/>phase<sp/>and<sp/>the<sp/>post-paint<sp/>phase.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>The<sp/>pre-paint<sp/>phase<sp/>is<sp/>used<sp/>to<sp/>find<sp/>out<sp/>about<sp/>how<sp/>the<sp/>painting<sp/>will<sp/>be<sp/>actually</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>done<sp/>(i.e.<sp/>what<sp/>the<sp/>effects<sp/>will<sp/>do).<sp/>For<sp/>example<sp/>when<sp/>only<sp/>a<sp/>part<sp/>of<sp/>the<sp/>screen</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>needs<sp/>to<sp/>be<sp/>updated<sp/>and<sp/>no<sp/>effect<sp/>will<sp/>do<sp/>any<sp/>transformation<sp/>it<sp/>is<sp/>possible<sp/>to<sp/>use</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>an<sp/>optimized<sp/>paint<sp/>function.<sp/>How<sp/>the<sp/>painting<sp/>will<sp/>be<sp/>done<sp/>is<sp/>controlled</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>by<sp/>the<sp/>mask<sp/>argument,<sp/>see<sp/>PAINT_WINDOW_*<sp/>and<sp/>PAINT_SCREEN_*<sp/>flags<sp/>in<sp/>scene.h<sp/>.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>For<sp/>example<sp/>an<sp/>effect<sp/>that<sp/>decides<sp/>to<sp/>paint<sp/>a<sp/>normal<sp/>windows<sp/>as<sp/>translucent</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>will<sp/>need<sp/>to<sp/>modify<sp/>the<sp/>mask<sp/>in<sp/>its<sp/>prePaintWindow()<sp/>to<sp/>include</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>the<sp/>PAINT_WINDOW_TRANSLUCENT<sp/>flag.<sp/>The<sp/>paintWindow()<sp/>function<sp/>will<sp/>then<sp/>get</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>the<sp/>mask<sp/>with<sp/>this<sp/>flag<sp/>turned<sp/>on<sp/>and<sp/>will<sp/>also<sp/>paint<sp/>using<sp/>transparency.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>The<sp/>paint<sp/>pass<sp/>does<sp/>the<sp/>actual<sp/>painting,<sp/>based<sp/>on<sp/>the<sp/>information<sp/>collected</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>using<sp/>the<sp/>pre-paint<sp/>pass.<sp/>After<sp/>running<sp/>through<sp/>the<sp/>effects&apos;<sp/>paintScreen()</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>either<sp/>paintGenericScreen()<sp/>or<sp/>optimized<sp/>paintSimpleScreen()<sp/>are<sp/>called.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>Those<sp/>call<sp/>paintWindow()<sp/>on<sp/>windows<sp/>(not<sp/>necessarily<sp/>all),<sp/>possibly<sp/>using</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>clipping<sp/>to<sp/>optimize<sp/>performance<sp/>and<sp/>calling<sp/>paintWindow()<sp/>first<sp/>with<sp/>only</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>PAINT_WINDOW_OPAQUE<sp/>to<sp/>paint<sp/>the<sp/>opaque<sp/>parts<sp/>and<sp/>then<sp/>later</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>with<sp/>PAINT_WINDOW_TRANSLUCENT<sp/>to<sp/>paint<sp/>the<sp/>transparent<sp/>parts.<sp/>Function</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>paintWindow()<sp/>again<sp/>goes<sp/>through<sp/>effects&apos;<sp/>paintWindow()<sp/>until</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>finalPaintWindow()<sp/>is<sp/>called,<sp/>which<sp/>calls<sp/>the<sp/>window&apos;s<sp/>performPaint()<sp/>to</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>do<sp/>the<sp/>actual<sp/>painting.</highlight></codeline>
<codeline lineno="47"><highlight class="comment"></highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>The<sp/>post-paint<sp/>can<sp/>be<sp/>used<sp/>for<sp/>cleanups<sp/>and<sp/>is<sp/>also<sp/>used<sp/>for<sp/>scheduling</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>repaints<sp/>during<sp/>the<sp/>next<sp/>painting<sp/>pass<sp/>for<sp/>animations.<sp/>Effects<sp/>wanting<sp/>to</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>repaint<sp/>certain<sp/>parts<sp/>can<sp/>manually<sp/>damage<sp/>them<sp/>during<sp/>post-paint<sp/>and<sp/>repaint</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>of<sp/>these<sp/>parts<sp/>will<sp/>be<sp/>done<sp/>during<sp/>the<sp/>next<sp/>paint<sp/>pass.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"></highlight></codeline>
<codeline lineno="53"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="workspacescene_8h" kindref="compound">scene/workspacescene.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;compositor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="core_2output_8h" kindref="compound">core/output.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="renderbackend_8h" kindref="compound">core/renderbackend.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="renderlayer_8h" kindref="compound">core/renderlayer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="renderloop_8h" kindref="compound">core/renderloop.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="renderviewport_8h" kindref="compound">core/renderviewport.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="effecthandler_8h" kindref="compound">effect/effecthandler.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="internalwindow_8h" kindref="compound">internalwindow.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="decorationitem_8h" kindref="compound">scene/decorationitem.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dndiconitem_8h" kindref="compound">scene/dndiconitem.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="itemrenderer_8h" kindref="compound">scene/itemrenderer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="rootitem_8h" kindref="compound">scene/rootitem.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shadowitem_8h" kindref="compound">scene/shadowitem.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="surfaceitem_8h" kindref="compound">scene/surfaceitem.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="windowitem_8h" kindref="compound">scene/windowitem.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shadow.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="seat_8h" kindref="compound">wayland/seat.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="surface_8h" kindref="compound">wayland/surface.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wayland__server_8h" kindref="compound">wayland_server.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="waylandwindow_8h" kindref="compound">waylandwindow.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;window.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="workspace_8h" kindref="compound">workspace.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>KWIN_BUILD_X11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="x11window_8h" kindref="compound">x11window.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QtMath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win" kindref="compound">KWin</ref></highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//****************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Scene</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//****************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="class_k_win_1_1_workspace_scene_1ab9ce9437870a461d6de8f0340dff0e3c" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_workspace_scene_1ab9ce9437870a461d6de8f0340dff0e3c" kindref="member">WorkspaceScene::WorkspaceScene</ref>(std::unique_ptr&lt;ItemRenderer&gt;<sp/><ref refid="class_k_win_1_1_scene_1acfa97f94e5f1b3a91f94f813d437388c" kindref="member">renderer</ref>)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_scene_1a2a4b8d72fe643d9c288a2be968e6b2a3" kindref="member">Scene</ref>(std::move(<ref refid="class_k_win_1_1_scene_1acfa97f94e5f1b3a91f94f813d437388c" kindref="member">renderer</ref>))</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_containerItem(std::make_unique&lt;<ref refid="class_k_win_1_1_root_item" kindref="compound">RootItem</ref>&gt;(this))</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_overlayItem(std::make_unique&lt;<ref refid="class_k_win_1_1_root_item" kindref="compound">RootItem</ref>&gt;(this))</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_scene_1a10de8f0b589c77752a800e64a540ccb7" kindref="member">setGeometry</ref>(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_scene_1abfaa7b36bb4841507abd2628e4650065" kindref="member">geometry</ref>());</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_workspace_1acd184adfbb27f515c16e899192fbfe40" kindref="member">Workspace::geometryChanged</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_scene_1a10de8f0b589c77752a800e64a540ccb7" kindref="member">setGeometry</ref>(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_scene_1abfaa7b36bb4841507abd2628e4650065" kindref="member">geometry</ref>());</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>())<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connect(<ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;seat(),<sp/>&amp;<ref refid="class_k_win_1_1_seat_interface_1a74ad66a32e97bd7aefab3e4ce40a715f" kindref="member">SeatInterface::dragStarted</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;WorkspaceScene::createDndIconItem);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connect(<ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;seat(),<sp/>&amp;<ref refid="class_k_win_1_1_seat_interface_1abaf30fbfe4e667e4aebb79fd16be4bd5" kindref="member">SeatInterface::dragEnded</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;WorkspaceScene::destroyDndIconItem);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="class_k_win_1_1_workspace_scene_1ad9e0d1439d963c730aaefbe40e93f4a2" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_workspace_scene_1ad9e0d1439d963c730aaefbe40e93f4a2" kindref="member">WorkspaceScene::~WorkspaceScene</ref>()</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WorkspaceScene::createDndIconItem()</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_drag_and_drop_icon" kindref="compound">DragAndDropIcon</ref><sp/>*dragIcon<sp/>=<sp/><ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;<ref refid="class_k_win_1_1_wayland_server_1a5eb1a9f63d831179f22f4baf0c630f0e" kindref="member">seat</ref>()-&gt;<ref refid="class_k_win_1_1_seat_interface_1aec01f08f1798e183ed8f066c9cabd49c" kindref="member">dragIcon</ref>();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dragIcon)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>m_dndIcon<sp/>=<sp/>std::make_unique&lt;DragAndDropIconItem&gt;(dragIcon,<sp/>m_overlayItem.get());</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;seat()-&gt;isDragPointer())<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>updatePosition<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pointerPos<sp/>=<sp/><ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;<ref refid="class_k_win_1_1_wayland_server_1a5eb1a9f63d831179f22f4baf0c630f0e" kindref="member">seat</ref>()-&gt;<ref refid="class_k_win_1_1_seat_interface_1a31733a64eb06520e8f793c6b80674566" kindref="member">pointerPos</ref>();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_dndIcon-&gt;setPosition(pointerPos);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_dndIcon-&gt;setOutput(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;outputAt(pointerPos));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updatePosition();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connect(<ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;seat(),<sp/>&amp;<ref refid="class_k_win_1_1_seat_interface_1aa45ec0696603ab055b470dffa00ab43d" kindref="member">SeatInterface::pointerPosChanged</ref>,<sp/>m_dndIcon.get(),<sp/>updatePosition);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;seat()-&gt;isDragTouch())<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>updatePosition<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>seat<sp/>=<sp/><ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;<ref refid="class_k_win_1_1_wayland_server_1a5eb1a9f63d831179f22f4baf0c630f0e" kindref="member">seat</ref>();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>touchPos<sp/>=<sp/>seat-&gt;<ref refid="class_k_win_1_1_seat_interface_1a2b62c3201bdaec061f50957d8aa9d1ee" kindref="member">firstTouchPointPosition</ref>(seat-&gt;dragSurface());</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_dndIcon-&gt;setPosition(touchPos);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_dndIcon-&gt;setOutput(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;outputAt(touchPos));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updatePosition();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connect(<ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;seat(),<sp/>&amp;<ref refid="class_k_win_1_1_seat_interface_1a560e24d032be268d9d9049a3eb276af6" kindref="member">SeatInterface::touchMoved</ref>,<sp/>m_dndIcon.get(),<sp/>updatePosition);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WorkspaceScene::destroyDndIconItem()</highlight></codeline>
<codeline lineno="141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>m_dndIcon.reset();</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="class_k_win_1_1_workspace_scene_1a667f69f314ea925c2b4d9b7735d22e03" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_item" kindref="compound">Item</ref><sp/>*<ref refid="class_k_win_1_1_workspace_scene_1a667f69f314ea925c2b4d9b7735d22e03" kindref="member">WorkspaceScene::containerItem</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="146"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_containerItem.get();</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="class_k_win_1_1_workspace_scene_1a686b4f5c27e83639d051ab00cd23d6a8" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_item" kindref="compound">Item</ref><sp/>*<ref refid="class_k_win_1_1_workspace_scene_1a686b4f5c27e83639d051ab00cd23d6a8" kindref="member">WorkspaceScene::overlayItem</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="151"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_overlayItem.get();</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>regionActuallyContains(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegion<sp/>&amp;region,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRect<sp/>&amp;rect)</highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>QRegion::contains<sp/>does<sp/>**not**<sp/>actually<sp/>check<sp/>if<sp/>the<sp/>region<sp/>contains<sp/>the<sp/>rect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>this<sp/>helper<sp/>function<sp/>has<sp/>to<sp/>be<sp/>used<sp/>instead...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(region<sp/>&amp;<sp/>rect)<sp/>==<sp/>rect;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>addCandidates(SurfaceItem<sp/>*item,<sp/>QList&lt;SurfaceItem<sp/>*&gt;<sp/>&amp;candidates,<sp/>ssize_t<sp/>maxCount,<sp/>QRegion<sp/>&amp;occluded)</highlight></codeline>
<codeline lineno="163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QList&lt;Item<sp/>*&gt;<sp/>children<sp/>=<sp/>item-&gt;sortedChildItems();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>children.rbegin();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>!=<sp/>children.rend();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Item<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>child<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child-&gt;z()<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child-&gt;isVisible()<sp/>&amp;&amp;<sp/>!regionActuallyContains(occluded,<sp/>child-&gt;mapToScene(child-&gt;boundingRect()).toAlignedRect()))<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addCandidates(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_surface_item" kindref="compound">SurfaceItem</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(child),<sp/>candidates,<sp/>maxCount,<sp/>occluded))<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(candidates.size()<sp/>&gt;=<sp/>maxCount<sp/>||<sp/>item-&gt;hasEffects())<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regionActuallyContains(occluded,<sp/>item-&gt;mapToScene(item-&gt;boundingRect()).toAlignedRect()))<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>candidates.push_back(item);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>occluded<sp/>+=<sp/>item-&gt;mapToScene(item-&gt;opaque());</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>!=<sp/>children.rend();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_item" kindref="compound">Item</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>child<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child-&gt;isVisible()<sp/>&amp;&amp;<sp/>!regionActuallyContains(occluded,<sp/>child-&gt;mapToScene(child-&gt;boundingRect()).toAlignedRect()))<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addCandidates(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_surface_item" kindref="compound">SurfaceItem</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(child),<sp/>candidates,<sp/>maxCount,<sp/>occluded))<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="class_k_win_1_1_workspace_scene_1a7105ad6073368abfafbdb49e9c104fd7" refkind="member"><highlight class="normal">QList&lt;SurfaceItem<sp/>*&gt;<sp/><ref refid="class_k_win_1_1_workspace_scene_1a7105ad6073368abfafbdb49e9c104fd7" kindref="member">WorkspaceScene::scanoutCandidates</ref>(ssize_t<sp/>maxCount)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="197"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>())<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;SurfaceItem<sp/>*&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespace_k_win_1ad780e509c41727e08e1cc641d4cad7b5" kindref="member">effects</ref>-&gt;blocksDirectScanout())<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QRegion<sp/>occlusion;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="class_k_win_1_1_workspace_scene_1a2ad6b5c78a83037f3c6b3c31afe83a0b" kindref="member">stacking_order</ref>.count()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_window_item" kindref="compound">WindowItem</ref><sp/>*windowItem<sp/>=<sp/><ref refid="class_k_win_1_1_workspace_scene_1a2ad6b5c78a83037f3c6b3c31afe83a0b" kindref="member">stacking_order</ref>[i];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref><sp/>*window<sp/>=<sp/>windowItem-&gt;<ref refid="class_k_win_1_1_window_item_1a4166f95373e7af5f59ea80b38dd5bef4" kindref="member">window</ref>();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window-&gt;<ref refid="class_k_win_1_1_window_1a0a700ea4c908f6907d172e7754c38db7" kindref="member">isOnOutput</ref>(<ref refid="class_k_win_1_1_workspace_scene_1a85064bff7e2052de99fd5a09cec66b93" kindref="member">painted_screen</ref>)<sp/>&amp;&amp;<sp/>window-&gt;<ref refid="class_k_win_1_1_window_1abb0f10e1968953e89829431415fa803e" kindref="member">opacity</ref>()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>windowItem-&gt;<ref refid="class_k_win_1_1_item_1a3115fe9f6c0836415bbaa8638ce45048" kindref="member">isVisible</ref>())<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!window-&gt;<ref refid="class_k_win_1_1_window_1a5f50be966c1885fe61b8a54e2dd584d8" kindref="member">isClient</ref>()<sp/>||<sp/>window-&gt;<ref refid="class_k_win_1_1_window_1abb0f10e1968953e89829431415fa803e" kindref="member">opacity</ref>()<sp/>!=<sp/>1.0<sp/>||<sp/>!window-&gt;<ref refid="class_k_win_1_1_window_1af68e2698e10f68963734220af029279f" kindref="member">isFullScreen</ref>()<sp/>||<sp/>window-&gt;<ref refid="class_k_win_1_1_window_1a0094149b3a29d3b0240918e695fdb3fa" kindref="member">windowItem</ref>()-&gt;<ref refid="class_k_win_1_1_item_1a5a02454926dad542b44dd7dc3037877c" kindref="member">hasEffects</ref>())<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_surface_item" kindref="compound">SurfaceItem</ref><sp/>*surfaceItem<sp/>=<sp/>window-&gt;<ref refid="class_k_win_1_1_window_1aa3e58eb3c6ecd544440b973f68921322" kindref="member">surfaceItem</ref>();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!surfaceItem<sp/>||<sp/>!surfaceItem-&gt;<ref refid="class_k_win_1_1_item_1a3115fe9f6c0836415bbaa8638ce45048" kindref="member">isVisible</ref>())<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addCandidates(surfaceItem,<sp/>ret,<sp/>maxCount,<sp/>occlusion))<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(occlusion.contains(<ref refid="class_k_win_1_1_workspace_scene_1a85064bff7e2052de99fd5a09cec66b93" kindref="member">painted_screen</ref>-&gt;geometry()))<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>getDesiredHdrHeadroom(<ref refid="class_k_win_1_1_item" kindref="compound">Item</ref><sp/>*item)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!item-&gt;<ref refid="class_k_win_1_1_item_1a3115fe9f6c0836415bbaa8638ce45048" kindref="member">isVisible</ref>())<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>children<sp/>=<sp/>item-&gt;<ref refid="class_k_win_1_1_item_1ac0dc5aebbfc288debf9e59ede6f4d39b" kindref="member">childItems</ref>();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;child<sp/>:<sp/>children)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>std::max(ret,<sp/>getDesiredHdrHeadroom(child));</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;color<sp/>=<sp/>item-&gt;<ref refid="class_k_win_1_1_item_1ab938104b60ece620180da2d602eb3982" kindref="member">colorDescription</ref>();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(color.maxHdrLuminance()<sp/>&amp;&amp;<sp/>*color.maxHdrLuminance()<sp/>&gt;<sp/>color.referenceLuminance())<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::max(ret,<sp/>*color.maxHdrLuminance()<sp/>/<sp/>color.referenceLuminance());</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="class_k_win_1_1_workspace_scene_1a5c2d9d39ad6106d65050e87d8ac2ea93" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_workspace_scene_1a5c2d9d39ad6106d65050e87d8ac2ea93" kindref="member">WorkspaceScene::desiredHdrHeadroom</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="248"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxHeadroom<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;item<sp/>:<sp/><ref refid="class_k_win_1_1_workspace_scene_1a2ad6b5c78a83037f3c6b3c31afe83a0b" kindref="member">stacking_order</ref>)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!item-&gt;window()-&gt;isOnOutput(<ref refid="class_k_win_1_1_workspace_scene_1a85064bff7e2052de99fd5a09cec66b93" kindref="member">painted_screen</ref>))<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxHeadroom<sp/>=<sp/>std::max(maxHeadroom,<sp/>getDesiredHdrHeadroom(item));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>maxHeadroom;</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259" refid="class_k_win_1_1_workspace_scene_1a0b5ae2267b03670e84be04aa5c33272f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_workspace_scene_1a0b5ae2267b03670e84be04aa5c33272f" kindref="member">WorkspaceScene::frame</ref>(<ref refid="class_k_win_1_1_scene_delegate" kindref="compound">SceneDelegate</ref><sp/>*delegate,<sp/><ref refid="class_k_win_1_1_output_frame" kindref="compound">OutputFrame</ref><sp/>*<ref refid="class_k_win_1_1_workspace_scene_1a0b5ae2267b03670e84be04aa5c33272f" kindref="member">frame</ref>)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>())<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref><sp/>*output<sp/>=<sp/>delegate-&gt;<ref refid="class_k_win_1_1_scene_delegate_1a3d8dab580174d1e397bb0e93c89bf29e" kindref="member">output</ref>();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::chrono::milliseconds<sp/>frameTime<sp/>=</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(output-&gt;<ref refid="class_k_win_1_1_output_1a7369afc9566e97e778f7364ad699dee3" kindref="member">renderLoop</ref>()-&gt;<ref refid="class_k_win_1_1_render_loop_1aad36ff9f661f69fc0065581f63b6448f" kindref="member">lastPresentationTimestamp</ref>());</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QList&lt;Item<sp/>*&gt;<sp/>items<sp/>=<sp/>m_containerItem-&gt;sortedChildItems();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_k_win_1_1_item" kindref="compound">Item</ref><sp/>*item<sp/>:<sp/>items)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!item-&gt;<ref refid="class_k_win_1_1_item_1a3115fe9f6c0836415bbaa8638ce45048" kindref="member">isVisible</ref>())<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref><sp/>*window<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_window_item" kindref="compound">WindowItem</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(item)-&gt;window();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!window-&gt;<ref refid="class_k_win_1_1_window_1a0a700ea4c908f6907d172e7754c38db7" kindref="member">isOnOutput</ref>(output))<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>surface<sp/>=<sp/>window-&gt;<ref refid="class_k_win_1_1_window_1a379c25dec85d7b0aee3b79676327b9b6" kindref="member">surface</ref>())<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface-&gt;traverseTree([&amp;frameTime,<sp/>&amp;<ref refid="class_k_win_1_1_workspace_scene_1a0b5ae2267b03670e84be04aa5c33272f" kindref="member">frame</ref>,<sp/>&amp;output](<ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref><sp/>*surface)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa8db310a54de302b6528ea4ac0d1bd29" kindref="member">frameRendered</ref>(frameTime.count());</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>feedback<sp/>=<sp/>surface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a0de5f3bc96df584e06784cd3e1b302d0" kindref="member">takePresentationFeedback</ref>(output))<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_workspace_scene_1a0b5ae2267b03670e84be04aa5c33272f" kindref="member">frame</ref>-&gt;addFeedback(std::move(feedback));</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_dndIcon)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>surface<sp/>=<sp/>m_dndIcon-&gt;surface())<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface-&gt;traverseTree([&amp;frameTime,<sp/>&amp;<ref refid="class_k_win_1_1_workspace_scene_1a0b5ae2267b03670e84be04aa5c33272f" kindref="member">frame</ref>,<sp/>&amp;output](<ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref><sp/>*surface)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa8db310a54de302b6528ea4ac0d1bd29" kindref="member">frameRendered</ref>(frameTime.count());</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>feedback<sp/>=<sp/>surface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a0de5f3bc96df584e06784cd3e1b302d0" kindref="member">takePresentationFeedback</ref>(output))<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_workspace_scene_1a0b5ae2267b03670e84be04aa5c33272f" kindref="member">frame</ref>-&gt;addFeedback(std::move(feedback));</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="class_k_win_1_1_workspace_scene_1a13a50f0913c5f6add3ad3fc0e83fe8fb" refkind="member"><highlight class="normal">QRegion<sp/><ref refid="class_k_win_1_1_workspace_scene_1a13a50f0913c5f6add3ad3fc0e83fe8fb" kindref="member">WorkspaceScene::prePaint</ref>(<ref refid="class_k_win_1_1_scene_delegate" kindref="compound">SceneDelegate</ref><sp/>*delegate)</highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_workspace_scene_1ab0a0b25f7940b3dd3c3f6e67321d12ae" kindref="member">createStackingOrder</ref>();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_workspace_scene_1acc0f1d9839e57d19120b7e351a1ee542" kindref="member">painted_delegate</ref><sp/>=<sp/>delegate;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_workspace_scene_1a85064bff7e2052de99fd5a09cec66b93" kindref="member">painted_screen</ref><sp/>=<sp/><ref refid="class_k_win_1_1_workspace_scene_1acc0f1d9839e57d19120b7e351a1ee542" kindref="member">painted_delegate</ref>-&gt;output();</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_render_loop" kindref="compound">RenderLoop</ref><sp/>*renderLoop<sp/>=<sp/><ref refid="class_k_win_1_1_workspace_scene_1a85064bff7e2052de99fd5a09cec66b93" kindref="member">painted_screen</ref>-&gt;renderLoop();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::chrono::milliseconds<sp/>presentTime<sp/>=</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(renderLoop-&gt;<ref refid="class_k_win_1_1_render_loop_1ab7210116a0b5c9ef4fa433cfbb668eb3" kindref="member">nextPresentationTimestamp</ref>());</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(presentTime<sp/>&gt;<sp/>m_expectedPresentTimestamp)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_expectedPresentTimestamp<sp/>=<sp/>presentTime;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>preparation<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1ad780e509c41727e08e1cc641d4cad7b5" kindref="member">effects</ref>-&gt;startPaint();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_screen_pre_paint_data" kindref="compound">ScreenPrePaintData</ref><sp/>prePaintData;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>prePaintData.<ref refid="group__kwineffects_1ga4d5154f78b8ef3ee05dd1544cd13866a" kindref="member">mask</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>prePaintData.<ref refid="group__kwineffects_1ga83ff0d327946e316b5038ab813959a79" kindref="member">screen</ref><sp/>=<sp/><ref refid="class_k_win_1_1_workspace_scene_1a85064bff7e2052de99fd5a09cec66b93" kindref="member">painted_screen</ref>;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1ad780e509c41727e08e1cc641d4cad7b5" kindref="member">effects</ref>-&gt;makeOpenGLContextCurrent();</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_k_win_1_1_workspace_scene_1ab48d5722a8b0b12c32d006791dbc15aa" kindref="member">preFrameRender</ref>();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1ad780e509c41727e08e1cc641d4cad7b5" kindref="member">effects</ref>-&gt;prePaintScreen(prePaintData,<sp/>m_expectedPresentTimestamp);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>m_paintContext.damage<sp/>=<sp/>prePaintData.<ref refid="group__kwineffects_1ga3ff0cb052f03ff7f243927e8082a33fd" kindref="member">paint</ref>;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>m_paintContext.mask<sp/>=<sp/>prePaintData.<ref refid="group__kwineffects_1ga4d5154f78b8ef3ee05dd1544cd13866a" kindref="member">mask</ref>;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>m_paintContext.phase2Data.clear();</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_paintContext.mask<sp/>&amp;<sp/>(<ref refid="class_k_win_1_1_scene_1a3a01125b0e9a25abdd13bb4a4ab1287ea3262c470843390ef57968c5a851df037" kindref="member">PAINT_SCREEN_TRANSFORMED</ref><sp/>|<sp/><ref refid="class_k_win_1_1_scene_1a3a01125b0e9a25abdd13bb4a4ab1287ea398bc4c8442e505f33269673ee39acb3" kindref="member">PAINT_SCREEN_WITH_TRANSFORMED_WINDOWS</ref>))<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_workspace_scene_1a667c76c84d3266f86e63836383a0b666" kindref="member">preparePaintGenericScreen</ref>();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_workspace_scene_1ad8e7e918877f3d907d64ef96ddeac92b" kindref="member">preparePaintSimpleScreen</ref>();</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_paintContext.damage.translated(-delegate-&gt;<ref refid="class_k_win_1_1_scene_delegate_1adbd454056d2ade0014b701965e0bb68d" kindref="member">viewport</ref>().topLeft());</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resetRepaintsHelper(<ref refid="class_k_win_1_1_item" kindref="compound">Item</ref><sp/>*item,<sp/><ref refid="class_k_win_1_1_scene_delegate" kindref="compound">SceneDelegate</ref><sp/>*delegate)</highlight></codeline>
<codeline lineno="338"><highlight class="normal">{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="class_k_win_1_1_item_1a982be6965729c6101b0e24c8bead45c3" kindref="member">resetRepaints</ref>(delegate);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childItems<sp/>=<sp/>item-&gt;<ref refid="class_k_win_1_1_item_1ac0dc5aebbfc288debf9e59ede6f4d39b" kindref="member">childItems</ref>();</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_k_win_1_1_item" kindref="compound">Item</ref><sp/>*childItem<sp/>:<sp/>childItems)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resetRepaintsHelper(childItem,<sp/>delegate);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>accumulateRepaints(<ref refid="class_k_win_1_1_item" kindref="compound">Item</ref><sp/>*item,<sp/><ref refid="class_k_win_1_1_scene_delegate" kindref="compound">SceneDelegate</ref><sp/>*delegate,<sp/>QRegion<sp/>*repaints)</highlight></codeline>
<codeline lineno="348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>*repaints<sp/>+=<sp/>item-&gt;takeRepaints(delegate);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childItems<sp/>=<sp/>item-&gt;childItems();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_k_win_1_1_item" kindref="compound">Item</ref><sp/>*childItem<sp/>:<sp/>childItems)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accumulateRepaints(childItem,<sp/>delegate,<sp/>repaints);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357" refid="class_k_win_1_1_workspace_scene_1a667c76c84d3266f86e63836383a0b666" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_workspace_scene_1a667c76c84d3266f86e63836383a0b666" kindref="member">WorkspaceScene::preparePaintGenericScreen</ref>()</highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_k_win_1_1_window_item" kindref="compound">WindowItem</ref><sp/>*windowItem<sp/>:<sp/>std::as_const(<ref refid="class_k_win_1_1_workspace_scene_1a2ad6b5c78a83037f3c6b3c31afe83a0b" kindref="member">stacking_order</ref>))<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resetRepaintsHelper(windowItem,<sp/><ref refid="class_k_win_1_1_workspace_scene_1acc0f1d9839e57d19120b7e351a1ee542" kindref="member">painted_delegate</ref>);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_window_pre_paint_data" kindref="compound">WindowPrePaintData</ref><sp/>data;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.<ref refid="group__kwineffects_1ga2fa934b7286a02d2be895bb798b53957" kindref="member">mask</ref><sp/>=<sp/>m_paintContext.mask;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.<ref refid="group__kwineffects_1gaefc88d4e7164ec16e1fca4feb683e88e" kindref="member">paint</ref><sp/>=<sp/><ref refid="namespace_k_win_1a0655524c1f1ba8dbb2cf16a1e4b9bb97" kindref="member">infiniteRegion</ref>();<sp/></highlight><highlight class="comment">//<sp/>no<sp/>clipping,<sp/>so<sp/>doesn&apos;t<sp/>really<sp/>matter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1ad780e509c41727e08e1cc641d4cad7b5" kindref="member">effects</ref>-&gt;prePaintWindow(windowItem-&gt;effectWindow(),<sp/>data,<sp/>m_expectedPresentTimestamp);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_paintContext.phase2Data.append(<ref refid="struct_k_win_1_1_workspace_scene_1_1_phase2_data" kindref="compound">Phase2Data</ref>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.item<sp/>=<sp/>windowItem,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.region<sp/>=<sp/><ref refid="namespace_k_win_1a0655524c1f1ba8dbb2cf16a1e4b9bb97" kindref="member">infiniteRegion</ref>(),</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.opaque<sp/>=<sp/>data.<ref refid="group__kwineffects_1ga663b223e213df88d506393ce436e10a4" kindref="member">opaque</ref>,</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.mask<sp/>=<sp/>data.<ref refid="group__kwineffects_1ga2fa934b7286a02d2be895bb798b53957" kindref="member">mask</ref>,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>resetRepaintsHelper(m_overlayItem.get(),<sp/><ref refid="class_k_win_1_1_workspace_scene_1acc0f1d9839e57d19120b7e351a1ee542" kindref="member">painted_delegate</ref>);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>m_paintContext.damage<sp/>=<sp/><ref refid="namespace_k_win_1a0655524c1f1ba8dbb2cf16a1e4b9bb97" kindref="member">infiniteRegion</ref>();</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379" refid="class_k_win_1_1_workspace_scene_1ad8e7e918877f3d907d64ef96ddeac92b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_workspace_scene_1ad8e7e918877f3d907d64ef96ddeac92b" kindref="member">WorkspaceScene::preparePaintSimpleScreen</ref>()</highlight></codeline>
<codeline lineno="380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_k_win_1_1_window_item" kindref="compound">WindowItem</ref><sp/>*windowItem<sp/>:<sp/>std::as_const(<ref refid="class_k_win_1_1_workspace_scene_1a2ad6b5c78a83037f3c6b3c31afe83a0b" kindref="member">stacking_order</ref>))<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref><sp/>*window<sp/>=<sp/>windowItem-&gt;window();</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_window_pre_paint_data" kindref="compound">WindowPrePaintData</ref><sp/>data;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.<ref refid="group__kwineffects_1ga2fa934b7286a02d2be895bb798b53957" kindref="member">mask</ref><sp/>=<sp/>m_paintContext.mask;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accumulateRepaints(windowItem,<sp/><ref refid="class_k_win_1_1_workspace_scene_1acc0f1d9839e57d19120b7e351a1ee542" kindref="member">painted_delegate</ref>,<sp/>&amp;data.<ref refid="group__kwineffects_1gaefc88d4e7164ec16e1fca4feb683e88e" kindref="member">paint</ref>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clip<sp/>out<sp/>the<sp/>decoration<sp/>for<sp/>opaque<sp/>windows;<sp/>the<sp/>decoration<sp/>is<sp/>drawn<sp/>in<sp/>the<sp/>second<sp/>pass.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window-&gt;<ref refid="class_k_win_1_1_window_1abb0f10e1968953e89829431415fa803e" kindref="member">opacity</ref>()<sp/>==<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_surface_item" kindref="compound">SurfaceItem</ref><sp/>*surfaceItem<sp/>=<sp/>windowItem-&gt;surfaceItem();</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Q_LIKELY(surfaceItem))<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.<ref refid="group__kwineffects_1ga663b223e213df88d506393ce436e10a4" kindref="member">opaque</ref><sp/>=<sp/>surfaceItem-&gt;<ref refid="class_k_win_1_1_item_1aa7f7455ed653a89d4df4687ea1a38b8f" kindref="member">mapToScene</ref>(surfaceItem-&gt;<ref refid="class_k_win_1_1_item_1a274cdc9fe90fa038d749b0552d777481" kindref="member">opaque</ref>());</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_decoration_item" kindref="compound">DecorationItem</ref><sp/>*decorationItem<sp/>=<sp/>windowItem-&gt;decorationItem();</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decorationItem)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.<ref refid="group__kwineffects_1ga663b223e213df88d506393ce436e10a4" kindref="member">opaque</ref><sp/>+=<sp/>decorationItem-&gt;<ref refid="class_k_win_1_1_item_1aa7f7455ed653a89d4df4687ea1a38b8f" kindref="member">mapToScene</ref>(decorationItem-&gt;<ref refid="class_k_win_1_1_decoration_item_1af59c8e70d131da8b234136ac10d55430" kindref="member">opaque</ref>());</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1ad780e509c41727e08e1cc641d4cad7b5" kindref="member">effects</ref>-&gt;prePaintWindow(windowItem-&gt;effectWindow(),<sp/>data,<sp/>m_expectedPresentTimestamp);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_paintContext.phase2Data.append(<ref refid="struct_k_win_1_1_workspace_scene_1_1_phase2_data" kindref="compound">Phase2Data</ref>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.item<sp/>=<sp/>windowItem,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.region<sp/>=<sp/>data.<ref refid="group__kwineffects_1gaefc88d4e7164ec16e1fca4feb683e88e" kindref="member">paint</ref>,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.opaque<sp/>=<sp/>data.<ref refid="group__kwineffects_1ga663b223e213df88d506393ce436e10a4" kindref="member">opaque</ref>,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.mask<sp/>=<sp/>data.<ref refid="group__kwineffects_1ga2fa934b7286a02d2be895bb798b53957" kindref="member">mask</ref>,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>an<sp/>occlusion<sp/>cull<sp/>pass,<sp/>remove<sp/>surface<sp/>damage<sp/>occluded<sp/>by<sp/>opaque<sp/>windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>QRegion<sp/>opaque;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>m_paintContext.phase2Data.size()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;paintData<sp/>=<sp/>m_paintContext.phase2Data.at(i);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_paintContext.damage<sp/>+=<sp/>paintData.region<sp/>-<sp/>opaque;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(paintData.mask<sp/>&amp;<sp/>(<ref refid="class_k_win_1_1_scene_1a3a01125b0e9a25abdd13bb4a4ab1287ea315647e6cd3128d04214a22d1163be7a" kindref="member">PAINT_WINDOW_TRANSLUCENT</ref><sp/>|<sp/><ref refid="class_k_win_1_1_scene_1a3a01125b0e9a25abdd13bb4a4ab1287eaff3757651aac719a5d50361799c21750" kindref="member">PAINT_WINDOW_TRANSFORMED</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opaque<sp/>+=<sp/>paintData.opaque;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>accumulateRepaints(m_overlayItem.get(),<sp/><ref refid="class_k_win_1_1_workspace_scene_1acc0f1d9839e57d19120b7e351a1ee542" kindref="member">painted_delegate</ref>,<sp/>&amp;m_paintContext.damage);</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="class_k_win_1_1_workspace_scene_1af9843892fe339b2dd2d8f7b8752e1e11" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_workspace_scene_1af9843892fe339b2dd2d8f7b8752e1e11" kindref="member">WorkspaceScene::postPaint</ref>()</highlight></codeline>
<codeline lineno="423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_k_win_1_1_window_item" kindref="compound">WindowItem</ref><sp/>*w<sp/>:<sp/>std::as_const(<ref refid="class_k_win_1_1_workspace_scene_1a2ad6b5c78a83037f3c6b3c31afe83a0b" kindref="member">stacking_order</ref>))<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1ad780e509c41727e08e1cc641d4cad7b5" kindref="member">effects</ref>-&gt;postPaintWindow(w-&gt;effectWindow());</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1ad780e509c41727e08e1cc641d4cad7b5" kindref="member">effects</ref>-&gt;postPaintScreen();</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_workspace_scene_1a56c321586056a856fb7cfac079d41163" kindref="member">clearStackingOrder</ref>();</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433" refid="class_k_win_1_1_workspace_scene_1ae848be1aaba91ef1d6671a3b44f88927" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_workspace_scene_1ae848be1aaba91ef1d6671a3b44f88927" kindref="member">WorkspaceScene::paint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref><sp/>&amp;renderTarget,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegion<sp/>&amp;region)</highlight></codeline>
<codeline lineno="434"><highlight class="normal">{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_render_viewport" kindref="compound">RenderViewport</ref><sp/>viewport(<ref refid="class_k_win_1_1_workspace_scene_1a85064bff7e2052de99fd5a09cec66b93" kindref="member">painted_screen</ref>-&gt;geometryF(),<sp/><ref refid="class_k_win_1_1_workspace_scene_1a85064bff7e2052de99fd5a09cec66b93" kindref="member">painted_screen</ref>-&gt;scale(),<sp/>renderTarget);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_scene_1ac5f0deef84a1b89464a0e32f3a9489af" kindref="member">m_renderer</ref>-&gt;beginFrame(renderTarget,<sp/>viewport);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1ad780e509c41727e08e1cc641d4cad7b5" kindref="member">effects</ref>-&gt;paintScreen(renderTarget,<sp/>viewport,<sp/>m_paintContext.mask,<sp/>region,<sp/><ref refid="class_k_win_1_1_workspace_scene_1a85064bff7e2052de99fd5a09cec66b93" kindref="member">painted_screen</ref>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>m_paintScreenCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_overlayItem)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegion<sp/>repaint<sp/>=<sp/>region<sp/>&amp;<sp/>m_overlayItem-&gt;mapToScene(m_overlayItem-&gt;boundingRect()).toRect();</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!repaint.isEmpty())<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_scene_1ac5f0deef84a1b89464a0e32f3a9489af" kindref="member">m_renderer</ref>-&gt;renderItem(renderTarget,<sp/>viewport,<sp/>m_overlayItem.get(),<sp/><ref refid="class_k_win_1_1_scene_1a3a01125b0e9a25abdd13bb4a4ab1287ea3262c470843390ef57968c5a851df037" kindref="member">PAINT_SCREEN_TRANSFORMED</ref>,<sp/>repaint,<sp/><ref refid="class_k_win_1_1_window_paint_data" kindref="compound">WindowPaintData</ref>{});</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_k_win_1_1_workspace_scene_1a92cd6407bbe5bfd8961ba6891023ef18" kindref="member">frameRendered</ref>();</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_scene_1ac5f0deef84a1b89464a0e32f3a9489af" kindref="member">m_renderer</ref>-&gt;endFrame();</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>function<sp/>that&apos;ll<sp/>be<sp/>eventually<sp/>called<sp/>by<sp/>paintScreen()<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454" refid="class_k_win_1_1_workspace_scene_1a69c71b782bb76247acde1f0c8fa64dc1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_workspace_scene_1a69c71b782bb76247acde1f0c8fa64dc1" kindref="member">WorkspaceScene::finalPaintScreen</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref><sp/>&amp;renderTarget,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_render_viewport" kindref="compound">RenderViewport</ref><sp/>&amp;viewport,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegion<sp/>&amp;region,<sp/><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref><sp/>*screen)</highlight></codeline>
<codeline lineno="455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>m_paintScreenCount++;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask<sp/>&amp;<sp/>(<ref refid="class_k_win_1_1_scene_1a3a01125b0e9a25abdd13bb4a4ab1287ea3262c470843390ef57968c5a851df037" kindref="member">PAINT_SCREEN_TRANSFORMED</ref><sp/>|<sp/><ref refid="class_k_win_1_1_scene_1a3a01125b0e9a25abdd13bb4a4ab1287ea398bc4c8442e505f33269673ee39acb3" kindref="member">PAINT_SCREEN_WITH_TRANSFORMED_WINDOWS</ref>))<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_workspace_scene_1a76ac4bfbffe680e75b260464eb748d90" kindref="member">paintGenericScreen</ref>(renderTarget,<sp/>viewport,<sp/>mask,<sp/>screen);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_workspace_scene_1a78b8a06ca313fbfc5c6e8e2eaba40efe" kindref="member">paintSimpleScreen</ref>(renderTarget,<sp/>viewport,<sp/>mask,<sp/>region);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>generic<sp/>painting<sp/>code<sp/>that<sp/>can<sp/>handle<sp/>even<sp/>transformations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>simply<sp/>paints<sp/>bottom-to-top.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466" refid="class_k_win_1_1_workspace_scene_1a76ac4bfbffe680e75b260464eb748d90" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_workspace_scene_1a76ac4bfbffe680e75b260464eb748d90" kindref="member">WorkspaceScene::paintGenericScreen</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref><sp/>&amp;renderTarget,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_render_viewport" kindref="compound">RenderViewport</ref><sp/>&amp;viewport,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref><sp/>*screen)</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_paintContext.mask<sp/>&amp;<sp/><ref refid="class_k_win_1_1_scene_1a3a01125b0e9a25abdd13bb4a4ab1287ea49304f0364b4092d756e0f592b6b744d" kindref="member">PAINT_SCREEN_BACKGROUND_FIRST</ref>)<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_paintScreenCount<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_scene_1ac5f0deef84a1b89464a0e32f3a9489af" kindref="member">m_renderer</ref>-&gt;renderBackground(renderTarget,<sp/>viewport,<sp/><ref refid="namespace_k_win_1a0655524c1f1ba8dbb2cf16a1e4b9bb97" kindref="member">infiniteRegion</ref>());</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_scene_1ac5f0deef84a1b89464a0e32f3a9489af" kindref="member">m_renderer</ref>-&gt;renderBackground(renderTarget,<sp/>viewport,<sp/><ref refid="namespace_k_win_1a0655524c1f1ba8dbb2cf16a1e4b9bb97" kindref="member">infiniteRegion</ref>());</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_workspace_scene_1_1_phase2_data" kindref="compound">Phase2Data</ref><sp/>&amp;paintData<sp/>:<sp/>std::as_const(m_paintContext.phase2Data))<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_workspace_scene_1a3e5ccb425cad4f11190dcf968861dd12" kindref="member">paintWindow</ref>(renderTarget,<sp/>viewport,<sp/>paintData.item,<sp/>paintData.mask,<sp/>paintData.region);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>optimized<sp/>case<sp/>without<sp/>any<sp/>transformations<sp/>at<sp/>all.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>can<sp/>paint<sp/>only<sp/>the<sp/>requested<sp/>region<sp/>and<sp/>can<sp/>use<sp/>clipping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>reduce<sp/>painting<sp/>and<sp/>improve<sp/>performance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484" refid="class_k_win_1_1_workspace_scene_1a78b8a06ca313fbfc5c6e8e2eaba40efe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_workspace_scene_1a78b8a06ca313fbfc5c6e8e2eaba40efe" kindref="member">WorkspaceScene::paintSimpleScreen</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref><sp/>&amp;renderTarget,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_render_viewport" kindref="compound">RenderViewport</ref><sp/>&amp;viewport,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegion<sp/>&amp;region)</highlight></codeline>
<codeline lineno="485"><highlight class="normal">{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>occlusion<sp/>culling<sp/>pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>QRegion<sp/>visible<sp/>=<sp/>region;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>m_paintContext.phase2Data.size()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_workspace_scene_1_1_phase2_data" kindref="compound">Phase2Data</ref><sp/>*data<sp/>=<sp/>&amp;m_paintContext.phase2Data[i];</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;<ref refid="struct_k_win_1_1_workspace_scene_1_1_phase2_data_1abdd3c9c36bf63fd4f9fbcd134428eb98" kindref="member">region</ref><sp/>=<sp/>visible;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(data-&gt;<ref refid="struct_k_win_1_1_workspace_scene_1_1_phase2_data_1a48bb09ecf2145851bb18e723b3101c76" kindref="member">mask</ref><sp/>&amp;<sp/><ref refid="class_k_win_1_1_scene_1a3a01125b0e9a25abdd13bb4a4ab1287eaff3757651aac719a5d50361799c21750" kindref="member">PAINT_WINDOW_TRANSFORMED</ref>))<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;<ref refid="struct_k_win_1_1_workspace_scene_1_1_phase2_data_1abdd3c9c36bf63fd4f9fbcd134428eb98" kindref="member">region</ref><sp/>&amp;=<sp/>data-&gt;<ref refid="struct_k_win_1_1_workspace_scene_1_1_phase2_data_1ac65c302b2afd17db4ac2003378055ac6" kindref="member">item</ref>-&gt;<ref refid="class_k_win_1_1_item_1aa7f7455ed653a89d4df4687ea1a38b8f" kindref="member">mapToScene</ref>(data-&gt;<ref refid="struct_k_win_1_1_workspace_scene_1_1_phase2_data_1ac65c302b2afd17db4ac2003378055ac6" kindref="member">item</ref>-&gt;<ref refid="class_k_win_1_1_item_1a2cd75e545d4de3d2cf9a58c90fe95a82" kindref="member">boundingRect</ref>()).toAlignedRect();</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(data-&gt;<ref refid="struct_k_win_1_1_workspace_scene_1_1_phase2_data_1a48bb09ecf2145851bb18e723b3101c76" kindref="member">mask</ref><sp/>&amp;<sp/><ref refid="class_k_win_1_1_scene_1a3a01125b0e9a25abdd13bb4a4ab1287ea315647e6cd3128d04214a22d1163be7a" kindref="member">PAINT_WINDOW_TRANSLUCENT</ref>))<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visible<sp/>-=<sp/>data-&gt;<ref refid="struct_k_win_1_1_workspace_scene_1_1_phase2_data_1a5f00fd62666412cc47ccf4b8ef2b3f43" kindref="member">opaque</ref>;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_scene_1ac5f0deef84a1b89464a0e32f3a9489af" kindref="member">m_renderer</ref>-&gt;renderBackground(renderTarget,<sp/>viewport,<sp/>visible);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_workspace_scene_1_1_phase2_data" kindref="compound">Phase2Data</ref><sp/>&amp;paintData<sp/>:<sp/>std::as_const(m_paintContext.phase2Data))<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_workspace_scene_1a3e5ccb425cad4f11190dcf968861dd12" kindref="member">paintWindow</ref>(renderTarget,<sp/>viewport,<sp/>paintData.item,<sp/>paintData.mask,<sp/>paintData.region);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508" refid="class_k_win_1_1_workspace_scene_1ab0a0b25f7940b3dd3c3f6e67321d12ae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_workspace_scene_1ab0a0b25f7940b3dd3c3f6e67321d12ae" kindref="member">WorkspaceScene::createStackingOrder</ref>()</highlight></codeline>
<codeline lineno="509"><highlight class="normal">{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;Item<sp/>*&gt;<sp/>items<sp/>=<sp/>m_containerItem-&gt;sortedChildItems();</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_k_win_1_1_item" kindref="compound">Item</ref><sp/>*item<sp/>:<sp/>std::as_const(items))<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_window_item" kindref="compound">WindowItem</ref><sp/>*windowItem<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_window_item" kindref="compound">WindowItem</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(item);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(windowItem-&gt;<ref refid="class_k_win_1_1_item_1a3115fe9f6c0836415bbaa8638ce45048" kindref="member">isVisible</ref>())<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_workspace_scene_1a2ad6b5c78a83037f3c6b3c31afe83a0b" kindref="member">stacking_order</ref>.append(windowItem);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="class_k_win_1_1_workspace_scene_1a56c321586056a856fb7cfac079d41163" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_workspace_scene_1a56c321586056a856fb7cfac079d41163" kindref="member">WorkspaceScene::clearStackingOrder</ref>()</highlight></codeline>
<codeline lineno="520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_workspace_scene_1a2ad6b5c78a83037f3c6b3c31afe83a0b" kindref="member">stacking_order</ref>.clear();</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524" refid="class_k_win_1_1_workspace_scene_1a3e5ccb425cad4f11190dcf968861dd12" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_workspace_scene_1a3e5ccb425cad4f11190dcf968861dd12" kindref="member">WorkspaceScene::paintWindow</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref><sp/>&amp;renderTarget,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_render_viewport" kindref="compound">RenderViewport</ref><sp/>&amp;viewport,<sp/><ref refid="class_k_win_1_1_window_item" kindref="compound">WindowItem</ref><sp/>*item,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegion<sp/>&amp;region)</highlight></codeline>
<codeline lineno="525"><highlight class="normal">{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(region.isEmpty())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>completely<sp/>clipped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_window_paint_data" kindref="compound">WindowPaintData</ref><sp/>data;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1ad780e509c41727e08e1cc641d4cad7b5" kindref="member">effects</ref>-&gt;paintWindow(renderTarget,<sp/>viewport,<sp/>item-&gt;<ref refid="class_k_win_1_1_window_item_1aa7848c43c34d776c2e160ce8557b80c8" kindref="member">effectWindow</ref>(),<sp/>mask,<sp/>region,<sp/>data);</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>function<sp/>that&apos;ll<sp/>be<sp/>eventually<sp/>called<sp/>by<sp/>paintWindow()<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535" refid="class_k_win_1_1_workspace_scene_1aa8c29d54a07ca2065e731a9ef24ffa67" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_workspace_scene_1aa8c29d54a07ca2065e731a9ef24ffa67" kindref="member">WorkspaceScene::finalPaintWindow</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref><sp/>&amp;renderTarget,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_render_viewport" kindref="compound">RenderViewport</ref><sp/>&amp;viewport,<sp/><ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref><sp/>*w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegion<sp/>&amp;region,<sp/><ref refid="class_k_win_1_1_window_paint_data" kindref="compound">WindowPaintData</ref><sp/>&amp;data)</highlight></codeline>
<codeline lineno="536"><highlight class="normal">{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1ad780e509c41727e08e1cc641d4cad7b5" kindref="member">effects</ref>-&gt;drawWindow(renderTarget,<sp/>viewport,<sp/>w,<sp/>mask,<sp/>region,<sp/>data);</highlight></codeline>
<codeline lineno="538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>eventually<sp/>called<sp/>from<sp/>drawWindow()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541" refid="class_k_win_1_1_workspace_scene_1a92dc2b0eb57f6f1305d5425f87538d34" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_workspace_scene_1a92dc2b0eb57f6f1305d5425f87538d34" kindref="member">WorkspaceScene::finalDrawWindow</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref><sp/>&amp;renderTarget,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_render_viewport" kindref="compound">RenderViewport</ref><sp/>&amp;viewport,<sp/><ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref><sp/>*w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegion<sp/>&amp;region,<sp/><ref refid="class_k_win_1_1_window_paint_data" kindref="compound">WindowPaintData</ref><sp/>&amp;data)</highlight></codeline>
<codeline lineno="542"><highlight class="normal">{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_scene_1ac5f0deef84a1b89464a0e32f3a9489af" kindref="member">m_renderer</ref>-&gt;renderItem(renderTarget,<sp/>viewport,<sp/>w-&gt;<ref refid="class_k_win_1_1_effect_window_1a4ea826c4e0ce5b195e428ec9766bc2f1" kindref="member">windowItem</ref>(),<sp/>mask,<sp/>region,<sp/>data);</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546" refid="class_k_win_1_1_workspace_scene_1a2f1a696b3c4f2a1bc4a73611f828491b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_workspace_scene_1a2f1a696b3c4f2a1bc4a73611f828491b" kindref="member">WorkspaceScene::makeOpenGLContextCurrent</ref>()</highlight></codeline>
<codeline lineno="547"><highlight class="normal">{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551" refid="class_k_win_1_1_workspace_scene_1a99cf4db6e58466d1f313562d70139ed2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_workspace_scene_1a99cf4db6e58466d1f313562d70139ed2" kindref="member">WorkspaceScene::doneOpenGLContextCurrent</ref>()</highlight></codeline>
<codeline lineno="552"><highlight class="normal">{</highlight></codeline>
<codeline lineno="553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555" refid="class_k_win_1_1_workspace_scene_1a5034a824ec33adeeeb4dd9575461db9f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_workspace_scene_1a5034a824ec33adeeeb4dd9575461db9f" kindref="member">WorkspaceScene::supportsNativeFence</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="556"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560" refid="class_k_win_1_1_workspace_scene_1ae14a2c8916fd295aeec40c41aecf812d" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_egl_context" kindref="compound">EglContext</ref><sp/>*<ref refid="class_k_win_1_1_workspace_scene_1ae14a2c8916fd295aeec40c41aecf812d" kindref="member">WorkspaceScene::openglContext</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="561"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;moc_workspacescene.cpp&quot;</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="kwin/src/scene/workspacescene.cpp"/>
  </compounddef>
</doxygen>
