<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="test__colorspaces_8cpp" kind="file" language="C++">
    <compoundname>test_colorspaces.cpp</compoundname>
    <includes local="no">QImage</includes>
    <includes local="no">QTest</includes>
    <includes refid="colorpipeline_8h" local="yes">core/colorpipeline.h</includes>
    <includes refid="colorspace_8h" local="yes">core/colorspace.h</includes>
    <includes refid="iccprofile_8h" local="yes">core/iccprofile.h</includes>
    <includes refid="eglcontext_8h" local="yes">opengl/eglcontext.h</includes>
    <includes refid="egldisplay_8h" local="yes">opengl/egldisplay.h</includes>
    <includes refid="glframebuffer_8h" local="yes">opengl/glframebuffer.h</includes>
    <includes refid="glshader_8h" local="yes">opengl/glshader.h</includes>
    <includes refid="glshadermanager_8h" local="yes">opengl/glshadermanager.h</includes>
    <includes refid="icc__shader_8h" local="yes">opengl/icc_shader.h</includes>
    <includes local="no">lcms2.h</includes>
    <includes local="yes">test_colorspaces.moc</includes>
    <incdepgraph>
      <node id="1">
        <label>kwin/autotests/test_colorspaces.cpp</label>
        <link refid="test__colorspaces_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>colorlut3d.h</label>
        <link refid="colorlut3d_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>core/colorpipeline.h</label>
        <link refid="colorpipeline_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>colorspace.h</label>
        <link refid="colorspace_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>colortransformation.h</label>
        <link refid="colortransformation_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>core/iccprofile.h</label>
        <link refid="iccprofile_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>core/output.h</label>
        <link refid="core_2output_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>renderloop.h</label>
        <link refid="renderloop_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>effect/globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>opengl/eglcontext.h</label>
        <link refid="eglcontext_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>opengl/egldisplay.h</label>
        <link refid="egldisplay_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>opengl/glframebuffer.h</label>
        <link refid="glframebuffer_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>opengl/glshader.h</label>
        <link refid="glshader_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>opengl/glshadermanager.h</label>
        <link refid="glshadermanager_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>opengl/gltexture.h</label>
        <link refid="gltexture_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>opengl/icc_shader.h</label>
        <link refid="icc__shader_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>utils/edid.h</label>
        <link refid="edid_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>utils/version.h</label>
        <link refid="version_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>QByteArray</label>
      </node>
      <node id="48">
        <label>QColor</label>
      </node>
      <node id="26">
        <label>QCoreApplication</label>
      </node>
      <node id="34">
        <label>QDebug</label>
      </node>
      <node id="37">
        <label>QExplicitlySharedDataPointer</label>
      </node>
      <node id="52">
        <label>QFlags</label>
      </node>
      <node id="44">
        <label>QHash</label>
      </node>
      <node id="2">
        <label>QImage</label>
      </node>
      <node id="32">
        <label>QList</label>
      </node>
      <node id="49">
        <label>QMatrix3x3</label>
      </node>
      <node id="11">
        <label>QMatrix4x4</label>
      </node>
      <node id="29">
        <label>QObject</label>
      </node>
      <node id="27">
        <label>QPoint</label>
      </node>
      <node id="35">
        <label>QRect</label>
      </node>
      <node id="38">
        <label>QRegion</label>
      </node>
      <node id="33">
        <label>QSize</label>
      </node>
      <node id="55">
        <label>QSizeF</label>
      </node>
      <node id="41">
        <label>QStack</label>
      </node>
      <node id="18">
        <label>QString</label>
      </node>
      <node id="3">
        <label>QTest</label>
      </node>
      <node id="36">
        <label>QUuid</label>
      </node>
      <node id="28">
        <label>QVariant</label>
      </node>
      <node id="6">
        <label>QVector</label>
      </node>
      <node id="12">
        <label>QVector2D</label>
      </node>
      <node id="50">
        <label>QVector3D</label>
      </node>
      <node id="25">
        <label>config-kwin.h</label>
      </node>
      <node id="42">
        <label>epoxy/egl.h</label>
      </node>
      <node id="39">
        <label>epoxy/gl.h</label>
      </node>
      <node id="19">
        <label>expected</label>
      </node>
      <node id="8">
        <label>kwin_export.h</label>
      </node>
      <node id="56">
        <label>lcms2.h</label>
      </node>
      <node id="53">
        <label>map</label>
      </node>
      <node id="7">
        <label>memory</label>
      </node>
      <node id="10">
        <label>optional</label>
      </node>
      <node id="14">
        <label>stdint.h</label>
      </node>
      <node id="45">
        <label>sys/types.h</label>
      </node>
      <node id="57">
        <label>test_colorspaces.moc</label>
      </node>
      <node id="15">
        <label>tuple</label>
      </node>
      <node id="16">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_test_colorspaces" prot="public">TestColorspaces</innerclass>
    <sectiondef kind="var">
      <memberdef kind="variable" id="test__colorspaces_8cpp_1ab47f58d0a831cfc60922b7a90c4d4a65" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double s_resolution10bit</definition>
        <argsstring></argsstring>
        <name>s_resolution10bit</name>
        <initializer>= std::pow(1.0 / 2.0, 10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/test_colorspaces.cpp" line="60" column="21" bodyfile="kwin/autotests/test_colorspaces.cpp" bodystart="60" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="test__colorspaces_8cpp_1a1eafe86f4ce72578871211ea7fa3e88b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool compareVectors</definition>
        <argsstring>(const QVector3D &amp;one, const QVector3D &amp;two, float maxDifference)</argsstring>
        <name>compareVectors</name>
        <param>
          <type>const QVector3D &amp;</type>
          <declname>one</declname>
        </param>
        <param>
          <type>const QVector3D &amp;</type>
          <declname>two</declname>
        </param>
        <param>
          <type>float</type>
          <declname>maxDifference</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/test_colorspaces.cpp" line="49" column="13" bodyfile="kwin/autotests/test_colorspaces.cpp" bodystart="49" bodyend="58"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2023<sp/>Xaver<sp/>Hugl<sp/>&lt;xaver.hugl@gmail.com&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>LGPL-2.0-or-later</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QImage&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QTest&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="colorpipeline_8h" kindref="compound">core/colorpipeline.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="colorspace_8h" kindref="compound">core/colorspace.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="iccprofile_8h" kindref="compound">core/iccprofile.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="eglcontext_8h" kindref="compound">opengl/eglcontext.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="egldisplay_8h" kindref="compound">opengl/egldisplay.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="glframebuffer_8h" kindref="compound">opengl/glframebuffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="glshader_8h" kindref="compound">opengl/glshader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="glshadermanager_8h" kindref="compound">opengl/glshadermanager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="icc__shader_8h" kindref="compound">opengl/icc_shader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;lcms2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win" kindref="compound">KWin</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="class_test_colorspaces" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_test_colorspaces_1a38d0a8d72aa73cb4138e878dd6c6f697" kindref="member">TestColorspaces</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QObject</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="29" refid="class_test_colorspaces_1a38d0a8d72aa73cb4138e878dd6c6f697" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_test_colorspaces_1a38d0a8d72aa73cb4138e878dd6c6f697" kindref="member">TestColorspaces</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Q_SLOTS:</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>roundtripConversion_data();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>roundtripConversion();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testXYZ_XYconversions();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testIdentityTransformation_data();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testIdentityTransformation();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testColorPipeline_data();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testColorPipeline();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testXYZ();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testOpenglShader_data();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testOpenglShader();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testIccShader_data();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testIccShader();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dontCrashWithWeirdHdrMetadata();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testColorimetryCheck_data();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testColorimetryCheck();</highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compareVectors(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QVector3D<sp/>&amp;one,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QVector3D<sp/>&amp;two,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxDifference)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>std::abs(one.x()<sp/>-<sp/>two.x())<sp/>&lt;=<sp/>maxDifference</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>std::abs(one.y()<sp/>-<sp/>two.y())<sp/>&lt;=<sp/>maxDifference</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>std::abs(one.z()<sp/>-<sp/>two.z())<sp/>&lt;=<sp/>maxDifference;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ret)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning()<sp/>&lt;&lt;<sp/>one<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;!=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>two<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;within&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>maxDifference;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s_resolution10bit<sp/>=<sp/>std::pow(1.0<sp/>/<sp/>2.0,<sp/>10);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestColorspaces::roundtripConversion_data()</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;Colorimetry&gt;(</highlight><highlight class="stringliteral">&quot;srcColorimetry&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;TransferFunction::Type&gt;(</highlight><highlight class="stringliteral">&quot;srcTransferFunction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;Colorimetry&gt;(</highlight><highlight class="stringliteral">&quot;dstColorimetry&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;TransferFunction::Type&gt;(</highlight><highlight class="stringliteral">&quot;dstTransferFunction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;requiredAccuracy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;BT709<sp/>(sRGB)<sp/>&lt;-&gt;<sp/>BT2020<sp/>(linear)&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_colorimetry_1abdec0c7f99cb7af5dd75fdaadfff4297" kindref="member">Colorimetry::BT709</ref><sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13a91a1b61696108537c8ddb4f9e1099e7a" kindref="member">TransferFunction::sRGB</ref><sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_colorimetry_1a99c05e3a03117057e2bb1019b9861acb" kindref="member">Colorimetry::BT2020</ref><sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ac4d9acf6c01c7c6872491ce9d8370410" kindref="member">TransferFunction::linear</ref><sp/>&lt;&lt;<sp/>s_resolution10bit;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;BT709<sp/>(gamma<sp/>2.2)<sp/>&lt;-&gt;<sp/>BT2020<sp/>(linear)&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_colorimetry_1abdec0c7f99cb7af5dd75fdaadfff4297" kindref="member">Colorimetry::BT709</ref><sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ae809a455a728cde52948f87802939016" kindref="member">TransferFunction::gamma22</ref><sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_colorimetry_1a99c05e3a03117057e2bb1019b9861acb" kindref="member">Colorimetry::BT2020</ref><sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ac4d9acf6c01c7c6872491ce9d8370410" kindref="member">TransferFunction::linear</ref><sp/>&lt;&lt;<sp/>s_resolution10bit;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;BT709<sp/>(linear)<sp/>&lt;-&gt;<sp/>BT2020<sp/>(linear)&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_colorimetry_1abdec0c7f99cb7af5dd75fdaadfff4297" kindref="member">Colorimetry::BT709</ref><sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ac4d9acf6c01c7c6872491ce9d8370410" kindref="member">TransferFunction::linear</ref><sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_colorimetry_1a99c05e3a03117057e2bb1019b9861acb" kindref="member">Colorimetry::BT2020</ref><sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ac4d9acf6c01c7c6872491ce9d8370410" kindref="member">TransferFunction::linear</ref><sp/>&lt;&lt;<sp/>s_resolution10bit;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;BT709<sp/>(PQ)<sp/>&lt;-&gt;<sp/>BT2020<sp/>(linear)&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_colorimetry_1abdec0c7f99cb7af5dd75fdaadfff4297" kindref="member">Colorimetry::BT709</ref><sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13a326f23a55a0039ee6a7130470b8b8779" kindref="member">TransferFunction::PerceptualQuantizer</ref><sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_colorimetry_1a99c05e3a03117057e2bb1019b9861acb" kindref="member">Colorimetry::BT2020</ref><sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ac4d9acf6c01c7c6872491ce9d8370410" kindref="member">TransferFunction::linear</ref><sp/>&lt;&lt;<sp/>3<sp/>*<sp/>s_resolution10bit;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestColorspaces::roundtripConversion()</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(Colorimetry,<sp/>srcColorimetry);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(<ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13" kindref="member">TransferFunction::Type</ref>,<sp/>srcTransferFunction);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(Colorimetry,<sp/>dstColorimetry);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(<ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13" kindref="member">TransferFunction::Type</ref>,<sp/>dstTransferFunction);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>requiredAccuracy);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>src<sp/>=<sp/>ColorDescription(srcColorimetry,<sp/>TransferFunction(srcTransferFunction),<sp/>100,<sp/>0,<sp/>100,<sp/>100);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dst<sp/>=<sp/>ColorDescription(dstColorimetry,<sp/>TransferFunction(dstTransferFunction),<sp/>100,<sp/>0,<sp/>100,<sp/>100);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QVector3D<sp/>red(1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QVector3D<sp/>green(0,<sp/>1,<sp/>0);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QVector3D<sp/>blue(0,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QVector3D<sp/>white(1,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::array<sp/>renderingIntents<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RenderingIntent::RelativeColorimetric,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RenderingIntent::AbsoluteColorimetric,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1a72b8a93022757874f9e6f85fcf9bc4e9" kindref="member">RenderingIntent</ref><sp/>intent<sp/>:<sp/>renderingIntents)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(compareVectors(dst.mapTo(src.mapTo(red,<sp/>dst,<sp/>intent),<sp/>src,<sp/>intent),<sp/>red,<sp/>requiredAccuracy));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(compareVectors(dst.mapTo(src.mapTo(green,<sp/>dst,<sp/>intent),<sp/>src,<sp/>intent),<sp/>green,<sp/>requiredAccuracy));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(compareVectors(dst.mapTo(src.mapTo(blue,<sp/>dst,<sp/>intent),<sp/>src,<sp/>intent),<sp/>blue,<sp/>requiredAccuracy));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(compareVectors(dst.mapTo(src.mapTo(white,<sp/>dst,<sp/>intent),<sp/>src,<sp/>intent),<sp/>white,<sp/>requiredAccuracy));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestColorspaces::testXYZ_XYconversions()</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>ensures<sp/>that<sp/>xyY&lt;-&gt;XYZ<sp/>conversions<sp/>can<sp/>handle<sp/>weird<sp/>inputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>don&apos;t<sp/>cause<sp/>crashes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(XYZ(0,<sp/>0,<sp/>0).toxyY(),<sp/>xyY(0,<sp/>0,<sp/>1));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE_LE(XYZ(100,<sp/>100,<sp/>100).toxyY().y,<sp/>1);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(xyY(0,<sp/>0,<sp/>1).toXYZ(),<sp/>XYZ(0,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(xyY(1,<sp/>0,<sp/>1).toXYZ(),<sp/>XYZ(0,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestColorspaces::testIdentityTransformation_data()</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;Colorimetry&gt;(</highlight><highlight class="stringliteral">&quot;colorimetry&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;TransferFunction::Type&gt;(</highlight><highlight class="stringliteral">&quot;transferFunction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;BT709<sp/>(sRGB)&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_colorimetry_1abdec0c7f99cb7af5dd75fdaadfff4297" kindref="member">Colorimetry::BT709</ref><sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13a91a1b61696108537c8ddb4f9e1099e7a" kindref="member">TransferFunction::sRGB</ref>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;BT709<sp/>(gamma22)&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_colorimetry_1abdec0c7f99cb7af5dd75fdaadfff4297" kindref="member">Colorimetry::BT709</ref><sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ae809a455a728cde52948f87802939016" kindref="member">TransferFunction::gamma22</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;BT709<sp/>(PQ)&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_colorimetry_1abdec0c7f99cb7af5dd75fdaadfff4297" kindref="member">Colorimetry::BT709</ref><sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13a326f23a55a0039ee6a7130470b8b8779" kindref="member">TransferFunction::PerceptualQuantizer</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;BT709<sp/>(linear)&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_colorimetry_1abdec0c7f99cb7af5dd75fdaadfff4297" kindref="member">Colorimetry::BT709</ref><sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ac4d9acf6c01c7c6872491ce9d8370410" kindref="member">TransferFunction::linear</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;BT2020<sp/>(sRGB)&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_colorimetry_1a99c05e3a03117057e2bb1019b9861acb" kindref="member">Colorimetry::BT2020</ref><sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13a91a1b61696108537c8ddb4f9e1099e7a" kindref="member">TransferFunction::sRGB</ref>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;BT2020<sp/>(gamma22)&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_colorimetry_1a99c05e3a03117057e2bb1019b9861acb" kindref="member">Colorimetry::BT2020</ref><sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ae809a455a728cde52948f87802939016" kindref="member">TransferFunction::gamma22</ref>;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;BT2020<sp/>(PQ)&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_colorimetry_1a99c05e3a03117057e2bb1019b9861acb" kindref="member">Colorimetry::BT2020</ref><sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13a326f23a55a0039ee6a7130470b8b8779" kindref="member">TransferFunction::PerceptualQuantizer</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;BT2020<sp/>(linear)&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_colorimetry_1a99c05e3a03117057e2bb1019b9861acb" kindref="member">Colorimetry::BT2020</ref><sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ac4d9acf6c01c7c6872491ce9d8370410" kindref="member">TransferFunction::linear</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestColorspaces::testIdentityTransformation()</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(Colorimetry,<sp/>colorimetry);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(<ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13" kindref="member">TransferFunction::Type</ref>,<sp/>transferFunction);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TransferFunction<sp/>tf(transferFunction);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ColorDescription<sp/>src(colorimetry,<sp/>tf,<sp/>100,<sp/>tf.minLuminance,<sp/>tf.maxLuminance,<sp/>tf.maxLuminance);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TransferFunction<sp/>tf2(transferFunction,<sp/>tf.minLuminance<sp/>*<sp/>1.1,<sp/>tf.maxLuminance<sp/>*<sp/>1.1);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ColorDescription<sp/>dst(colorimetry,<sp/>tf2,<sp/>110,<sp/>tf2.minLuminance,<sp/>tf2.maxLuminance,<sp/>tf2.maxLuminance);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::array<sp/>renderingIntents<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RenderingIntent::Perceptual,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RenderingIntent::RelativeColorimetric,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RenderingIntent::AbsoluteColorimetric,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RenderingIntent::RelativeColorimetricWithBPC,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1a72b8a93022757874f9e6f85fcf9bc4e9" kindref="member">RenderingIntent</ref><sp/>intent<sp/>:<sp/>renderingIntents)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pipeline<sp/>=<sp/><ref refid="class_k_win_1_1_color_pipeline_1aa4347025990236c558ca27733ca10fa9" kindref="member">ColorPipeline::create</ref>(src,<sp/>dst,<sp/>intent);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pipeline.isIdentity())<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning()<sp/>&lt;&lt;<sp/>pipeline;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(pipeline.isIdentity());</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestColorspaces::testColorPipeline_data()</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;ColorDescription&gt;(</highlight><highlight class="stringliteral">&quot;srcColor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;ColorDescription&gt;(</highlight><highlight class="stringliteral">&quot;dstColor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;QVector3D&gt;(</highlight><highlight class="stringliteral">&quot;dstBlack&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;QVector3D&gt;(</highlight><highlight class="stringliteral">&quot;dstGray&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;QVector3D&gt;(</highlight><highlight class="stringliteral">&quot;dstWhite&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;RenderingIntent&gt;(</highlight><highlight class="stringliteral">&quot;intent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;sRGB<sp/>-&gt;<sp/>rec.2020<sp/>relative<sp/>colorimetric&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ColorDescription(<ref refid="class_k_win_1_1_colorimetry_1abdec0c7f99cb7af5dd75fdaadfff4297" kindref="member">Colorimetry::BT709</ref>,<sp/>TransferFunction(<ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ae809a455a728cde52948f87802939016" kindref="member">TransferFunction::gamma22</ref>),<sp/><ref refid="class_k_win_1_1_transfer_function_1a71f83dbad7283245c4a949f62c51d6ef" kindref="member">TransferFunction::defaultReferenceLuminanceFor</ref>(<ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ae809a455a728cde52948f87802939016" kindref="member">TransferFunction::gamma22</ref>),<sp/>0,<sp/>std::nullopt,<sp/>std::nullopt)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ColorDescription(<ref refid="class_k_win_1_1_colorimetry_1a99c05e3a03117057e2bb1019b9861acb" kindref="member">Colorimetry::BT2020</ref>,<sp/>TransferFunction(<ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13a326f23a55a0039ee6a7130470b8b8779" kindref="member">TransferFunction::PerceptualQuantizer</ref>),<sp/>500,<sp/>0,<sp/>std::nullopt,<sp/>std::nullopt)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>QVector3D(0.161408,<sp/>0.161408,<sp/>0.161408)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>QVector3D(0.517483,<sp/>0.517483,<sp/>0.517483)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>QVector3D(0.67658,<sp/>0.67658,<sp/>0.67658)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>RenderingIntent::RelativeColorimetric;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;sRGB<sp/>-&gt;<sp/>scRGB<sp/>relative<sp/>colorimetric&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ColorDescription(<ref refid="class_k_win_1_1_colorimetry_1abdec0c7f99cb7af5dd75fdaadfff4297" kindref="member">Colorimetry::BT709</ref>,<sp/>TransferFunction(<ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ae809a455a728cde52948f87802939016" kindref="member">TransferFunction::gamma22</ref>),<sp/><ref refid="class_k_win_1_1_transfer_function_1a71f83dbad7283245c4a949f62c51d6ef" kindref="member">TransferFunction::defaultReferenceLuminanceFor</ref>(<ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ae809a455a728cde52948f87802939016" kindref="member">TransferFunction::gamma22</ref>),<sp/>0,<sp/>std::nullopt,<sp/>std::nullopt)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ColorDescription(<ref refid="class_k_win_1_1_colorimetry_1abdec0c7f99cb7af5dd75fdaadfff4297" kindref="member">Colorimetry::BT709</ref>,<sp/>TransferFunction(<ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ac4d9acf6c01c7c6872491ce9d8370410" kindref="member">TransferFunction::linear</ref>,<sp/>0,<sp/>80),<sp/>80,<sp/>0,<sp/>std::nullopt,<sp/>std::nullopt)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>QVector3D(0.0025,<sp/>0.0025,<sp/>0.0025)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>QVector3D(0.219594,<sp/>0.219594,<sp/>0.219594)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>QVector3D(1,<sp/>1,<sp/>1)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>RenderingIntent::RelativeColorimetric;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;sRGB<sp/>-&gt;<sp/>rec.2020<sp/>relative<sp/>colorimetric<sp/>with<sp/>bpc&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ColorDescription(<ref refid="class_k_win_1_1_colorimetry_1abdec0c7f99cb7af5dd75fdaadfff4297" kindref="member">Colorimetry::BT709</ref>,<sp/>TransferFunction(<ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ae809a455a728cde52948f87802939016" kindref="member">TransferFunction::gamma22</ref>,<sp/>0.2,<sp/>80),<sp/>80,<sp/>0.2,<sp/>std::nullopt,<sp/>std::nullopt)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ColorDescription(<ref refid="class_k_win_1_1_colorimetry_1a99c05e3a03117057e2bb1019b9861acb" kindref="member">Colorimetry::BT2020</ref>,<sp/>TransferFunction(<ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13a326f23a55a0039ee6a7130470b8b8779" kindref="member">TransferFunction::PerceptualQuantizer</ref>,<sp/>0.005,<sp/>10&apos;000),<sp/>500,<sp/>0.005,<sp/>std::nullopt,<sp/>std::nullopt)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>QVector3D(0,<sp/>0,<sp/>0)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>QVector3D(0.51667,<sp/>0.51667,<sp/>0.51667)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>QVector3D(0.67658,<sp/>0.67658,<sp/>0.67658)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>RenderingIntent::RelativeColorimetricWithBPC;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;scRGB<sp/>-&gt;<sp/>scRGB<sp/>relative<sp/>colorimetric<sp/>with<sp/>bpc&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ColorDescription(<ref refid="class_k_win_1_1_colorimetry_1abdec0c7f99cb7af5dd75fdaadfff4297" kindref="member">Colorimetry::BT709</ref>,<sp/>TransferFunction(<ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ac4d9acf6c01c7c6872491ce9d8370410" kindref="member">TransferFunction::linear</ref>,<sp/>0,<sp/>80),<sp/><ref refid="class_k_win_1_1_transfer_function_1a71f83dbad7283245c4a949f62c51d6ef" kindref="member">TransferFunction::defaultReferenceLuminanceFor</ref>(<ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ae809a455a728cde52948f87802939016" kindref="member">TransferFunction::gamma22</ref>),<sp/>0,<sp/>std::nullopt,<sp/>std::nullopt)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ColorDescription(<ref refid="class_k_win_1_1_colorimetry_1abdec0c7f99cb7af5dd75fdaadfff4297" kindref="member">Colorimetry::BT709</ref>,<sp/>TransferFunction(<ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ac4d9acf6c01c7c6872491ce9d8370410" kindref="member">TransferFunction::linear</ref>,<sp/>8,<sp/>80),<sp/>80,<sp/>8,<sp/>std::nullopt,<sp/>std::nullopt)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>QVector3D(0,<sp/>0,<sp/>0)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>QVector3D(0.5,<sp/>0.5,<sp/>0.5)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>QVector3D(1,<sp/>1,<sp/>1)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>RenderingIntent::RelativeColorimetricWithBPC;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestColorspaces::testColorPipeline()</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(ColorDescription,<sp/>srcColor);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(ColorDescription,<sp/>dstColor);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(QVector3D,<sp/>dstBlack);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(QVector3D,<sp/>dstGray);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(QVector3D,<sp/>dstWhite);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(<ref refid="namespace_k_win_1a72b8a93022757874f9e6f85fcf9bc4e9" kindref="member">RenderingIntent</ref>,<sp/>intent);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pipeline<sp/>=<sp/><ref refid="class_k_win_1_1_color_pipeline_1aa4347025990236c558ca27733ca10fa9" kindref="member">ColorPipeline::create</ref>(srcColor,<sp/>dstColor,<sp/>intent);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(compareVectors(pipeline.evaluate(QVector3D(0,<sp/>0,<sp/>0)),<sp/>dstBlack,<sp/>s_resolution10bit));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(compareVectors(pipeline.evaluate(QVector3D(0.5,<sp/>0.5,<sp/>0.5)),<sp/>dstGray,<sp/>s_resolution10bit));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(compareVectors(pipeline.evaluate(QVector3D(1,<sp/>1,<sp/>1)),<sp/>dstWhite,<sp/>s_resolution10bit));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inversePipeline<sp/>=<sp/><ref refid="class_k_win_1_1_color_pipeline_1aa4347025990236c558ca27733ca10fa9" kindref="member">ColorPipeline::create</ref>(dstColor,<sp/>srcColor,<sp/>intent);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(compareVectors(inversePipeline.evaluate(dstBlack),<sp/>QVector3D(0,<sp/>0,<sp/>0),<sp/>s_resolution10bit));</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(compareVectors(inversePipeline.evaluate(dstGray),<sp/>QVector3D(0.5,<sp/>0.5,<sp/>0.5),<sp/>s_resolution10bit));</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(compareVectors(inversePipeline.evaluate(dstWhite),<sp/>QVector3D(1,<sp/>1,<sp/>1),<sp/>s_resolution10bit));</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestColorspaces::testXYZ()</highlight></codeline>
<codeline lineno="212"><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>Colorimetry<sp/>xyz<sp/>=<sp/><ref refid="class_k_win_1_1_colorimetry_1a10c7c05ec536476298f155d3fe24dedf" kindref="member">Colorimetry::CIEXYZ</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1a41fc618c01055af18edba50a5fcf7635" kindref="member">isFuzzyIdentity</ref>(xyz.<ref refid="class_k_win_1_1_colorimetry_1aaede1d30151de5781d5854246895b7b2" kindref="member">toXYZ</ref>()));</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1a41fc618c01055af18edba50a5fcf7635" kindref="member">isFuzzyIdentity</ref>(xyz.<ref refid="class_k_win_1_1_colorimetry_1affb8d026ca85e445a84b8fd366c79881" kindref="member">fromXYZ</ref>()));</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestColorspaces::testOpenglShader_data()</highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;RenderingIntent&gt;(</highlight><highlight class="stringliteral">&quot;intent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;maxError&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>allowed<sp/>error<sp/>here<sp/>needs<sp/>to<sp/>be<sp/>this<sp/>high<sp/>because<sp/>of<sp/>llvmpipe.<sp/>With<sp/>real<sp/>GPU<sp/>drivers<sp/>it&apos;s<sp/>lower</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;Perceptual&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>RenderingIntent::Perceptual<sp/>&lt;&lt;<sp/>7.0;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;RelativeColorimetric&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>RenderingIntent::RelativeColorimetric<sp/>&lt;&lt;<sp/>1.5;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;AbsoluteColorimetric&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>RenderingIntent::AbsoluteColorimetric<sp/>&lt;&lt;<sp/>1.5;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;RelativeColorimetricWithBPC&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>RenderingIntent::RelativeColorimetricWithBPC<sp/>&lt;&lt;<sp/>1.5;</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestColorspaces::testOpenglShader()</highlight></codeline>
<codeline lineno="231"><highlight class="normal">{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(<ref refid="namespace_k_win_1a72b8a93022757874f9e6f85fcf9bc4e9" kindref="member">RenderingIntent</ref>,<sp/>intent);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>maxError);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>display<sp/>=<sp/><ref refid="class_k_win_1_1_egl_display_1a4074b80fc73f62e385c3d8f3101e9358" kindref="member">EglDisplay::create</ref>(eglGetDisplay(EGL_DEFAULT_DISPLAY));</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>context<sp/>=<sp/><ref refid="class_k_win_1_1_egl_context_1aeb873299e38e057eede21c1759b1b5f7" kindref="member">EglContext::create</ref>(display.get(),<sp/>EGL_NO_CONFIG_KHR,<sp/>EGL_NO_CONTEXT);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ColorDescription<sp/>src(<ref refid="class_k_win_1_1_colorimetry_1abdec0c7f99cb7af5dd75fdaadfff4297" kindref="member">Colorimetry::BT709</ref>,<sp/>TransferFunction(<ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ac4d9acf6c01c7c6872491ce9d8370410" kindref="member">TransferFunction::linear</ref>,<sp/>0,<sp/>400),<sp/>100,<sp/>0,<sp/>200,<sp/>400);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ColorDescription<sp/>dst(<ref refid="class_k_win_1_1_colorimetry_1abdec0c7f99cb7af5dd75fdaadfff4297" kindref="member">Colorimetry::BT709</ref>,<sp/>TransferFunction(<ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ae809a455a728cde52948f87802939016" kindref="member">TransferFunction::gamma22</ref>),<sp/>100,<sp/>0,<sp/>100,<sp/>100);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>(255,<sp/>255,<sp/>QImage::Format_RGBA8888_Premultiplied);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.width();<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.height();<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.setPixel(x,<sp/>y,<sp/>qRgba(x,<sp/>y,<sp/>0,<sp/>255));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>openGlResult;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShaderBinder<sp/>binder(ShaderTrait::MapTexture<sp/>|<sp/>ShaderTrait::TransformColorspace);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QMatrix4x4<sp/>proj;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proj.ortho(QRectF(0,<sp/>0,<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.width(),<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.height()));</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binder.shader()-&gt;setUniform(GLShader::Mat4Uniform::ModelViewProjectionMatrix,<sp/>proj);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binder.shader()-&gt;setColorspaceUniforms(src,<sp/>dst,<sp/>intent);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target<sp/>=<sp/><ref refid="class_k_win_1_1_g_l_texture_1a22b5bb33ada7c4b53f73c57f5405289f" kindref="member">GLTexture::allocate</ref>(GL_RGBA8,<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.size());</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLFramebuffer<sp/>buffer(target.get());</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;pushFramebuffer(&amp;buffer);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>srcColor<sp/>=<sp/><ref refid="class_k_win_1_1_g_l_texture_1abfb1321ce70899df263d8c8db90a2d59" kindref="member">GLTexture::upload</ref>(<ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcColor-&gt;render(<ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.size());</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;popFramebuffer();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openGlResult<sp/>=<sp/>target-&gt;toImage();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openGlResult.mirror();</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>pipelineResult(<ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.width(),<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.height(),<sp/>QImage::Format_RGBA8888_Premultiplied);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pipeline<sp/>=<sp/><ref refid="class_k_win_1_1_color_pipeline_1aa4347025990236c558ca27733ca10fa9" kindref="member">ColorPipeline::create</ref>(src,<sp/>dst,<sp/>intent);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.width();<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.height();<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pixel<sp/>=<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.pixel(x,<sp/>y);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QVector3D<sp/>colors<sp/>=<sp/>QVector3D(qRed(pixel),<sp/>qGreen(pixel),<sp/>qBlue(pixel))<sp/>/<sp/>255;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QVector3D<sp/>output<sp/>=<sp/>pipeline.evaluate(colors)<sp/>*<sp/>255;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pipelineResult.setPixel(x,<sp/>y,<sp/>qRgba(std::round(output.x()),<sp/>std::round(output.y()),<sp/>std::round(output.z()),<sp/>255));</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.width();<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.height();<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>glPixel<sp/>=<sp/>openGlResult.pixel(x,<sp/>y);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QVector3D<sp/>glColors<sp/>=<sp/>QVector3D(qRed(glPixel),<sp/>qGreen(glPixel),<sp/>qBlue(glPixel));</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pipePixel<sp/>=<sp/>pipelineResult.pixel(x,<sp/>y);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QVector3D<sp/>pipeColors<sp/>=<sp/>QVector3D(qRed(pipePixel),<sp/>qGreen(pipePixel),<sp/>qBlue(pipePixel));</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QVector3D<sp/>difference<sp/>=<sp/>(glColors<sp/>-<sp/>pipeColors);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE_LE(difference.length(),<sp/>maxError);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestColorspaces::testIccShader_data()</highlight></codeline>
<codeline lineno="292"><highlight class="normal">{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;QString&gt;(</highlight><highlight class="stringliteral">&quot;iccProfilePath&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;RenderingIntent&gt;(</highlight><highlight class="stringliteral">&quot;intent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;uint32_t&gt;(</highlight><highlight class="stringliteral">&quot;lcmsIntent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;int&gt;(</highlight><highlight class="stringliteral">&quot;maxAllowedError&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>F13<sp/>=<sp/>QFINDTESTDATA(</highlight><highlight class="stringliteral">&quot;data/Framework<sp/>13.icc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Samsung<sp/>=<sp/>QFINDTESTDATA(</highlight><highlight class="stringliteral">&quot;data/Samsung<sp/>CRG49<sp/>Shaper<sp/>Matrix.icc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;relative<sp/>colorimetric<sp/>Framework<sp/>13&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>F13<sp/>&lt;&lt;<sp/>RenderingIntent::RelativeColorimetric<sp/>&lt;&lt;<sp/>uint32_t(INTENT_RELATIVE_COLORIMETRIC)<sp/>&lt;&lt;<sp/>5;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;absolute<sp/>colorimetric<sp/>Framework<sp/>13&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>F13<sp/>&lt;&lt;<sp/>RenderingIntent::AbsoluteColorimetric<sp/>&lt;&lt;<sp/>uint32_t(INTENT_ABSOLUTE_COLORIMETRIC)<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;relative<sp/>colorimetric<sp/>CRG49&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>Samsung<sp/>&lt;&lt;<sp/>RenderingIntent::RelativeColorimetric<sp/>&lt;&lt;<sp/>uint32_t(INTENT_RELATIVE_COLORIMETRIC)<sp/>&lt;&lt;<sp/>2;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;absolute<sp/>colorimetric<sp/>CRG49&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>Samsung<sp/>&lt;&lt;<sp/>RenderingIntent::AbsoluteColorimetric<sp/>&lt;&lt;<sp/>uint32_t(INTENT_ABSOLUTE_COLORIMETRIC)<sp/>&lt;&lt;<sp/>2;</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestColorspaces::testIccShader()</highlight></codeline>
<codeline lineno="307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>display<sp/>=<sp/><ref refid="class_k_win_1_1_egl_display_1a4074b80fc73f62e385c3d8f3101e9358" kindref="member">EglDisplay::create</ref>(eglGetDisplay(EGL_DEFAULT_DISPLAY));</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>context<sp/>=<sp/><ref refid="class_k_win_1_1_egl_context_1aeb873299e38e057eede21c1759b1b5f7" kindref="member">EglContext::create</ref>(display.get(),<sp/>EGL_NO_CONFIG_KHR,<sp/>EGL_NO_CONTEXT);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>(255,<sp/>255,<sp/>QImage::Format_RGBA8888_Premultiplied);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.width();<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.height();<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.setPixel(x,<sp/>y,<sp/>qRgba(x,<sp/>y,<sp/>(x<sp/>+<sp/>y)<sp/>/<sp/>2,<sp/>255));</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ColorDescription<sp/>imageColorspace<sp/>=<sp/><ref refid="class_k_win_1_1_color_description_1a329e58d9b909836414261f4f1857ccf6" kindref="member">ColorDescription::sRGB</ref>;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(QString,<sp/>iccProfilePath);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(<ref refid="namespace_k_win_1a72b8a93022757874f9e6f85fcf9bc4e9" kindref="member">RenderingIntent</ref>,<sp/>intent);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(uint32_t,<sp/>lcmsIntent);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;IccProfile&gt;<sp/>profile<sp/>=<sp/><ref refid="class_k_win_1_1_icc_profile_1af4a3ac4edf53e22f327152864cbe1956" kindref="member">IccProfile::load</ref>(iccProfilePath).value_or(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(profile);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>pipelineResult(<ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.width(),<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.height(),<sp/>QImage::Format_RGBA8888_Premultiplied);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>default,<sp/>LCMS<sp/>uses<sp/>adaption<sp/>state<sp/>1.0<sp/>for<sp/>absolute<sp/>colorimetric,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>known<sp/>as<sp/>relative<sp/>colorimetric...<sp/>we<sp/>don&apos;t<sp/>want<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsSetAdaptationState(0);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toCmsxyY<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xyY<sp/>&amp;primary)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmsCIExyY{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.x<sp/>=<sp/>primary.x,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.y<sp/>=<sp/>primary.y,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Y<sp/>=<sp/>primary.Y,</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cmsCIExyY<sp/>sRGBWhite<sp/>=<sp/>toCmsxyY(imageColorspace.<ref refid="class_k_win_1_1_color_description_1a078edcae56e57ca288e047c38d6a1b0d" kindref="member">containerColorimetry</ref>().<ref refid="class_k_win_1_1_colorimetry_1a6a394e7b0050f8858444b1e136c2be73" kindref="member">white</ref>().<ref refid="struct_k_win_1_1_x_y_z_1a6f6f55a638f620caf33d292e5be201fd" kindref="member">toxyY</ref>());</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cmsCIExyYTRIPLE<sp/>sRGBPrimaries{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Red<sp/>=<sp/>toCmsxyY(imageColorspace.<ref refid="class_k_win_1_1_color_description_1a078edcae56e57ca288e047c38d6a1b0d" kindref="member">containerColorimetry</ref>().<ref refid="class_k_win_1_1_colorimetry_1a71c35133530f4d6b452d96ee754448bc" kindref="member">red</ref>().<ref refid="struct_k_win_1_1_x_y_z_1a6f6f55a638f620caf33d292e5be201fd" kindref="member">toxyY</ref>()),</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Green<sp/>=<sp/>toCmsxyY(imageColorspace.<ref refid="class_k_win_1_1_color_description_1a078edcae56e57ca288e047c38d6a1b0d" kindref="member">containerColorimetry</ref>().<ref refid="class_k_win_1_1_colorimetry_1a8f01dabd52fc482e59321308969b7944" kindref="member">green</ref>().<ref refid="struct_k_win_1_1_x_y_z_1a6f6f55a638f620caf33d292e5be201fd" kindref="member">toxyY</ref>()),</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Blue<sp/>=<sp/>toCmsxyY(imageColorspace.<ref refid="class_k_win_1_1_color_description_1a078edcae56e57ca288e047c38d6a1b0d" kindref="member">containerColorimetry</ref>().<ref refid="class_k_win_1_1_colorimetry_1acc678bc504ec9346cbf932a5366789f6" kindref="member">blue</ref>().<ref refid="struct_k_win_1_1_x_y_z_1a6f6f55a638f620caf33d292e5be201fd" kindref="member">toxyY</ref>()),</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parametric<sp/>curve<sp/>6<sp/>is<sp/>Y<sp/>=<sp/>(a<sp/>*<sp/>X<sp/>+<sp/>b)<sp/>^<sp/>gamma<sp/>+<sp/>c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Y<sp/>and<sp/>X<sp/>are<sp/>normalized,<sp/>so<sp/>c<sp/>must<sp/>be<sp/>the<sp/>relative<sp/>black<sp/>level<sp/>lift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>b<sp/>is<sp/>zero,<sp/>so<sp/>it<sp/>can<sp/>be<sp/>simplified<sp/>to<sp/>Y<sp/>=<sp/>a^gamma<sp/>*<sp/>X^gamma<sp/>+<sp/>c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Y(1.0)<sp/>=<sp/>1.0,<sp/>so<sp/>a<sp/>=<sp/>((max<sp/>-<sp/>min)<sp/>/<sp/>max)<sp/>^<sp/>(1/gamma)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>a<sp/>=<sp/>(1.0<sp/>-<sp/>min<sp/>/<sp/>max)<sp/>^<sp/>(1<sp/>/<sp/>gamma)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;double,<sp/>10&gt;<sp/>params<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.2,<sp/></highlight><highlight class="comment">//<sp/>gamma</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pow(1.0<sp/>-<sp/>imageColorspace.<ref refid="class_k_win_1_1_color_description_1a742286b76df2ae57b339e18a921acd19" kindref="member">transferFunction</ref>().<ref refid="class_k_win_1_1_transfer_function_1a6c10d6aabeab96c089d86b24f1507a62" kindref="member">minLuminance</ref><sp/>/<sp/>imageColorspace.<ref refid="class_k_win_1_1_color_description_1a742286b76df2ae57b339e18a921acd19" kindref="member">transferFunction</ref>().<ref refid="class_k_win_1_1_transfer_function_1a3c5c23bd4c36320392fdcfb24057a821" kindref="member">maxLuminance</ref>,<sp/>1.0<sp/>/<sp/>2.2),<sp/></highlight><highlight class="comment">//<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="comment">//<sp/>b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageColorspace.<ref refid="class_k_win_1_1_color_description_1a742286b76df2ae57b339e18a921acd19" kindref="member">transferFunction</ref>().<ref refid="class_k_win_1_1_transfer_function_1a6c10d6aabeab96c089d86b24f1507a62" kindref="member">minLuminance</ref><sp/>/<sp/>imageColorspace.<ref refid="class_k_win_1_1_color_description_1a742286b76df2ae57b339e18a921acd19" kindref="member">transferFunction</ref>().<ref refid="class_k_win_1_1_transfer_function_1a3c5c23bd4c36320392fdcfb24057a821" kindref="member">maxLuminance</ref>,<sp/></highlight><highlight class="comment">//<sp/>c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array<sp/>toneCurves<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsBuildParametricToneCurve(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>6,<sp/>params.data()),</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsBuildParametricToneCurve(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>6,<sp/>params.data()),</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsBuildParametricToneCurve(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>6,<sp/>params.data()),</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>we<sp/>can&apos;t<sp/>just<sp/>use<sp/>cmsCreate_sRGBProfile<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>that<sp/>uses<sp/>the<sp/>sRGB<sp/>piece-wise<sp/>transfer<sp/>function,<sp/>which<sp/>is<sp/>not<sp/>correct<sp/>for<sp/>our<sp/>use<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="iccprofile_8h_1abea1909e7159ef8bdef5296a7da54948" kindref="member">cmsHPROFILE</ref><sp/>sRGBHandle<sp/>=<sp/>cmsCreateRGBProfile(&amp;sRGBWhite,<sp/>&amp;sRGBPrimaries,<sp/>toneCurves.data());</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="iccprofile_8h_1abea1909e7159ef8bdef5296a7da54948" kindref="member">cmsHPROFILE</ref><sp/>handle<sp/>=<sp/>cmsOpenProfileFromFile(iccProfilePath.toUtf8(),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(handle);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>transform<sp/>=<sp/>cmsCreateTransform(sRGBHandle,<sp/>TYPE_RGB_8,<sp/>handle,<sp/>TYPE_RGB_8,<sp/>lcmsIntent,<sp/>cmsFLAGS_NOOPTIMIZE);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(transform);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.width();<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.height();<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pixel<sp/>=<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.pixel(x,<sp/>y);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;uint8_t,<sp/>3&gt;<sp/>in<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t(qRed(pixel)),</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t(qGreen(pixel)),</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t(qBlue(pixel)),</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;uint8_t,<sp/>3&gt;<sp/>out<sp/>=<sp/>{0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsDoTransform(transform,<sp/>in.data(),<sp/>out.data(),<sp/>1);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pipelineResult.setPixel(x,<sp/>y,<sp/>qRgba(out[0],<sp/>out[1],<sp/>out[2],<sp/>255));</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsDeleteTransform(transform);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsCloseProfile(sRGBHandle);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsCloseProfile(handle);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>openGlResult;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IccShader<sp/>shader;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShaderBinder<sp/>binder{shader.<ref refid="class_k_win_1_1_icc_shader_1a8196d8980275fada76dea98963975724" kindref="member">shader</ref>()};</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shader.<ref refid="class_k_win_1_1_icc_shader_1aa10bac32bb8bcc5f56639492ab5343ca" kindref="member">setUniforms</ref>(profile,<sp/>imageColorspace,<sp/>intent);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QMatrix4x4<sp/>proj;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proj.ortho(QRectF(0,<sp/>0,<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.width(),<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.height()));</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binder.shader()-&gt;setUniform(GLShader::Mat4Uniform::ModelViewProjectionMatrix,<sp/>proj);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target<sp/>=<sp/><ref refid="class_k_win_1_1_g_l_texture_1a22b5bb33ada7c4b53f73c57f5405289f" kindref="member">GLTexture::allocate</ref>(GL_RGBA8,<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.size());</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLFramebuffer<sp/>buffer(target.get());</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;pushFramebuffer(&amp;buffer);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>srcColor<sp/>=<sp/><ref refid="class_k_win_1_1_g_l_texture_1abfb1321ce70899df263d8c8db90a2d59" kindref="member">GLTexture::upload</ref>(<ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcColor-&gt;render(<ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.size());</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;popFramebuffer();</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openGlResult<sp/>=<sp/>target-&gt;toImage();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openGlResult.mirror();</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxError<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.width();<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.height();<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>glPixel<sp/>=<sp/>openGlResult.pixel(x,<sp/>y);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QVector3D<sp/>glColors<sp/>=<sp/>QVector3D(qRed(glPixel),<sp/>qGreen(glPixel),<sp/>qBlue(glPixel));</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pipePixel<sp/>=<sp/>pipelineResult.pixel(x,<sp/>y);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QVector3D<sp/>pipeColors<sp/>=<sp/>QVector3D(qRed(pipePixel),<sp/>qGreen(pipePixel),<sp/>qBlue(pipePixel));</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QVector3D<sp/>difference<sp/>=<sp/>(glColors<sp/>-<sp/>pipeColors);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxError<sp/>=<sp/>std::max(difference.length(),<sp/>maxError);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>qWarning()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Max<sp/>ICC<sp/>shader<sp/>error:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>maxError;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>maxAllowedError);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE_LE(maxError,<sp/>maxAllowedError);</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestColorspaces::dontCrashWithWeirdHdrMetadata()</highlight></codeline>
<codeline lineno="429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>verify<sp/>that<sp/>weird<sp/>display<sp/>metadata<sp/>with<sp/>max.<sp/>luminance<sp/>&lt;<sp/>reference<sp/>luminance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>crash<sp/>KWin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>ColorDescription<sp/>in(<ref refid="class_k_win_1_1_colorimetry_1abdec0c7f99cb7af5dd75fdaadfff4297" kindref="member">Colorimetry::BT709</ref>,<sp/>TransferFunction(<ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ac4d9acf6c01c7c6872491ce9d8370410" kindref="member">TransferFunction::linear</ref>,<sp/>0,<sp/>80),<sp/>80,<sp/>0,<sp/>60,<sp/>60);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>ColorDescription<sp/>out(<ref refid="class_k_win_1_1_colorimetry_1abdec0c7f99cb7af5dd75fdaadfff4297" kindref="member">Colorimetry::BT709</ref>,<sp/>TransferFunction(<ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ac4d9acf6c01c7c6872491ce9d8370410" kindref="member">TransferFunction::linear</ref>,<sp/>0,<sp/>80),<sp/>80,<sp/>0,<sp/>40,<sp/>40);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pipeline<sp/>=<sp/><ref refid="class_k_win_1_1_color_pipeline_1aa4347025990236c558ca27733ca10fa9" kindref="member">ColorPipeline::create</ref>(in,<sp/>out,<sp/>RenderingIntent::Perceptual);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pipeline.evaluate(QVector3D()),<sp/>QVector3D());</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestColorspaces::testColorimetryCheck_data()</highlight></codeline>
<codeline lineno="439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;bool&gt;(</highlight><highlight class="stringliteral">&quot;expectedResult&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;xy&gt;(</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;xy&gt;(</highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;xy&gt;(</highlight><highlight class="stringliteral">&quot;blue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;xy&gt;(</highlight><highlight class="stringliteral">&quot;white&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;PAL<sp/>M&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>xy{0.67,<sp/>0.33}<sp/>&lt;&lt;<sp/>xy{0.21,<sp/>0.71}<sp/>&lt;&lt;<sp/>xy{0.14,<sp/>0.08}<sp/>&lt;&lt;<sp/>xy{0.310,<sp/>0.316};</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;sRGB&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>xy{0.64,<sp/>0.33}<sp/>&lt;&lt;<sp/>xy{0.30,<sp/>0.60}<sp/>&lt;&lt;<sp/>xy{0.15,<sp/>0.06}<sp/>&lt;&lt;<sp/>xy{0.3127,<sp/>0.3290};</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;sRGB<sp/>with<sp/>one<sp/>negative<sp/>data<sp/>point&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>xy{-1,<sp/>0.33}<sp/>&lt;&lt;<sp/>xy{0.30,<sp/>0.60}<sp/>&lt;&lt;<sp/>xy{0.15,<sp/>0.06}<sp/>&lt;&lt;<sp/>xy{0.3127,<sp/>0.3290};</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;sRGB<sp/>with<sp/>out<sp/>of<sp/>bounds<sp/>white<sp/>point&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>xy{0.64,<sp/>0.33}<sp/>&lt;&lt;<sp/>xy{0.30,<sp/>0.60}<sp/>&lt;&lt;<sp/>xy{0.15,<sp/>0.06}<sp/>&lt;&lt;<sp/>xy{0.9,<sp/>0.9};</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;all<sp/>zeros&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>xy{0,<sp/>0}<sp/>&lt;&lt;<sp/>xy{0,<sp/>0}<sp/>&lt;&lt;<sp/>xy{0,<sp/>0}<sp/>&lt;&lt;<sp/>xy{0,<sp/>0};</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;all<sp/>ones&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>xy{1,<sp/>1}<sp/>&lt;&lt;<sp/>xy{1,<sp/>1}<sp/>&lt;&lt;<sp/>xy{1,<sp/>1}<sp/>&lt;&lt;<sp/>xy{1,<sp/>1};</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;BT2020&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>xy{0.708,<sp/>0.292}<sp/>&lt;&lt;<sp/>xy{0.170,<sp/>0.797}<sp/>&lt;&lt;<sp/>xy{0.131,<sp/>0.046}<sp/>&lt;&lt;<sp/>xy{0.3127,<sp/>0.3290};</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;Display<sp/>P3&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>xy{0.680,<sp/>0.320}<sp/>&lt;&lt;<sp/>xy{0.265,<sp/>0.690}<sp/>&lt;&lt;<sp/>xy{0.150,<sp/>0.060}<sp/>&lt;&lt;<sp/>xy{0.3127,<sp/>0.3290};</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;AUO<sp/>44944&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>xy{0.5664,<sp/>0.3388}<sp/>&lt;&lt;<sp/>xy{0.3505,<sp/>0.5683}<sp/>&lt;&lt;<sp/>xy{0.1582,<sp/>0.1210}<sp/>&lt;&lt;<sp/>xy{0.3134,<sp/>0.3291};</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;SAM<sp/>3996&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>xy{0.6777,<sp/>0.3105}<sp/>&lt;&lt;<sp/>xy{0.2734,<sp/>0.6542}<sp/>&lt;&lt;<sp/>xy{0.1425,<sp/>0.0566}<sp/>&lt;&lt;<sp/>xy{0.3125,<sp/>0.3291};</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;BOE<sp/>3252&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>xy{0.6523,<sp/>0.3320}<sp/>&lt;&lt;<sp/>xy{0.2949,<sp/>0.6230}<sp/>&lt;&lt;<sp/>xy{0.1464,<sp/>0.0488}<sp/>&lt;&lt;<sp/>xy{0.3134,<sp/>0.3291};</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestColorspaces::testColorimetryCheck()</highlight></codeline>
<codeline lineno="460"><highlight class="normal">{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>expectedResult);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(xy,<sp/>red);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(xy,<sp/>green);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(xy,<sp/>blue);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(xy,<sp/>white);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="class_k_win_1_1_colorimetry_1aedd6e2f525b22ee6f27bd56936674b93" kindref="member">Colorimetry::isValid</ref>(red,<sp/>green,<sp/>blue,<sp/>white),<sp/>expectedResult);</highlight></codeline>
<codeline lineno="467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><ref refid="onscreennotificationtest_8cpp_1a2f6feba20c73ec66058034e36bb8f880" kindref="member">QTEST_MAIN</ref>(<ref refid="class_test_colorspaces" kindref="compound">TestColorspaces</ref>)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_colorspaces.moc&quot;</highlight></codeline>
    </programlisting>
    <location file="kwin/autotests/test_colorspaces.cpp"/>
  </compounddef>
</doxygen>
