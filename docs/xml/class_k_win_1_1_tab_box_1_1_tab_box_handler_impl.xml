<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl" kind="class" language="C++" prot="public">
    <compoundname>KWin::TabBox::TabBoxHandlerImpl</compoundname>
    <basecompoundref refid="class_k_win_1_1_tab_box_1_1_tab_box_handler" prot="public" virt="non-virtual">KWin::TabBox::TabBoxHandler</basecompoundref>
    <includes refid="tabbox_8h" local="no">tabbox.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a95c3bc64df86f3a92db82504091ed5db" prot="private" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_tab_box_1_1_tab_box" kindref="compound">TabBox</ref> *</type>
        <definition>TabBox* KWin::TabBox::TabBoxHandlerImpl::m_tabBox</definition>
        <argsstring></argsstring>
        <name>m_tabBox</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::m_tabBox</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="72" column="12" bodyfile="kwin/src/tabbox/tabbox.h" bodystart="72" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a6ebd4c31e8e007d294f0ab3691d8a835" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::TabBox::TabBoxHandlerImpl::TabBoxHandlerImpl</definition>
        <argsstring>(TabBox *tabBox)</argsstring>
        <name>TabBoxHandlerImpl</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::TabBoxHandlerImpl</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_tab_box_1_1_tab_box" kindref="compound">TabBox</ref> *</type>
          <declname>tabBox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="44" column="14" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="43" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1aeab30ec33c11afb482529a1aaa128da5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::TabBox::TabBoxHandlerImpl::~TabBoxHandlerImpl</definition>
        <argsstring>() override</argsstring>
        <name>~TabBoxHandlerImpl</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::~TabBoxHandlerImpl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="45" column="5" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="49" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a8624aef24080c90213f594f318ca1c51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int KWin::TabBox::TabBoxHandlerImpl::activeScreen</definition>
        <argsstring>() const override</argsstring>
        <name>activeScreen</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::activeScreen</qualifiedname>
        <reimplements refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a835a3a99578c46256f785aa139478810">activeScreen</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The id of the active screen </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="47" column="9" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1ac7d99796a5d77cbf58b3b63386875b4b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
        <definition>Window * KWin::TabBox::TabBoxHandlerImpl::activeClient</definition>
        <argsstring>() const override</argsstring>
        <name>activeClient</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::activeClient</qualifiedname>
        <reimplements refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1ab84bb67514e3a108c2fa6d070e22f4cf">activeClient</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current active <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> or NULL if there is no active client. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="48" column="12" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a8e0835bac3d27bbb409200aaca651b14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QString</type>
        <definition>QString KWin::TabBox::TabBoxHandlerImpl::desktopName</definition>
        <argsstring>(Window *client) const override</argsstring>
        <name>desktopName</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::desktopName</qualifiedname>
        <reimplements refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a93c8d7064108f456363ab1fada1b2bc0">desktopName</reimplements>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The client whose desktop name should be retrieved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The desktop name of the given <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>. If the client is on all desktops the name of current desktop will be returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="49" column="13" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="58" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a69ae423644c16b12320601d48558c37d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::TabBox::TabBoxHandlerImpl::isKWinCompositing</definition>
        <argsstring>() const override</argsstring>
        <name>isKWinCompositing</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::isKWinCompositing</qualifiedname>
        <reimplements refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1aedc1923f16c9b312ba368baf4f3bf71c">isKWinCompositing</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether <ref refid="namespace_k_win" kindref="compound">KWin</ref> is currently compositing and it&apos;s related features (elevating) can be used </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="50" column="10" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a39c3cfed15b68caf3f9c7d84bfd9e393" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
        <definition>Window * KWin::TabBox::TabBoxHandlerImpl::nextClientFocusChain</definition>
        <argsstring>(Window *client) const override</argsstring>
        <name>nextClientFocusChain</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::nextClientFocusChain</qualifiedname>
        <reimplements refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a1ca7f3daa9b307dbe36772ccae621afd">nextClientFocusChain</reimplements>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The client which is starting point to find the next client </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The next <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> in focus chain </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="51" column="12" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1aac40da9b9e7ef4ffe93ae605cb77c826" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
        <definition>Window * KWin::TabBox::TabBoxHandlerImpl::firstClientFocusChain</definition>
        <argsstring>() const override</argsstring>
        <name>firstClientFocusChain</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::firstClientFocusChain</qualifiedname>
        <reimplements refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a5b00471bfed7957cb251a94e3b5dbb39">firstClientFocusChain</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is used by the <ref refid="class_k_win_1_1_tab_box_1_1_client_model" kindref="compound">ClientModel</ref> to find an entrance into the focus chain in case there is no active <ref refid="class_client" kindref="compound">Client</ref>.</para>
<para><simplesect kind="return"><para>The first <ref refid="class_client" kindref="compound">Client</ref> of the focus chain </para>
</simplesect>
<simplesect kind="since"><para>4.9.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="52" column="12" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1ae1cc410f909fc5a9023033dbf02f0a65" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::TabBox::TabBoxHandlerImpl::isInFocusChain</definition>
        <argsstring>(Window *client) const override</argsstring>
        <name>isInFocusChain</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::isInFocusChain</qualifiedname>
        <reimplements refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a5430ccba40f20b8e2cba54ea46e9e4d8">isInFocusChain</reimplements>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks whether the given <computeroutput>client</computeroutput> is part of the focus chain at all. This is useful to figure out whether the currently active <ref refid="class_client" kindref="compound">Client</ref> can be used as a starting point to construct the recently used list.</para>
<para>In case the <computeroutput>client</computeroutput> is not in the focus chain it is recommended to use the <ref refid="class_client" kindref="compound">Client</ref> returned by firstClientFocusChain.</para>
<para>The method accepts a <computeroutput>null</computeroutput> <ref refid="class_client" kindref="compound">Client</ref> and in that case <computeroutput>false</computeroutput> is returned. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="class_client" kindref="compound">Client</ref> to check whether it is in the Focus Chain </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> in case the <ref refid="class_client" kindref="compound">Client</ref> is part of the focus chain, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
<simplesect kind="since"><para>4.9.2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="53" column="10" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a18eb06cc15571f0522a35addbebf3e3a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> * &gt;</type>
        <definition>QList&lt; Window * &gt; KWin::TabBox::TabBoxHandlerImpl::stackingOrder</definition>
        <argsstring>() const override</argsstring>
        <name>stackingOrder</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::stackingOrder</qualifiedname>
        <reimplements refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a9a72c4f4f9079ca60a5c151297645d06">stackingOrder</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current stacking order of Windows </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="54" column="11" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="183" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a68763b29d004974a9917c7c5fd834aa8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::TabBox::TabBoxHandlerImpl::elevateClient</definition>
        <argsstring>(Window *c, QWindow *tabbox, bool elevate) const override</argsstring>
        <name>elevateClient</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::elevateClient</qualifiedname>
        <reimplements refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1adc79a68ce2e1b96de9f4e0bd64e4ab6e">elevateClient</reimplements>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>QWindow *</type>
          <declname>tabbox</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>elevate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>De-/Elevate a client using the compositor (if enabled) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="55" column="10" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="213" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1af1e3c769e92554ca0b510f82e901a12d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::TabBox::TabBoxHandlerImpl::raiseClient</definition>
        <argsstring>(Window *client) const override</argsstring>
        <name>raiseClient</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::raiseClient</qualifiedname>
        <reimplements refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a17bf330a869128e8753245e460d538ff">raiseClient</reimplements>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raise a client (w/o activating it) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="56" column="10" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a4748b99f999ab635acdbdb5b9ef6948a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::TabBox::TabBoxHandlerImpl::restack</definition>
        <argsstring>(Window *c, Window *under) override</argsstring>
        <name>restack</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::restack</qualifiedname>
        <reimplements refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1ad3dfbbccaeb9119a6f8511f88f387434">restack</reimplements>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>under</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The client to be restacked </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>under</parametername>
</parameternamelist>
<parameterdescription>
<para>The client the other one will be placed below </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="57" column="10" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a19278e6b9ef9d1a431021fd32e1c8b3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::TabBox::TabBoxHandlerImpl::shadeClient</definition>
        <argsstring>(Window *c, bool b) const override</argsstring>
        <name>shadeClient</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::shadeClient</qualifiedname>
        <reimplements refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a34f054117697437aaa5ac929f1ef067d">shadeClient</reimplements>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Toggle between ShadeHover and ShadeNormal - not shaded windows are unaffected <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The client to be shaded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to un- or shade </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="58" column="10" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="221" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a5c94ecbd74c93392289bbf2516d42377" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
        <definition>Window * KWin::TabBox::TabBoxHandlerImpl::clientToAddToList</definition>
        <argsstring>(Window *client) const override</argsstring>
        <name>clientToAddToList</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::clientToAddToList</qualifiedname>
        <reimplements refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a866b954e11daf2ff29a568e34c412c5d">clientToAddToList</reimplements>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determines if given client will be added to the list: <itemizedlist>
<listitem>
<para>if the client wants to have tab focus. </para>
</listitem>
<listitem>
<para>The client won&apos;t be added if it has modal dialogs </para>
</listitem>
<listitem>
<para>In that case the modal dialog will be returned if it isn&apos;t already included </para>
</listitem>
<listitem>
<para>Won&apos;t be added if it isn&apos;t on active screen when using separate screen focus </para>
</listitem>
</itemizedlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The client to be checked for inclusion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allDesktops</parametername>
</parameternamelist>
<parameterdescription>
<para>Add clients from all desktops or only from current </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The client to be included in the list or NULL if it isn&apos;t to be included </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="59" column="12" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="156" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a0ea98dccf0b15229e30bcd36dac2d051" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
        <definition>Window * KWin::TabBox::TabBoxHandlerImpl::desktopClient</definition>
        <argsstring>() const override</argsstring>
        <name>desktopClient</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::desktopClient</qualifiedname>
        <reimplements refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a17d4fa8986e27803dcefce9ada63f17f">desktopClient</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The first desktop window in the stacking order. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="60" column="12" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="231" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a1e46964ea9cdcfe7451a2d294ddcbdca" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::TabBox::TabBoxHandlerImpl::activateAndClose</definition>
        <argsstring>() override</argsstring>
        <name>activateAndClose</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::activateAndClose</qualifiedname>
        <reimplements refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1ae61b3a6a810810a54dd80b6c999c057b">activateAndClose</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Activates the currently selected client and closes the <ref refid="class_k_win_1_1_tab_box_1_1_tab_box" kindref="compound">TabBox</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="61" column="10" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="245" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1ad005d20aae9128904e0cf5e25ce5dfb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::TabBox::TabBoxHandlerImpl::highlightWindows</definition>
        <argsstring>(Window *window=nullptr, QWindow *controller=nullptr) override</argsstring>
        <name>highlightWindows</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::highlightWindows</qualifiedname>
        <reimplements refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a2b9d12f0ffca03cdae3b04cebf53025f">highlightWindows</reimplements>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>window</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>QWindow *</type>
          <declname>controller</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="62" column="10" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="250" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1ae024df7bd37ecc039c34691c9300f97e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::TabBox::TabBoxHandlerImpl::noModifierGrab</definition>
        <argsstring>() const override</argsstring>
        <name>noModifierGrab</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::noModifierGrab</qualifiedname>
        <reimplements refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a9799723678f579adfe9286e4d015c318">noModifierGrab</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether the <ref refid="class_k_win_1_1_tab_box_1_1_tab_box" kindref="compound">TabBox</ref> operates in a no modifier grab mode. In this mode a click on an item should directly accept and close the tabbox. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="63" column="10" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="265" bodyend="268"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a4378825dc807fcd83f4813a79b7884ce" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::TabBox::TabBoxHandlerImpl::checkDesktop</definition>
        <argsstring>(Window *client) const</argsstring>
        <name>checkDesktop</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::checkDesktop</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="66" column="10" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="86" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a6bb9704cc01792948407adff7e9679e4" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::TabBox::TabBoxHandlerImpl::checkActivity</definition>
        <argsstring>(Window *client) const</argsstring>
        <name>checkActivity</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::checkActivity</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="67" column="10" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="98" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1ac3dac96350f5eff75a4bfff48e24ad3e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::TabBox::TabBoxHandlerImpl::checkApplications</definition>
        <argsstring>(Window *client) const</argsstring>
        <name>checkApplications</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::checkApplications</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="68" column="10" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="110" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a37654f4f77acd78345d277f7f42bb959" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::TabBox::TabBoxHandlerImpl::checkMinimized</definition>
        <argsstring>(Window *client) const</argsstring>
        <name>checkMinimized</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::checkMinimized</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="69" column="10" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="132" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a1184aa5b8022373c2a3579f8503a0891" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::TabBox::TabBoxHandlerImpl::checkMultiScreen</definition>
        <argsstring>(Window *client) const</argsstring>
        <name>checkMultiScreen</name>
        <qualifiedname>KWin::TabBox::TabBoxHandlerImpl::checkMultiScreen</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabbox.h" line="70" column="10" bodyfile="kwin/src/tabbox/tabbox.cpp" bodystart="144" bodyend="154"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>KWin::TabBox::TabBoxHandler</label>
        <link refid="class_k_win_1_1_tab_box_1_1_tab_box_handler"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::TabBox::TabBoxHandlerImpl</label>
        <link refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>KWin::TabBox::TabBoxHandler</label>
        <link refid="class_k_win_1_1_tab_box_1_1_tab_box_handler"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::TabBox::TabBoxHandlerImpl</label>
        <link refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/tabbox/tabbox.h" line="41" column="1" bodyfile="kwin/src/tabbox/tabbox.h" bodystart="42" bodyend="73"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a1e46964ea9cdcfe7451a2d294ddcbdca" prot="public" virt="virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>activateAndClose</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1ac7d99796a5d77cbf58b3b63386875b4b" prot="public" virt="virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>activeClient</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a8624aef24080c90213f594f318ca1c51" prot="public" virt="virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>activeScreen</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a6bb9704cc01792948407adff7e9679e4" prot="private" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>checkActivity</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1ac3dac96350f5eff75a4bfff48e24ad3e" prot="private" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>checkApplications</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a4378825dc807fcd83f4813a79b7884ce" prot="private" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>checkDesktop</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a37654f4f77acd78345d277f7f42bb959" prot="private" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>checkMinimized</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a1184aa5b8022373c2a3579f8503a0891" prot="private" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>checkMultiScreen</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a913dac104fcbe61766ab024f1c674f80" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>client</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a4d36491fe85396618223ad617d008824" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>clientList</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a5c94ecbd74c93392289bbf2516d42377" prot="public" virt="virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>clientToAddToList</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1aab06239dbde732513bfea7314a591fc5" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>config</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1abd53ec5810a0ca18fb39c01c2354284c" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>configChanged</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a26bc0992590b6dcfb92ef5f1d09ffacf" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>containsPos</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a0ec37149b20e97a01c73622b776dad1d" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>createModel</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a1b285fdf4fa107e2f43c66ca022c9a51" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>currentIndex</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a0ea98dccf0b15229e30bcd36dac2d051" prot="public" virt="virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>desktopClient</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a8e0835bac3d27bbb409200aaca651b14" prot="public" virt="virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>desktopName</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a68763b29d004974a9917c7c5fd834aa8" prot="public" virt="virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>elevateClient</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a888f356cdd3546f027bb002a76c76924" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>eventFilter</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1aee584b93ac358f6c323258662ab3bf6c" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>first</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1aac40da9b9e7ef4ffe93ae605cb77c826" prot="public" virt="virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>firstClientFocusChain</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a79c91051310646f932094c7376722254" prot="public" virt="virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>grabbedKeyEvent</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a4c2bb70440f803a93fdc1d86452fcddf" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>hide</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1ad005d20aae9128904e0cf5e25ce5dfb3" prot="public" virt="virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>highlightWindows</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1aa5574eda1e9944da7ec3204565f685d4" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>index</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1ae1cc410f909fc5a9023033dbf02f0a65" prot="public" virt="virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>isInFocusChain</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a69ae423644c16b12320601d48558c37d" prot="public" virt="virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>isKWinCompositing</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a95c3bc64df86f3a92db82504091ed5db" prot="private" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>m_tabBox</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a39c3cfed15b68caf3f9c7d84bfd9e393" prot="public" virt="virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>nextClientFocusChain</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a7fa99fa6ceb163c461d888c688f46f5c" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>nextPrev</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1ae024df7bd37ecc039c34691c9300f97e" prot="public" virt="virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>noModifierGrab</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1af1e3c769e92554ca0b510f82e901a12d" prot="public" virt="virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>raiseClient</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a4748b99f999ab635acdbdb5b9ef6948a" prot="public" virt="virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>restack</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a9f408a3c9c90a32fa815a6c1e17185fa" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>selectedIndexChanged</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a3acd26a3cd3ecbef086d7b27cb2af0c4" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>setConfig</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1abe666340fa17a9b13d54d598444fad7b" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>setCurrentIndex</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a19278e6b9ef9d1a431021fd32e1c8b3b" prot="public" virt="virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>shadeClient</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a4474cf46a142bc64d418ecd68786a43a" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>show</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a18eb06cc15571f0522a35addbebf3e3a" prot="public" virt="virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>stackingOrder</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1afd9c605d4b851b017536e5a7934b6da2" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>TabBoxHandler</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a6ebd4c31e8e007d294f0ab3691d8a835" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>TabBoxHandlerImpl</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1abd4d01a7af70776b0209b35b6cbb17c9" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>~TabBoxHandler</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1aeab30ec33c11afb482529a1aaa128da5" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandlerImpl</scope><name>~TabBoxHandlerImpl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
