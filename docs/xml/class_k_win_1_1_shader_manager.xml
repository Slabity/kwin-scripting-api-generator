<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_shader_manager" kind="class" language="C++" prot="public">
    <compoundname>KWin::ShaderManager</compoundname>
    <includes refid="glshadermanager_8h" local="no">glshadermanager.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_shader_manager_1adf1cba8567ed20d1dfdadefc70a3f929" prot="private" static="no" mutable="no">
        <type>QStack&lt; <ref refid="class_k_win_1_1_g_l_shader" kindref="compound">GLShader</ref> * &gt;</type>
        <definition>QStack&lt;GLShader *&gt; KWin::ShaderManager::m_boundShaders</definition>
        <argsstring></argsstring>
        <name>m_boundShaders</name>
        <qualifiedname>KWin::ShaderManager::m_boundShaders</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshadermanager.h" line="156" column="12" bodyfile="kwin/src/opengl/glshadermanager.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_shader_manager_1ad1cd5d52f85588820c40157d2c387455" prot="private" static="no" mutable="no">
        <type>std::map&lt; ShaderTraits, std::unique_ptr&lt; <ref refid="class_k_win_1_1_g_l_shader" kindref="compound">GLShader</ref> &gt; &gt;</type>
        <definition>std::map&lt;ShaderTraits, std::unique_ptr&lt;GLShader&gt; &gt; KWin::ShaderManager::m_shaderHash</definition>
        <argsstring></argsstring>
        <name>m_shaderHash</name>
        <qualifiedname>KWin::ShaderManager::m_shaderHash</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshadermanager.h" line="157" column="14" bodyfile="kwin/src/opengl/glshadermanager.h" bodystart="157" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_shader_manager_1a7e02556c103e7742f4593ee5fdcec638" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::ShaderManager::ShaderManager</definition>
        <argsstring>()</argsstring>
        <name>ShaderManager</name>
        <qualifiedname>KWin::ShaderManager::ShaderManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshadermanager.h" line="51" column="14" bodyfile="kwin/src/opengl/glshadermanager.cpp" bodystart="29" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_shader_manager_1ac458739dd73007f91cccfa95126e751b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::ShaderManager::~ShaderManager</definition>
        <argsstring>()</argsstring>
        <name>~ShaderManager</name>
        <qualifiedname>KWin::ShaderManager::~ShaderManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshadermanager.h" line="52" column="5" bodyfile="kwin/src/opengl/glshadermanager.cpp" bodystart="33" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_shader_manager_1a50a3b6c752c3165cb35f42c1810782a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_g_l_shader" kindref="compound">GLShader</ref> *</type>
        <definition>GLShader * KWin::ShaderManager::shader</definition>
        <argsstring>(ShaderTraits traits)</argsstring>
        <name>shader</name>
        <qualifiedname>KWin::ShaderManager::shader</qualifiedname>
        <param>
          <type>ShaderTraits</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a shader with the given traits, creating it if necessary. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshadermanager.h" line="57" column="14" bodyfile="kwin/src/opengl/glshadermanager.cpp" bodystart="294" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_shader_manager_1a0117859b54b7230de57c064a7019902f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_g_l_shader" kindref="compound">GLShader</ref> *</type>
        <definition>GLShader * KWin::ShaderManager::getBoundShader</definition>
        <argsstring>() const</argsstring>
        <name>getBoundShader</name>
        <qualifiedname>KWin::ShaderManager::getBoundShader</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The currently bound shader or <computeroutput>null</computeroutput> if no shader is bound. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshadermanager.h" line="62" column="14" bodyfile="kwin/src/opengl/glshadermanager.cpp" bodystart="303" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_shader_manager_1a31b30265685d667445d604b31c3faaf2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::ShaderManager::isShaderBound</definition>
        <argsstring>() const</argsstring>
        <name>isShaderBound</name>
        <qualifiedname>KWin::ShaderManager::isShaderBound</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if a shader is bound, <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshadermanager.h" line="67" column="10" bodyfile="kwin/src/opengl/glshadermanager.cpp" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_shader_manager_1aedd0dd423df032415b439a08c6f70fed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_g_l_shader" kindref="compound">GLShader</ref> *</type>
        <definition>GLShader * KWin::ShaderManager::pushShader</definition>
        <argsstring>(ShaderTraits traits)</argsstring>
        <name>pushShader</name>
        <qualifiedname>KWin::ShaderManager::pushShader</qualifiedname>
        <param>
          <type>ShaderTraits</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pushes the current shader onto the stack and binds a shader with the given traits. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshadermanager.h" line="73" column="14" bodyfile="kwin/src/opengl/glshadermanager.cpp" bodystart="317" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_shader_manager_1abfacae3932d52a14f12680b53cc0cb0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ShaderManager::pushShader</definition>
        <argsstring>(GLShader *shader)</argsstring>
        <name>pushShader</name>
        <qualifiedname>KWin::ShaderManager::pushShader</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_g_l_shader" kindref="compound">GLShader</ref> *</type>
          <declname>shader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Binds the <computeroutput>shader</computeroutput>. To unbind the shader use popShader. A previous bound shader will be rebound. To bind a built-in shader use the more specific method. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shader</parametername>
</parameternamelist>
<parameterdescription>
<para>The shader to be bound </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_shader_manager_1a51d84e1d8c0d651b4968afdb3fba96c6" kindref="member">popShader</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshadermanager.h" line="82" column="10" bodyfile="kwin/src/opengl/glshadermanager.cpp" bodystart="324" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_shader_manager_1a51d84e1d8c0d651b4968afdb3fba96c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ShaderManager::popShader</definition>
        <argsstring>()</argsstring>
        <name>popShader</name>
        <qualifiedname>KWin::ShaderManager::popShader</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unbinds the currently bound shader and rebinds a previous stored shader. If there is no previous shader, no shader will be rebound. It is not safe to call this method if there is no bound shader. <simplesect kind="see"><para><ref refid="class_k_win_1_1_shader_manager_1aedd0dd423df032415b439a08c6f70fed" kindref="member">pushShader</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_shader_manager_1a0117859b54b7230de57c064a7019902f" kindref="member">getBoundShader</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshadermanager.h" line="91" column="10" bodyfile="kwin/src/opengl/glshadermanager.cpp" bodystart="333" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_shader_manager_1ad1641f0d1dc0c4139a3a7ce2a2d5bf68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_g_l_shader" kindref="compound">GLShader</ref> &gt;</type>
        <definition>std::unique_ptr&lt; GLShader &gt; KWin::ShaderManager::loadShaderFromCode</definition>
        <argsstring>(const QByteArray &amp;vertexSource, const QByteArray &amp;fragmentSource)</argsstring>
        <name>loadShaderFromCode</name>
        <qualifiedname>KWin::ShaderManager::loadShaderFromCode</qualifiedname>
        <param>
          <type>const QByteArray &amp;</type>
          <declname>vertexSource</declname>
        </param>
        <param>
          <type>const QByteArray &amp;</type>
          <declname>fragmentSource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="class_k_win_1_1_g_l_shader" kindref="compound">GLShader</ref> with the specified sources. The difference to <ref refid="class_k_win_1_1_g_l_shader" kindref="compound">GLShader</ref> is that it does not need to be loaded from files. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertexSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The source code of the vertex shader </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fragmentSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The source code of the fragment shader. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The created shader </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshadermanager.h" line="100" column="21" bodyfile="kwin/src/opengl/glshadermanager.cpp" bodystart="359" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_shader_manager_1ac6aa576fa0612765a6f1ef565dd355e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_g_l_shader" kindref="compound">GLShader</ref> &gt;</type>
        <definition>std::unique_ptr&lt; GLShader &gt; KWin::ShaderManager::generateCustomShader</definition>
        <argsstring>(ShaderTraits traits, const QByteArray &amp;vertexSource=QByteArray(), const QByteArray &amp;fragmentSource=QByteArray())</argsstring>
        <name>generateCustomShader</name>
        <qualifiedname>KWin::ShaderManager::generateCustomShader</qualifiedname>
        <param>
          <type>ShaderTraits</type>
          <declname>traits</declname>
        </param>
        <param>
          <type>const QByteArray &amp;</type>
          <declname>vertexSource</declname>
          <defval>QByteArray()</defval>
        </param>
        <param>
          <type>const QByteArray &amp;</type>
          <declname>fragmentSource</declname>
          <defval>QByteArray()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a custom shader with the given <computeroutput>traits</computeroutput> and custom <computeroutput>vertexSource</computeroutput> and or <computeroutput>fragmentSource</computeroutput>. If the <computeroutput>vertexSource</computeroutput> is empty a vertex shader with the given <computeroutput>traits</computeroutput> is generated. If it is not empty the <computeroutput>vertexSource</computeroutput> is used as the source for the vertex shader.</para>
<para>The same applies for argument <computeroutput>fragmentSource</computeroutput> just for the fragment shader.</para>
<para>So if both <computeroutput>vertesSource</computeroutput> and <computeroutput>fragmentSource</computeroutput> are provided the <computeroutput>traits</computeroutput> are ignored. If neither are provided a new shader following the <computeroutput>traits</computeroutput> is generated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>The shader traits for generating the shader </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertexSource</parametername>
</parameternamelist>
<parameterdescription>
<para>optional vertex shader source code to be used instead of shader traits </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fragmentSource</parametername>
</parameternamelist>
<parameterdescription>
<para>optional fragment shader source code to be used instead of shader traits </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new generated shader </para>
</simplesect>
<simplesect kind="since"><para>5.6 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshadermanager.h" line="118" column="21" bodyfile="kwin/src/opengl/glshadermanager.cpp" bodystart="224" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_shader_manager_1a3a336f77b008451717f7dbcfd3081ab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_g_l_shader" kindref="compound">GLShader</ref> &gt;</type>
        <definition>std::unique_ptr&lt; GLShader &gt; KWin::ShaderManager::generateShaderFromFile</definition>
        <argsstring>(ShaderTraits traits, const QString &amp;vertexFile=QString(), const QString &amp;fragmentFile=QString())</argsstring>
        <name>generateShaderFromFile</name>
        <qualifiedname>KWin::ShaderManager::generateShaderFromFile</qualifiedname>
        <param>
          <type>ShaderTraits</type>
          <declname>traits</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>vertexFile</declname>
          <defval>QString()</defval>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>fragmentFile</declname>
          <defval>QString()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a custom shader with the given <computeroutput>traits</computeroutput> and custom <computeroutput>vertexFile</computeroutput> and or <computeroutput>fragmentFile</computeroutput>.</para>
<para>If the <computeroutput>vertexFile</computeroutput> is empty a vertex shader with the given <computeroutput>traits</computeroutput> is generated. If it is not empty the <computeroutput>vertexFile</computeroutput> is used as the source for the vertex shader.</para>
<para>The same applies for argument <computeroutput>fragmentFile</computeroutput> just for the fragment shader.</para>
<para>So if both <computeroutput>vertexFile</computeroutput> and <computeroutput>fragmentFile</computeroutput> are provided the <computeroutput>traits</computeroutput> are ignored. If neither are provided a new shader following the <computeroutput>traits</computeroutput> is generated.</para>
<para>If a custom shader stage is provided and core profile is used, the final file path will be resolved by appending &quot;_core&quot; to the basename.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>traits</parametername>
</parameternamelist>
<parameterdescription>
<para>The shader traits for generating the shader </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertexFile</parametername>
</parameternamelist>
<parameterdescription>
<para>optional vertex shader source code to be used instead of shader traits </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fragmentFile</parametername>
</parameternamelist>
<parameterdescription>
<para>optional fragment shader source code to be used instead of shader traits </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new generated shader </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_shader_manager_1ac6aa576fa0612765a6f1ef565dd355e3" kindref="member">generateCustomShader</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshadermanager.h" line="140" column="21" bodyfile="kwin/src/opengl/glshadermanager.cpp" bodystart="267" bodyend="292"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_k_win_1_1_shader_manager_1aaf9c40a0a4f2e72ad6e30fa967dd073c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_shader_manager" kindref="compound">ShaderManager</ref> *</type>
        <definition>ShaderManager * KWin::ShaderManager::instance</definition>
        <argsstring>()</argsstring>
        <name>instance</name>
        <qualifiedname>KWin::ShaderManager::instance</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a pointer to the <ref refid="class_k_win_1_1_shader_manager" kindref="compound">ShaderManager</ref> instance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshadermanager.h" line="145" column="26" bodyfile="kwin/src/opengl/glshadermanager.cpp" bodystart="24" bodyend="27"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_k_win_1_1_shader_manager_1a7b5856ea9cfaa24715f1c3a5b70d5317" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ShaderManager::bindFragDataLocations</definition>
        <argsstring>(GLShader *shader)</argsstring>
        <name>bindFragDataLocations</name>
        <qualifiedname>KWin::ShaderManager::bindFragDataLocations</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_g_l_shader" kindref="compound">GLShader</ref> *</type>
          <declname>shader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshadermanager.h" line="148" column="10" bodyfile="kwin/src/opengl/glshadermanager.cpp" bodystart="348" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_shader_manager_1a5bc4c986f61818cc2f369c44ef947f1f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ShaderManager::bindAttributeLocations</definition>
        <argsstring>(GLShader *shader) const</argsstring>
        <name>bindAttributeLocations</name>
        <qualifiedname>KWin::ShaderManager::bindAttributeLocations</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_g_l_shader" kindref="compound">GLShader</ref> *</type>
          <declname>shader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshadermanager.h" line="149" column="10" bodyfile="kwin/src/opengl/glshadermanager.cpp" bodystart="353" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_shader_manager_1a1d06392ea4ebbd9b703d71527037868d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; QByteArray &gt;</type>
        <definition>std::optional&lt; QByteArray &gt; KWin::ShaderManager::preprocess</definition>
        <argsstring>(const QByteArray &amp;src, int recursionDepth=0) const</argsstring>
        <name>preprocess</name>
        <qualifiedname>KWin::ShaderManager::preprocess</qualifiedname>
        <param>
          <type>const QByteArray &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>recursionDepth</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshadermanager.h" line="151" column="19" bodyfile="kwin/src/opengl/glshadermanager.cpp" bodystart="191" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_shader_manager_1a457ac99924610c8e2308261d78c29272" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArray</type>
        <definition>QByteArray KWin::ShaderManager::generateVertexSource</definition>
        <argsstring>(ShaderTraits traits) const</argsstring>
        <name>generateVertexSource</name>
        <qualifiedname>KWin::ShaderManager::generateVertexSource</qualifiedname>
        <param>
          <type>ShaderTraits</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshadermanager.h" line="152" column="16" bodyfile="kwin/src/opengl/glshadermanager.cpp" bodystart="40" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_shader_manager_1a9559ec61bf6a3069c912ee9ad354258d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArray</type>
        <definition>QByteArray KWin::ShaderManager::generateFragmentSource</definition>
        <argsstring>(ShaderTraits traits) const</argsstring>
        <name>generateFragmentSource</name>
        <qualifiedname>KWin::ShaderManager::generateFragmentSource</qualifiedname>
        <param>
          <type>ShaderTraits</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshadermanager.h" line="153" column="16" bodyfile="kwin/src/opengl/glshadermanager.cpp" bodystart="90" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_shader_manager_1a6b3ab704fd1798251dda124c2cbaaf55" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_g_l_shader" kindref="compound">GLShader</ref> &gt;</type>
        <definition>std::unique_ptr&lt; GLShader &gt; KWin::ShaderManager::generateShader</definition>
        <argsstring>(ShaderTraits traits)</argsstring>
        <name>generateShader</name>
        <qualifiedname>KWin::ShaderManager::generateShader</qualifiedname>
        <param>
          <type>ShaderTraits</type>
          <declname>traits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshadermanager.h" line="154" column="21" bodyfile="kwin/src/opengl/glshadermanager.cpp" bodystart="186" bodyend="189"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Manager for Shaders. </para>
    </briefdescription>
    <detaileddescription>
<para>This class provides some built-in shaders to be used by both compositing scene and effects. The <ref refid="class_k_win_1_1_shader_manager" kindref="compound">ShaderManager</ref> provides methods to bind a built-in or a custom shader and keeps track of the shaders which have been bound. When a shader is unbound the previously bound shader will be rebound.</para>
<para><simplesect kind="author"><para>Martin Gräßlin <ulink url="mailto:mgraesslin@kde.org">mgraesslin@kde.org</ulink> </para>
</simplesect>
<simplesect kind="since"><para>4.7 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="kwin/src/opengl/glshadermanager.h" line="48" column="1" bodyfile="kwin/src/opengl/glshadermanager.h" bodystart="49" bodyend="158"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_shader_manager_1a5bc4c986f61818cc2f369c44ef947f1f" prot="private" virt="non-virtual"><scope>KWin::ShaderManager</scope><name>bindAttributeLocations</name></member>
      <member refid="class_k_win_1_1_shader_manager_1a7b5856ea9cfaa24715f1c3a5b70d5317" prot="private" virt="non-virtual"><scope>KWin::ShaderManager</scope><name>bindFragDataLocations</name></member>
      <member refid="class_k_win_1_1_shader_manager_1ac6aa576fa0612765a6f1ef565dd355e3" prot="public" virt="non-virtual"><scope>KWin::ShaderManager</scope><name>generateCustomShader</name></member>
      <member refid="class_k_win_1_1_shader_manager_1a9559ec61bf6a3069c912ee9ad354258d" prot="private" virt="non-virtual"><scope>KWin::ShaderManager</scope><name>generateFragmentSource</name></member>
      <member refid="class_k_win_1_1_shader_manager_1a6b3ab704fd1798251dda124c2cbaaf55" prot="private" virt="non-virtual"><scope>KWin::ShaderManager</scope><name>generateShader</name></member>
      <member refid="class_k_win_1_1_shader_manager_1a3a336f77b008451717f7dbcfd3081ab0" prot="public" virt="non-virtual"><scope>KWin::ShaderManager</scope><name>generateShaderFromFile</name></member>
      <member refid="class_k_win_1_1_shader_manager_1a457ac99924610c8e2308261d78c29272" prot="private" virt="non-virtual"><scope>KWin::ShaderManager</scope><name>generateVertexSource</name></member>
      <member refid="class_k_win_1_1_shader_manager_1a0117859b54b7230de57c064a7019902f" prot="public" virt="non-virtual"><scope>KWin::ShaderManager</scope><name>getBoundShader</name></member>
      <member refid="class_k_win_1_1_shader_manager_1aaf9c40a0a4f2e72ad6e30fa967dd073c" prot="public" virt="non-virtual"><scope>KWin::ShaderManager</scope><name>instance</name></member>
      <member refid="class_k_win_1_1_shader_manager_1a31b30265685d667445d604b31c3faaf2" prot="public" virt="non-virtual"><scope>KWin::ShaderManager</scope><name>isShaderBound</name></member>
      <member refid="class_k_win_1_1_shader_manager_1ad1641f0d1dc0c4139a3a7ce2a2d5bf68" prot="public" virt="non-virtual"><scope>KWin::ShaderManager</scope><name>loadShaderFromCode</name></member>
      <member refid="class_k_win_1_1_shader_manager_1adf1cba8567ed20d1dfdadefc70a3f929" prot="private" virt="non-virtual"><scope>KWin::ShaderManager</scope><name>m_boundShaders</name></member>
      <member refid="class_k_win_1_1_shader_manager_1ad1cd5d52f85588820c40157d2c387455" prot="private" virt="non-virtual"><scope>KWin::ShaderManager</scope><name>m_shaderHash</name></member>
      <member refid="class_k_win_1_1_shader_manager_1a51d84e1d8c0d651b4968afdb3fba96c6" prot="public" virt="non-virtual"><scope>KWin::ShaderManager</scope><name>popShader</name></member>
      <member refid="class_k_win_1_1_shader_manager_1a1d06392ea4ebbd9b703d71527037868d" prot="private" virt="non-virtual"><scope>KWin::ShaderManager</scope><name>preprocess</name></member>
      <member refid="class_k_win_1_1_shader_manager_1aedd0dd423df032415b439a08c6f70fed" prot="public" virt="non-virtual"><scope>KWin::ShaderManager</scope><name>pushShader</name></member>
      <member refid="class_k_win_1_1_shader_manager_1abfacae3932d52a14f12680b53cc0cb0a" prot="public" virt="non-virtual"><scope>KWin::ShaderManager</scope><name>pushShader</name></member>
      <member refid="class_k_win_1_1_shader_manager_1a50a3b6c752c3165cb35f42c1810782a6" prot="public" virt="non-virtual"><scope>KWin::ShaderManager</scope><name>shader</name></member>
      <member refid="class_k_win_1_1_shader_manager_1a7e02556c103e7742f4593ee5fdcec638" prot="public" virt="non-virtual"><scope>KWin::ShaderManager</scope><name>ShaderManager</name></member>
      <member refid="class_k_win_1_1_shader_manager_1ac458739dd73007f91cccfa95126e751b" prot="public" virt="non-virtual"><scope>KWin::ShaderManager</scope><name>~ShaderManager</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
