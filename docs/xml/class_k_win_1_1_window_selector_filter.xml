<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_window_selector_filter" kind="class" language="C++" prot="public">
    <compoundname>KWin::WindowSelectorFilter</compoundname>
    <basecompoundref refid="class_k_win_1_1_input_event_filter" prot="public" virt="non-virtual">KWin::InputEventFilter</basecompoundref>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_window_selector_filter_1a864446f63ac4fb1d54ef2e3bc8aa2e68" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::WindowSelectorFilter::m_active</definition>
        <argsstring></argsstring>
        <name>m_active</name>
        <qualifiedname>KWin::WindowSelectorFilter::m_active</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input.cpp" line="971" column="10" bodyfile="kwin/src/input.cpp" bodystart="971" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_selector_filter_1a1ab43b5c499127a60bec87cff3dd8d51" prot="private" static="no" mutable="no">
        <type>std::function&lt; void(<ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *)&gt;</type>
        <definition>std::function&lt;void(Window *)&gt; KWin::WindowSelectorFilter::m_callback</definition>
        <argsstring></argsstring>
        <name>m_callback</name>
        <qualifiedname>KWin::WindowSelectorFilter::m_callback</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input.cpp" line="972" column="19" bodyfile="kwin/src/input.cpp" bodystart="972" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_selector_filter_1a92b83a3cd9a4d36c492c12ba36c056fb" prot="private" static="no" mutable="no">
        <type>std::function&lt; void(const QPoint &amp;)&gt;</type>
        <definition>std::function&lt;void(const QPoint &amp;)&gt; KWin::WindowSelectorFilter::m_pointSelectionFallback</definition>
        <argsstring></argsstring>
        <name>m_pointSelectionFallback</name>
        <qualifiedname>KWin::WindowSelectorFilter::m_pointSelectionFallback</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input.cpp" line="973" column="19" bodyfile="kwin/src/input.cpp" bodystart="973" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_selector_filter_1a8feb8b60f51dbe14d2342dbf2f67e3fc" prot="private" static="no" mutable="no">
        <type>QMap&lt; quint32, QPointF &gt;</type>
        <definition>QMap&lt;quint32, QPointF&gt; KWin::WindowSelectorFilter::m_touchPoints</definition>
        <argsstring></argsstring>
        <name>m_touchPoints</name>
        <qualifiedname>KWin::WindowSelectorFilter::m_touchPoints</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input.cpp" line="974" column="10" bodyfile="kwin/src/input.cpp" bodystart="974" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_window_selector_filter_1a6dfc4c208ef589acecb192f47d8da7bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KWin::WindowSelectorFilter::WindowSelectorFilter</definition>
        <argsstring>()</argsstring>
        <name>WindowSelectorFilter</name>
        <qualifiedname>KWin::WindowSelectorFilter::WindowSelectorFilter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input.cpp" line="799" column="5" bodyfile="kwin/src/input.cpp" bodystart="799" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_selector_filter_1a589bcf9e8f200d17fc55e087553bf075" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::WindowSelectorFilter::pointerMotion</definition>
        <argsstring>(PointerMotionEvent *event) override</argsstring>
        <name>pointerMotion</name>
        <qualifiedname>KWin::WindowSelectorFilter::pointerMotion</qualifiedname>
        <reimplements refid="class_k_win_1_1_input_event_filter_1a0e8cf7f7d0816fa15dbfef65300bdf74">pointerMotion</reimplements>
        <param>
          <type><ref refid="struct_k_win_1_1_pointer_motion_event" kindref="compound">PointerMotionEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input.cpp" line="803" column="10" bodyfile="kwin/src/input.cpp" bodystart="803" bodyend="806"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_selector_filter_1ad9d5d741cb97b1302539e897175d3557" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::WindowSelectorFilter::pointerButton</definition>
        <argsstring>(PointerButtonEvent *event) override</argsstring>
        <name>pointerButton</name>
        <qualifiedname>KWin::WindowSelectorFilter::pointerButton</qualifiedname>
        <reimplements refid="class_k_win_1_1_input_event_filter_1a42d5cd1beabe79a9f0f47c7984a63e03">pointerButton</reimplements>
        <param>
          <type><ref refid="struct_k_win_1_1_pointer_button_event" kindref="compound">PointerButtonEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input.cpp" line="807" column="10" bodyfile="kwin/src/input.cpp" bodystart="807" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_selector_filter_1ad0b811ab9c954d007c51d727096c1b7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::WindowSelectorFilter::pointerAxis</definition>
        <argsstring>(PointerAxisEvent *event) override</argsstring>
        <name>pointerAxis</name>
        <qualifiedname>KWin::WindowSelectorFilter::pointerAxis</qualifiedname>
        <reimplements refid="class_k_win_1_1_input_event_filter_1a34fb678aeaece81927f9ffd95bb418a6">pointerAxis</reimplements>
        <param>
          <type><ref refid="struct_k_win_1_1_pointer_axis_event" kindref="compound">PointerAxisEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Event filter for pointer axis events.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>The event information about the axis event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> to stop further event processing, <computeroutput>false</computeroutput> to pass to next filter </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input.cpp" line="823" column="10" bodyfile="kwin/src/input.cpp" bodystart="823" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_selector_filter_1a4b74bfbe416f337a1799169a5ee815d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::WindowSelectorFilter::keyboardKey</definition>
        <argsstring>(KeyboardKeyEvent *event) override</argsstring>
        <name>keyboardKey</name>
        <qualifiedname>KWin::WindowSelectorFilter::keyboardKey</qualifiedname>
        <reimplements refid="class_k_win_1_1_input_event_filter_1accb90817b0fb12456022cb3e1d89fd24">keyboardKey</reimplements>
        <param>
          <type><ref refid="struct_k_win_1_1_keyboard_key_event" kindref="compound">KeyboardKeyEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Event filter for keyboard events.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>The event information about the key event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> to stop further event processing, <computeroutput>false</computeroutput> to pass to next filter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input.cpp" line="828" column="10" bodyfile="kwin/src/input.cpp" bodystart="828" bodyend="866"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_selector_filter_1ad9ec43698b51e02614746d1bf1d1aa63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::WindowSelectorFilter::touchDown</definition>
        <argsstring>(qint32 id, const QPointF &amp;pos, std::chrono::microseconds time) override</argsstring>
        <name>touchDown</name>
        <qualifiedname>KWin::WindowSelectorFilter::touchDown</qualifiedname>
        <reimplements refid="class_k_win_1_1_input_event_filter_1a9d918ff67523d7f036943c9aa56a2e1b">touchDown</reimplements>
        <param>
          <type>qint32</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input.cpp" line="868" column="10" bodyfile="kwin/src/input.cpp" bodystart="868" bodyend="875"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_selector_filter_1ad8286c2fae12c112333f777a8317202d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::WindowSelectorFilter::touchMotion</definition>
        <argsstring>(qint32 id, const QPointF &amp;pos, std::chrono::microseconds time) override</argsstring>
        <name>touchMotion</name>
        <qualifiedname>KWin::WindowSelectorFilter::touchMotion</qualifiedname>
        <reimplements refid="class_k_win_1_1_input_event_filter_1ab8d0440bac50eda28cba2ac9ed7548e1">touchMotion</reimplements>
        <param>
          <type>qint32</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input.cpp" line="877" column="10" bodyfile="kwin/src/input.cpp" bodystart="877" bodyend="887"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_selector_filter_1aa41a34a739756423ad4ac50c8b57e922" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::WindowSelectorFilter::touchUp</definition>
        <argsstring>(qint32 id, std::chrono::microseconds time) override</argsstring>
        <name>touchUp</name>
        <qualifiedname>KWin::WindowSelectorFilter::touchUp</qualifiedname>
        <reimplements refid="class_k_win_1_1_input_event_filter_1a608cb067e83ad4ed842476cc16ac0800">touchUp</reimplements>
        <param>
          <type>qint32</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input.cpp" line="889" column="10" bodyfile="kwin/src/input.cpp" bodystart="889" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_selector_filter_1ae92f85720f920a7e023471a1bb527d2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::WindowSelectorFilter::tabletToolTipEvent</definition>
        <argsstring>(TabletToolTipEvent *event) override</argsstring>
        <name>tabletToolTipEvent</name>
        <qualifiedname>KWin::WindowSelectorFilter::tabletToolTipEvent</qualifiedname>
        <reimplements refid="class_k_win_1_1_input_event_filter_1af1d39642578227a239b2aa8e55405367">tabletToolTipEvent</reimplements>
        <param>
          <type><ref refid="struct_k_win_1_1_tablet_tool_tip_event" kindref="compound">TabletToolTipEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input.cpp" line="905" column="10" bodyfile="kwin/src/input.cpp" bodystart="905" bodyend="916"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_selector_filter_1a8ce219072f86557a5f22ce840a30795b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::WindowSelectorFilter::isActive</definition>
        <argsstring>() const</argsstring>
        <name>isActive</name>
        <qualifiedname>KWin::WindowSelectorFilter::isActive</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input.cpp" line="918" column="10" bodyfile="kwin/src/input.cpp" bodystart="918" bodyend="921"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_selector_filter_1aec8e27c3ff8724250feaaf2570262aae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::WindowSelectorFilter::start</definition>
        <argsstring>(std::function&lt; void(Window *)&gt; callback)</argsstring>
        <name>start</name>
        <qualifiedname>KWin::WindowSelectorFilter::start</qualifiedname>
        <param>
          <type>std::function&lt; void(<ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *)&gt;</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input.cpp" line="922" column="10" bodyfile="kwin/src/input.cpp" bodystart="922" bodyend="929"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_selector_filter_1a86a1a40e88f2cbfac243fc5448b5c6b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::WindowSelectorFilter::start</definition>
        <argsstring>(std::function&lt; void(const QPoint &amp;)&gt; callback)</argsstring>
        <name>start</name>
        <qualifiedname>KWin::WindowSelectorFilter::start</qualifiedname>
        <param>
          <type>std::function&lt; void(const QPoint &amp;)&gt;</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input.cpp" line="930" column="10" bodyfile="kwin/src/input.cpp" bodystart="930" bodyend="937"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_k_win_1_1_window_selector_filter_1a39cf97ef87316fc49685b26940b24eaa" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::WindowSelectorFilter::deactivate</definition>
        <argsstring>()</argsstring>
        <name>deactivate</name>
        <qualifiedname>KWin::WindowSelectorFilter::deactivate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input.cpp" line="940" column="10" bodyfile="kwin/src/input.cpp" bodystart="940" bodyend="948"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_selector_filter_1aa009d6e0678f2a7fbd30042801dbeeb8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::WindowSelectorFilter::cancel</definition>
        <argsstring>()</argsstring>
        <name>cancel</name>
        <qualifiedname>KWin::WindowSelectorFilter::cancel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input.cpp" line="949" column="10" bodyfile="kwin/src/input.cpp" bodystart="949" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_selector_filter_1acbe6a3a395387c2a5dbbb6be15e685b7" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::WindowSelectorFilter::accept</definition>
        <argsstring>(const QPointF &amp;pos)</argsstring>
        <name>accept</name>
        <qualifiedname>KWin::WindowSelectorFilter::accept</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input.cpp" line="959" column="10" bodyfile="kwin/src/input.cpp" bodystart="959" bodyend="969"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>KWin::InputEventFilter</label>
        <link refid="class_k_win_1_1_input_event_filter"/>
      </node>
      <node id="1">
        <label>KWin::WindowSelectorFilter</label>
        <link refid="class_k_win_1_1_window_selector_filter"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>KWin::InputEventFilter</label>
        <link refid="class_k_win_1_1_input_event_filter"/>
      </node>
      <node id="1">
        <label>KWin::WindowSelectorFilter</label>
        <link refid="class_k_win_1_1_window_selector_filter"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="kwin/src/input.cpp" line="796" column="1" bodyfile="kwin/src/input.cpp" bodystart="797" bodyend="975"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_window_selector_filter_1acbe6a3a395387c2a5dbbb6be15e685b7" prot="private" virt="non-virtual"><scope>KWin::WindowSelectorFilter</scope><name>accept</name></member>
      <member refid="class_k_win_1_1_window_selector_filter_1aa009d6e0678f2a7fbd30042801dbeeb8" prot="private" virt="non-virtual"><scope>KWin::WindowSelectorFilter</scope><name>cancel</name></member>
      <member refid="class_k_win_1_1_window_selector_filter_1a39cf97ef87316fc49685b26940b24eaa" prot="private" virt="non-virtual"><scope>KWin::WindowSelectorFilter</scope><name>deactivate</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1ac0990f77bd702079fc24ef1b85b6027a" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>holdGestureBegin</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1ae0d852136e0039a753ffed5feb537f1c" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>holdGestureCancelled</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1aaf03914c307f1f6e300ac28e7dfd8bbc" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>holdGestureEnd</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1a0dacba9bb1bca5bd8462518d8ae07694" prot="public" virt="non-virtual"><scope>KWin::WindowSelectorFilter</scope><name>InputEventFilter</name></member>
      <member refid="class_k_win_1_1_window_selector_filter_1a8ce219072f86557a5f22ce840a30795b" prot="public" virt="non-virtual"><scope>KWin::WindowSelectorFilter</scope><name>isActive</name></member>
      <member refid="class_k_win_1_1_window_selector_filter_1a4b74bfbe416f337a1799169a5ee815d8" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>keyboardKey</name></member>
      <member refid="class_k_win_1_1_window_selector_filter_1a864446f63ac4fb1d54ef2e3bc8aa2e68" prot="private" virt="non-virtual"><scope>KWin::WindowSelectorFilter</scope><name>m_active</name></member>
      <member refid="class_k_win_1_1_window_selector_filter_1a1ab43b5c499127a60bec87cff3dd8d51" prot="private" virt="non-virtual"><scope>KWin::WindowSelectorFilter</scope><name>m_callback</name></member>
      <member refid="class_k_win_1_1_window_selector_filter_1a92b83a3cd9a4d36c492c12ba36c056fb" prot="private" virt="non-virtual"><scope>KWin::WindowSelectorFilter</scope><name>m_pointSelectionFallback</name></member>
      <member refid="class_k_win_1_1_window_selector_filter_1a8feb8b60f51dbe14d2342dbf2f67e3fc" prot="private" virt="non-virtual"><scope>KWin::WindowSelectorFilter</scope><name>m_touchPoints</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1ae72e537c14e9de14f0720c8f25c6c4cd" prot="protected" virt="non-virtual"><scope>KWin::WindowSelectorFilter</scope><name>passToInputMethod</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1ad56a554ea3b7f767e31d332c4c5e055c" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>pinchGestureBegin</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1ab613d6168ad5c579aa19af90b88e87b1" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>pinchGestureCancelled</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1a10658e9f1c58a685940eb12b435fe146" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>pinchGestureEnd</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1a598c8b3e5fe665b14a3e67a375832d08" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>pinchGestureUpdate</name></member>
      <member refid="class_k_win_1_1_window_selector_filter_1ad0b811ab9c954d007c51d727096c1b7b" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>pointerAxis</name></member>
      <member refid="class_k_win_1_1_window_selector_filter_1ad9d5d741cb97b1302539e897175d3557" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>pointerButton</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1a8aedcd4f0130e1c00d08b87213f123c1" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>pointerFrame</name></member>
      <member refid="class_k_win_1_1_window_selector_filter_1a589bcf9e8f200d17fc55e087553bf075" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>pointerMotion</name></member>
      <member refid="class_k_win_1_1_window_selector_filter_1aec8e27c3ff8724250feaaf2570262aae" prot="public" virt="non-virtual"><scope>KWin::WindowSelectorFilter</scope><name>start</name></member>
      <member refid="class_k_win_1_1_window_selector_filter_1a86a1a40e88f2cbfac243fc5448b5c6b3" prot="public" virt="non-virtual"><scope>KWin::WindowSelectorFilter</scope><name>start</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1aef58de63781487e47b4137c43a8d2c44" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>swipeGestureBegin</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1a6d1ec0e92bdcd24e12a11a68483f9517" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>swipeGestureCancelled</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1ab5b578ec73f882e2830f2fefe1f4775e" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>swipeGestureEnd</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1a9a1557bd23c9ea3965a7130edc7462c5" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>swipeGestureUpdate</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1aed8b92865343626379d8ac71f4bd2ea4" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>switchEvent</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1a4ef1fabdd3f77b942ee0596f400f32fc" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>tabletPadButtonEvent</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1aeab73b0dbcd57d4b3f678a81de7489b4" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>tabletPadRingEvent</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1a02286f0b50679ecea3e1b231cb27861a" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>tabletPadStripEvent</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1aff68194291337061cc9785d66c3043ce" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>tabletToolAxisEvent</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1a7a56441182925d5c0fd6876bc0414c8e" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>tabletToolButtonEvent</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1a02802b4a5bef840c2c077f7271755858" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>tabletToolProximityEvent</name></member>
      <member refid="class_k_win_1_1_window_selector_filter_1ae92f85720f920a7e023471a1bb527d2c" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>tabletToolTipEvent</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1ae760899fce671a183fbc540b8beaeea8" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>touchCancel</name></member>
      <member refid="class_k_win_1_1_window_selector_filter_1ad9ec43698b51e02614746d1bf1d1aa63" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>touchDown</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1ae7e591c6e196c1c8929934c69da523b9" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>touchFrame</name></member>
      <member refid="class_k_win_1_1_window_selector_filter_1ad8286c2fae12c112333f777a8317202d" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>touchMotion</name></member>
      <member refid="class_k_win_1_1_window_selector_filter_1aa41a34a739756423ad4ac50c8b57e922" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>touchUp</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1a52a11556fd89cea278b3fcb79d4f6a78" prot="public" virt="non-virtual"><scope>KWin::WindowSelectorFilter</scope><name>weight</name></member>
      <member refid="class_k_win_1_1_window_selector_filter_1a6dfc4c208ef589acecb192f47d8da7bb" prot="public" virt="non-virtual"><scope>KWin::WindowSelectorFilter</scope><name>WindowSelectorFilter</name></member>
      <member refid="class_k_win_1_1_input_event_filter_1ab87db3c27248ac5074cf84ee87d94c9c" prot="public" virt="virtual"><scope>KWin::WindowSelectorFilter</scope><name>~InputEventFilter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
