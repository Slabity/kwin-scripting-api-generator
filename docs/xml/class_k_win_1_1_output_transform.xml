<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_output_transform" kind="class" language="C++" prot="public">
    <compoundname>KWin::OutputTransform</compoundname>
    <includes refid="core_2output_8h" local="no">output.h</includes>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7" prot="public" static="no" strong="no">
        <type></type>
        <name>Kind</name>
        <qualifiedname>KWin::OutputTransform::Kind</qualifiedname>
        <enumvalue id="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7a3973587033abbbbbaaddeb37d12f6700" prot="public">
          <name>Normal</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7a1457e6800a3c966efe2e352858ce1814" prot="public">
          <name>Rotate90</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7a81855b733eee5226c36b414b06c62d0d" prot="public">
          <name>Rotate180</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7a9516f7c7bb3dd6677e50c6bc4bb18722" prot="public">
          <name>Rotate270</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7a99ce33d2be6b6fc0b62f75c3cf2e0d92" prot="public">
          <name>FlipX</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7afc73240de152f39a98729840eec175eb" prot="public">
          <name>FlipX90</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7a3e8998b4b9987dd309ca4687e8c34703" prot="public">
          <name>FlipX180</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7a37f341a971fe7820b815c75c39d24b31" prot="public">
          <name>FlipX270</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7a16cbb90948f3bcab5a9ea45724e0ca17" prot="public">
          <name>FlipY</name>
          <initializer>= FlipX180</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7abbcaf45fa486aaeb326528fe6d310649" prot="public">
          <name>FlipY90</name>
          <initializer>= FlipX270</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7a8cdd419a0fa17732930874ec67e2f355" prot="public">
          <name>FlipY180</name>
          <initializer>= FlipX</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7ad52d9dff30c4fa4fc346a1f88d162264" prot="public">
          <name>FlipY270</name>
          <initializer>= FlipX90</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/output.h" line="40" column="5" bodyfile="kwin/src/core/output.h" bodystart="40" bodyend="53"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_output_transform_1aae9177d5a747ad76caec9a6f4a722ae0" prot="private" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7" kindref="member">Kind</ref></type>
        <definition>Kind KWin::OutputTransform::m_kind</definition>
        <argsstring></argsstring>
        <name>m_kind</name>
        <qualifiedname>KWin::OutputTransform::m_kind</qualifiedname>
        <initializer>= <ref refid="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7a3973587033abbbbbaaddeb37d12f6700" kindref="member">Kind::Normal</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/output.h" line="104" column="10" bodyfile="kwin/src/core/output.h" bodystart="104" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_output_transform_1a79d2aa40bfd451a6390c9d5acca1fadc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::OutputTransform::OutputTransform</definition>
        <argsstring>()=default</argsstring>
        <name>OutputTransform</name>
        <qualifiedname>KWin::OutputTransform::OutputTransform</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/output.h" line="55" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_output_transform_1ad8619b524cc2570e98df5b0ff500a149" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KWin::OutputTransform::OutputTransform</definition>
        <argsstring>(Kind kind)</argsstring>
        <name>OutputTransform</name>
        <qualifiedname>KWin::OutputTransform::OutputTransform</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7" kindref="member">Kind</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/output.h" line="56" column="5" bodyfile="kwin/src/core/output.h" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_output_transform_1a044d651fc6e27e6381cc414695ae5c3e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::OutputTransform::operator&lt;=&gt;</definition>
        <argsstring>(const OutputTransform &amp;other) const =default</argsstring>
        <name>operator&lt;=&gt;</name>
        <qualifiedname>KWin::OutputTransform::operator&lt;=&gt;</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_output_transform" kindref="compound">OutputTransform</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/output.h" line="61" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_output_transform_1a616973bbf05f161040b6cfbaec44f0a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7" kindref="member">Kind</ref></type>
        <definition>OutputTransform::Kind KWin::OutputTransform::kind</definition>
        <argsstring>() const</argsstring>
        <name>kind</name>
        <qualifiedname>KWin::OutputTransform::kind</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the transform kind. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/output.h" line="66" column="10" bodyfile="kwin/src/core/output.cpp" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_output_transform_1ac1f8e22d9e81d27b2aa33c4248df2f38" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_output_transform" kindref="compound">OutputTransform</ref></type>
        <definition>OutputTransform KWin::OutputTransform::inverted</definition>
        <argsstring>() const</argsstring>
        <name>inverted</name>
        <qualifiedname>KWin::OutputTransform::inverted</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the inverse transform. The inverse transform can be used for mapping between surface and buffer coordinate systems. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/output.h" line="72" column="21" bodyfile="kwin/src/core/output.cpp" bodystart="77" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_output_transform_1a3ec20a32ff68a7be2eae68ebe42dd0ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::OutputTransform::map</definition>
        <argsstring>(const QSizeF &amp;size) const</argsstring>
        <name>map</name>
        <qualifiedname>KWin::OutputTransform::map</qualifiedname>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Applies the output transform to the given <emphasis>size</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/output.h" line="77" column="12" bodyfile="kwin/src/core/output.cpp" bodystart="250" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_output_transform_1a1611c4095fb5a538a269510175a72839" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QSize</type>
        <definition>QSize KWin::OutputTransform::map</definition>
        <argsstring>(const QSize &amp;size) const</argsstring>
        <name>map</name>
        <qualifiedname>KWin::OutputTransform::map</qualifiedname>
        <param>
          <type>const QSize &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/output.h" line="78" column="11" bodyfile="kwin/src/core/output.cpp" bodystart="263" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_output_transform_1adbea9560eeca1bf4823b72553c16f49b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::OutputTransform::map</definition>
        <argsstring>(const QRectF &amp;rect, const QSizeF &amp;bounds) const</argsstring>
        <name>map</name>
        <qualifiedname>KWin::OutputTransform::map</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>bounds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Applies the output transform to the given <emphasis>rect</emphasis> within a buffer with dimensions <emphasis>bounds</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/output.h" line="83" column="12" bodyfile="kwin/src/core/output.cpp" bodystart="98" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_output_transform_1a48cfad8d1e1090d4405db47d835d58cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRect</type>
        <definition>QRect KWin::OutputTransform::map</definition>
        <argsstring>(const QRect &amp;rect, const QSize &amp;bounds) const</argsstring>
        <name>map</name>
        <qualifiedname>KWin::OutputTransform::map</qualifiedname>
        <param>
          <type>const QRect &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>const QSize &amp;</type>
          <declname>bounds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/output.h" line="84" column="11" bodyfile="kwin/src/core/output.cpp" bodystart="143" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_output_transform_1a0600fc8dcb681ff1a02ea11a80b0247a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::OutputTransform::map</definition>
        <argsstring>(const QPointF &amp;point, const QSizeF &amp;bounds) const</argsstring>
        <name>map</name>
        <qualifiedname>KWin::OutputTransform::map</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>bounds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Applies the output transform to the given <emphasis>point</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/output.h" line="89" column="13" bodyfile="kwin/src/core/output.cpp" bodystart="188" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_output_transform_1a2e99cbc35dcc0a3fc6790b04696ae59b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QPoint</type>
        <definition>QPoint KWin::OutputTransform::map</definition>
        <argsstring>(const QPoint &amp;point, const QSize &amp;bounds) const</argsstring>
        <name>map</name>
        <qualifiedname>KWin::OutputTransform::map</qualifiedname>
        <param>
          <type>const QPoint &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const QSize &amp;</type>
          <declname>bounds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/output.h" line="90" column="12" bodyfile="kwin/src/core/output.cpp" bodystart="219" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_output_transform_1a66628f55acb543eb2430a8e3693552ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_output_transform" kindref="compound">OutputTransform</ref></type>
        <definition>OutputTransform KWin::OutputTransform::combine</definition>
        <argsstring>(OutputTransform other) const</argsstring>
        <name>combine</name>
        <qualifiedname>KWin::OutputTransform::combine</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output_transform" kindref="compound">OutputTransform</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an output transform that is equivalent to applying this transform and <emphasis>other</emphasis> transform sequentially. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/output.h" line="96" column="21" bodyfile="kwin/src/core/output.cpp" bodystart="276" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_output_transform_1afb2b70d059f1d30022152e8cbc8c53b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QMatrix4x4</type>
        <definition>QMatrix4x4 KWin::OutputTransform::toMatrix</definition>
        <argsstring>() const</argsstring>
        <name>toMatrix</name>
        <qualifiedname>KWin::OutputTransform::toMatrix</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the matrix corresponding to this output transform. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/output.h" line="101" column="16" bodyfile="kwin/src/core/output.cpp" bodystart="308" bodyend="342"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="class_k_win_1_1_output_transform" kindref="compound">OutputTransform</ref> type is used to describe the transform applied to the output content. </para>
    </detaileddescription>
    <location file="kwin/src/core/output.h" line="37" column="1" bodyfile="kwin/src/core/output.h" bodystart="38" bodyend="105"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_output_transform_1a66628f55acb543eb2430a8e3693552ae" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>combine</name></member>
      <member refid="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7a99ce33d2be6b6fc0b62f75c3cf2e0d92" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>FlipX</name></member>
      <member refid="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7a3e8998b4b9987dd309ca4687e8c34703" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>FlipX180</name></member>
      <member refid="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7a37f341a971fe7820b815c75c39d24b31" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>FlipX270</name></member>
      <member refid="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7afc73240de152f39a98729840eec175eb" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>FlipX90</name></member>
      <member refid="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7a16cbb90948f3bcab5a9ea45724e0ca17" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>FlipY</name></member>
      <member refid="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7a8cdd419a0fa17732930874ec67e2f355" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>FlipY180</name></member>
      <member refid="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7ad52d9dff30c4fa4fc346a1f88d162264" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>FlipY270</name></member>
      <member refid="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7abbcaf45fa486aaeb326528fe6d310649" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>FlipY90</name></member>
      <member refid="class_k_win_1_1_output_transform_1ac1f8e22d9e81d27b2aa33c4248df2f38" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>inverted</name></member>
      <member refid="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>Kind</name></member>
      <member refid="class_k_win_1_1_output_transform_1a616973bbf05f161040b6cfbaec44f0a7" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>kind</name></member>
      <member refid="class_k_win_1_1_output_transform_1aae9177d5a747ad76caec9a6f4a722ae0" prot="private" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>m_kind</name></member>
      <member refid="class_k_win_1_1_output_transform_1a3ec20a32ff68a7be2eae68ebe42dd0ec" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>map</name></member>
      <member refid="class_k_win_1_1_output_transform_1a1611c4095fb5a538a269510175a72839" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>map</name></member>
      <member refid="class_k_win_1_1_output_transform_1adbea9560eeca1bf4823b72553c16f49b" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>map</name></member>
      <member refid="class_k_win_1_1_output_transform_1a48cfad8d1e1090d4405db47d835d58cd" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>map</name></member>
      <member refid="class_k_win_1_1_output_transform_1a0600fc8dcb681ff1a02ea11a80b0247a" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>map</name></member>
      <member refid="class_k_win_1_1_output_transform_1a2e99cbc35dcc0a3fc6790b04696ae59b" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>map</name></member>
      <member refid="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7a3973587033abbbbbaaddeb37d12f6700" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>Normal</name></member>
      <member refid="class_k_win_1_1_output_transform_1a044d651fc6e27e6381cc414695ae5c3e" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>operator&lt;=&gt;</name></member>
      <member refid="class_k_win_1_1_output_transform_1a79d2aa40bfd451a6390c9d5acca1fadc" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>OutputTransform</name></member>
      <member refid="class_k_win_1_1_output_transform_1ad8619b524cc2570e98df5b0ff500a149" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>OutputTransform</name></member>
      <member refid="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7a81855b733eee5226c36b414b06c62d0d" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>Rotate180</name></member>
      <member refid="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7a9516f7c7bb3dd6677e50c6bc4bb18722" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>Rotate270</name></member>
      <member refid="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7a1457e6800a3c966efe2e352858ce1814" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>Rotate90</name></member>
      <member refid="class_k_win_1_1_output_transform_1afb2b70d059f1d30022152e8cbc8c53b7" prot="public" virt="non-virtual"><scope>KWin::OutputTransform</scope><name>toMatrix</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
