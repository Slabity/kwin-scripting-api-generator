<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_data_device_interface" kind="class" language="C++" prot="public">
    <compoundname>KWin::DataDeviceInterface</compoundname>
    <basecompoundref refid="class_k_win_1_1_abstract_drop_handler" prot="public" virt="non-virtual">KWin::AbstractDropHandler</basecompoundref>
    <includes refid="datadevice_8h" local="no">datadevice.h</includes>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_k_win_1_1_data_device_interface_1ab527f30fdcdc19e97a97e27db1402c82" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class DataDeviceManagerInterfacePrivate</definition>
        <argsstring></argsstring>
        <name>DataDeviceManagerInterfacePrivate</name>
        <qualifiedname>KWin::DataDeviceInterface::DataDeviceManagerInterfacePrivate</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_data_device_manager_interface_private" kindref="compound">DataDeviceManagerInterfacePrivate</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/datadevice.h" line="115" column="18" bodyfile="kwin/src/wayland/datadevice.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_k_win_1_1_data_device_interface_1a9d47bf2337df119f1447651219d67149" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class DataDeviceInterfacePrivate</definition>
        <argsstring></argsstring>
        <name>DataDeviceInterfacePrivate</name>
        <qualifiedname>KWin::DataDeviceInterface::DataDeviceInterfacePrivate</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_data_device_interface_private" kindref="compound">DataDeviceInterfacePrivate</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/datadevice.h" line="118" column="18" bodyfile="kwin/src/wayland/datadevice.h" bodystart="118" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_data_device_interface_1ab8e74d1693508a0d0f6efd29294d9758" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_data_device_interface_private" kindref="compound">DataDeviceInterfacePrivate</ref> &gt;</type>
        <definition>std::unique_ptr&lt;DataDeviceInterfacePrivate&gt; KWin::DataDeviceInterface::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <qualifiedname>KWin::DataDeviceInterface::d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/datadevice.h" line="117" column="21" bodyfile="kwin/src/wayland/datadevice.h" bodystart="117" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_data_device_interface_1a96fa4424e9ac97d4d5de8f7ca87d9aaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>KWin::DataDeviceInterface::~DataDeviceInterface</definition>
        <argsstring>()</argsstring>
        <name>~DataDeviceInterface</name>
        <qualifiedname>KWin::DataDeviceInterface::~DataDeviceInterface</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/datadevice.h" line="83" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_data_device_interface_1a4fe18772a2f088c482a5b4de570c7894" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_seat_interface" kindref="compound">SeatInterface</ref> *</type>
        <definition>SeatInterface * KWin::DataDeviceInterface::seat</definition>
        <argsstring>() const</argsstring>
        <name>seat</name>
        <qualifiedname>KWin::DataDeviceInterface::seat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/datadevice.h" line="85" column="19" bodyfile="kwin/src/wayland/datadevice.cpp" bodystart="186" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_data_device_interface_1aa209a08c9b03b6ad970568150228f6dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_data_source_interface" kindref="compound">DataSourceInterface</ref> *</type>
        <definition>DataSourceInterface * KWin::DataDeviceInterface::selection</definition>
        <argsstring>() const</argsstring>
        <name>selection</name>
        <qualifiedname>KWin::DataDeviceInterface::selection</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/datadevice.h" line="87" column="25" bodyfile="kwin/src/wayland/datadevice.cpp" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_data_device_interface_1aa7628ede409cae10b83a422b59467cc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::DataDeviceInterface::sendSelection</definition>
        <argsstring>(KWin::AbstractDataSource *other)</argsstring>
        <name>sendSelection</name>
        <qualifiedname>KWin::DataDeviceInterface::sendSelection</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_abstract_data_source" kindref="compound">KWin::AbstractDataSource</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/datadevice.h" line="89" column="10" bodyfile="kwin/src/wayland/datadevice.cpp" bodystart="196" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_data_device_interface_1a580e204762122e30dcfe9442e38b257d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::DataDeviceInterface::drop</definition>
        <argsstring>() override</argsstring>
        <name>drop</name>
        <qualifiedname>KWin::DataDeviceInterface::drop</qualifiedname>
        <reimplements refid="class_k_win_1_1_abstract_drop_handler_1aab6f6209deb9a7666c9f34829570b315">drop</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The event is sent when a drag-and-drop operation is ended because the implicit grab is removed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/datadevice.h" line="93" column="10" bodyfile="kwin/src/wayland/datadevice.cpp" bodystart="202" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_data_device_interface_1adca3780c31168c7074df9a0bc804872f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::DataDeviceInterface::updateDragTarget</definition>
        <argsstring>(SurfaceInterface *surface, quint32 serial) override</argsstring>
        <name>updateDragTarget</name>
        <qualifiedname>KWin::DataDeviceInterface::updateDragTarget</qualifiedname>
        <reimplements refid="class_k_win_1_1_abstract_drop_handler_1a42fbb2e82824ddfd456cc97892cc43ac">updateDragTarget</reimplements>
        <param>
          <type><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>quint32</type>
          <declname>serial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Updates the <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> to which drag motion events are sent.</para>
<para>If a <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> was registered in this <ref refid="class_k_win_1_1_data_device_interface" kindref="compound">DataDeviceInterface</ref> for drag motion events, it will be sent a leave event.</para>
<para>If <computeroutput>surface</computeroutput> is not null it will be sent a drag enter event.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>surface</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> which gets motion events </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>The serial to be used for enter/leave </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/datadevice.h" line="105" column="10" bodyfile="kwin/src/wayland/datadevice.cpp" bodystart="255" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_data_device_interface_1af38ced668b79506e45bfdc72edc86ebf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wl_client *</type>
        <definition>wl_client * KWin::DataDeviceInterface::client</definition>
        <argsstring>()</argsstring>
        <name>client</name>
        <qualifiedname>KWin::DataDeviceInterface::client</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/datadevice.h" line="107" column="15" bodyfile="kwin/src/wayland/datadevice.cpp" bodystart="363" bodyend="366"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="signal">
      <memberdef kind="signal" id="class_k_win_1_1_data_device_interface_1abc3bece20409c1d5bc9502522d2a80d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::DataDeviceInterface::aboutToBeDestroyed</definition>
        <argsstring>()</argsstring>
        <name>aboutToBeDestroyed</name>
        <qualifiedname>KWin::DataDeviceInterface::aboutToBeDestroyed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/datadevice.h" line="110" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_data_device_interface_1a2d26807ea73e36dfdb064b07b557fd8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::DataDeviceInterface::dragStarted</definition>
        <argsstring>(AbstractDataSource *source, SurfaceInterface *originSurface, quint32 serial, DragAndDropIcon *dragIcon)</argsstring>
        <name>dragStarted</name>
        <qualifiedname>KWin::DataDeviceInterface::dragStarted</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_abstract_data_source" kindref="compound">AbstractDataSource</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
          <declname>originSurface</declname>
        </param>
        <param>
          <type>quint32</type>
          <declname>serial</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_drag_and_drop_icon" kindref="compound">DragAndDropIcon</ref> *</type>
          <declname>dragIcon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/datadevice.h" line="111" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_data_device_interface_1aeab9e45eda20d655de074be20aeebf7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::DataDeviceInterface::selectionChanged</definition>
        <argsstring>(KWin::DataSourceInterface *, quint32 serial)</argsstring>
        <name>selectionChanged</name>
        <qualifiedname>KWin::DataDeviceInterface::selectionChanged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_data_source_interface" kindref="compound">KWin::DataSourceInterface</ref> *</type>
        </param>
        <param>
          <type>quint32</type>
          <declname>serial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/datadevice.h" line="112" column="10"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_k_win_1_1_data_device_interface_1a48d422d3c87497b6c7d7427bfe5b0013" prot="private" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::DataDeviceInterface::DataDeviceInterface</definition>
        <argsstring>(SeatInterface *seat, wl_resource *resource)</argsstring>
        <name>DataDeviceInterface</name>
        <qualifiedname>KWin::DataDeviceInterface::DataDeviceInterface</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_seat_interface" kindref="compound">SeatInterface</ref> *</type>
          <declname>seat</declname>
        </param>
        <param>
          <type>wl_resource *</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/datadevice.h" line="116" column="14" bodyfile="kwin/src/wayland/datadevice.cpp" bodystart="176" bodyend="182"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="class_k_win_1_1_data_device_interface" kindref="compound">DataDeviceInterface</ref> allows clients to share data by copy-and-paste and drag-and-drop. </para>
    </briefdescription>
    <detaileddescription>
<para>The data device is per seat. Copy-and-paste use the selection functions.</para>
<para>Represents the Resource for the wl_data_device interface.</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_seat_interface" kindref="compound">SeatInterface</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_data_source_interface" kindref="compound">DataSourceInterface</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>KWin::AbstractDropHandler</label>
        <link refid="class_k_win_1_1_abstract_drop_handler"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::DataDeviceInterface</label>
        <link refid="class_k_win_1_1_data_device_interface"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>KWin::AbstractDropHandler</label>
        <link refid="class_k_win_1_1_abstract_drop_handler"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::DataDeviceInterface</label>
        <link refid="class_k_win_1_1_data_device_interface"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/wayland/datadevice.h" line="79" column="1" bodyfile="kwin/src/wayland/datadevice.h" bodystart="80" bodyend="119"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_data_device_interface_1abc3bece20409c1d5bc9502522d2a80d2" prot="public" virt="non-virtual"><scope>KWin::DataDeviceInterface</scope><name>aboutToBeDestroyed</name></member>
      <member refid="class_k_win_1_1_abstract_drop_handler_1a35562fbd6297e223669c9ac1903ea30a" prot="public" virt="non-virtual"><scope>KWin::DataDeviceInterface</scope><name>AbstractDropHandler</name></member>
      <member refid="class_k_win_1_1_data_device_interface_1af38ced668b79506e45bfdc72edc86ebf" prot="public" virt="non-virtual"><scope>KWin::DataDeviceInterface</scope><name>client</name></member>
      <member refid="class_k_win_1_1_data_device_interface_1ab8e74d1693508a0d0f6efd29294d9758" prot="private" virt="non-virtual"><scope>KWin::DataDeviceInterface</scope><name>d</name></member>
      <member refid="class_k_win_1_1_data_device_interface_1a48d422d3c87497b6c7d7427bfe5b0013" prot="private" virt="non-virtual"><scope>KWin::DataDeviceInterface</scope><name>DataDeviceInterface</name></member>
      <member refid="class_k_win_1_1_data_device_interface_1a9d47bf2337df119f1447651219d67149" prot="private" virt="non-virtual"><scope>KWin::DataDeviceInterface</scope><name>DataDeviceInterfacePrivate</name></member>
      <member refid="class_k_win_1_1_data_device_interface_1ab527f30fdcdc19e97a97e27db1402c82" prot="private" virt="non-virtual"><scope>KWin::DataDeviceInterface</scope><name>DataDeviceManagerInterfacePrivate</name></member>
      <member refid="class_k_win_1_1_data_device_interface_1a2d26807ea73e36dfdb064b07b557fd8e" prot="public" virt="non-virtual"><scope>KWin::DataDeviceInterface</scope><name>dragStarted</name></member>
      <member refid="class_k_win_1_1_data_device_interface_1a580e204762122e30dcfe9442e38b257d" prot="public" virt="virtual"><scope>KWin::DataDeviceInterface</scope><name>drop</name></member>
      <member refid="class_k_win_1_1_data_device_interface_1a4fe18772a2f088c482a5b4de570c7894" prot="public" virt="non-virtual"><scope>KWin::DataDeviceInterface</scope><name>seat</name></member>
      <member refid="class_k_win_1_1_data_device_interface_1aa209a08c9b03b6ad970568150228f6dc" prot="public" virt="non-virtual"><scope>KWin::DataDeviceInterface</scope><name>selection</name></member>
      <member refid="class_k_win_1_1_data_device_interface_1aeab9e45eda20d655de074be20aeebf7d" prot="public" virt="non-virtual"><scope>KWin::DataDeviceInterface</scope><name>selectionChanged</name></member>
      <member refid="class_k_win_1_1_data_device_interface_1aa7628ede409cae10b83a422b59467cc0" prot="public" virt="non-virtual"><scope>KWin::DataDeviceInterface</scope><name>sendSelection</name></member>
      <member refid="class_k_win_1_1_data_device_interface_1adca3780c31168c7074df9a0bc804872f" prot="public" virt="virtual"><scope>KWin::DataDeviceInterface</scope><name>updateDragTarget</name></member>
      <member refid="class_k_win_1_1_data_device_interface_1a96fa4424e9ac97d4d5de8f7ca87d9aaa" prot="public" virt="virtual"><scope>KWin::DataDeviceInterface</scope><name>~DataDeviceInterface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
