<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_g_l_platform" kind="class" language="C++" prot="public">
    <compoundname>KWin::GLPlatform</compoundname>
    <includes refid="glplatform_8h" local="no">glplatform.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_g_l_platform_1a8d78bda6789a690170c32e2b8270a10e" prot="private" static="no" mutable="no">
        <type>QByteArrayView</type>
        <definition>QByteArrayView KWin::GLPlatform::m_openglVersionString</definition>
        <argsstring></argsstring>
        <name>m_openglVersionString</name>
        <qualifiedname>KWin::GLPlatform::m_openglVersionString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="318" column="20" bodyfile="kwin/src/opengl/glplatform.h" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_g_l_platform_1a779355a12570d0b74aa73ef58c8bf559" prot="private" static="no" mutable="no">
        <type>QByteArrayView</type>
        <definition>QByteArrayView KWin::GLPlatform::m_glslVersionString</definition>
        <argsstring></argsstring>
        <name>m_glslVersionString</name>
        <qualifiedname>KWin::GLPlatform::m_glslVersionString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="319" column="20" bodyfile="kwin/src/opengl/glplatform.h" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_g_l_platform_1af5a26922329231e32c0d9e365b451740" prot="private" static="no" mutable="no">
        <type>QByteArrayView</type>
        <definition>QByteArrayView KWin::GLPlatform::m_chipset</definition>
        <argsstring></argsstring>
        <name>m_chipset</name>
        <qualifiedname>KWin::GLPlatform::m_chipset</qualifiedname>
        <initializer>= QByteArrayLiteral(&quot;Unknown&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="320" column="20" bodyfile="kwin/src/opengl/glplatform.h" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_g_l_platform_1aca44c6d70d34e98f9225bf27764aa413" prot="private" static="no" mutable="no">
        <type>QByteArrayView</type>
        <definition>QByteArrayView KWin::GLPlatform::m_rendererString</definition>
        <argsstring></argsstring>
        <name>m_rendererString</name>
        <qualifiedname>KWin::GLPlatform::m_rendererString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="321" column="20" bodyfile="kwin/src/opengl/glplatform.h" bodystart="321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_g_l_platform_1a7bc3aa16d1c0da5c77afb1cf113c1db0" prot="private" static="no" mutable="no">
        <type>QByteArrayView</type>
        <definition>QByteArrayView KWin::GLPlatform::m_vendorString</definition>
        <argsstring></argsstring>
        <name>m_vendorString</name>
        <qualifiedname>KWin::GLPlatform::m_vendorString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="322" column="20" bodyfile="kwin/src/opengl/glplatform.h" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_g_l_platform_1adf61badef434b85cddca33501770f994" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7a" kindref="member">Driver</ref></type>
        <definition>Driver KWin::GLPlatform::m_driver</definition>
        <argsstring></argsstring>
        <name>m_driver</name>
        <qualifiedname>KWin::GLPlatform::m_driver</qualifiedname>
        <initializer>= <ref refid="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aac93ac7169f05f39b89524c9911466c6b" kindref="member">Driver_Unknown</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="323" column="12" bodyfile="kwin/src/opengl/glplatform.h" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_g_l_platform_1a2d7c01afc236c160b5b350e2c8bbb159" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4" kindref="member">ChipClass</ref></type>
        <definition>ChipClass KWin::GLPlatform::m_chipClass</definition>
        <argsstring></argsstring>
        <name>m_chipClass</name>
        <qualifiedname>KWin::GLPlatform::m_chipClass</qualifiedname>
        <initializer>= <ref refid="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a47e9b326f8854de5d4e84f6c4eb3e098" kindref="member">UnknownChipClass</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="324" column="15" bodyfile="kwin/src/opengl/glplatform.h" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_g_l_platform_1a7d5a5170d775cea9f843a3f5012f842a" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_k_win_1aa1e33474a7077a13169f350a5949a79a" kindref="member">CompositingType</ref></type>
        <definition>CompositingType KWin::GLPlatform::m_recommendedCompositor</definition>
        <argsstring></argsstring>
        <name>m_recommendedCompositor</name>
        <qualifiedname>KWin::GLPlatform::m_recommendedCompositor</qualifiedname>
        <initializer>= <ref refid="namespace_k_win_1aa1e33474a7077a13169f350a5949a79aa9d91b030a3a42dc544de4de6f0d46b1d" kindref="member">OpenGLCompositing</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="325" column="21" bodyfile="kwin/src/opengl/glplatform.h" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_g_l_platform_1a48e91b0ec4e8704395f34f92a3bbb6b8" prot="private" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_version" kindref="compound">Version</ref></type>
        <definition>Version KWin::GLPlatform::m_openglVersion</definition>
        <argsstring></argsstring>
        <name>m_openglVersion</name>
        <qualifiedname>KWin::GLPlatform::m_openglVersion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="326" column="13" bodyfile="kwin/src/opengl/glplatform.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_g_l_platform_1a229360e049409c107845832416d68708" prot="private" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_version" kindref="compound">Version</ref></type>
        <definition>Version KWin::GLPlatform::m_glslVersion</definition>
        <argsstring></argsstring>
        <name>m_glslVersion</name>
        <qualifiedname>KWin::GLPlatform::m_glslVersion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="327" column="13" bodyfile="kwin/src/opengl/glplatform.h" bodystart="327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_g_l_platform_1ab03b1e5041807515fdf86880826e328d" prot="private" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_version" kindref="compound">Version</ref></type>
        <definition>Version KWin::GLPlatform::m_mesaVersion</definition>
        <argsstring></argsstring>
        <name>m_mesaVersion</name>
        <qualifiedname>KWin::GLPlatform::m_mesaVersion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="328" column="13" bodyfile="kwin/src/opengl/glplatform.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_g_l_platform_1a44346326db473c23f6dc319116121dc8" prot="private" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_version" kindref="compound">Version</ref></type>
        <definition>Version KWin::GLPlatform::m_driverVersion</definition>
        <argsstring></argsstring>
        <name>m_driverVersion</name>
        <qualifiedname>KWin::GLPlatform::m_driverVersion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="329" column="13" bodyfile="kwin/src/opengl/glplatform.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_g_l_platform_1a4558c4e468fadc0d98a232847c72ec05" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::GLPlatform::m_looseBinding</definition>
        <argsstring></argsstring>
        <name>m_looseBinding</name>
        <qualifiedname>KWin::GLPlatform::m_looseBinding</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="330" column="10" bodyfile="kwin/src/opengl/glplatform.h" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_g_l_platform_1a1302fb05fec179900dfffb7b351b7c09" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::GLPlatform::m_virtualMachine</definition>
        <argsstring></argsstring>
        <name>m_virtualMachine</name>
        <qualifiedname>KWin::GLPlatform::m_virtualMachine</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="331" column="10" bodyfile="kwin/src/opengl/glplatform.h" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_g_l_platform_1a02838ab54abfb9aa6177a9e8159c5972" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::GLPlatform::m_preferBufferSubData</definition>
        <argsstring></argsstring>
        <name>m_preferBufferSubData</name>
        <qualifiedname>KWin::GLPlatform::m_preferBufferSubData</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="332" column="10" bodyfile="kwin/src/opengl/glplatform.h" bodystart="332" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1a09552b5395f67d181a702c0a9918c4ef" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::GLPlatform::GLPlatform</definition>
        <argsstring>(QByteArrayView openglVersionString, QByteArrayView glslVersionString, QByteArrayView renderer, QByteArrayView vendor)</argsstring>
        <name>GLPlatform</name>
        <qualifiedname>KWin::GLPlatform::GLPlatform</qualifiedname>
        <param>
          <type>QByteArrayView</type>
          <declname>openglVersionString</declname>
        </param>
        <param>
          <type>QByteArrayView</type>
          <declname>glslVersionString</declname>
        </param>
        <param>
          <type>QByteArrayView</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type>QByteArrayView</type>
          <declname>vendor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="141" column="14" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="706" bodyend="991"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1af6f73a38a1536f1a0748560f7ba9a378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::GLPlatform::~GLPlatform</definition>
        <argsstring>()</argsstring>
        <name>~GLPlatform</name>
        <qualifiedname>KWin::GLPlatform::~GLPlatform</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="142" column="5" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="993" bodyend="995"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1a9fc9b35ddb25d1db77247257d2b5224c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_version" kindref="compound">Version</ref></type>
        <definition>Version KWin::GLPlatform::glVersion</definition>
        <argsstring>() const</argsstring>
        <name>glVersion</name>
        <qualifiedname>KWin::GLPlatform::glVersion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the OpenGL version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="147" column="13" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="997" bodyend="1000"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1a0d7fbebd7e6c651a41e3174a8298f169" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_version" kindref="compound">Version</ref></type>
        <definition>Version KWin::GLPlatform::glslVersion</definition>
        <argsstring>() const</argsstring>
        <name>glslVersion</name>
        <qualifiedname>KWin::GLPlatform::glslVersion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the GLSL version if the driver supports GLSL, and 0 otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="152" column="13" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1002" bodyend="1005"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1ae387421858a3e34327838b2a67e430b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_version" kindref="compound">Version</ref></type>
        <definition>Version KWin::GLPlatform::mesaVersion</definition>
        <argsstring>() const</argsstring>
        <name>mesaVersion</name>
        <qualifiedname>KWin::GLPlatform::mesaVersion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the Mesa version if the driver is a Mesa driver, and 0 otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="157" column="13" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1007" bodyend="1010"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1ad9eb742246279845dc62e83fd6a52e0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_version" kindref="compound">Version</ref></type>
        <definition>Version KWin::GLPlatform::driverVersion</definition>
        <argsstring>() const</argsstring>
        <name>driverVersion</name>
        <qualifiedname>KWin::GLPlatform::driverVersion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the driver version.</para>
<para>For Mesa drivers, this is the same as the Mesa version number. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="164" column="13" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1012" bodyend="1019"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1a09fee166ab613c6f306321e6b744346e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7a" kindref="member">Driver</ref></type>
        <definition>Driver KWin::GLPlatform::driver</definition>
        <argsstring>() const</argsstring>
        <name>driver</name>
        <qualifiedname>KWin::GLPlatform::driver</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the driver. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="169" column="12" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1021" bodyend="1024"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1ac3e725a4dda6969e2f327b95389ab958" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4" kindref="member">ChipClass</ref></type>
        <definition>ChipClass KWin::GLPlatform::chipClass</definition>
        <argsstring>() const</argsstring>
        <name>chipClass</name>
        <qualifiedname>KWin::GLPlatform::chipClass</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the chip class. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="174" column="15" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1026" bodyend="1029"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1aa9175d7552c2bd7a77abbd451028a350" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::GLPlatform::isMesaDriver</definition>
        <argsstring>() const</argsstring>
        <name>isMesaDriver</name>
        <qualifiedname>KWin::GLPlatform::isMesaDriver</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the driver is a Mesa driver, and false otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="179" column="10" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1031" bodyend="1034"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1af38ebaf4a23f45d3f82714a14bd746df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::GLPlatform::isRadeon</definition>
        <argsstring>() const</argsstring>
        <name>isRadeon</name>
        <qualifiedname>KWin::GLPlatform::isRadeon</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the GPU is a Radeon GPU, and false otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="184" column="10" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1036" bodyend="1039"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1a7f28ae805da15482402e78df2125233c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::GLPlatform::isNvidia</definition>
        <argsstring>() const</argsstring>
        <name>isNvidia</name>
        <qualifiedname>KWin::GLPlatform::isNvidia</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the GPU is an NVIDIA GPU, and false otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="189" column="10" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1041" bodyend="1044"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1ade6dbdfd7fe404cf1126163bcc2fd2aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::GLPlatform::isIntel</definition>
        <argsstring>() const</argsstring>
        <name>isIntel</name>
        <qualifiedname>KWin::GLPlatform::isIntel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the GPU is an Intel GPU, and false otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="194" column="10" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1046" bodyend="1049"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1a881a8a08dbbf386a9cad3807ffd85f60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::GLPlatform::isVirtualBox</definition>
        <argsstring>() const</argsstring>
        <name>isVirtualBox</name>
        <qualifiedname>KWin::GLPlatform::isVirtualBox</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the &quot;GPU&quot; is a VirtualBox GPU, and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
<simplesect kind="since"><para>4.10 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="200" column="10" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1051" bodyend="1054"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1ad6e45b28ef10b1920a5ba363e8d83feb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::GLPlatform::isVMware</definition>
        <argsstring>() const</argsstring>
        <name>isVMware</name>
        <qualifiedname>KWin::GLPlatform::isVMware</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the &quot;GPU&quot; is a VMWare GPU, and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
<simplesect kind="since"><para>4.10 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="206" column="10" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1056" bodyend="1059"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1a4e5f40e7b7478ee1247170e72c73fe68" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::GLPlatform::isVirtualMachine</definition>
        <argsstring>() const</argsstring>
        <name>isVirtualMachine</name>
        <qualifiedname>KWin::GLPlatform::isVirtualMachine</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the driver is known to be from a virtual machine. </para>
</simplesect>
<simplesect kind="since"><para>4.10 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="212" column="10" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1116" bodyend="1119"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1a026796199fa955ae62b15810e1646931" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::GLPlatform::isAdreno</definition>
        <argsstring>() const</argsstring>
        <name>isAdreno</name>
        <qualifiedname>KWin::GLPlatform::isAdreno</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the GPU is a Qualcomm Adreno GPU, and false otherwise </para>
</simplesect>
<simplesect kind="since"><para>5.8 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="218" column="10" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1066" bodyend="1069"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1a68d7554bec0cbf875036932a1b60ed7e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::GLPlatform::isVirgl</definition>
        <argsstring>() const</argsstring>
        <name>isVirgl</name>
        <qualifiedname>KWin::GLPlatform::isVirgl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the &quot;GPU&quot; is a virtio-gpu (Qemu/KVM) </para>
</simplesect>
<simplesect kind="since"><para>5.18 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="224" column="10" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1061" bodyend="1064"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1a82eb0d1e4bfc29315ee4173717792c2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::GLPlatform::isPanfrost</definition>
        <argsstring>() const</argsstring>
        <name>isPanfrost</name>
        <qualifiedname>KWin::GLPlatform::isPanfrost</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the &quot;GPU&quot; is a Panfrost Mali GPU </para>
</simplesect>
<simplesect kind="since"><para>5.21.5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="230" column="10" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1071" bodyend="1074"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1abe82414a27a33ae80f7dfa2081024992" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::GLPlatform::isLima</definition>
        <argsstring>() const</argsstring>
        <name>isLima</name>
        <qualifiedname>KWin::GLPlatform::isLima</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the GPU is a Mali GPU supported by the Lima driver (Mali 400, 450) </para>
</simplesect>
<simplesect kind="since"><para>5.27.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="236" column="10" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1076" bodyend="1079"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1a42b340cc548de2f3dbdb2590411661e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::GLPlatform::isVideoCore4</definition>
        <argsstring>() const</argsstring>
        <name>isVideoCore4</name>
        <qualifiedname>KWin::GLPlatform::isVideoCore4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the GPU is a Broadcom VideoCore IV (e.g. Raspberry Pi 0 to 3) </para>
</simplesect>
<simplesect kind="since"><para>5.27.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="242" column="10" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1081" bodyend="1084"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1a2b4011e5c808975bc20caff7605bee0e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::GLPlatform::isVideoCore3D</definition>
        <argsstring>() const</argsstring>
        <name>isVideoCore3D</name>
        <qualifiedname>KWin::GLPlatform::isVideoCore3D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the GPU is a Broadcom VideoCore 3D (e.g. Raspberry Pi 4, 400) </para>
</simplesect>
<simplesect kind="since"><para>5.27.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="248" column="10" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1086" bodyend="1089"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1a461f7442153ad2705eb0ac7dc8aebeee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArrayView</type>
        <definition>QByteArrayView KWin::GLPlatform::glVersionString</definition>
        <argsstring>() const</argsstring>
        <name>glVersionString</name>
        <qualifiedname>KWin::GLPlatform::glVersionString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the GL_VERSION string as provided by the driver. </para>
</simplesect>
<simplesect kind="since"><para>4.9 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="254" column="20" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1101" bodyend="1104"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1aea7833e9b0f7757b7b7984cdb4d327d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArrayView</type>
        <definition>QByteArrayView KWin::GLPlatform::glRendererString</definition>
        <argsstring>() const</argsstring>
        <name>glRendererString</name>
        <qualifiedname>KWin::GLPlatform::glRendererString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the GL_RENDERER string as provided by the driver. </para>
</simplesect>
<simplesect kind="since"><para>4.9 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="259" column="20" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1091" bodyend="1094"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1a5db9f39e7d31b9930514ba5aac075a69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArrayView</type>
        <definition>QByteArrayView KWin::GLPlatform::glVendorString</definition>
        <argsstring>() const</argsstring>
        <name>glVendorString</name>
        <qualifiedname>KWin::GLPlatform::glVendorString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the GL_VENDOR string as provided by the driver. </para>
</simplesect>
<simplesect kind="since"><para>4.9 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="264" column="20" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1096" bodyend="1099"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1ac6eb0d6a526238282bf37a98cd65a83b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArrayView</type>
        <definition>QByteArrayView KWin::GLPlatform::glShadingLanguageVersionString</definition>
        <argsstring>() const</argsstring>
        <name>glShadingLanguageVersionString</name>
        <qualifiedname>KWin::GLPlatform::glShadingLanguageVersionString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the GL_SHADING_LANGUAGE_VERSION string as provided by the driver. If the driver does not support the OpenGL Shading Language a null bytearray is returned. </para>
</simplesect>
<simplesect kind="since"><para>4.9 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="270" column="20" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1106" bodyend="1109"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1aa0112eb7da7ae00bf629e2df48211edd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::GLPlatform::isLooseBinding</definition>
        <argsstring>() const</argsstring>
        <name>isLooseBinding</name>
        <qualifiedname>KWin::GLPlatform::isLooseBinding</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether the driver supports loose texture binding. </para>
</simplesect>
<simplesect kind="since"><para>4.9 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="275" column="10" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1111" bodyend="1114"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1a4f291f401a712eb5446b7ea1e8c6cbab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1aa1e33474a7077a13169f350a5949a79a" kindref="member">CompositingType</ref></type>
        <definition>CompositingType KWin::GLPlatform::recommendedCompositor</definition>
        <argsstring>() const</argsstring>
        <name>recommendedCompositor</name>
        <qualifiedname>KWin::GLPlatform::recommendedCompositor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The <ref refid="namespace_k_win_1aa1e33474a7077a13169f350a5949a79a" kindref="member">CompositingType</ref> recommended by the driver. </para>
</simplesect>
<simplesect kind="since"><para>4.10 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="281" column="21" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1121" bodyend="1124"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1af5a58f5986f30fc8a2e4c1770b46eaf4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::GLPlatform::preferBufferSubData</definition>
        <argsstring>() const</argsstring>
        <name>preferBufferSubData</name>
        <qualifiedname>KWin::GLPlatform::preferBufferSubData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if glMapBufferRange() is likely to perform worse than glBufferSubData() when updating an unused range of a buffer object, and false otherwise.</para>
<para><simplesect kind="since"><para>4.11 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="289" column="10" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="1126" bodyend="1129"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1a5a30d3f3b95664231b3c82916d78924e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::GLPlatform::driverToString</definition>
        <argsstring>(Driver driver)</argsstring>
        <name>driverToString</name>
        <qualifiedname>KWin::GLPlatform::driverToString</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7a" kindref="member">Driver</ref></type>
          <declname>driver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a human readable form for the <computeroutput>driver</computeroutput> as a QString. </para>
</simplesect>
<simplesect kind="since"><para>4.9 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_g_l_platform_1a09fee166ab613c6f306321e6b744346e" kindref="member">driver</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="296" column="20" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="524" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1a89df9239a9c8c9f7e4818b3b4910c45f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArray</type>
        <definition>QByteArray KWin::GLPlatform::driverToString8</definition>
        <argsstring>(Driver driver)</argsstring>
        <name>driverToString8</name>
        <qualifiedname>KWin::GLPlatform::driverToString8</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7a" kindref="member">Driver</ref></type>
          <declname>driver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a human readable form for the <computeroutput>driver</computeroutput> as a QByteArray. </para>
</simplesect>
<simplesect kind="since"><para>5.5 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_g_l_platform_1a09fee166ab613c6f306321e6b744346e" kindref="member">driver</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="302" column="23" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="528" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1a5a26c2eb2a7f70c820c9fad462f64575" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::GLPlatform::chipClassToString</definition>
        <argsstring>(ChipClass chipClass)</argsstring>
        <name>chipClassToString</name>
        <qualifiedname>KWin::GLPlatform::chipClassToString</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4" kindref="member">ChipClass</ref></type>
          <declname>chipClass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a human readable form for the <computeroutput>chipClass</computeroutput> as a QString. </para>
</simplesect>
<simplesect kind="since"><para>4.9 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_g_l_platform_1ac3e725a4dda6969e2f327b95389ab958" kindref="member">chipClass</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="309" column="20" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="581" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_platform_1ad61258d662781d3b39d54557d399256b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArray</type>
        <definition>QByteArray KWin::GLPlatform::chipClassToString8</definition>
        <argsstring>(ChipClass chipClass)</argsstring>
        <name>chipClassToString8</name>
        <qualifiedname>KWin::GLPlatform::chipClassToString8</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4" kindref="member">ChipClass</ref></type>
          <declname>chipClass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a human readable form for the <computeroutput>chipClass</computeroutput> as a QByteArray. </para>
</simplesect>
<simplesect kind="since"><para>5.5 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_g_l_platform_1ac3e725a4dda6969e2f327b95389ab958" kindref="member">chipClass</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="315" column="23" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="585" bodyend="704"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="kwin/src/opengl/glplatform.h" line="138" column="1" bodyfile="kwin/src/opengl/glplatform.h" bodystart="139" bodyend="333"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_g_l_platform_1ac3e725a4dda6969e2f327b95389ab958" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>chipClass</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a5a26c2eb2a7f70c820c9fad462f64575" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>chipClassToString</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1ad61258d662781d3b39d54557d399256b" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>chipClassToString8</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a09fee166ab613c6f306321e6b744346e" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>driver</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a5a30d3f3b95664231b3c82916d78924e" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>driverToString</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a89df9239a9c8c9f7e4818b3b4910c45f" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>driverToString8</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1ad9eb742246279845dc62e83fd6a52e0a" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>driverVersion</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a09552b5395f67d181a702c0a9918c4ef" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>GLPlatform</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1aea7833e9b0f7757b7b7984cdb4d327d3" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>glRendererString</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1ac6eb0d6a526238282bf37a98cd65a83b" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>glShadingLanguageVersionString</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a0d7fbebd7e6c651a41e3174a8298f169" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>glslVersion</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a5db9f39e7d31b9930514ba5aac075a69" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>glVendorString</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a9fc9b35ddb25d1db77247257d2b5224c" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>glVersion</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a461f7442153ad2705eb0ac7dc8aebeee" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>glVersionString</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a026796199fa955ae62b15810e1646931" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>isAdreno</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1ade6dbdfd7fe404cf1126163bcc2fd2aa" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>isIntel</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1abe82414a27a33ae80f7dfa2081024992" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>isLima</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1aa0112eb7da7ae00bf629e2df48211edd" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>isLooseBinding</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1aa9175d7552c2bd7a77abbd451028a350" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>isMesaDriver</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a7f28ae805da15482402e78df2125233c" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>isNvidia</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a82eb0d1e4bfc29315ee4173717792c2c" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>isPanfrost</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1af38ebaf4a23f45d3f82714a14bd746df" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>isRadeon</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a2b4011e5c808975bc20caff7605bee0e" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>isVideoCore3D</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a42b340cc548de2f3dbdb2590411661e3" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>isVideoCore4</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a68d7554bec0cbf875036932a1b60ed7e" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>isVirgl</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a881a8a08dbbf386a9cad3807ffd85f60" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>isVirtualBox</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a4e5f40e7b7478ee1247170e72c73fe68" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>isVirtualMachine</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1ad6e45b28ef10b1920a5ba363e8d83feb" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>isVMware</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a2d7c01afc236c160b5b350e2c8bbb159" prot="private" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>m_chipClass</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1af5a26922329231e32c0d9e365b451740" prot="private" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>m_chipset</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1adf61badef434b85cddca33501770f994" prot="private" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>m_driver</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a44346326db473c23f6dc319116121dc8" prot="private" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>m_driverVersion</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a229360e049409c107845832416d68708" prot="private" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>m_glslVersion</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a779355a12570d0b74aa73ef58c8bf559" prot="private" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>m_glslVersionString</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a4558c4e468fadc0d98a232847c72ec05" prot="private" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>m_looseBinding</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1ab03b1e5041807515fdf86880826e328d" prot="private" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>m_mesaVersion</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a48e91b0ec4e8704395f34f92a3bbb6b8" prot="private" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>m_openglVersion</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a8d78bda6789a690170c32e2b8270a10e" prot="private" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>m_openglVersionString</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a02838ab54abfb9aa6177a9e8159c5972" prot="private" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>m_preferBufferSubData</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a7d5a5170d775cea9f843a3f5012f842a" prot="private" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>m_recommendedCompositor</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1aca44c6d70d34e98f9225bf27764aa413" prot="private" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>m_rendererString</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a7bc3aa16d1c0da5c77afb1cf113c1db0" prot="private" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>m_vendorString</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a1302fb05fec179900dfffb7b351b7c09" prot="private" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>m_virtualMachine</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1ae387421858a3e34327838b2a67e430b6" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>mesaVersion</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1af5a58f5986f30fc8a2e4c1770b46eaf4" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>preferBufferSubData</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1a4f291f401a712eb5446b7ea1e8c6cbab" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>recommendedCompositor</name></member>
      <member refid="class_k_win_1_1_g_l_platform_1af6f73a38a1536f1a0748560f7ba9a378" prot="public" virt="non-virtual"><scope>KWin::GLPlatform</scope><name>~GLPlatform</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
