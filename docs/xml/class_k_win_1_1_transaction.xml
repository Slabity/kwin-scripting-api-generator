<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_transaction" kind="class" language="C++" prot="public">
    <compoundname>KWin::Transaction</compoundname>
    <includes refid="transaction_8h" local="no">transaction.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_transaction_1af2048c717ba7297907401afa82479bef" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="struct_k_win_1_1_transaction_entry" kindref="compound">TransactionEntry</ref> &gt;</type>
        <definition>std::vector&lt;TransactionEntry&gt; KWin::Transaction::m_entries</definition>
        <argsstring></argsstring>
        <name>m_entries</name>
        <qualifiedname>KWin::Transaction::m_entries</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/transaction.h" line="117" column="17" bodyfile="kwin/src/wayland/transaction.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_transaction_1afaf363d90ed73a985105835c9b30d5b8" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int KWin::Transaction::m_locks</definition>
        <argsstring></argsstring>
        <name>m_locks</name>
        <qualifiedname>KWin::Transaction::m_locks</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/transaction.h" line="118" column="9" bodyfile="kwin/src/wayland/transaction.h" bodystart="118" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_transaction_1a7ce14c1c70c4759facb63ffb532f4401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::Transaction::Transaction</definition>
        <argsstring>()</argsstring>
        <name>Transaction</name>
        <qualifiedname>KWin::Transaction::Transaction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/transaction.h" line="63" column="5" bodyfile="kwin/src/wayland/transaction.cpp" bodystart="99" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_transaction_1a464787a51de1b3901a386634d369ef06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Transaction::lock</definition>
        <argsstring>()</argsstring>
        <name>lock</name>
        <qualifiedname>KWin::Transaction::lock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Locks the transaction. While the transaction is locked, it cannot be applied. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/transaction.h" line="68" column="10" bodyfile="kwin/src/wayland/transaction.cpp" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_transaction_1a528866362d08ee5acbcecd3ccecdaa1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Transaction::unlock</definition>
        <argsstring>()</argsstring>
        <name>unlock</name>
        <qualifiedname>KWin::Transaction::unlock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unlocks the transaction. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/transaction.h" line="73" column="10" bodyfile="kwin/src/wayland/transaction.cpp" bodystart="108" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_transaction_1a4264ad6ba6fe55cd64dcb73f2220bd51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Transaction::isReady</definition>
        <argsstring>() const</argsstring>
        <name>isReady</name>
        <qualifiedname>KWin::Transaction::isReady</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if this transaction can be applied, i.e. all its dependencies are resolved; otherwise returns <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/transaction.h" line="79" column="10" bodyfile="kwin/src/wayland/transaction.cpp" bodystart="117" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_transaction_1aa4f2f18482ab3967af88f25b4a4b636b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_transaction" kindref="compound">Transaction</ref> *</type>
        <definition>Transaction * KWin::Transaction::next</definition>
        <argsstring>(SurfaceInterface *surface) const</argsstring>
        <name>next</name>
        <qualifiedname>KWin::Transaction::next</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
          <declname>surface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the next transaction for the specified <emphasis>surface</emphasis>. If this transaction does not affect the given surface, <computeroutput>null</computeroutput> is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/transaction.h" line="85" column="17" bodyfile="kwin/src/wayland/transaction.cpp" bodystart="128" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_transaction_1ac3dd9402505b5da49e3067c2b0f5a402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Transaction::add</definition>
        <argsstring>(SurfaceInterface *surface)</argsstring>
        <name>add</name>
        <qualifiedname>KWin::Transaction::add</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
          <declname>surface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds the specified <emphasis>surface</emphasis> to this transaction. The transaction will move the pending surface state and apply it when it&apos;s possible. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/transaction.h" line="91" column="10" bodyfile="kwin/src/wayland/transaction.cpp" bodystart="138" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_transaction_1a4c47e894637fd3244cf89f71292a5ab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Transaction::amend</definition>
        <argsstring>(SurfaceInterface *surface, std::function&lt; void(SurfaceState *state)&gt; mutator)</argsstring>
        <name>amend</name>
        <qualifiedname>KWin::Transaction::amend</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="struct_k_win_1_1_surface_state" kindref="compound">SurfaceState</ref> *state)&gt;</type>
          <declname>mutator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Amends already committed state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/transaction.h" line="96" column="10" bodyfile="kwin/src/wayland/transaction.cpp" bodystart="162" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_transaction_1af9a08e6e4635bf81526911e5d5252bc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Transaction::merge</definition>
        <argsstring>(Transaction *other)</argsstring>
        <name>merge</name>
        <qualifiedname>KWin::Transaction::merge</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_transaction" kindref="compound">Transaction</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Merge the given <emphasis>other</emphasis> transaction with this transaction. The other transaction must be uncommitted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/transaction.h" line="102" column="10" bodyfile="kwin/src/wayland/transaction.cpp" bodystart="171" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_transaction_1a301bd3fe70031f0ff8ccce30341177d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Transaction::commit</definition>
        <argsstring>()</argsstring>
        <name>commit</name>
        <qualifiedname>KWin::Transaction::commit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Commits the transaction. Note that the transaction may be applied later if there are previous transactions that have not been applied yet or if the transaction is locked.</para>
<para>The <ref refid="class_k_win_1_1_transaction_1a301bd3fe70031f0ff8ccce30341177d3" kindref="member">commit()</ref> function takes the ownership of the transaction. The transaction will be destroyed when it is applied. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/transaction.h" line="111" column="10" bodyfile="kwin/src/wayland/transaction.cpp" bodystart="266" bodyend="305"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_k_win_1_1_transaction_1a27c6f762d295379f9ca0229302f8a63d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Transaction::apply</definition>
        <argsstring>()</argsstring>
        <name>apply</name>
        <qualifiedname>KWin::Transaction::apply</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/transaction.h" line="114" column="10" bodyfile="kwin/src/wayland/transaction.cpp" bodystart="207" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_transaction_1a6b052b1e1ee6d799eb3c6af2b2c601fb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Transaction::tryApply</definition>
        <argsstring>()</argsstring>
        <name>tryApply</name>
        <qualifiedname>KWin::Transaction::tryApply</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/transaction.h" line="115" column="10" bodyfile="kwin/src/wayland/transaction.cpp" bodystart="257" bodyend="264"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="class_k_win_1_1_transaction" kindref="compound">Transaction</ref> type provides a way to commit the pending state of one or more surfaces atomically. </para>
    </detaileddescription>
    <location file="kwin/src/wayland/transaction.h" line="60" column="1" bodyfile="kwin/src/wayland/transaction.h" bodystart="61" bodyend="119"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_transaction_1ac3dd9402505b5da49e3067c2b0f5a402" prot="public" virt="non-virtual"><scope>KWin::Transaction</scope><name>add</name></member>
      <member refid="class_k_win_1_1_transaction_1a4c47e894637fd3244cf89f71292a5ab7" prot="public" virt="non-virtual"><scope>KWin::Transaction</scope><name>amend</name></member>
      <member refid="class_k_win_1_1_transaction_1a27c6f762d295379f9ca0229302f8a63d" prot="private" virt="non-virtual"><scope>KWin::Transaction</scope><name>apply</name></member>
      <member refid="class_k_win_1_1_transaction_1a301bd3fe70031f0ff8ccce30341177d3" prot="public" virt="non-virtual"><scope>KWin::Transaction</scope><name>commit</name></member>
      <member refid="class_k_win_1_1_transaction_1a4264ad6ba6fe55cd64dcb73f2220bd51" prot="public" virt="non-virtual"><scope>KWin::Transaction</scope><name>isReady</name></member>
      <member refid="class_k_win_1_1_transaction_1a464787a51de1b3901a386634d369ef06" prot="public" virt="non-virtual"><scope>KWin::Transaction</scope><name>lock</name></member>
      <member refid="class_k_win_1_1_transaction_1af2048c717ba7297907401afa82479bef" prot="private" virt="non-virtual"><scope>KWin::Transaction</scope><name>m_entries</name></member>
      <member refid="class_k_win_1_1_transaction_1afaf363d90ed73a985105835c9b30d5b8" prot="private" virt="non-virtual"><scope>KWin::Transaction</scope><name>m_locks</name></member>
      <member refid="class_k_win_1_1_transaction_1af9a08e6e4635bf81526911e5d5252bc8" prot="public" virt="non-virtual"><scope>KWin::Transaction</scope><name>merge</name></member>
      <member refid="class_k_win_1_1_transaction_1aa4f2f18482ab3967af88f25b4a4b636b" prot="public" virt="non-virtual"><scope>KWin::Transaction</scope><name>next</name></member>
      <member refid="class_k_win_1_1_transaction_1a7ce14c1c70c4759facb63ffb532f4401" prot="public" virt="non-virtual"><scope>KWin::Transaction</scope><name>Transaction</name></member>
      <member refid="class_k_win_1_1_transaction_1a6b052b1e1ee6d799eb3c6af2b2c601fb" prot="private" virt="non-virtual"><scope>KWin::Transaction</scope><name>tryApply</name></member>
      <member refid="class_k_win_1_1_transaction_1a528866362d08ee5acbcecd3ccecdaa1f" prot="public" virt="non-virtual"><scope>KWin::Transaction</scope><name>unlock</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
