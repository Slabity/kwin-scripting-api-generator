<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_scripted_effect_loader" kind="class" language="C++" prot="public">
    <compoundname>KWin::ScriptedEffectLoader</compoundname>
    <basecompoundref refid="class_k_win_1_1_abstract_effect_loader" prot="public" virt="non-virtual">KWin::AbstractEffectLoader</basecompoundref>
    <includes refid="effectloader_8h" local="no">effectloader.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_scripted_effect_loader_1ab81d91dc42bc63110f4f2eb7290f7c83" prot="private" static="no" mutable="no">
        <type>QStringList</type>
        <definition>QStringList KWin::ScriptedEffectLoader::m_loadedEffects</definition>
        <argsstring></argsstring>
        <name>m_loadedEffects</name>
        <qualifiedname>KWin::ScriptedEffectLoader::m_loadedEffects</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="296" column="17" bodyfile="kwin/src/effect/effectloader.h" bodystart="296" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_scripted_effect_loader_1a3799149bb47d04177083f993825c3c97" prot="private" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_effect_load_queue" kindref="compound">EffectLoadQueue</ref>&lt; <ref refid="class_k_win_1_1_scripted_effect_loader" kindref="compound">ScriptedEffectLoader</ref>, KPluginMetaData &gt; *</type>
        <definition>EffectLoadQueue&lt;ScriptedEffectLoader, KPluginMetaData&gt;* KWin::ScriptedEffectLoader::m_queue</definition>
        <argsstring></argsstring>
        <name>m_queue</name>
        <qualifiedname>KWin::ScriptedEffectLoader::m_queue</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="297" column="21" bodyfile="kwin/src/effect/effectloader.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_scripted_effect_loader_1a4886337c720a2d37a8b542263ef3c94c" prot="private" static="no" mutable="no">
        <type>QMetaObject::Connection</type>
        <definition>QMetaObject::Connection KWin::ScriptedEffectLoader::m_queryConnection</definition>
        <argsstring></argsstring>
        <name>m_queryConnection</name>
        <qualifiedname>KWin::ScriptedEffectLoader::m_queryConnection</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="298" column="29" bodyfile="kwin/src/effect/effectloader.h" bodystart="298" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_scripted_effect_loader_1a80dc6ec665c96495abfd3b3983837faa" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::ScriptedEffectLoader::ScriptedEffectLoader</definition>
        <argsstring>(QObject *parent=nullptr)</argsstring>
        <name>ScriptedEffectLoader</name>
        <qualifiedname>KWin::ScriptedEffectLoader::ScriptedEffectLoader</qualifiedname>
        <param>
          <type>QObject *</type>
          <declname>parent</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="278" column="14" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="74" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_scripted_effect_loader_1ab958f2ae56b2564dcc3a5cbc049eda3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::ScriptedEffectLoader::~ScriptedEffectLoader</definition>
        <argsstring>() override</argsstring>
        <name>~ScriptedEffectLoader</name>
        <qualifiedname>KWin::ScriptedEffectLoader::~ScriptedEffectLoader</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="279" column="5" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="80" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_scripted_effect_loader_1a14bfc49779e1271bd14285162301d155" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::ScriptedEffectLoader::hasEffect</definition>
        <argsstring>(const QString &amp;name) const override</argsstring>
        <name>hasEffect</name>
        <qualifiedname>KWin::ScriptedEffectLoader::hasEffect</qualifiedname>
        <reimplements refid="class_k_win_1_1_abstract_effect_loader_1a60477aa2be67a8391bb9d45d2cbb7fb9">hasEffect</reimplements>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Whether this <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> Loader can load the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> with the given <computeroutput>name</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> Loader determines whether it knows or can find an <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> called <computeroutput>name</computeroutput>, and thus whether it can attempt to load the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> to look for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool <computeroutput>true</computeroutput> if the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> Loader knows this effect, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="281" column="10" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_scripted_effect_loader_1a4e367f59d1bae48b787a95494a87bcbb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::ScriptedEffectLoader::isEffectSupported</definition>
        <argsstring>(const QString &amp;name) const override</argsstring>
        <name>isEffectSupported</name>
        <qualifiedname>KWin::ScriptedEffectLoader::isEffectSupported</qualifiedname>
        <reimplements refid="class_k_win_1_1_abstract_effect_loader_1af4d8106dd1ba61715e7388583af8cdad">isEffectSupported</reimplements>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Whether the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> with the given <computeroutput>name</computeroutput> is supported by the compositing backend. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool <computeroutput>true</computeroutput> if it is supported, <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="282" column="10" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="89" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_scripted_effect_loader_1ac1c7da03a4cb17fd81148a378734f587" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QStringList</type>
        <definition>QStringList KWin::ScriptedEffectLoader::listOfKnownEffects</definition>
        <argsstring>() const override</argsstring>
        <name>listOfKnownEffects</name>
        <qualifiedname>KWin::ScriptedEffectLoader::listOfKnownEffects</qualifiedname>
        <reimplements refid="class_k_win_1_1_abstract_effect_loader_1a37acdd75a09f5b80cd72ab9df2858b81">listOfKnownEffects</reimplements>
        <briefdescription>
<para>All the Effects this loader knows of. </para>
        </briefdescription>
        <detaileddescription>
<para>The implementation should re-query its store whenever this method is invoked. It&apos;s possible that the store of effects changed (e.g. a new one got installed)</para>
<para><simplesect kind="return"><para>QStringList The internal names of the known Effects </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="283" column="17" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="98" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_scripted_effect_loader_1a5a08dbe16b75903b259417fbdac3c0ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::ScriptedEffectLoader::clear</definition>
        <argsstring>() override</argsstring>
        <name>clear</name>
        <qualifiedname>KWin::ScriptedEffectLoader::clear</qualifiedname>
        <reimplements refid="class_k_win_1_1_abstract_effect_loader_1a7fe32dee9950b830dbb552d59d79b6ff">clear</reimplements>
        <briefdescription>
<para>Clears the load queue, that is all scheduled Effects are discarded from loading. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="285" column="10" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="252" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_scripted_effect_loader_1a5cacc8e5513db640e4656422b95478f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::ScriptedEffectLoader::queryAndLoadAll</definition>
        <argsstring>() override</argsstring>
        <name>queryAndLoadAll</name>
        <qualifiedname>KWin::ScriptedEffectLoader::queryAndLoadAll</qualifiedname>
        <reimplements refid="class_k_win_1_1_abstract_effect_loader_1a5ee594e63dee4af44d512d0a262a5ff1">queryAndLoadAll</reimplements>
        <briefdescription>
<para>The <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> Loader should query its store for all available effects and try to load them. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> Loader is supposed to perform this operation in a highly async way. If there is IO which needs to be performed this should be done in a background thread and a queue should be used to load the effects. The loader should make sure to not load more than one <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> in one event cycle. Loading the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> has to be performed in the <ref refid="class_k_win_1_1_compositor" kindref="compound">Compositor</ref> thread and thus blocks the <ref refid="class_k_win_1_1_compositor" kindref="compound">Compositor</ref>. Therefore after loading one <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> all events should get processed first, so that the <ref refid="class_k_win_1_1_compositor" kindref="compound">Compositor</ref> can perform a painting pass if needed. To simplify this operation one can use the <ref refid="class_k_win_1_1_effect_load_queue" kindref="compound">EffectLoadQueue</ref>. This requires to add another loadEffect method with the custom loader specific type to refer to an <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> and LoadEffectFlags.</para>
<para>The LoadEffectFlags have to be determined by querying the configuration with <ref refid="class_k_win_1_1_abstract_effect_loader_1ac47832e9c8313b3c7fa6b1b5bda554e7" kindref="member">readConfig()</ref>. If the Load flag is set the loading can proceed and all the checks from <ref refid="class_k_win_1_1_scripted_effect_loader_1a351e0f5b5f7a07c944118f9c4a17f5d1" kindref="member">loadEffect(const QString &amp;)</ref> have to be applied. In addition if the CheckDefaultFunction flag is set and the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> provides such a method, it should be queried to determine whether the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> is enabled by default. If such a method returns <computeroutput>false</computeroutput> the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> should not get loaded. If the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> does not provide a way to query whether it&apos;s enabled by default at runtime the flag can get ignored.</para>
<para>If the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> loaded successfully the signal <ref refid="class_k_win_1_1_abstract_effect_loader_1a4a431e11259b47ecb9ba3346b8012e63" kindref="member">effectLoaded(KWin::Effect*,const QString&amp;)</ref> must be emitted.</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_scripted_effect_loader_1a351e0f5b5f7a07c944118f9c4a17f5d1" kindref="member">loadEffect(const QString &amp;)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_abstract_effect_loader_1a4a431e11259b47ecb9ba3346b8012e63" kindref="member">effectLoaded(KWin::Effect*,const QString&amp;)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="286" column="10" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="206" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_scripted_effect_loader_1a351e0f5b5f7a07c944118f9c4a17f5d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::ScriptedEffectLoader::loadEffect</definition>
        <argsstring>(const QString &amp;name) override</argsstring>
        <name>loadEffect</name>
        <qualifiedname>KWin::ScriptedEffectLoader::loadEffect</qualifiedname>
        <reimplements refid="class_k_win_1_1_abstract_effect_loader_1ab2ad0c661413834127d8ba00f7517f76">loadEffect</reimplements>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Synchronous loading of the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> with the given <computeroutput>name</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Loads the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> without checking any configuration value or any enabled by default function provided by the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref>.</para>
<para>The loader is expected to apply the following checks: If the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> is already loaded, the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> should not get loaded again. Thus the loader is expected to track which Effects it has loaded, and which of those have been destroyed. The loader should check whether the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> is supported. If the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> indicates it is not supported, it should not get loaded.</para>
<para>If the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> loaded successfully the signal <ref refid="class_k_win_1_1_abstract_effect_loader_1a4a431e11259b47ecb9ba3346b8012e63" kindref="member">effectLoaded(KWin::Effect*,const QString&amp;)</ref> must be emitted. Otherwise the user of the loader is not able to get the loaded <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref>. It&apos;s not returning the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> as <ref refid="class_k_win_1_1_scripted_effect_loader_1a5cacc8e5513db640e4656422b95478f8" kindref="member">queryAndLoadAll()</ref> is working async and thus the users of the loader are expected to be prepared for async loading.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal name of the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> which should be loaded </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool <computeroutput>true</computeroutput> if the effect could be loaded, <computeroutput>false</computeroutput> in error case </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_scripted_effect_loader_1a5cacc8e5513db640e4656422b95478f8" kindref="member">queryAndLoadAll()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_abstract_effect_loader_1a4a431e11259b47ecb9ba3346b8012e63" kindref="member">effectLoaded(KWin::Effect*,const QString&amp;)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="287" column="10" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="108" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_scripted_effect_loader_1a0e6803a908653f48bbbee498ffe7252f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::ScriptedEffectLoader::loadEffect</definition>
        <argsstring>(const KPluginMetaData &amp;effect, LoadEffectFlags flags)</argsstring>
        <name>loadEffect</name>
        <qualifiedname>KWin::ScriptedEffectLoader::loadEffect</qualifiedname>
        <param>
          <type>const KPluginMetaData &amp;</type>
          <declname>effect</declname>
        </param>
        <param>
          <type>LoadEffectFlags</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="288" column="10" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="117" bodyend="141"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_k_win_1_1_scripted_effect_loader_1a6e36b56c6e1694599fa9c43b8f56972a" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; KPluginMetaData &gt;</type>
        <definition>QList&lt; KPluginMetaData &gt; KWin::ScriptedEffectLoader::findAllEffects</definition>
        <argsstring>() const</argsstring>
        <name>findAllEffects</name>
        <qualifiedname>KWin::ScriptedEffectLoader::findAllEffects</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="291" column="11" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="229" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_scripted_effect_loader_1a4443122182ce6e721bb785c86c8c5dc0" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>KPluginMetaData</type>
        <definition>KPluginMetaData KWin::ScriptedEffectLoader::findEffect</definition>
        <argsstring>(const QString &amp;name) const</argsstring>
        <name>findEffect</name>
        <qualifiedname>KWin::ScriptedEffectLoader::findEffect</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="292" column="21" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="235" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_scripted_effect_loader_1a3fc6e3eb296c7291ca89b13e027ae31e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::ScriptedEffectLoader::loadJavascriptEffect</definition>
        <argsstring>(const KPluginMetaData &amp;effect)</argsstring>
        <name>loadJavascriptEffect</name>
        <qualifiedname>KWin::ScriptedEffectLoader::loadJavascriptEffect</qualifiedname>
        <param>
          <type>const KPluginMetaData &amp;</type>
          <declname>effect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="293" column="10" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="143" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_scripted_effect_loader_1ae82401402db9c362902068d8859265ac" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::ScriptedEffectLoader::loadDeclarativeEffect</definition>
        <argsstring>(const KPluginMetaData &amp;effect)</argsstring>
        <name>loadDeclarativeEffect</name>
        <qualifiedname>KWin::ScriptedEffectLoader::loadDeclarativeEffect</qualifiedname>
        <param>
          <type>const KPluginMetaData &amp;</type>
          <declname>effect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="294" column="10" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="166" bodyend="204"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Can load scripted Effects. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>KWin::AbstractEffectLoader</label>
        <link refid="class_k_win_1_1_abstract_effect_loader"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::ScriptedEffectLoader</label>
        <link refid="class_k_win_1_1_scripted_effect_loader"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>KWin::AbstractEffectLoader</label>
        <link refid="class_k_win_1_1_abstract_effect_loader"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::ScriptedEffectLoader</label>
        <link refid="class_k_win_1_1_scripted_effect_loader"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/effect/effectloader.h" line="274" column="1" bodyfile="kwin/src/effect/effectloader.h" bodystart="275" bodyend="299"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_abstract_effect_loader_1abce33027093225995ad61aa665aeb45e" prot="protected" virt="non-virtual"><scope>KWin::ScriptedEffectLoader</scope><name>AbstractEffectLoader</name></member>
      <member refid="class_k_win_1_1_scripted_effect_loader_1a5a08dbe16b75903b259417fbdac3c0ca" prot="public" virt="virtual"><scope>KWin::ScriptedEffectLoader</scope><name>clear</name></member>
      <member refid="class_k_win_1_1_abstract_effect_loader_1a4a431e11259b47ecb9ba3346b8012e63" prot="public" virt="non-virtual"><scope>KWin::ScriptedEffectLoader</scope><name>effectLoaded</name></member>
      <member refid="class_k_win_1_1_scripted_effect_loader_1a6e36b56c6e1694599fa9c43b8f56972a" prot="private" virt="non-virtual"><scope>KWin::ScriptedEffectLoader</scope><name>findAllEffects</name></member>
      <member refid="class_k_win_1_1_scripted_effect_loader_1a4443122182ce6e721bb785c86c8c5dc0" prot="private" virt="non-virtual"><scope>KWin::ScriptedEffectLoader</scope><name>findEffect</name></member>
      <member refid="class_k_win_1_1_scripted_effect_loader_1a14bfc49779e1271bd14285162301d155" prot="public" virt="virtual"><scope>KWin::ScriptedEffectLoader</scope><name>hasEffect</name></member>
      <member refid="class_k_win_1_1_scripted_effect_loader_1a4e367f59d1bae48b787a95494a87bcbb" prot="public" virt="virtual"><scope>KWin::ScriptedEffectLoader</scope><name>isEffectSupported</name></member>
      <member refid="class_k_win_1_1_scripted_effect_loader_1ac1c7da03a4cb17fd81148a378734f587" prot="public" virt="virtual"><scope>KWin::ScriptedEffectLoader</scope><name>listOfKnownEffects</name></member>
      <member refid="class_k_win_1_1_scripted_effect_loader_1ae82401402db9c362902068d8859265ac" prot="private" virt="non-virtual"><scope>KWin::ScriptedEffectLoader</scope><name>loadDeclarativeEffect</name></member>
      <member refid="class_k_win_1_1_scripted_effect_loader_1a351e0f5b5f7a07c944118f9c4a17f5d1" prot="public" virt="virtual"><scope>KWin::ScriptedEffectLoader</scope><name>loadEffect</name></member>
      <member refid="class_k_win_1_1_scripted_effect_loader_1a0e6803a908653f48bbbee498ffe7252f" prot="public" virt="non-virtual"><scope>KWin::ScriptedEffectLoader</scope><name>loadEffect</name></member>
      <member refid="class_k_win_1_1_scripted_effect_loader_1a3fc6e3eb296c7291ca89b13e027ae31e" prot="private" virt="non-virtual"><scope>KWin::ScriptedEffectLoader</scope><name>loadJavascriptEffect</name></member>
      <member refid="class_k_win_1_1_scripted_effect_loader_1ab81d91dc42bc63110f4f2eb7290f7c83" prot="private" virt="non-virtual"><scope>KWin::ScriptedEffectLoader</scope><name>m_loadedEffects</name></member>
      <member refid="class_k_win_1_1_scripted_effect_loader_1a4886337c720a2d37a8b542263ef3c94c" prot="private" virt="non-virtual"><scope>KWin::ScriptedEffectLoader</scope><name>m_queryConnection</name></member>
      <member refid="class_k_win_1_1_scripted_effect_loader_1a3799149bb47d04177083f993825c3c97" prot="private" virt="non-virtual"><scope>KWin::ScriptedEffectLoader</scope><name>m_queue</name></member>
      <member refid="class_k_win_1_1_scripted_effect_loader_1a5cacc8e5513db640e4656422b95478f8" prot="public" virt="virtual"><scope>KWin::ScriptedEffectLoader</scope><name>queryAndLoadAll</name></member>
      <member refid="class_k_win_1_1_abstract_effect_loader_1ac47832e9c8313b3c7fa6b1b5bda554e7" prot="protected" virt="non-virtual"><scope>KWin::ScriptedEffectLoader</scope><name>readConfig</name></member>
      <member refid="class_k_win_1_1_scripted_effect_loader_1a80dc6ec665c96495abfd3b3983837faa" prot="public" virt="non-virtual"><scope>KWin::ScriptedEffectLoader</scope><name>ScriptedEffectLoader</name></member>
      <member refid="class_k_win_1_1_abstract_effect_loader_1ae8c28c5fb1964a05d46e3fac76016ab1" prot="public" virt="virtual"><scope>KWin::ScriptedEffectLoader</scope><name>setConfig</name></member>
      <member refid="class_k_win_1_1_abstract_effect_loader_1a4bb5209f35491c73801410b4da6f3933" prot="public" virt="non-virtual"><scope>KWin::ScriptedEffectLoader</scope><name>~AbstractEffectLoader</name></member>
      <member refid="class_k_win_1_1_scripted_effect_loader_1ab958f2ae56b2564dcc3a5cbc049eda3a" prot="public" virt="non-virtual"><scope>KWin::ScriptedEffectLoader</scope><name>~ScriptedEffectLoader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
