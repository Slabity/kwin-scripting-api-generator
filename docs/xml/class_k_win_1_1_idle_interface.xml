<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_idle_interface" kind="class" language="C++" prot="public">
    <compoundname>KWin::IdleInterface</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QObject</basecompoundref>
    <includes refid="idle_8h" local="no">idle.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_idle_interface_1ae39d2176eaeb630f22ff7f9f0206744a" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_idle_interface_private" kindref="compound">IdleInterfacePrivate</ref> &gt;</type>
        <definition>std::unique_ptr&lt;IdleInterfacePrivate&gt; KWin::IdleInterface::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <qualifiedname>KWin::IdleInterface::d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/idle.h" line="46" column="21" bodyfile="kwin/src/wayland/idle.h" bodystart="46" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_idle_interface_1a6d6d25cfc0a7668929171d815f5ffeaf" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::IdleInterface::IdleInterface</definition>
        <argsstring>(Display *display, QObject *parent=nullptr)</argsstring>
        <name>IdleInterface</name>
        <qualifiedname>KWin::IdleInterface::IdleInterface</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_display" kindref="compound">Display</ref> *</type>
          <declname>display</declname>
        </param>
        <param>
          <type>QObject *</type>
          <declname>parent</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/idle.h" line="42" column="14" bodyfile="kwin/src/wayland/idle.cpp" bodystart="37" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_idle_interface_1a0daf9cad79da0b6e1cb1d182bc5350e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::IdleInterface::~IdleInterface</definition>
        <argsstring>() override</argsstring>
        <name>~IdleInterface</name>
        <qualifiedname>KWin::IdleInterface::~IdleInterface</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/idle.h" line="43" column="5"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Global representing the org_kde_kwin_idle interface. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="class_k_win_1_1_idle_interface" kindref="compound">IdleInterface</ref> allows to register callbacks which are invoked if there has not been any user activity (no input) for a specified time span on a seat.</para>
<para>A client can bind an idle timeout for a <ref refid="class_k_win_1_1_seat_interface" kindref="compound">SeatInterface</ref> and through that register an idle timeout. The complete interaction is handled internally, thus the API user only needs to create the <ref refid="class_k_win_1_1_idle_interface" kindref="compound">IdleInterface</ref> in order to provide this feature.</para>
<para>This interface is useful for clients as it allows them to perform power management, chat applications might want to set to away after no user input for some time, etc.</para>
<para>Of course this exposes the global input usage to all clients. Normally clients don&apos;t know whether the input devices are used, only if their surfaces have focus. With this interface it is possible to notice that there are input events. A server should consider this to decide whether it wants to provide this feature! </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>KWin::IdleInterface</label>
        <link refid="class_k_win_1_1_idle_interface"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>KWin::IdleInterface</label>
        <link refid="class_k_win_1_1_idle_interface"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/wayland/idle.h" line="37" column="1" bodyfile="kwin/src/wayland/idle.h" bodystart="38" bodyend="47"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_idle_interface_1ae39d2176eaeb630f22ff7f9f0206744a" prot="private" virt="non-virtual"><scope>KWin::IdleInterface</scope><name>d</name></member>
      <member refid="class_k_win_1_1_idle_interface_1a6d6d25cfc0a7668929171d815f5ffeaf" prot="public" virt="non-virtual"><scope>KWin::IdleInterface</scope><name>IdleInterface</name></member>
      <member refid="class_k_win_1_1_idle_interface_1a0daf9cad79da0b6e1cb1d182bc5350e2" prot="public" virt="non-virtual"><scope>KWin::IdleInterface</scope><name>~IdleInterface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
