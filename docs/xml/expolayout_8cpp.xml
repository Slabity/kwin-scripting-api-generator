<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="expolayout_8cpp" kind="file" language="C++">
    <compoundname>expolayout.cpp</compoundname>
    <includes refid="expolayout_8h" local="yes">expolayout.h</includes>
    <includes local="no">QQmlProperty</includes>
    <includes local="no">cmath</includes>
    <includes local="no">deque</includes>
    <includes local="no">tuple</includes>
    <includes local="yes">moc_expolayout.cpp</includes>
    <incdepgraph>
      <node id="1">
        <label>kwin/src/plugins/private/expolayout.cpp</label>
        <link refid="expolayout_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>expolayout.h</label>
        <link refid="expolayout_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>QList</label>
      </node>
      <node id="4">
        <label>QObject</label>
      </node>
      <node id="8">
        <label>QQmlProperty</label>
      </node>
      <node id="5">
        <label>QQuickItem</label>
      </node>
      <node id="6">
        <label>QRect</label>
      </node>
      <node id="9">
        <label>cmath</label>
      </node>
      <node id="10">
        <label>deque</label>
      </node>
      <node id="12">
        <label>moc_expolayout.cpp</label>
      </node>
      <node id="7">
        <label>optional</label>
      </node>
      <node id="11">
        <label>tuple</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="expolayout_8cpp_1a3210b3fef652b41e6ba7e27ce6bad98e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void moveToFit</definition>
        <argsstring>(QRectF &amp;rect, const QRectF &amp;area)</argsstring>
        <name>moveToFit</name>
        <param>
          <type>QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>area</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/private/expolayout.cpp" line="364" column="13" bodyfile="kwin/src/plugins/private/expolayout.cpp" bodystart="364" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="expolayout_8cpp_1a6b513348fa8440e1a4d9b4883e1a1866" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool isDominated</definition>
        <argsstring>(size_t candidate, size_t alternativeSmall, size_t alternativeBig, size_t length, std::function&lt; qreal(size_t, size_t)&gt; leastWeightCandidate)</argsstring>
        <name>isDominated</name>
        <param>
          <type>size_t</type>
          <declname>candidate</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>alternativeSmall</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>alternativeBig</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>std::function&lt; qreal(size_t, size_t)&gt;</type>
          <declname>leastWeightCandidate</declname>
        </param>
        <briefdescription>
<para>Check if. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>candidate</parametername>
</parameternamelist>
<parameterdescription>
<para>can be ignored in the future because either</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alternativeSmall</parametername>
</parameternamelist>
<parameterdescription>
<para>or</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alternativeBig</parametername>
</parameternamelist>
<parameterdescription>
<para>is at least as good as</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>candidate</parametername>
</parameternamelist>
<parameterdescription>
<para>for layerStart.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
More formally, returns false if and only if there exists a k with<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alternativeBig</parametername>
</parameternamelist>
<parameterdescription>
<para>&lt; k &lt;=</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>such that leastWeightCandidate(</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>candidate</parametername>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>) &lt; leastWeightCandidate(</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alternativeSmall</parametername>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>) and leastWeightCandidate(</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>candidate</parametername>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>) &lt; leastWeightCandidate( </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alternativeBig</parametername>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The input must satisfy<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alternativeSmall</parametername>
</parameternamelist>
<parameterdescription>
<para>&lt;</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>candidate</parametername>
</parameternamelist>
<parameterdescription>
<para>&lt;</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alternativeBig</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
The run time of the algorithm is O(log length).</para>
<para>The Bridge algorithm from Hirschberg, Daniel S., and Lawrence L. Larmore. &quot;The least weight subsequence problem.&quot; SIAM Journal on Computing 16.4 (1987): 628-638</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the sequence. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>leastWeightCandidate</parametername>
</parameternamelist>
<parameterdescription>
<para>leastWeightCandidate(i, j) is the weight of arranging the first j windows, if we use the optimal arrangement of the first i windows, and the last layest consists of windows [i, j) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/private/expolayout.cpp" line="476" column="13" bodyfile="kwin/src/plugins/private/expolayout.cpp" bodystart="476" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="expolayout_8cpp_1adf99995bc614708dc316f50442e9fcc9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; size_t &gt;</type>
        <definition>static QList&lt; size_t &gt; getLayerStartPos</definition>
        <argsstring>(qreal maxWidth, qreal idealWidth, const size_t length, const QList&lt; qreal &gt; &amp;cumWidths)</argsstring>
        <name>getLayerStartPos</name>
        <param>
          <type>qreal</type>
          <declname>maxWidth</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>idealWidth</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const QList&lt; qreal &gt; &amp;</type>
          <declname>cumWidths</declname>
        </param>
        <briefdescription>
<para>Returns the layerStartPos for a good packing of the windows using the Basic algorithm from Hirschberg, Daniel S., and Lawrence L. Larmore. &quot;The least weight subsequence problem.&quot; SIAM Journal on Computing 16.4 (1987): 628-638. </para>
        </briefdescription>
        <detaileddescription>
<para>The Basic algorithm solves the Least Weight Subsequence Problem (LWS) for concave weight functions.</para>
<para>The LWS problem on the interval [a,b] is defined as follows: Given a weight function weight(i,j) for all i,j in [a,b], find a subsequence of [a,b], i.e. a sequence of strictly monotonically increasing indices i_0 &lt; i_2 &lt; ... &lt; i_t, such that the total weight, sum_{k=1}^t weight(i_{k-1}, i_k), is minimized.</para>
<para>A weight function is concave if for all i &lt;= j &lt; k &lt;= l, the following holds: weight(i,k) + weight(j,l) &lt;= weight(i,l) + weight(j,k)</para>
<para>The run time of the algorithm is O(n log n).</para>
<para>Modified from the version in the paper to fix some bugs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idealWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The target width of each layer. All widths of windows <emphasis>MUST</emphasis> be smaller than idealWidth. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the sequence. Solves the LWS problem on the interval [0, length]. (n in paper) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cumWidths</parametername>
</parameternamelist>
<parameterdescription>
<para>cumWidths[i] is the sum of widths of windows 0, 1, ..., i - 1</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>QList&lt;size_t&gt; The subsequence (starting at 0 and ending at length) that minimizes the total weight. The ith element is the index of the first window in layer i. Always starts with 0 and ends with ids.size(). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/private/expolayout.cpp" line="558" column="14" bodyfile="kwin/src/plugins/private/expolayout.cpp" bodystart="558" bodyend="648"/>
      </memberdef>
      <memberdef kind="function" id="expolayout_8cpp_1aea3bec40d25611d6a7baf137e3f2a455" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QMarginsF</type>
        <definition>static QMarginsF reflect</definition>
        <argsstring>(const QMarginsF &amp;margins)</argsstring>
        <name>reflect</name>
        <param>
          <type>const QMarginsF &amp;</type>
          <declname>margins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/private/expolayout.cpp" line="651" column="18" bodyfile="kwin/src/plugins/private/expolayout.cpp" bodystart="651" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="expolayout_8cpp_1adc1f3aaec1fe82bd5f417dfd25e2c964" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>static QRectF reflect</definition>
        <argsstring>(const QRectF &amp;rect)</argsstring>
        <name>reflect</name>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/private/expolayout.cpp" line="655" column="15" bodyfile="kwin/src/plugins/private/expolayout.cpp" bodystart="655" bodyend="658"/>
      </memberdef>
      <memberdef kind="function" id="expolayout_8cpp_1a9ce8c3324b50c61c160e0ec98ea4c0ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QPointF</type>
        <definition>static QPointF reflect</definition>
        <argsstring>(const QPointF &amp;point)</argsstring>
        <name>reflect</name>
        <param>
          <type>const QPointF &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/private/expolayout.cpp" line="659" column="16" bodyfile="kwin/src/plugins/private/expolayout.cpp" bodystart="659" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="expolayout_8cpp_1a2f61fa36cb7405dbb683984e57d72ea2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>QList&lt; T &gt;</type>
        <definition>static QList&lt; T &gt; reflect</definition>
        <argsstring>(const QList&lt; T &gt; &amp;v)</argsstring>
        <name>reflect</name>
        <param>
          <type>const QList&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/private/expolayout.cpp" line="664" column="14" bodyfile="kwin/src/plugins/private/expolayout.cpp" bodystart="664" bodyend="672"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2021<sp/>Vlad<sp/>Zahorodnii<sp/>&lt;vlad.zahorodnii@kde.org&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2024<sp/>Yifan<sp/>Zhu<sp/>&lt;fanzhuyifan@gmail.com&gt;</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="expolayout_8h" kindref="compound">expolayout.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QQmlProperty&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;deque&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="class_expo_cell_1a5d25c50cf55bd77a2503b070d81b255c" refkind="member"><highlight class="normal"><ref refid="class_expo_cell_1a5d25c50cf55bd77a2503b070d81b255c" kindref="member">ExpoCell::ExpoCell</ref>(QQuickItem<sp/>*parent)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>QQuickItem(parent)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ExpoCell::visibleChanged,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_contentItem)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_contentItem-&gt;setVisible(isVisible());</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>only<sp/>works<sp/>for<sp/>a<sp/>static<sp/>visual<sp/>tree<sp/>hierarchy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Make<sp/>it<sp/>work<sp/>with<sp/>reparenting<sp/>or<sp/>warn<sp/>if<sp/>any<sp/>parent<sp/>in<sp/>the<sp/>tree<sp/>changes?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>QQuickItem<sp/>*ancestor<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ancestor)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connect(ancestor,<sp/>&amp;QQuickItem::xChanged,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ExpoCell::polish);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connect(ancestor,<sp/>&amp;QQuickItem::yChanged,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ExpoCell::polish);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connect(ancestor,<sp/>&amp;QQuickItem::widthChanged,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ExpoCell::polish);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connect(ancestor,<sp/>&amp;QQuickItem::heightChanged,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ExpoCell::polish);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ancestor<sp/>=<sp/>ancestor-&gt;parentItem();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="class_expo_cell_1a5b78c281884bca7e11d46672a1757408" refkind="member"><highlight class="normal"><ref refid="class_expo_cell_1a5b78c281884bca7e11d46672a1757408" kindref="member">ExpoCell::~ExpoCell</ref>()</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_expo_cell_1ad20fe9dc5ae66a56e399fadf07d83b01" kindref="member">setLayout</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="class_expo_cell_1a51afacc8c35b8daf5d7d194d0fe99f2d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_expo_cell_1a51afacc8c35b8daf5d7d194d0fe99f2d" kindref="member">ExpoCell::componentComplete</ref>()</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>QQuickItem::componentComplete();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>QQmlProperty<sp/>xProperty(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Kirigami.ScenePosition.x&quot;</highlight><highlight class="normal">,<sp/>qmlContext(</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>xProperty.connectNotifySignal(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>SLOT(updateContentItemGeometry()));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>QQmlProperty<sp/>yProperty(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Kirigami.ScenePosition.y&quot;</highlight><highlight class="normal">,<sp/>qmlContext(</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>yProperty.connectNotifySignal(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>SLOT(updateContentItemGeometry()));</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>updateContentItemGeometry();</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="class_expo_cell_1a7758e1a8f6a2090b40fb8440086e7a28" refkind="member"><highlight class="normal"><ref refid="class_expo_layout" kindref="compound">ExpoLayout</ref><sp/>*<ref refid="class_expo_cell_1a8610b87662ff880ba292472d24bc5cd3" kindref="member">ExpoCell::layout</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="55"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_layout;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="class_expo_cell_1ad20fe9dc5ae66a56e399fadf07d83b01" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_expo_cell_1ad20fe9dc5ae66a56e399fadf07d83b01" kindref="member">ExpoCell::setLayout</ref>(<ref refid="class_expo_layout" kindref="compound">ExpoLayout</ref><sp/>*<ref refid="class_expo_cell_1a8610b87662ff880ba292472d24bc5cd3" kindref="member">layout</ref>)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_layout<sp/>==<sp/><ref refid="class_expo_cell_1a8610b87662ff880ba292472d24bc5cd3" kindref="member">layout</ref>)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_layout)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_layout-&gt;removeCell(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>m_layout<sp/>=<sp/><ref refid="class_expo_cell_1a8610b87662ff880ba292472d24bc5cd3" kindref="member">layout</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_layout<sp/>&amp;&amp;<sp/>m_shouldLayout)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_layout-&gt;addCell(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>updateContentItemGeometry();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_expo_cell_1af44ed90055c9f94b7fe1c3b8f28c6794" kindref="member">layoutChanged</ref>();</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="class_expo_cell_1adbe653620d4da3a7d52ecfd561e82455" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_expo_cell_1a16643a3f394f5f2cde01b72923d12d3d" kindref="member">ExpoCell::shouldLayout</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="76"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_shouldLayout;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="class_expo_cell_1a8ee5c2580bea375c0cee65fdb7fab642" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_expo_cell_1a8ee5c2580bea375c0cee65fdb7fab642" kindref="member">ExpoCell::setShouldLayout</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_expo_cell_1a16643a3f394f5f2cde01b72923d12d3d" kindref="member">shouldLayout</ref>)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_expo_cell_1a16643a3f394f5f2cde01b72923d12d3d" kindref="member">shouldLayout</ref><sp/>==<sp/>m_shouldLayout)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>m_shouldLayout<sp/>=<sp/><ref refid="class_expo_cell_1a16643a3f394f5f2cde01b72923d12d3d" kindref="member">shouldLayout</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_layout)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_shouldLayout)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_layout-&gt;addCell(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_layout-&gt;removeCell(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_expo_cell_1abc1dca5b0f1b72f0b497b8d20289298a" kindref="member">shouldLayoutChanged</ref>();</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="class_expo_cell_1ab0edbf61266b281d6c9dbf90c1e3922b" refkind="member"><highlight class="normal">QQuickItem<sp/>*<ref refid="class_expo_cell_1afaed69528192885b21a84cf4a80ad0c8" kindref="member">ExpoCell::contentItem</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="100"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_contentItem;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="class_expo_cell_1aa0ebed2336405d41a8475a349cb72d92" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_expo_cell_1aa0ebed2336405d41a8475a349cb72d92" kindref="member">ExpoCell::setContentItem</ref>(QQuickItem<sp/>*item)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_contentItem<sp/>==<sp/>item)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_contentItem)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disconnect(m_contentItem,<sp/>&amp;QQuickItem::parentChanged,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ExpoCell::updateContentItemGeometry);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>m_contentItem<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(m_contentItem,<sp/>&amp;QQuickItem::parentChanged,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ExpoCell::updateContentItemGeometry);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_contentItem)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_contentItem-&gt;setVisible(isVisible());</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>updateContentItemGeometry();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_expo_cell_1adad3879d4ec32bf3216a1d13d5d65996" kindref="member">contentItemChanged</ref>();</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="class_expo_cell_1a756de365f700d08801e0d2a834921fcd" refkind="member"><highlight class="normal">qreal<sp/><ref refid="class_expo_cell_1a67ee86e6e67f0f3b4dc852a7101747af" kindref="member">ExpoCell::partialActivationFactor</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="127"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_partialActivationFactor;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="class_expo_cell_1a49747dc43ab90715851fb9ec8ba86a82" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_expo_cell_1a49747dc43ab90715851fb9ec8ba86a82" kindref="member">ExpoCell::setPartialActivationFactor</ref>(qreal<sp/>factor)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_partialActivationFactor<sp/>==<sp/>factor)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>m_partialActivationFactor<sp/>=<sp/>factor;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>this<sp/>is<sp/>an<sp/>animation<sp/>controller<sp/>we<sp/>want<sp/>it<sp/>to<sp/>have<sp/>immediate<sp/>effect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>updateContentItemGeometry();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_expo_cell_1acd1cc9ce7a95e6df8910328e46763fce" kindref="member">partialActivationFactorChanged</ref>();</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ExpoCell::updateLayout()</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_layout)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_layout-&gt;polish();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="class_expo_cell_1a2ed83f58e1b7e561fda6bb09f06463a6" refkind="member"><highlight class="normal">qreal<sp/><ref refid="class_expo_cell_1ae306be61a5a1b88a04afb319e12402bc" kindref="member">ExpoCell::offsetX</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="152"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_offsetX;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="class_expo_cell_1acc2ce5fdc4490f1379e2f5e8f4852e98" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_expo_cell_1acc2ce5fdc4490f1379e2f5e8f4852e98" kindref="member">ExpoCell::setOffsetX</ref>(qreal<sp/>x)</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_offsetX<sp/>!=<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offsetX<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateContentItemGeometry();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_expo_cell_1a5c07bf0c1965c4bbf7b0aaa17c1bb96a" kindref="member">offsetXChanged</ref>();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="class_expo_cell_1aecd05e890ee4169cd083077a2a844be4" refkind="member"><highlight class="normal">qreal<sp/><ref refid="class_expo_cell_1a6632a4834e14661b5fd4439af6874ee9" kindref="member">ExpoCell::offsetY</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="166"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_offsetY;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="class_expo_cell_1a81ccc2fd0220ecee914055310f5aed06" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_expo_cell_1a81ccc2fd0220ecee914055310f5aed06" kindref="member">ExpoCell::setOffsetY</ref>(qreal<sp/>y)</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_offsetY<sp/>!=<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offsetY<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateContentItemGeometry();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_expo_cell_1a7abc5f18090b34ecfacb6b28fee1dbc1" kindref="member">offsetYChanged</ref>();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="class_expo_cell_1ac9ee432a88639c717d9f5a7b273d5ce2" refkind="member"><highlight class="normal">qreal<sp/><ref refid="class_expo_cell_1aee4b44cb9dd1aaf91da28917566bd0a4" kindref="member">ExpoCell::naturalX</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="180"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_naturalX;</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="class_expo_cell_1a6cfa45d3d18691942f9d6ae769de5552" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_expo_cell_1a6cfa45d3d18691942f9d6ae769de5552" kindref="member">ExpoCell::setNaturalX</ref>(qreal<sp/>x)</highlight></codeline>
<codeline lineno="185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_naturalX<sp/>!=<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_naturalX<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateLayout();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_expo_cell_1a22bfd6cbca7bcf7ba942cff0f85af163" kindref="member">naturalXChanged</ref>();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="class_expo_cell_1ab1278b078b1d321c147699e69dc1141a" refkind="member"><highlight class="normal">qreal<sp/><ref refid="class_expo_cell_1a0ee10ddc92e2cbac2cb313716ab1af53" kindref="member">ExpoCell::naturalY</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="194"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_naturalY;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="class_expo_cell_1ae73a963a375109bf676916b78a584f2a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_expo_cell_1ae73a963a375109bf676916b78a584f2a" kindref="member">ExpoCell::setNaturalY</ref>(qreal<sp/>y)</highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_naturalY<sp/>!=<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_naturalY<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateLayout();</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_expo_cell_1a64d3b6752f96f97a17565bc89cc85e70" kindref="member">naturalYChanged</ref>();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="class_expo_cell_1ab7772572ede600d4075643c5fe457b4d" refkind="member"><highlight class="normal">qreal<sp/><ref refid="class_expo_cell_1aadeaffb4c771c5ac8790ea96c1ec69ce" kindref="member">ExpoCell::naturalWidth</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="208"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_naturalWidth;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="class_expo_cell_1a44683f6c4c20f97bd10591db422f5c69" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_expo_cell_1a44683f6c4c20f97bd10591db422f5c69" kindref="member">ExpoCell::setNaturalWidth</ref>(qreal<sp/>width)</highlight></codeline>
<codeline lineno="213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_naturalWidth<sp/>!=<sp/>width)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_naturalWidth<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateLayout();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_expo_cell_1a738f26aa3a531cd2d08b6b38a2875a3a" kindref="member">naturalWidthChanged</ref>();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="class_expo_cell_1a8e4fcf9b920364f8651c9a420484ed52" refkind="member"><highlight class="normal">qreal<sp/><ref refid="class_expo_cell_1ad09505e5f9c6bba997e25079fbaa6884" kindref="member">ExpoCell::naturalHeight</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="222"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_naturalHeight;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="class_expo_cell_1a6ce74af7363fdc20f42693f878fdeb21" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_expo_cell_1a6ce74af7363fdc20f42693f878fdeb21" kindref="member">ExpoCell::setNaturalHeight</ref>(qreal<sp/>height)</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_naturalHeight<sp/>!=<sp/>height)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_naturalHeight<sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateLayout();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_expo_cell_1a1b6ca06ac9ec55ff41baff7e582a03c1" kindref="member">naturalHeightChanged</ref>();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="class_expo_cell_1aa8e528e738624f2c81fe802e3da13b68" refkind="member"><highlight class="normal">QRectF<sp/><ref refid="class_expo_cell_1aa8e528e738624f2c81fe802e3da13b68" kindref="member">ExpoCell::naturalRect</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="236"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QRectF(m_naturalX,<sp/>m_naturalY,<sp/>m_naturalWidth,<sp/>m_naturalHeight);</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="class_expo_cell_1a2f54e11d00e2bf0ce3794688591fbca1" refkind="member"><highlight class="normal">QMarginsF<sp/><ref refid="class_expo_cell_1a2f54e11d00e2bf0ce3794688591fbca1" kindref="member">ExpoCell::margins</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="241"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_margins;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="class_expo_cell_1a67f7af93a59f1fabb4476a3f59c12d36" refkind="member"><highlight class="normal">QString<sp/><ref refid="class_expo_cell_1a4a5ea92c61a9a42b78c06f861fe2a345" kindref="member">ExpoCell::persistentKey</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="246"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_persistentKey;</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="class_expo_cell_1add170478e03efe2485937af4222cc705" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_expo_cell_1add170478e03efe2485937af4222cc705" kindref="member">ExpoCell::setPersistentKey</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>&amp;key)</highlight></codeline>
<codeline lineno="251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_persistentKey<sp/>!=<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_persistentKey<sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateLayout();</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_expo_cell_1a1c181a0766114829c70c35906990afe3" kindref="member">persistentKeyChanged</ref>();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259" refid="class_expo_cell_1a4a1c7d534168a4048e2d2cdab7b086fe" refkind="member"><highlight class="normal">qreal<sp/><ref refid="class_expo_cell_1ae21cbc0227e0545c3d850d4d9098cdff" kindref="member">ExpoCell::bottomMargin</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="260"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_margins.bottom();</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="class_expo_cell_1a317c172d48615a82d514ee1c3f78e1d1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_expo_cell_1a317c172d48615a82d514ee1c3f78e1d1" kindref="member">ExpoCell::setBottomMargin</ref>(qreal<sp/>margin)</highlight></codeline>
<codeline lineno="265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_margins.bottom()<sp/>!=<sp/>margin)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_margins.setBottom(margin);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_expo_cell_1a0a9eb5f6a79c00aea8d294b76229ce16" kindref="member">bottomMarginChanged</ref>();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="class_expo_cell_1a6bd52447a0ee6fec7821fb252b938699" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_expo_cell_1a6bd52447a0ee6fec7821fb252b938699" kindref="member">ExpoCell::geometryChange</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>&amp;newGeometry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>&amp;oldGeometry)</highlight></codeline>
<codeline lineno="274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>updateContentItemGeometry();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>QQuickItem::geometryChange(newGeometry,<sp/>oldGeometry);</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ExpoCell::updateContentItemGeometry()</highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_contentItem)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>QRectF<sp/>rect<sp/>=<sp/>mapRectToItem(m_contentItem-&gt;parentItem(),<sp/>boundingRect());</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>rect<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rect.x()<sp/>*<sp/>m_partialActivationFactor<sp/>+<sp/>(m_naturalX<sp/>+<sp/>m_offsetX)<sp/>*<sp/>(1.0<sp/>-<sp/>m_partialActivationFactor),</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rect.y()<sp/>*<sp/>m_partialActivationFactor<sp/>+<sp/>(m_naturalY<sp/>+<sp/>m_offsetY)<sp/>*<sp/>(1.0<sp/>-<sp/>m_partialActivationFactor),</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rect.width()<sp/>*<sp/>m_partialActivationFactor<sp/>+<sp/>m_naturalWidth<sp/>*<sp/>(1.0<sp/>-<sp/>m_partialActivationFactor),</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rect.height()<sp/>*<sp/>m_partialActivationFactor<sp/>+<sp/>m_naturalHeight<sp/>*<sp/>(1.0<sp/>-<sp/>m_partialActivationFactor)};</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>m_contentItem-&gt;setX(rect.x());</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>m_contentItem-&gt;setY(rect.y());</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>m_contentItem-&gt;setSize(rect.size());</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="class_expo_layout_1a011754da0502d19d453d6a32629edca0" refkind="member"><highlight class="normal"><ref refid="class_expo_layout_1a011754da0502d19d453d6a32629edca0" kindref="member">ExpoLayout::ExpoLayout</ref>(QQuickItem<sp/>*parent)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>QQuickItem(parent)</highlight></codeline>
<codeline lineno="300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303" refid="class_expo_layout_1a166d14a38eb81c525fbe69a9275b8f9f" refkind="member"><highlight class="normal"><ref refid="class_expo_layout_1a80ccf74a71ac66ac1aa1bd538b083e5f" kindref="member">ExpoLayout::PlacementMode</ref><sp/><ref refid="class_expo_layout_1aea46499f00c21a7b52cffcf5690645e3" kindref="member">ExpoLayout::placementMode</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="304"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_placementMode;</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="class_expo_layout_1ac71b00d259fd010960f40ffa3986b366" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_expo_layout_1ac71b00d259fd010960f40ffa3986b366" kindref="member">ExpoLayout::setPlacementMode</ref>(<ref refid="class_expo_layout_1a80ccf74a71ac66ac1aa1bd538b083e5f" kindref="member">PlacementMode</ref><sp/>mode)</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_placementMode<sp/>!=<sp/>mode)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_placementMode<sp/>=<sp/>mode;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polish();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_expo_layout_1a50cc42141359440973b4fee58785a949" kindref="member">placementModeChanged</ref>();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317" refid="class_expo_layout_1a2311f21d1346adc1b090da29ca120bc4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_expo_layout_1a2311f21d1346adc1b090da29ca120bc4" kindref="member">ExpoLayout::isReady</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="318"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ready;</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322" refid="class_expo_layout_1a8473f0adde6484bfdf9785397e493dbe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_expo_layout_1a8473f0adde6484bfdf9785397e493dbe" kindref="member">ExpoLayout::setReady</ref>()</highlight></codeline>
<codeline lineno="323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ready)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ready<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_expo_layout_1ab417261500b13c8a86b3816c02995bed" kindref="member">readyChanged</ref>();</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330" refid="class_expo_layout_1a0108637b71eb68d5b3bcf9778c8e9cd0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_expo_layout_1a0108637b71eb68d5b3bcf9778c8e9cd0" kindref="member">ExpoLayout::forceLayout</ref>()</highlight></codeline>
<codeline lineno="331"><highlight class="normal">{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_expo_layout_1accfa9940e058a584ec0032d155686e57" kindref="member">updatePolish</ref>();</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335" refid="class_expo_layout_1a244b016a2b4782ad312e0a023acf0b96" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_expo_layout_1a244b016a2b4782ad312e0a023acf0b96" kindref="member">ExpoLayout::updateCellsMapping</ref>()</highlight></codeline>
<codeline lineno="336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_expo_cell" kindref="compound">ExpoCell</ref><sp/>*cell<sp/>:<sp/>m_cells)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;polish();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="class_expo_layout_1af9888dfd56e20abd8f1b563cb8dd6744" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_expo_layout_1af9888dfd56e20abd8f1b563cb8dd6744" kindref="member">ExpoLayout::addCell</ref>(<ref refid="class_expo_cell" kindref="compound">ExpoCell</ref><sp/>*cell)</highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_ASSERT(!m_cells.contains(cell));</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cells.append(cell);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>polish();</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349" refid="class_expo_layout_1a4885a46c5cbb44e4a78ce0d9330fa5a2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_expo_layout_1a4885a46c5cbb44e4a78ce0d9330fa5a2" kindref="member">ExpoLayout::removeCell</ref>(<ref refid="class_expo_cell" kindref="compound">ExpoCell</ref><sp/>*cell)</highlight></codeline>
<codeline lineno="350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cells.removeOne(cell);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>polish();</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355" refid="class_expo_layout_1aac629278ec6f632266eaf0e58bcf20e6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_expo_layout_1aac629278ec6f632266eaf0e58bcf20e6" kindref="member">ExpoLayout::geometryChange</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>&amp;newGeometry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>&amp;oldGeometry)</highlight></codeline>
<codeline lineno="356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newGeometry.size()<sp/>!=<sp/>oldGeometry.size())<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polish();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>QQuickItem::geometryChange(newGeometry,<sp/>oldGeometry);</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Move<sp/>and<sp/>scale<sp/>rect<sp/>to<sp/>fit<sp/>inside<sp/>area</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>moveToFit(QRectF<sp/>&amp;rect,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>&amp;area)</highlight></codeline>
<codeline lineno="365"><highlight class="normal">{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>scale<sp/>=<sp/>std::min(area.width()<sp/>/<sp/>rect.width(),<sp/>area.height()<sp/>/<sp/>rect.height());</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>rect.setWidth(rect.width()<sp/>*<sp/>scale);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>rect.setHeight(rect.height()<sp/>*<sp/>scale);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>rect.moveCenter(area.center());</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372" refid="class_expo_layout_1accfa9940e058a584ec0032d155686e57" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_expo_layout_1accfa9940e058a584ec0032d155686e57" kindref="member">ExpoLayout::updatePolish</ref>()</highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_cells.isEmpty())<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_expo_layout_1a8473f0adde6484bfdf9785397e493dbe" kindref="member">setReady</ref>();</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>QRectF<sp/>area<sp/>=<sp/>QRectF(0,<sp/>0,<sp/>width(),<sp/>height());</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(m_cells.begin(),<sp/>m_cells.end(),</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_expo_cell" kindref="compound">ExpoCell</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_expo_cell" kindref="compound">ExpoCell</ref><sp/>*b)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>a-&gt;persistentKey()<sp/>&lt;<sp/>b-&gt;persistentKey();</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Estimate<sp/>the<sp/>scale<sp/>factor<sp/>we<sp/>need<sp/>to<sp/>apply<sp/>by<sp/>simple<sp/>heuristics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>totalArea<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>availableArea<sp/>=<sp/>area.width()<sp/>*<sp/>area.height();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_expo_cell" kindref="compound">ExpoCell</ref><sp/>*cell<sp/>:<sp/>std::as_const(m_cells))<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalArea<sp/>+=<sp/>cell-&gt;naturalWidth()<sp/>*<sp/>cell-&gt;naturalHeight();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>scale<sp/>=<sp/>std::sqrt(availableArea<sp/>/<sp/>totalArea)<sp/>*<sp/>0.7;<sp/></highlight><highlight class="comment">//<sp/>conservative<sp/>estimate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>std::clamp(scale,<sp/>0.1,<sp/>10.0);<sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>go<sp/>crazy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;QRectF&gt;<sp/>windowSizes;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_expo_cell" kindref="compound">ExpoCell</ref><sp/>*cell<sp/>:<sp/>std::as_const(m_cells))<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QMarginsF<sp/>&amp;margins<sp/>=<sp/>cell-&gt;margins();</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QMarginsF<sp/>scaledMargins(margins.left()<sp/>/<sp/>scale,<sp/>margins.top()<sp/>/<sp/>scale,<sp/>margins.right()<sp/>/<sp/>scale,<sp/>margins.bottom()<sp/>/<sp/>scale);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windowSizes.emplace_back(cell-&gt;naturalRect().marginsAdded(scaledMargins));</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>windowLayouts<sp/>=<sp/><ref refid="class_expo_layout_1a336fb673dbefc1ffa5c47a5d9660d803" kindref="member">ExpoLayout::layout</ref>(area,<sp/>windowSizes);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>windowLayouts.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_expo_cell" kindref="compound">ExpoCell</ref><sp/>*cell<sp/>=<sp/>m_cells[i];</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QRectF<sp/>target<sp/>=<sp/>windowLayouts[i];</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QRectF<sp/>adjustedTarget<sp/>=<sp/>target.marginsRemoved(cell-&gt;<ref refid="class_expo_cell_1a2f54e11d00e2bf0ce3794688591fbca1" kindref="member">margins</ref>());</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adjustedTarget.isValid())<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target<sp/>=<sp/>adjustedTarget;<sp/></highlight><highlight class="comment">//<sp/>Borders</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QRectF<sp/>rect<sp/>=<sp/>cell-&gt;<ref refid="class_expo_cell_1aa8e528e738624f2c81fe802e3da13b68" kindref="member">naturalRect</ref>();</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moveToFit(rect,<sp/>target);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_ready)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>setProperty<sp/>so<sp/>the<sp/>QML<sp/>side<sp/>can<sp/>animate<sp/>with<sp/>Behavior</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;setProperty(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/>rect.x());</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;setProperty(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">,<sp/>rect.y());</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;setProperty(</highlight><highlight class="stringliteral">&quot;width&quot;</highlight><highlight class="normal">,<sp/>rect.width());</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;setProperty(</highlight><highlight class="stringliteral">&quot;height&quot;</highlight><highlight class="normal">,<sp/>rect.height());</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;setX(rect.x());</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;setY(rect.y());</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;setWidth(rect.width());</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;setHeight(rect.height());</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_expo_layout_1a8473f0adde6484bfdf9785397e493dbe" kindref="member">setReady</ref>();</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="struct_layer_1ad58afa8d9c07813533b6f1bce5f89a3f" refkind="member"><highlight class="normal"><ref refid="struct_layer_1ad58afa8d9c07813533b6f1bce5f89a3f" kindref="member">Layer::Layer</ref>(qreal<sp/><ref refid="struct_layer_1acc650d70d89dfcaea8accddb057a6bc4" kindref="member">maxWidth</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QList&lt;QRectF&gt;<sp/>&amp;windowSizes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QList&lt;size_t&gt;<sp/>&amp;windowIds,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>startPos,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>endPos)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="struct_layer_1acc650d70d89dfcaea8accddb057a6bc4" kindref="member">maxWidth</ref>(<ref refid="struct_layer_1acc650d70d89dfcaea8accddb057a6bc4" kindref="member">maxWidth</ref>)</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="struct_layer_1acf38d8d1464bcaf2c54bce4b06becde6" kindref="member">maxHeight</ref>(windowSizes[windowIds[endPos<sp/>-<sp/>1]].height())</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="struct_layer_1adf310bd130dc36f31672d33beca8596b" kindref="member">ids</ref>(windowIds.begin()<sp/>+<sp/>startPos,<sp/>windowIds.begin()<sp/>+<sp/>endPos)</highlight></codeline>
<codeline lineno="433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_layer_1af0686fbf6f3dc5916b09711905963327" kindref="member">remainingWidth</ref><sp/>=<sp/><ref refid="struct_layer_1acc650d70d89dfcaea8accddb057a6bc4" kindref="member">maxWidth</ref>;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="struct_layer_1adf310bd130dc36f31672d33beca8596b" kindref="member">ids</ref>.begin();<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>!=<sp/><ref refid="struct_layer_1adf310bd130dc36f31672d33beca8596b" kindref="member">ids</ref>.end();<sp/>++</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remainingWidth<sp/>-=<sp/>windowSizes[*id].width();</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="struct_layer_1aa607dc7afd0a0fb590781a3a39613ad9" refkind="member"><highlight class="normal">qreal<sp/><ref refid="struct_layer_1aa607dc7afd0a0fb590781a3a39613ad9" kindref="member">Layer::width</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="441"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_layer_1acc650d70d89dfcaea8accddb057a6bc4" kindref="member">maxWidth</ref><sp/>-<sp/><ref refid="struct_layer_1af0686fbf6f3dc5916b09711905963327" kindref="member">remainingWidth</ref>;</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445" refid="struct_layered_packing_1a2f9fb4f1e38771644b04d41d0fd7f10c" refkind="member"><highlight class="normal"><ref refid="struct_layered_packing_1a2f9fb4f1e38771644b04d41d0fd7f10c" kindref="member">LayeredPacking::LayeredPacking</ref>(qreal<sp/><ref refid="struct_layered_packing_1ae559eac266dbbbb67aa691b1f85ff72d" kindref="member">maxWidth</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QList&lt;QRectF&gt;<sp/>&amp;windowSizes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QList&lt;size_t&gt;<sp/>&amp;ids,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QList&lt;size_t&gt;<sp/>&amp;layerStartPos)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="struct_layered_packing_1ae559eac266dbbbb67aa691b1f85ff72d" kindref="member">maxWidth</ref>(<ref refid="struct_layered_packing_1ae559eac266dbbbb67aa691b1f85ff72d" kindref="member">maxWidth</ref>)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="struct_layered_packing_1a759df2731413a039d3bc529ce0bace11" kindref="member">width</ref>(0)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="struct_layered_packing_1aff66ca488ded763e0eae20a8b544bf31" kindref="member">height</ref>(0)</highlight></codeline>
<codeline lineno="449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>layerStartPos.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_layered_packing_1a5afcd66923564452a2a4571351654820" kindref="member">layers</ref>.emplace_back(<ref refid="struct_layered_packing_1ae559eac266dbbbb67aa691b1f85ff72d" kindref="member">maxWidth</ref>,<sp/>windowSizes,<sp/>ids,<sp/>layerStartPos[i<sp/>-<sp/>1],<sp/>layerStartPos[i]);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_layered_packing_1a759df2731413a039d3bc529ce0bace11" kindref="member">width</ref><sp/>=<sp/>std::max(<ref refid="struct_layered_packing_1a759df2731413a039d3bc529ce0bace11" kindref="member">width</ref>,<sp/><ref refid="struct_layered_packing_1a5afcd66923564452a2a4571351654820" kindref="member">layers</ref>.back().width());</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_layered_packing_1aff66ca488ded763e0eae20a8b544bf31" kindref="member">height</ref><sp/>+=<sp/><ref refid="struct_layered_packing_1a5afcd66923564452a2a4571351654820" kindref="member">layers</ref>.back().maxHeight;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDominated(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>candidate,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alternativeSmall,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alternativeBig,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,<sp/>std::function&lt;qreal(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)&gt;<sp/>leastWeightCandidate)</highlight></codeline>
<codeline lineno="477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_ASSERT(alternativeSmall<sp/>&lt;<sp/>candidate<sp/>&amp;&amp;<sp/>candidate<sp/>&lt;<sp/>alternativeBig);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alternativeBig<sp/>==<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>assumed<sp/>that<sp/>the<sp/>weigth<sp/>function<sp/>is<sp/>concave,<sp/>i.e.,<sp/>for<sp/>all<sp/>i<sp/>&lt;=<sp/>j<sp/>&lt;<sp/>k<sp/>&lt;=<sp/>l,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>weight(i,k)<sp/>+<sp/>weight(j,l)<sp/>&lt;=<sp/>weight(i,l)<sp/>+<sp/>weight(j,k)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>implies<sp/>the<sp/>following<sp/>about<sp/>leastWeightCandidate:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>all<sp/>i<sp/>&lt;=<sp/>j<sp/>&lt;<sp/>k<sp/>&lt;=<sp/>l</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>If<sp/>leastWeightCandidate(i,<sp/>l)<sp/>&lt;=<sp/>leastWeightCandidate(j,<sp/>l),<sp/>then<sp/>leastWeightCandidate(i,<sp/>k)<sp/>&lt;=<sp/>leastWeightCandidate(j,<sp/>k)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>If<sp/>leastWeightCandidate(j,<sp/>k)<sp/>&lt;=<sp/>leastWeightCandidate(i,<sp/>k),<sp/>then<sp/>leastWeightCandidate(j,<sp/>l)<sp/>&lt;=<sp/>leastWeightCandidate(i,<sp/>l)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>particular,<sp/>this<sp/>implies<sp/>that<sp/>the<sp/>set<sp/>of<sp/>ks<sp/>such<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>leastWeightCandidate(candidate,<sp/>k)<sp/>&lt;<sp/>leastWeightCandidate(alternativeSmall,<sp/>k)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>(possibly<sp/>empty)<sp/>interval<sp/>[k1,<sp/>length]<sp/>for<sp/>some<sp/>k1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>because<sp/>if<sp/>for<sp/>some<sp/>k,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>leastWeightCandidate(alternativeSmall,<sp/>k)<sp/>&lt;=<sp/>leastWeightCandidate(candidate,<sp/>k),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>for<sp/>all<sp/>candidate<sp/>&lt;<sp/>k&apos;<sp/>&lt;=<sp/>k,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>leastWeightCandidate(alternativeSmall,<sp/>k&apos;)<sp/>&lt;=<sp/>leastWeightCandidate(candidate,<sp/>k&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Similarly,<sp/>the<sp/>set<sp/>of<sp/>ks<sp/>such<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>leastWeightCandidate(candidate,<sp/>k)<sp/>&lt;<sp/>leastWeightCandidate(alternativeBig,<sp/>k)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>(possibly<sp/>empty)<sp/>interval<sp/>[alternativeBig<sp/>+<sp/>1,<sp/>k2]<sp/>for<sp/>some<sp/>k2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>because<sp/>if<sp/>for<sp/>some<sp/>k,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>leastWeightCandidate(alternativeBig,<sp/>k)<sp/>&lt;=<sp/>leastWeightCandidate(candidate,<sp/>k),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>for<sp/>all<sp/>k&apos;<sp/>&gt;=<sp/>k</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>leastWeightCandidate(alternativeBig,<sp/>k&apos;)<sp/>&lt;=<sp/>leastWeightCandidate(candidate,<sp/>k&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hence,<sp/>to<sp/>check<sp/>if<sp/>a<sp/>k<sp/>exists<sp/>in<sp/>both<sp/>intervals,<sp/>we<sp/>can<sp/>use<sp/>binary<sp/>search<sp/>to<sp/>find<sp/>the<sp/>smallest<sp/>k1<sp/>such<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>leastWeightCandidate(candidate,<sp/>k1)<sp/>&lt;<sp/>leastWeightCandidate(alternativeSmall,<sp/>k1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>such<sp/>a<sp/>k1<sp/>exists,<sp/>it<sp/>suffices<sp/>to<sp/>check<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>leastWeightCandidate(alternativeBig,<sp/>k1)<sp/>&lt;=<sp/>leastWeightCandidate(candidate,<sp/>k1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(leastWeightCandidate(alternativeSmall,<sp/>length)<sp/>&lt;=<sp/>leastWeightCandidate(candidate,<sp/>length))<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>know<sp/>that<sp/>leastWeightCandidate(candidate,<sp/>length)<sp/>&lt;<sp/>leastWeightCandidate(alternativeSmall,<sp/>length)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>i.e,<sp/>the<sp/>first<sp/>interval<sp/>is<sp/>non-empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>candidate<sp/>k1<sp/>is<sp/>in<sp/>the<sp/>interval<sp/>(low,<sp/>high]<sp/>(inclusive<sp/>on<sp/>high)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low<sp/>=<sp/>alternativeBig;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(high<sp/>-<sp/>low<sp/>&gt;=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mid<sp/>=<sp/>(low<sp/>+<sp/>high)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(leastWeightCandidate(alternativeSmall,<sp/>mid)<sp/>&lt;=<sp/>leastWeightCandidate(candidate,<sp/>mid))<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>low<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>high<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(leastWeightCandidate(alternativeBig,<sp/>high)<sp/>&lt;=<sp/>leastWeightCandidate(candidate,<sp/>high));</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QList&lt;size_t&gt;<sp/>getLayerStartPos(qreal<sp/>maxWidth,<sp/>qreal<sp/>idealWidth,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QList&lt;qreal&gt;<sp/>&amp;cumWidths)</highlight></codeline>
<codeline lineno="559"><highlight class="normal">{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>weight(start,<sp/>end)<sp/>is<sp/>the<sp/>penalty<sp/>of<sp/>placing<sp/>all<sp/>windows<sp/>in<sp/>the<sp/>range<sp/>[start,<sp/>end)<sp/>in<sp/>the<sp/>same<sp/>layer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>form<sp/>only<sp/>works<sp/>when<sp/>the<sp/>maximum<sp/>width<sp/>of<sp/>a<sp/>window<sp/>is<sp/>less<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>idealWidth.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>weight<sp/>function<sp/>is<sp/>designed<sp/>such<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>The<sp/>weight<sp/>function<sp/>is<sp/>concave<sp/>(see<sp/>definition<sp/>in<sp/>Basic<sp/>algorithm)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2.<sp/>It<sp/>scales<sp/>like<sp/>(width<sp/>-<sp/>idealWidth)<sp/>^<sp/>2<sp/>for<sp/>width<sp/>&lt;<sp/>idealWidth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3.<sp/>Exceeding<sp/>maxWidth<sp/>is<sp/>guaranteed<sp/>to<sp/>be<sp/>worse<sp/>than<sp/>any<sp/>other<sp/>solution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>holds<sp/>as<sp/>long<sp/>as<sp/>weight(i,<sp/>j)<sp/>=<sp/>f(cumWidths[j]<sp/>-<sp/>cumWidths[i])<sp/>for<sp/>some<sp/>convex<sp/>function<sp/>f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3.<sp/>is<sp/>guaranteed<sp/>by<sp/>making<sp/>the<sp/>penalty<sp/>of<sp/>exceeding<sp/>maxWidth<sp/>at<sp/>least</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cumWidths.size(),<sp/>which<sp/>strictly<sp/>upper<sp/>bounds<sp/>the<sp/>total<sp/>weight<sp/>of<sp/>placing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>each<sp/>window<sp/>in<sp/>its<sp/>own<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>weight<sp/>=<sp/>[maxWidth,<sp/>idealWidth,<sp/>&amp;cumWidths](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qreal<sp/>width<sp/>=<sp/>cumWidths[end]<sp/>-<sp/>cumWidths[start];</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>&lt;<sp/>idealWidth)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(width<sp/>-<sp/>idealWidth)<sp/>*<sp/>(width<sp/>-<sp/>idealWidth)<sp/>/<sp/>idealWidth<sp/>/<sp/>idealWidth;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qreal<sp/>penaltyFactor<sp/>=<sp/>cumWidths.size();</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>penaltyFactor<sp/>*<sp/>(width<sp/>-<sp/>idealWidth)<sp/>*<sp/>(width<sp/>-<sp/>idealWidth)<sp/>/<sp/>(maxWidth<sp/>-<sp/>idealWidth)<sp/>/<sp/>(maxWidth<sp/>-<sp/>idealWidth);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>layerStart[j]<sp/>is<sp/>where<sp/>the<sp/>last<sp/>layer<sp/>should<sp/>start,<sp/>if<sp/>there<sp/>were<sp/>only<sp/>the<sp/>first<sp/>j<sp/>windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>I.e.,<sp/>layerStart[5]=3<sp/>means<sp/>that<sp/>the<sp/>last<sp/>layer<sp/>should<sp/>start<sp/>at<sp/>window<sp/>3<sp/>if<sp/>there<sp/>were<sp/>only<sp/>the<sp/>first<sp/>10<sp/>windows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(bestLeft<sp/>in<sp/>paper)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;size_t&gt;<sp/>layerStart(length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>leastWeight[i]<sp/>is<sp/>the<sp/>least<sp/>weight<sp/>of<sp/>any<sp/>subsequence<sp/>starting<sp/>at<sp/>0<sp/>and<sp/>ending<sp/>at<sp/>i<sp/>(f<sp/>in<sp/>paper)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;qreal&gt;<sp/>leastWeight(length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>layerStartcandidates<sp/>contains<sp/>all<sp/>current<sp/>candidates<sp/>for<sp/>layerStart[currentIndex]<sp/>(d<sp/>in<sp/>paper)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>std::deque&lt;size_t&gt;<sp/>layerStartCandidates;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>leastWeight[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>leastWeightCandidate(lastRowStartPos,<sp/>num)<sp/>is<sp/>a<sp/>candidate<sp/>value<sp/>for<sp/>leastWeight[num].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>the<sp/>weight<sp/>for<sp/>arranging<sp/>the<sp/>first<sp/>num<sp/>windows,<sp/>assuming<sp/>optimal<sp/>arrangement<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>first<sp/>lastRowStartPos<sp/>windows,<sp/>and<sp/>a<sp/>last<sp/>layer<sp/>consisting<sp/>of<sp/>windows<sp/>[lastRowStartPos,<sp/>num)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(g<sp/>in<sp/>paper)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>leastWeightCandidate<sp/>=<sp/>[&amp;leastWeight,<sp/>&amp;weight](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lastRowStartPos,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>leastWeight[lastRowStartPos]<sp/>+<sp/>weight(lastRowStartPos,<sp/>num);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>layerStartCandidates.push_back(0);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>currentIndex<sp/>=<sp/>1;<sp/>currentIndex<sp/>&lt;<sp/>length;<sp/>++currentIndex)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>currentIndex<sp/>is<sp/>m<sp/>in<sp/>paper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leastWeight[currentIndex]<sp/>=<sp/>leastWeightCandidate(layerStartCandidates.front(),<sp/>currentIndex);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layerStart[currentIndex]<sp/>=<sp/>layerStartCandidates.front();</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Modification<sp/>of<sp/>algorithm<sp/>in<sp/>paper;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>needed<sp/>so<sp/>that<sp/>layerStartCandidates.front<sp/>can<sp/>be<sp/>correctly<sp/>removed<sp/>when<sp/>layerStartCandidates.size()<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layerStartCandidates.push_back(currentIndex);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>candidates<sp/>from<sp/>the<sp/>front<sp/>if<sp/>they<sp/>are<sp/>dominated<sp/>by<sp/>the<sp/>second<sp/>candidate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dominate<sp/>means<sp/>that<sp/>the<sp/>second<sp/>candidate<sp/>is<sp/>at<sp/>least<sp/>as<sp/>good<sp/>as<sp/>the<sp/>first<sp/>candidate<sp/>for<sp/>layerStart</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layerStartCandidates.size()<sp/>&gt;=<sp/>2<sp/>&amp;&amp;<sp/>leastWeightCandidate(layerStartCandidates[1],<sp/>currentIndex<sp/>+<sp/>1)<sp/>&lt;=<sp/>leastWeightCandidate(layerStartCandidates[0],<sp/>currentIndex<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layerStartCandidates.pop_front();</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layerStartCandidates.pop_back();<sp/></highlight><highlight class="comment">//<sp/>Modification<sp/>of<sp/>algorithm<sp/>in<sp/>paper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>candidates<sp/>from<sp/>the<sp/>back<sp/>if<sp/>they<sp/>are<sp/>dominated<sp/>by<sp/>either<sp/>the<sp/>second<sp/>to<sp/>last<sp/>candidate,<sp/>or<sp/>currentIndex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layerStartCandidates.size()<sp/>&gt;=<sp/>2<sp/>&amp;&amp;<sp/>isDominated(layerStartCandidates.back(),<sp/>layerStartCandidates[layerStartCandidates.size()<sp/>-<sp/>2],<sp/>currentIndex,<sp/>length,<sp/>leastWeightCandidate))<sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layerStartCandidates.pop_back();</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Modification<sp/>of<sp/>algorithm<sp/>in<sp/>paper;<sp/>we<sp/>need<sp/>at<sp/>least<sp/>one<sp/>candidate<sp/>in<sp/>layerStartCandidates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layerStartCandidates.empty())<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layerStartCandidates.push_back(currentIndex);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>currentIndex<sp/>to<sp/>layerStartCandidates<sp/>if<sp/>it<sp/>is<sp/>not<sp/>dominated<sp/>by<sp/>the<sp/>last<sp/>candidate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(leastWeightCandidate(currentIndex,<sp/>length)<sp/>&lt;<sp/>leastWeightCandidate(layerStartCandidates.back(),<sp/>length))<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layerStartCandidates.push_back(currentIndex);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>recover<sp/>the<sp/>solution<sp/>using<sp/>layerStart</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>leastWeight[length]<sp/>=<sp/>leastWeightCandidate(layerStartCandidates.front(),<sp/>length);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>layerStart[length]<sp/>=<sp/>layerStartCandidates.front();</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;size_t&gt;<sp/>layerStartPosReversed;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>layerStartPosReversed.push_back(length);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>currentIndex<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(currentIndex<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentIndex<sp/>=<sp/>layerStart[currentIndex];</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layerStartPosReversed.push_back(currentIndex);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QList&lt;size_t&gt;(layerStartPosReversed.rbegin(),<sp/>layerStartPosReversed.rend());</highlight></codeline>
<codeline lineno="648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reflection<sp/>about<sp/>the<sp/>line<sp/>y<sp/>=<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QMarginsF<sp/>reflect(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QMarginsF<sp/>&amp;margins)</highlight></codeline>
<codeline lineno="652"><highlight class="normal">{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QMarginsF(margins.top(),<sp/>margins.right(),<sp/>margins.bottom(),<sp/>margins.left());</highlight></codeline>
<codeline lineno="654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRectF<sp/>reflect(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>&amp;rect)</highlight></codeline>
<codeline lineno="656"><highlight class="normal">{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QRectF(rect.y(),<sp/>rect.x(),<sp/>rect.height(),<sp/>rect.width());</highlight></codeline>
<codeline lineno="658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QPointF<sp/>reflect(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QPointF<sp/>&amp;point)</highlight></codeline>
<codeline lineno="660"><highlight class="normal">{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>point.transposed();</highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QList&lt;T&gt;<sp/>reflect(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QList&lt;T&gt;<sp/>&amp;v)</highlight></codeline>
<codeline lineno="665"><highlight class="normal">{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;T&gt;<sp/>result;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>result.reserve(v.size());</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>:<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.emplace_back(reflect(x));</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674" refid="class_expo_layout_1a336fb673dbefc1ffa5c47a5d9660d803" refkind="member"><highlight class="normal">QList&lt;QRectF&gt;<sp/><ref refid="class_expo_layout_1a336fb673dbefc1ffa5c47a5d9660d803" kindref="member">ExpoLayout::layout</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>&amp;area,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QList&lt;QRectF&gt;<sp/>&amp;windowSizes)</highlight></codeline>
<codeline lineno="675"><highlight class="normal">{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>qreal<sp/>shortSide<sp/>=<sp/>std::min(area.width(),<sp/>area.height());</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QMarginsF<sp/>margins(shortSide<sp/>*<sp/>m_relativeMarginLeft,</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shortSide<sp/>*<sp/>m_relativeMarginTop,</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shortSide<sp/>*<sp/>m_relativeMarginRight,</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shortSide<sp/>*<sp/>m_relativeMarginBottom);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>qreal<sp/>minLength<sp/>=<sp/>m_relativeMinLength<sp/>*<sp/>shortSide;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>minSize<sp/>=<sp/>QRectF(0,<sp/>0,<sp/>minLength,<sp/>minLength);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;QPointF&gt;<sp/>centers;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>&amp;windowSize<sp/>:<sp/>windowSizes)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centers.push_back(windowSize.center());</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>windows<sp/>bigger<sp/>than<sp/>4x<sp/>the<sp/>area<sp/>are<sp/>considered<sp/>ill-behaved<sp/>and<sp/>their<sp/>sizes<sp/>are<sp/>clipped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>adjustedSizes<sp/>=<sp/><ref refid="class_expo_layout_1a9045669832a51e1c78f8129018ec27ca" kindref="member">adjustSizes</ref>(minSize,<sp/>QRectF(0,<sp/>0,<sp/>4<sp/>*<sp/>area.width(),<sp/>4<sp/>*<sp/>area.height()),<sp/>margins,<sp/>windowSizes);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_expo_layout_1aea46499f00c21a7b52cffcf5690645e3" kindref="member">placementMode</ref>()<sp/>==<sp/><ref refid="class_expo_layout_1a80ccf74a71ac66ac1aa1bd538b083e5fabc7ae38f235a39dd77b24c153965c53d" kindref="member">PlacementMode::Rows</ref>)<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_layered_packing" kindref="compound">LayeredPacking</ref><sp/>bestPacking<sp/>=<sp/><ref refid="class_expo_layout_1a53b611a7118112cf53f82849b1af02b1" kindref="member">findGoodPacking</ref>(area,<sp/>adjustedSizes,<sp/>centers,<sp/>m_idealWidthRatio,<sp/>m_searchTolerance);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_expo_layout_1a48cf64f76758f48728db6a675cc5a92a" kindref="member">refineAndApplyPacking</ref>(area,<sp/>margins,<sp/>bestPacking,<sp/>adjustedSizes,<sp/>centers);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QList&lt;QRectF&gt;<sp/>adjustedSizesReflected(reflect(adjustedSizes));</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QList&lt;QPointF&gt;<sp/>centersReflected(reflect(centers));</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_layered_packing" kindref="compound">LayeredPacking</ref><sp/>bestPacking<sp/>=<sp/><ref refid="class_expo_layout_1a53b611a7118112cf53f82849b1af02b1" kindref="member">findGoodPacking</ref>(area.transposed(),<sp/>adjustedSizesReflected,<sp/>centersReflected,<sp/>m_idealWidthRatio,<sp/>m_searchTolerance);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reflect(<ref refid="class_expo_layout_1a48cf64f76758f48728db6a675cc5a92a" kindref="member">refineAndApplyPacking</ref>(area.transposed(),<sp/>reflect(margins),<sp/>bestPacking,<sp/>adjustedSizesReflected,<sp/>centersReflected));</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704" refid="class_expo_layout_1a9045669832a51e1c78f8129018ec27ca" refkind="member"><highlight class="normal">QList&lt;QRectF&gt;<sp/><ref refid="class_expo_layout_1a9045669832a51e1c78f8129018ec27ca" kindref="member">ExpoLayout::adjustSizes</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>&amp;minSize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>&amp;maxSize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QMarginsF<sp/>&amp;margins,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QList&lt;QRectF&gt;<sp/>&amp;windowSizes)</highlight></codeline>
<codeline lineno="705"><highlight class="normal">{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;QRectF&gt;<sp/>adjustedSizes;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(QRectF<sp/>windowSize<sp/>:<sp/>windowSizes)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windowSize.setWidth(std::clamp(windowSize.width(),<sp/>minSize.width(),<sp/>maxSize.width()));</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windowSize.setHeight(std::clamp(windowSize.height(),<sp/>minSize.height(),<sp/>maxSize.height()));</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windowSize<sp/>+=<sp/>margins;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adjustedSizes.emplace_back(windowSize);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>adjustedSizes;</highlight></codeline>
<codeline lineno="714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><ref refid="struct_layered_packing" kindref="compound">LayeredPacking</ref></highlight></codeline>
<codeline lineno="717" refid="class_expo_layout_1a53b611a7118112cf53f82849b1af02b1" refkind="member"><highlight class="normal"><ref refid="class_expo_layout_1a53b611a7118112cf53f82849b1af02b1" kindref="member">ExpoLayout::findGoodPacking</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>&amp;area,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QList&lt;QRectF&gt;<sp/>&amp;windowSizes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QList&lt;QPointF&gt;<sp/>&amp;centers,<sp/>qreal<sp/><ref refid="class_expo_layout_1a5b3a8f24a79b3e5e25b29c079cc8d70e" kindref="member">idealWidthRatio</ref>,<sp/>qreal<sp/>tol)</highlight></codeline>
<codeline lineno="718"><highlight class="normal">{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;std::tuple&lt;size_t,<sp/>QRectF,<sp/>QPointF&gt;&gt;<sp/>windowSizesWithIds;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>windowSizes.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windowSizesWithIds.emplace_back(i,<sp/>windowSizes[i],<sp/>centers[i]);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sorting<sp/>by<sp/>height<sp/>ensures<sp/>that<sp/>windows<sp/>in<sp/>same<sp/>layer<sp/>(row)<sp/>have<sp/>similar<sp/>heights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stable_sort(windowSizesWithIds.begin(),<sp/>windowSizesWithIds.end(),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>of<sp/>same<sp/>height,<sp/>sort<sp/>by<sp/>y<sp/>to<sp/>minimize<sp/>vertical<sp/>movement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::tuple(std::get&lt;1&gt;(a).height(),<sp/>std::get&lt;2&gt;(a).y())</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;<sp/>std::tuple(std::get&lt;1&gt;(b).height(),<sp/>std::get&lt;2&gt;(b).y());</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;size_t&gt;<sp/>ids;<sp/></highlight><highlight class="comment">//<sp/>ids<sp/>of<sp/>windows<sp/>in<sp/>sorted<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;qreal&gt;<sp/>cumWidths;<sp/></highlight><highlight class="comment">//<sp/>cumWidths[i]<sp/>is<sp/>the<sp/>sum<sp/>of<sp/>widths<sp/>of<sp/>windows<sp/>0,<sp/>1,<sp/>...,<sp/>i<sp/>-<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Minimum<sp/>and<sp/>maximum<sp/>strip<sp/>widths<sp/>to<sp/>use<sp/>in<sp/>the<sp/>binary<sp/>search.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Strips<sp/>should<sp/>be<sp/>at<sp/>least<sp/>as<sp/>wide<sp/>as<sp/>the<sp/>widest<sp/>window,<sp/>and<sp/>at<sp/>most<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wide<sp/>as<sp/>the<sp/>sum<sp/>of<sp/>all<sp/>window<sp/>widths.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>stripWidthMin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>stripWidthMax<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>cumWidths.push_back(0);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;windowSizeWithId<sp/>:<sp/>windowSizesWithIds)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ids.push_back(std::get&lt;0&gt;(windowSizeWithId));</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qreal<sp/>width<sp/>=<sp/>std::get&lt;1&gt;(windowSizeWithId).width();</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cumWidths.push_back(cumWidths.back()<sp/>+<sp/>width);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stripWidthMin<sp/>=<sp/>std::max(stripWidthMin,<sp/>width);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stripWidthMax<sp/>+=<sp/>width;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>stripWidthMin<sp/>/=<sp/><ref refid="class_expo_layout_1a5b3a8f24a79b3e5e25b29c079cc8d70e" kindref="member">idealWidthRatio</ref>;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>stripWidthMax<sp/>/=<sp/><ref refid="class_expo_layout_1a5b3a8f24a79b3e5e25b29c079cc8d70e" kindref="member">idealWidthRatio</ref>;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>targetRatio<sp/>=<sp/>area.height()<sp/>/<sp/>area.width();</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>findPacking<sp/>=<sp/>[&amp;windowSizes,<sp/>&amp;ids,<sp/>&amp;cumWidths,<sp/><ref refid="class_expo_layout_1a5b3a8f24a79b3e5e25b29c079cc8d70e" kindref="member">idealWidthRatio</ref>](qreal<sp/>stripWidth)<sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QList&lt;size_t&gt;<sp/>layerStartPos<sp/>=<sp/>getLayerStartPos(stripWidth,<sp/>stripWidth<sp/>*<sp/><ref refid="class_expo_layout_1a5b3a8f24a79b3e5e25b29c079cc8d70e" kindref="member">idealWidthRatio</ref>,<sp/>ids.size(),<sp/>cumWidths);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_layered_packing" kindref="compound">LayeredPacking</ref><sp/>result(stripWidth,<sp/>windowSizes,<sp/>ids,<sp/>layerStartPos);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q_ASSERT(result.<ref refid="struct_layered_packing_1a759df2731413a039d3bc529ce0bace11" kindref="member">width</ref><sp/>&lt;=<sp/>stripWidth);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>placement<sp/>with<sp/>the<sp/>minimum<sp/>strip<sp/>width<sp/>corresponds<sp/>with<sp/>a<sp/>big<sp/>aspect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ratio<sp/>(ratioHigh),<sp/>and<sp/>the<sp/>placement<sp/>with<sp/>the<sp/>maximum<sp/>strip<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>corresponds<sp/>with<sp/>a<sp/>small<sp/>aspect<sp/>ratio<sp/>(ratioLow)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_layered_packing" kindref="compound">LayeredPacking</ref><sp/>placementWidthMin<sp/>=<sp/>findPacking(stripWidthMin);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>ratioHigh<sp/>=<sp/>placementWidthMin.<ref refid="struct_layered_packing_1aff66ca488ded763e0eae20a8b544bf31" kindref="member">height</ref><sp/>/<sp/>placementWidthMin.<ref refid="struct_layered_packing_1a759df2731413a039d3bc529ce0bace11" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ratioHigh<sp/>&lt;=<sp/>targetRatio)<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>placementWidthMin;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_layered_packing" kindref="compound">LayeredPacking</ref><sp/>placementWidthMax<sp/>=<sp/>findPacking(stripWidthMax);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>ratioLow<sp/>=<sp/>placementWidthMax.<ref refid="struct_layered_packing_1aff66ca488ded763e0eae20a8b544bf31" kindref="member">height</ref><sp/>/<sp/>placementWidthMax.<ref refid="struct_layered_packing_1a759df2731413a039d3bc529ce0bace11" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ratioLow<sp/>&gt;=<sp/>targetRatio)<sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>placementWidthMax;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(stripWidthMax<sp/>/<sp/>stripWidthMin<sp/>&gt;<sp/>1<sp/>+<sp/>tol)<sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qreal<sp/>stripWidthMid<sp/>=<sp/>std::sqrt(stripWidthMin<sp/>*<sp/>stripWidthMax);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_layered_packing" kindref="compound">LayeredPacking</ref><sp/>placementMid<sp/>=<sp/>findPacking(stripWidthMid);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qreal<sp/>ratioMid<sp/>=<sp/>placementMid.<ref refid="struct_layered_packing_1aff66ca488ded763e0eae20a8b544bf31" kindref="member">height</ref><sp/>/<sp/>placementMid.<ref refid="struct_layered_packing_1a759df2731413a039d3bc529ce0bace11" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ratioMid<sp/>&gt;<sp/>targetRatio)<sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stripWidthMin<sp/>=<sp/>stripWidthMid;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>placementWidthMin<sp/>=<sp/>placementMid;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ratioHigh<sp/>=<sp/>ratioMid;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>small<sp/>optimization:<sp/>use<sp/>the<sp/>actual<sp/>strip<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stripWidthMax<sp/>=<sp/>placementMid.<ref refid="struct_layered_packing_1a759df2731413a039d3bc529ce0bace11" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>placementWidthMax<sp/>=<sp/>placementMid;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ratioLow<sp/>=<sp/>ratioMid;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>how<sp/>much<sp/>we<sp/>need<sp/>to<sp/>scale<sp/>the<sp/>placement<sp/>to<sp/>fit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>scaleWidthMin<sp/>=<sp/>std::min(area.width()<sp/>/<sp/>placementWidthMin.<ref refid="struct_layered_packing_1a759df2731413a039d3bc529ce0bace11" kindref="member">width</ref>,<sp/>area.height()<sp/>/<sp/>placementWidthMin.<ref refid="struct_layered_packing_1aff66ca488ded763e0eae20a8b544bf31" kindref="member">height</ref>);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>scaleWidthMax<sp/>=<sp/>std::min(area.width()<sp/>/<sp/>placementWidthMax.<ref refid="struct_layered_packing_1a759df2731413a039d3bc529ce0bace11" kindref="member">width</ref>,<sp/>area.height()<sp/>/<sp/>placementWidthMax.<ref refid="struct_layered_packing_1aff66ca488ded763e0eae20a8b544bf31" kindref="member">height</ref>);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scaleWidthMin<sp/>&gt;<sp/>scaleWidthMax)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>placementWidthMin;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>placementWidthMax;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="806"><highlight class="normal">}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808" refid="class_expo_layout_1a48cf64f76758f48728db6a675cc5a92a" refkind="member"><highlight class="normal">QList&lt;QRectF&gt;<sp/><ref refid="class_expo_layout_1a48cf64f76758f48728db6a675cc5a92a" kindref="member">ExpoLayout::refineAndApplyPacking</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>&amp;area,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QMarginsF<sp/>&amp;margins,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_layered_packing" kindref="compound">LayeredPacking</ref><sp/>&amp;packing,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QList&lt;QRectF&gt;<sp/>&amp;windowSizes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QList&lt;QPointF&gt;<sp/>&amp;centers)</highlight></codeline>
<codeline lineno="809"><highlight class="normal">{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Scale<sp/>packing<sp/>to<sp/>fit<sp/>area</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>scale<sp/>=<sp/>std::min(area.width()<sp/>/<sp/>packing.<ref refid="struct_layered_packing_1a759df2731413a039d3bc529ce0bace11" kindref="member">width</ref>,<sp/>area.height()<sp/>/<sp/>packing.<ref refid="struct_layered_packing_1aff66ca488ded763e0eae20a8b544bf31" kindref="member">height</ref>);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>std::min(scale,<sp/>m_maxScale);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QMarginsF<sp/>scaledMargins<sp/>=<sp/>QMarginsF(margins.left()<sp/>*<sp/>scale,<sp/>margins.top()<sp/>*<sp/>scale,</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>margins.right()<sp/>*<sp/>scale,<sp/>margins.bottom()<sp/>*<sp/>scale);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>gap<sp/>in<sp/>additional<sp/>to<sp/>margins<sp/>to<sp/>leave<sp/>between<sp/>windows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>maxGapY<sp/>=<sp/>m_maxGapRatio<sp/>*<sp/>(scaledMargins.top()<sp/>+<sp/>scaledMargins.bottom());</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>maxGapX<sp/>=<sp/>m_maxGapRatio<sp/>*<sp/>(scaledMargins.left()<sp/>+<sp/>scaledMargins.right());</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>center<sp/>align<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>extraY<sp/>=<sp/>area.height()<sp/>-<sp/>packing.<ref refid="struct_layered_packing_1aff66ca488ded763e0eae20a8b544bf31" kindref="member">height</ref><sp/>*<sp/>scale;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>gapY<sp/>=<sp/>std::min(maxGapY,<sp/>extraY<sp/>/<sp/>(packing.<ref refid="struct_layered_packing_1a5afcd66923564452a2a4571351654820" kindref="member">layers</ref>.size()<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>y<sp/>=<sp/>area.y()<sp/>+<sp/>(extraY<sp/>-<sp/>gapY<sp/>*<sp/>(packing.<ref refid="struct_layered_packing_1a5afcd66923564452a2a4571351654820" kindref="member">layers</ref>.size()<sp/>-<sp/>1))<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;QRectF&gt;<sp/>finalWindowLayouts(windowSizes);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>smaller<sp/>windows<sp/>&quot;float&quot;<sp/>to<sp/>the<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;layer<sp/>:<sp/>packing.<ref refid="struct_layered_packing_1a5afcd66923564452a2a4571351654820" kindref="member">layers</ref>)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qreal<sp/>extraX<sp/>=<sp/>area.width()<sp/>-<sp/>layer.width()<sp/>*<sp/>scale;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qreal<sp/>gapX<sp/>=<sp/>std::min(maxGapX,<sp/>extraX<sp/>/<sp/>(layer.ids.size()<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qreal<sp/>x<sp/>=<sp/>area.x()<sp/>+<sp/>(extraX<sp/>-<sp/>gapX<sp/>*<sp/>(layer.ids.size()<sp/>-<sp/>1))<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QList&lt;size_t&gt;<sp/>ids(layer.ids);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stable_sort(ids.begin(),<sp/>ids.end(),<sp/>[&amp;centers](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>centers[a].x()<sp/>&lt;<sp/>centers[b].x();<sp/></highlight><highlight class="comment">//<sp/>minimize<sp/>horizontal<sp/>movement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>:<sp/>std::as_const(ids))<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QRectF<sp/>&amp;windowLayout<sp/>=<sp/>finalWindowLayouts[id];</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qreal<sp/>newY<sp/>=<sp/>y<sp/>+<sp/>(layer.maxHeight<sp/>-<sp/>windowLayout.height())<sp/>*<sp/>scale<sp/>/<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>center<sp/>align<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windowLayout<sp/>=<sp/>QRectF(x,<sp/>newY,<sp/>windowLayout.width()<sp/>*<sp/>scale,<sp/>windowLayout.height()<sp/>*<sp/>scale);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>windowLayout.width()<sp/>+<sp/>gapX;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windowLayout<sp/>-=<sp/>scaledMargins;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>layer.maxHeight<sp/>*<sp/>scale<sp/>+<sp/>gapY;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>finalWindowLayouts;</highlight></codeline>
<codeline lineno="847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;moc_expolayout.cpp&quot;</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="kwin/src/plugins/private/expolayout.cpp"/>
  </compounddef>
</doxygen>
