<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="screencastbuffer_8cpp" kind="file" language="C++">
    <compoundname>screencastbuffer.cpp</compoundname>
    <includes refid="screencastbuffer_8h" local="yes">screencastbuffer.h</includes>
    <includes local="yes">compositor.h</includes>
    <includes refid="drmdevice_8h" local="yes">core/drmdevice.h</includes>
    <includes refid="shmgraphicsbufferallocator_8h" local="yes">core/shmgraphicsbufferallocator.h</includes>
    <includes refid="glframebuffer_8h" local="yes">opengl/glframebuffer.h</includes>
    <includes refid="abstract__egl__backend_8h" local="yes">platformsupport/scenes/opengl/abstract_egl_backend.h</includes>
    <incdepgraph>
      <node id="38">
        <label>core/colorspace.h</label>
        <link refid="colorspace_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>core/drmdevice.h</label>
        <link refid="drmdevice_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>core/graphicsbuffer.h</label>
        <link refid="graphicsbuffer_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>graphicsbufferallocator.h</label>
        <link refid="graphicsbufferallocator_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>core/graphicsbufferview.h</label>
        <link refid="graphicsbufferview_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>core/output.h</label>
        <link refid="core_2output_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>core/renderbackend.h</label>
        <link refid="renderbackend_8h"/>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>renderloop.h</label>
        <link refid="renderloop_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>core/rendertarget.h</label>
        <link refid="rendertarget_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>core/shmgraphicsbufferallocator.h</label>
        <link refid="shmgraphicsbufferallocator_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>core/syncobjtimeline.h</label>
        <link refid="syncobjtimeline_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>effect/globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>opengl/eglcontext.h</label>
        <link refid="eglcontext_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>opengl/egldisplay.h</label>
        <link refid="egldisplay_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>opengl/glframebuffer.h</label>
        <link refid="glframebuffer_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>opengl/gltexture.h</label>
        <link refid="gltexture_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>platformsupport/scenes/opengl/abstract_egl_backend.h</label>
        <link refid="abstract__egl__backend_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>platformsupport/scenes/opengl/openglbackend.h</label>
        <link refid="openglbackend_8h"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>kwin/src/plugins/screencast/screencastbuffer.cpp</label>
        <link refid="screencastbuffer_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>screencastbuffer.h</label>
        <link refid="screencastbuffer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>utils/edid.h</label>
        <link refid="edid_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>utils/filedescriptor.h</label>
        <link refid="filedescriptor_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>utils/version.h</label>
        <link refid="version_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>wayland/linuxdmabufv1clientbuffer.h</label>
        <link refid="linuxdmabufv1clientbuffer_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>QByteArray</label>
      </node>
      <node id="33">
        <label>QCoreApplication</label>
      </node>
      <node id="42">
        <label>QDebug</label>
      </node>
      <node id="44">
        <label>QExplicitlySharedDataPointer</label>
      </node>
      <node id="49">
        <label>QHash</label>
      </node>
      <node id="10">
        <label>QImage</label>
      </node>
      <node id="20">
        <label>QList</label>
      </node>
      <node id="40">
        <label>QMatrix4x4</label>
      </node>
      <node id="7">
        <label>QObject</label>
      </node>
      <node id="34">
        <label>QPoint</label>
      </node>
      <node id="53">
        <label>QPointer</label>
      </node>
      <node id="23">
        <label>QRect</label>
      </node>
      <node id="45">
        <label>QRegion</label>
      </node>
      <node id="55">
        <label>QSet</label>
      </node>
      <node id="8">
        <label>QSize</label>
      </node>
      <node id="24">
        <label>QStack</label>
      </node>
      <node id="17">
        <label>QString</label>
      </node>
      <node id="43">
        <label>QUuid</label>
      </node>
      <node id="35">
        <label>QVariant</label>
      </node>
      <node id="36">
        <label>QVector2D</label>
      </node>
      <node id="15">
        <label>compositor.h</label>
      </node>
      <node id="32">
        <label>config-kwin.h</label>
      </node>
      <node id="47">
        <label>epoxy/egl.h</label>
      </node>
      <node id="25">
        <label>epoxy/gl.h</label>
      </node>
      <node id="5">
        <label>kwin_export.h</label>
      </node>
      <node id="12">
        <label>memory</label>
      </node>
      <node id="39">
        <label>optional</label>
      </node>
      <node id="14">
        <label>pipewire/pipewire.h</label>
      </node>
      <node id="13">
        <label>stdint.h</label>
      </node>
      <node id="18">
        <label>sys/types.h</label>
      </node>
      <node id="9">
        <label>utility</label>
      </node>
      <node id="56">
        <label>wayland-server.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_k_win">KWin</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2021<sp/>Vlad<sp/>Zahorodnii<sp/>&lt;vlad.zahorodnii@kde.org&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="screencastbuffer_8h" kindref="compound">screencastbuffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;compositor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="drmdevice_8h" kindref="compound">core/drmdevice.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shmgraphicsbufferallocator_8h" kindref="compound">core/shmgraphicsbufferallocator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="glframebuffer_8h" kindref="compound">opengl/glframebuffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="abstract__egl__backend_8h" kindref="compound">platformsupport/scenes/opengl/abstract_egl_backend.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win" kindref="compound">KWin</ref></highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="class_k_win_1_1_screen_cast_buffer_1a25592993a495d100db800634460aa621" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_screen_cast_buffer_1a25592993a495d100db800634460aa621" kindref="member">ScreenCastBuffer::ScreenCastBuffer</ref>(<ref refid="class_k_win_1_1_graphics_buffer" kindref="compound">GraphicsBuffer</ref><sp/>*buffer)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_buffer(buffer)</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="class_k_win_1_1_screen_cast_buffer_1a788e5d3d51d29f800fbeb39a2a98be33" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_screen_cast_buffer_1a788e5d3d51d29f800fbeb39a2a98be33" kindref="member">ScreenCastBuffer::~ScreenCastBuffer</ref>()</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>m_buffer-&gt;drop();</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">DmaBufScreenCastBuffer::DmaBufScreenCastBuffer(<ref refid="class_k_win_1_1_graphics_buffer" kindref="compound">GraphicsBuffer</ref><sp/>*buffer,<sp/>std::shared_ptr&lt;GLTexture&gt;<sp/>&amp;&amp;texture,<sp/>std::unique_ptr&lt;GLFramebuffer&gt;<sp/>&amp;&amp;framebuffer,<sp/>std::unique_ptr&lt;SyncTimeline&gt;<sp/>&amp;&amp;synctimeline)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_screen_cast_buffer" kindref="compound">ScreenCastBuffer</ref>(buffer)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>texture(std::move(texture))</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>framebuffer(std::move(framebuffer))</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>synctimeline(std::move(synctimeline))</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="class_k_win_1_1_dma_buf_screen_cast_buffer_1a26e76c0f5e7385ab28f9957d1c35c1e3" refkind="member"><highlight class="normal">DmaBufScreenCastBuffer<sp/>*<ref refid="class_k_win_1_1_dma_buf_screen_cast_buffer_1a26e76c0f5e7385ab28f9957d1c35c1e3" kindref="member">DmaBufScreenCastBuffer::create</ref>(pw_buffer<sp/>*pwBuffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_graphics_buffer_options" kindref="compound">GraphicsBufferOptions</ref><sp/>&amp;<ref refid="namespace_k_win_1aacddce7916a99bb943d9071c40754c1c" kindref="member">options</ref>)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_abstract_egl_backend" kindref="compound">AbstractEglBackend</ref><sp/>*backend<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_abstract_egl_backend" kindref="compound">AbstractEglBackend</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_k_win_1_1_compositor_1aec1859708602d6270fb960c919a23cd7" kindref="member">Compositor::self</ref>()-&gt;<ref refid="class_k_win_1_1_compositor_1a7dfc838e5a8eb0a42d1e1007cd9c2b76" kindref="member">backend</ref>());</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!backend<sp/>||<sp/>!backend-&gt;<ref refid="class_k_win_1_1_render_backend_1a9135e39ee4f8aed8dcfd2771fe0a7773" kindref="member">drmDevice</ref>())<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_graphics_buffer" kindref="compound">GraphicsBuffer</ref><sp/>*buffer<sp/>=<sp/>backend-&gt;<ref refid="class_k_win_1_1_render_backend_1a9135e39ee4f8aed8dcfd2771fe0a7773" kindref="member">drmDevice</ref>()-&gt;<ref refid="class_k_win_1_1_drm_device_1a3b914ee8d4da16cb4983a173947e50c4" kindref="member">allocator</ref>()-&gt;<ref refid="class_k_win_1_1_graphics_buffer_allocator_1a03a5c6e37390f54bfa982c08182867a7" kindref="member">allocate</ref>(<ref refid="namespace_k_win_1aacddce7916a99bb943d9071c40754c1c" kindref="member">options</ref>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!buffer)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_dma_buf_attributes" kindref="compound">DmaBufAttributes</ref><sp/>*attrs<sp/>=<sp/>buffer-&gt;<ref refid="class_k_win_1_1_graphics_buffer_1a975e80a802fa0d119921c13d4f06e576" kindref="member">dmabufAttributes</ref>();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!attrs)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer-&gt;<ref refid="class_k_win_1_1_graphics_buffer_1a7d0b964ea8c12167b315075b4de6cdfa" kindref="member">drop</ref>();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*syncTimelineMeta<sp/>=<sp/>spa_buffer_find_meta_data(pwBuffer-&gt;buffer,<sp/>SPA_META_SyncTimeline,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(spa_meta_sync_timeline));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pwBuffer-&gt;buffer-&gt;n_datas<sp/>!=<sp/>uint32_t(attrs-&gt;<ref refid="struct_k_win_1_1_dma_buf_attributes_1a15ba47bf6d50be34dc01fa524675dee6" kindref="member">planeCount</ref><sp/>+<sp/>(syncTimelineMeta<sp/>?<sp/>2<sp/>:<sp/>0)))<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer-&gt;<ref refid="class_k_win_1_1_graphics_buffer_1a7d0b964ea8c12167b315075b4de6cdfa" kindref="member">drop</ref>();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>backend-&gt;<ref refid="class_k_win_1_1_abstract_egl_backend_1a139917a79035d3f5d755332773642fc7" kindref="member">makeCurrent</ref>();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_dma_buf_screen_cast_buffer_1ab0b29adabbc752cb7f782e56f4a11c36" kindref="member">texture</ref><sp/>=<sp/>backend-&gt;<ref refid="class_k_win_1_1_abstract_egl_backend_1a95b2517e369cec56c2bc14f76b469b6d" kindref="member">importDmaBufAsTexture</ref>(*attrs);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_k_win_1_1_dma_buf_screen_cast_buffer_1ab0b29adabbc752cb7f782e56f4a11c36" kindref="member">texture</ref>)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer-&gt;<ref refid="class_k_win_1_1_graphics_buffer_1a7d0b964ea8c12167b315075b4de6cdfa" kindref="member">drop</ref>();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_dma_buf_screen_cast_buffer_1a53f0e2abe90acbecd7194b1c0ef6f2c3" kindref="member">framebuffer</ref><sp/>=<sp/>std::make_unique&lt;GLFramebuffer&gt;(<ref refid="class_k_win_1_1_dma_buf_screen_cast_buffer_1ab0b29adabbc752cb7f782e56f4a11c36" kindref="member">texture</ref>.get());</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_k_win_1_1_dma_buf_screen_cast_buffer_1a53f0e2abe90acbecd7194b1c0ef6f2c3" kindref="member">framebuffer</ref>-&gt;valid())<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer-&gt;<ref refid="class_k_win_1_1_graphics_buffer_1a7d0b964ea8c12167b315075b4de6cdfa" kindref="member">drop</ref>();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">spa_data<sp/>*spaData<sp/>=<sp/>pwBuffer-&gt;buffer-&gt;datas;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>attrs-&gt;<ref refid="struct_k_win_1_1_dma_buf_attributes_1a15ba47bf6d50be34dc01fa524675dee6" kindref="member">planeCount</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spaData[i].type<sp/>=<sp/>SPA_DATA_DmaBuf;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spaData[i].flags<sp/>=<sp/>SPA_DATA_FLAG_READWRITE;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spaData[i].mapoffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spaData[i].maxsize<sp/>=<sp/>i<sp/>==<sp/>0<sp/>?<sp/>attrs-&gt;<ref refid="struct_k_win_1_1_dma_buf_attributes_1a5eb6e58a329aa242bfa64cda33eafc99" kindref="member">pitch</ref>[i]<sp/>*<sp/>attrs-&gt;<ref refid="struct_k_win_1_1_dma_buf_attributes_1ad574e4be854c8ae0f7a1b32944726ebb" kindref="member">height</ref><sp/>:<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>dmabufs<sp/>don&apos;t<sp/>have<sp/>a<sp/>well<sp/>defined<sp/>size,<sp/>it<sp/>should<sp/>be<sp/>zero<sp/>but<sp/>some<sp/>clients<sp/>check<sp/>the<sp/>size<sp/>to<sp/>see<sp/>if<sp/>the<sp/>buffer<sp/>is<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spaData[i].fd<sp/>=<sp/>attrs-&gt;<ref refid="struct_k_win_1_1_dma_buf_attributes_1ab08504d7f6b7b4d362538b0ec2c5a70b" kindref="member">fd</ref>[i].get();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spaData[i].data<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spaData[i].chunk-&gt;offset<sp/>=<sp/>attrs-&gt;<ref refid="struct_k_win_1_1_dma_buf_attributes_1a58942c624074cec2f255a93d8c339a05" kindref="member">offset</ref>[i];</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spaData[i].chunk-&gt;size<sp/>=<sp/>spaData[i].maxsize;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spaData[i].chunk-&gt;stride<sp/>=<sp/>attrs-&gt;<ref refid="struct_k_win_1_1_dma_buf_attributes_1a5eb6e58a329aa242bfa64cda33eafc99" kindref="member">pitch</ref>[i];</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spaData[i].chunk-&gt;flags<sp/>=<sp/>SPA_CHUNK_FLAG_NONE;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;SyncTimeline&gt;<sp/><ref refid="class_k_win_1_1_dma_buf_screen_cast_buffer_1a87a86f4ed29597dfacdb8212846e0625" kindref="member">synctimeline</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(syncTimelineMeta)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_dma_buf_screen_cast_buffer_1a87a86f4ed29597dfacdb8212846e0625" kindref="member">synctimeline</ref><sp/>=<sp/>std::make_unique&lt;SyncTimeline&gt;(backend-&gt;<ref refid="class_k_win_1_1_render_backend_1a9135e39ee4f8aed8dcfd2771fe0a7773" kindref="member">drmDevice</ref>()-&gt;<ref refid="class_k_win_1_1_drm_device_1a93f8de2aefa3a946c09d10d67be31db9" kindref="member">fileDescriptor</ref>());</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_file_descriptor" kindref="compound">FileDescriptor</ref><sp/>&amp;syncobjfd<sp/>=<sp/><ref refid="class_k_win_1_1_dma_buf_screen_cast_buffer_1a87a86f4ed29597dfacdb8212846e0625" kindref="member">synctimeline</ref>-&gt;fileDescriptor();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!syncobjfd.<ref refid="class_k_win_1_1_file_descriptor_1ae7440b8498e75596486adce9934a416d" kindref="member">isValid</ref>())<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer-&gt;<ref refid="class_k_win_1_1_graphics_buffer_1a7d0b964ea8c12167b315075b4de6cdfa" kindref="member">drop</ref>();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Signal<sp/>the<sp/>first<sp/>timeline<sp/>point,<sp/>so<sp/>the<sp/>very<sp/>first<sp/>recording<sp/>can<sp/>proceed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_dma_buf_screen_cast_buffer_1a87a86f4ed29597dfacdb8212846e0625" kindref="member">synctimeline</ref>-&gt;signal(0);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spa_data<sp/>&amp;acquireData<sp/>=<sp/>spaData[attrs-&gt;<ref refid="struct_k_win_1_1_dma_buf_attributes_1a15ba47bf6d50be34dc01fa524675dee6" kindref="member">planeCount</ref>];</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acquireData.type<sp/>=<sp/>SPA_DATA_SyncObj;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acquireData.flags<sp/>=<sp/>SPA_DATA_FLAG_READABLE;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acquireData.fd<sp/>=<sp/>syncobjfd.<ref refid="class_k_win_1_1_file_descriptor_1ab59a3ce5116b1e7718d8fb7994d47a41" kindref="member">get</ref>();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spa_data<sp/>&amp;releaseData<sp/>=<sp/>spaData[attrs-&gt;<ref refid="struct_k_win_1_1_dma_buf_attributes_1a15ba47bf6d50be34dc01fa524675dee6" kindref="member">planeCount</ref><sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>releaseData.type<sp/>=<sp/>SPA_DATA_SyncObj;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>releaseData.flags<sp/>=<sp/>SPA_DATA_FLAG_READABLE;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>releaseData.fd<sp/>=<sp/>syncobjfd.<ref refid="class_k_win_1_1_file_descriptor_1ab59a3ce5116b1e7718d8fb7994d47a41" kindref="member">get</ref>();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>DmaBufScreenCastBuffer(buffer,<sp/>std::move(<ref refid="class_k_win_1_1_dma_buf_screen_cast_buffer_1ab0b29adabbc752cb7f782e56f4a11c36" kindref="member">texture</ref>),<sp/>std::move(<ref refid="class_k_win_1_1_dma_buf_screen_cast_buffer_1a53f0e2abe90acbecd7194b1c0ef6f2c3" kindref="member">framebuffer</ref>),<sp/>std::move(<ref refid="class_k_win_1_1_dma_buf_screen_cast_buffer_1a87a86f4ed29597dfacdb8212846e0625" kindref="member">synctimeline</ref>));</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">MemFdScreenCastBuffer::MemFdScreenCastBuffer(<ref refid="class_k_win_1_1_graphics_buffer" kindref="compound">GraphicsBuffer</ref><sp/>*buffer,<sp/><ref refid="class_k_win_1_1_graphics_buffer_view" kindref="compound">GraphicsBufferView</ref><sp/>&amp;&amp;view)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_screen_cast_buffer" kindref="compound">ScreenCastBuffer</ref>(buffer)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>view(std::move(view))</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="class_k_win_1_1_mem_fd_screen_cast_buffer_1a60fe80bd556c5968e4baa510658ff6c2" refkind="member"><highlight class="normal">MemFdScreenCastBuffer<sp/>*<ref refid="class_k_win_1_1_mem_fd_screen_cast_buffer_1a60fe80bd556c5968e4baa510658ff6c2" kindref="member">MemFdScreenCastBuffer::create</ref>(pw_buffer<sp/>*pwBuffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_graphics_buffer_options" kindref="compound">GraphicsBufferOptions</ref><sp/>&amp;<ref refid="namespace_k_win_1aacddce7916a99bb943d9071c40754c1c" kindref="member">options</ref>)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_graphics_buffer" kindref="compound">GraphicsBuffer</ref><sp/>*buffer<sp/>=<sp/><ref refid="class_k_win_1_1_shm_graphics_buffer_allocator" kindref="compound">ShmGraphicsBufferAllocator</ref>().<ref refid="class_k_win_1_1_shm_graphics_buffer_allocator_1a94f2d1ed24a6becdef0578115d7d001c" kindref="member">allocate</ref>(<ref refid="namespace_k_win_1aacddce7916a99bb943d9071c40754c1c" kindref="member">options</ref>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!buffer)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_graphics_buffer_view" kindref="compound">GraphicsBufferView</ref><sp/><ref refid="class_k_win_1_1_mem_fd_screen_cast_buffer_1ae8d9f0222815fd99aa8728a45c94bc73" kindref="member">view</ref>(buffer,<sp/><ref refid="class_k_win_1_1_graphics_buffer_1ab01475abfaf9300dfe2ba846db7e4ae4a97a8598815489519310048c0f60c2059" kindref="member">GraphicsBuffer::Read</ref><sp/>|<sp/><ref refid="class_k_win_1_1_graphics_buffer_1ab01475abfaf9300dfe2ba846db7e4ae4aa0c38edda47690199b4462b188a830db" kindref="member">GraphicsBuffer::Write</ref>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_k_win_1_1_mem_fd_screen_cast_buffer_1ae8d9f0222815fd99aa8728a45c94bc73" kindref="member">view</ref>.isNull())<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer-&gt;<ref refid="class_k_win_1_1_graphics_buffer_1a7d0b964ea8c12167b315075b4de6cdfa" kindref="member">drop</ref>();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_shm_attributes" kindref="compound">ShmAttributes</ref><sp/>*attributes<sp/>=<sp/>buffer-&gt;<ref refid="class_k_win_1_1_graphics_buffer_1ac2be51e8fa6ea0bcf1c9368b3605aa57" kindref="member">shmAttributes</ref>();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">spa_data<sp/>*spaData<sp/>=<sp/>pwBuffer-&gt;buffer-&gt;datas;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>spaData-&gt;type<sp/>=<sp/>SPA_DATA_MemFd;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>spaData-&gt;flags<sp/>=<sp/>SPA_DATA_FLAG_READWRITE;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>spaData-&gt;mapoffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>spaData-&gt;maxsize<sp/>=<sp/>attributes-&gt;<ref refid="struct_k_win_1_1_shm_attributes_1a1e71811a0b204c31ef64ae79853105a7" kindref="member">stride</ref><sp/>*<sp/>attributes-&gt;<ref refid="struct_k_win_1_1_shm_attributes_1aed098a9f6b9d9a32f94c36d81ca8d637" kindref="member">size</ref>.height();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>spaData-&gt;fd<sp/>=<sp/>attributes-&gt;<ref refid="struct_k_win_1_1_shm_attributes_1a0755549675cbdfbc0ba48cf6ce7a6ff6" kindref="member">fd</ref>.<ref refid="class_k_win_1_1_file_descriptor_1ab59a3ce5116b1e7718d8fb7994d47a41" kindref="member">get</ref>();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>spaData-&gt;data<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>spaData-&gt;chunk-&gt;offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>spaData-&gt;chunk-&gt;size<sp/>=<sp/>spaData-&gt;maxsize;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>spaData-&gt;chunk-&gt;stride<sp/>=<sp/>attributes-&gt;<ref refid="struct_k_win_1_1_shm_attributes_1a1e71811a0b204c31ef64ae79853105a7" kindref="member">stride</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>spaData-&gt;chunk-&gt;flags<sp/>=<sp/>SPA_CHUNK_FLAG_NONE;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MemFdScreenCastBuffer(buffer,<sp/>std::move(<ref refid="class_k_win_1_1_mem_fd_screen_cast_buffer_1ae8d9f0222815fd99aa8728a45c94bc73" kindref="member">view</ref>));</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>KWin</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="kwin/src/plugins/screencast/screencastbuffer.cpp"/>
  </compounddef>
</doxygen>
