<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_ram_file" kind="class" language="C++" prot="public">
    <compoundname>KWin::RamFile</compoundname>
    <includes refid="ramfile_8h" local="no">ramfile.h</includes>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_k_win_1_1_ram_file_1aa6220723e82ce49c7cf06248f28caf5a" prot="public" static="no" strong="yes">
        <type></type>
        <name>Flag</name>
        <qualifiedname>KWin::RamFile::Flag</qualifiedname>
        <enumvalue id="class_k_win_1_1_ram_file_1aa6220723e82ce49c7cf06248f28caf5aa131f7a8057d8bfd6b4e8e52694e36412" prot="public">
          <name>SealWrite</name>
          <initializer>= 1 &lt;&lt; 0</initializer>
          <briefdescription>
<para>Seal the file descriptor for writing. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flags to use when creating the file.</para>
<para><simplesect kind="note"><para>Check with <ref refid="class_k_win_1_1_ram_file_1acc028c7c527d4518cfec8fdd403cd751" kindref="member">effectiveFlags()</ref> which flags actually apply after the file was created. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/ramfile.h" line="56" column="5" bodyfile="kwin/src/utils/ramfile.h" bodystart="56" bodyend="58"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_ram_file_1a550845d93550e19dd84a2e816a6d623c" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int KWin::RamFile::m_size</definition>
        <argsstring></argsstring>
        <name>m_size</name>
        <qualifiedname>KWin::RamFile::m_size</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/ramfile.h" line="108" column="9" bodyfile="kwin/src/utils/ramfile.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_ram_file_1aefe4333ba3f8ca94c94fce7bb0909290" prot="private" static="no" mutable="no">
        <type>Flags</type>
        <definition>Flags KWin::RamFile::m_flags</definition>
        <argsstring></argsstring>
        <name>m_flags</name>
        <qualifiedname>KWin::RamFile::m_flags</qualifiedname>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/ramfile.h" line="109" column="11" bodyfile="kwin/src/utils/ramfile.h" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_ram_file_1a89c8e39193576ffce5063ffa395d6e17" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; QTemporaryFile &gt;</type>
        <definition>std::unique_ptr&lt;QTemporaryFile&gt; KWin::RamFile::m_tmp</definition>
        <argsstring></argsstring>
        <name>m_tmp</name>
        <qualifiedname>KWin::RamFile::m_tmp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/ramfile.h" line="114" column="21" bodyfile="kwin/src/utils/ramfile.h" bodystart="114" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_ram_file_1a82f9d069a1c77160b7431c97da23a078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::RamFile::RamFile</definition>
        <argsstring>()=default</argsstring>
        <name>RamFile</name>
        <qualifiedname>KWin::RamFile::RamFile</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/ramfile.h" line="61" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_ram_file_1a9ae8302111bc921f7a04d717dfdc4a0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::RamFile::RamFile</definition>
        <argsstring>(const char *name, const void *inData, int size, Flags flags={})</argsstring>
        <name>RamFile</name>
        <qualifiedname>KWin::RamFile::RamFile</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>inData</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>Flags</type>
          <declname>flags</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a file of given size with given data.</para>
<para><simplesect kind="note"><para>You should call seal() after copying the data into the file.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The file name, useful for debugging. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to store in the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags to use when creating the file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/ramfile.h" line="72" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_ram_file_1a370a8c285130ddd6c92b2036a523b3ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::RamFile::RamFile</definition>
        <argsstring>(RamFile &amp;&amp;other) Q_DECL_NOEXCEPT</argsstring>
        <name>RamFile</name>
        <qualifiedname>KWin::RamFile::RamFile</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_ram_file" kindref="compound">RamFile</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/ramfile.h" line="74" column="5" bodyfile="kwin/src/utils/ramfile.cpp" bodystart="93" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_ram_file_1a3bbc07992e554bb802bd795d15afe432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_ram_file" kindref="compound">RamFile</ref> &amp;</type>
        <definition>RamFile &amp; KWin::RamFile::operator=</definition>
        <argsstring>(RamFile &amp;&amp;other) Q_DECL_NOEXCEPT</argsstring>
        <name>operator=</name>
        <qualifiedname>KWin::RamFile::operator=</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_ram_file" kindref="compound">RamFile</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/ramfile.h" line="75" column="13" bodyfile="kwin/src/utils/ramfile.cpp" bodystart="104" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_ram_file_1ad4b86be523443ac771ce4bf6c990d574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::RamFile::~RamFile</definition>
        <argsstring>()</argsstring>
        <name>~RamFile</name>
        <qualifiedname>KWin::RamFile::~RamFile</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroys the file. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/ramfile.h" line="80" column="5" bodyfile="kwin/src/utils/ramfile.cpp" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_ram_file_1a5d80a5c04f66b119af238ff9de7beef2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::RamFile::isValid</definition>
        <argsstring>() const</argsstring>
        <name>isValid</name>
        <qualifiedname>KWin::RamFile::isValid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this instance contains a valid file descriptor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/ramfile.h" line="85" column="10" bodyfile="kwin/src/utils/ramfile.cpp" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_ram_file_1acc028c7c527d4518cfec8fdd403cd751" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Flags</type>
        <definition>RamFile::Flags KWin::RamFile::effectiveFlags</definition>
        <argsstring>() const</argsstring>
        <name>effectiveFlags</name>
        <qualifiedname>KWin::RamFile::effectiveFlags</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The flags that are effectively applied.</para>
<para>For instance, even though SealWrite was passed in the constructor, it might not be supported. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/ramfile.h" line="92" column="11" bodyfile="kwin/src/utils/ramfile.cpp" bodystart="136" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_ram_file_1a27841dbb56a9f95d246d318b0302610b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::RamFile::fd</definition>
        <argsstring>() const</argsstring>
        <name>fd</name>
        <qualifiedname>KWin::RamFile::fd</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The underlying file descriptor</para>
<para><simplesect kind="return"><para>The fd, or -1 if there is none. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/ramfile.h" line="99" column="9" bodyfile="kwin/src/utils/ramfile.cpp" bodystart="150" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_ram_file_1acf461bbf20b5bffe3b73d9ab798a5389" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::RamFile::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>KWin::RamFile::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The size of the file </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/ramfile.h" line="103" column="9" bodyfile="kwin/src/utils/ramfile.cpp" bodystart="159" bodyend="162"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_k_win_1_1_ram_file_1a4fad310a520858abb8fb599f3fff6a88" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::RamFile::cleanup</definition>
        <argsstring>()</argsstring>
        <name>cleanup</name>
        <qualifiedname>KWin::RamFile::cleanup</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/ramfile.h" line="106" column="10" bodyfile="kwin/src/utils/ramfile.cpp" bodystart="122" bodyend="129"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Creates a file in memory. </para>
    </briefdescription>
    <detaileddescription>
<para>This is useful for passing larger data to clients, for example the xkeymap.</para>
<para>If memfd is supported, it is used, otherwise a temporary file is created.</para>
<para><simplesect kind="note"><para>It is advisable not to send the same file descriptor out to multiple clients unless it is sealed for writing. Check which flags actually apply before handing out the file descriptor.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_ram_file_1acc028c7c527d4518cfec8fdd403cd751" kindref="member">effectiveFlags()</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="kwin/src/utils/ramfile.h" line="47" column="1" bodyfile="kwin/src/utils/ramfile.h" bodystart="48" bodyend="116"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_ram_file_1a4fad310a520858abb8fb599f3fff6a88" prot="private" virt="non-virtual"><scope>KWin::RamFile</scope><name>cleanup</name></member>
      <member refid="class_k_win_1_1_ram_file_1acc028c7c527d4518cfec8fdd403cd751" prot="public" virt="non-virtual"><scope>KWin::RamFile</scope><name>effectiveFlags</name></member>
      <member refid="class_k_win_1_1_ram_file_1a27841dbb56a9f95d246d318b0302610b" prot="public" virt="non-virtual"><scope>KWin::RamFile</scope><name>fd</name></member>
      <member refid="class_k_win_1_1_ram_file_1aa6220723e82ce49c7cf06248f28caf5a" prot="public" virt="non-virtual"><scope>KWin::RamFile</scope><name>Flag</name></member>
      <member refid="class_k_win_1_1_ram_file_1a5d80a5c04f66b119af238ff9de7beef2" prot="public" virt="non-virtual"><scope>KWin::RamFile</scope><name>isValid</name></member>
      <member refid="class_k_win_1_1_ram_file_1aefe4333ba3f8ca94c94fce7bb0909290" prot="private" virt="non-virtual"><scope>KWin::RamFile</scope><name>m_flags</name></member>
      <member refid="class_k_win_1_1_ram_file_1a550845d93550e19dd84a2e816a6d623c" prot="private" virt="non-virtual"><scope>KWin::RamFile</scope><name>m_size</name></member>
      <member refid="class_k_win_1_1_ram_file_1a89c8e39193576ffce5063ffa395d6e17" prot="private" virt="non-virtual"><scope>KWin::RamFile</scope><name>m_tmp</name></member>
      <member refid="class_k_win_1_1_ram_file_1a3bbc07992e554bb802bd795d15afe432" prot="public" virt="non-virtual"><scope>KWin::RamFile</scope><name>operator=</name></member>
      <member refid="class_k_win_1_1_ram_file_1a82f9d069a1c77160b7431c97da23a078" prot="public" virt="non-virtual"><scope>KWin::RamFile</scope><name>RamFile</name></member>
      <member refid="class_k_win_1_1_ram_file_1a9ae8302111bc921f7a04d717dfdc4a0b" prot="public" virt="non-virtual"><scope>KWin::RamFile</scope><name>RamFile</name></member>
      <member refid="class_k_win_1_1_ram_file_1a370a8c285130ddd6c92b2036a523b3ad" prot="public" virt="non-virtual"><scope>KWin::RamFile</scope><name>RamFile</name></member>
      <member refid="class_k_win_1_1_ram_file_1acf461bbf20b5bffe3b73d9ab798a5389" prot="public" virt="non-virtual"><scope>KWin::RamFile</scope><name>size</name></member>
      <member refid="class_k_win_1_1_ram_file_1ad4b86be523443ac771ce4bf6c990d574" prot="public" virt="non-virtual"><scope>KWin::RamFile</scope><name>~RamFile</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
