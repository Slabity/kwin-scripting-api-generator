<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="test__virtualkeyboard__dbus_8cpp" kind="file" language="C++">
    <compoundname>test_virtualkeyboard_dbus.cpp</compoundname>
    <includes refid="kwin__wayland__test_8h" local="yes">kwin_wayland_test.h</includes>
    <includes local="yes">main.h</includes>
    <includes refid="virtualkeyboard__dbus_8h" local="yes">virtualkeyboard_dbus.h</includes>
    <includes refid="wayland__server_8h" local="yes">wayland_server.h</includes>
    <includes local="no">QDBusConnection</includes>
    <includes local="no">QDBusMessage</includes>
    <includes local="no">QDBusPendingReply</includes>
    <includes local="no">QSignalSpy</includes>
    <includes local="no">QTest</includes>
    <includes local="no">virtualkeyboardinterface.h</includes>
    <includes local="yes">test_virtualkeyboard_dbus.moc</includes>
    <incdepgraph>
      <node id="2">
        <label>kwin_wayland_test.h</label>
        <link refid="kwin__wayland__test_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>kwin/autotests/integration/test_virtualkeyboard_dbus.cpp</label>
        <link refid="test__virtualkeyboard__dbus_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>core/inputdevice.h</label>
        <link refid="inputdevice_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>effect/globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>input_event_spy.h</label>
        <link refid="input__event__spy_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>inputmethod.h</label>
        <link refid="inputmethod_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>virtualkeyboard_dbus.h</label>
        <link refid="virtualkeyboard__dbus_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>textinput.h</label>
        <link refid="textinput_8h"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>wayland/textinput_v2.h</label>
        <link refid="textinput__v2_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>wayland_server.h</label>
        <link refid="wayland__server_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>KWayland/Client/surface.h</label>
      </node>
      <node id="6">
        <label>QCoreApplication</label>
      </node>
      <node id="50">
        <label>QDBusConnection</label>
      </node>
      <node id="51">
        <label>QDBusMessage</label>
      </node>
      <node id="52">
        <label>QDBusPendingReply</label>
      </node>
      <node id="7">
        <label>QImage</label>
      </node>
      <node id="40">
        <label>QMetaType</label>
      </node>
      <node id="12">
        <label>QObject</label>
      </node>
      <node id="8">
        <label>QPoint</label>
      </node>
      <node id="46">
        <label>QPointer</label>
      </node>
      <node id="49">
        <label>QSet</label>
      </node>
      <node id="15">
        <label>QSignalSpy</label>
      </node>
      <node id="16">
        <label>QTest</label>
      </node>
      <node id="47">
        <label>QTimer</label>
      </node>
      <node id="9">
        <label>QVariant</label>
      </node>
      <node id="10">
        <label>QVector2D</label>
      </node>
      <node id="41">
        <label>QtGlobal</label>
      </node>
      <node id="45">
        <label>chrono</label>
      </node>
      <node id="5">
        <label>config-kwin.h</label>
      </node>
      <node id="11">
        <label>kwin_export.h</label>
      </node>
      <node id="13">
        <label>main.h</label>
      </node>
      <node id="38">
        <label>memory</label>
      </node>
      <node id="18">
        <label>optional</label>
      </node>
      <node id="19">
        <label>qwayland-color-management-v1.h</label>
      </node>
      <node id="20">
        <label>qwayland-cursor-shape-v1.h</label>
      </node>
      <node id="21">
        <label>qwayland-fake-input.h</label>
      </node>
      <node id="22">
        <label>qwayland-fractional-scale-v1.h</label>
      </node>
      <node id="23">
        <label>qwayland-idle-inhibit-unstable-v1.h</label>
      </node>
      <node id="24">
        <label>qwayland-input-method-unstable-v1.h</label>
      </node>
      <node id="25">
        <label>qwayland-kde-output-device-v2.h</label>
      </node>
      <node id="26">
        <label>qwayland-kde-output-management-v2.h</label>
      </node>
      <node id="27">
        <label>qwayland-kde-screen-edge-v1.h</label>
      </node>
      <node id="28">
        <label>qwayland-security-context-v1.h</label>
      </node>
      <node id="29">
        <label>qwayland-text-input-unstable-v3.h</label>
      </node>
      <node id="30">
        <label>qwayland-wlr-layer-shell-unstable-v1.h</label>
      </node>
      <node id="31">
        <label>qwayland-xdg-decoration-unstable-v1.h</label>
      </node>
      <node id="32">
        <label>qwayland-xdg-dialog-v1.h</label>
      </node>
      <node id="33">
        <label>qwayland-xdg-shell.h</label>
      </node>
      <node id="34">
        <label>qwayland-zkde-screencast-unstable-v1.h</label>
      </node>
      <node id="54">
        <label>test_virtualkeyboard_dbus.moc</label>
      </node>
      <node id="42">
        <label>utility</label>
      </node>
      <node id="43">
        <label>vector</label>
      </node>
      <node id="53">
        <label>virtualkeyboardinterface.h</label>
      </node>
      <node id="14">
        <label>window.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_virtual_keyboard_d_bus_test" prot="public">VirtualKeyboardDBusTest</innerclass>
    <sectiondef kind="var">
      <memberdef kind="variable" id="test__virtualkeyboard__dbus_8cpp_1a485d6ddd568caea0908934bfdb9fbadb" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString s_socketName</definition>
        <argsstring></argsstring>
        <name>s_socketName</name>
        <initializer>= QStringLiteral(&quot;wayland_test_kwin_virtualkeyboarddbus-0&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_virtualkeyboard_dbus.cpp" line="28" column="22" bodyfile="kwin/autotests/integration/test_virtualkeyboard_dbus.cpp" bodystart="28" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>KWin<sp/>-<sp/>the<sp/>KDE<sp/>window<sp/>manager</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>KDE<sp/>project.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2017<sp/>Martin<sp/>Flöser<sp/>&lt;mgraesslin@kde.org&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="kwin__wayland__test_8h" kindref="compound">kwin_wayland_test.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;main.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="virtualkeyboard__dbus_8h" kindref="compound">virtualkeyboard_dbus.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wayland__server_8h" kindref="compound">wayland_server.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QDBusConnection&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QDBusMessage&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QDBusPendingReply&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QSignalSpy&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QTest&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;virtualkeyboardinterface.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="class_k_win_1_1_virtual_keyboard_d_bus" kindref="compound">KWin::VirtualKeyboardDBus</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win" kindref="compound">KWin</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win_1_1_test" kindref="compound">KWin::Test</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>s_socketName<sp/>=<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;wayland_test_kwin_virtualkeyboarddbus-0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="class_virtual_keyboard_d_bus_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_virtual_keyboard_d_bus_test" kindref="compound">VirtualKeyboardDBusTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QObject</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Q_SLOTS:</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initTestCase();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testEnabled();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRequestEnabled_data();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRequestEnabled();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanup();</highlight></codeline>
<codeline lineno="40"><highlight class="normal">};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VirtualKeyboardDBusTest::initTestCase()</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>QDBusConnection::sessionBus().registerService(QStringLiteral(</highlight><highlight class="stringliteral">&quot;org.kde.kwin.testvirtualkeyboard&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;init(s_socketName));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a1373c61710748fcde7e428e05bd5f2cb" kindref="member">Test::setOutputConfig</ref>({</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QRect(0,<sp/>0,<sp/>1280,<sp/>1024),</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QRect(1280,<sp/>0,<sp/>1280,<sp/>1024),</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">WaylandTestApplication<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kwinApp())-&gt;setInputMethodServerToStart(</highlight><highlight class="stringliteral">&quot;internal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>kwinApp()-&gt;start();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1a36c6e87757c3c97858c55b650c9d304c" kindref="member">setupWaylandConnection</ref>(AdditionalWaylandInterface::Seat<sp/>|<sp/>AdditionalWaylandInterface::InputMethodV1<sp/>|<sp/>AdditionalWaylandInterface::TextInputManagerV2<sp/>|<sp/>AdditionalWaylandInterface::TextInputManagerV3));</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VirtualKeyboardDBusTest::init()</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>kwinApp()-&gt;inputMethod()-&gt;setEnabled(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VirtualKeyboardDBusTest::cleanup()</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a12755bae9118cb958baf0efbd222d7c8" kindref="member">Test::destroyWaylandConnection</ref>();</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VirtualKeyboardDBusTest::testEnabled()</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>VirtualKeyboardDBus<sp/>dbus(KWin::kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>());</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>OrgKdeKwinVirtualKeyboardInterface<sp/>iface(QStringLiteral(</highlight><highlight class="stringliteral">&quot;org.kde.kwin.testvirtualkeyboard&quot;</highlight><highlight class="normal">),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;/VirtualKeyboard&quot;</highlight><highlight class="normal">),<sp/>QDBusConnection::sessionBus());</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>helperChangedSpy(&amp;iface,<sp/>&amp;OrgKdeKwinVirtualKeyboardInterface::enabledChanged);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(dbus.isEnabled(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(dbus.property(</highlight><highlight class="stringliteral">&quot;enabled&quot;</highlight><highlight class="normal">).toBool(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>enabledChangedSpy(&amp;dbus,<sp/>&amp;<ref refid="class_virtual_keyboard_d_bus_1aa9c3b809ce999766fc013c14190b569e" kindref="member">VirtualKeyboardDBus::enabledChanged</ref>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(iface.isValid());</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(iface.enabled(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>dbus.setEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(enabledChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(helperChangedSpy.wait());</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(helperChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(dbus.isEnabled(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(dbus.property(</highlight><highlight class="stringliteral">&quot;enabled&quot;</highlight><highlight class="normal">).toBool(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(iface.enabled(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setting<sp/>again<sp/>to<sp/>enabled<sp/>should<sp/>not<sp/>change<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>dbus.setEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(enabledChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>back<sp/>to<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>dbus.setEnabled(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(enabledChangedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(helperChangedSpy.wait());</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(helperChangedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(dbus.isEnabled(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(dbus.property(</highlight><highlight class="stringliteral">&quot;enabled&quot;</highlight><highlight class="normal">).toBool(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(iface.enabled(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VirtualKeyboardDBusTest::testRequestEnabled_data()</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;QString&gt;(</highlight><highlight class="stringliteral">&quot;method&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;bool&gt;(</highlight><highlight class="stringliteral">&quot;expectedResult&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;enable&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;setEnabled&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;disable&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;setEnabled&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VirtualKeyboardDBusTest::testRequestEnabled()</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(QString,<sp/>method);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>expectedResult);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>VirtualKeyboardDBus<sp/>dbus(KWin::kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>());</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>OrgKdeKwinVirtualKeyboardInterface<sp/>iface(QStringLiteral(</highlight><highlight class="stringliteral">&quot;org.kde.kwin.testvirtualkeyboard&quot;</highlight><highlight class="normal">),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;/VirtualKeyboard&quot;</highlight><highlight class="normal">),<sp/>QDBusConnection::sessionBus());</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>iface.setEnabled(expectedResult);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>QTRY_COMPARE(iface.enabled(),<sp/>expectedResult);</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><ref refid="kwin__wayland__test_8h_1a105fcd0c1d5eb52370ab30db8ad37c4c" kindref="member">WAYLANDTEST_MAIN</ref>(<ref refid="class_virtual_keyboard_d_bus_test" kindref="compound">VirtualKeyboardDBusTest</ref>)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_virtualkeyboard_dbus.moc&quot;</highlight></codeline>
    </programlisting>
    <location file="kwin/autotests/integration/test_virtualkeyboard_dbus.cpp"/>
  </compounddef>
</doxygen>
