<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="workspacescene__opengl_8cpp" kind="file" language="C++">
    <compoundname>workspacescene_opengl.cpp</compoundname>
    <includes refid="workspacescene__opengl_8h" local="yes">workspacescene_opengl.h</includes>
    <includes refid="glplatform_8h" local="yes">opengl/glplatform.h</includes>
    <includes local="yes">compositor.h</includes>
    <includes refid="core_2output_8h" local="yes">core/output.h</includes>
    <includes refid="decoratedwindow_8h" local="yes">decorations/decoratedwindow.h</includes>
    <includes refid="itemrenderer__opengl_8h" local="yes">scene/itemrenderer_opengl.h</includes>
    <includes local="yes">shadow.h</includes>
    <includes local="yes">window.h</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">QMatrix4x4</includes>
    <includes local="no">QPainter</includes>
    <includes local="no">QStringList</includes>
    <includes local="no">QVector2D</includes>
    <includes local="no">QVector4D</includes>
    <includes local="no">QtMath</includes>
    <includes local="yes">moc_workspacescene_opengl.cpp</includes>
    <incdepgraph>
      <node id="6">
        <label>core/colorspace.h</label>
        <link refid="colorspace_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>core/graphicsbuffer.h</label>
        <link refid="graphicsbuffer_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>core/output.h</label>
        <link refid="core_2output_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>core/renderbackend.h</label>
        <link refid="renderbackend_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>core/renderlayerdelegate.h</label>
        <link refid="renderlayerdelegate_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>renderloop.h</label>
        <link refid="renderloop_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>core/rendertarget.h</label>
        <link refid="rendertarget_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>decorations/decoratedwindow.h</label>
        <link refid="decoratedwindow_8h"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>effect/globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>main.h</label>
        <link refid="main_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>opengl/eglcontext.h</label>
        <link refid="eglcontext_8h"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>opengl/glframebuffer.h</label>
        <link refid="glframebuffer_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>opengl/glplatform.h</label>
        <link refid="glplatform_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>opengl/glshader.h</label>
        <link refid="glshader_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>opengl/glshadermanager.h</label>
        <link refid="glshadermanager_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>opengl/gltexture.h</label>
        <link refid="gltexture_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>opengl/glutils.h</label>
        <link refid="glutils_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>opengl/glvertexbuffer.h</label>
        <link refid="glvertexbuffer_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>options.h</label>
        <link refid="options_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>platformsupport/scenes/opengl/openglbackend.h</label>
        <link refid="openglbackend_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>platformsupport/scenes/opengl/openglsurfacetexture.h</label>
        <link refid="openglsurfacetexture_8h"/>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>scene/decorationitem.h</label>
        <link refid="decorationitem_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>scene/item.h</label>
        <link refid="item_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>scene/itemgeometry.h</label>
        <link refid="itemgeometry_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>scene/itemrenderer.h</label>
        <link refid="itemrenderer_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>scene/itemrenderer_opengl.h</label>
        <link refid="itemrenderer__opengl_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>scene/scene.h</label>
        <link refid="scene_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>scene/shadowitem.h</label>
        <link refid="shadowitem_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>scene/surfaceitem.h</label>
        <link refid="surfaceitem_8h"/>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>scene/workspacescene.h</label>
        <link refid="workspacescene_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>kwin/src/scene/workspacescene_opengl.cpp</label>
        <link refid="workspacescene__opengl_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>workspacescene_opengl.h</label>
        <link refid="workspacescene__opengl_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>utils/edid.h</label>
        <link refid="edid_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>utils/filedescriptor.h</label>
        <link refid="filedescriptor_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>utils/version.h</label>
        <link refid="version_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>KConfigWatcher</label>
      </node>
      <node id="72">
        <label>KDecoration3/Private/DecoratedWindowPrivate</label>
      </node>
      <node id="67">
        <label>KSharedConfig</label>
      </node>
      <node id="68">
        <label>QAbstractNativeEventFilter</label>
      </node>
      <node id="69">
        <label>QApplication</label>
      </node>
      <node id="21">
        <label>QByteArray</label>
      </node>
      <node id="35">
        <label>QColor</label>
      </node>
      <node id="15">
        <label>QCoreApplication</label>
      </node>
      <node id="73">
        <label>QDeadlineTimer</label>
      </node>
      <node id="24">
        <label>QDebug</label>
      </node>
      <node id="48">
        <label>QExplicitlySharedDataPointer</label>
      </node>
      <node id="58">
        <label>QFlags</label>
      </node>
      <node id="16">
        <label>QImage</label>
      </node>
      <node id="22">
        <label>QList</label>
      </node>
      <node id="55">
        <label>QMatrix3x3</label>
      </node>
      <node id="8">
        <label>QMatrix4x4</label>
      </node>
      <node id="19">
        <label>QObject</label>
      </node>
      <node id="87">
        <label>QPainter</label>
      </node>
      <node id="17">
        <label>QPoint</label>
      </node>
      <node id="28">
        <label>QPointer</label>
      </node>
      <node id="70">
        <label>QProcessEnvironment</label>
      </node>
      <node id="25">
        <label>QRect</label>
      </node>
      <node id="30">
        <label>QRegion</label>
      </node>
      <node id="62">
        <label>QSet</label>
      </node>
      <node id="23">
        <label>QSize</label>
      </node>
      <node id="51">
        <label>QStack</label>
      </node>
      <node id="50">
        <label>QString</label>
      </node>
      <node id="88">
        <label>QStringList</label>
      </node>
      <node id="74">
        <label>QTimer</label>
      </node>
      <node id="39">
        <label>QTransform</label>
      </node>
      <node id="26">
        <label>QUuid</label>
      </node>
      <node id="18">
        <label>QVariant</label>
      </node>
      <node id="9">
        <label>QVector2D</label>
      </node>
      <node id="56">
        <label>QVector3D</label>
      </node>
      <node id="89">
        <label>QVector4D</label>
      </node>
      <node id="90">
        <label>QtMath</label>
      </node>
      <node id="44">
        <label>chrono</label>
      </node>
      <node id="85">
        <label>cmath</label>
      </node>
      <node id="63">
        <label>compositor.h</label>
      </node>
      <node id="14">
        <label>config-kwin.h</label>
      </node>
      <node id="86">
        <label>cstddef</label>
      </node>
      <node id="80">
        <label>deque</label>
      </node>
      <node id="52">
        <label>epoxy/egl.h</label>
      </node>
      <node id="36">
        <label>epoxy/gl.h</label>
      </node>
      <node id="60">
        <label>functional</label>
      </node>
      <node id="10">
        <label>kwin_export.h</label>
      </node>
      <node id="59">
        <label>map</label>
      </node>
      <node id="29">
        <label>memory</label>
      </node>
      <node id="91">
        <label>moc_workspacescene_opengl.cpp</label>
      </node>
      <node id="7">
        <label>optional</label>
      </node>
      <node id="37">
        <label>ranges</label>
      </node>
      <node id="83">
        <label>shadow.h</label>
      </node>
      <node id="38">
        <label>span</label>
      </node>
      <node id="82">
        <label>unordered_set</label>
      </node>
      <node id="79">
        <label>utility</label>
      </node>
      <node id="84">
        <label>window.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_k_win_1_1_decoration_shadow_texture_cache" prot="public">KWin::DecorationShadowTextureCache</innerclass>
    <innerclass refid="struct_k_win_1_1_decoration_shadow_texture_cache_1_1_data" prot="private">KWin::DecorationShadowTextureCache::Data</innerclass>
    <innernamespace refid="namespace_k_win">KWin</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>KWin<sp/>-<sp/>the<sp/>KDE<sp/>window<sp/>manager</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>KDE<sp/>project.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2006<sp/>Lubos<sp/>Lunak<sp/>&lt;l.lunak@kde.org&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2009,<sp/>2010,<sp/>2011<sp/>Martin<sp/>Gräßlin<sp/>&lt;mgraesslin@kde.org&gt;</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2019<sp/>Vlad<sp/>Zahorodnii<sp/>&lt;vlad.zahorodnii@kde.org&gt;</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/>Based<sp/>on<sp/>glcompmgr<sp/>code<sp/>by<sp/>Felix<sp/>Bellaby.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/>Using<sp/>code<sp/>from<sp/>Compiz<sp/>and<sp/>Beryl.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="13"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="workspacescene__opengl_8h" kindref="compound">workspacescene_opengl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="glplatform_8h" kindref="compound">opengl/glplatform.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;compositor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="core_2output_8h" kindref="compound">core/output.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="decoratedwindow_8h" kindref="compound">decorations/decoratedwindow.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="itemrenderer__opengl_8h" kindref="compound">scene/itemrenderer_opengl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shadow.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;window.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QMatrix4x4&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QPainter&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QStringList&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QVector2D&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QVector4D&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QtMath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win" kindref="compound">KWin</ref></highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/************************************************</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>SceneOpenGL</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>***********************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="class_k_win_1_1_workspace_scene_open_g_l_1a6abb994d9fc8624155cd29e755f2e246" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_workspace_scene_open_g_l_1a6abb994d9fc8624155cd29e755f2e246" kindref="member">WorkspaceSceneOpenGL::WorkspaceSceneOpenGL</ref>(<ref refid="class_k_win_1_1_open_g_l_backend" kindref="compound">OpenGLBackend</ref><sp/>*<ref refid="class_k_win_1_1_workspace_scene_open_g_l_1ad19a839971eb292e57a7af3fe59031ff" kindref="member">backend</ref>)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_workspace_scene_1ab9ce9437870a461d6de8f0340dff0e3c" kindref="member">WorkspaceScene</ref>(std::make_unique&lt;<ref refid="class_k_win_1_1_item_renderer_open_g_l" kindref="compound">ItemRendererOpenGL</ref>&gt;(<ref refid="class_k_win_1_1_workspace_scene_open_g_l_1ad19a839971eb292e57a7af3fe59031ff" kindref="member">backend</ref>-&gt;eglDisplayObject()))</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_backend(<ref refid="class_k_win_1_1_workspace_scene_open_g_l_1ad19a839971eb292e57a7af3fe59031ff" kindref="member">backend</ref>)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="class_k_win_1_1_workspace_scene_open_g_l_1ab70ed68b60db8fa70368e6ceeaacc602" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_workspace_scene_open_g_l_1ab70ed68b60db8fa70368e6ceeaacc602" kindref="member">WorkspaceSceneOpenGL::~WorkspaceSceneOpenGL</ref>()</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_workspace_scene_open_g_l_1a4be1eb5fa2bdb69b5fe088063375303b" kindref="member">makeOpenGLContextCurrent</ref>();</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="class_k_win_1_1_workspace_scene_open_g_l_1a4be1eb5fa2bdb69b5fe088063375303b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_workspace_scene_open_g_l_1a4be1eb5fa2bdb69b5fe088063375303b" kindref="member">WorkspaceSceneOpenGL::makeOpenGLContextCurrent</ref>()</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_backend-&gt;makeCurrent();</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="class_k_win_1_1_workspace_scene_open_g_l_1ab8d7b83fd309b929ce689a325239f887" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_workspace_scene_open_g_l_1ab8d7b83fd309b929ce689a325239f887" kindref="member">WorkspaceSceneOpenGL::doneOpenGLContextCurrent</ref>()</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>m_backend-&gt;doneCurrent();</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="class_k_win_1_1_workspace_scene_open_g_l_1afe3d0e5560eb41218cd87b6bbce24ff8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_workspace_scene_open_g_l_1afe3d0e5560eb41218cd87b6bbce24ff8" kindref="member">WorkspaceSceneOpenGL::supportsNativeFence</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="64"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_backend-&gt;supportsNativeFence();</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="class_k_win_1_1_workspace_scene_open_g_l_1adf785ada6c9b3436308f403d350cf85b" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_egl_context" kindref="compound">EglContext</ref><sp/>*<ref refid="class_k_win_1_1_workspace_scene_open_g_l_1adf785ada6c9b3436308f403d350cf85b" kindref="member">WorkspaceSceneOpenGL::openglContext</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="69"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_backend-&gt;openglContext();</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="class_k_win_1_1_workspace_scene_open_g_l_1ac7586d90d81440ae9046e86d084f95bb" refkind="member"><highlight class="normal">std::unique_ptr&lt;DecorationRenderer&gt;<sp/><ref refid="class_k_win_1_1_workspace_scene_open_g_l_1ac7586d90d81440ae9046e86d084f95bb" kindref="member">WorkspaceSceneOpenGL::createDecorationRenderer</ref>(<ref refid="class_k_win_1_1_decoration_1_1_decorated_window_impl" kindref="compound">Decoration::DecoratedWindowImpl</ref><sp/>*impl)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;SceneOpenGLDecorationRenderer&gt;(impl);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="class_k_win_1_1_workspace_scene_open_g_l_1a54ed19787439c722ec5489a9cc6afe45" refkind="member"><highlight class="normal">std::unique_ptr&lt;ShadowTextureProvider&gt;<sp/><ref refid="class_k_win_1_1_workspace_scene_open_g_l_1a54ed19787439c722ec5489a9cc6afe45" kindref="member">WorkspaceSceneOpenGL::createShadowTextureProvider</ref>(<ref refid="class_k_win_1_1_shadow" kindref="compound">Shadow</ref><sp/>*shadow)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;OpenGLShadowTextureProvider&gt;(shadow);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="class_k_win_1_1_workspace_scene_open_g_l_1ac815fe710e5c5006ad19ca6bab4cbd04" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_workspace_scene_open_g_l_1ac815fe710e5c5006ad19ca6bab4cbd04" kindref="member">WorkspaceSceneOpenGL::animationsSupported</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="84"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>context<sp/>=<sp/><ref refid="class_k_win_1_1_workspace_scene_open_g_l_1adf785ada6c9b3436308f403d350cf85b" kindref="member">openglContext</ref>();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>context<sp/>&amp;&amp;<sp/>!context-&gt;isSoftwareRenderer();</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="class_k_win_1_1_workspace_scene_open_g_l_1a8c95ca1b7e56cf56401da468578394a2" refkind="member"><highlight class="normal">std::pair&lt;std::shared_ptr&lt;GLTexture&gt;,<sp/><ref refid="class_k_win_1_1_color_description" kindref="compound">ColorDescription</ref>&gt;<sp/><ref refid="class_k_win_1_1_workspace_scene_open_g_l_1a8c95ca1b7e56cf56401da468578394a2" kindref="member">WorkspaceSceneOpenGL::textureForOutput</ref>(<ref refid="class_k_win_1_1_output" kindref="compound">Output</ref><sp/>*output)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="90"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_backend-&gt;textureForOutput(output);</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//****************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SceneOpenGL::Shadow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//****************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="class_k_win_1_1_decoration_shadow_texture_cache" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_k_win_1_1_decoration_shadow_texture_cache_1ad837e207be526a16cc7575c0460060e6" kindref="member">DecorationShadowTextureCache</ref></highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_decoration_shadow_texture_cache_1a32853654ec6fb7f4dd903d1758f5d953" kindref="member">~DecorationShadowTextureCache</ref>();</highlight></codeline>
<codeline lineno="101" refid="class_k_win_1_1_decoration_shadow_texture_cache_1ad837e207be526a16cc7575c0460060e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_decoration_shadow_texture_cache_1ad837e207be526a16cc7575c0460060e6" kindref="member">DecorationShadowTextureCache</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_decoration_shadow_texture_cache_1ad837e207be526a16cc7575c0460060e6" kindref="member">DecorationShadowTextureCache</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_decoration_shadow_texture_cache_1ad837e207be526a16cc7575c0460060e6" kindref="member">DecorationShadowTextureCache</ref><sp/>&amp;<ref refid="class_k_win_1_1_decoration_shadow_texture_cache_1a0a0eca4aa9085610d0dcfdbb382b680c" kindref="member">instance</ref>();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_decoration_shadow_texture_cache_1a6329688e90875ed42ebc8b2935e0e270" kindref="member">unregister</ref>(<ref refid="class_k_win_1_1_shadow_texture_provider" kindref="compound">ShadowTextureProvider</ref><sp/>*provider);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;GLTexture&gt;<sp/><ref refid="class_k_win_1_1_decoration_shadow_texture_cache_1a484fd1b7ab0479fa5ca5d9ef7238f3e8" kindref="member">getTexture</ref>(<ref refid="class_k_win_1_1_shadow_texture_provider" kindref="compound">ShadowTextureProvider</ref><sp/>*provider);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_decoration_shadow_texture_cache_1ad837e207be526a16cc7575c0460060e6" kindref="member">DecorationShadowTextureCache</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Data</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;GLTexture&gt;<sp/>texture;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QList&lt;ShadowTextureProvider<sp/>*&gt;<sp/>providers;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>QHash&lt;KDecoration3::DecorationShadow<sp/>*,<sp/>Data&gt;<sp/>m_cache;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="class_k_win_1_1_decoration_shadow_texture_cache_1a0a0eca4aa9085610d0dcfdbb382b680c" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_decoration_shadow_texture_cache_1ad837e207be526a16cc7575c0460060e6" kindref="member">DecorationShadowTextureCache</ref><sp/>&amp;<ref refid="class_k_win_1_1_decoration_shadow_texture_cache_1a0a0eca4aa9085610d0dcfdbb382b680c" kindref="member">DecorationShadowTextureCache::instance</ref>()</highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_decoration_shadow_texture_cache_1ad837e207be526a16cc7575c0460060e6" kindref="member">DecorationShadowTextureCache</ref><sp/>s_instance;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_instance;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="class_k_win_1_1_decoration_shadow_texture_cache_1a32853654ec6fb7f4dd903d1758f5d953" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_decoration_shadow_texture_cache_1a32853654ec6fb7f4dd903d1758f5d953" kindref="member">DecorationShadowTextureCache::~DecorationShadowTextureCache</ref>()</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_ASSERT(m_cache.isEmpty());</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="class_k_win_1_1_decoration_shadow_texture_cache_1a6329688e90875ed42ebc8b2935e0e270" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_decoration_shadow_texture_cache_1a6329688e90875ed42ebc8b2935e0e270" kindref="member">DecorationShadowTextureCache::unregister</ref>(<ref refid="class_k_win_1_1_shadow_texture_provider" kindref="compound">ShadowTextureProvider</ref><sp/>*provider)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>m_cache.begin();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>m_cache.end())<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;d<sp/>=<sp/>it.value();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>whether<sp/>the<sp/>Vector<sp/>of<sp/>Shadows<sp/>contains<sp/>our<sp/>shadow<sp/>and<sp/>remove<sp/>all<sp/>of<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>glIt<sp/>=<sp/>d.providers.begin();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(glIt<sp/>!=<sp/>d.providers.end())<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*glIt<sp/>==<sp/>provider)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glIt<sp/>=<sp/>d.providers.erase(glIt);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glIt++;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>are<sp/>no<sp/>shadows<sp/>any<sp/>more<sp/>we<sp/>can<sp/>erase<sp/>the<sp/>cache<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d.providers.isEmpty())<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>m_cache.erase(it);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it++;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="class_k_win_1_1_decoration_shadow_texture_cache_1a484fd1b7ab0479fa5ca5d9ef7238f3e8" refkind="member"><highlight class="normal">std::shared_ptr&lt;GLTexture&gt;<sp/><ref refid="class_k_win_1_1_decoration_shadow_texture_cache_1a484fd1b7ab0479fa5ca5d9ef7238f3e8" kindref="member">DecorationShadowTextureCache::getTexture</ref>(<ref refid="class_k_win_1_1_shadow_texture_provider" kindref="compound">ShadowTextureProvider</ref><sp/>*provider)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_shadow" kindref="compound">Shadow</ref><sp/>*shadow<sp/>=<sp/>provider-&gt;<ref refid="class_k_win_1_1_shadow_texture_provider_1afa381d8ba759cd5ecacd1c9a65546d7f" kindref="member">shadow</ref>();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_ASSERT(shadow-&gt;<ref refid="class_k_win_1_1_shadow_1a172a36c5f51d4f11331b854f28585eee" kindref="member">hasDecorationShadow</ref>());</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_decoration_shadow_texture_cache_1a6329688e90875ed42ebc8b2935e0e270" kindref="member">unregister</ref>(provider);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>decoShadow<sp/>=<sp/>shadow-&gt;<ref refid="class_k_win_1_1_shadow_1a51f41f1562946ef2c13407a6b98b843e" kindref="member">decorationShadow</ref>().lock();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_ASSERT(decoShadow);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>m_cache.find(decoShadow.get());</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>m_cache.end())<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q_ASSERT(!it.value().providers.contains(provider));</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it.value().providers<sp/>&lt;&lt;<sp/>provider;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it.value().texture;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>Data<sp/>d;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>d.providers<sp/>&lt;&lt;<sp/>provider;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>d.texture<sp/>=<sp/><ref refid="class_k_win_1_1_g_l_texture_1abfb1321ce70899df263d8c8db90a2d59" kindref="member">GLTexture::upload</ref>(shadow-&gt;<ref refid="class_k_win_1_1_shadow_1a88ba712743d4e1430c62991d89e95aad" kindref="member">decorationShadowImage</ref>());</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!d.texture)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>d.texture-&gt;setFilter(GL_LINEAR);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>d.texture-&gt;setWrapMode(GL_CLAMP_TO_EDGE);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cache.insert(decoShadow.get(),<sp/>d);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d.texture;</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="class_k_win_1_1_open_g_l_shadow_texture_provider_1a8cdfddae0bed8ddce83f50ffbe9de52c" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_open_g_l_shadow_texture_provider_1a8cdfddae0bed8ddce83f50ffbe9de52c" kindref="member">OpenGLShadowTextureProvider::OpenGLShadowTextureProvider</ref>(<ref refid="class_k_win_1_1_shadow" kindref="compound">Shadow</ref><sp/>*<ref refid="class_k_win_1_1_shadow_texture_provider_1afa381d8ba759cd5ecacd1c9a65546d7f" kindref="member">shadow</ref>)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_shadow_texture_provider_1ac7561751e26c54e1f535ae4211fffd3a" kindref="member">ShadowTextureProvider</ref>(<ref refid="class_k_win_1_1_shadow_texture_provider_1afa381d8ba759cd5ecacd1c9a65546d7f" kindref="member">shadow</ref>)</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="class_k_win_1_1_open_g_l_shadow_texture_provider_1ab8e29139ca61c4ab1a775dc7411e038f" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_open_g_l_shadow_texture_provider_1ab8e29139ca61c4ab1a775dc7411e038f" kindref="member">OpenGLShadowTextureProvider::~OpenGLShadowTextureProvider</ref>()</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_texture)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_compositor_1aec1859708602d6270fb960c919a23cd7" kindref="member">Compositor::self</ref>()-&gt;<ref refid="class_k_win_1_1_compositor_1a42a38d690d77c464869c520189c99904" kindref="member">scene</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_scene_1a2f1a696b3c4f2a1bc4a73611f828491b" kindref="member">makeOpenGLContextCurrent</ref>();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_decoration_shadow_texture_cache_1a0a0eca4aa9085610d0dcfdbb382b680c" kindref="member">DecorationShadowTextureCache::instance</ref>().<ref refid="class_k_win_1_1_decoration_shadow_texture_cache_1a6329688e90875ed42ebc8b2935e0e270" kindref="member">unregister</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_texture.reset();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="class_k_win_1_1_open_g_l_shadow_texture_provider_1a8c5df5e9acd541f876f13e1f4a8616a7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_open_g_l_shadow_texture_provider_1a8c5df5e9acd541f876f13e1f4a8616a7" kindref="member">OpenGLShadowTextureProvider::update</ref>()</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_k_win_1_1_shadow_texture_provider_1a1a6542fbd5d0ec08360149c593df06b1" kindref="member">m_shadow</ref>-&gt;hasDecorationShadow())<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>simplifies<sp/>a<sp/>lot<sp/>by<sp/>going<sp/>directly<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_texture<sp/>=<sp/><ref refid="class_k_win_1_1_decoration_shadow_texture_cache_1a0a0eca4aa9085610d0dcfdbb382b680c" kindref="member">DecorationShadowTextureCache::instance</ref>().<ref refid="class_k_win_1_1_decoration_shadow_texture_cache_1a484fd1b7ab0479fa5ca5d9ef7238f3e8" kindref="member">getTexture</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QSize<sp/>top(<ref refid="class_k_win_1_1_shadow_texture_provider_1a1a6542fbd5d0ec08360149c593df06b1" kindref="member">m_shadow</ref>-&gt;shadowElement(<ref refid="class_k_win_1_1_shadow_1a6a192b9550b29d4afc4fc35bafb34831adf6d4cf94e94501f18efe800939cd5f5" kindref="member">Shadow::ShadowElementTop</ref>).size());</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QSize<sp/>topRight(<ref refid="class_k_win_1_1_shadow_texture_provider_1a1a6542fbd5d0ec08360149c593df06b1" kindref="member">m_shadow</ref>-&gt;shadowElement(<ref refid="class_k_win_1_1_shadow_1a6a192b9550b29d4afc4fc35bafb34831a3ccfa5250e10706982ba8d23c960ce57" kindref="member">Shadow::ShadowElementTopRight</ref>).size());</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QSize<sp/>right(<ref refid="class_k_win_1_1_shadow_texture_provider_1a1a6542fbd5d0ec08360149c593df06b1" kindref="member">m_shadow</ref>-&gt;shadowElement(<ref refid="class_k_win_1_1_shadow_1a6a192b9550b29d4afc4fc35bafb34831a9042c7ebc60e2d179a7adb5214098d14" kindref="member">Shadow::ShadowElementRight</ref>).size());</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QSize<sp/>bottom(<ref refid="class_k_win_1_1_shadow_texture_provider_1a1a6542fbd5d0ec08360149c593df06b1" kindref="member">m_shadow</ref>-&gt;shadowElement(<ref refid="class_k_win_1_1_shadow_1a6a192b9550b29d4afc4fc35bafb34831aeb4bdea8506dbc2aa86a2212e81ff0db" kindref="member">Shadow::ShadowElementBottom</ref>).size());</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QSize<sp/>bottomLeft(<ref refid="class_k_win_1_1_shadow_texture_provider_1a1a6542fbd5d0ec08360149c593df06b1" kindref="member">m_shadow</ref>-&gt;shadowElement(<ref refid="class_k_win_1_1_shadow_1a6a192b9550b29d4afc4fc35bafb34831a63e6898faf6db63e22671774e01a105b" kindref="member">Shadow::ShadowElementBottomLeft</ref>).size());</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QSize<sp/>left(<ref refid="class_k_win_1_1_shadow_texture_provider_1a1a6542fbd5d0ec08360149c593df06b1" kindref="member">m_shadow</ref>-&gt;shadowElement(<ref refid="class_k_win_1_1_shadow_1a6a192b9550b29d4afc4fc35bafb34831a1a5fe1c0bbccc5c840ba7fb03e2e5f92" kindref="member">Shadow::ShadowElementLeft</ref>).size());</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QSize<sp/>topLeft(<ref refid="class_k_win_1_1_shadow_texture_provider_1a1a6542fbd5d0ec08360149c593df06b1" kindref="member">m_shadow</ref>-&gt;shadowElement(<ref refid="class_k_win_1_1_shadow_1a6a192b9550b29d4afc4fc35bafb34831a8f679b453d9c274d86c8bff56aaf8eeb" kindref="member">Shadow::ShadowElementTopLeft</ref>).size());</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QSize<sp/>bottomRight(<ref refid="class_k_win_1_1_shadow_texture_provider_1a1a6542fbd5d0ec08360149c593df06b1" kindref="member">m_shadow</ref>-&gt;shadowElement(<ref refid="class_k_win_1_1_shadow_1a6a192b9550b29d4afc4fc35bafb34831a671716b1a7650293de1a7cc23c89d03d" kindref="member">Shadow::ShadowElementBottomRight</ref>).size());</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>std::max({topLeft.width(),<sp/>left.width(),<sp/>bottomLeft.width()})<sp/>+<sp/>std::max(top.width(),<sp/>bottom.width())<sp/>+<sp/>std::max({topRight.width(),<sp/>right.width(),<sp/>bottomRight.width()});</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height<sp/>=<sp/>std::max({topLeft.height(),<sp/>top.height(),<sp/>topRight.height()})<sp/>+<sp/>std::max(left.height(),<sp/>right.height())<sp/>+<sp/>std::max({bottomLeft.height(),<sp/>bottom.height(),<sp/>bottomRight.height()});</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>==<sp/>0<sp/>||<sp/>height<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>image(width,<sp/>height,<sp/>QImage::Format_ARGB32);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>image.fill(Qt::transparent);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>innerRectTop<sp/>=<sp/>std::max({topLeft.height(),<sp/>top.height(),<sp/>topRight.height()});</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>innerRectLeft<sp/>=<sp/>std::max({topLeft.width(),<sp/>left.width(),<sp/>bottomLeft.width()});</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>QPainter<sp/>p;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>p.begin(&amp;image);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>p.drawImage(QRectF(0,<sp/>0,<sp/>topLeft.width(),<sp/>topLeft.height()),<sp/><ref refid="class_k_win_1_1_shadow_texture_provider_1a1a6542fbd5d0ec08360149c593df06b1" kindref="member">m_shadow</ref>-&gt;shadowElement(<ref refid="class_k_win_1_1_shadow_1a6a192b9550b29d4afc4fc35bafb34831a8f679b453d9c274d86c8bff56aaf8eeb" kindref="member">Shadow::ShadowElementTopLeft</ref>));</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>p.drawImage(QRectF(innerRectLeft,<sp/>0,<sp/>top.width(),<sp/>top.height()),<sp/><ref refid="class_k_win_1_1_shadow_texture_provider_1a1a6542fbd5d0ec08360149c593df06b1" kindref="member">m_shadow</ref>-&gt;shadowElement(<ref refid="class_k_win_1_1_shadow_1a6a192b9550b29d4afc4fc35bafb34831adf6d4cf94e94501f18efe800939cd5f5" kindref="member">Shadow::ShadowElementTop</ref>));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>p.drawImage(QRectF(width<sp/>-<sp/>topRight.width(),<sp/>0,<sp/>topRight.width(),<sp/>topRight.height()),<sp/><ref refid="class_k_win_1_1_shadow_texture_provider_1a1a6542fbd5d0ec08360149c593df06b1" kindref="member">m_shadow</ref>-&gt;shadowElement(<ref refid="class_k_win_1_1_shadow_1a6a192b9550b29d4afc4fc35bafb34831a3ccfa5250e10706982ba8d23c960ce57" kindref="member">Shadow::ShadowElementTopRight</ref>));</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>p.drawImage(QRectF(0,<sp/>innerRectTop,<sp/>left.width(),<sp/>left.height()),<sp/><ref refid="class_k_win_1_1_shadow_texture_provider_1a1a6542fbd5d0ec08360149c593df06b1" kindref="member">m_shadow</ref>-&gt;shadowElement(<ref refid="class_k_win_1_1_shadow_1a6a192b9550b29d4afc4fc35bafb34831a1a5fe1c0bbccc5c840ba7fb03e2e5f92" kindref="member">Shadow::ShadowElementLeft</ref>));</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>p.drawImage(QRectF(width<sp/>-<sp/>right.width(),<sp/>innerRectTop,<sp/>right.width(),<sp/>right.height()),<sp/><ref refid="class_k_win_1_1_shadow_texture_provider_1a1a6542fbd5d0ec08360149c593df06b1" kindref="member">m_shadow</ref>-&gt;shadowElement(<ref refid="class_k_win_1_1_shadow_1a6a192b9550b29d4afc4fc35bafb34831a9042c7ebc60e2d179a7adb5214098d14" kindref="member">Shadow::ShadowElementRight</ref>));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>p.drawImage(QRectF(0,<sp/>height<sp/>-<sp/>bottomLeft.height(),<sp/>bottomLeft.width(),<sp/>bottomLeft.height()),<sp/><ref refid="class_k_win_1_1_shadow_texture_provider_1a1a6542fbd5d0ec08360149c593df06b1" kindref="member">m_shadow</ref>-&gt;shadowElement(<ref refid="class_k_win_1_1_shadow_1a6a192b9550b29d4afc4fc35bafb34831a63e6898faf6db63e22671774e01a105b" kindref="member">Shadow::ShadowElementBottomLeft</ref>));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>p.drawImage(QRectF(innerRectLeft,<sp/>height<sp/>-<sp/>bottom.height(),<sp/>bottom.width(),<sp/>bottom.height()),<sp/><ref refid="class_k_win_1_1_shadow_texture_provider_1a1a6542fbd5d0ec08360149c593df06b1" kindref="member">m_shadow</ref>-&gt;shadowElement(<ref refid="class_k_win_1_1_shadow_1a6a192b9550b29d4afc4fc35bafb34831aeb4bdea8506dbc2aa86a2212e81ff0db" kindref="member">Shadow::ShadowElementBottom</ref>));</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>p.drawImage(QRectF(width<sp/>-<sp/>bottomRight.width(),<sp/>height<sp/>-<sp/>bottomRight.height(),<sp/>bottomRight.width(),<sp/>bottomRight.height()),<sp/><ref refid="class_k_win_1_1_shadow_texture_provider_1a1a6542fbd5d0ec08360149c593df06b1" kindref="member">m_shadow</ref>-&gt;shadowElement(<ref refid="class_k_win_1_1_shadow_1a6a192b9550b29d4afc4fc35bafb34831a671716b1a7650293de1a7cc23c89d03d" kindref="member">Shadow::ShadowElementBottomRight</ref>));</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>p.end();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>image<sp/>is<sp/>alpha-only<sp/>in<sp/>practice,<sp/>and<sp/>if<sp/>so<sp/>convert<sp/>it<sp/>to<sp/>an<sp/>8-bpp<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>context<sp/>=<sp/><ref refid="class_k_win_1_1_egl_context_1a62c2db828c863aa0e37b7568df85154f" kindref="member">EglContext::currentContext</ref>();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!context-&gt;isOpenGLES()<sp/>&amp;&amp;<sp/>context-&gt;supportsTextureSwizzle()<sp/>&amp;&amp;<sp/>context-&gt;supportsRGTextures())<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QImage<sp/>alphaImage(image.size(),<sp/>QImage::Format_Alpha8);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>alphaOnly<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ptrdiff_t<sp/>y<sp/>=<sp/>0;<sp/>alphaOnly<sp/>&amp;&amp;<sp/>y<sp/>&lt;<sp/>image.height();<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>src<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint32_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(image.scanLine(y));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dst<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint8_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(alphaImage.scanLine(y));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ptrdiff_t<sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>image.width();<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src[x]<sp/>&amp;<sp/>0x00ffffff)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alphaOnly<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[x]<sp/>=<sp/>qAlpha(src[x]);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alphaOnly)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>=<sp/>alphaImage;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>m_texture<sp/>=<sp/><ref refid="class_k_win_1_1_g_l_texture_1abfb1321ce70899df263d8c8db90a2d59" kindref="member">GLTexture::upload</ref>(image);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_texture)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>m_texture-&gt;setFilter(GL_LINEAR);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>m_texture-&gt;setWrapMode(GL_CLAMP_TO_EDGE);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_texture-&gt;internalFormat()<sp/>==<sp/>GL_R8)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Swizzle<sp/>red<sp/>to<sp/>alpha<sp/>and<sp/>all<sp/>other<sp/>channels<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_texture-&gt;bind();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_texture-&gt;setSwizzle(GL_ZERO,<sp/>GL_ZERO,<sp/>GL_ZERO,<sp/>GL_RED);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="class_k_win_1_1_scene_open_g_l_decoration_renderer_1a5ec8ae9cc615121687d8aa93e84fd1ae" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_scene_open_g_l_decoration_renderer_1a5ec8ae9cc615121687d8aa93e84fd1ae" kindref="member">SceneOpenGLDecorationRenderer::SceneOpenGLDecorationRenderer</ref>(<ref refid="class_k_win_1_1_decoration_1_1_decorated_window_impl" kindref="compound">Decoration::DecoratedWindowImpl</ref><sp/>*<ref refid="class_k_win_1_1_decoration_renderer_1a52b8ae1cfb2dab0dbcee6e7adb5d22c8" kindref="member">client</ref>)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_decoration_renderer_1a6b0d3b790ea18bccec771e79fc51d19b" kindref="member">DecorationRenderer</ref>(<ref refid="class_k_win_1_1_decoration_renderer_1a52b8ae1cfb2dab0dbcee6e7adb5d22c8" kindref="member">client</ref>)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_texture()</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="class_k_win_1_1_scene_open_g_l_decoration_renderer_1a1cdfed438a3e0445cb21c653fb209ad9" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_scene_open_g_l_decoration_renderer_1a1cdfed438a3e0445cb21c653fb209ad9" kindref="member">SceneOpenGLDecorationRenderer::~SceneOpenGLDecorationRenderer</ref>()</highlight></codeline>
<codeline lineno="281"><highlight class="normal">{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_k_win_1_1_workspace_scene" kindref="compound">WorkspaceScene</ref><sp/>*scene<sp/>=<sp/><ref refid="class_k_win_1_1_compositor_1aec1859708602d6270fb960c919a23cd7" kindref="member">Compositor::self</ref>()-&gt;scene())<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scene-&gt;makeOpenGLContextCurrent();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clamp_row(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>right,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*src,<sp/>uint32_t<sp/>*dest)</highlight></codeline>
<codeline lineno="288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fill_n(dest,<sp/>left,<sp/>*src);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(src,<sp/>src<sp/>+<sp/>width,<sp/>dest<sp/>+<sp/>left);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fill_n(dest<sp/>+<sp/>left<sp/>+<sp/>width,<sp/>right,<sp/>*(src<sp/>+<sp/>width<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clamp_sides(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>right,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*src,<sp/>uint32_t<sp/>*dest)</highlight></codeline>
<codeline lineno="295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fill_n(dest,<sp/>left,<sp/>*src);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fill_n(dest<sp/>+<sp/>left<sp/>+<sp/>width,<sp/>right,<sp/>*(src<sp/>+<sp/>width<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clamp(QImage<sp/>&amp;image,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRect<sp/>&amp;viewport)</highlight></codeline>
<codeline lineno="301"><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_ASSERT(image.depth()<sp/>==<sp/>32);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(viewport.isEmpty())<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRect<sp/>rect<sp/>=<sp/>image.rect();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>viewport.left()<sp/>-<sp/>rect.left();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>top<sp/>=<sp/>viewport.top()<sp/>-<sp/>rect.top();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>right<sp/>=<sp/>rect.right()<sp/>-<sp/>viewport.right();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bottom<sp/>=<sp/>rect.bottom()<sp/>-<sp/>viewport.bottom();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>rect.width()<sp/>-<sp/>left<sp/>-<sp/>right;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height<sp/>=<sp/>rect.height()<sp/>-<sp/>top<sp/>-<sp/>bottom;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*firstRow<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint32_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(image.scanLine(top));</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*lastRow<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint32_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(image.scanLine(top<sp/>+<sp/>height<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>top;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*dest<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint32_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(image.scanLine(i));</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clamp_row(left,<sp/>width,<sp/>right,<sp/>firstRow<sp/>+<sp/>left,<sp/>dest);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>height;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*dest<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint32_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(image.scanLine(top<sp/>+<sp/>i));</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clamp_sides(left,<sp/>width,<sp/>right,<sp/>dest<sp/>+<sp/>left,<sp/>dest);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bottom;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*dest<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint32_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(image.scanLine(top<sp/>+<sp/>height<sp/>+<sp/>i));</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clamp_row(left,<sp/>width,<sp/>right,<sp/>lastRow<sp/>+<sp/>left,<sp/>dest);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="class_k_win_1_1_scene_open_g_l_decoration_renderer_1a71068049dc1109068c39cd2f26508bfa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_scene_open_g_l_decoration_renderer_1a71068049dc1109068c39cd2f26508bfa" kindref="member">SceneOpenGLDecorationRenderer::render</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegion<sp/>&amp;region)</highlight></codeline>
<codeline lineno="338"><highlight class="normal">{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_k_win_1_1_decoration_renderer_1a9b9d3b6c1cc0cd6b96be3995e3fda7db" kindref="member">areImageSizesDirty</ref>())<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resizeTexture();</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_decoration_renderer_1a0c6a20e5f86a6a49da3519e3963464b9" kindref="member">resetImageSizesDirty</ref>();</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_texture)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>invalid<sp/>sizes<sp/>we<sp/>get<sp/>no<sp/>texture,<sp/>see<sp/>BUG<sp/>361551</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>QRectF<sp/>left,<sp/>top,<sp/>right,<sp/>bottom;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_decoration_renderer_1a52b8ae1cfb2dab0dbcee6e7adb5d22c8" kindref="member">client</ref>()-&gt;<ref refid="class_k_win_1_1_decoration_1_1_decorated_window_impl_1a5c274a7d0d3dab00ec2ff0ea60f4f584" kindref="member">window</ref>()-&gt;<ref refid="class_k_win_1_1_window_1ac76883ec1ae279e0453ad6ea21a6a441" kindref="member">layoutDecorationRects</ref>(left,<sp/>top,<sp/>right,<sp/>bottom);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>qreal<sp/><ref refid="class_k_win_1_1_decoration_renderer_1ab87a90e1263b3abd13738561885da7a4" kindref="member">devicePixelRatio</ref><sp/>=<sp/><ref refid="class_k_win_1_1_decoration_renderer_1adcd894d78d515448862ebb556648cf5f" kindref="member">effectiveDevicePixelRatio</ref>();</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>topHeight<sp/>=<sp/>std::round(top.height()<sp/>*<sp/><ref refid="class_k_win_1_1_decoration_renderer_1ab87a90e1263b3abd13738561885da7a4" kindref="member">devicePixelRatio</ref>);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bottomHeight<sp/>=<sp/>std::round(bottom.height()<sp/>*<sp/><ref refid="class_k_win_1_1_decoration_renderer_1ab87a90e1263b3abd13738561885da7a4" kindref="member">devicePixelRatio</ref>);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>leftWidth<sp/>=<sp/>std::round(left.width()<sp/>*<sp/><ref refid="class_k_win_1_1_decoration_renderer_1ab87a90e1263b3abd13738561885da7a4" kindref="member">devicePixelRatio</ref>);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QPoint<sp/>topPosition(0,<sp/>0);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QPoint<sp/>bottomPosition(0,<sp/>topPosition.y()<sp/>+<sp/>topHeight<sp/>+<sp/>(2<sp/>*<sp/><ref refid="class_k_win_1_1_decoration_renderer_1a15f82254e3b8dbb020e0149c6cee220b" kindref="member">TexturePad</ref>));</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QPoint<sp/>leftPosition(0,<sp/>bottomPosition.y()<sp/>+<sp/>bottomHeight<sp/>+<sp/>(2<sp/>*<sp/><ref refid="class_k_win_1_1_decoration_renderer_1a15f82254e3b8dbb020e0149c6cee220b" kindref="member">TexturePad</ref>));</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QPoint<sp/>rightPosition(0,<sp/>leftPosition.y()<sp/>+<sp/>leftWidth<sp/>+<sp/>(2<sp/>*<sp/><ref refid="class_k_win_1_1_decoration_renderer_1a15f82254e3b8dbb020e0149c6cee220b" kindref="member">TexturePad</ref>));</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRect<sp/>dirtyRect<sp/>=<sp/>region.boundingRect();</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPart(top.intersected(dirtyRect),<sp/>top,<sp/>topPosition,<sp/><ref refid="class_k_win_1_1_decoration_renderer_1ab87a90e1263b3abd13738561885da7a4" kindref="member">devicePixelRatio</ref>);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPart(bottom.intersected(dirtyRect),<sp/>bottom,<sp/>bottomPosition,<sp/><ref refid="class_k_win_1_1_decoration_renderer_1ab87a90e1263b3abd13738561885da7a4" kindref="member">devicePixelRatio</ref>);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPart(left.intersected(dirtyRect),<sp/>left,<sp/>leftPosition,<sp/><ref refid="class_k_win_1_1_decoration_renderer_1ab87a90e1263b3abd13738561885da7a4" kindref="member">devicePixelRatio</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPart(right.intersected(dirtyRect),<sp/>right,<sp/>rightPosition,<sp/><ref refid="class_k_win_1_1_decoration_renderer_1ab87a90e1263b3abd13738561885da7a4" kindref="member">devicePixelRatio</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SceneOpenGLDecorationRenderer::renderPart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>&amp;rect,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>&amp;partRect,</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QPoint<sp/>&amp;textureOffset,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qreal<sp/>devicePixelRatio,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rotated)</highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rect.isValid()<sp/>||<sp/>!m_texture)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>allow<sp/>partial<sp/>decoration<sp/>updates<sp/>and<sp/>it<sp/>might<sp/>just<sp/>so<sp/>happen<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dirty<sp/>region<sp/>is<sp/>completely<sp/>contained<sp/>inside<sp/>the<sp/>decoration<sp/>part,<sp/>i.e.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>dirty<sp/>region<sp/>doesn&apos;t<sp/>touch<sp/>any<sp/>of<sp/>the<sp/>decoration&apos;s<sp/>edges.<sp/>In<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>case,<sp/>we<sp/>should<sp/>**not**<sp/>pad<sp/>the<sp/>dirty<sp/>region.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QMargins<sp/>padding<sp/>=<sp/>texturePadForPart(rect,<sp/>partRect);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verticalPadding<sp/>=<sp/>padding.top()<sp/>+<sp/>padding.bottom();</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>horizontalPadding<sp/>=<sp/>padding.left()<sp/>+<sp/>padding.right();</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>QSize<sp/>imageSize(toNativeSize(rect.width()),<sp/>toNativeSize(rect.height()));</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotated)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageSize<sp/>=<sp/>QSize(imageSize.height(),<sp/>imageSize.width());</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>QSize<sp/>paddedImageSize<sp/>=<sp/>imageSize;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>paddedImageSize.rheight()<sp/>+=<sp/>verticalPadding;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>paddedImageSize.rwidth()<sp/>+=<sp/>horizontalPadding;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>image(paddedImageSize,<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>image.setDevicePixelRatio(<ref refid="class_k_win_1_1_decoration_renderer_1ab87a90e1263b3abd13738561885da7a4" kindref="member">devicePixelRatio</ref>);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>image.fill(Qt::transparent);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>QRect<sp/>padClip<sp/>=<sp/>QRect(padding.left(),<sp/>padding.top(),<sp/>imageSize.width(),<sp/>imageSize.height());</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>QPainter<sp/>painter(&amp;image);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>qreal<sp/>inverseScale<sp/>=<sp/>1.0<sp/>/<sp/><ref refid="class_k_win_1_1_decoration_renderer_1ab87a90e1263b3abd13738561885da7a4" kindref="member">devicePixelRatio</ref>;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.scale(inverseScale,<sp/>inverseScale);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.setRenderHint(QPainter::Antialiasing);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.setClipRect(padClip);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.translate(padding.left(),<sp/>padding.top());</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotated)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.translate(0,<sp/>imageSize.height());</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.rotate(-90);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.scale(<ref refid="class_k_win_1_1_decoration_renderer_1ab87a90e1263b3abd13738561885da7a4" kindref="member">devicePixelRatio</ref>,<sp/><ref refid="class_k_win_1_1_decoration_renderer_1ab87a90e1263b3abd13738561885da7a4" kindref="member">devicePixelRatio</ref>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.translate(-rect.topLeft());</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_decoration_renderer_1afd48a15d753072379eb421c1f4128db8" kindref="member">renderToPainter</ref>(&amp;painter,<sp/>rect);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.end();</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>padding<sp/>pixels<sp/>by<sp/>copying<sp/>from<sp/>the<sp/>neighbour<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>clamp(image,<sp/>padClip);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>QPoint<sp/>dirtyOffset<sp/>=<sp/>((rect.topLeft()<sp/>-<sp/>partRect.topLeft())<sp/>*<sp/><ref refid="class_k_win_1_1_decoration_renderer_1ab87a90e1263b3abd13738561885da7a4" kindref="member">devicePixelRatio</ref>).toPoint();</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(padding.top()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyOffset.ry()<sp/>+=<sp/><ref refid="class_k_win_1_1_decoration_renderer_1a15f82254e3b8dbb020e0149c6cee220b" kindref="member">TexturePad</ref>;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(padding.left()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyOffset.rx()<sp/>+=<sp/><ref refid="class_k_win_1_1_decoration_renderer_1a15f82254e3b8dbb020e0149c6cee220b" kindref="member">TexturePad</ref>;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>m_texture-&gt;update(image,<sp/>image.rect(),<sp/>textureOffset<sp/>+<sp/>dirtyOffset);</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QMargins<sp/>SceneOpenGLDecorationRenderer::texturePadForPart(</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>&amp;rect,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>&amp;partRect)</highlight></codeline>
<codeline lineno="427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>QMargins<sp/>result<sp/>=<sp/>QMargins(0,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rect.top()<sp/>==<sp/>partRect.top())<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.setTop(<ref refid="class_k_win_1_1_decoration_renderer_1a15f82254e3b8dbb020e0149c6cee220b" kindref="member">TexturePad</ref>);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rect.bottom()<sp/>==<sp/>partRect.bottom())<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.setBottom(<ref refid="class_k_win_1_1_decoration_renderer_1a15f82254e3b8dbb020e0149c6cee220b" kindref="member">TexturePad</ref>);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rect.left()<sp/>==<sp/>partRect.left())<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.setLeft(<ref refid="class_k_win_1_1_decoration_renderer_1a15f82254e3b8dbb020e0149c6cee220b" kindref="member">TexturePad</ref>);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rect.right()<sp/>==<sp/>partRect.right())<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.setRight(<ref refid="class_k_win_1_1_decoration_renderer_1a15f82254e3b8dbb020e0149c6cee220b" kindref="member">TexturePad</ref>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1a589f408567ff14915728d5c320d281ac" kindref="member">align</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1a589f408567ff14915728d5c320d281ac" kindref="member">align</ref>)</highlight></codeline>
<codeline lineno="445"><highlight class="normal">{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(value<sp/>+<sp/><ref refid="namespace_k_win_1a589f408567ff14915728d5c320d281ac" kindref="member">align</ref><sp/>-<sp/>1)<sp/>&amp;<sp/>~(<ref refid="namespace_k_win_1a589f408567ff14915728d5c320d281ac" kindref="member">align</ref><sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SceneOpenGLDecorationRenderer::resizeTexture()</highlight></codeline>
<codeline lineno="450"><highlight class="normal">{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>QRectF<sp/>left,<sp/>top,<sp/>right,<sp/>bottom;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_decoration_renderer_1a52b8ae1cfb2dab0dbcee6e7adb5d22c8" kindref="member">client</ref>()-&gt;<ref refid="class_k_win_1_1_decoration_1_1_decorated_window_impl_1a5c274a7d0d3dab00ec2ff0ea60f4f584" kindref="member">window</ref>()-&gt;<ref refid="class_k_win_1_1_window_1ac76883ec1ae279e0453ad6ea21a6a441" kindref="member">layoutDecorationRects</ref>(left,<sp/>top,<sp/>right,<sp/>bottom);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>QSize<sp/>size;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>size.rwidth()<sp/>=<sp/>toNativeSize(std::max({top.width(),<sp/>bottom.width(),<sp/>left.height(),<sp/>right.height()}));</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>size.rheight()<sp/>=<sp/>toNativeSize(top.height())<sp/>+<sp/>toNativeSize(bottom.height())<sp/>+<sp/>toNativeSize(left.width())<sp/>+<sp/>toNativeSize(right.width());</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>size.rheight()<sp/>+=<sp/>4<sp/>*<sp/>(2<sp/>*<sp/><ref refid="class_k_win_1_1_decoration_renderer_1a15f82254e3b8dbb020e0149c6cee220b" kindref="member">TexturePad</ref>);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>size.rwidth()<sp/>+=<sp/>2<sp/>*<sp/><ref refid="class_k_win_1_1_decoration_renderer_1a15f82254e3b8dbb020e0149c6cee220b" kindref="member">TexturePad</ref>;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>size.rwidth()<sp/>=<sp/><ref refid="namespace_k_win_1a589f408567ff14915728d5c320d281ac" kindref="member">align</ref>(size.width(),<sp/>128);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_texture<sp/>&amp;&amp;<sp/>m_texture-&gt;size()<sp/>==<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!size.isEmpty())<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_texture<sp/>=<sp/><ref refid="class_k_win_1_1_g_l_texture_1a22b5bb33ada7c4b53f73c57f5405289f" kindref="member">GLTexture::allocate</ref>(GL_RGBA8,<sp/>size);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_texture)<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_texture-&gt;setContentTransform(<ref refid="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7a16cbb90948f3bcab5a9ea45724e0ca17" kindref="member">OutputTransform::FlipY</ref>);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_texture-&gt;setFilter(GL_LINEAR);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_texture-&gt;setWrapMode(GL_CLAMP_TO_EDGE);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_texture.reset();</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SceneOpenGLDecorationRenderer::toNativeSize(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="480"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::round(size<sp/>*<sp/><ref refid="class_k_win_1_1_decoration_renderer_1adcd894d78d515448862ebb556648cf5f" kindref="member">effectiveDevicePixelRatio</ref>());</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;moc_workspacescene_opengl.cpp&quot;</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="kwin/src/scene/workspacescene_opengl.cpp"/>
  </compounddef>
</doxygen>
