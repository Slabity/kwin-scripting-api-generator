<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="pointer__event__test_8cpp" kind="file" language="C++">
    <compoundname>pointer_event_test.cpp</compoundname>
    <includes refid="mock__libinput_8h" local="yes">mock_libinput.h</includes>
    <includes refid="device_8h" local="yes">backends/libinput/device.h</includes>
    <includes refid="events_8h" local="yes">backends/libinput/events.h</includes>
    <includes local="no">QTest</includes>
    <includes local="no">linux/input.h</includes>
    <includes local="yes">pointer_event_test.moc</includes>
    <incdepgraph>
      <node id="2">
        <label>mock_libinput.h</label>
        <link refid="mock__libinput_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>kwin/autotests/libinput/pointer_event_test.cpp</label>
        <link refid="pointer__event__test_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>backends/libinput/device.h</label>
        <link refid="device_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>backends/libinput/events.h</label>
        <link refid="events_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>core/inputdevice.h</label>
        <link refid="inputdevice_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>effect/globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>input.h</label>
        <link refid="input_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>KConfigGroup</label>
      </node>
      <node id="27">
        <label>KConfigWatcher</label>
      </node>
      <node id="28">
        <label>KSharedConfig</label>
      </node>
      <node id="4">
        <label>QByteArray</label>
      </node>
      <node id="14">
        <label>QCoreApplication</label>
      </node>
      <node id="22">
        <label>QEasingCurve</label>
      </node>
      <node id="15">
        <label>QImage</label>
      </node>
      <node id="5">
        <label>QList</label>
      </node>
      <node id="23">
        <label>QMatrix4x4</label>
      </node>
      <node id="20">
        <label>QObject</label>
      </node>
      <node id="16">
        <label>QPoint</label>
      </node>
      <node id="6">
        <label>QPointF</label>
      </node>
      <node id="24">
        <label>QPointer</label>
      </node>
      <node id="29">
        <label>QSet</label>
      </node>
      <node id="7">
        <label>QSizeF</label>
      </node>
      <node id="31">
        <label>QTest</label>
      </node>
      <node id="17">
        <label>QVariant</label>
      </node>
      <node id="18">
        <label>QVector2D</label>
      </node>
      <node id="8">
        <label>array</label>
      </node>
      <node id="9">
        <label>chrono</label>
      </node>
      <node id="13">
        <label>config-kwin.h</label>
      </node>
      <node id="30">
        <label>functional</label>
      </node>
      <node id="19">
        <label>kwin_export.h</label>
      </node>
      <node id="3">
        <label>libinput.h</label>
      </node>
      <node id="32">
        <label>linux/input.h</label>
      </node>
      <node id="33">
        <label>pointer_event_test.moc</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_test_libinput_pointer_event" prot="public">TestLibinputPointerEvent</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>KWin<sp/>-<sp/>the<sp/>KDE<sp/>window<sp/>manager</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>KDE<sp/>project.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2016<sp/>Martin<sp/>Gräßlin<sp/>&lt;mgraesslin@kde.org&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mock__libinput_8h" kindref="compound">mock_libinput.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="device_8h" kindref="compound">backends/libinput/device.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="events_8h" kindref="compound">backends/libinput/events.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QTest&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;linux/input.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><ref refid="x11keyread_8cpp_1ac0925a94f4858115ad1f04be885ac3b3" kindref="member">Q_DECLARE_METATYPE</ref>(libinput_event_type)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><ref refid="x11keyread_8cpp_1ac0925a94f4858115ad1f04be885ac3b3" kindref="member">Q_DECLARE_METATYPE</ref>(libinput_button_state)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win_1_1_lib_input" kindref="compound">KWin::LibInput</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std::literals;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="class_test_libinput_pointer_event" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_test_libinput_pointer_event" kindref="compound">TestLibinputPointerEvent</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QObject</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Q_SLOTS:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanup();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testType_data();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testType();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testButton_data();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testButton();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testScrollWheel_data();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testScrollWheel();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testScrollFinger_data();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testScrollFinger();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testScrollContinuous_data();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testScrollContinuous();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testMotion();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testAbsoluteMotion();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*m_nativeDevice<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_lib_input_1_1_device" kindref="compound">Device</ref><sp/>*m_device<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLibinputPointerEvent::init()</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nativeDevice<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nativeDevice-&gt;<ref refid="structlibinput__device_1ada23f7b711039e078a4c06542f66df4e" kindref="member">pointer</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nativeDevice-&gt;<ref refid="structlibinput__device_1ab258e327e63fd657dce457f31dbe5414" kindref="member">deviceSize</ref><sp/>=<sp/>QSizeF(12.5,<sp/>13.8);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>m_device<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_lib_input_1_1_device" kindref="compound">Device</ref>(m_nativeDevice);</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLibinputPointerEvent::cleanup()</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_device;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>m_device<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_nativeDevice;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nativeDevice<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLibinputPointerEvent::testType_data()</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;libinput_event_type&gt;(</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;motion&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>LIBINPUT_EVENT_POINTER_MOTION;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;absolute<sp/>motion&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>LIBINPUT_EVENT_POINTER_MOTION_ABSOLUTE;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;button&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>LIBINPUT_EVENT_POINTER_BUTTON;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;scroll<sp/>wheel&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>LIBINPUT_EVENT_POINTER_SCROLL_WHEEL;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;scroll<sp/>finger&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>LIBINPUT_EVENT_POINTER_SCROLL_FINGER;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;scroll<sp/>continuous&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLibinputPointerEvent::testType()</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>the<sp/>initialization<sp/>of<sp/>a<sp/>PointerEvent<sp/>and<sp/>the<sp/>parent<sp/>Event<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>libinput_event_pointer<sp/>*pointerEvent<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>libinput_event_pointer;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(libinput_event_type,<sp/>type);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a7fdcbb0bac521cd033ea91dda5cc2949" kindref="member">type</ref><sp/>=<sp/><ref refid="namespace_k_win_1a3223e96fea9ab917c25be94e2434013a" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref><sp/>=<sp/>m_nativeDevice;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Event&gt;<sp/>event(<ref refid="class_k_win_1_1_lib_input_1_1_event_1a6c47cce328f206eac250302d8ef3975b" kindref="member">Event::create</ref>(pointerEvent));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>API<sp/>of<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(event-&gt;type(),<sp/>type);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(event-&gt;device(),<sp/>m_device);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(event-&gt;nativeDevice(),<sp/>m_nativeDevice);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE((libinput_event<sp/>*)(*event.get()),<sp/>pointerEvent);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>verify<sp/>it&apos;s<sp/>a<sp/>pointer<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">PointerEvent<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(event.get()));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE((libinput_event_pointer<sp/>*)(*</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">PointerEvent<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(event.get())),<sp/>pointerEvent);</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLibinputPointerEvent::testButton_data()</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;libinput_button_state&gt;(</highlight><highlight class="stringliteral">&quot;buttonState&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;KWin::PointerButtonState&gt;(</highlight><highlight class="stringliteral">&quot;expectedButtonState&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;quint32&gt;(</highlight><highlight class="stringliteral">&quot;button&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;quint32&gt;(</highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;pressed&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>LIBINPUT_BUTTON_STATE_RELEASED<sp/>&lt;&lt;<sp/><ref refid="namespace_k_win_1af04c7f9798b123fe6f74415788dd38d3aea1e34304a5d8ffa7c9b0ed8ede4ef1a" kindref="member">KWin::PointerButtonState::Released</ref><sp/>&lt;&lt;<sp/>quint32(BTN_RIGHT)<sp/>&lt;&lt;<sp/>100u;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;released&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>LIBINPUT_BUTTON_STATE_PRESSED<sp/>&lt;&lt;<sp/><ref refid="namespace_k_win_1af04c7f9798b123fe6f74415788dd38d3ad78a68f6a85421ae121c2cb5b73a1040" kindref="member">KWin::PointerButtonState::Pressed</ref><sp/>&lt;&lt;<sp/>quint32(BTN_LEFT)<sp/>&lt;&lt;<sp/>200u;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLibinputPointerEvent::testButton()</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>the<sp/>button<sp/>press/release</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>libinput_event_pointer<sp/>*pointerEvent<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>libinput_event_pointer;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref><sp/>=<sp/>m_nativeDevice;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a7fdcbb0bac521cd033ea91dda5cc2949" kindref="member">type</ref><sp/>=<sp/>LIBINPUT_EVENT_POINTER_BUTTON;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(libinput_button_state,<sp/>buttonState);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event__pointer_1aca1a67f57693f633f64f84c237af25dc" kindref="member">buttonState</ref><sp/>=<sp/>buttonState;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(quint32,<sp/>button);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event__pointer_1ad90826d8a5612efb530be8733ce482b7" kindref="member">button</ref><sp/>=<sp/>button;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(quint32,<sp/>time);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a6a1efbba137200361aca11a8909813f9" kindref="member">time</ref><sp/>=<sp/>std::chrono::milliseconds(time);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Event&gt;<sp/>event(<ref refid="class_k_win_1_1_lib_input_1_1_event_1a6c47cce328f206eac250302d8ef3975b" kindref="member">Event::create</ref>(pointerEvent));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pe<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">PointerEvent<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">event</highlight><highlight class="normal">.get());</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(pe);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;type(),<sp/>LIBINPUT_EVENT_POINTER_BUTTON);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>QTEST(pe-&gt;buttonState(),<sp/></highlight><highlight class="stringliteral">&quot;expectedButtonState&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;button(),<sp/>button);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;time(),<sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a6a1efbba137200361aca11a8909813f9" kindref="member">time</ref>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLibinputPointerEvent::testScrollWheel_data()</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;bool&gt;(</highlight><highlight class="stringliteral">&quot;horizontal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;bool&gt;(</highlight><highlight class="stringliteral">&quot;vertical&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;QPointF&gt;(</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;QPoint&gt;(</highlight><highlight class="stringliteral">&quot;valueV120&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;quint32&gt;(</highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;wheel/horizontal&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>QPointF(3.0,<sp/>0.0)<sp/>&lt;&lt;<sp/>QPoint(120,<sp/>0)<sp/>&lt;&lt;<sp/>100u;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;wheel/vertical&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>QPointF(0.0,<sp/>2.5)<sp/>&lt;&lt;<sp/>QPoint(0,<sp/>120)<sp/>&lt;&lt;<sp/>200u;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;wheel/both&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>QPointF(1.1,<sp/>4.2)<sp/>&lt;&lt;<sp/>QPoint(120,<sp/>120)<sp/>&lt;&lt;<sp/>300u;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLibinputPointerEvent::testScrollWheel()</highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>pointer<sp/>axis<sp/>functionality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>libinput_event_pointer<sp/>*pointerEvent<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>libinput_event_pointer;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref><sp/>=<sp/>m_nativeDevice;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a7fdcbb0bac521cd033ea91dda5cc2949" kindref="member">type</ref><sp/>=<sp/>LIBINPUT_EVENT_POINTER_SCROLL_WHEEL;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>horizontal);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>vertical);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(QPointF,<sp/>value);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(QPoint,<sp/>valueV120);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(quint32,<sp/>time);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event__pointer_1aecdc0e03decc00ff46027009da64aa91" kindref="member">horizontalAxis</ref><sp/>=<sp/>horizontal;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event__pointer_1a19a8d07a060beaec5d2148df06f1fc54" kindref="member">verticalAxis</ref><sp/>=<sp/>vertical;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event__pointer_1a25b323e12ccae751a415b1eafb6f263f" kindref="member">horizontalScrollValue</ref><sp/>=<sp/>value.x();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event__pointer_1ad6ae62659deedc18a463008baf7cbc5b" kindref="member">verticalScrollValue</ref><sp/>=<sp/>value.y();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event__pointer_1a0ddd9acf1f2c62443d17d943d9116097" kindref="member">horizontalScrollValueV120</ref><sp/>=<sp/>valueV120.x();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event__pointer_1ae47d51204fb8c6a814a0ec68bcaa5711" kindref="member">verticalScrollValueV120</ref><sp/>=<sp/>valueV120.y();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a6a1efbba137200361aca11a8909813f9" kindref="member">time</ref><sp/>=<sp/>std::chrono::milliseconds(time);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Event&gt;<sp/>event(<ref refid="class_k_win_1_1_lib_input_1_1_event_1a6c47cce328f206eac250302d8ef3975b" kindref="member">Event::create</ref>(pointerEvent));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pe<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">PointerEvent<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">event</highlight><highlight class="normal">.get());</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(pe);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;type(),<sp/>LIBINPUT_EVENT_POINTER_SCROLL_WHEEL);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;axis().contains(<ref refid="namespace_k_win_1aec4516626e95b6dc22c614c769a43590ac1b5fa03ecdb95d4a45dd1c40b02527f" kindref="member">KWin::PointerAxis::Horizontal</ref>),<sp/>horizontal);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;axis().contains(<ref refid="namespace_k_win_1aec4516626e95b6dc22c614c769a43590a06ce2a25e5d12c166a36f654dbea6012" kindref="member">KWin::PointerAxis::Vertical</ref>),<sp/>vertical);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;scrollValue(<ref refid="namespace_k_win_1aec4516626e95b6dc22c614c769a43590ac1b5fa03ecdb95d4a45dd1c40b02527f" kindref="member">KWin::PointerAxis::Horizontal</ref>),<sp/>value.x());</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;scrollValue(<ref refid="namespace_k_win_1aec4516626e95b6dc22c614c769a43590a06ce2a25e5d12c166a36f654dbea6012" kindref="member">KWin::PointerAxis::Vertical</ref>),<sp/>value.y());</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;scrollValueV120(<ref refid="namespace_k_win_1aec4516626e95b6dc22c614c769a43590ac1b5fa03ecdb95d4a45dd1c40b02527f" kindref="member">KWin::PointerAxis::Horizontal</ref>),<sp/>valueV120.x());</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;scrollValueV120(<ref refid="namespace_k_win_1aec4516626e95b6dc22c614c769a43590a06ce2a25e5d12c166a36f654dbea6012" kindref="member">KWin::PointerAxis::Vertical</ref>),<sp/>valueV120.y());</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;time(),<sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a6a1efbba137200361aca11a8909813f9" kindref="member">time</ref>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLibinputPointerEvent::testScrollFinger_data()</highlight></codeline>
<codeline lineno="176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;bool&gt;(</highlight><highlight class="stringliteral">&quot;horizontal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;bool&gt;(</highlight><highlight class="stringliteral">&quot;vertical&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;QPointF&gt;(</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;quint32&gt;(</highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;finger/horizontal&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>QPointF(3.0,<sp/>0.0)<sp/>&lt;&lt;<sp/>400u;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;stop<sp/>finger/horizontal&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>QPointF(0.0,<sp/>0.0)<sp/>&lt;&lt;<sp/>500u;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;finger/vertical&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>QPointF(0.0,<sp/>2.5)<sp/>&lt;&lt;<sp/>600u;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;stop<sp/>finger/vertical&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>QPointF(0.0,<sp/>0.0)<sp/>&lt;&lt;<sp/>700u;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;finger/both&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>QPointF(1.1,<sp/>4.2)<sp/>&lt;&lt;<sp/>800u;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;stop<sp/>finger/both&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>QPointF(0.0,<sp/>0.0)<sp/>&lt;&lt;<sp/>900u;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLibinputPointerEvent::testScrollFinger()</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>pointer<sp/>axis<sp/>functionality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>libinput_event_pointer<sp/>*pointerEvent<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>libinput_event_pointer;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref><sp/>=<sp/>m_nativeDevice;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a7fdcbb0bac521cd033ea91dda5cc2949" kindref="member">type</ref><sp/>=<sp/>LIBINPUT_EVENT_POINTER_SCROLL_FINGER;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>horizontal);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>vertical);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(QPointF,<sp/>value);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(quint32,<sp/>time);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event__pointer_1aecdc0e03decc00ff46027009da64aa91" kindref="member">horizontalAxis</ref><sp/>=<sp/>horizontal;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event__pointer_1a19a8d07a060beaec5d2148df06f1fc54" kindref="member">verticalAxis</ref><sp/>=<sp/>vertical;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event__pointer_1a25b323e12ccae751a415b1eafb6f263f" kindref="member">horizontalScrollValue</ref><sp/>=<sp/>value.x();</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event__pointer_1ad6ae62659deedc18a463008baf7cbc5b" kindref="member">verticalScrollValue</ref><sp/>=<sp/>value.y();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a6a1efbba137200361aca11a8909813f9" kindref="member">time</ref><sp/>=<sp/>std::chrono::milliseconds(time);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Event&gt;<sp/>event(<ref refid="class_k_win_1_1_lib_input_1_1_event_1a6c47cce328f206eac250302d8ef3975b" kindref="member">Event::create</ref>(pointerEvent));</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pe<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">PointerEvent<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">event</highlight><highlight class="normal">.get());</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(pe);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;type(),<sp/>LIBINPUT_EVENT_POINTER_SCROLL_FINGER);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;axis().contains(<ref refid="namespace_k_win_1aec4516626e95b6dc22c614c769a43590ac1b5fa03ecdb95d4a45dd1c40b02527f" kindref="member">KWin::PointerAxis::Horizontal</ref>),<sp/>horizontal);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;axis().contains(<ref refid="namespace_k_win_1aec4516626e95b6dc22c614c769a43590a06ce2a25e5d12c166a36f654dbea6012" kindref="member">KWin::PointerAxis::Vertical</ref>),<sp/>vertical);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;scrollValue(<ref refid="namespace_k_win_1aec4516626e95b6dc22c614c769a43590ac1b5fa03ecdb95d4a45dd1c40b02527f" kindref="member">KWin::PointerAxis::Horizontal</ref>),<sp/>value.x());</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;scrollValue(<ref refid="namespace_k_win_1aec4516626e95b6dc22c614c769a43590a06ce2a25e5d12c166a36f654dbea6012" kindref="member">KWin::PointerAxis::Vertical</ref>),<sp/>value.y());</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;time(),<sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a6a1efbba137200361aca11a8909813f9" kindref="member">time</ref>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLibinputPointerEvent::testScrollContinuous_data()</highlight></codeline>
<codeline lineno="218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;bool&gt;(</highlight><highlight class="stringliteral">&quot;horizontal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;bool&gt;(</highlight><highlight class="stringliteral">&quot;vertical&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;QPointF&gt;(</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;quint32&gt;(</highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;continuous/horizontal&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>QPointF(3.0,<sp/>0.0)<sp/>&lt;&lt;<sp/>1000u;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;continuous/vertical&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>QPointF(0.0,<sp/>2.5)<sp/>&lt;&lt;<sp/>1100u;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;continuous/both&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>QPointF(1.1,<sp/>4.2)<sp/>&lt;&lt;<sp/>1200u;</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLibinputPointerEvent::testScrollContinuous()</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>pointer<sp/>axis<sp/>functionality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>libinput_event_pointer<sp/>*pointerEvent<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>libinput_event_pointer;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref><sp/>=<sp/>m_nativeDevice;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a7fdcbb0bac521cd033ea91dda5cc2949" kindref="member">type</ref><sp/>=<sp/>LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>horizontal);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>vertical);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(QPointF,<sp/>value);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(quint32,<sp/>time);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event__pointer_1aecdc0e03decc00ff46027009da64aa91" kindref="member">horizontalAxis</ref><sp/>=<sp/>horizontal;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event__pointer_1a19a8d07a060beaec5d2148df06f1fc54" kindref="member">verticalAxis</ref><sp/>=<sp/>vertical;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event__pointer_1a25b323e12ccae751a415b1eafb6f263f" kindref="member">horizontalScrollValue</ref><sp/>=<sp/>value.x();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event__pointer_1ad6ae62659deedc18a463008baf7cbc5b" kindref="member">verticalScrollValue</ref><sp/>=<sp/>value.y();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a6a1efbba137200361aca11a8909813f9" kindref="member">time</ref><sp/>=<sp/>std::chrono::milliseconds(time);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Event&gt;<sp/>event(<ref refid="class_k_win_1_1_lib_input_1_1_event_1a6c47cce328f206eac250302d8ef3975b" kindref="member">Event::create</ref>(pointerEvent));</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pe<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">PointerEvent<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">event</highlight><highlight class="normal">.get());</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(pe);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;type(),<sp/>LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;axis().contains(<ref refid="namespace_k_win_1aec4516626e95b6dc22c614c769a43590ac1b5fa03ecdb95d4a45dd1c40b02527f" kindref="member">KWin::PointerAxis::Horizontal</ref>),<sp/>horizontal);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;axis().contains(<ref refid="namespace_k_win_1aec4516626e95b6dc22c614c769a43590a06ce2a25e5d12c166a36f654dbea6012" kindref="member">KWin::PointerAxis::Vertical</ref>),<sp/>vertical);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;scrollValue(<ref refid="namespace_k_win_1aec4516626e95b6dc22c614c769a43590ac1b5fa03ecdb95d4a45dd1c40b02527f" kindref="member">KWin::PointerAxis::Horizontal</ref>),<sp/>value.x());</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;scrollValue(<ref refid="namespace_k_win_1aec4516626e95b6dc22c614c769a43590a06ce2a25e5d12c166a36f654dbea6012" kindref="member">KWin::PointerAxis::Vertical</ref>),<sp/>value.y());</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;time(),<sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a6a1efbba137200361aca11a8909813f9" kindref="member">time</ref>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLibinputPointerEvent::testMotion()</highlight></codeline>
<codeline lineno="257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>pointer<sp/>motion<sp/>(delta)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>libinput_event_pointer<sp/>*pointerEvent<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>libinput_event_pointer;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref><sp/>=<sp/>m_nativeDevice;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a7fdcbb0bac521cd033ea91dda5cc2949" kindref="member">type</ref><sp/>=<sp/>LIBINPUT_EVENT_POINTER_MOTION;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event__pointer_1ad657bdefbe2b12ed82cefe36169326c1" kindref="member">delta</ref><sp/>=<sp/>QPointF(2.1,<sp/>4.5);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a6a1efbba137200361aca11a8909813f9" kindref="member">time</ref><sp/>=<sp/>500ms;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Event&gt;<sp/>event(<ref refid="class_k_win_1_1_lib_input_1_1_event_1a6c47cce328f206eac250302d8ef3975b" kindref="member">Event::create</ref>(pointerEvent));</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pe<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">PointerEvent<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">event</highlight><highlight class="normal">.get());</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(pe);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;type(),<sp/>LIBINPUT_EVENT_POINTER_MOTION);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;time(),<sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a6a1efbba137200361aca11a8909813f9" kindref="member">time</ref>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;delta(),<sp/>QPointF(2.1,<sp/>4.5));</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLibinputPointerEvent::testAbsoluteMotion()</highlight></codeline>
<codeline lineno="274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>absolute<sp/>pointer<sp/>motion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>libinput_event_pointer<sp/>*pointerEvent<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>libinput_event_pointer;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref><sp/>=<sp/>m_nativeDevice;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a7fdcbb0bac521cd033ea91dda5cc2949" kindref="member">type</ref><sp/>=<sp/>LIBINPUT_EVENT_POINTER_MOTION_ABSOLUTE;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event__pointer_1a07941d9da2ae5dc5035b7b3dad2674e9" kindref="member">absolutePos</ref><sp/>=<sp/>QPointF(6.25,<sp/>6.9);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a6a1efbba137200361aca11a8909813f9" kindref="member">time</ref><sp/>=<sp/>500ms;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Event&gt;<sp/>event(<ref refid="class_k_win_1_1_lib_input_1_1_event_1a6c47cce328f206eac250302d8ef3975b" kindref="member">Event::create</ref>(pointerEvent));</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pe<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">PointerEvent<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">event</highlight><highlight class="normal">.get());</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(pe);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;type(),<sp/>LIBINPUT_EVENT_POINTER_MOTION_ABSOLUTE);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;time(),<sp/>pointerEvent-&gt;<ref refid="structlibinput__event_1a6a1efbba137200361aca11a8909813f9" kindref="member">time</ref>);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;absolutePos(),<sp/>QPointF(6.25,<sp/>6.9));</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pe-&gt;absolutePos(QSize(1280,<sp/>1024)),<sp/>QPointF(640,<sp/>512));</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal">QTEST_GUILESS_MAIN(<ref refid="class_test_libinput_pointer_event" kindref="compound">TestLibinputPointerEvent</ref>)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pointer_event_test.moc&quot;</highlight></codeline>
    </programlisting>
    <location file="kwin/autotests/libinput/pointer_event_test.cpp"/>
  </compounddef>
</doxygen>
