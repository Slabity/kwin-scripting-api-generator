<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_window_rules" kind="class" language="C++" prot="public">
    <compoundname>KWin::WindowRules</compoundname>
    <includes refid="rules_8h" local="no">rules.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_window_rules_1aefb0a06e2a0df456f62850f69d95c233" prot="private" static="no" mutable="no">
        <type>QList&lt; <ref refid="class_k_win_1_1_rules" kindref="compound">Rules</ref> * &gt;</type>
        <definition>QList&lt;Rules *&gt; KWin::WindowRules::rules</definition>
        <argsstring></argsstring>
        <name>rules</name>
        <qualifiedname>KWin::WindowRules::rules</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="86" column="11" bodyfile="kwin/src/rules.h" bodystart="86" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a00089c7b8454e14301432b33a26f3935" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KWin::WindowRules::WindowRules</definition>
        <argsstring>(const QList&lt; Rules * &gt; &amp;rules)</argsstring>
        <name>WindowRules</name>
        <qualifiedname>KWin::WindowRules::WindowRules</qualifiedname>
        <param>
          <type>const QList&lt; <ref refid="class_k_win_1_1_rules" kindref="compound">Rules</ref> * &gt; &amp;</type>
          <declname>rules</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="36" column="14" bodyfile="kwin/src/rules.h" bodystart="364" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1ad0347130a5215564fe568359ef57387c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KWin::WindowRules::WindowRules</definition>
        <argsstring>()</argsstring>
        <name>WindowRules</name>
        <qualifiedname>KWin::WindowRules::WindowRules</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="37" column="5" bodyfile="kwin/src/rules.h" bodystart="369" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a83e51d94a4e96169110e27e15b178ad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::WindowRules::update</definition>
        <argsstring>(Window *, int selection)</argsstring>
        <name>update</name>
        <qualifiedname>KWin::WindowRules::update</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <defname>c</defname>
        </param>
        <param>
          <type>int</type>
          <declname>selection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="38" column="10" bodyfile="kwin/src/rules.cpp" bodystart="773" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a440b157d5c28cae8ce4caa75a659cb27" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::WindowRules::contains</definition>
        <argsstring>(const Rules *rule) const</argsstring>
        <name>contains</name>
        <qualifiedname>KWin::WindowRules::contains</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_rules" kindref="compound">Rules</ref> *</type>
          <declname>rule</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="39" column="10" bodyfile="kwin/src/rules.h" bodystart="373" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a9bacb6577dbad10091898dfb6338374d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::WindowRules::remove</definition>
        <argsstring>(Rules *rule)</argsstring>
        <name>remove</name>
        <qualifiedname>KWin::WindowRules::remove</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_rules" kindref="compound">Rules</ref> *</type>
          <declname>rule</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="40" column="10" bodyfile="kwin/src/rules.h" bodystart="378" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a02682168445a823b0687c35420800a12" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fc" kindref="member">PlacementPolicy</ref></type>
        <definition>PlacementPolicy KWin::WindowRules::checkPlacement</definition>
        <argsstring>(PlacementPolicy placement) const</argsstring>
        <name>checkPlacement</name>
        <qualifiedname>KWin::WindowRules::checkPlacement</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fc" kindref="member">PlacementPolicy</ref></type>
          <declname>placement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="41" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1aff871b3faf206d3b2bd12548992f42b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::WindowRules::checkGeometry</definition>
        <argsstring>(QRectF rect, bool init=false) const</argsstring>
        <name>checkGeometry</name>
        <qualifiedname>KWin::WindowRules::checkGeometry</qualifiedname>
        <param>
          <type>QRectF</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="42" column="12" bodyfile="kwin/src/rules.cpp" bodystart="820" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1ac8c0db3f363ce09860d9a18d5de8f0fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::WindowRules::checkGeometrySafe</definition>
        <argsstring>(QRectF rect, bool init=false) const</argsstring>
        <name>checkGeometrySafe</name>
        <qualifiedname>KWin::WindowRules::checkGeometrySafe</qualifiedname>
        <param>
          <type>QRectF</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="43" column="12" bodyfile="kwin/src/rules.cpp" bodystart="825" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a0ca12cfdee8377b656e40860b240131e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::WindowRules::checkPositionSafe</definition>
        <argsstring>(QPointF pos, bool init=false) const</argsstring>
        <name>checkPositionSafe</name>
        <qualifiedname>KWin::WindowRules::checkPositionSafe</qualifiedname>
        <param>
          <type>QPointF</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="45" column="13" bodyfile="kwin/src/rules.cpp" bodystart="830" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1af898a63398416ee364185c48123247f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::WindowRules::checkPosition</definition>
        <argsstring>(QPointF pos, bool init=false) const</argsstring>
        <name>checkPosition</name>
        <qualifiedname>KWin::WindowRules::checkPosition</qualifiedname>
        <param>
          <type>QPointF</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="46" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1ab6503ce96bff84047f79b72a4bc9048e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::WindowRules::checkSize</definition>
        <argsstring>(QSizeF s, bool init=false) const</argsstring>
        <name>checkSize</name>
        <qualifiedname>KWin::WindowRules::checkSize</qualifiedname>
        <param>
          <type>QSizeF</type>
          <declname>s</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="47" column="12"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1aceb819770759542e01c43ad181cb9a3e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::WindowRules::checkMinSize</definition>
        <argsstring>(QSizeF s) const</argsstring>
        <name>checkMinSize</name>
        <qualifiedname>KWin::WindowRules::checkMinSize</qualifiedname>
        <param>
          <type>QSizeF</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="48" column="12"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a1d76722569bc0a6eefe76d2a3994f1a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::WindowRules::checkMaxSize</definition>
        <argsstring>(QSizeF s) const</argsstring>
        <name>checkMaxSize</name>
        <qualifiedname>KWin::WindowRules::checkMaxSize</qualifiedname>
        <param>
          <type>QSizeF</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="49" column="12"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1ab828ef8f9dcb195912a9506039cf1787" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::WindowRules::checkOpacityActive</definition>
        <argsstring>(int s) const</argsstring>
        <name>checkOpacityActive</name>
        <qualifiedname>KWin::WindowRules::checkOpacityActive</qualifiedname>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="50" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a423e84af96073b578ae8fa89c58281c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::WindowRules::checkOpacityInactive</definition>
        <argsstring>(int s) const</argsstring>
        <name>checkOpacityInactive</name>
        <qualifiedname>KWin::WindowRules::checkOpacityInactive</qualifiedname>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="51" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a65f730a34a9a8ca846ea227c239a4e32" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::WindowRules::checkIgnoreGeometry</definition>
        <argsstring>(bool ignore, bool init=false) const</argsstring>
        <name>checkIgnoreGeometry</name>
        <qualifiedname>KWin::WindowRules::checkIgnoreGeometry</qualifiedname>
        <param>
          <type>bool</type>
          <declname>ignore</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="52" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a9af0e2334ddf5f59311c60084407aa7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">VirtualDesktop</ref> * &gt;</type>
        <definition>QList&lt; VirtualDesktop * &gt; KWin::WindowRules::checkDesktops</definition>
        <argsstring>(QList&lt; VirtualDesktop * &gt; desktops, bool init=false) const</argsstring>
        <name>checkDesktops</name>
        <qualifiedname>KWin::WindowRules::checkDesktops</qualifiedname>
        <param>
          <type>QList&lt; <ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">VirtualDesktop</ref> * &gt;</type>
          <declname>desktops</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="53" column="11"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a4c717174d4c4c7842e57e3953cbb5c7b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
        <definition>Output * KWin::WindowRules::checkOutput</definition>
        <argsstring>(Output *output, bool init=false) const</argsstring>
        <name>checkOutput</name>
        <qualifiedname>KWin::WindowRules::checkOutput</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="54" column="12" bodyfile="kwin/src/rules.cpp" bodystart="867" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a9b4af063dcf9ffbc39a8217453ac7652" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringList</type>
        <definition>QStringList KWin::WindowRules::checkActivity</definition>
        <argsstring>(QStringList activity, bool init=false) const</argsstring>
        <name>checkActivity</name>
        <qualifiedname>KWin::WindowRules::checkActivity</qualifiedname>
        <param>
          <type>QStringList</type>
          <declname>activity</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="55" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a9f56fb1b08d9528b03af0298fe0de827" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9" kindref="member">MaximizeMode</ref></type>
        <definition>MaximizeMode KWin::WindowRules::checkMaximize</definition>
        <argsstring>(MaximizeMode mode, bool init=false) const</argsstring>
        <name>checkMaximize</name>
        <qualifiedname>KWin::WindowRules::checkMaximize</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9" kindref="member">MaximizeMode</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="56" column="18" bodyfile="kwin/src/rules.cpp" bodystart="860" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1ab1ecc066865f3279e2aa437545465888" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::WindowRules::checkMinimize</definition>
        <argsstring>(bool minimized, bool init=false) const</argsstring>
        <name>checkMinimize</name>
        <qualifiedname>KWin::WindowRules::checkMinimize</qualifiedname>
        <param>
          <type>bool</type>
          <declname>minimized</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="57" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a9e142eaf439abc2b18ed9b009564806d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1a14799797d985d6375dd7684fff01585f" kindref="member">ShadeMode</ref></type>
        <definition>ShadeMode KWin::WindowRules::checkShade</definition>
        <argsstring>(ShadeMode shade, bool init=false) const</argsstring>
        <name>checkShade</name>
        <qualifiedname>KWin::WindowRules::checkShade</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a14799797d985d6375dd7684fff01585f" kindref="member">ShadeMode</ref></type>
          <declname>shade</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="58" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1abb76689fda6080e8deefcfd9cf9e1d42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::WindowRules::checkSkipTaskbar</definition>
        <argsstring>(bool skip, bool init=false) const</argsstring>
        <name>checkSkipTaskbar</name>
        <qualifiedname>KWin::WindowRules::checkSkipTaskbar</qualifiedname>
        <param>
          <type>bool</type>
          <declname>skip</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="59" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a60b92d405edd00706ba3489d0bc76d6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::WindowRules::checkSkipPager</definition>
        <argsstring>(bool skip, bool init=false) const</argsstring>
        <name>checkSkipPager</name>
        <qualifiedname>KWin::WindowRules::checkSkipPager</qualifiedname>
        <param>
          <type>bool</type>
          <declname>skip</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="60" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a5eb4eef09a5d7da72b26d7a62e74b8ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::WindowRules::checkSkipSwitcher</definition>
        <argsstring>(bool skip, bool init=false) const</argsstring>
        <name>checkSkipSwitcher</name>
        <qualifiedname>KWin::WindowRules::checkSkipSwitcher</qualifiedname>
        <param>
          <type>bool</type>
          <declname>skip</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="61" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1afb4eed2611003795f6733853ae8fe352" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::WindowRules::checkKeepAbove</definition>
        <argsstring>(bool above, bool init=false) const</argsstring>
        <name>checkKeepAbove</name>
        <qualifiedname>KWin::WindowRules::checkKeepAbove</qualifiedname>
        <param>
          <type>bool</type>
          <declname>above</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="62" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a568cadcfbf4f6533dfd6d51f50b847a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::WindowRules::checkKeepBelow</definition>
        <argsstring>(bool below, bool init=false) const</argsstring>
        <name>checkKeepBelow</name>
        <qualifiedname>KWin::WindowRules::checkKeepBelow</qualifiedname>
        <param>
          <type>bool</type>
          <declname>below</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="63" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a4ede2d298eb97279b73e0cd63cc22e14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::WindowRules::checkFullScreen</definition>
        <argsstring>(bool fs, bool init=false) const</argsstring>
        <name>checkFullScreen</name>
        <qualifiedname>KWin::WindowRules::checkFullScreen</qualifiedname>
        <param>
          <type>bool</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="64" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a3a00bc4799dc001632d55ec73927d74d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::WindowRules::checkNoBorder</definition>
        <argsstring>(bool noborder, bool init=false) const</argsstring>
        <name>checkNoBorder</name>
        <qualifiedname>KWin::WindowRules::checkNoBorder</qualifiedname>
        <param>
          <type>bool</type>
          <declname>noborder</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="65" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a6098b59f4fcb05d498a3f95e0d6deab2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::WindowRules::checkDecoColor</definition>
        <argsstring>(QString schemeFile) const</argsstring>
        <name>checkDecoColor</name>
        <qualifiedname>KWin::WindowRules::checkDecoColor</qualifiedname>
        <param>
          <type>QString</type>
          <declname>schemeFile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="66" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a74cad7f3572eea5ef7267c904ea759c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::WindowRules::checkBlockCompositing</definition>
        <argsstring>(bool block) const</argsstring>
        <name>checkBlockCompositing</name>
        <qualifiedname>KWin::WindowRules::checkBlockCompositing</qualifiedname>
        <param>
          <type>bool</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="67" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a619793c90c5144c08d9e54e7b008da21" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::WindowRules::checkFSP</definition>
        <argsstring>(int fsp) const</argsstring>
        <name>checkFSP</name>
        <qualifiedname>KWin::WindowRules::checkFSP</qualifiedname>
        <param>
          <type>int</type>
          <declname>fsp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="68" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a7d783ee0776131c6956b916ab0dca29f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::WindowRules::checkFPP</definition>
        <argsstring>(int fpp) const</argsstring>
        <name>checkFPP</name>
        <qualifiedname>KWin::WindowRules::checkFPP</qualifiedname>
        <param>
          <type>int</type>
          <declname>fpp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="69" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1ab760d50dadf799250eb86b575fd1335f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::WindowRules::checkAcceptFocus</definition>
        <argsstring>(bool focus) const</argsstring>
        <name>checkAcceptFocus</name>
        <qualifiedname>KWin::WindowRules::checkAcceptFocus</qualifiedname>
        <param>
          <type>bool</type>
          <declname>focus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="70" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a42857ecdd87fb70c943a1d9b2694b31e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::WindowRules::checkCloseable</definition>
        <argsstring>(bool closeable) const</argsstring>
        <name>checkCloseable</name>
        <qualifiedname>KWin::WindowRules::checkCloseable</qualifiedname>
        <param>
          <type>bool</type>
          <declname>closeable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="71" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a95adbeb4b2a8ee051acd00426eef6e5c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::WindowRules::checkAutogrouping</definition>
        <argsstring>(bool autogroup) const</argsstring>
        <name>checkAutogrouping</name>
        <qualifiedname>KWin::WindowRules::checkAutogrouping</qualifiedname>
        <param>
          <type>bool</type>
          <declname>autogroup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="72" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a743e40eef17be0cc4f71b5b7920dde04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::WindowRules::checkAutogroupInForeground</definition>
        <argsstring>(bool fg) const</argsstring>
        <name>checkAutogroupInForeground</name>
        <qualifiedname>KWin::WindowRules::checkAutogroupInForeground</qualifiedname>
        <param>
          <type>bool</type>
          <declname>fg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="73" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a9f994df977d4167fcf17b1adf4b7fee7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::WindowRules::checkAutogroupById</definition>
        <argsstring>(QString id) const</argsstring>
        <name>checkAutogroupById</name>
        <qualifiedname>KWin::WindowRules::checkAutogroupById</qualifiedname>
        <param>
          <type>QString</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="74" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a4a9828358889e0b770163e82ace61d3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::WindowRules::checkStrictGeometry</definition>
        <argsstring>(bool strict) const</argsstring>
        <name>checkStrictGeometry</name>
        <qualifiedname>KWin::WindowRules::checkStrictGeometry</qualifiedname>
        <param>
          <type>bool</type>
          <declname>strict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="75" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a2fd9aa62a8f9f66a614c9e0745a6ea6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::WindowRules::checkShortcut</definition>
        <argsstring>(QString s, bool init=false) const</argsstring>
        <name>checkShortcut</name>
        <qualifiedname>KWin::WindowRules::checkShortcut</qualifiedname>
        <param>
          <type>QString</type>
          <declname>s</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="76" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a3867ea597fb2b4efa9b77fe1a48af570" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::WindowRules::checkDisableGlobalShortcuts</definition>
        <argsstring>(bool disable) const</argsstring>
        <name>checkDisableGlobalShortcuts</name>
        <qualifiedname>KWin::WindowRules::checkDisableGlobalShortcuts</qualifiedname>
        <param>
          <type>bool</type>
          <declname>disable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="77" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a2b7fc32ef4ad6f20d7ee7273d1355cd1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::WindowRules::checkDesktopFile</definition>
        <argsstring>(QString desktopFile, bool init=false) const</argsstring>
        <name>checkDesktopFile</name>
        <qualifiedname>KWin::WindowRules::checkDesktopFile</qualifiedname>
        <param>
          <type>QString</type>
          <declname>desktopFile</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="78" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a36891a5419ff76c362706ade1eaa8489" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7b" kindref="member">Layer</ref></type>
        <definition>Layer KWin::WindowRules::checkLayer</definition>
        <argsstring>(Layer layer) const</argsstring>
        <name>checkLayer</name>
        <qualifiedname>KWin::WindowRules::checkLayer</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7b" kindref="member">Layer</ref></type>
          <declname>layer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="79" column="11"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1acf4cd6684f87da3940247bf0e74171f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::WindowRules::checkAdaptiveSync</definition>
        <argsstring>(bool adaptivesync) const</argsstring>
        <name>checkAdaptiveSync</name>
        <qualifiedname>KWin::WindowRules::checkAdaptiveSync</qualifiedname>
        <param>
          <type>bool</type>
          <declname>adaptivesync</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="80" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1a139c985ce516e000e0d471a7d324fe9f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::WindowRules::checkTearing</definition>
        <argsstring>(bool requestsTearing) const</argsstring>
        <name>checkTearing</name>
        <qualifiedname>KWin::WindowRules::checkTearing</qualifiedname>
        <param>
          <type>bool</type>
          <declname>requestsTearing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="81" column="10"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1ae5f4385945edd562d416d8dfad1a52e3" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9" kindref="member">MaximizeMode</ref></type>
        <definition>MaximizeMode KWin::WindowRules::checkMaximizeVert</definition>
        <argsstring>(MaximizeMode mode, bool init) const</argsstring>
        <name>checkMaximizeVert</name>
        <qualifiedname>KWin::WindowRules::checkMaximizeVert</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9" kindref="member">MaximizeMode</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="84" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_rules_1af1292441333ae51e30317d5e3709033a" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9" kindref="member">MaximizeMode</ref></type>
        <definition>MaximizeMode KWin::WindowRules::checkMaximizeHoriz</definition>
        <argsstring>(MaximizeMode mode, bool init) const</argsstring>
        <name>checkMaximizeHoriz</name>
        <qualifiedname>KWin::WindowRules::checkMaximizeHoriz</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9" kindref="member">MaximizeMode</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.h" line="85" column="18"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="kwin/src/rules.h" line="33" column="1" bodyfile="kwin/src/rules.h" bodystart="34" bodyend="87"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_window_rules_1ab760d50dadf799250eb86b575fd1335f" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkAcceptFocus</name></member>
      <member refid="class_k_win_1_1_window_rules_1a9b4af063dcf9ffbc39a8217453ac7652" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkActivity</name></member>
      <member refid="class_k_win_1_1_window_rules_1acf4cd6684f87da3940247bf0e74171f3" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkAdaptiveSync</name></member>
      <member refid="class_k_win_1_1_window_rules_1a9f994df977d4167fcf17b1adf4b7fee7" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkAutogroupById</name></member>
      <member refid="class_k_win_1_1_window_rules_1a743e40eef17be0cc4f71b5b7920dde04" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkAutogroupInForeground</name></member>
      <member refid="class_k_win_1_1_window_rules_1a95adbeb4b2a8ee051acd00426eef6e5c" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkAutogrouping</name></member>
      <member refid="class_k_win_1_1_window_rules_1a74cad7f3572eea5ef7267c904ea759c1" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkBlockCompositing</name></member>
      <member refid="class_k_win_1_1_window_rules_1a42857ecdd87fb70c943a1d9b2694b31e" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkCloseable</name></member>
      <member refid="class_k_win_1_1_window_rules_1a6098b59f4fcb05d498a3f95e0d6deab2" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkDecoColor</name></member>
      <member refid="class_k_win_1_1_window_rules_1a2b7fc32ef4ad6f20d7ee7273d1355cd1" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkDesktopFile</name></member>
      <member refid="class_k_win_1_1_window_rules_1a9af0e2334ddf5f59311c60084407aa7f" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkDesktops</name></member>
      <member refid="class_k_win_1_1_window_rules_1a3867ea597fb2b4efa9b77fe1a48af570" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkDisableGlobalShortcuts</name></member>
      <member refid="class_k_win_1_1_window_rules_1a7d783ee0776131c6956b916ab0dca29f" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkFPP</name></member>
      <member refid="class_k_win_1_1_window_rules_1a619793c90c5144c08d9e54e7b008da21" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkFSP</name></member>
      <member refid="class_k_win_1_1_window_rules_1a4ede2d298eb97279b73e0cd63cc22e14" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkFullScreen</name></member>
      <member refid="class_k_win_1_1_window_rules_1aff871b3faf206d3b2bd12548992f42b7" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkGeometry</name></member>
      <member refid="class_k_win_1_1_window_rules_1ac8c0db3f363ce09860d9a18d5de8f0fb" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkGeometrySafe</name></member>
      <member refid="class_k_win_1_1_window_rules_1a65f730a34a9a8ca846ea227c239a4e32" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkIgnoreGeometry</name></member>
      <member refid="class_k_win_1_1_window_rules_1afb4eed2611003795f6733853ae8fe352" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkKeepAbove</name></member>
      <member refid="class_k_win_1_1_window_rules_1a568cadcfbf4f6533dfd6d51f50b847a7" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkKeepBelow</name></member>
      <member refid="class_k_win_1_1_window_rules_1a36891a5419ff76c362706ade1eaa8489" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkLayer</name></member>
      <member refid="class_k_win_1_1_window_rules_1a9f56fb1b08d9528b03af0298fe0de827" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkMaximize</name></member>
      <member refid="class_k_win_1_1_window_rules_1af1292441333ae51e30317d5e3709033a" prot="private" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkMaximizeHoriz</name></member>
      <member refid="class_k_win_1_1_window_rules_1ae5f4385945edd562d416d8dfad1a52e3" prot="private" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkMaximizeVert</name></member>
      <member refid="class_k_win_1_1_window_rules_1a1d76722569bc0a6eefe76d2a3994f1a9" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkMaxSize</name></member>
      <member refid="class_k_win_1_1_window_rules_1ab1ecc066865f3279e2aa437545465888" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkMinimize</name></member>
      <member refid="class_k_win_1_1_window_rules_1aceb819770759542e01c43ad181cb9a3e" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkMinSize</name></member>
      <member refid="class_k_win_1_1_window_rules_1a3a00bc4799dc001632d55ec73927d74d" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkNoBorder</name></member>
      <member refid="class_k_win_1_1_window_rules_1ab828ef8f9dcb195912a9506039cf1787" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkOpacityActive</name></member>
      <member refid="class_k_win_1_1_window_rules_1a423e84af96073b578ae8fa89c58281c2" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkOpacityInactive</name></member>
      <member refid="class_k_win_1_1_window_rules_1a4c717174d4c4c7842e57e3953cbb5c7b" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkOutput</name></member>
      <member refid="class_k_win_1_1_window_rules_1a02682168445a823b0687c35420800a12" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkPlacement</name></member>
      <member refid="class_k_win_1_1_window_rules_1af898a63398416ee364185c48123247f3" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkPosition</name></member>
      <member refid="class_k_win_1_1_window_rules_1a0ca12cfdee8377b656e40860b240131e" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkPositionSafe</name></member>
      <member refid="class_k_win_1_1_window_rules_1a9e142eaf439abc2b18ed9b009564806d" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkShade</name></member>
      <member refid="class_k_win_1_1_window_rules_1a2fd9aa62a8f9f66a614c9e0745a6ea6b" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkShortcut</name></member>
      <member refid="class_k_win_1_1_window_rules_1ab6503ce96bff84047f79b72a4bc9048e" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkSize</name></member>
      <member refid="class_k_win_1_1_window_rules_1a60b92d405edd00706ba3489d0bc76d6b" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkSkipPager</name></member>
      <member refid="class_k_win_1_1_window_rules_1a5eb4eef09a5d7da72b26d7a62e74b8ce" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkSkipSwitcher</name></member>
      <member refid="class_k_win_1_1_window_rules_1abb76689fda6080e8deefcfd9cf9e1d42" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkSkipTaskbar</name></member>
      <member refid="class_k_win_1_1_window_rules_1a4a9828358889e0b770163e82ace61d3c" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkStrictGeometry</name></member>
      <member refid="class_k_win_1_1_window_rules_1a139c985ce516e000e0d471a7d324fe9f" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>checkTearing</name></member>
      <member refid="class_k_win_1_1_window_rules_1a440b157d5c28cae8ce4caa75a659cb27" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>contains</name></member>
      <member refid="class_k_win_1_1_window_rules_1a9bacb6577dbad10091898dfb6338374d" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>remove</name></member>
      <member refid="class_k_win_1_1_window_rules_1aefb0a06e2a0df456f62850f69d95c233" prot="private" virt="non-virtual"><scope>KWin::WindowRules</scope><name>rules</name></member>
      <member refid="class_k_win_1_1_window_rules_1a83e51d94a4e96169110e27e15b178ad5" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>update</name></member>
      <member refid="class_k_win_1_1_window_rules_1a00089c7b8454e14301432b33a26f3935" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>WindowRules</name></member>
      <member refid="class_k_win_1_1_window_rules_1ad0347130a5215564fe568359ef57387c" prot="public" virt="non-virtual"><scope>KWin::WindowRules</scope><name>WindowRules</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
