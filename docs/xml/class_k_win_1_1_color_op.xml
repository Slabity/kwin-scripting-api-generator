<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_color_op" kind="class" language="C++" prot="public">
    <compoundname>KWin::ColorOp</compoundname>
    <includes refid="colorpipeline_8h" local="no">colorpipeline.h</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_color_op_1a9d406b010fbb91164c4a2c5d56adb0d2" prot="public" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref></type>
        <definition>ValueRange KWin::ColorOp::input</definition>
        <argsstring></argsstring>
        <name>input</name>
        <qualifiedname>KWin::ColorOp::input</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="90" column="16" bodyfile="kwin/src/core/colorpipeline.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_color_op_1a0e5fd273177b549f312a92499cdbb330" prot="public" static="no" mutable="no">
        <type>std::variant&lt; <ref refid="class_k_win_1_1_color_transfer_function" kindref="compound">ColorTransferFunction</ref>, <ref refid="class_k_win_1_1_inverse_color_transfer_function" kindref="compound">InverseColorTransferFunction</ref>, <ref refid="class_k_win_1_1_color_matrix" kindref="compound">ColorMatrix</ref>, <ref refid="class_k_win_1_1_color_multiplier" kindref="compound">ColorMultiplier</ref>, <ref refid="class_k_win_1_1_color_tonemapper" kindref="compound">ColorTonemapper</ref>, std::shared_ptr&lt; <ref refid="class_k_win_1_1_color_transformation" kindref="compound">ColorTransformation</ref> &gt;, std::shared_ptr&lt; <ref refid="class_k_win_1_1_color_l_u_t3_d" kindref="compound">ColorLUT3D</ref> &gt; &gt;</type>
        <definition>std::variant&lt;ColorTransferFunction, InverseColorTransferFunction, ColorMatrix, ColorMultiplier, ColorTonemapper, std::shared_ptr&lt;ColorTransformation&gt;, std::shared_ptr&lt;ColorLUT3D&gt; &gt; KWin::ColorOp::operation</definition>
        <argsstring></argsstring>
        <name>operation</name>
        <qualifiedname>KWin::ColorOp::operation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="91" column="18" bodyfile="kwin/src/core/colorpipeline.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_color_op_1ae5edd877718c031f47ab6f87e3373774" prot="public" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref></type>
        <definition>ValueRange KWin::ColorOp::output</definition>
        <argsstring></argsstring>
        <name>output</name>
        <qualifiedname>KWin::ColorOp::output</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="92" column="16" bodyfile="kwin/src/core/colorpipeline.h" bodystart="92" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_color_op_1a1c1efeb7ec01453fdd83fd46a25cce42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::ColorOp::operator==</definition>
        <argsstring>(const ColorOp &amp;) const =default</argsstring>
        <name>operator==</name>
        <qualifiedname>KWin::ColorOp::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_color_op" kindref="compound">ColorOp</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="94" column="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>KWin::ColorOp</label>
        <link refid="class_k_win_1_1_color_op"/>
        <childnode refid="2" relation="usage">
          <edgelabel>input</edgelabel>
          <edgelabel>output</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>KWin::ValueRange</label>
        <link refid="class_k_win_1_1_value_range"/>
      </node>
    </collaborationgraph>
    <location file="kwin/src/core/colorpipeline.h" line="87" column="1" bodyfile="kwin/src/core/colorpipeline.h" bodystart="88" bodyend="95"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_color_op_1a9d406b010fbb91164c4a2c5d56adb0d2" prot="public" virt="non-virtual"><scope>KWin::ColorOp</scope><name>input</name></member>
      <member refid="class_k_win_1_1_color_op_1a0e5fd273177b549f312a92499cdbb330" prot="public" virt="non-virtual"><scope>KWin::ColorOp</scope><name>operation</name></member>
      <member refid="class_k_win_1_1_color_op_1a1c1efeb7ec01453fdd83fd46a25cce42" prot="public" virt="non-virtual"><scope>KWin::ColorOp</scope><name>operator==</name></member>
      <member refid="class_k_win_1_1_color_op_1ae5edd877718c031f47ab6f87e3373774" prot="public" virt="non-virtual"><scope>KWin::ColorOp</scope><name>output</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
