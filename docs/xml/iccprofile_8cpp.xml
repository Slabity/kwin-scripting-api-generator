<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="iccprofile_8cpp" kind="file" language="C++">
    <compoundname>iccprofile.cpp</compoundname>
    <includes refid="iccprofile_8h" local="yes">iccprofile.h</includes>
    <includes refid="colorlut3d_8h" local="yes">colorlut3d.h</includes>
    <includes refid="colorpipelinestage_8h" local="yes">colorpipelinestage.h</includes>
    <includes refid="colortransformation_8h" local="yes">colortransformation.h</includes>
    <includes refid="common_8h" local="yes">utils/common.h</includes>
    <includes local="no">KLocalizedString</includes>
    <includes local="no">QFileInfo</includes>
    <includes local="no">lcms2.h</includes>
    <includes local="no">span</includes>
    <includes local="no">tuple</includes>
    <incdepgraph>
      <node id="4">
        <label>colorlut3d.h</label>
        <link refid="colorlut3d_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>core/colorpipeline.h</label>
        <link refid="colorpipeline_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>colorpipelinestage.h</label>
        <link refid="colorpipelinestage_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>colorspace.h</label>
        <link refid="colorspace_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>colortransformation.h</label>
        <link refid="colortransformation_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>kwin/src/core/iccprofile.cpp</label>
        <link refid="iccprofile_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>iccprofile.h</label>
        <link refid="iccprofile_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>effect/globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>utils/common.h</label>
        <link refid="common_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>utils/version.h</label>
        <link refid="version_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>KLocalizedString</label>
      </node>
      <node id="27">
        <label>QByteArray</label>
      </node>
      <node id="22">
        <label>QCoreApplication</label>
      </node>
      <node id="33">
        <label>QFileInfo</label>
      </node>
      <node id="23">
        <label>QImage</label>
      </node>
      <node id="28">
        <label>QList</label>
      </node>
      <node id="29">
        <label>QLoggingCategory</label>
      </node>
      <node id="10">
        <label>QMatrix4x4</label>
      </node>
      <node id="24">
        <label>QPoint</label>
      </node>
      <node id="30">
        <label>QRect</label>
      </node>
      <node id="16">
        <label>QString</label>
      </node>
      <node id="25">
        <label>QVariant</label>
      </node>
      <node id="5">
        <label>QVector</label>
      </node>
      <node id="11">
        <label>QVector2D</label>
      </node>
      <node id="31">
        <label>climits</label>
      </node>
      <node id="20">
        <label>config-kwin.h</label>
      </node>
      <node id="17">
        <label>expected</label>
      </node>
      <node id="7">
        <label>kwin_export.h</label>
      </node>
      <node id="34">
        <label>lcms2.h</label>
      </node>
      <node id="6">
        <label>memory</label>
      </node>
      <node id="9">
        <label>optional</label>
      </node>
      <node id="35">
        <label>span</label>
      </node>
      <node id="13">
        <label>stdint.h</label>
      </node>
      <node id="14">
        <label>tuple</label>
      </node>
      <node id="15">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_k_win">KWin</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2023<sp/>Xaver<sp/>Hugl<sp/>&lt;xaver.hugl@gmail.com&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="iccprofile_8h" kindref="compound">iccprofile.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="colorlut3d_8h" kindref="compound">colorlut3d.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="colorpipelinestage_8h" kindref="compound">colorpipelinestage.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="colortransformation_8h" kindref="compound">colortransformation.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">utils/common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KLocalizedString&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QFileInfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;lcms2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;span&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win" kindref="compound">KWin</ref></highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref><sp/>CIEXYZD50<sp/>=<sp/><ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref>{1.0,<sp/>0.0,<sp/>0.0},</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref>{0.0,<sp/>1.0,<sp/>0.0},</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref>{0.0,<sp/>0.0,<sp/>1.0},</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref>(0.9642,<sp/>1.0,<sp/>0.8249),</highlight></codeline>
<codeline lineno="26"><highlight class="normal">};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_description" kindref="compound">ColorDescription</ref><sp/><ref refid="class_k_win_1_1_icc_profile_1aaa42770c4ec2dd840ae35e7b837cae94" kindref="member">IccProfile::s_connectionSpace</ref><sp/>=<sp/><ref refid="class_k_win_1_1_color_description" kindref="compound">ColorDescription</ref>(CIEXYZD50,<sp/><ref refid="class_k_win_1_1_transfer_function" kindref="compound">TransferFunction</ref>(<ref refid="class_k_win_1_1_transfer_function_1af52e6a1609afb57e5738028613f90c13ac4d9acf6c01c7c6872491ce9d8370410" kindref="member">TransferFunction::linear</ref>,<sp/>0,<sp/>1),<sp/>1,<sp/>0,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="class_k_win_1_1_icc_profile_1a65f522d1e4f3b07cf83fcbff0b6e76cc" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_icc_profile_1a65f522d1e4f3b07cf83fcbff0b6e76cc" kindref="member">IccProfile::IccProfile</ref>(<ref refid="iccprofile_8h_1abea1909e7159ef8bdef5296a7da54948" kindref="member">cmsHPROFILE</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref><sp/>&amp;<ref refid="class_k_win_1_1_icc_profile_1a17a4ecbc9e22d4c314f93b7d7e9ae589" kindref="member">colorimetry</ref>,<sp/>std::optional&lt;ColorPipeline&gt;<sp/>&amp;&amp;bToA0Tag,<sp/>std::optional&lt;ColorPipeline&gt;<sp/>&amp;&amp;bToA1Tag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ColorTransformation&gt;<sp/>&amp;inverseEOTF,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ColorTransformation&gt;<sp/>&amp;<ref refid="class_k_win_1_1_icc_profile_1a38ed68cc3e8780df41f938fb4e9dc754" kindref="member">vcgt</ref>,<sp/>std::optional&lt;double&gt;<sp/><ref refid="class_k_win_1_1_icc_profile_1a46cb1f6d6da3cd1f0009aca6e470444a" kindref="member">minBrightness</ref>,<sp/>std::optional&lt;double&gt;<sp/><ref refid="class_k_win_1_1_icc_profile_1aa8b37585e08fb50cf8f7042bbc5aeaf9" kindref="member">maxBrightness</ref>)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_handle(handle)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_colorimetry(<ref refid="class_k_win_1_1_icc_profile_1a17a4ecbc9e22d4c314f93b7d7e9ae589" kindref="member">colorimetry</ref>)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_bToA0Tag(std::move(bToA0Tag))</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_bToA1Tag(std::move(bToA1Tag))</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_inverseEOTF(inverseEOTF)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_vcgt(<ref refid="class_k_win_1_1_icc_profile_1a38ed68cc3e8780df41f938fb4e9dc754" kindref="member">vcgt</ref>)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_minBrightness(<ref refid="class_k_win_1_1_icc_profile_1a46cb1f6d6da3cd1f0009aca6e470444a" kindref="member">minBrightness</ref>)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_maxBrightness(<ref refid="class_k_win_1_1_icc_profile_1aa8b37585e08fb50cf8f7042bbc5aeaf9" kindref="member">maxBrightness</ref>)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="class_k_win_1_1_icc_profile_1a6eaf3f25dd47fc04c8fb7a533509ee6d" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_icc_profile_1a6eaf3f25dd47fc04c8fb7a533509ee6d" kindref="member">IccProfile::~IccProfile</ref>()</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>cmsCloseProfile(m_handle);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="class_k_win_1_1_icc_profile_1a46cb1f6d6da3cd1f0009aca6e470444a" refkind="member"><highlight class="normal">std::optional&lt;double&gt;<sp/><ref refid="class_k_win_1_1_icc_profile_1a46cb1f6d6da3cd1f0009aca6e470444a" kindref="member">IccProfile::minBrightness</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="48"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_minBrightness;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="class_k_win_1_1_icc_profile_1aa8b37585e08fb50cf8f7042bbc5aeaf9" refkind="member"><highlight class="normal">std::optional&lt;double&gt;<sp/><ref refid="class_k_win_1_1_icc_profile_1aa8b37585e08fb50cf8f7042bbc5aeaf9" kindref="member">IccProfile::maxBrightness</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="53"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_maxBrightness;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="class_k_win_1_1_icc_profile_1a17a4ecbc9e22d4c314f93b7d7e9ae589" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref><sp/>&amp;<ref refid="class_k_win_1_1_icc_profile_1a17a4ecbc9e22d4c314f93b7d7e9ae589" kindref="member">IccProfile::colorimetry</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="58"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_colorimetry;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="class_k_win_1_1_icc_profile_1a5d2c66f8b295bad31f66d9c006b44d06" refkind="member"><highlight class="normal">std::shared_ptr&lt;ColorTransformation&gt;<sp/><ref refid="class_k_win_1_1_icc_profile_1a5d2c66f8b295bad31f66d9c006b44d06" kindref="member">IccProfile::inverseTransferFunction</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="63"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_inverseEOTF;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="class_k_win_1_1_icc_profile_1a38ed68cc3e8780df41f938fb4e9dc754" refkind="member"><highlight class="normal">std::shared_ptr&lt;ColorTransformation&gt;<sp/><ref refid="class_k_win_1_1_icc_profile_1a38ed68cc3e8780df41f938fb4e9dc754" kindref="member">IccProfile::vcgt</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="68"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_vcgt;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="class_k_win_1_1_icc_profile_1aca71cdedb465d5d009df1f591b2d996f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_pipeline" kindref="compound">ColorPipeline</ref><sp/>*<ref refid="class_k_win_1_1_icc_profile_1aca71cdedb465d5d009df1f591b2d996f" kindref="member">IccProfile::BToATag</ref>(<ref refid="namespace_k_win_1a72b8a93022757874f9e6f85fcf9bc4e9" kindref="member">RenderingIntent</ref><sp/>intent)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="73"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(intent)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1a72b8a93022757874f9e6f85fcf9bc4e9a09ab3095e9b2d0a7773cc3d2f0f879cd" kindref="member">RenderingIntent::Perceptual</ref>:</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_bToA0Tag<sp/>?<sp/>&amp;*m_bToA0Tag<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1a72b8a93022757874f9e6f85fcf9bc4e9a9ed6621e7967fa194f71cdb7f7d48ca0" kindref="member">RenderingIntent::RelativeColorimetric</ref>:</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>these<sp/>two<sp/>are<sp/>different<sp/>from<sp/>relative<sp/>colorimetric</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>that<sp/>has<sp/>to<sp/>be<sp/>handled<sp/>before<sp/>the<sp/>tag<sp/>is<sp/>applied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1a72b8a93022757874f9e6f85fcf9bc4e9a6ad9b8ddb1f094ecc6b4307086fc0e80" kindref="member">RenderingIntent::RelativeColorimetricWithBPC</ref>:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1a72b8a93022757874f9e6f85fcf9bc4e9af225099195868c86e68340788085dd9a" kindref="member">RenderingIntent::AbsoluteColorimetric</ref>:</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_bToA1Tag<sp/>?<sp/>&amp;*m_bToA1Tag<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_UNREACHABLE();</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;uint8_t&gt;<sp/>readTagRaw(<ref refid="iccprofile_8h_1abea1909e7159ef8bdef5296a7da54948" kindref="member">cmsHPROFILE</ref><sp/>profile,<sp/>cmsTagSignature<sp/>tag)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>numBytes<sp/>=<sp/>cmsReadRawTag(profile,<sp/>tag,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>data(numBytes);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>cmsReadRawTag(profile,<sp/>tag,<sp/>data.data(),<sp/>numBytes);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T<sp/>read(std::span&lt;const<sp/>uint8_t&gt;<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ICC<sp/>profile<sp/>data<sp/>is<sp/>big-endian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>ret;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint8_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;ret)<sp/>+<sp/>i)<sp/>=<sp/>data[index<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>-<sp/>i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>readS15Fixed16(std::span&lt;const<sp/>uint8_t&gt;<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>read&lt;int32_t&gt;(data,<sp/>index)<sp/>/<sp/>65536.0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::optional&lt;std::tuple&lt;size_t,<sp/>size_t,<sp/>size_t&gt;&gt;<sp/>parseBToACLUTSize(std::span&lt;const<sp/>uint8_t&gt;<sp/>data)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>tagType<sp/>=<sp/>read&lt;uint32_t&gt;(data,<sp/>0);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLutTag<sp/>=<sp/>tagType<sp/>==<sp/>cmsSigLut8Type<sp/>||<sp/>tagType<sp/>==<sp/>cmsSigLut16Type;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLutTag)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>size<sp/>=<sp/>data[10];</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(size,<sp/>size,<sp/>size);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>clutOffset<sp/>=<sp/>read&lt;uint32_t&gt;(data,<sp/>24);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data.size()<sp/>&lt;<sp/>clutOffset<sp/>+<sp/>19)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qCWarning(KWIN_CORE,<sp/></highlight><highlight class="stringliteral">&quot;CLut<sp/>offset<sp/>points<sp/>to<sp/>invalid<sp/>position<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>clutOffset);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(data[clutOffset<sp/>+<sp/>0],<sp/>data[clutOffset<sp/>+<sp/>1],<sp/>data[clutOffset<sp/>+<sp/>2]);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::optional&lt;QMatrix4x4&gt;<sp/>parseMatrix(std::span&lt;const<sp/>uint8_t&gt;<sp/>data,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasOffset)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>matrixSize<sp/>=<sp/>hasOffset<sp/>?<sp/>12<sp/>:<sp/>9;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/>floats;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>floats.reserve(matrixSize);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>matrixSize;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>floats.push_back(readS15Fixed16(data,<sp/>i<sp/>*<sp/>4));</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>QMatrix4x4<sp/>ret;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>ret(0,<sp/>0)<sp/>=<sp/>floats[0];</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>ret(0,<sp/>1)<sp/>=<sp/>floats[1];</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>ret(0,<sp/>2)<sp/>=<sp/>floats[2];</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>ret(1,<sp/>0)<sp/>=<sp/>floats[3];</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>ret(1,<sp/>1)<sp/>=<sp/>floats[4];</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>ret(1,<sp/>2)<sp/>=<sp/>floats[5];</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>ret(2,<sp/>0)<sp/>=<sp/>floats[6];</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>ret(2,<sp/>1)<sp/>=<sp/>floats[7];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>ret(2,<sp/>2)<sp/>=<sp/>floats[8];</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasOffset)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret(0,<sp/>3)<sp/>=<sp/>floats[9];</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret(1,<sp/>3)<sp/>=<sp/>floats[10];</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret(2,<sp/>3)<sp/>=<sp/>floats[11];</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::optional&lt;ColorPipeline&gt;<sp/>parseBToATag(<ref refid="iccprofile_8h_1abea1909e7159ef8bdef5296a7da54948" kindref="member">cmsHPROFILE</ref><sp/>profile,<sp/>cmsTagSignature<sp/>tag)</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="colortransformation_8h_1a389be27a912f1ed374ee6349e5220d0e" kindref="member">cmsPipeline</ref><sp/>*bToAPipeline<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="colortransformation_8h_1a389be27a912f1ed374ee6349e5220d0e" kindref="member">cmsPipeline</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cmsReadTag(profile,<sp/>tag));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bToAPipeline)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline" kindref="compound">ColorPipeline</ref><sp/>ret;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ICC<sp/>profiles<sp/>assume<sp/>you&apos;re<sp/>working<sp/>in<sp/>their<sp/>encoding<sp/>of<sp/>XYZ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>multiplier<sp/>converts<sp/>from<sp/>our<sp/>[0,<sp/>1]<sp/>encoding<sp/>to<sp/>the<sp/>ICC<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="class_k_win_1_1_color_pipeline_1af2cf9448e1f66763a20ef4feadae8d76" kindref="member">addMultiplier</ref>(65536.0<sp/>/<sp/>(2<sp/>*<sp/>65535.0));</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>data<sp/>=<sp/>readTagRaw(profile,<sp/>tag);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>tagType<sp/>=<sp/>read&lt;uint32_t&gt;(data,<sp/>0);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(tagType)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigLut8Type:</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigLut16Type:</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data.size()<sp/>&lt;<sp/>48)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qCWarning(KWIN_CORE)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ICC<sp/>profile<sp/>tag<sp/>is<sp/>too<sp/>small&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>data.size();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsSigLutBtoAType:</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data.size()<sp/>&lt;<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qCWarning(KWIN_CORE)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ICC<sp/>profile<sp/>tag<sp/>is<sp/>too<sp/>small&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>data.size();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qCWarning(KWIN_CORE).nospace()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>lut<sp/>type<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(char)data[0]<sp/>&lt;&lt;<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)data[1]<sp/>&lt;&lt;<sp/>(char)data[2]<sp/>&lt;&lt;<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)data[3];</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stage<sp/>=<sp/>cmsPipelineGetPtrToFirstStage(bToAPipeline);<sp/>stage<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>stage<sp/>=<sp/>cmsStageNext(stage))<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cmsStageSignature<sp/>stageType<sp/>=<sp/>cmsStageType(stage))<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsStageSignature::cmsSigCurveSetElemType:<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>read<sp/>the<sp/>actual<sp/>functions<sp/>and<sp/>apply<sp/>them<sp/>in<sp/>the<sp/>shader<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>using<sp/>LUTs<sp/>for<sp/>more<sp/>accuracy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::unique_ptr&lt;ColorPipelineStage&gt;&gt;<sp/>stages;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stages.push_back(std::make_unique&lt;ColorPipelineStage&gt;(cmsStageDup(stage)));</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>transformation<sp/>=<sp/>std::make_shared&lt;ColorTransformation&gt;(std::move(stages));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.add(<ref refid="class_k_win_1_1_color_op" kindref="compound">ColorOp</ref>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.input<sp/>=<sp/><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref>(),</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.operation<sp/>=<sp/>transformation,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.output<sp/>=<sp/><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref>(),</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsStageSignature::cmsSigMatrixElemType:<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLutTag<sp/>=<sp/>tagType<sp/>==<sp/>cmsSigLut8Type<sp/>||<sp/>tagType<sp/>==<sp/>cmsSigLut16Type;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>matrixOffset<sp/>=<sp/>isLutTag<sp/>?<sp/>12<sp/>:<sp/>read&lt;uint32_t&gt;(data,<sp/>16);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>matrixSize<sp/>=<sp/>isLutTag<sp/>?<sp/>9<sp/>:<sp/>12;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data.size()<sp/>&lt;<sp/>matrixOffset<sp/>+<sp/>matrixSize<sp/>*<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qCWarning(KWIN_CORE,<sp/></highlight><highlight class="stringliteral">&quot;matrix<sp/>offset<sp/>points<sp/>to<sp/>invalid<sp/>position<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>matrixOffset);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mat<sp/>=<sp/>parseMatrix(std::span(data).subspan(matrixOffset),<sp/>!isLutTag);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mat)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.add(<ref refid="class_k_win_1_1_color_op" kindref="compound">ColorOp</ref>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.input<sp/>=<sp/><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref>{},</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.operation<sp/>=<sp/><ref refid="class_k_win_1_1_color_matrix" kindref="compound">ColorMatrix</ref>(*mat),</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.output<sp/>=<sp/><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref>{},</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>cmsStageSignature::cmsSigCLutElemType:<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>parseBToACLUTSize(data);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!size)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[x,<sp/>y,<sp/>z]<sp/>=<sp/>*size;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::unique_ptr&lt;ColorPipelineStage&gt;&gt;<sp/>stages;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stages.push_back(std::make_unique&lt;ColorPipelineStage&gt;(cmsStageDup(stage)));</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.add(<ref refid="class_k_win_1_1_color_op" kindref="compound">ColorOp</ref>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.input<sp/>=<sp/><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref>{},</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.operation<sp/>=<sp/>std::make_shared&lt;ColorLUT3D&gt;(std::make_unique&lt;ColorTransformation&gt;(std::move(stages)),<sp/>x,<sp/>y,<sp/>z),</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.output<sp/>=<sp/><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref>{},</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qCWarning(KWIN_CORE,<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>stage<sp/>type<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>stageType);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref><sp/>D50{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>.X<sp/>=<sp/>0.9642,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>.Y<sp/>=<sp/>1.0,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>.Z<sp/>=<sp/>0.8249,</highlight></codeline>
<codeline lineno="242"><highlight class="normal">};</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="class_k_win_1_1_icc_profile_1af4a3ac4edf53e22f327152864cbe1956" refkind="member"><highlight class="normal">std::expected&lt;std::unique_ptr&lt;IccProfile&gt;,<sp/>QString&gt;<sp/><ref refid="class_k_win_1_1_icc_profile_1af4a3ac4edf53e22f327152864cbe1956" kindref="member">IccProfile::load</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>&amp;path)</highlight></codeline>
<codeline lineno="245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path.isEmpty())<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="iccprofile_8h_1abea1909e7159ef8bdef5296a7da54948" kindref="member">cmsHPROFILE</ref><sp/>handle<sp/>=<sp/>cmsOpenProfileFromFile(path.toUtf8(),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!handle)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(QFileInfo::exists(path))<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unexpected(i18n(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>ICC<sp/>profile<sp/>\&quot;%1\&quot;&quot;</highlight><highlight class="normal">,<sp/>path));</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unexpected(i18n(</highlight><highlight class="stringliteral">&quot;ICC<sp/>profile<sp/>\&quot;%1\&quot;<sp/>doesn&apos;t<sp/>exist&quot;</highlight><highlight class="normal">,<sp/>path));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmsGetDeviceClass(handle)<sp/>!=<sp/>cmsSigDisplayClass)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unexpected(i18n(</highlight><highlight class="stringliteral">&quot;ICC<sp/>profile<sp/>\&quot;%1\&quot;<sp/>is<sp/>not<sp/>usable<sp/>for<sp/>displays&quot;</highlight><highlight class="normal">,<sp/>path));</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmsGetPCS(handle)<sp/>!=<sp/>cmsColorSpaceSignature::cmsSigXYZData)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unexpected(i18n(</highlight><highlight class="stringliteral">&quot;ICC<sp/>profile<sp/>\&quot;%1\&quot;<sp/>has<sp/>unsupported<sp/>connection<sp/>space,<sp/>only<sp/>XYZ<sp/>is<sp/>supported&quot;</highlight><highlight class="normal">,<sp/>path));</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmsGetColorSpace(handle)<sp/>!=<sp/>cmsColorSpaceSignature::cmsSigRgbData)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unexpected(i18n(</highlight><highlight class="stringliteral">&quot;ICC<sp/>profile<sp/>\&quot;%1\&quot;<sp/>is<sp/>broken,<sp/>input/output<sp/>color<sp/>space<sp/>isn&apos;t<sp/>RGB&quot;</highlight><highlight class="normal">,<sp/>path));</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ColorTransformation&gt;<sp/><ref refid="class_k_win_1_1_icc_profile_1a38ed68cc3e8780df41f938fb4e9dc754" kindref="member">vcgt</ref>;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>cmsToneCurve<sp/>**vcgtTag<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">cmsToneCurve<sp/>**</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cmsReadTag(handle,<sp/>cmsSigVcgtTag));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vcgtTag<sp/>&amp;&amp;<sp/>vcgtTag[0])<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Need<sp/>to<sp/>duplicate<sp/>the<sp/>VCGT<sp/>tone<sp/>curves<sp/>as<sp/>they<sp/>are<sp/>owned<sp/>by<sp/>the<sp/>profile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsToneCurve<sp/>*toneCurves[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsDupToneCurve(vcgtTag[0]),</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsDupToneCurve(vcgtTag[1]),</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsDupToneCurve(vcgtTag[2]),</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::unique_ptr&lt;ColorPipelineStage&gt;&gt;<sp/>stages;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stages.push_back(std::make_unique&lt;ColorPipelineStage&gt;(cmsStageAllocToneCurves(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>3,<sp/>toneCurves)));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_icc_profile_1a38ed68cc3e8780df41f938fb4e9dc754" kindref="member">vcgt</ref><sp/>=<sp/>std::make_shared&lt;ColorTransformation&gt;(std::move(stages));</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cmsCIEXYZ<sp/>*whitepoint<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">cmsCIEXYZ<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cmsReadTag(handle,<sp/>cmsSigMediaWhitePointTag));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!whitepoint)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unexpected(i18n(</highlight><highlight class="stringliteral">&quot;ICC<sp/>profile<sp/>\&quot;%1\&quot;<sp/>is<sp/>broken,<sp/>it<sp/>has<sp/>no<sp/>whitepoint&quot;</highlight><highlight class="normal">,<sp/>path));</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(whitepoint-&gt;Y<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unexpected(i18n(</highlight><highlight class="stringliteral">&quot;ICC<sp/>profile<sp/>\&quot;%1\&quot;<sp/>is<sp/>broken,<sp/>its<sp/>whitepoint<sp/>is<sp/>invalid&quot;</highlight><highlight class="normal">,<sp/>path));</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref><sp/>red;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref><sp/>green;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref><sp/>blue;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref><sp/>white<sp/>=<sp/><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref>{whitepoint-&gt;X,<sp/>whitepoint-&gt;Y,<sp/>whitepoint-&gt;Z};</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>std::optional&lt;QMatrix4x4&gt;<sp/>chromaticAdaptationMatrix;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmsIsTag(handle,<sp/>cmsSigChromaticAdaptationTag))<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>chromatic<sp/>adaptation<sp/>tag<sp/>is<sp/>a<sp/>3x3<sp/>matrix<sp/>that<sp/>converts<sp/>from<sp/>the<sp/>actual<sp/>whitepoint<sp/>to<sp/>D50</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>data<sp/>=<sp/>readTagRaw(handle,<sp/>cmsSigChromaticAdaptationTag);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mat<sp/>=<sp/>parseMatrix(std::span(data).subspan(8),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mat)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unexpected(i18n(</highlight><highlight class="stringliteral">&quot;ICC<sp/>profile<sp/>\&quot;%1\&quot;<sp/>is<sp/>broken,<sp/>parsing<sp/>chromatic<sp/>adaptation<sp/>matrix<sp/>failed&quot;</highlight><highlight class="normal">,<sp/>path));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>invertable<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chromaticAdaptationMatrix<sp/>=<sp/>mat-&gt;inverted(&amp;invertable);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!invertable)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unexpected(i18n(</highlight><highlight class="stringliteral">&quot;ICC<sp/>profile<sp/>\&quot;%1\&quot;<sp/>is<sp/>broken,<sp/>inverting<sp/>chromatic<sp/>adaptation<sp/>matrix<sp/>failed&quot;</highlight><highlight class="normal">,<sp/>path));</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>white<sp/>=<sp/><ref refid="struct_k_win_1_1_x_y_z_1ae91c883816b868d587e5c5fbff8ed9e4" kindref="member">XYZ::fromVector</ref>(*chromaticAdaptationMatrix<sp/>*<sp/>D50.asVector());</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmsCIExyYTRIPLE<sp/>*chrmTag<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">cmsCIExyYTRIPLE<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cmsReadTag(handle,<sp/>cmsSigChromaticityTag)))<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>red<sp/>=<sp/><ref refid="struct_k_win_1_1xy_y" kindref="compound">xyY</ref>{chrmTag-&gt;Red.x,<sp/>chrmTag-&gt;Red.y,<sp/>chrmTag-&gt;Red.Y}.<ref refid="struct_k_win_1_1xy_y_1ac17db8548777ab3470578978c5c7ac6d" kindref="member">toXYZ</ref>();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>green<sp/>=<sp/><ref refid="struct_k_win_1_1xy_y" kindref="compound">xyY</ref>{chrmTag-&gt;Green.x,<sp/>chrmTag-&gt;Green.y,<sp/>chrmTag-&gt;Green.Y}.<ref refid="struct_k_win_1_1xy_y_1ac17db8548777ab3470578978c5c7ac6d" kindref="member">toXYZ</ref>();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blue<sp/>=<sp/><ref refid="struct_k_win_1_1xy_y" kindref="compound">xyY</ref>{chrmTag-&gt;Blue.x,<sp/>chrmTag-&gt;Blue.y,<sp/>chrmTag-&gt;Blue.Y}.<ref refid="struct_k_win_1_1xy_y_1ac17db8548777ab3470578978c5c7ac6d" kindref="member">toXYZ</ref>();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cmsCIEXYZ<sp/>*r<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">cmsCIEXYZ<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cmsReadTag(handle,<sp/>cmsSigRedColorantTag));</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cmsCIEXYZ<sp/>*g<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">cmsCIEXYZ<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cmsReadTag(handle,<sp/>cmsSigGreenColorantTag));</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cmsCIEXYZ<sp/>*b<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">cmsCIEXYZ<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cmsReadTag(handle,<sp/>cmsSigBlueColorantTag));</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!r<sp/>||<sp/>!g<sp/>||<sp/>!b)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unexpected(i18n(</highlight><highlight class="stringliteral">&quot;ICC<sp/>profile<sp/>\&quot;%1\&quot;<sp/>is<sp/>broken,<sp/>it<sp/>has<sp/>no<sp/>primaries&quot;</highlight><highlight class="normal">,<sp/>path));</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chromaticAdaptationMatrix)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>red<sp/>=<sp/><ref refid="struct_k_win_1_1_x_y_z_1ae91c883816b868d587e5c5fbff8ed9e4" kindref="member">XYZ::fromVector</ref>(*chromaticAdaptationMatrix<sp/>*<sp/>QVector3D(r-&gt;X,<sp/>r-&gt;Y,<sp/>r-&gt;Z));</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>green<sp/>=<sp/><ref refid="struct_k_win_1_1_x_y_z_1ae91c883816b868d587e5c5fbff8ed9e4" kindref="member">XYZ::fromVector</ref>(*chromaticAdaptationMatrix<sp/>*<sp/>QVector3D(g-&gt;X,<sp/>g-&gt;Y,<sp/>g-&gt;Z));</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blue<sp/>=<sp/><ref refid="struct_k_win_1_1_x_y_z_1ae91c883816b868d587e5c5fbff8ed9e4" kindref="member">XYZ::fromVector</ref>(*chromaticAdaptationMatrix<sp/>*<sp/>QVector3D(b-&gt;X,<sp/>b-&gt;Y,<sp/>b-&gt;Z));</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>chromatic<sp/>adaptation<sp/>tag<sp/>isn&apos;t<sp/>available,<sp/>fall<sp/>back<sp/>to<sp/>using<sp/>the<sp/>media<sp/>whitepoint<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsCIEXYZ<sp/>adaptedR{};</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsCIEXYZ<sp/>adaptedG{};</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsCIEXYZ<sp/>adaptedB{};</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/>cmsAdaptToIlluminant(&amp;adaptedR,<sp/>cmsD50_XYZ(),<sp/>whitepoint,<sp/>r);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>success<sp/>&amp;=<sp/>cmsAdaptToIlluminant(&amp;adaptedG,<sp/>cmsD50_XYZ(),<sp/>whitepoint,<sp/>g);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>success<sp/>&amp;=<sp/>cmsAdaptToIlluminant(&amp;adaptedB,<sp/>cmsD50_XYZ(),<sp/>whitepoint,<sp/>b);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!success)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unexpected(i18n(</highlight><highlight class="stringliteral">&quot;ICC<sp/>profile<sp/>\&quot;%1\&quot;<sp/>is<sp/>broken,<sp/>couldn&apos;t<sp/>calculate<sp/>its<sp/>primaries&quot;</highlight><highlight class="normal">,<sp/>path));</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>red<sp/>=<sp/><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref>(adaptedR.X,<sp/>adaptedR.Y,<sp/>adaptedR.Z);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>green<sp/>=<sp/><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref>(adaptedG.X,<sp/>adaptedG.Y,<sp/>adaptedG.Z);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blue<sp/>=<sp/><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref>(adaptedB.X,<sp/>adaptedB.Y,<sp/>adaptedB.Z);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(red.<ref refid="struct_k_win_1_1_x_y_z_1acf30a364caec1db305f64bda2b6bfced" kindref="member">Y</ref><sp/>==<sp/>0<sp/>||<sp/>green.<ref refid="struct_k_win_1_1_x_y_z_1acf30a364caec1db305f64bda2b6bfced" kindref="member">Y</ref><sp/>==<sp/>0<sp/>||<sp/>blue.<ref refid="struct_k_win_1_1_x_y_z_1acf30a364caec1db305f64bda2b6bfced" kindref="member">Y</ref><sp/>==<sp/>0<sp/>||<sp/>white.<ref refid="struct_k_win_1_1_x_y_z_1acf30a364caec1db305f64bda2b6bfced" kindref="member">Y</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unexpected(i18n(</highlight><highlight class="stringliteral">&quot;ICC<sp/>profile<sp/>\&quot;%1\&quot;<sp/>is<sp/>broken,<sp/>its<sp/>primaries<sp/>are<sp/>invalid&quot;</highlight><highlight class="normal">,<sp/>path));</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>std::optional&lt;double&gt;<sp/><ref refid="class_k_win_1_1_icc_profile_1a46cb1f6d6da3cd1f0009aca6e470444a" kindref="member">minBrightness</ref>;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>std::optional&lt;double&gt;<sp/><ref refid="class_k_win_1_1_icc_profile_1aa8b37585e08fb50cf8f7042bbc5aeaf9" kindref="member">maxBrightness</ref>;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmsCIEXYZ<sp/>*luminance<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">cmsCIEXYZ<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cmsReadTag(handle,<sp/>cmsSigLuminanceTag)))<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>some<sp/>reason,<sp/>lcms<sp/>exposes<sp/>the<sp/>luminance<sp/>as<sp/>a<sp/>XYZ<sp/>triple...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>Y<sp/>is<sp/>non-zero,<sp/>and<sp/>it&apos;s<sp/>the<sp/>brightness<sp/>in<sp/>nits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_icc_profile_1aa8b37585e08fb50cf8f7042bbc5aeaf9" kindref="member">maxBrightness</ref><sp/>=<sp/>luminance-&gt;Y;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsCIEXYZ<sp/>blackPoint;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmsDetectDestinationBlackPoint(&amp;blackPoint,<sp/>handle,<sp/>INTENT_RELATIVE_COLORIMETRIC,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_icc_profile_1a46cb1f6d6da3cd1f0009aca6e470444a" kindref="member">minBrightness</ref><sp/>=<sp/>blackPoint.Y<sp/>*<sp/>luminance-&gt;Y;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmsIsTag(handle,<sp/>cmsSigBToD1Tag)<sp/>&amp;&amp;<sp/>!cmsIsTag(handle,<sp/>cmsSigBToA1Tag)<sp/>&amp;&amp;<sp/>!cmsIsTag(handle,<sp/>cmsSigBToA0Tag))<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unexpected(i18n(</highlight><highlight class="stringliteral">&quot;ICC<sp/>profile<sp/>\&quot;%1\&quot;<sp/>with<sp/>only<sp/>BToD<sp/>tags<sp/>isn&apos;t<sp/>supported&quot;</highlight><highlight class="normal">,<sp/>path));</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>std::optional&lt;ColorPipeline&gt;<sp/>bToA0;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>std::optional&lt;ColorPipeline&gt;<sp/>bToA1;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmsIsTag(handle,<sp/>cmsSigBToA0Tag))<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bToA0<sp/>=<sp/>parseBToATag(handle,<sp/>cmsSigBToA0Tag);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmsIsTag(handle,<sp/>cmsSigBToA1Tag))<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bToA1<sp/>=<sp/>parseBToATag(handle,<sp/>cmsSigBToA1Tag);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>trcSize<sp/>=<sp/>4096;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;cmsToneCurve<sp/>*,<sp/>3&gt;<sp/>toneCurves;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bToA0<sp/>||<sp/>bToA1)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>TRC<sp/>tags<sp/>are<sp/>often<sp/>nonsense<sp/>when<sp/>the<sp/>BToA<sp/>tag<sp/>exists,<sp/>so<sp/>this<sp/>estimates<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inverse<sp/>transfer<sp/>function<sp/>by<sp/>doing<sp/>a<sp/>grayscale<sp/>transform<sp/>on<sp/>the<sp/>BToA<sp/>tag<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QMatrix4x4<sp/>toXYZD50<sp/>=<sp/><ref refid="class_k_win_1_1_colorimetry_1a7c4edbbb8804bfbdab7670a55691a6b9" kindref="member">Colorimetry::chromaticAdaptationMatrix</ref>(white,<sp/>D50)<sp/>*<sp/><ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref>(red,<sp/>green,<sp/>blue,<sp/>white).<ref refid="class_k_win_1_1_colorimetry_1aaede1d30151de5781d5854246895b7b2" kindref="member">toXYZ</ref>();</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_color_pipeline" kindref="compound">ColorPipeline</ref><sp/>pipeline;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pipeline.<ref refid="class_k_win_1_1_color_pipeline_1a1a13808050915cb631114e3a8da47bed" kindref="member">addMatrix</ref>(toXYZD50,<sp/><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref>{});</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pipeline.<ref refid="class_k_win_1_1_color_pipeline_1a403fcdd3276b94a1daa752933fdf0beb" kindref="member">add</ref>(bToA1<sp/>?<sp/>*bToA1<sp/>:<sp/>*bToA0);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;float,<sp/>trcSize&gt;<sp/>red;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;float,<sp/>trcSize&gt;<sp/>green;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;float,<sp/>trcSize&gt;<sp/>blue;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>trcSize;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>relativeI<sp/>=<sp/>i<sp/>/<sp/>float(trcSize<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QVector3D<sp/>result<sp/>=<sp/>pipeline.<ref refid="class_k_win_1_1_color_pipeline_1a382839d2ce1a87b70a1a93d23799384d" kindref="member">evaluate</ref>(QVector3D{relativeI,<sp/>relativeI,<sp/>relativeI});</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>red[i]<sp/>=<sp/>result.x();</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>green[i]<sp/>=<sp/>result.y();</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blue[i]<sp/>=<sp/>result.z();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toneCurves<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsBuildTabulatedToneCurveFloat(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>trcSize,<sp/>red.data()),</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsBuildTabulatedToneCurveFloat(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>trcSize,<sp/>green.data()),</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsBuildTabulatedToneCurveFloat(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>trcSize,<sp/>blue.data()),</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsToneCurve<sp/>*r<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">cmsToneCurve<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cmsReadTag(handle,<sp/>cmsSigRedTRCTag));</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsToneCurve<sp/>*g<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">cmsToneCurve<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cmsReadTag(handle,<sp/>cmsSigGreenTRCTag));</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsToneCurve<sp/>*b<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">cmsToneCurve<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cmsReadTag(handle,<sp/>cmsSigBlueTRCTag));</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!r<sp/>||<sp/>!g<sp/>||<sp/>!b)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unexpected(i18n(</highlight><highlight class="stringliteral">&quot;Color<sp/>profile<sp/>is<sp/>missing<sp/>TRC<sp/>tags&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toneCurves<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsReverseToneCurveEx(trcSize,<sp/>r),</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsReverseToneCurveEx(trcSize,<sp/>g),</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmsReverseToneCurveEx(trcSize,<sp/>b),</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::unique_ptr&lt;ColorPipelineStage&gt;&gt;<sp/>stages;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>stages.push_back(std::make_unique&lt;ColorPipelineStage&gt;(cmsStageAllocToneCurves(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>toneCurves.size(),<sp/>toneCurves.data())));</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inverseEOTF<sp/>=<sp/>std::make_shared&lt;ColorTransformation&gt;(std::move(stages));</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;IccProfile&gt;(handle,<sp/><ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref>(red,<sp/>green,<sp/>blue,<sp/>white),<sp/>std::move(bToA0),<sp/>std::move(bToA1),<sp/>inverseEOTF,<sp/><ref refid="class_k_win_1_1_icc_profile_1a38ed68cc3e8780df41f938fb4e9dc754" kindref="member">vcgt</ref>,<sp/><ref refid="class_k_win_1_1_icc_profile_1a46cb1f6d6da3cd1f0009aca6e470444a" kindref="member">minBrightness</ref>,<sp/><ref refid="class_k_win_1_1_icc_profile_1aa8b37585e08fb50cf8f7042bbc5aeaf9" kindref="member">maxBrightness</ref>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="kwin/src/core/iccprofile.cpp"/>
  </compounddef>
</doxygen>
