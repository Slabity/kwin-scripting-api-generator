<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="test__helpers_8cpp" kind="file" language="C++">
    <compoundname>test_helpers.cpp</compoundname>
    <includes local="no">config-kwin.h</includes>
    <includes local="no">QSignalSpy</includes>
    <includes refid="kwin__wayland__test_8h" local="yes">kwin_wayland_test.h</includes>
    <includes refid="input__event_8h" local="yes">input_event.h</includes>
    <includes refid="inputmethod_8h" local="yes">inputmethod.h</includes>
    <includes refid="display_8h" local="yes">wayland/display.h</includes>
    <includes refid="wayland__server_8h" local="yes">wayland_server.h</includes>
    <includes refid="workspace_8h" local="yes">workspace.h</includes>
    <includes local="no">wayland-zkde-screencast-unstable-v1-client-protocol.h</includes>
    <includes local="no">KWayland/Client/appmenu.h</includes>
    <includes local="no">KWayland/Client/compositor.h</includes>
    <includes local="no">KWayland/Client/connection_thread.h</includes>
    <includes local="no">KWayland/Client/event_queue.h</includes>
    <includes local="no">KWayland/Client/output.h</includes>
    <includes local="no">KWayland/Client/plasmashell.h</includes>
    <includes local="no">KWayland/Client/plasmawindowmanagement.h</includes>
    <includes local="no">KWayland/Client/pointer.h</includes>
    <includes local="no">KWayland/Client/pointerconstraints.h</includes>
    <includes local="no">KWayland/Client/registry.h</includes>
    <includes local="no">KWayland/Client/seat.h</includes>
    <includes local="no">KWayland/Client/shadow.h</includes>
    <includes local="no">KWayland/Client/shm_pool.h</includes>
    <includes local="no">KWayland/Client/subcompositor.h</includes>
    <includes local="no">KWayland/Client/subsurface.h</includes>
    <includes local="no">KWayland/Client/surface.h</includes>
    <includes local="no">KWayland/Client/textinput.h</includes>
    <includes local="no">QFutureWatcher</includes>
    <includes local="no">QThread</includes>
    <includes local="no">QtConcurrentRun</includes>
    <includes local="no">sys/socket.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">xf86drm.h</includes>
    <includes local="yes">test_helpers.moc</includes>
    <incdepgraph>
      <node id="4">
        <label>kwin_wayland_test.h</label>
        <link refid="kwin__wayland__test_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>kwin/autotests/integration/test_helpers.cpp</label>
        <link refid="test__helpers_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>core/inputdevice.h</label>
        <link refid="inputdevice_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>core/renderloop.h</label>
        <link refid="renderloop_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>effect/globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>input.h</label>
        <link refid="input_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>input_event.h</label>
        <link refid="input__event_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>input_event_spy.h</label>
        <link refid="input__event__spy_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>inputmethod.h</label>
        <link refid="inputmethod_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>main.h</label>
        <link refid="main_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>options.h</label>
        <link refid="options_8h"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>sm.h</label>
        <link refid="sm_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>utils/common.h</label>
        <link refid="common_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>utils/version.h</label>
        <link refid="version_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>wayland/display.h</label>
        <link refid="display_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>textinput.h</label>
        <link refid="textinput_8h"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>wayland/textinput_v2.h</label>
        <link refid="textinput__v2_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>wayland_server.h</label>
        <link refid="wayland__server_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>workspace.h</label>
        <link refid="workspace_8h"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>KConfigGroup</label>
      </node>
      <node id="38">
        <label>KConfigWatcher</label>
      </node>
      <node id="39">
        <label>KSharedConfig</label>
      </node>
      <node id="78">
        <label>KWayland/Client/appmenu.h</label>
      </node>
      <node id="79">
        <label>KWayland/Client/compositor.h</label>
      </node>
      <node id="80">
        <label>KWayland/Client/connection_thread.h</label>
      </node>
      <node id="81">
        <label>KWayland/Client/event_queue.h</label>
      </node>
      <node id="82">
        <label>KWayland/Client/output.h</label>
      </node>
      <node id="83">
        <label>KWayland/Client/plasmashell.h</label>
      </node>
      <node id="84">
        <label>KWayland/Client/plasmawindowmanagement.h</label>
      </node>
      <node id="85">
        <label>KWayland/Client/pointer.h</label>
      </node>
      <node id="86">
        <label>KWayland/Client/pointerconstraints.h</label>
      </node>
      <node id="87">
        <label>KWayland/Client/registry.h</label>
      </node>
      <node id="88">
        <label>KWayland/Client/seat.h</label>
      </node>
      <node id="89">
        <label>KWayland/Client/shadow.h</label>
      </node>
      <node id="90">
        <label>KWayland/Client/shm_pool.h</label>
      </node>
      <node id="91">
        <label>KWayland/Client/subcompositor.h</label>
      </node>
      <node id="92">
        <label>KWayland/Client/subsurface.h</label>
      </node>
      <node id="17">
        <label>KWayland/Client/surface.h</label>
      </node>
      <node id="93">
        <label>KWayland/Client/textinput.h</label>
      </node>
      <node id="60">
        <label>QAbstractNativeEventFilter</label>
      </node>
      <node id="61">
        <label>QApplication</label>
      </node>
      <node id="71">
        <label>QByteArray</label>
      </node>
      <node id="7">
        <label>QCoreApplication</label>
      </node>
      <node id="64">
        <label>QDBusContext</label>
      </node>
      <node id="65">
        <label>QDataStream</label>
      </node>
      <node id="94">
        <label>QFutureWatcher</label>
      </node>
      <node id="8">
        <label>QImage</label>
      </node>
      <node id="54">
        <label>QList</label>
      </node>
      <node id="73">
        <label>QLoggingCategory</label>
      </node>
      <node id="74">
        <label>QMatrix4x4</label>
      </node>
      <node id="47">
        <label>QMetaType</label>
      </node>
      <node id="13">
        <label>QObject</label>
      </node>
      <node id="9">
        <label>QPoint</label>
      </node>
      <node id="37">
        <label>QPointer</label>
      </node>
      <node id="62">
        <label>QProcessEnvironment</label>
      </node>
      <node id="66">
        <label>QRect</label>
      </node>
      <node id="40">
        <label>QSet</label>
      </node>
      <node id="3">
        <label>QSignalSpy</label>
      </node>
      <node id="72">
        <label>QString</label>
      </node>
      <node id="67">
        <label>QStringList</label>
      </node>
      <node id="16">
        <label>QTest</label>
      </node>
      <node id="95">
        <label>QThread</label>
      </node>
      <node id="52">
        <label>QTimer</label>
      </node>
      <node id="10">
        <label>QVariant</label>
      </node>
      <node id="11">
        <label>QVector2D</label>
      </node>
      <node id="96">
        <label>QtConcurrentRun</label>
      </node>
      <node id="48">
        <label>QtGlobal</label>
      </node>
      <node id="42">
        <label>chrono</label>
      </node>
      <node id="75">
        <label>climits</label>
      </node>
      <node id="2">
        <label>config-kwin.h</label>
      </node>
      <node id="41">
        <label>functional</label>
      </node>
      <node id="12">
        <label>kwin_export.h</label>
      </node>
      <node id="14">
        <label>main.h</label>
      </node>
      <node id="45">
        <label>memory</label>
      </node>
      <node id="76">
        <label>netwm_def.h</label>
      </node>
      <node id="18">
        <label>optional</label>
      </node>
      <node id="19">
        <label>qwayland-color-management-v1.h</label>
      </node>
      <node id="20">
        <label>qwayland-cursor-shape-v1.h</label>
      </node>
      <node id="21">
        <label>qwayland-fake-input.h</label>
      </node>
      <node id="22">
        <label>qwayland-fractional-scale-v1.h</label>
      </node>
      <node id="23">
        <label>qwayland-idle-inhibit-unstable-v1.h</label>
      </node>
      <node id="24">
        <label>qwayland-input-method-unstable-v1.h</label>
      </node>
      <node id="25">
        <label>qwayland-kde-output-device-v2.h</label>
      </node>
      <node id="26">
        <label>qwayland-kde-output-management-v2.h</label>
      </node>
      <node id="27">
        <label>qwayland-kde-screen-edge-v1.h</label>
      </node>
      <node id="28">
        <label>qwayland-security-context-v1.h</label>
      </node>
      <node id="29">
        <label>qwayland-text-input-unstable-v3.h</label>
      </node>
      <node id="30">
        <label>qwayland-wlr-layer-shell-unstable-v1.h</label>
      </node>
      <node id="31">
        <label>qwayland-xdg-decoration-unstable-v1.h</label>
      </node>
      <node id="32">
        <label>qwayland-xdg-dialog-v1.h</label>
      </node>
      <node id="33">
        <label>qwayland-xdg-shell.h</label>
      </node>
      <node id="34">
        <label>qwayland-zkde-screencast-unstable-v1.h</label>
      </node>
      <node id="97">
        <label>sys/socket.h</label>
      </node>
      <node id="98">
        <label>sys/types.h</label>
      </node>
      <node id="101">
        <label>test_helpers.moc</label>
      </node>
      <node id="99">
        <label>unistd.h</label>
      </node>
      <node id="49">
        <label>utility</label>
      </node>
      <node id="50">
        <label>vector</label>
      </node>
      <node id="77">
        <label>wayland-zkde-screencast-unstable-v1-client-protocol.h</label>
      </node>
      <node id="15">
        <label>window.h</label>
      </node>
      <node id="100">
        <label>xf86drm.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_k_win_1_1_test_1_1_wayland_sync_point" prot="public">KWin::Test::WaylandSyncPoint</innerclass>
    <innernamespace refid="namespace_k_win">KWin</innernamespace>
    <innernamespace refid="namespace_k_win_1_1_test">KWin::Test</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>KWin<sp/>-<sp/>the<sp/>KDE<sp/>window<sp/>manager</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>KDE<sp/>project.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2015<sp/>Martin<sp/>Gräßlin<sp/>&lt;mgraesslin@kde.org&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config-kwin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QSignalSpy&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="kwin__wayland__test_8h" kindref="compound">kwin_wayland_test.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>KWIN_BUILD_SCREENLOCKER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="screenlockerwatcher_8h" kindref="compound">screenlockerwatcher.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="input__event_8h" kindref="compound">input_event.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="inputmethod_8h" kindref="compound">inputmethod.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="display_8h" kindref="compound">wayland/display.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wayland__server_8h" kindref="compound">wayland_server.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="workspace_8h" kindref="compound">workspace.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wayland-zkde-screencast-unstable-v1-client-protocol.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/appmenu.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/compositor.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/connection_thread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/event_queue.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/output.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/plasmashell.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/plasmawindowmanagement.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/pointer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/pointerconstraints.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/registry.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/seat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/shadow.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/shm_pool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/subcompositor.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/subsurface.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/surface.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/textinput.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>screenlocker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>KWIN_BUILD_SCREENLOCKER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KScreenLocker/KsldApp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QFutureWatcher&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QThread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QtConcurrentRun&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/socket.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;xf86drm.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win" kindref="compound">KWin</ref></highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win_1_1_test" kindref="compound">Test</ref></highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;Connection&gt;<sp/>s_waylandConnection;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="class_k_win_1_1_test_1_1_layer_shell_v1_1aa1fa112325ef6ff55a261022cd1e4174" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_layer_shell_v1_1aa1fa112325ef6ff55a261022cd1e4174" kindref="member">LayerShellV1::~LayerShellV1</ref>()</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="class_k_win_1_1_test_1_1_layer_surface_v1_1ae286c3499e7b673fa575ae8798915c89" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_layer_surface_v1_1ae286c3499e7b673fa575ae8798915c89" kindref="member">LayerSurfaceV1::~LayerSurfaceV1</ref>()</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="class_k_win_1_1_test_1_1_layer_surface_v1_1a1ec0c76c689671c54400fcc05622d3c4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_layer_surface_v1_1a1ec0c76c689671c54400fcc05622d3c4" kindref="member">LayerSurfaceV1::zwlr_layer_surface_v1_configure</ref>(uint32_t<sp/>serial,<sp/>uint32_t<sp/>width,<sp/>uint32_t<sp/>height)</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_k_win_1_1_test_1_1_layer_surface_v1_1ab3ac340b7d5e37b0579b36a1ac8f5d8a" kindref="member">configureRequested</ref>(serial,<sp/>QSize(width,<sp/>height));</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="class_k_win_1_1_test_1_1_layer_surface_v1_1a2b3671299d141390daec2bdfb167116b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_layer_surface_v1_1a2b3671299d141390daec2bdfb167116b" kindref="member">LayerSurfaceV1::zwlr_layer_surface_v1_closed</ref>()</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_k_win_1_1_test_1_1_layer_surface_v1_1a079e6b170d672684e76a28ad159dfc8d" kindref="member">closeRequested</ref>();</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="class_k_win_1_1_test_1_1_xdg_shell_1aafeedb958b02d3400a17b717401cbd01" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_xdg_shell_1aafeedb958b02d3400a17b717401cbd01" kindref="member">XdgShell::~XdgShell</ref>()</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="class_k_win_1_1_test_1_1_xdg_surface_1af569589a35035310a64136478cece563" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_xdg_surface_1af569589a35035310a64136478cece563" kindref="member">XdgSurface::XdgSurface</ref>(<ref refid="class_k_win_1_1_test_1_1_xdg_shell" kindref="compound">XdgShell</ref><sp/>*shell,<sp/>KWayland::Client::Surface<sp/>*<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a596671e7ea622b7214a20614049c1254" kindref="member">surface</ref>,<sp/>QObject<sp/>*parent)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>QObject(parent)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="namespace_qt_wayland" kindref="compound">QtWayland</ref>::xdg_surface(shell-&gt;get_xdg_surface(*<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a596671e7ea622b7214a20614049c1254" kindref="member">surface</ref>))</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_surface(<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a596671e7ea622b7214a20614049c1254" kindref="member">surface</ref>)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="class_k_win_1_1_test_1_1_xdg_surface_1a7a9b51c1638e077c4e996fb53ce9f5da" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7a9b51c1638e077c4e996fb53ce9f5da" kindref="member">XdgSurface::~XdgSurface</ref>()</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="class_k_win_1_1_test_1_1_xdg_surface_1a596671e7ea622b7214a20614049c1254" refkind="member"><highlight class="normal">KWayland::Client::Surface<sp/>*<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a596671e7ea622b7214a20614049c1254" kindref="member">XdgSurface::surface</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="103"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_surface;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="class_k_win_1_1_test_1_1_xdg_surface_1a33a670f5f5426f5556ba9ba2a6cd9ab9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a33a670f5f5426f5556ba9ba2a6cd9ab9" kindref="member">XdgSurface::xdg_surface_configure</ref>(uint32_t<sp/>serial)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">configureRequested</ref>(serial);</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="class_k_win_1_1_test_1_1_xdg_toplevel_1aee9525eaa992510edf8b3cd0ba2611cb" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1aee9525eaa992510edf8b3cd0ba2611cb" kindref="member">XdgToplevel::XdgToplevel</ref>(<ref refid="class_k_win_1_1_test_1_1_xdg_surface" kindref="compound">XdgSurface</ref><sp/>*surface,<sp/>QObject<sp/>*parent)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>QObject(parent)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="namespace_qt_wayland" kindref="compound">QtWayland</ref>::xdg_toplevel(surface-&gt;get_toplevel())</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_xdgSurface(surface)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="class_k_win_1_1_test_1_1_xdg_toplevel_1a8838068f2afbeb36d3975f69cdc1bec7" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1a8838068f2afbeb36d3975f69cdc1bec7" kindref="member">XdgToplevel::~XdgToplevel</ref>()</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="class_k_win_1_1_test_1_1_xdg_toplevel_1a0904d25789c7ee286cb1a944edf04cb0" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_xdg_surface" kindref="compound">XdgSurface</ref><sp/>*<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1a0904d25789c7ee286cb1a944edf04cb0" kindref="member">XdgToplevel::xdgSurface</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="125"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_xdgSurface.get();</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="class_k_win_1_1_test_1_1_xdg_toplevel_1a9a2cf7dbf7458f0c9d78c727fe80a8c9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1a9a2cf7dbf7458f0c9d78c727fe80a8c9" kindref="member">XdgToplevel::xdg_toplevel_configure</ref>(int32_t<sp/>width,<sp/>int32_t<sp/>height,<sp/>wl_array<sp/>*states)</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>States<sp/>requestedStates;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*stateData<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint32_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(states-&gt;data);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stateCount<sp/>=<sp/>states-&gt;size<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>stateCount;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(stateData[i])<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>QtWayland::xdg_toplevel::state_maximized:</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>requestedStates<sp/>|=<sp/><ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1a7440bb47e78c5081ce4912cf93dfb794a49d903a5c02560cf79bf6b516cc89457" kindref="member">State::Maximized</ref>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>QtWayland::xdg_toplevel::state_fullscreen:</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>requestedStates<sp/>|=<sp/><ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1a7440bb47e78c5081ce4912cf93dfb794a0829ea6734059d66e6bf87096b215dc1" kindref="member">State::Fullscreen</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>QtWayland::xdg_toplevel::state_resizing:</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>requestedStates<sp/>|=<sp/><ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1a7440bb47e78c5081ce4912cf93dfb794a40ad90bcd481a4e3ea17531b6d1c01e7" kindref="member">State::Resizing</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>QtWayland::xdg_toplevel::state_activated:</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>requestedStates<sp/>|=<sp/><ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1a7440bb47e78c5081ce4912cf93dfb794acb456215c3333db0551bd0788bc258c7" kindref="member">State::Activated</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">configureRequested</ref>(QSize(width,<sp/>height),<sp/>requestedStates);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="class_k_win_1_1_test_1_1_xdg_toplevel_1a7e25445a3aaef2f71970950d65325390" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1a7e25445a3aaef2f71970950d65325390" kindref="member">XdgToplevel::xdg_toplevel_close</ref>()</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1aca9814388f7a96f8ce6eaa3098c3dd18" kindref="member">closeRequested</ref>();</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="class_k_win_1_1_test_1_1_xdg_positioner_1a36fb4b780ddcbe1b1a41be9bb6240cd1" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_xdg_positioner_1aa953356b1a5bbb27d9bf2751db59ea53" kindref="member">XdgPositioner::XdgPositioner</ref>(<ref refid="class_k_win_1_1_test_1_1_xdg_shell" kindref="compound">XdgShell</ref><sp/>*shell)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_qt_wayland" kindref="compound">QtWayland</ref>::xdg_positioner(shell-&gt;create_positioner())</highlight></codeline>
<codeline lineno="163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="class_k_win_1_1_test_1_1_xdg_positioner_1af759960e685ac6f4565c9ea8d347ba56" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_xdg_positioner_1af759960e685ac6f4565c9ea8d347ba56" kindref="member">XdgPositioner::~XdgPositioner</ref>()</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="class_k_win_1_1_test_1_1_xdg_popup_1a0c25b2e500fe6327ebbe91e02661a2bc" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_xdg_popup_1a0c25b2e500fe6327ebbe91e02661a2bc" kindref="member">XdgPopup::XdgPopup</ref>(<ref refid="class_k_win_1_1_test_1_1_xdg_surface" kindref="compound">XdgSurface</ref><sp/>*surface,<sp/><ref refid="class_k_win_1_1_test_1_1_xdg_surface" kindref="compound">XdgSurface</ref><sp/>*parentSurface,<sp/><ref refid="class_k_win_1_1_test_1_1_xdg_positioner" kindref="compound">XdgPositioner</ref><sp/>*positioner,<sp/>QObject<sp/>*parent)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>QObject(parent)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="namespace_qt_wayland" kindref="compound">QtWayland</ref>::xdg_popup(surface-&gt;get_popup(parentSurface-&gt;object(),<sp/>positioner-&gt;object()))</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_xdgSurface(surface)</highlight></codeline>
<codeline lineno="175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="class_k_win_1_1_test_1_1_xdg_popup_1a1eebea854b0315fd166ca8d054b5f877" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_xdg_popup_1a1eebea854b0315fd166ca8d054b5f877" kindref="member">XdgPopup::~XdgPopup</ref>()</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="class_k_win_1_1_test_1_1_xdg_popup_1abd6fe9850f827bdc5115d3e55f17eaa7" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_xdg_surface" kindref="compound">XdgSurface</ref><sp/>*<ref refid="class_k_win_1_1_test_1_1_xdg_popup_1abd6fe9850f827bdc5115d3e55f17eaa7" kindref="member">XdgPopup::xdgSurface</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="184"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_xdgSurface.get();</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="class_k_win_1_1_test_1_1_xdg_popup_1aae7701951e584dda5cc4fb43eff20d5a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_xdg_popup_1aae7701951e584dda5cc4fb43eff20d5a" kindref="member">XdgPopup::xdg_popup_configure</ref>(int32_t<sp/>x,<sp/>int32_t<sp/>y,<sp/>int32_t<sp/>width,<sp/>int32_t<sp/>height)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_k_win_1_1_test_1_1_xdg_popup_1a49692131e1f07345dbb7242c5f9308ae" kindref="member">configureRequested</ref>(QRect(x,<sp/>y,<sp/>width,<sp/>height));</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="class_k_win_1_1_test_1_1_xdg_popup_1ade40724288ba7af45a4e8b2e3f800abe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_xdg_popup_1ade40724288ba7af45a4e8b2e3f800abe" kindref="member">XdgPopup::xdg_popup_popup_done</ref>()</highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_k_win_1_1_test_1_1_xdg_popup_1a2b766a2e5a276eeb692320d679a9c522" kindref="member">doneReceived</ref>();</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="class_k_win_1_1_test_1_1_xdg_decoration_manager_v1_1afaef527cda392a6082f3568d97b36647" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_xdg_decoration_manager_v1_1afaef527cda392a6082f3568d97b36647" kindref="member">XdgDecorationManagerV1::~XdgDecorationManagerV1</ref>()</highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="class_k_win_1_1_test_1_1_xdg_toplevel_decoration_v1_1a6ea552b49b4a99388da4862ee85d3a9f" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_decoration_v1_1a6ea552b49b4a99388da4862ee85d3a9f" kindref="member">XdgToplevelDecorationV1::XdgToplevelDecorationV1</ref>(<ref refid="class_k_win_1_1_test_1_1_xdg_decoration_manager_v1" kindref="compound">XdgDecorationManagerV1</ref><sp/>*manager,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_test_1_1_xdg_toplevel" kindref="compound">XdgToplevel</ref><sp/>*toplevel,<sp/>QObject<sp/>*parent)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>QObject(parent)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="namespace_qt_wayland" kindref="compound">QtWayland</ref>::zxdg_toplevel_decoration_v1(manager-&gt;get_toplevel_decoration(toplevel-&gt;object()))</highlight></codeline>
<codeline lineno="207"><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="class_k_win_1_1_test_1_1_xdg_toplevel_decoration_v1_1ab51d32a243583e96536ea20c1f5d0e12" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_decoration_v1_1ab51d32a243583e96536ea20c1f5d0e12" kindref="member">XdgToplevelDecorationV1::~XdgToplevelDecorationV1</ref>()</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="class_k_win_1_1_test_1_1_xdg_toplevel_decoration_v1_1aad8195a3f7a4d218cbb4534bb5f4fc54" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_decoration_v1_1aad8195a3f7a4d218cbb4534bb5f4fc54" kindref="member">XdgToplevelDecorationV1::zxdg_toplevel_decoration_v1_configure</ref>(uint32_t<sp/>m)</highlight></codeline>
<codeline lineno="216"><highlight class="normal">{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_decoration_v1_1a389a2bf556a1e31a46eeca8afb482619" kindref="member">configureRequested</ref>(mode(m));</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="class_k_win_1_1_test_1_1_idle_inhibit_manager_v1_1aa4264d3ede5c2387d4783bca8e60bc95" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_idle_inhibit_manager_v1_1aa4264d3ede5c2387d4783bca8e60bc95" kindref="member">IdleInhibitManagerV1::~IdleInhibitManagerV1</ref>()</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="class_k_win_1_1_test_1_1_idle_inhibitor_v1_1acc40e355b4deb0ffb4e0d149355760d2" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_idle_inhibitor_v1_1acc40e355b4deb0ffb4e0d149355760d2" kindref="member">IdleInhibitorV1::IdleInhibitorV1</ref>(<ref refid="class_k_win_1_1_test_1_1_idle_inhibit_manager_v1" kindref="compound">IdleInhibitManagerV1</ref><sp/>*manager,<sp/>KWayland::Client::Surface<sp/>*surface)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_qt_wayland" kindref="compound">QtWayland</ref>::zwp_idle_inhibitor_v1(manager-&gt;create_inhibitor(*surface))</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="class_k_win_1_1_test_1_1_idle_inhibitor_v1_1a016578d7cae8849b380075292d6c7a37" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_idle_inhibitor_v1_1a016578d7cae8849b380075292d6c7a37" kindref="member">IdleInhibitorV1::~IdleInhibitorV1</ref>()</highlight></codeline>
<codeline lineno="231"><highlight class="normal">{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="class_k_win_1_1_test_1_1_screen_edge_manager_v1_1ac2678fe440e1de8ef375becdca8a2f69" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_screen_edge_manager_v1_1ac2678fe440e1de8ef375becdca8a2f69" kindref="member">ScreenEdgeManagerV1::~ScreenEdgeManagerV1</ref>()</highlight></codeline>
<codeline lineno="236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="class_k_win_1_1_test_1_1_auto_hide_screen_edge_v1_1a65f44ffeaa5e8d92374bdf5406d376fd" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_auto_hide_screen_edge_v1_1a65f44ffeaa5e8d92374bdf5406d376fd" kindref="member">AutoHideScreenEdgeV1::AutoHideScreenEdgeV1</ref>(<ref refid="class_k_win_1_1_test_1_1_screen_edge_manager_v1" kindref="compound">ScreenEdgeManagerV1</ref><sp/>*manager,<sp/>KWayland::Client::Surface<sp/>*surface,<sp/>uint32_t<sp/>border)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_qt_wayland" kindref="compound">QtWayland</ref>::kde_auto_hide_screen_edge_v1(manager-&gt;get_auto_hide_screen_edge(border,<sp/>*surface))</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="class_k_win_1_1_test_1_1_auto_hide_screen_edge_v1_1a603ee04ae86bfcc15ae2b575ad788c2a" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_auto_hide_screen_edge_v1_1a603ee04ae86bfcc15ae2b575ad788c2a" kindref="member">AutoHideScreenEdgeV1::~AutoHideScreenEdgeV1</ref>()</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="class_k_win_1_1_test_1_1_cursor_shape_manager_v1_1aa0849c87a70b9606a99ac7d3d301077c" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_cursor_shape_manager_v1_1aa0849c87a70b9606a99ac7d3d301077c" kindref="member">CursorShapeManagerV1::~CursorShapeManagerV1</ref>()</highlight></codeline>
<codeline lineno="251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="class_k_win_1_1_test_1_1_cursor_shape_device_v1_1ae7282f1a243b9796af804beed3d3ff7e" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_cursor_shape_device_v1_1ae7282f1a243b9796af804beed3d3ff7e" kindref="member">CursorShapeDeviceV1::CursorShapeDeviceV1</ref>(<ref refid="class_k_win_1_1_test_1_1_cursor_shape_manager_v1" kindref="compound">CursorShapeManagerV1</ref><sp/>*manager,<sp/>KWayland::Client::Pointer<sp/>*pointer)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_qt_wayland" kindref="compound">QtWayland</ref>::wp_cursor_shape_device_v1(manager-&gt;get_pointer(*pointer))</highlight></codeline>
<codeline lineno="257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="class_k_win_1_1_test_1_1_cursor_shape_device_v1_1a4c70b5220980f5e238d8f346a77e67db" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_cursor_shape_device_v1_1a4c70b5220980f5e238d8f346a77e67db" kindref="member">CursorShapeDeviceV1::~CursorShapeDeviceV1</ref>()</highlight></codeline>
<codeline lineno="261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="class_k_win_1_1_test_1_1_fake_input_1aa86e34b8d0736ec23b9f83d99e79bf0b" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_fake_input_1aa86e34b8d0736ec23b9f83d99e79bf0b" kindref="member">FakeInput::~FakeInput</ref>()</highlight></codeline>
<codeline lineno="266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="class_k_win_1_1_test_1_1_security_context_manager_v1_1ac96a3878e2fe84637fb720bfbea80dc7" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_security_context_manager_v1_1ac96a3878e2fe84637fb720bfbea80dc7" kindref="member">SecurityContextManagerV1::~SecurityContextManagerV1</ref>()</highlight></codeline>
<codeline lineno="271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="class_k_win_1_1_test_1_1_xdg_wm_dialog_v1_1a3ffd28395565624f541378f364ed3c9b" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_xdg_wm_dialog_v1_1a3ffd28395565624f541378f364ed3c9b" kindref="member">XdgWmDialogV1::~XdgWmDialogV1</ref>()</highlight></codeline>
<codeline lineno="276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="class_k_win_1_1_test_1_1_xdg_dialog_v1_1a303e47d32a2be441abfa07a7720b244b" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_xdg_dialog_v1_1a303e47d32a2be441abfa07a7720b244b" kindref="member">XdgDialogV1::XdgDialogV1</ref>(<ref refid="class_k_win_1_1_test_1_1_xdg_wm_dialog_v1" kindref="compound">XdgWmDialogV1</ref><sp/>*wm,<sp/><ref refid="class_k_win_1_1_test_1_1_xdg_toplevel" kindref="compound">XdgToplevel</ref><sp/>*toplevel)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_qt_wayland" kindref="compound">QtWayland</ref>::xdg_dialog_v1(wm-&gt;get_xdg_dialog(toplevel-&gt;object()))</highlight></codeline>
<codeline lineno="282"><highlight class="normal">{</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="class_k_win_1_1_test_1_1_xdg_dialog_v1_1a3bf63667261682dcafe6232ced2d6537" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_xdg_dialog_v1_1a3bf63667261682dcafe6232ced2d6537" kindref="member">XdgDialogV1::~XdgDialogV1</ref>()</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_mock_input_method" kindref="compound">MockInputMethod</ref><sp/>*<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()</highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_waylandConnection-&gt;inputMethodV1;</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="namespace_k_win_1_1_test_1a79a1e1551387419a4191a986f66c49b7" refkind="member"><highlight class="normal">KWayland::Client::Surface<sp/>*<ref refid="namespace_k_win_1_1_test_1a79a1e1551387419a4191a986f66c49b7" kindref="member">inputPanelSurface</ref>()</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_waylandConnection-&gt;inputMethodV1-&gt;<ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a11e24a00f958e06b8ad5e51934bea5bd" kindref="member">inputPanelSurface</ref>();</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300" refid="class_k_win_1_1_test_1_1_mock_input_method_1adb1c33c7ed9152edd03ddb9024d689d5" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_mock_input_method_1adb1c33c7ed9152edd03ddb9024d689d5" kindref="member">MockInputMethod::MockInputMethod</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>wl_registry<sp/>*registry,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_qt_wayland" kindref="compound">QtWayland</ref>::zwp_input_method_v1(registry,<sp/>id,<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>)</highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304" refid="class_k_win_1_1_test_1_1_mock_input_method_1a94c2fdfd8e23144ff074bd284946795f" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a94c2fdfd8e23144ff074bd284946795f" kindref="member">MockInputMethod::~MockInputMethod</ref>()</highlight></codeline>
<codeline lineno="305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="class_k_win_1_1_test_1_1_mock_input_method_1aea7d760c3e501456a1ac0bac75699be1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_mock_input_method_1aea7d760c3e501456a1ac0bac75699be1" kindref="member">MockInputMethod::zwp_input_method_v1_activate</ref>(struct<sp/>::zwp_input_method_context_v1<sp/>*<ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a65c83c45b40f087556bb2c2d30800563" kindref="member">context</ref>)</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_inputSurface)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_inputSurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_inputMethodSurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a57430bcdf11495b59bdd1d6e45c949d8" kindref="member">Test::createInputPanelSurfaceV1</ref>(m_inputSurface.get(),<sp/>s_waylandConnection-&gt;outputs.first(),<sp/>m_mode);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>m_context<sp/>=<sp/><ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a65c83c45b40f087556bb2c2d30800563" kindref="member">context</ref>;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(m_mode)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a619415e949a428ef118af4bea55fa7d7adaa4ad87b52566898a9a6df85657c082" kindref="member">Mode::TopLevel</ref>:</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(m_inputSurface.get(),<sp/>QSize(1280,<sp/>400),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a619415e949a428ef118af4bea55fa7d7a6b551379c3c0b59326abdaf3b4395bd3" kindref="member">Mode::Overlay</ref>:</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(m_inputSurface.get(),<sp/>QSize(200,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a8b1aedbad85f1bc38ce7613e190bcc0d" kindref="member">activate</ref>();</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="class_k_win_1_1_test_1_1_mock_input_method_1a58bdf66bf3e7508ae7e2602d0f6e88e7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a58bdf66bf3e7508ae7e2602d0f6e88e7" kindref="member">MockInputMethod::setMode</ref>(<ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a619415e949a428ef118af4bea55fa7d7" kindref="member">MockInputMethod::Mode</ref><sp/>mode)</highlight></codeline>
<codeline lineno="329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mode<sp/>=<sp/>mode;</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333" refid="class_k_win_1_1_test_1_1_mock_input_method_1a1648de3d8e737a91a8a4f1be877cbcf4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a1648de3d8e737a91a8a4f1be877cbcf4" kindref="member">MockInputMethod::zwp_input_method_v1_deactivate</ref>(struct<sp/>::zwp_input_method_context_v1<sp/>*<ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a65c83c45b40f087556bb2c2d30800563" kindref="member">context</ref>)</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a65c83c45b40f087556bb2c2d30800563" kindref="member">context</ref>,<sp/>m_context);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_destroy(<ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a65c83c45b40f087556bb2c2d30800563" kindref="member">context</ref>);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>m_context<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_inputSurface)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_inputSurface-&gt;release();</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_inputSurface-&gt;destroy();</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_inputSurface.reset();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_inputMethodSurface.reset();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="namespace_k_win_1_1_test_1a36c6e87757c3c97858c55b650c9d304c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a36c6e87757c3c97858c55b650c9d304c" kindref="member">setupWaylandConnection</ref>(AdditionalWaylandInterfaces<sp/>flags)</highlight></codeline>
<codeline lineno="348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s_waylandConnection)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>s_waylandConnection<sp/>=<sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a51993d89cf2791852ebc586da335320c" kindref="member">Connection::setup</ref>(flags);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bool(s_waylandConnection);</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="namespace_k_win_1_1_test_1a12755bae9118cb958baf0efbd222d7c8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a12755bae9118cb958baf0efbd222d7c8" kindref="member">destroyWaylandConnection</ref>()</highlight></codeline>
<codeline lineno="357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>s_waylandConnection.reset();</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361" refid="struct_k_win_1_1_test_1_1_connection_1a51993d89cf2791852ebc586da335320c" refkind="member"><highlight class="normal">std::unique_ptr&lt;Connection&gt;<sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a51993d89cf2791852ebc586da335320c" kindref="member">Connection::setup</ref>(AdditionalWaylandInterfaces<sp/>flags)</highlight></codeline>
<codeline lineno="362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sx[2];</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(socketpair(AF_UNIX,<sp/>SOCK_STREAM<sp/>|<sp/>SOCK_CLOEXEC,<sp/>0,<sp/>sx)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">KWin::waylandServer</ref>()-&gt;<ref refid="class_k_win_1_1_wayland_server_1a86c30976bd1f0d56f359f9d25160e1f6" kindref="member">display</ref>()-&gt;<ref refid="class_k_win_1_1_display_1a07034ffcff1c993fe2efabbb4371ab77" kindref="member">createClient</ref>(sx[0]);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>connection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a1bfa2d664707dd58602fbefd2ac6a7cd" kindref="member">connection</ref><sp/>=<sp/>std::make_unique&lt;Connection&gt;();</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a1bfa2d664707dd58602fbefd2ac6a7cd" kindref="member">connection</ref>-&gt;connection<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>KWayland::Client::ConnectionThread;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>connectedSpy(<ref refid="struct_k_win_1_1_test_1_1_connection_1a1bfa2d664707dd58602fbefd2ac6a7cd" kindref="member">connection</ref>-&gt;connection,<sp/>&amp;KWayland::Client::ConnectionThread::connected);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!connectedSpy.isValid())<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a1bfa2d664707dd58602fbefd2ac6a7cd" kindref="member">connection</ref>-&gt;connection-&gt;setSocketFd(sx[1]);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a1bfa2d664707dd58602fbefd2ac6a7cd" kindref="member">connection</ref>-&gt;thread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QThread(kwinApp());</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a1bfa2d664707dd58602fbefd2ac6a7cd" kindref="member">connection</ref>-&gt;connection-&gt;moveToThread(<ref refid="struct_k_win_1_1_test_1_1_connection_1a1bfa2d664707dd58602fbefd2ac6a7cd" kindref="member">connection</ref>-&gt;thread);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a1bfa2d664707dd58602fbefd2ac6a7cd" kindref="member">connection</ref>-&gt;thread-&gt;start();</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a1bfa2d664707dd58602fbefd2ac6a7cd" kindref="member">connection</ref>-&gt;connection-&gt;initConnection();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!connectedSpy.wait())<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a1bfa2d664707dd58602fbefd2ac6a7cd" kindref="member">connection</ref>-&gt;queue<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>KWayland::Client::EventQueue;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a1bfa2d664707dd58602fbefd2ac6a7cd" kindref="member">connection</ref>-&gt;queue-&gt;setup(<ref refid="struct_k_win_1_1_test_1_1_connection_1a1bfa2d664707dd58602fbefd2ac6a7cd" kindref="member">connection</ref>-&gt;connection);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_k_win_1_1_test_1_1_connection_1a1bfa2d664707dd58602fbefd2ac6a7cd" kindref="member">connection</ref>-&gt;queue-&gt;isValid())<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::Registry<sp/>*<ref refid="struct_k_win_1_1_test_1_1_connection_1a6af6c970595db2f82b371d6e2b218692" kindref="member">registry</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>KWayland::Client::Registry;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a1bfa2d664707dd58602fbefd2ac6a7cd" kindref="member">connection</ref>-&gt;registry<sp/>=<sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a6af6c970595db2f82b371d6e2b218692" kindref="member">registry</ref>;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a6af6c970595db2f82b371d6e2b218692" kindref="member">registry</ref>-&gt;setEventQueue(<ref refid="struct_k_win_1_1_test_1_1_connection_1a1bfa2d664707dd58602fbefd2ac6a7cd" kindref="member">connection</ref>-&gt;queue);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>QObject::connect(<ref refid="struct_k_win_1_1_test_1_1_connection_1a6af6c970595db2f82b371d6e2b218692" kindref="member">registry</ref>,<sp/>&amp;KWayland::Client::Registry::outputAnnounced,<sp/>[c<sp/>=<sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a1bfa2d664707dd58602fbefd2ac6a7cd" kindref="member">connection</ref>.get()](quint32<sp/>name,<sp/>quint32<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KWayland::Client::Output<sp/>*output<sp/>=<sp/>c-&gt;registry-&gt;createOutput(name,<sp/>version,<sp/>c-&gt;registry);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;outputs<sp/>&lt;&lt;<sp/>output;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QObject::connect(output,<sp/>&amp;KWayland::Client::Output::removed,<sp/>[=]()<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output-&gt;deleteLater();</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;outputs.removeOne(output);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QObject::connect(output,<sp/>&amp;KWayland::Client::Output::destroyed,<sp/>[=]()<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;outputs.removeOne(output);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>QObject::connect(registry,<sp/>&amp;KWayland::Client::Registry::interfaceAnnounced,<sp/>[c<sp/>=<sp/><ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>.get(),<sp/>flags](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QByteArray<sp/>&amp;interface,<sp/>quint32<sp/>name,<sp/>quint32<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(flags<sp/>&amp;<sp/>AdditionalWaylandInterface::InputMethodV1)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(interface<sp/>==<sp/>QByteArrayLiteral(</highlight><highlight class="stringliteral">&quot;zwp_input_method_v1&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;inputMethodV1<sp/>=<sp/>new<sp/>MockInputMethod(*c-&gt;registry,<sp/>name,<sp/>version);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(interface<sp/>==<sp/>QByteArrayLiteral(</highlight><highlight class="stringliteral">&quot;zwp_input_panel_v1&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;inputPanelV1<sp/>=<sp/>new<sp/>QtWayland::zwp_input_panel_v1(*c-&gt;registry,<sp/>name,<sp/>version);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(flags<sp/>&amp;<sp/><ref refid="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a6b59204a4c30032f5fb59cb7bfe01965" kindref="member">AdditionalWaylandInterface::LayerShellV1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interface<sp/>==<sp/>QByteArrayLiteral(</highlight><highlight class="stringliteral">&quot;zwlr_layer_shell_v1&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;layerShellV1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a6b59204a4c30032f5fb59cb7bfe01965" kindref="member">LayerShellV1</ref>();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;layerShellV1-&gt;init(*c-&gt;registry,<sp/>name,<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/><ref refid="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a3c201ab228c4a5b71be97b5dae4dc617" kindref="member">AdditionalWaylandInterface::TextInputManagerV3</ref>)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>something</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interface<sp/>==<sp/>QByteArrayLiteral(</highlight><highlight class="stringliteral">&quot;zwp_text_input_manager_v3&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;textInputManagerV3<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a3c201ab228c4a5b71be97b5dae4dc617" kindref="member">TextInputManagerV3</ref>();</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;textInputManagerV3-&gt;init(*c-&gt;registry,<sp/>name,<sp/><ref refid="xwaylandkeyboardgrab__v1_8cpp_1a15753f4ac4ad215e3e64d8f9e5bb5ff6" kindref="member">version</ref>);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interface<sp/>==<sp/>QByteArrayLiteral(</highlight><highlight class="stringliteral">&quot;xdg_wm_base&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;xdgShell<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_xdg_shell" kindref="compound">XdgShell</ref>();</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;xdgShell-&gt;init(*c-&gt;registry,<sp/>name,<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/><ref refid="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536aa3c659ec106f82ef9eb08668a1094ae3" kindref="member">AdditionalWaylandInterface::XdgDecorationV1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interface<sp/>==<sp/>zxdg_decoration_manager_v1_interface.name)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;xdgDecorationManagerV1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_xdg_decoration_manager_v1" kindref="compound">XdgDecorationManagerV1</ref>();</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;xdgDecorationManagerV1-&gt;init(*c-&gt;registry,<sp/>name,<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/><ref refid="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a3ac80213e556032ec5ba55b6db6181f2" kindref="member">AdditionalWaylandInterface::IdleInhibitV1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interface<sp/>==<sp/>zwp_idle_inhibit_manager_v1_interface.name)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;idleInhibitManagerV1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_idle_inhibit_manager_v1" kindref="compound">IdleInhibitManagerV1</ref>();</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;idleInhibitManagerV1-&gt;init(*c-&gt;registry,<sp/>name,<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/><ref refid="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536ae2e0547db7a3b8fe0b3d2fea900e8f06" kindref="member">AdditionalWaylandInterface::OutputDeviceV2</ref>)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interface<sp/>==<sp/>kde_output_device_v2_interface.name)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2" kindref="compound">WaylandOutputDeviceV2</ref><sp/>*device<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2" kindref="compound">WaylandOutputDeviceV2</ref>(name);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device-&gt;init(*c-&gt;registry,<sp/>name,<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;outputDevicesV2<sp/>&lt;&lt;<sp/>device;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QObject::connect(device,<sp/>&amp;WaylandOutputDeviceV2::destroyed,<sp/>[=]()<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;outputDevicesV2.removeOne(device);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device-&gt;deleteLater();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QObject::connect(c-&gt;registry,<sp/>&amp;KWayland::Client::Registry::interfaceRemoved,<sp/>device,<sp/>[c,<sp/>name,<sp/>device](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>quint32<sp/>&amp;interfaceName)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(name<sp/>==<sp/>interfaceName)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;outputDevicesV2.removeOne(device);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device-&gt;deleteLater();</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>AdditionalWaylandInterface::OutputManagementV2)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interface<sp/>==<sp/>kde_output_management_v2_interface.name)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;outputManagementV2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>WaylandOutputManagementV2(*c-&gt;registry,<sp/>name,<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>AdditionalWaylandInterface::FractionalScaleManagerV1)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interface<sp/>==<sp/>wp_fractional_scale_manager_v1_interface.name)<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;fractionalScaleManagerV1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a8d8f0277f1fc7f78144e54bae1b556da" kindref="member">FractionalScaleManagerV1</ref>();</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;fractionalScaleManagerV1-&gt;init(*c-&gt;registry,<sp/>name,<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>AdditionalWaylandInterface::ScreencastingV1)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interface<sp/>==<sp/>zkde_screencast_unstable_v1_interface.name)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;screencastingV1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a940eda63ada8e3685f938def5cf3edb1" kindref="member">ScreencastingV1</ref>();</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;screencastingV1-&gt;init(*c-&gt;registry,<sp/>name,<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>AdditionalWaylandInterface::ScreenEdgeV1)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interface<sp/>==<sp/>kde_screen_edge_manager_v1_interface.name)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;screenEdgeManagerV1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ScreenEdgeManagerV1();</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;screenEdgeManagerV1-&gt;init(*c-&gt;registry,<sp/>name,<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>AdditionalWaylandInterface::CursorShapeV1)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interface<sp/>==<sp/>wp_cursor_shape_manager_v1_interface.name)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;cursorShapeManagerV1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CursorShapeManagerV1();</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;cursorShapeManagerV1-&gt;init(*c-&gt;registry,<sp/>name,<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>AdditionalWaylandInterface::FakeInput)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interface<sp/>==<sp/>org_kde_kwin_fake_input_interface.name)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;fakeInput<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a7dd3c03064c2ad624718288dfce79e94" kindref="member">FakeInput</ref>();</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;fakeInput-&gt;init(*c-&gt;registry,<sp/>name,<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>AdditionalWaylandInterface::SecurityContextManagerV1)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interface<sp/>==<sp/>wp_security_context_manager_v1_interface.name)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;securityContextManagerV1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a358f919bdc0fb0ee655249ff95254012" kindref="member">SecurityContextManagerV1</ref>();</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;securityContextManagerV1-&gt;init(*c-&gt;registry,<sp/>name,<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>AdditionalWaylandInterface::XdgDialogV1)<sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interface<sp/>==<sp/>xdg_wm_dialog_v1_interface.name)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;xdgWmDialogV1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>XdgWmDialogV1();</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;xdgWmDialogV1-&gt;init(*c-&gt;registry,<sp/>name,<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>AdditionalWaylandInterface::ColorManagement)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interface<sp/>==<sp/>wp_color_manager_v1_interface.name)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;colorManager<sp/>=<sp/>std::make_unique&lt;ColorManagerV1&gt;(*c-&gt;registry,<sp/>name,<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>allAnnounced(registry,<sp/>&amp;KWayland::Client::Registry::interfacesAnnounced);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!allAnnounced.isValid())<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>registry-&gt;create(<ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>-&gt;connection);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!registry-&gt;isValid())<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>registry-&gt;setup();</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!allAnnounced.wait())<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>-&gt;compositor<sp/>=<sp/>registry-&gt;createCompositor(registry-&gt;interface(KWayland::Client::Registry::Interface::Compositor).name,<sp/>registry-&gt;interface(KWayland::Client::Registry::Interface::Compositor).version);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>-&gt;compositor-&gt;isValid())<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>-&gt;subCompositor<sp/>=<sp/>registry-&gt;createSubCompositor(registry-&gt;interface(KWayland::Client::Registry::Interface::SubCompositor).name,<sp/>registry-&gt;interface(KWayland::Client::Registry::Interface::SubCompositor).version);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>-&gt;subCompositor-&gt;isValid())<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>-&gt;shm<sp/>=<sp/>registry-&gt;createShmPool(registry-&gt;interface(KWayland::Client::Registry::Interface::Shm).name,<sp/>registry-&gt;interface(KWayland::Client::Registry::Interface::Shm).version);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>-&gt;shm-&gt;isValid())<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags.testFlag(AdditionalWaylandInterface::Seat))<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>-&gt;seat<sp/>=<sp/>registry-&gt;createSeat(registry-&gt;interface(KWayland::Client::Registry::Interface::Seat).name,<sp/>registry-&gt;interface(KWayland::Client::Registry::Interface::Seat).version);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>-&gt;seat-&gt;isValid())<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags.testFlag(AdditionalWaylandInterface::ShadowManager))<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>-&gt;shadowManager<sp/>=<sp/>registry-&gt;createShadowManager(registry-&gt;interface(KWayland::Client::Registry::Interface::Shadow).name,</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry-&gt;interface(KWayland::Client::Registry::Interface::Shadow).version);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>-&gt;shadowManager-&gt;isValid())<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags.testFlag(AdditionalWaylandInterface::PlasmaShell))<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>-&gt;plasmaShell<sp/>=<sp/>registry-&gt;createPlasmaShell(registry-&gt;interface(KWayland::Client::Registry::Interface::PlasmaShell).name,</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry-&gt;interface(KWayland::Client::Registry::Interface::PlasmaShell).version);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>-&gt;plasmaShell-&gt;isValid())<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags.testFlag(AdditionalWaylandInterface::WindowManagement))<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>-&gt;windowManagement<sp/>=<sp/>registry-&gt;createPlasmaWindowManagement(registry-&gt;interface(KWayland::Client::Registry::Interface::PlasmaWindowManagement).name,</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry-&gt;interface(KWayland::Client::Registry::Interface::PlasmaWindowManagement).version);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>-&gt;windowManagement-&gt;isValid())<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags.testFlag(AdditionalWaylandInterface::PointerConstraints))<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>-&gt;pointerConstraints<sp/>=<sp/>registry-&gt;createPointerConstraints(registry-&gt;interface(KWayland::Client::Registry::Interface::PointerConstraintsUnstableV1).name,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry-&gt;interface(KWayland::Client::Registry::Interface::PointerConstraintsUnstableV1).version);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>-&gt;pointerConstraints-&gt;isValid())<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags.testFlag(AdditionalWaylandInterface::AppMenu))<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>-&gt;appMenu<sp/>=<sp/>registry-&gt;createAppMenuManager(registry-&gt;interface(KWayland::Client::Registry::Interface::AppMenu).name,<sp/>registry-&gt;interface(KWayland::Client::Registry::Interface::AppMenu).version);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>-&gt;appMenu-&gt;isValid())<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags.testFlag(AdditionalWaylandInterface::TextInputManagerV2))<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>-&gt;textInputManager<sp/>=<sp/>registry-&gt;createTextInputManager(registry-&gt;interface(KWayland::Client::Registry::Interface::TextInputManagerUnstableV2).name,<sp/>registry-&gt;interface(KWayland::Client::Registry::Interface::TextInputManagerUnstableV2).version);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>-&gt;textInputManager-&gt;isValid())<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>;</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602" refid="struct_k_win_1_1_test_1_1_connection_1a49ac1111e931ac43f6dcb8ab0a5b920a" refkind="member"><highlight class="normal"><ref refid="struct_k_win_1_1_test_1_1_connection_1a49ac1111e931ac43f6dcb8ab0a5b920a" kindref="member">Connection::~Connection</ref>()</highlight></codeline>
<codeline lineno="603"><highlight class="normal">{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a4d06661ae86d43eadf0473344b9dfabd" kindref="member">compositor</ref>;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a4d06661ae86d43eadf0473344b9dfabd" kindref="member">compositor</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1aca468f3782f65a114fe57b1ef018c4f1" kindref="member">subCompositor</ref>;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1aca468f3782f65a114fe57b1ef018c4f1" kindref="member">subCompositor</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a8f65db73a0388dfa417fe5998cdd8ae7" kindref="member">windowManagement</ref>;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a8f65db73a0388dfa417fe5998cdd8ae7" kindref="member">windowManagement</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1ae2fa4e6cade68b2c8db81238eb2289fa" kindref="member">plasmaShell</ref>;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1ae2fa4e6cade68b2c8db81238eb2289fa" kindref="member">plasmaShell</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a3a7d1ebfd2fbec7bb43a6d4c03c1cb56" kindref="member">seat</ref>;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a3a7d1ebfd2fbec7bb43a6d4c03c1cb56" kindref="member">seat</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a285af3f31725b7577c425ebc744e29aa" kindref="member">pointerConstraints</ref>;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a285af3f31725b7577c425ebc744e29aa" kindref="member">pointerConstraints</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1af09cf865a0da6418ad6f1ebd1c6d60e5" kindref="member">xdgShell</ref>;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1af09cf865a0da6418ad6f1ebd1c6d60e5" kindref="member">xdgShell</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a631f96506be0cc26daefce07666aa0a7" kindref="member">shadowManager</ref>;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a631f96506be0cc26daefce07666aa0a7" kindref="member">shadowManager</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a318ab72425b841ed2d5e39fbd3fdf212" kindref="member">idleInhibitManagerV1</ref>;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a318ab72425b841ed2d5e39fbd3fdf212" kindref="member">idleInhibitManagerV1</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a029cdf99df705a1e4f26c56b7258d4b3" kindref="member">shm</ref>;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a029cdf99df705a1e4f26c56b7258d4b3" kindref="member">shm</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a6af6c970595db2f82b371d6e2b218692" kindref="member">registry</ref>;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a6af6c970595db2f82b371d6e2b218692" kindref="member">registry</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a82ef2f311295efb6538a8b075170b6c2" kindref="member">appMenu</ref>;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a82ef2f311295efb6538a8b075170b6c2" kindref="member">appMenu</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a704723b4052e2af4c306137bf53fa645" kindref="member">xdgDecorationManagerV1</ref>;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a704723b4052e2af4c306137bf53fa645" kindref="member">xdgDecorationManagerV1</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1ac5939039d5510a3a843bb0fc54278c87" kindref="member">textInputManager</ref>;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1ac5939039d5510a3a843bb0fc54278c87" kindref="member">textInputManager</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1ad7a2dda2a9ef7fb7e762e0035b54ae8e" kindref="member">inputPanelV1</ref>;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1ad7a2dda2a9ef7fb7e762e0035b54ae8e" kindref="member">inputPanelV1</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a20fa7561363678c75a363dce2a3dfdc8" kindref="member">layerShellV1</ref>;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a20fa7561363678c75a363dce2a3dfdc8" kindref="member">layerShellV1</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a2cee89d1bed111dadeab0e76b4545ffa" kindref="member">outputManagementV2</ref>;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a2cee89d1bed111dadeab0e76b4545ffa" kindref="member">outputManagementV2</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1abb9d660cb565a49b36b7f73db75ed1db" kindref="member">fractionalScaleManagerV1</ref>;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1abb9d660cb565a49b36b7f73db75ed1db" kindref="member">fractionalScaleManagerV1</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1ab7c2eb47bdf01497f7291e28447d80d6" kindref="member">screencastingV1</ref>;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1ab7c2eb47bdf01497f7291e28447d80d6" kindref="member">screencastingV1</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1ad3dd9581861c29cbf3c5b1bec36532ff" kindref="member">screenEdgeManagerV1</ref>;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1ad3dd9581861c29cbf3c5b1bec36532ff" kindref="member">screenEdgeManagerV1</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a713bde57484d8f8b8df34e4e21ccc32a" kindref="member">cursorShapeManagerV1</ref>;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a713bde57484d8f8b8df34e4e21ccc32a" kindref="member">cursorShapeManagerV1</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a029ff30c4f000f8d1823923502e3b549" kindref="member">fakeInput</ref>;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a029ff30c4f000f8d1823923502e3b549" kindref="member">fakeInput</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a30c8c1b77bd9948e3cf3db1d6ff903ca" kindref="member">securityContextManagerV1</ref>;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a30c8c1b77bd9948e3cf3db1d6ff903ca" kindref="member">securityContextManagerV1</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a101f8ff3280068e8f266fd5a8d37b578" kindref="member">xdgWmDialogV1</ref>;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a101f8ff3280068e8f266fd5a8d37b578" kindref="member">xdgWmDialogV1</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a8ec952690dd95943e71622fd09d3e026" kindref="member">colorManager</ref>.reset();</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a2a78af1832494de062f7c24215c4d559" kindref="member">queue</ref>;<sp/></highlight><highlight class="comment">//<sp/>Must<sp/>be<sp/>destroyed<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a2a78af1832494de062f7c24215c4d559" kindref="member">queue</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_k_win_1_1_test_1_1_connection_1a2db4760576d29ec1539b72737c67774f" kindref="member">thread</ref>)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a1bfa2d664707dd58602fbefd2ac6a7cd" kindref="member">connection</ref>-&gt;deleteLater();</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a2db4760576d29ec1539b72737c67774f" kindref="member">thread</ref>-&gt;quit();</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a2db4760576d29ec1539b72737c67774f" kindref="member">thread</ref>-&gt;wait();</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a2db4760576d29ec1539b72737c67774f" kindref="member">thread</ref>;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a2db4760576d29ec1539b72737c67774f" kindref="member">thread</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a1bfa2d664707dd58602fbefd2ac6a7cd" kindref="member">connection</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1a444a4d3536800b1617f751a2b4ee71e2" kindref="member">outputs</ref>.clear();</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_k_win_1_1_test_1_1_connection_1aca50a7f37a8888abddcd95225803fcc4" kindref="member">outputDevicesV2</ref>.clear();</highlight></codeline>
<codeline lineno="667"><highlight class="normal">}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669" refid="namespace_k_win_1_1_test_1ab8d22dbd7b611aa83d13171c80dd821d" refkind="member"><highlight class="normal">KWayland::Client::ConnectionThread<sp/>*<ref refid="namespace_k_win_1_1_test_1ab8d22dbd7b611aa83d13171c80dd821d" kindref="member">waylandConnection</ref>()</highlight></codeline>
<codeline lineno="670"><highlight class="normal">{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_waylandConnection-&gt;connection;</highlight></codeline>
<codeline lineno="672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674" refid="namespace_k_win_1_1_test_1a47e310e7cc96be89e999b633b01c62b0" refkind="member"><highlight class="normal">KWayland::Client::Compositor<sp/>*<ref refid="namespace_k_win_1_1_test_1a47e310e7cc96be89e999b633b01c62b0" kindref="member">waylandCompositor</ref>()</highlight></codeline>
<codeline lineno="675"><highlight class="normal">{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_waylandConnection-&gt;compositor;</highlight></codeline>
<codeline lineno="677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679" refid="namespace_k_win_1_1_test_1a4d912080e33c3b7e290c0770d4b6a74d" refkind="member"><highlight class="normal">KWayland::Client::SubCompositor<sp/>*<ref refid="namespace_k_win_1_1_test_1a4d912080e33c3b7e290c0770d4b6a74d" kindref="member">waylandSubCompositor</ref>()</highlight></codeline>
<codeline lineno="680"><highlight class="normal">{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_waylandConnection-&gt;subCompositor;</highlight></codeline>
<codeline lineno="682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684" refid="namespace_k_win_1_1_test_1a8196fdc512dee08594d21ac29ff714ea" refkind="member"><highlight class="normal">KWayland::Client::ShadowManager<sp/>*<ref refid="namespace_k_win_1_1_test_1a8196fdc512dee08594d21ac29ff714ea" kindref="member">waylandShadowManager</ref>()</highlight></codeline>
<codeline lineno="685"><highlight class="normal">{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_waylandConnection-&gt;shadowManager;</highlight></codeline>
<codeline lineno="687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689" refid="namespace_k_win_1_1_test_1aa0144fabdd618eb668c5d5382631bfe9" refkind="member"><highlight class="normal">KWayland::Client::ShmPool<sp/>*<ref refid="namespace_k_win_1_1_test_1aa0144fabdd618eb668c5d5382631bfe9" kindref="member">waylandShmPool</ref>()</highlight></codeline>
<codeline lineno="690"><highlight class="normal">{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_waylandConnection-&gt;shm;</highlight></codeline>
<codeline lineno="692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694" refid="namespace_k_win_1_1_test_1a5f6b6eee3f6e90f7c4693e06af67d91d" refkind="member"><highlight class="normal">KWayland::Client::Seat<sp/>*<ref refid="namespace_k_win_1_1_test_1a5f6b6eee3f6e90f7c4693e06af67d91d" kindref="member">waylandSeat</ref>()</highlight></codeline>
<codeline lineno="695"><highlight class="normal">{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_waylandConnection-&gt;seat;</highlight></codeline>
<codeline lineno="697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699" refid="namespace_k_win_1_1_test_1ad1f84af09bf2790daf310b36b2ec12a3" refkind="member"><highlight class="normal">KWayland::Client::PlasmaShell<sp/>*<ref refid="namespace_k_win_1_1_test_1ad1f84af09bf2790daf310b36b2ec12a3" kindref="member">waylandPlasmaShell</ref>()</highlight></codeline>
<codeline lineno="700"><highlight class="normal">{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_waylandConnection-&gt;plasmaShell;</highlight></codeline>
<codeline lineno="702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704" refid="namespace_k_win_1_1_test_1a37f9b33442f29538d044473f18bcbcc1" refkind="member"><highlight class="normal">KWayland::Client::PlasmaWindowManagement<sp/>*<ref refid="namespace_k_win_1_1_test_1a37f9b33442f29538d044473f18bcbcc1" kindref="member">waylandWindowManagement</ref>()</highlight></codeline>
<codeline lineno="705"><highlight class="normal">{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_waylandConnection-&gt;windowManagement;</highlight></codeline>
<codeline lineno="707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709" refid="namespace_k_win_1_1_test_1a517ef757df68b22a94b9c565a67710bd" refkind="member"><highlight class="normal">KWayland::Client::PointerConstraints<sp/>*<ref refid="namespace_k_win_1_1_test_1a517ef757df68b22a94b9c565a67710bd" kindref="member">waylandPointerConstraints</ref>()</highlight></codeline>
<codeline lineno="710"><highlight class="normal">{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_waylandConnection-&gt;pointerConstraints;</highlight></codeline>
<codeline lineno="712"><highlight class="normal">}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714" refid="namespace_k_win_1_1_test_1aa8d74a9a8291f560dcc95673c7c6d0b1" refkind="member"><highlight class="normal">KWayland::Client::AppMenuManager<sp/>*<ref refid="namespace_k_win_1_1_test_1aa8d74a9a8291f560dcc95673c7c6d0b1" kindref="member">waylandAppMenuManager</ref>()</highlight></codeline>
<codeline lineno="715"><highlight class="normal">{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_waylandConnection-&gt;appMenu;</highlight></codeline>
<codeline lineno="717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719" refid="namespace_k_win_1_1_test_1a07b1c35303c0f89d7b3e98537ffdafdb" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_wayland_output_management_v2" kindref="compound">KWin::Test::WaylandOutputManagementV2</ref><sp/>*<ref refid="namespace_k_win_1_1_test_1a07b1c35303c0f89d7b3e98537ffdafdb" kindref="member">waylandOutputManagementV2</ref>()</highlight></codeline>
<codeline lineno="720"><highlight class="normal">{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_waylandConnection-&gt;outputManagementV2;</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724" refid="namespace_k_win_1_1_test_1aba9aad15d03110344917226405ea7a6e" refkind="member"><highlight class="normal">KWayland::Client::TextInputManager<sp/>*<ref refid="namespace_k_win_1_1_test_1aba9aad15d03110344917226405ea7a6e" kindref="member">waylandTextInputManager</ref>()</highlight></codeline>
<codeline lineno="725"><highlight class="normal">{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_waylandConnection-&gt;textInputManager;</highlight></codeline>
<codeline lineno="727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729" refid="namespace_k_win_1_1_test_1a283aa125534a50e9477ee94e47057e9d" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_text_input_manager_v3" kindref="compound">TextInputManagerV3</ref><sp/>*<ref refid="namespace_k_win_1_1_test_1a283aa125534a50e9477ee94e47057e9d" kindref="member">waylandTextInputManagerV3</ref>()</highlight></codeline>
<codeline lineno="730"><highlight class="normal">{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_waylandConnection-&gt;textInputManagerV3;</highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734" refid="namespace_k_win_1_1_test_1a79662c163cb8eecaf6f4c19b0e63316e" refkind="member"><highlight class="normal">QList&lt;KWayland::Client::Output<sp/>*&gt;<sp/><ref refid="namespace_k_win_1_1_test_1a79662c163cb8eecaf6f4c19b0e63316e" kindref="member">waylandOutputs</ref>()</highlight></codeline>
<codeline lineno="735"><highlight class="normal">{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_waylandConnection-&gt;outputs;</highlight></codeline>
<codeline lineno="737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739" refid="namespace_k_win_1_1_test_1aef97bdfef9391388689aa4c4bf50d8aa" refkind="member"><highlight class="normal">KWayland::Client::Output<sp/>*<ref refid="namespace_k_win_1_1_test_1aef97bdfef9391388689aa4c4bf50d8aa" kindref="member">waylandOutput</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>&amp;name)</highlight></codeline>
<codeline lineno="740"><highlight class="normal">{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(KWayland::Client::Output<sp/>*output<sp/>:<sp/>std::as_const(s_waylandConnection-&gt;outputs))<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output-&gt;name()<sp/>==<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749" refid="namespace_k_win_1_1_test_1a64d1f4d59675d814dafaa35cb026eeb6" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_screencasting_v1" kindref="compound">ScreencastingV1</ref><sp/>*<ref refid="namespace_k_win_1_1_test_1a64d1f4d59675d814dafaa35cb026eeb6" kindref="member">screencasting</ref>()</highlight></codeline>
<codeline lineno="750"><highlight class="normal">{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_waylandConnection-&gt;screencastingV1;</highlight></codeline>
<codeline lineno="752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754" refid="namespace_k_win_1_1_test_1a3627732e55b6de7ce69153ec64447d62" refkind="member"><highlight class="normal">QList&lt;KWin::Test::WaylandOutputDeviceV2<sp/>*&gt;<sp/><ref refid="namespace_k_win_1_1_test_1a3627732e55b6de7ce69153ec64447d62" kindref="member">waylandOutputDevicesV2</ref>()</highlight></codeline>
<codeline lineno="755"><highlight class="normal">{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_waylandConnection-&gt;outputDevicesV2;</highlight></codeline>
<codeline lineno="757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759" refid="namespace_k_win_1_1_test_1af256d176be24b12c279c66f2154baaf8" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_fake_input" kindref="compound">FakeInput</ref><sp/>*<ref refid="namespace_k_win_1_1_test_1af256d176be24b12c279c66f2154baaf8" kindref="member">waylandFakeInput</ref>()</highlight></codeline>
<codeline lineno="760"><highlight class="normal">{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_waylandConnection-&gt;fakeInput;</highlight></codeline>
<codeline lineno="762"><highlight class="normal">}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764" refid="namespace_k_win_1_1_test_1a63e86219391f6b56b91f2806477dbf02" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_security_context_manager_v1" kindref="compound">SecurityContextManagerV1</ref><sp/>*<ref refid="namespace_k_win_1_1_test_1a63e86219391f6b56b91f2806477dbf02" kindref="member">waylandSecurityContextManagerV1</ref>()</highlight></codeline>
<codeline lineno="765"><highlight class="normal">{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_waylandConnection-&gt;securityContextManagerV1;</highlight></codeline>
<codeline lineno="767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769" refid="namespace_k_win_1_1_test_1aa2aeeed8707c8689f32965e0a606cad9" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_color_manager_v1" kindref="compound">ColorManagerV1</ref><sp/>*<ref refid="namespace_k_win_1_1_test_1aa2aeeed8707c8689f32965e0a606cad9" kindref="member">colorManager</ref>()</highlight></codeline>
<codeline lineno="770"><highlight class="normal">{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_waylandConnection-&gt;colorManager.get();</highlight></codeline>
<codeline lineno="772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774" refid="namespace_k_win_1_1_test_1a567844737a26d3ce16f876573e87af57" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a567844737a26d3ce16f876573e87af57" kindref="member">waitForWaylandSurface</ref>(<ref refid="class_k_win_1_1_window" kindref="compound">Window</ref><sp/>*window)</highlight></codeline>
<codeline lineno="775"><highlight class="normal">{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window-&gt;<ref refid="class_k_win_1_1_window_1a3e51f0a4e18a865b177f2dd133ede64e" kindref="member">surface</ref>())<sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceChangedSpy(window,<sp/>&amp;<ref refid="class_k_win_1_1_window_1a5ab5cf58669820a49608cb46f3ea3e5b" kindref="member">Window::surfaceChanged</ref>);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>surfaceChangedSpy.wait();</highlight></codeline>
<codeline lineno="781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783" refid="namespace_k_win_1_1_test_1ab4cf52ccd596caf6af24eb259913c597" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1ab4cf52ccd596caf6af24eb259913c597" kindref="member">waitForWaylandPointer</ref>()</highlight></codeline>
<codeline lineno="784"><highlight class="normal">{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s_waylandConnection-&gt;seat)<sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1ab4cf52ccd596caf6af24eb259913c597" kindref="member">waitForWaylandPointer</ref>(s_waylandConnection-&gt;seat);</highlight></codeline>
<codeline lineno="789"><highlight class="normal">}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791" refid="namespace_k_win_1_1_test_1aef1b97c10f647eab1dc29f3967b96b01" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1ab4cf52ccd596caf6af24eb259913c597" kindref="member">waitForWaylandPointer</ref>(KWayland::Client::Seat<sp/>*seat)</highlight></codeline>
<codeline lineno="792"><highlight class="normal">{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>hasPointerSpy(seat,<sp/>&amp;KWayland::Client::Seat::hasPointerChanged);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hasPointerSpy.wait();</highlight></codeline>
<codeline lineno="795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797" refid="namespace_k_win_1_1_test_1a6988af2cc12a50695d71f199cb3b0565" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a6988af2cc12a50695d71f199cb3b0565" kindref="member">waitForWaylandTouch</ref>()</highlight></codeline>
<codeline lineno="798"><highlight class="normal">{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s_waylandConnection-&gt;seat)<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a6988af2cc12a50695d71f199cb3b0565" kindref="member">waitForWaylandTouch</ref>(s_waylandConnection-&gt;seat);</highlight></codeline>
<codeline lineno="803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805" refid="namespace_k_win_1_1_test_1ab601b2d0979b28b6be02a4777af72a16" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a6988af2cc12a50695d71f199cb3b0565" kindref="member">waitForWaylandTouch</ref>(KWayland::Client::Seat<sp/>*seat)</highlight></codeline>
<codeline lineno="806"><highlight class="normal">{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>hasTouchSpy(seat,<sp/>&amp;KWayland::Client::Seat::hasTouchChanged);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hasTouchSpy.wait();</highlight></codeline>
<codeline lineno="809"><highlight class="normal">}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811" refid="namespace_k_win_1_1_test_1a3255b7f27e1f6075c53288186a919d00" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a3255b7f27e1f6075c53288186a919d00" kindref="member">waitForWaylandKeyboard</ref>()</highlight></codeline>
<codeline lineno="812"><highlight class="normal">{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s_waylandConnection-&gt;seat)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a3255b7f27e1f6075c53288186a919d00" kindref="member">waitForWaylandKeyboard</ref>(s_waylandConnection-&gt;seat);</highlight></codeline>
<codeline lineno="817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819" refid="namespace_k_win_1_1_test_1ae60e70830c08a372b439c5fae5fd0442" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a3255b7f27e1f6075c53288186a919d00" kindref="member">waitForWaylandKeyboard</ref>(KWayland::Client::Seat<sp/>*seat)</highlight></codeline>
<codeline lineno="820"><highlight class="normal">{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>hasKeyboardSpy(seat,<sp/>&amp;KWayland::Client::Seat::hasKeyboardChanged);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hasKeyboardSpy.wait();</highlight></codeline>
<codeline lineno="823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825" refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">render</ref>(KWayland::Client::Surface<sp/>*surface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QSize<sp/>&amp;size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QColor<sp/>&amp;color,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QImage::Format<sp/>&amp;<ref refid="namespace_k_win_1a6ef3f38157c98f3fe83ae3ec855ee903" kindref="member">format</ref>)</highlight></codeline>
<codeline lineno="826"><highlight class="normal">{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">render</ref>(s_waylandConnection-&gt;shm,<sp/>surface,<sp/>size,<sp/>color,<sp/><ref refid="namespace_k_win_1a6ef3f38157c98f3fe83ae3ec855ee903" kindref="member">format</ref>);</highlight></codeline>
<codeline lineno="828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830" refid="namespace_k_win_1_1_test_1a222c0724b1eeb78c74aa1a1171fc2268" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">render</ref>(KWayland::Client::ShmPool<sp/>*shm,<sp/>KWayland::Client::Surface<sp/>*surface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QSize<sp/>&amp;size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QColor<sp/>&amp;color,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QImage::Format<sp/>&amp;<ref refid="namespace_k_win_1a6ef3f38157c98f3fe83ae3ec855ee903" kindref="member">format</ref>)</highlight></codeline>
<codeline lineno="831"><highlight class="normal">{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>img(size,<sp/><ref refid="namespace_k_win_1a6ef3f38157c98f3fe83ae3ec855ee903" kindref="member">format</ref>);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>img.fill(color);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">render</ref>(surface,<sp/>img);</highlight></codeline>
<codeline lineno="835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837" refid="namespace_k_win_1_1_test_1a5a359b903ac5417003a418776036cf84" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">render</ref>(KWayland::Client::Surface<sp/>*surface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QImage<sp/>&amp;img)</highlight></codeline>
<codeline lineno="838"><highlight class="normal">{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">render</ref>(s_waylandConnection-&gt;shm,<sp/>surface,<sp/>img);</highlight></codeline>
<codeline lineno="840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842" refid="namespace_k_win_1_1_test_1aa8a66a205cec3f773284ff1693794b7a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">render</ref>(KWayland::Client::ShmPool<sp/>*shm,<sp/>KWayland::Client::Surface<sp/>*surface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QImage<sp/>&amp;img)</highlight></codeline>
<codeline lineno="843"><highlight class="normal">{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;attachBuffer(shm-&gt;createBuffer(img));</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;damage(QRect(QPoint(0,<sp/>0),<sp/>img.size()));</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849" refid="namespace_k_win_1_1_test_1a6526dd5f17b3c80aa9dcb63e12ddb392" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref><sp/>*<ref refid="namespace_k_win_1_1_test_1a6526dd5f17b3c80aa9dcb63e12ddb392" kindref="member">waitForWaylandWindowShown</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeout)</highlight></codeline>
<codeline lineno="850"><highlight class="normal">{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowAddedSpy(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_workspace_1a8f82a0ac5517ddb86629fa3f8243e388" kindref="member">Workspace::windowAdded</ref>);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!windowAddedSpy.isValid())<sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!windowAddedSpy.wait(timeout))<sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>windowAddedSpy.first().first().value&lt;<ref refid="class_k_win_1_1_window" kindref="compound">Window</ref><sp/>*&gt;();</highlight></codeline>
<codeline lineno="859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861" refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref><sp/>*<ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">renderAndWaitForShown</ref>(KWayland::Client::Surface<sp/>*surface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QSize<sp/>&amp;size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QColor<sp/>&amp;color,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QImage::Format<sp/>&amp;<ref refid="namespace_k_win_1a6ef3f38157c98f3fe83ae3ec855ee903" kindref="member">format</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeout)</highlight></codeline>
<codeline lineno="862"><highlight class="normal">{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">renderAndWaitForShown</ref>(s_waylandConnection-&gt;shm,<sp/>surface,<sp/>size,<sp/>color,<sp/><ref refid="namespace_k_win_1a6ef3f38157c98f3fe83ae3ec855ee903" kindref="member">format</ref>,<sp/>timeout);</highlight></codeline>
<codeline lineno="864"><highlight class="normal">}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866" refid="namespace_k_win_1_1_test_1a8de8d0bab0a02cebb6ae46552db10df7" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref><sp/>*<ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">renderAndWaitForShown</ref>(KWayland::Client::ShmPool<sp/>*shm,<sp/>KWayland::Client::Surface<sp/>*surface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QSize<sp/>&amp;size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QColor<sp/>&amp;color,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QImage::Format<sp/>&amp;<ref refid="namespace_k_win_1a6ef3f38157c98f3fe83ae3ec855ee903" kindref="member">format</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeout)</highlight></codeline>
<codeline lineno="867"><highlight class="normal">{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>img(size,<sp/><ref refid="namespace_k_win_1a6ef3f38157c98f3fe83ae3ec855ee903" kindref="member">format</ref>);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>img.fill(color);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">renderAndWaitForShown</ref>(shm,<sp/>surface,<sp/>img,<sp/>timeout);</highlight></codeline>
<codeline lineno="871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873" refid="namespace_k_win_1_1_test_1aa53b8a86d3dca8a9e027da2d983ace5c" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref><sp/>*<ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">renderAndWaitForShown</ref>(KWayland::Client::Surface<sp/>*surface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QImage<sp/>&amp;img,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeout)</highlight></codeline>
<codeline lineno="874"><highlight class="normal">{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">renderAndWaitForShown</ref>(s_waylandConnection-&gt;shm,<sp/>surface,<sp/>img,<sp/>timeout);</highlight></codeline>
<codeline lineno="876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878" refid="namespace_k_win_1_1_test_1a9c772b2c48fb96b64022153299aaa69e" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref><sp/>*<ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">renderAndWaitForShown</ref>(KWayland::Client::ShmPool<sp/>*shm,<sp/>KWayland::Client::Surface<sp/>*surface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QImage<sp/>&amp;img,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeout)</highlight></codeline>
<codeline lineno="879"><highlight class="normal">{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowAddedSpy(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_workspace_1a8f82a0ac5517ddb86629fa3f8243e388" kindref="member">Workspace::windowAdded</ref>);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!windowAddedSpy.isValid())<sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">render</ref>(shm,<sp/>surface,<sp/>img);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1ace6446b3dfb4032c38026e43ee355ff5" kindref="member">flushWaylandConnection</ref>();</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!windowAddedSpy.wait(timeout))<sp/>{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>windowAddedSpy.first().first().value&lt;<ref refid="class_k_win_1_1_window" kindref="compound">Window</ref><sp/>*&gt;();</highlight></codeline>
<codeline lineno="890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892" refid="namespace_k_win_1_1_test_1ace6446b3dfb4032c38026e43ee355ff5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1ace6446b3dfb4032c38026e43ee355ff5" kindref="member">flushWaylandConnection</ref>()</highlight></codeline>
<codeline lineno="893"><highlight class="normal">{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s_waylandConnection)<sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_waylandConnection-&gt;connection-&gt;flush();</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899" refid="class_k_win_1_1_test_1_1_wayland_sync_point" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_wayland_sync_point_1acc47b0a1beb2b0967da4a3de2e55ee45" kindref="member">WaylandSyncPoint</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QObject</highlight></codeline>
<codeline lineno="900"><highlight class="normal">{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="904" refid="class_k_win_1_1_test_1_1_wayland_sync_point_1acc47b0a1beb2b0967da4a3de2e55ee45" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_sync_point_1acc47b0a1beb2b0967da4a3de2e55ee45" kindref="member">WaylandSyncPoint</ref>(KWayland::Client::ConnectionThread<sp/>*<ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>,<sp/>KWayland::Client::EventQueue<sp/>*eventQueue)</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wl_callback_listener<sp/>listener<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.done<sp/>=<sp/>[](</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/>wl_callback<sp/>*callback,<sp/>uint32_t<sp/>callback_data)<sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>syncPoint<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_wayland_sync_point_1acc47b0a1beb2b0967da4a3de2e55ee45" kindref="member">WaylandSyncPoint</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q_EMIT<sp/>syncPoint-&gt;done();</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_callback<sp/>=<sp/>wl_display_sync(<ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>-&gt;display());</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eventQueue-&gt;addProxy(m_callback);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wl_callback_add_listener(m_callback,<sp/>&amp;listener,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918" refid="class_k_win_1_1_test_1_1_wayland_sync_point_1ab9337109cdf5ef8742a370cfc6bc545b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_sync_point_1ab9337109cdf5ef8742a370cfc6bc545b" kindref="member">~WaylandSyncPoint</ref>()</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline lineno="919"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wl_callback_destroy(m_callback);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal">Q_SIGNALS:</highlight></codeline>
<codeline lineno="924" refid="class_k_win_1_1_test_1_1_wayland_sync_point_1abcf003bf04d2c27779fe1b87442c49a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_sync_point_1abcf003bf04d2c27779fe1b87442c49a6" kindref="member">done</ref>();</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_callback<sp/>*m_callback;</highlight></codeline>
<codeline lineno="928"><highlight class="normal">};</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930" refid="namespace_k_win_1_1_test_1ab48f9c39f88089daf08aaa45759f7299" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1ab48f9c39f88089daf08aaa45759f7299" kindref="member">waylandSync</ref>()</highlight></codeline>
<codeline lineno="931"><highlight class="normal">{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_sync_point" kindref="compound">WaylandSyncPoint</ref><sp/>syncPoint(s_waylandConnection-&gt;connection,<sp/>s_waylandConnection-&gt;queue);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>doneSpy(&amp;syncPoint,<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_wayland_sync_point_1abcf003bf04d2c27779fe1b87442c49a6" kindref="member">WaylandSyncPoint::done</ref>);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doneSpy.wait();</highlight></codeline>
<codeline lineno="935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937" refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" refkind="member"><highlight class="normal">std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">createSurface</ref>()</highlight></codeline>
<codeline lineno="938"><highlight class="normal">{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s_waylandConnection-&gt;compositor)<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">createSurface</ref>(s_waylandConnection-&gt;compositor);</highlight></codeline>
<codeline lineno="943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945" refid="namespace_k_win_1_1_test_1a862e52e06527e5b8cd253659ab929c5d" refkind="member"><highlight class="normal">std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">createSurface</ref>(KWayland::Client::Compositor<sp/>*compositor)</highlight></codeline>
<codeline lineno="946"><highlight class="normal">{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>s{compositor-&gt;createSurface()};</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s-&gt;isValid()<sp/>?<sp/>std::move(s)<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951" refid="namespace_k_win_1_1_test_1ab4faef15d7046070832101a3953fb0f1" refkind="member"><highlight class="normal">std::unique_ptr&lt;KWayland::Client::SubSurface&gt;<sp/><ref refid="namespace_k_win_1_1_test_1ab4faef15d7046070832101a3953fb0f1" kindref="member">createSubSurface</ref>(KWayland::Client::Surface<sp/>*surface,<sp/>KWayland::Client::Surface<sp/>*parentSurface)</highlight></codeline>
<codeline lineno="952"><highlight class="normal">{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s_waylandConnection-&gt;subCompositor)<sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::SubSurface&gt;<sp/>s(s_waylandConnection-&gt;subCompositor-&gt;createSubSurface(surface,<sp/>parentSurface));</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s-&gt;isValid())<sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963" refid="namespace_k_win_1_1_test_1ac166b97d1f64154ee33256ab8d2d1369" refkind="member"><highlight class="normal">std::unique_ptr&lt;LayerSurfaceV1&gt;<sp/><ref refid="namespace_k_win_1_1_test_1ac166b97d1f64154ee33256ab8d2d1369" kindref="member">createLayerSurfaceV1</ref>(KWayland::Client::Surface<sp/>*surface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>&amp;scope,<sp/>KWayland::Client::Output<sp/>*output,<sp/>LayerShellV1::layer<sp/>layer)</highlight></codeline>
<codeline lineno="964"><highlight class="normal">{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_test_1_1_layer_shell_v1" kindref="compound">LayerShellV1</ref><sp/>*shell<sp/>=<sp/>s_waylandConnection-&gt;layerShellV1;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shell)<sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>a<sp/>layer<sp/>surface<sp/>because<sp/>the<sp/>layer<sp/>shell<sp/>global<sp/>is<sp/>not<sp/>bound&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>::wl_output<sp/>*nativeOutput<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output)<sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nativeOutput<sp/>=<sp/>*output;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shellSurface<sp/>=<sp/>std::make_unique&lt;LayerSurfaceV1&gt;();</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;init(shell-&gt;get_layer_surface(*surface,<sp/>nativeOutput,<sp/>layer,<sp/>scope));</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shellSurface;</highlight></codeline>
<codeline lineno="980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982" refid="namespace_k_win_1_1_test_1a57430bcdf11495b59bdd1d6e45c949d8" refkind="member"><highlight class="normal">std::unique_ptr&lt;QtWayland::zwp_input_panel_surface_v1&gt;<sp/><ref refid="namespace_k_win_1_1_test_1a57430bcdf11495b59bdd1d6e45c949d8" kindref="member">createInputPanelSurfaceV1</ref>(KWayland::Client::Surface<sp/>*surface,<sp/>KWayland::Client::Output<sp/>*output,<sp/><ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a619415e949a428ef118af4bea55fa7d7" kindref="member">MockInputMethod::Mode</ref><sp/>mode)</highlight></codeline>
<codeline lineno="983"><highlight class="normal">{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s_waylandConnection-&gt;inputPanelV1)<sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>create<sp/>the<sp/>input<sp/>panel<sp/>surface.<sp/>The<sp/>interface<sp/>input_panel<sp/>global<sp/>is<sp/>not<sp/>bound&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>std::make_unique&lt;QtWayland::zwp_input_panel_surface_v1&gt;(s_waylandConnection-&gt;inputPanelV1-&gt;get_input_panel_surface(*surface));</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s-&gt;isInitialized())<sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(mode)<sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a619415e949a428ef118af4bea55fa7d7adaa4ad87b52566898a9a6df85657c082" kindref="member">MockInputMethod::Mode::TopLevel</ref>:</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;set_toplevel(output-&gt;output(),<sp/>QtWayland::zwp_input_panel_surface_v1::position_center_bottom);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a619415e949a428ef118af4bea55fa7d7a6b551379c3c0b59326abdaf3b4395bd3" kindref="member">MockInputMethod::Mode::Overlay</ref>:</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;set_overlay_panel();</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005" refid="namespace_k_win_1_1_test_1ad5d6ef68dc8af138ba9e75cf3844524b" refkind="member"><highlight class="normal">std::unique_ptr&lt;FractionalScaleV1&gt;<sp/><ref refid="namespace_k_win_1_1_test_1ad5d6ef68dc8af138ba9e75cf3844524b" kindref="member">createFractionalScaleV1</ref>(KWayland::Client::Surface<sp/>*surface)</highlight></codeline>
<codeline lineno="1006"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s_waylandConnection-&gt;fractionalScaleManagerV1)<sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>create<sp/>fractional<sp/>scale<sp/>surface.<sp/>The<sp/>global<sp/>is<sp/>not<sp/>bound&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>std::make_unique&lt;FractionalScaleV1&gt;();</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>scale-&gt;init(s_waylandConnection-&gt;fractionalScaleManagerV1-&gt;get_fractional_scale(*surface));</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scale;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>waitForConfigured(<ref refid="class_xdg_surface" kindref="compound">XdgSurface</ref><sp/>*shellSurface)</highlight></codeline>
<codeline lineno="1018"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface,<sp/>&amp;XdgSurface::configureRequested);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;surface()-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;ack_configure(surfaceConfigureRequestedSpy.last().first().toUInt());</highlight></codeline>
<codeline lineno="1025"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027" refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" refkind="member"><highlight class="normal">std::unique_ptr&lt;XdgToplevel&gt;<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">createXdgToplevelSurface</ref>(KWayland::Client::Surface<sp/>*surface)</highlight></codeline>
<codeline lineno="1028"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">createXdgToplevelSurface</ref>(surface,<sp/><ref refid="namespace_k_win_1_1_test_1acc9401c7c509367c1bd5356379700924af1d9a0dc9e12b9129fc765725484aa11" kindref="member">CreationSetup::CreateAndConfigure</ref>);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032" refid="namespace_k_win_1_1_test_1a4d0bff722d7d2035978ade6b1db6400a" refkind="member"><highlight class="normal">std::unique_ptr&lt;XdgToplevel&gt;<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">createXdgToplevelSurface</ref>(<ref refid="class_k_win_1_1_test_1_1_xdg_shell" kindref="compound">XdgShell</ref><sp/>*shell,<sp/>KWayland::Client::Surface<sp/>*surface)</highlight></codeline>
<codeline lineno="1033"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">createXdgToplevelSurface</ref>(shell,<sp/>surface,<sp/><ref refid="namespace_k_win_1_1_test_1acc9401c7c509367c1bd5356379700924af1d9a0dc9e12b9129fc765725484aa11" kindref="member">CreationSetup::CreateAndConfigure</ref>);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037" refid="namespace_k_win_1_1_test_1a0c7318f7b2861d4ba92a2ae860afb2f9" refkind="member"><highlight class="normal">std::unique_ptr&lt;XdgToplevel&gt;<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">createXdgToplevelSurface</ref>(KWayland::Client::Surface<sp/>*surface,<sp/><ref refid="namespace_k_win_1_1_test_1acc9401c7c509367c1bd5356379700924" kindref="member">CreationSetup</ref><sp/>configureMode)</highlight></codeline>
<codeline lineno="1038"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_test_1_1_xdg_shell" kindref="compound">XdgShell</ref><sp/>*shell<sp/>=<sp/>s_waylandConnection-&gt;xdgShell;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shell)<sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>an<sp/>xdg_toplevel<sp/>surface<sp/>because<sp/>xdg_wm_base<sp/>global<sp/>is<sp/>not<sp/>bound&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">createXdgToplevelSurface</ref>(shell,<sp/>surface,<sp/>configureMode);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049" refid="namespace_k_win_1_1_test_1ade742543bfcb0d817f0042590369f8c1" refkind="member"><highlight class="normal">std::unique_ptr&lt;XdgToplevel&gt;<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">createXdgToplevelSurface</ref>(<ref refid="class_k_win_1_1_test_1_1_xdg_shell" kindref="compound">XdgShell</ref><sp/>*shell,<sp/>KWayland::Client::Surface<sp/>*surface,<sp/><ref refid="namespace_k_win_1_1_test_1acc9401c7c509367c1bd5356379700924" kindref="member">CreationSetup</ref><sp/>configureMode)</highlight></codeline>
<codeline lineno="1050"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_test_1_1_xdg_surface" kindref="compound">XdgSurface</ref><sp/>*xdgSurface<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_xdg_surface" kindref="compound">XdgSurface</ref>(shell,<sp/>surface);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;XdgToplevel&gt;<sp/>xdgToplevel<sp/>=<sp/>std::make_unique&lt;XdgToplevel&gt;(xdgSurface);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(configureMode<sp/>==<sp/><ref refid="namespace_k_win_1_1_test_1acc9401c7c509367c1bd5356379700924af1d9a0dc9e12b9129fc765725484aa11" kindref="member">CreationSetup::CreateAndConfigure</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waitForConfigured(xdgSurface);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xdgToplevel;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061" refid="namespace_k_win_1_1_test_1ac1fe3be45e880f6a6473d6826b3303ae" refkind="member"><highlight class="normal">std::unique_ptr&lt;XdgToplevel&gt;<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">createXdgToplevelSurface</ref>(KWayland::Client::Surface<sp/>*surface,<sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel" kindref="compound">XdgToplevel</ref><sp/>*toplevel)&gt;<sp/>setup)</highlight></codeline>
<codeline lineno="1062"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_test_1_1_xdg_shell" kindref="compound">XdgShell</ref><sp/>*shell<sp/>=<sp/>s_waylandConnection-&gt;xdgShell;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shell)<sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>an<sp/>xdg_toplevel<sp/>surface<sp/>because<sp/>xdg_wm_base<sp/>global<sp/>is<sp/>not<sp/>bound&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">createXdgToplevelSurface</ref>(shell,<sp/>surface,<sp/>setup);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073" refid="namespace_k_win_1_1_test_1a1d47ead3cd96703af6190d5b9b4027de" refkind="member"><highlight class="normal">std::unique_ptr&lt;XdgToplevel&gt;<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">createXdgToplevelSurface</ref>(<ref refid="class_k_win_1_1_test_1_1_xdg_shell" kindref="compound">XdgShell</ref><sp/>*shell,<sp/>KWayland::Client::Surface<sp/>*surface,<sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel" kindref="compound">XdgToplevel</ref><sp/>*toplevel)&gt;<sp/>setup)</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_test_1_1_xdg_surface" kindref="compound">XdgSurface</ref><sp/>*xdgSurface<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_xdg_surface" kindref="compound">XdgSurface</ref>(shell,<sp/>surface);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;XdgToplevel&gt;<sp/>xdgToplevel<sp/>=<sp/>std::make_unique&lt;XdgToplevel&gt;(xdgSurface);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>setup(xdgToplevel.get());</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>waitForConfigured(xdgSurface);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xdgToplevel;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084" refid="namespace_k_win_1_1_test_1a735a2b3ebb5e8d173daba48b745871a4" refkind="member"><highlight class="normal">std::unique_ptr&lt;XdgPositioner&gt;<sp/><ref refid="namespace_k_win_1_1_test_1a735a2b3ebb5e8d173daba48b745871a4" kindref="member">createXdgPositioner</ref>()</highlight></codeline>
<codeline lineno="1085"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_test_1_1_xdg_shell" kindref="compound">XdgShell</ref><sp/>*shell<sp/>=<sp/>s_waylandConnection-&gt;xdgShell;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shell)<sp/>{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>an<sp/>xdg_positioner<sp/>object<sp/>because<sp/>xdg_wm_base<sp/>global<sp/>is<sp/>not<sp/>bound&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;XdgPositioner&gt;(shell);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096" refid="namespace_k_win_1_1_test_1a52039e32ae72c4329a4720d32469a385" refkind="member"><highlight class="normal">std::unique_ptr&lt;XdgPopup&gt;<sp/><ref refid="namespace_k_win_1_1_test_1a52039e32ae72c4329a4720d32469a385" kindref="member">createXdgPopupSurface</ref>(KWayland::Client::Surface<sp/>*surface,<sp/><ref refid="class_k_win_1_1_test_1_1_xdg_surface" kindref="compound">XdgSurface</ref><sp/>*parentSurface,<sp/><ref refid="class_k_win_1_1_test_1_1_xdg_positioner" kindref="compound">XdgPositioner</ref><sp/>*positioner,<sp/><ref refid="namespace_k_win_1_1_test_1acc9401c7c509367c1bd5356379700924" kindref="member">CreationSetup</ref><sp/>configureMode)</highlight></codeline>
<codeline lineno="1097"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_test_1_1_xdg_shell" kindref="compound">XdgShell</ref><sp/>*shell<sp/>=<sp/>s_waylandConnection-&gt;xdgShell;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shell)<sp/>{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>an<sp/>xdg_popup<sp/>surface<sp/>because<sp/>xdg_wm_base<sp/>global<sp/>is<sp/>not<sp/>bound&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_test_1_1_xdg_surface" kindref="compound">XdgSurface</ref><sp/>*xdgSurface<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_xdg_surface" kindref="compound">XdgSurface</ref>(shell,<sp/>surface);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;XdgPopup&gt;<sp/>xdgPopup<sp/>=<sp/>std::make_unique&lt;XdgPopup&gt;(xdgSurface,<sp/>parentSurface,<sp/>positioner);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(configureMode<sp/>==<sp/><ref refid="namespace_k_win_1_1_test_1acc9401c7c509367c1bd5356379700924af1d9a0dc9e12b9129fc765725484aa11" kindref="member">CreationSetup::CreateAndConfigure</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waitForConfigured(xdgSurface);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xdgPopup;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115" refid="namespace_k_win_1_1_test_1a5b6ba1c532f1dec604fbb3a7bd44ee04" refkind="member"><highlight class="normal">std::unique_ptr&lt;XdgToplevelDecorationV1&gt;<sp/><ref refid="namespace_k_win_1_1_test_1a5b6ba1c532f1dec604fbb3a7bd44ee04" kindref="member">createXdgToplevelDecorationV1</ref>(<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel" kindref="compound">XdgToplevel</ref><sp/>*toplevel)</highlight></codeline>
<codeline lineno="1116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_test_1_1_xdg_decoration_manager_v1" kindref="compound">XdgDecorationManagerV1</ref><sp/>*manager<sp/>=<sp/>s_waylandConnection-&gt;xdgDecorationManagerV1;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!manager)<sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>an<sp/>xdg_toplevel_decoration_v1<sp/>because<sp/>xdg_decoration_manager_v1<sp/>global<sp/>is<sp/>not<sp/>bound&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;XdgToplevelDecorationV1&gt;(manager,<sp/>toplevel);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127" refid="namespace_k_win_1_1_test_1a0b5feede4405fb4f6fc9464a95288350" refkind="member"><highlight class="normal">std::unique_ptr&lt;IdleInhibitorV1&gt;<sp/><ref refid="namespace_k_win_1_1_test_1a0b5feede4405fb4f6fc9464a95288350" kindref="member">createIdleInhibitorV1</ref>(KWayland::Client::Surface<sp/>*surface)</highlight></codeline>
<codeline lineno="1128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_test_1_1_idle_inhibit_manager_v1" kindref="compound">IdleInhibitManagerV1</ref><sp/>*manager<sp/>=<sp/>s_waylandConnection-&gt;idleInhibitManagerV1;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!manager)<sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>an<sp/>idle_inhibitor_v1<sp/>because<sp/>idle_inhibit_manager_v1<sp/>global<sp/>is<sp/>not<sp/>bound&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;IdleInhibitorV1&gt;(manager,<sp/>surface);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138" refid="namespace_k_win_1_1_test_1ad4feb97ed84e9de5df974bb8d485c9f0" refkind="member"><highlight class="normal">std::unique_ptr&lt;AutoHideScreenEdgeV1&gt;<sp/><ref refid="namespace_k_win_1_1_test_1ad4feb97ed84e9de5df974bb8d485c9f0" kindref="member">createAutoHideScreenEdgeV1</ref>(KWayland::Client::Surface<sp/>*surface,<sp/>uint32_t<sp/>border)</highlight></codeline>
<codeline lineno="1139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_test_1_1_screen_edge_manager_v1" kindref="compound">ScreenEdgeManagerV1</ref><sp/>*manager<sp/>=<sp/>s_waylandConnection-&gt;screenEdgeManagerV1;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!manager)<sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>an<sp/>kde_auto_hide_screen_edge_v1<sp/>because<sp/>kde_screen_edge_manager_v1<sp/>global<sp/>is<sp/>not<sp/>bound&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;AutoHideScreenEdgeV1&gt;(manager,<sp/>surface,<sp/>border);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149" refid="namespace_k_win_1_1_test_1a2d3ed1291cac418e44d9c114e5427d19" refkind="member"><highlight class="normal">std::unique_ptr&lt;CursorShapeDeviceV1&gt;<sp/><ref refid="namespace_k_win_1_1_test_1a2d3ed1291cac418e44d9c114e5427d19" kindref="member">createCursorShapeDeviceV1</ref>(KWayland::Client::Pointer<sp/>*pointer)</highlight></codeline>
<codeline lineno="1150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_test_1_1_cursor_shape_manager_v1" kindref="compound">CursorShapeManagerV1</ref><sp/>*manager<sp/>=<sp/>s_waylandConnection-&gt;cursorShapeManagerV1;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!manager)<sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>a<sp/>wp_cursor_shape_device_v1<sp/>because<sp/>wp_cursor_shape_manager_v1<sp/>global<sp/>is<sp/>not<sp/>bound&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;CursorShapeDeviceV1&gt;(manager,<sp/>pointer);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160" refid="namespace_k_win_1_1_test_1a71e6598e56997eed0fa80ed32ade7446" refkind="member"><highlight class="normal">std::unique_ptr&lt;XdgDialogV1&gt;<sp/><ref refid="namespace_k_win_1_1_test_1a71e6598e56997eed0fa80ed32ade7446" kindref="member">createXdgDialogV1</ref>(<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel" kindref="compound">XdgToplevel</ref><sp/>*toplevel)</highlight></codeline>
<codeline lineno="1161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_test_1_1_xdg_wm_dialog_v1" kindref="compound">XdgWmDialogV1</ref><sp/>*wm<sp/>=<sp/>s_waylandConnection-&gt;xdgWmDialogV1;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wm)<sp/>{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>a<sp/>xdg_dialog_v1<sp/>because<sp/>xdg_wm_dialog_v1<sp/>global<sp/>is<sp/>not<sp/>bound&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;XdgDialogV1&gt;(wm,<sp/>toplevel);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170" refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">waitForWindowClosed</ref>(<ref refid="class_k_win_1_1_window" kindref="compound">Window</ref><sp/>*window)</highlight></codeline>
<codeline lineno="1171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>closedSpy(window,<sp/>&amp;<ref refid="class_k_win_1_1_window_1a75b348e50a34a4881ce281e40d1e8f02" kindref="member">Window::closed</ref>);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!closedSpy.isValid())<sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>closedSpy.wait();</highlight></codeline>
<codeline lineno="1177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>KWIN_BUILD_SCREENLOCKER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lockScreen()</highlight></codeline>
<codeline lineno="1181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;isScreenLocked())<sp/>{</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>lockStateChangedSpy(ScreenLocker::KSldApp::self(),<sp/>&amp;ScreenLocker::KSldApp::lockStateChanged);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lockStateChangedSpy.isValid())<sp/>{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>ScreenLocker::KSldApp::self()-&gt;lock(ScreenLocker::EstablishLock::Immediate);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockStateChangedSpy.count()<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;isScreenLocked())<sp/>{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!kwinApp()-&gt;screenLockerWatcher()-&gt;isLocked())<sp/>{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSignalSpy<sp/>lockedSpy(kwinApp()-&gt;screenLockerWatcher(),<sp/>&amp;ScreenLockerWatcher::locked);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lockedSpy.isValid())<sp/>{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lockedSpy.wait())<sp/>{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!kwinApp()-&gt;screenLockerWatcher()-&gt;isLocked())<sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a80923801c152ebe9d50f7b3ed392ad4d" kindref="member">unlockScreen</ref>()</highlight></codeline>
<codeline lineno="1212"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>lockStateChangedSpy(ScreenLocker::KSldApp::self(),<sp/>&amp;ScreenLocker::KSldApp::lockStateChanged);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lockStateChangedSpy.isValid())<sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">ScreenLocker;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>children<sp/>=<sp/>KSldApp::self()-&gt;children();</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>children.begin();<sp/>it<sp/>!=<sp/>children.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qstrcmp((*it)-&gt;metaObject()-&gt;className(),<sp/></highlight><highlight class="stringliteral">&quot;LogindIntegration&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QMetaObject::invokeMethod(*it,<sp/></highlight><highlight class="stringliteral">&quot;requestUnlock&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;isScreenLocked())<sp/>{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lockStateChangedSpy.wait();</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;isScreenLocked())<sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kwinApp()-&gt;screenLockerWatcher()-&gt;isLocked())<sp/>{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSignalSpy<sp/>lockedSpy(kwinApp()-&gt;screenLockerWatcher(),<sp/>&amp;ScreenLockerWatcher::locked);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lockedSpy.isValid())<sp/>{</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lockedSpy.wait())<sp/>{</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kwinApp()-&gt;screenLockerWatcher()-&gt;isLocked())<sp/>{</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>KWIN_BUILD_LOCKSCREEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248" refid="namespace_k_win_1_1_test_1a92ed8ed368ec43eae0bf76b866e14b24" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a92ed8ed368ec43eae0bf76b866e14b24" kindref="member">renderNodeAvailable</ref>()</highlight></codeline>
<codeline lineno="1249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deviceCount<sp/>=<sp/>drmGetDevices2(0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(deviceCount<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;drmDevice<sp/>*&gt;<sp/>devices(deviceCount);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(drmGetDevices2(0,<sp/>devices.data(),<sp/>devices.size())<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>deviceCleanup<sp/>=<sp/>qScopeGuard([&amp;devices]()<sp/>{</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drmFreeDevices(devices.data(),<sp/>devices.size());</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::any_of(devices.constBegin(),<sp/>devices.constEnd(),<sp/>[](drmDevice<sp/>*device)<sp/>{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>device-&gt;available_nodes<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>DRM_NODE_RENDER);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>KWIN_BUILD_X11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_k_win_1_1_xcb_connection_deleter_1a1dde1b6d8b7abb4a8b74b9d8a4c6089f" kindref="member">XcbConnectionDeleter::operator()</ref>(xcb_connection_t<sp/>*pointer)</highlight></codeline>
<codeline lineno="1270"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>xcb_disconnect(pointer);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal">Test::XcbConnectionPtr<sp/>createX11Connection()</highlight></codeline>
<codeline lineno="1275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_q_future_watcher" kindref="compound">QFutureWatcher&lt;xcb_connection_t *&gt;</ref><sp/>watcher;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>QEventLoop<sp/>e;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>e.connect(&amp;watcher,<sp/>&amp;<ref refid="class_q_future_watcher" kindref="compound">QFutureWatcher&lt;xcb_connection_t *&gt;::finished</ref>,<sp/>&amp;e,<sp/>&amp;QEventLoop::quit);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>QFuture&lt;xcb_connection_t<sp/>*&gt;<sp/>future<sp/>=<sp/>QtConcurrent::run([]()<sp/>{</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xcb_connect(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>watcher.setFuture(future);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>e.exec();</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Test::XcbConnectionPtr(future.result());</highlight></codeline>
<codeline lineno="1285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288" refid="class_k_win_1_1_test_1_1_wayland_output_management_v2_1a340c14cb2b250d460640b324974930f9" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_wayland_output_management_v2_1a340c14cb2b250d460640b324974930f9" kindref="member">WaylandOutputManagementV2::WaylandOutputManagementV2</ref>(struct<sp/>::wl_registry<sp/>*registry,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>)</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>QObject()</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="namespace_qt_wayland" kindref="compound">QtWayland</ref>::kde_output_management_v2()</highlight></codeline>
<codeline lineno="1291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>init(registry,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295" refid="class_k_win_1_1_test_1_1_wayland_output_management_v2_1af9628108a62dd2076803864e31685f58" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_wayland_output_configuration_v2" kindref="compound">WaylandOutputConfigurationV2</ref><sp/>*<ref refid="class_k_win_1_1_test_1_1_wayland_output_management_v2_1af9628108a62dd2076803864e31685f58" kindref="member">WaylandOutputManagementV2::createConfiguration</ref>()</highlight></codeline>
<codeline lineno="1296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_configuration_v2" kindref="compound">WaylandOutputConfigurationV2</ref>(create_configuration());</highlight></codeline>
<codeline lineno="1298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300" refid="class_k_win_1_1_test_1_1_wayland_output_configuration_v2_1a25a0092bff291b427341e10f6202f67a" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_wayland_output_configuration_v2_1a25a0092bff291b427341e10f6202f67a" kindref="member">WaylandOutputConfigurationV2::WaylandOutputConfigurationV2</ref>(struct<sp/>::kde_output_configuration_v2<sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>QObject()</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="namespace_qt_wayland" kindref="compound">QtWayland</ref>::kde_output_configuration_v2()</highlight></codeline>
<codeline lineno="1303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/>init(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307" refid="class_k_win_1_1_test_1_1_wayland_output_configuration_v2_1a6c45aaecfca1e8a699d65fa975e54d18" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_configuration_v2_1a6c45aaecfca1e8a699d65fa975e54d18" kindref="member">WaylandOutputConfigurationV2::kde_output_configuration_v2_applied</ref>()</highlight></codeline>
<codeline lineno="1308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_configuration_v2_1a725d11f269f830ec1052558498209ca0" kindref="member">applied</ref>();</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1311" refid="class_k_win_1_1_test_1_1_wayland_output_configuration_v2_1a4757dda4aeb0636f796996a48e54b6c2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_configuration_v2_1a4757dda4aeb0636f796996a48e54b6c2" kindref="member">WaylandOutputConfigurationV2::kde_output_configuration_v2_failed</ref>()</highlight></codeline>
<codeline lineno="1312"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_configuration_v2_1aea8f426659b381552619a3ddd0984b57" kindref="member">failed</ref>();</highlight></codeline>
<codeline lineno="1314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a360b90b44dd03989f66ab8f06df64488" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a360b90b44dd03989f66ab8f06df64488" kindref="member">WaylandOutputDeviceV2Mode::WaylandOutputDeviceV2Mode</ref>(struct<sp/>::kde_output_device_mode_v2<sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_qt_wayland" kindref="compound">QtWayland</ref>::kde_output_device_mode_v2(object)</highlight></codeline>
<codeline lineno="1318"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a082acf30848436a32a7714edc52953e2" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a082acf30848436a32a7714edc52953e2" kindref="member">WaylandOutputDeviceV2Mode::~WaylandOutputDeviceV2Mode</ref>()</highlight></codeline>
<codeline lineno="1322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/>kde_output_device_mode_v2_destroy(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="1324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a9331407c299bce4c493eadd11ea9371c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a9331407c299bce4c493eadd11ea9371c" kindref="member">WaylandOutputDeviceV2Mode::kde_output_device_mode_v2_size</ref>(int32_t<sp/>width,<sp/>int32_t<sp/>height)</highlight></codeline>
<codeline lineno="1327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>m_size<sp/>=<sp/>QSize(width,<sp/>height);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a6497cdf984fa0e576958d0290c05918c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a6497cdf984fa0e576958d0290c05918c" kindref="member">WaylandOutputDeviceV2Mode::kde_output_device_mode_v2_refresh</ref>(int32_t<sp/>refresh)</highlight></codeline>
<codeline lineno="1332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>m_refreshRate<sp/>=<sp/>refresh;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a4fba94fd7e48608d05b0a6b3451f2fbd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a4fba94fd7e48608d05b0a6b3451f2fbd" kindref="member">WaylandOutputDeviceV2Mode::kde_output_device_mode_v2_preferred</ref>()</highlight></codeline>
<codeline lineno="1337"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>m_preferred<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a7a2bdf8cba3b883344121d6f3380ec04" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a7a2bdf8cba3b883344121d6f3380ec04" kindref="member">WaylandOutputDeviceV2Mode::kde_output_device_mode_v2_removed</ref>()</highlight></codeline>
<codeline lineno="1342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a7e764cde35d341984c24543c816a36cf" kindref="member">removed</ref>();</highlight></codeline>
<codeline lineno="1344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1ae4a5b9d9909afcc5915837dd000fa5f8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1ae4a5b9d9909afcc5915837dd000fa5f8" kindref="member">WaylandOutputDeviceV2Mode::refreshRate</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1347"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_refreshRate;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a072b1875861a070e5c5339bc89b85671" refkind="member"><highlight class="normal">QSize<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a072b1875861a070e5c5339bc89b85671" kindref="member">WaylandOutputDeviceV2Mode::size</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1352"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_size;</highlight></codeline>
<codeline lineno="1354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a7527760d1d278551b6e3bb55232246f8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a7527760d1d278551b6e3bb55232246f8" kindref="member">WaylandOutputDeviceV2Mode::preferred</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1357"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_preferred;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a536fa51e79adabd3e16fa10335e98369" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a536fa51e79adabd3e16fa10335e98369" kindref="member">WaylandOutputDeviceV2Mode::operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a360b90b44dd03989f66ab8f06df64488" kindref="member">WaylandOutputDeviceV2Mode</ref><sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1362"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_size<sp/>==<sp/>other.m_size<sp/>&amp;&amp;<sp/>m_refreshRate<sp/>==<sp/>other.m_refreshRate<sp/>&amp;&amp;<sp/>m_preferred<sp/>==<sp/>other.m_preferred;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1aa2ca8f0a5f7c26b5d345c3022c96a7f9" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a360b90b44dd03989f66ab8f06df64488" kindref="member">WaylandOutputDeviceV2Mode</ref><sp/>*<ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1aa2ca8f0a5f7c26b5d345c3022c96a7f9" kindref="member">WaylandOutputDeviceV2Mode::get</ref>(struct<sp/>::kde_output_device_mode_v2<sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mode<sp/>=<sp/>QtWayland::kde_output_device_mode_v2::fromObject(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a360b90b44dd03989f66ab8f06df64488" kindref="member">WaylandOutputDeviceV2Mode</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(mode);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1aa122cc8307e5e0aa472f4f532185ef2c" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1aa122cc8307e5e0aa472f4f532185ef2c" kindref="member">WaylandOutputDeviceV2::WaylandOutputDeviceV2</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>QObject()</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>kde_output_device_v2()</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_id(<ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a627cad3540e95622d83afb30553e8498" kindref="member">id</ref>)</highlight></codeline>
<codeline lineno="1376"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a9665b961e4d2d774b2b77cb9c763827e" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a9665b961e4d2d774b2b77cb9c763827e" kindref="member">WaylandOutputDeviceV2::~WaylandOutputDeviceV2</ref>()</highlight></codeline>
<codeline lineno="1380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/>qDeleteAll(m_modes);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>kde_output_device_v2_destroy(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="1384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a48befc1af864f12484ab95ad270c6ed7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a48befc1af864f12484ab95ad270c6ed7" kindref="member">WaylandOutputDeviceV2::kde_output_device_v2_geometry</ref>(int32_t<sp/>x,</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>y,</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>physical_width,</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>physical_height,</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>subpixel,</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>&amp;make,</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a44b48e185abab9248ac89513df82236c" kindref="member">model</ref>,</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>transform)</highlight></codeline>
<codeline lineno="1394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pos<sp/>=<sp/>QPoint(x,<sp/>y);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/>m_physicalSize<sp/>=<sp/>QSize(physical_width,<sp/>physical_height);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/>m_subpixel<sp/>=<sp/>subpixel;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>m_manufacturer<sp/>=<sp/>make;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>m_model<sp/>=<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a44b48e185abab9248ac89513df82236c" kindref="member">model</ref>;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>m_transform<sp/>=<sp/>transform;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1ae8feb35183eb18973ee6c31d6f54ebf2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1ae8feb35183eb18973ee6c31d6f54ebf2" kindref="member">WaylandOutputDeviceV2::kde_output_device_v2_current_mode</ref>(struct<sp/>::kde_output_device_mode_v2<sp/>*mode)</highlight></codeline>
<codeline lineno="1404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m<sp/>=<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1aa2ca8f0a5f7c26b5d345c3022c96a7f9" kindref="member">WaylandOutputDeviceV2Mode::get</ref>(mode);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*m<sp/>==<sp/>*m_mode)<sp/>{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unchanged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mode<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a4a5d1be79c4cae7085a630a2fc7ec2c8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a4a5d1be79c4cae7085a630a2fc7ec2c8" kindref="member">WaylandOutputDeviceV2::kde_output_device_v2_mode</ref>(struct<sp/>::kde_output_device_mode_v2<sp/>*mode)</highlight></codeline>
<codeline lineno="1415"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode" kindref="compound">WaylandOutputDeviceV2Mode</ref><sp/>*m<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode" kindref="compound">WaylandOutputDeviceV2Mode</ref>(mode);</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>mode<sp/>sent<sp/>is<sp/>the<sp/>current<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mode<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/>m_modes.append(m);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(m,<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode_1a7e764cde35d341984c24543c816a36cf" kindref="member">WaylandOutputDeviceV2Mode::removed</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m]()<sp/>{</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_modes.removeOne(m);</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_mode<sp/>==<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_modes.isEmpty())<sp/>{</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_mode<sp/>=<sp/>m_modes.first();</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>was<sp/>last<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qFatal(</highlight><highlight class="stringliteral">&quot;KWaylandBackend:<sp/>no<sp/>output<sp/>modes<sp/>available<sp/>anymore,<sp/>this<sp/>seems<sp/>like<sp/>a<sp/>compositor<sp/>bug&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight></codeline>
<codeline lineno="1436" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a8ae7f1adc14b41b810503f3532222acf" refkind="member"><highlight class="normal">QString<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a8ae7f1adc14b41b810503f3532222acf" kindref="member">WaylandOutputDeviceV2::modeId</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1437"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QString::number(m_modes.indexOf(m_mode));</highlight></codeline>
<codeline lineno="1439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode" kindref="compound">WaylandOutputDeviceV2Mode</ref><sp/>*WaylandOutputDeviceV2::deviceModeFromId(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>modeId)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1442"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_modes.at(<ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a8ae7f1adc14b41b810503f3532222acf" kindref="member">modeId</ref>);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal">QString<sp/>WaylandOutputDeviceV2::modeName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WaylandOutputDeviceV2Mode<sp/>*m)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1447"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QString::number(m-&gt;size().width())<sp/>+<sp/>QLatin1Char(</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">)<sp/>+<sp/>QString::number(m-&gt;size().height())<sp/>+<sp/>QLatin1Char(</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>QString::number(qRound(m-&gt;refreshRate()<sp/>/<sp/>1000.0));</highlight></codeline>
<codeline lineno="1450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a910c1ecd526fa8666f1a3ce54d30bf90" refkind="member"><highlight class="normal">QString<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a910c1ecd526fa8666f1a3ce54d30bf90" kindref="member">WaylandOutputDeviceV2::name</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1453"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;%1<sp/>%2&quot;</highlight><highlight class="normal">).arg(m_manufacturer,<sp/>m_model);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457" refid="namespace_k_win_1_1_test_1aca28cd61cb4bfd29e61f76cc2eb1736d" refkind="member"><highlight class="normal">QDebug<sp/><ref refid="namespace_k_win_1_1_test_1aca28cd61cb4bfd29e61f76cc2eb1736d" kindref="member">operator&lt;&lt;</ref>(QDebug<sp/>dbg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2" kindref="compound">WaylandOutputDeviceV2</ref><sp/>*output)</highlight></codeline>
<codeline lineno="1458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/>dbg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;WaylandOutput(Id:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>output-&gt;<ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a627cad3540e95622d83afb30553e8498" kindref="member">id</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Name:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>QString(output-&gt;<ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a421702495cf785798034dfbe9cc88070" kindref="member">manufacturer</ref>()<sp/>+<sp/>QLatin1Char(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>+<sp/>output-&gt;<ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a44b48e185abab9248ac89513df82236c" kindref="member">model</ref>())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dbg;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1ae63860a0c9bbb5d200c54825fb43165d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1ae63860a0c9bbb5d200c54825fb43165d" kindref="member">WaylandOutputDeviceV2::kde_output_device_v2_done</ref>()</highlight></codeline>
<codeline lineno="1464"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a5720da06dfe9cd7e1ceb2e057c12b42d" kindref="member">done</ref>();</highlight></codeline>
<codeline lineno="1466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a36ab6295620505bfe45dcb654479b5f0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a36ab6295620505bfe45dcb654479b5f0" kindref="member">WaylandOutputDeviceV2::kde_output_device_v2_scale</ref>(wl_fixed_t<sp/>factor)</highlight></codeline>
<codeline lineno="1469"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>m_factor<sp/>=<sp/>wl_fixed_to_double(factor);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a879d274b3415bdc686f8a5ec501cc12d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a879d274b3415bdc686f8a5ec501cc12d" kindref="member">WaylandOutputDeviceV2::kde_output_device_v2_edid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a4411b3c40f0ea6be116cffa585368179" kindref="member">edid</ref>)</highlight></codeline>
<codeline lineno="1474"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>m_edid<sp/>=<sp/>QByteArray::fromBase64(<ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a4411b3c40f0ea6be116cffa585368179" kindref="member">edid</ref>.toUtf8());</highlight></codeline>
<codeline lineno="1476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a7cf0e47936d450b512992f60e23f493d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a7cf0e47936d450b512992f60e23f493d" kindref="member">WaylandOutputDeviceV2::kde_output_device_v2_enabled</ref>(int32_t<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1ae31d0b7b99f22ae28de2294526ca60f1" kindref="member">enabled</ref>)</highlight></codeline>
<codeline lineno="1479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_enabled<sp/>!=<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1ae31d0b7b99f22ae28de2294526ca60f1" kindref="member">enabled</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_enabled<sp/>=<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1ae31d0b7b99f22ae28de2294526ca60f1" kindref="member">enabled</ref>;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a2c96c324b9e4a5c9feff55a8bd668b08" kindref="member">enabledChanged</ref>();</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a08ec8bb5dc0b8fc7833af2c2d76ddd2a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a08ec8bb5dc0b8fc7833af2c2d76ddd2a" kindref="member">WaylandOutputDeviceV2::kde_output_device_v2_uuid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>&amp;uuid)</highlight></codeline>
<codeline lineno="1487"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>m_uuid<sp/>=<sp/>uuid;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1ad4172622475d72ad8033427f226e8bd4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1ad4172622475d72ad8033427f226e8bd4" kindref="member">WaylandOutputDeviceV2::kde_output_device_v2_serial_number</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>&amp;serialNumber)</highlight></codeline>
<codeline lineno="1492"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/>m_serialNumber<sp/>=<sp/>serialNumber;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight></codeline>
<codeline lineno="1496" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a289a93797ec9174612eeb208b4013f38" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a289a93797ec9174612eeb208b4013f38" kindref="member">WaylandOutputDeviceV2::kde_output_device_v2_eisa_id</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>&amp;eisaId)</highlight></codeline>
<codeline lineno="1497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/>m_eisaId<sp/>=<sp/>eisaId;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a388126afa9a85a4a012401eb1bf32a75" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a388126afa9a85a4a012401eb1bf32a75" kindref="member">WaylandOutputDeviceV2::kde_output_device_v2_capabilities</ref>(uint32_t<sp/>flags)</highlight></codeline>
<codeline lineno="1502"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>m_flags<sp/>=<sp/>flags;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a62e828ae6886ae30376324892977aa64" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a62e828ae6886ae30376324892977aa64" kindref="member">WaylandOutputDeviceV2::kde_output_device_v2_overscan</ref>(uint32_t<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a6f0a3dcc63c7d11ad659d908f4aa55d8" kindref="member">overscan</ref>)</highlight></codeline>
<codeline lineno="1507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>m_overscan<sp/>=<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a6f0a3dcc63c7d11ad659d908f4aa55d8" kindref="member">overscan</ref>;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1ada2f8c806c4f6ad1614cd310c84c4b18" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1ada2f8c806c4f6ad1614cd310c84c4b18" kindref="member">WaylandOutputDeviceV2::kde_output_device_v2_vrr_policy</ref>(uint32_t<sp/>vrr_policy)</highlight></codeline>
<codeline lineno="1512"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vrr_policy<sp/>=<sp/>vrr_policy;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight></codeline>
<codeline lineno="1516" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1ac1409fcb833cf2a23e362e59956b924a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1ac1409fcb833cf2a23e362e59956b924a" kindref="member">WaylandOutputDeviceV2::kde_output_device_v2_rgb_range</ref>(uint32_t<sp/>rgb_range)</highlight></codeline>
<codeline lineno="1517"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>m_rgbRange<sp/>=<sp/>rgb_range;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a4411b3c40f0ea6be116cffa585368179" refkind="member"><highlight class="normal">QByteArray<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a4411b3c40f0ea6be116cffa585368179" kindref="member">WaylandOutputDeviceV2::edid</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1522"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_edid;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight></codeline>
<codeline lineno="1526" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1ae31d0b7b99f22ae28de2294526ca60f1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1ae31d0b7b99f22ae28de2294526ca60f1" kindref="member">WaylandOutputDeviceV2::enabled</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1527"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_enabled;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight></codeline>
<codeline lineno="1531" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a627cad3540e95622d83afb30553e8498" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a627cad3540e95622d83afb30553e8498" kindref="member">WaylandOutputDeviceV2::id</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1532"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_id;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight></codeline>
<codeline lineno="1536" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a14e637a859ba76de441731146b8e1b3c" refkind="member"><highlight class="normal">qreal<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a14e637a859ba76de441731146b8e1b3c" kindref="member">WaylandOutputDeviceV2::scale</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1537"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_factor;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a421702495cf785798034dfbe9cc88070" refkind="member"><highlight class="normal">QString<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a421702495cf785798034dfbe9cc88070" kindref="member">WaylandOutputDeviceV2::manufacturer</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1542"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_manufacturer;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight></codeline>
<codeline lineno="1546" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a44b48e185abab9248ac89513df82236c" refkind="member"><highlight class="normal">QString<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a44b48e185abab9248ac89513df82236c" kindref="member">WaylandOutputDeviceV2::model</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1547"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_model;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a4012ff6bf621015e05e169a5e33db43b" refkind="member"><highlight class="normal">QPoint<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a4012ff6bf621015e05e169a5e33db43b" kindref="member">WaylandOutputDeviceV2::globalPosition</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1552"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_pos;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1abedcba62d498e7071a66f23642c06052" refkind="member"><highlight class="normal">QSize<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1abedcba62d498e7071a66f23642c06052" kindref="member">WaylandOutputDeviceV2::pixelSize</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1557"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_mode-&gt;size();</highlight></codeline>
<codeline lineno="1559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1561" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1af63efbf08909c8f61bee56f7d24558da" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1af63efbf08909c8f61bee56f7d24558da" kindref="member">WaylandOutputDeviceV2::refreshRate</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1562"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_mode-&gt;refreshRate();</highlight></codeline>
<codeline lineno="1564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1af380c78ed8fcb357a23dfdecbb06e72a" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1af380c78ed8fcb357a23dfdecbb06e72a" kindref="member">WaylandOutputDeviceV2::vrrPolicy</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1567"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_vrr_policy;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight></codeline>
<codeline lineno="1571" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a6f0a3dcc63c7d11ad659d908f4aa55d8" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a6f0a3dcc63c7d11ad659d908f4aa55d8" kindref="member">WaylandOutputDeviceV2::overscan</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1572"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_overscan;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a8719df6653b923b7a61b2b8dce3f6167" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1a8719df6653b923b7a61b2b8dce3f6167" kindref="member">WaylandOutputDeviceV2::capabilities</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1577"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_flags;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581" refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1ae44d6175c61b5d32982535abe3e9a7e7" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_1ae44d6175c61b5d32982535abe3e9a7e7" kindref="member">WaylandOutputDeviceV2::rgbRange</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1582"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_rgbRange;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight></codeline>
<codeline lineno="1586" refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1ac54c2a834f0bcf34e4298588afb068d0" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1ac54c2a834f0bcf34e4298588afb068d0" kindref="member">VirtualInputDeviceTabletTool::VirtualInputDeviceTabletTool</ref>(QObject<sp/>*parent)</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_input_device_tablet_tool_1a4e2a3629348b17e570aa5afb398635f4" kindref="member">InputDeviceTabletTool</ref>(parent)</highlight></codeline>
<codeline lineno="1588"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591" refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1a88f8d371f92ca50dc724e354342cbf4f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1a88f8d371f92ca50dc724e354342cbf4f" kindref="member">VirtualInputDeviceTabletTool::setSerialId</ref>(quint64<sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1aac6748de28e00945d18f74c8be5a6d3c" kindref="member">serialId</ref>)</highlight></codeline>
<codeline lineno="1592"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/>m_serialId<sp/>=<sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1aac6748de28e00945d18f74c8be5a6d3c" kindref="member">serialId</ref>;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight></codeline>
<codeline lineno="1596" refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1a1679f3648046ed61f047517e8380f4f9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1a1679f3648046ed61f047517e8380f4f9" kindref="member">VirtualInputDeviceTabletTool::setUniqueId</ref>(quint64<sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1a2bc2ac7ea4acee4d2699e4322195d4cf" kindref="member">uniqueId</ref>)</highlight></codeline>
<codeline lineno="1597"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/>m_uniqueId<sp/>=<sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1a2bc2ac7ea4acee4d2699e4322195d4cf" kindref="member">uniqueId</ref>;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight></codeline>
<codeline lineno="1601" refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1ab6f28dd9adea4398bcd236785d1ce7e2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1ab6f28dd9adea4398bcd236785d1ce7e2" kindref="member">VirtualInputDeviceTabletTool::setType</ref>(<ref refid="class_k_win_1_1_input_device_tablet_tool_1adc0cf396bee4488bddb8c152be87b77e" kindref="member">Type</ref><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1ae8748e54a22e19483b3d5143c186296f" kindref="member">type</ref>)</highlight></codeline>
<codeline lineno="1602"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>m_type<sp/>=<sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1ae8748e54a22e19483b3d5143c186296f" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight></codeline>
<codeline lineno="1606" refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1a48a4f4d392597445a5d04390bc0fe370" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1a48a4f4d392597445a5d04390bc0fe370" kindref="member">VirtualInputDeviceTabletTool::setCapabilities</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QList&lt;Capability&gt;<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1a441c16249c5cadbc15d69b07542735fb" kindref="member">capabilities</ref>)</highlight></codeline>
<codeline lineno="1607"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/>m_capabilities<sp/>=<sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1a441c16249c5cadbc15d69b07542735fb" kindref="member">capabilities</ref>;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611" refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1aac6748de28e00945d18f74c8be5a6d3c" refkind="member"><highlight class="normal">quint64<sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1aac6748de28e00945d18f74c8be5a6d3c" kindref="member">VirtualInputDeviceTabletTool::serialId</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1612"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_serialId;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616" refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1a2bc2ac7ea4acee4d2699e4322195d4cf" refkind="member"><highlight class="normal">quint64<sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1a2bc2ac7ea4acee4d2699e4322195d4cf" kindref="member">VirtualInputDeviceTabletTool::uniqueId</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1617"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_uniqueId;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621" refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1ae8748e54a22e19483b3d5143c186296f" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_input_device_tablet_tool_1adc0cf396bee4488bddb8c152be87b77e" kindref="member">VirtualInputDeviceTabletTool::Type</ref><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1ae8748e54a22e19483b3d5143c186296f" kindref="member">VirtualInputDeviceTabletTool::type</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1622"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_type;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626" refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1a441c16249c5cadbc15d69b07542735fb" refkind="member"><highlight class="normal">QList&lt;VirtualInputDeviceTabletTool::Capability&gt;<sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool_1a441c16249c5cadbc15d69b07542735fb" kindref="member">VirtualInputDeviceTabletTool::capabilities</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1627"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_capabilities;</highlight></codeline>
<codeline lineno="1629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631" refid="class_k_win_1_1_test_1_1_virtual_input_device_1a50a608d9f666f55a0b4387185a0dc4a6" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1a50a608d9f666f55a0b4387185a0dc4a6" kindref="member">VirtualInputDevice::VirtualInputDevice</ref>(QObject<sp/>*parent)</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_input_device_1aa28bcff91a76e7c2b405dc6cc895cde6" kindref="member">InputDevice</ref>(parent)</highlight></codeline>
<codeline lineno="1633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636" refid="class_k_win_1_1_test_1_1_virtual_input_device_1a386d951316d4ee472af7e9c195471f66" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1a386d951316d4ee472af7e9c195471f66" kindref="member">VirtualInputDevice::setPointer</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set)</highlight></codeline>
<codeline lineno="1637"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pointer<sp/>=<sp/>set;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight></codeline>
<codeline lineno="1641" refid="class_k_win_1_1_test_1_1_virtual_input_device_1a25a5497e734e890c1c6139474ddd4721" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1a25a5497e734e890c1c6139474ddd4721" kindref="member">VirtualInputDevice::setKeyboard</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set)</highlight></codeline>
<codeline lineno="1642"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/>m_keyboard<sp/>=<sp/>set;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight></codeline>
<codeline lineno="1646" refid="class_k_win_1_1_test_1_1_virtual_input_device_1abf97a37fb11ede51f256cc6108006a9c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1abf97a37fb11ede51f256cc6108006a9c" kindref="member">VirtualInputDevice::setTouch</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set)</highlight></codeline>
<codeline lineno="1647"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>m_touch<sp/>=<sp/>set;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651" refid="class_k_win_1_1_test_1_1_virtual_input_device_1a3e48029ad3db3d17922c8d9214f65c5b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1a3e48029ad3db3d17922c8d9214f65c5b" kindref="member">VirtualInputDevice::setLidSwitch</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set)</highlight></codeline>
<codeline lineno="1652"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>m_lidSwitch<sp/>=<sp/>set;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656" refid="class_k_win_1_1_test_1_1_virtual_input_device_1a1d51e9e0444a37e228a534db57137fba" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1a1d51e9e0444a37e228a534db57137fba" kindref="member">VirtualInputDevice::setTabletPad</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set)</highlight></codeline>
<codeline lineno="1657"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>m_tabletPad<sp/>=<sp/>set;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661" refid="class_k_win_1_1_test_1_1_virtual_input_device_1aa84654073d8c42c02e4c7193dfb57a66" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1aa84654073d8c42c02e4c7193dfb57a66" kindref="member">VirtualInputDevice::setTabletTool</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set)</highlight></codeline>
<codeline lineno="1662"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>m_tabletTool<sp/>=<sp/>set;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight></codeline>
<codeline lineno="1666" refid="class_k_win_1_1_test_1_1_virtual_input_device_1a442992c660ab726f6f9dcf32d0838d15" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1a442992c660ab726f6f9dcf32d0838d15" kindref="member">VirtualInputDevice::setName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1a6f3748cc42d399021a43d34670740cb7" kindref="member">name</ref>)</highlight></codeline>
<codeline lineno="1667"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>m_name<sp/>=<sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1a6f3748cc42d399021a43d34670740cb7" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671" refid="class_k_win_1_1_test_1_1_virtual_input_device_1a9aff4e09165f4b3c3985dfa0a4468abd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1a9aff4e09165f4b3c3985dfa0a4468abd" kindref="member">VirtualInputDevice::setGroup</ref>(uintptr_t<sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1a4f4d267885abb3156cf933885270fcb7" kindref="member">group</ref>)</highlight></codeline>
<codeline lineno="1672"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/>m_group<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1a4f4d267885abb3156cf933885270fcb7" kindref="member">group</ref>);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1676" refid="class_k_win_1_1_test_1_1_virtual_input_device_1a6f3748cc42d399021a43d34670740cb7" refkind="member"><highlight class="normal">QString<sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1a6f3748cc42d399021a43d34670740cb7" kindref="member">VirtualInputDevice::name</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1677"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_name;</highlight></codeline>
<codeline lineno="1679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight></codeline>
<codeline lineno="1681" refid="class_k_win_1_1_test_1_1_virtual_input_device_1a4f4d267885abb3156cf933885270fcb7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1a4f4d267885abb3156cf933885270fcb7" kindref="member">VirtualInputDevice::group</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1682"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_group;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight></codeline>
<codeline lineno="1686" refid="class_k_win_1_1_test_1_1_virtual_input_device_1ac13462f41e0738d1454ef821bec45a5b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1ac13462f41e0738d1454ef821bec45a5b" kindref="member">VirtualInputDevice::isEnabled</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1687"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight></codeline>
<codeline lineno="1691" refid="class_k_win_1_1_test_1_1_virtual_input_device_1aba2f721efc74dffefc32b251eebb4a23" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1aba2f721efc74dffefc32b251eebb4a23" kindref="member">VirtualInputDevice::setEnabled</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enabled)</highlight></codeline>
<codeline lineno="1692"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight></codeline>
<codeline lineno="1695" refid="class_k_win_1_1_test_1_1_virtual_input_device_1a665d98da8138dfcb06c27c4cca5913c6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1a665d98da8138dfcb06c27c4cca5913c6" kindref="member">VirtualInputDevice::isKeyboard</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1696"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_keyboard;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700" refid="class_k_win_1_1_test_1_1_virtual_input_device_1a66ff3b8df5f1ce8b418135093471ce60" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1a66ff3b8df5f1ce8b418135093471ce60" kindref="member">VirtualInputDevice::isPointer</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1701"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_pointer;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight></codeline>
<codeline lineno="1705" refid="class_k_win_1_1_test_1_1_virtual_input_device_1a2a21b2a640ad9a5e00bc7257dcd0c90a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1a2a21b2a640ad9a5e00bc7257dcd0c90a" kindref="member">VirtualInputDevice::isTouchpad</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1706"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight></codeline>
<codeline lineno="1710" refid="class_k_win_1_1_test_1_1_virtual_input_device_1a6c87524855e571069d4f365c93ad04e7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1a6c87524855e571069d4f365c93ad04e7" kindref="member">VirtualInputDevice::isTouch</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1711"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_touch;</highlight></codeline>
<codeline lineno="1713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight></codeline>
<codeline lineno="1715" refid="class_k_win_1_1_test_1_1_virtual_input_device_1a5a2bb76b394a7de316e0986db025309b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1a5a2bb76b394a7de316e0986db025309b" kindref="member">VirtualInputDevice::isTabletTool</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1716"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_tabletTool;</highlight></codeline>
<codeline lineno="1718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight></codeline>
<codeline lineno="1720" refid="class_k_win_1_1_test_1_1_virtual_input_device_1acefedd9d4710491e256f43b1e8239763" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1acefedd9d4710491e256f43b1e8239763" kindref="member">VirtualInputDevice::isTabletPad</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1721"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_tabletPad;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725" refid="class_k_win_1_1_test_1_1_virtual_input_device_1a47b9ccb46b84f453534f92179da9a081" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1a47b9ccb46b84f453534f92179da9a081" kindref="member">VirtualInputDevice::isTabletModeSwitch</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1726"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730" refid="class_k_win_1_1_test_1_1_virtual_input_device_1ad2943a9ef2fb73e84726de04fd0eb55f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_test_1_1_virtual_input_device_1ad2943a9ef2fb73e84726de04fd0eb55f" kindref="member">VirtualInputDevice::isLidSwitch</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1731"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_lidSwitch;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight></codeline>
<codeline lineno="1735" refid="class_k_win_1_1_test_1_1_color_manager_v1_1a33f73cca7e3bd8a8afefa5a17f6223ea" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_color_manager_v1_1a33f73cca7e3bd8a8afefa5a17f6223ea" kindref="member">ColorManagerV1::ColorManagerV1</ref>(::wl_registry<sp/>*registry,<sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>)</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_qt_wayland" kindref="compound">QtWayland</ref>::wp_color_manager_v1(registry,<sp/>id,<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>)</highlight></codeline>
<codeline lineno="1737"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight></codeline>
<codeline lineno="1740" refid="class_k_win_1_1_test_1_1_color_manager_v1_1a31b36a79ca6ed3f7132fafc5622a0367" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_test_1_1_color_manager_v1_1a31b36a79ca6ed3f7132fafc5622a0367" kindref="member">ColorManagerV1::~ColorManagerV1</ref>()</highlight></codeline>
<codeline lineno="1741"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/>wp_color_manager_v1_destroy(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="1743"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight></codeline>
<codeline lineno="1745" refid="namespace_k_win_1_1_test_1a24e61eb6fba767f564d715bbae7a2e09" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a24e61eb6fba767f564d715bbae7a2e09" kindref="member">keyboardKeyPressed</ref>(quint32<sp/>key,<sp/>quint32<sp/>time)</highlight></codeline>
<codeline lineno="1746"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>virtualKeyboard<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_test_application" kindref="compound">WaylandTestApplication</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kwinApp())-&gt;virtualKeyboard();</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>virtualKeyboard-&gt;keyChanged(key,<sp/><ref refid="namespace_k_win_1a01355afe201da93e2da84b64923a02f1ad78a68f6a85421ae121c2cb5b73a1040" kindref="member">KeyboardKeyState::Pressed</ref>,<sp/>std::chrono::milliseconds(time),<sp/>virtualKeyboard);</highlight></codeline>
<codeline lineno="1749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight></codeline>
<codeline lineno="1751" refid="namespace_k_win_1_1_test_1a0e41594af5bb5f89fd58919de458c7c5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a0e41594af5bb5f89fd58919de458c7c5" kindref="member">keyboardKeyReleased</ref>(quint32<sp/>key,<sp/>quint32<sp/>time)</highlight></codeline>
<codeline lineno="1752"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>virtualKeyboard<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_test_application" kindref="compound">WaylandTestApplication</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kwinApp())-&gt;virtualKeyboard();</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>virtualKeyboard-&gt;keyChanged(key,<sp/><ref refid="namespace_k_win_1a01355afe201da93e2da84b64923a02f1aea1e34304a5d8ffa7c9b0ed8ede4ef1a" kindref="member">KeyboardKeyState::Released</ref>,<sp/>std::chrono::milliseconds(time),<sp/>virtualKeyboard);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight></codeline>
<codeline lineno="1757" refid="namespace_k_win_1_1_test_1a70eddb451bb36cb91ad9190b4df265ae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a70eddb451bb36cb91ad9190b4df265ae" kindref="member">pointerAxisHorizontal</ref>(qreal<sp/>delta,<sp/>quint32<sp/>time,<sp/>qint32<sp/>discreteDelta,<sp/><ref refid="namespace_k_win_1a143704533be3f7be8a43b2b962600248" kindref="member">PointerAxisSource</ref><sp/>source)</highlight></codeline>
<codeline lineno="1758"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>virtualPointer<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_test_application" kindref="compound">WaylandTestApplication</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kwinApp())-&gt;virtualPointer();</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>virtualPointer-&gt;pointerAxisChanged(<ref refid="namespace_k_win_1aec4516626e95b6dc22c614c769a43590ac1b5fa03ecdb95d4a45dd1c40b02527f" kindref="member">PointerAxis::Horizontal</ref>,<sp/>delta,<sp/>discreteDelta,<sp/>source,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>std::chrono::milliseconds(time),<sp/>virtualPointer);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>virtualPointer-&gt;pointerFrame(virtualPointer);</highlight></codeline>
<codeline lineno="1762"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight></codeline>
<codeline lineno="1764" refid="namespace_k_win_1_1_test_1af420d2992ffcd40de8c3f31a69f71ade" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1af420d2992ffcd40de8c3f31a69f71ade" kindref="member">pointerAxisVertical</ref>(qreal<sp/>delta,<sp/>quint32<sp/>time,<sp/>qint32<sp/>discreteDelta,<sp/><ref refid="namespace_k_win_1a143704533be3f7be8a43b2b962600248" kindref="member">PointerAxisSource</ref><sp/>source)</highlight></codeline>
<codeline lineno="1765"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>virtualPointer<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_test_application" kindref="compound">WaylandTestApplication</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kwinApp())-&gt;virtualPointer();</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>virtualPointer-&gt;pointerAxisChanged(<ref refid="namespace_k_win_1aec4516626e95b6dc22c614c769a43590a06ce2a25e5d12c166a36f654dbea6012" kindref="member">PointerAxis::Vertical</ref>,<sp/>delta,<sp/>discreteDelta,<sp/>source,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>std::chrono::milliseconds(time),<sp/>virtualPointer);</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>virtualPointer-&gt;pointerFrame(virtualPointer);</highlight></codeline>
<codeline lineno="1769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771" refid="namespace_k_win_1_1_test_1a7ed1822cd70b207b310b8b892241d15e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a7ed1822cd70b207b310b8b892241d15e" kindref="member">pointerButtonPressed</ref>(quint32<sp/>button,<sp/>quint32<sp/>time)</highlight></codeline>
<codeline lineno="1772"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>virtualPointer<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_test_application" kindref="compound">WaylandTestApplication</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kwinApp())-&gt;virtualPointer();</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>virtualPointer-&gt;pointerButtonChanged(button,<sp/><ref refid="namespace_k_win_1af04c7f9798b123fe6f74415788dd38d3ad78a68f6a85421ae121c2cb5b73a1040" kindref="member">PointerButtonState::Pressed</ref>,<sp/>std::chrono::milliseconds(time),<sp/>virtualPointer);</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>virtualPointer-&gt;pointerFrame(virtualPointer);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778" refid="namespace_k_win_1_1_test_1abc9def44c9309a5e696d48288462bd08" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1abc9def44c9309a5e696d48288462bd08" kindref="member">pointerButtonReleased</ref>(quint32<sp/>button,<sp/>quint32<sp/>time)</highlight></codeline>
<codeline lineno="1779"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>virtualPointer<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_test_application" kindref="compound">WaylandTestApplication</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kwinApp())-&gt;virtualPointer();</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>virtualPointer-&gt;pointerButtonChanged(button,<sp/><ref refid="namespace_k_win_1af04c7f9798b123fe6f74415788dd38d3aea1e34304a5d8ffa7c9b0ed8ede4ef1a" kindref="member">PointerButtonState::Released</ref>,<sp/>std::chrono::milliseconds(time),<sp/>virtualPointer);</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>virtualPointer-&gt;pointerFrame(virtualPointer);</highlight></codeline>
<codeline lineno="1783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785" refid="namespace_k_win_1_1_test_1a86e49856d56b03d329f477b0df28cec2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a86e49856d56b03d329f477b0df28cec2" kindref="member">pointerMotion</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QPointF<sp/>&amp;position,<sp/>quint32<sp/>time)</highlight></codeline>
<codeline lineno="1786"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>virtualPointer<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_test_application" kindref="compound">WaylandTestApplication</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kwinApp())-&gt;virtualPointer();</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>virtualPointer-&gt;pointerMotionAbsolute(position,<sp/>std::chrono::milliseconds(time),<sp/>virtualPointer);</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>virtualPointer-&gt;pointerFrame(virtualPointer);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight></codeline>
<codeline lineno="1792" refid="namespace_k_win_1_1_test_1aa213f799df23188372b414aceb5bc16c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1aa213f799df23188372b414aceb5bc16c" kindref="member">pointerMotionRelative</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QPointF<sp/>&amp;delta,<sp/>quint32<sp/>time)</highlight></codeline>
<codeline lineno="1793"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>virtualPointer<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_test_application" kindref="compound">WaylandTestApplication</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kwinApp())-&gt;virtualPointer();</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>virtualPointer-&gt;pointerMotion(delta,<sp/>delta,<sp/>std::chrono::milliseconds(time),<sp/>virtualPointer);</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>virtualPointer-&gt;pointerFrame(virtualPointer);</highlight></codeline>
<codeline lineno="1797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799" refid="namespace_k_win_1_1_test_1a2207bfe1aedfab2e4366690c842d04b2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a2207bfe1aedfab2e4366690c842d04b2" kindref="member">touchCancel</ref>()</highlight></codeline>
<codeline lineno="1800"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>virtualTouch<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_test_application" kindref="compound">WaylandTestApplication</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kwinApp())-&gt;virtualTouch();</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>virtualTouch-&gt;touchCanceled(virtualTouch);</highlight></codeline>
<codeline lineno="1803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight></codeline>
<codeline lineno="1805" refid="namespace_k_win_1_1_test_1a23de04a19c3519614786ab986c0c1e7c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a23de04a19c3519614786ab986c0c1e7c" kindref="member">touchDown</ref>(qint32<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QPointF<sp/>&amp;pos,<sp/>quint32<sp/>time)</highlight></codeline>
<codeline lineno="1806"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>virtualTouch<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_test_application" kindref="compound">WaylandTestApplication</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kwinApp())-&gt;virtualTouch();</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>virtualTouch-&gt;touchDown(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>pos,<sp/>std::chrono::milliseconds(time),<sp/>virtualTouch);</highlight></codeline>
<codeline lineno="1809"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight></codeline>
<codeline lineno="1811" refid="namespace_k_win_1_1_test_1a374744d98acd1329e4133c7ab30a1cb4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a374744d98acd1329e4133c7ab30a1cb4" kindref="member">touchMotion</ref>(qint32<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QPointF<sp/>&amp;pos,<sp/>quint32<sp/>time)</highlight></codeline>
<codeline lineno="1812"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>virtualTouch<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_test_application" kindref="compound">WaylandTestApplication</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kwinApp())-&gt;virtualTouch();</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>virtualTouch-&gt;touchMotion(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>pos,<sp/>std::chrono::milliseconds(time),<sp/>virtualTouch);</highlight></codeline>
<codeline lineno="1815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight></codeline>
<codeline lineno="1817" refid="namespace_k_win_1_1_test_1abe1cb34b00c3dce9daa8ba37ce7c402b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1abe1cb34b00c3dce9daa8ba37ce7c402b" kindref="member">touchUp</ref>(qint32<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>quint32<sp/>time)</highlight></codeline>
<codeline lineno="1818"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>virtualTouch<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_test_application" kindref="compound">WaylandTestApplication</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kwinApp())-&gt;virtualTouch();</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>virtualTouch-&gt;touchUp(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>std::chrono::milliseconds(time),<sp/>virtualTouch);</highlight></codeline>
<codeline lineno="1821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight></codeline>
<codeline lineno="1823" refid="namespace_k_win_1_1_test_1ae7850dc4af47e1a9b478c4a2df576a6c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1ae7850dc4af47e1a9b478c4a2df576a6c" kindref="member">tabletPadButtonPressed</ref>(quint32<sp/>button,<sp/>quint32<sp/>time)</highlight></codeline>
<codeline lineno="1824"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>virtualTabletPad<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_test_application" kindref="compound">WaylandTestApplication</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kwinApp())-&gt;virtualTabletPad();</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>virtualTabletPad-&gt;tabletPadButtonEvent(button,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>std::chrono::milliseconds(time),<sp/>virtualTabletPad);</highlight></codeline>
<codeline lineno="1827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight></codeline>
<codeline lineno="1829" refid="namespace_k_win_1_1_test_1af4d8699667d5f322ed303102aac15955" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1af4d8699667d5f322ed303102aac15955" kindref="member">tabletPadButtonReleased</ref>(quint32<sp/>button,<sp/>quint32<sp/>time)</highlight></codeline>
<codeline lineno="1830"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>virtualTabletPad<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_test_application" kindref="compound">WaylandTestApplication</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kwinApp())-&gt;virtualTabletPad();</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>virtualTabletPad-&gt;tabletPadButtonEvent(button,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>std::chrono::milliseconds(time),<sp/>virtualTabletPad);</highlight></codeline>
<codeline lineno="1833"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"></highlight></codeline>
<codeline lineno="1835" refid="namespace_k_win_1_1_test_1a4eee7a7f151fa9fbca3e968234190cd5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a4eee7a7f151fa9fbca3e968234190cd5" kindref="member">tabletToolButtonPressed</ref>(quint32<sp/>button,<sp/>quint32<sp/>time)</highlight></codeline>
<codeline lineno="1836"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tablet<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_test_application" kindref="compound">WaylandTestApplication</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kwinApp())-&gt;virtualTablet();</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tool<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_test_application" kindref="compound">WaylandTestApplication</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kwinApp())-&gt;virtualTabletTool();</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>tablet-&gt;tabletToolButtonEvent(button,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>tool,<sp/>std::chrono::milliseconds(time),<sp/>tablet);</highlight></codeline>
<codeline lineno="1840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight></codeline>
<codeline lineno="1842" refid="namespace_k_win_1_1_test_1abc4b212371ebf87d77b09442ddfba60b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1abc4b212371ebf87d77b09442ddfba60b" kindref="member">tabletToolButtonReleased</ref>(quint32<sp/>button,<sp/>quint32<sp/>time)</highlight></codeline>
<codeline lineno="1843"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tablet<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_test_application" kindref="compound">WaylandTestApplication</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kwinApp())-&gt;virtualTablet();</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tool<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_test_application" kindref="compound">WaylandTestApplication</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kwinApp())-&gt;virtualTabletTool();</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>tablet-&gt;tabletToolButtonEvent(button,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>tool,<sp/>std::chrono::milliseconds(time),<sp/>tablet);</highlight></codeline>
<codeline lineno="1847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight></codeline>
<codeline lineno="1849" refid="namespace_k_win_1_1_test_1a86fd3d965adff706d0732be23bce4018" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1_1_test_1a86fd3d965adff706d0732be23bce4018" kindref="member">tabletToolProximityEvent</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QPointF<sp/>&amp;pos,<sp/>qreal<sp/>xTilt,<sp/>qreal<sp/>yTilt,<sp/>qreal<sp/>rotation,<sp/>qreal<sp/>distance,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tipNear,<sp/>qreal<sp/>sliderPosition,<sp/>quint32<sp/>time)</highlight></codeline>
<codeline lineno="1850"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tablet<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_test_application" kindref="compound">WaylandTestApplication</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kwinApp())-&gt;virtualTablet();</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tool<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_test_application" kindref="compound">WaylandTestApplication</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kwinApp())-&gt;virtualTabletTool();</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_EMIT<sp/>tablet-&gt;tabletToolProximityEvent(pos,<sp/>xTilt,<sp/>yTilt,<sp/>rotation,<sp/>distance,<sp/>tipNear,<sp/>sliderPosition,<sp/>tool,<sp/>std::chrono::milliseconds(time),<sp/>tablet);</highlight></codeline>
<codeline lineno="1854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_helpers.moc&quot;</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="kwin/autotests/integration/test_helpers.cpp"/>
  </compounddef>
</doxygen>
