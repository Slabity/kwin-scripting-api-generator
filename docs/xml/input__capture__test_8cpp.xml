<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="input__capture__test_8cpp" kind="file" language="C++">
    <compoundname>input_capture_test.cpp</compoundname>
    <includes refid="input_8h" local="yes">input.h</includes>
    <includes refid="kwin__wayland__test_8h" local="yes">kwin_wayland_test.h</includes>
    <includes local="yes">main.h</includes>
    <includes refid="pluginmanager_8h" local="yes">pluginmanager.h</includes>
    <includes refid="wayland__server_8h" local="yes">wayland_server.h</includes>
    <includes local="no">KWayland/Client/keyboard.h</includes>
    <includes local="no">KWayland/Client/pointer.h</includes>
    <includes local="no">KWayland/Client/seat.h</includes>
    <includes local="no">QDBusConnection</includes>
    <includes local="no">QDBusMessage</includes>
    <includes local="no">QDBusReply</includes>
    <includes local="no">QDBusUnixFileDescriptor</includes>
    <includes local="no">QObject</includes>
    <includes local="no">QSignalSpy</includes>
    <includes local="no">QSocketNotifier</includes>
    <includes local="no">libei.h</includes>
    <includes local="no">linux/input-event-codes.h</includes>
    <includes local="yes">input_capture_test.moc</includes>
    <incdepgraph>
      <node id="1">
        <label>kwin/autotests/integration/input_capture_test.cpp</label>
        <link refid="input__capture__test_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>kwin_wayland_test.h</label>
        <link refid="kwin__wayland__test_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>core/inputdevice.h</label>
        <link refid="inputdevice_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>effect/globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>input.h</label>
        <link refid="input_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>pluginmanager.h</label>
        <link refid="pluginmanager_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>wayland_server.h</label>
        <link refid="wayland__server_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>KConfigWatcher</label>
      </node>
      <node id="43">
        <label>KPluginMetaData</label>
      </node>
      <node id="15">
        <label>KSharedConfig</label>
      </node>
      <node id="45">
        <label>KWayland/Client/keyboard.h</label>
      </node>
      <node id="46">
        <label>KWayland/Client/pointer.h</label>
      </node>
      <node id="47">
        <label>KWayland/Client/seat.h</label>
      </node>
      <node id="23">
        <label>KWayland/Client/surface.h</label>
      </node>
      <node id="6">
        <label>QCoreApplication</label>
      </node>
      <node id="48">
        <label>QDBusConnection</label>
      </node>
      <node id="49">
        <label>QDBusMessage</label>
      </node>
      <node id="50">
        <label>QDBusReply</label>
      </node>
      <node id="51">
        <label>QDBusUnixFileDescriptor</label>
      </node>
      <node id="42">
        <label>QHash</label>
      </node>
      <node id="7">
        <label>QImage</label>
      </node>
      <node id="12">
        <label>QObject</label>
      </node>
      <node id="8">
        <label>QPoint</label>
      </node>
      <node id="13">
        <label>QPointer</label>
      </node>
      <node id="16">
        <label>QSet</label>
      </node>
      <node id="21">
        <label>QSignalSpy</label>
      </node>
      <node id="52">
        <label>QSocketNotifier</label>
      </node>
      <node id="22">
        <label>QTest</label>
      </node>
      <node id="9">
        <label>QVariant</label>
      </node>
      <node id="10">
        <label>QVector2D</label>
      </node>
      <node id="3">
        <label>config-kwin.h</label>
      </node>
      <node id="17">
        <label>functional</label>
      </node>
      <node id="55">
        <label>input_capture_test.moc</label>
      </node>
      <node id="11">
        <label>kwin_export.h</label>
      </node>
      <node id="53">
        <label>libei.h</label>
      </node>
      <node id="54">
        <label>linux/input-event-codes.h</label>
      </node>
      <node id="19">
        <label>main.h</label>
      </node>
      <node id="24">
        <label>optional</label>
      </node>
      <node id="25">
        <label>qwayland-color-management-v1.h</label>
      </node>
      <node id="26">
        <label>qwayland-cursor-shape-v1.h</label>
      </node>
      <node id="27">
        <label>qwayland-fake-input.h</label>
      </node>
      <node id="28">
        <label>qwayland-fractional-scale-v1.h</label>
      </node>
      <node id="29">
        <label>qwayland-idle-inhibit-unstable-v1.h</label>
      </node>
      <node id="30">
        <label>qwayland-input-method-unstable-v1.h</label>
      </node>
      <node id="31">
        <label>qwayland-kde-output-device-v2.h</label>
      </node>
      <node id="32">
        <label>qwayland-kde-output-management-v2.h</label>
      </node>
      <node id="33">
        <label>qwayland-kde-screen-edge-v1.h</label>
      </node>
      <node id="34">
        <label>qwayland-security-context-v1.h</label>
      </node>
      <node id="35">
        <label>qwayland-text-input-unstable-v3.h</label>
      </node>
      <node id="36">
        <label>qwayland-wlr-layer-shell-unstable-v1.h</label>
      </node>
      <node id="37">
        <label>qwayland-xdg-decoration-unstable-v1.h</label>
      </node>
      <node id="38">
        <label>qwayland-xdg-dialog-v1.h</label>
      </node>
      <node id="39">
        <label>qwayland-xdg-shell.h</label>
      </node>
      <node id="40">
        <label>qwayland-zkde-screencast-unstable-v1.h</label>
      </node>
      <node id="20">
        <label>window.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_input_capture" prot="public">InputCapture</innerclass>
    <innerclass refid="class_test_input_capture" prot="public">TestInputCapture</innerclass>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="input__capture__test_8cpp_1a7d3100a8c2962a690e0f48d4fe151e17" prot="public" static="no" strong="yes">
        <type></type>
        <name>PortalCapabilities</name>
        <enumvalue id="input__capture__test_8cpp_1a7d3100a8c2962a690e0f48d4fe151e17a6ce4d85a628a88bbdb3ac24a8e5a9c2e" prot="public">
          <name>Keyboard</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="input__capture__test_8cpp_1a7d3100a8c2962a690e0f48d4fe151e17a61cf8510205077b6f5491d38cd44c0f7" prot="public">
          <name>Pointer</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="input__capture__test_8cpp_1a7d3100a8c2962a690e0f48d4fe151e17af0f31c9700c6b10d8a20dc487b2ae6a8" prot="public">
          <name>Touch</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="input__capture__test_8cpp_1a7d3100a8c2962a690e0f48d4fe151e17ab1c94ca2fbc3e78fc30069c8d0f01680" prot="public">
          <name>All</name>
          <initializer>= Keyboard | Pointer | Touch</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/input_capture_test.cpp" line="36" column="1" bodyfile="kwin/autotests/integration/input_capture_test.cpp" bodystart="36" bodyend="41"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="input__capture__test_8cpp_1a485d6ddd568caea0908934bfdb9fbadb" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString s_socketName</definition>
        <argsstring></argsstring>
        <name>s_socketName</name>
        <initializer>= QStringLiteral(&quot;wayland_test_kwin_input_capture=0&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/input_capture_test.cpp" line="31" column="22" bodyfile="kwin/autotests/integration/input_capture_test.cpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="input__capture__test_8cpp_1a693604855d271a06de78188fcfdbcc71" prot="public" static="yes" mutable="no">
        <type>QString</type>
        <definition>QString kwinInputCapturePath</definition>
        <argsstring></argsstring>
        <name>kwinInputCapturePath</name>
        <initializer>= QStringLiteral(&quot;/org/kde/KWin/EIS/InputCapture&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/input_capture_test.cpp" line="32" column="16" bodyfile="kwin/autotests/integration/input_capture_test.cpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="input__capture__test_8cpp_1a4bfc89ba5ad8b5e882cf13822c0627f6" prot="public" static="yes" mutable="no">
        <type>QString</type>
        <definition>QString kwinInputCaptureManagerInterface</definition>
        <argsstring></argsstring>
        <name>kwinInputCaptureManagerInterface</name>
        <initializer>= QStringLiteral(&quot;org.kde.KWin.EIS.InputCaptureManager&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/input_capture_test.cpp" line="33" column="16" bodyfile="kwin/autotests/integration/input_capture_test.cpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="input__capture__test_8cpp_1a05594308050f6fcbd903499159c1a790" prot="public" static="yes" mutable="no">
        <type>QString</type>
        <definition>QString kwinInputCaptureInterface</definition>
        <argsstring></argsstring>
        <name>kwinInputCaptureInterface</name>
        <initializer>= QStringLiteral(&quot;org.kde.KWin.EIS.InputCapture&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/input_capture_test.cpp" line="34" column="16" bodyfile="kwin/autotests/integration/input_capture_test.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2024<sp/>David<sp/>Redondo<sp/>&lt;kde@david-redondo&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>GPL-2.0-only<sp/>OR<sp/>GPL-3.0-only<sp/>OR<sp/>LicenseRef-KDE-Accepted-GPL</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="input_8h" kindref="compound">input.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="kwin__wayland__test_8h" kindref="compound">kwin_wayland_test.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;main.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pluginmanager_8h" kindref="compound">pluginmanager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wayland__server_8h" kindref="compound">wayland_server.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/keyboard.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/pointer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/seat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QDBusConnection&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QDBusMessage&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QDBusReply&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QDBusUnixFileDescriptor&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QObject&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QSignalSpy&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QSocketNotifier&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libei.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;linux/input-event-codes.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win" kindref="compound">KWin</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>s_socketName<sp/>=<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;wayland_test_kwin_input_capture=0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QString<sp/>kwinInputCapturePath<sp/>=<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;/org/kde/KWin/EIS/InputCapture&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QString<sp/>kwinInputCaptureManagerInterface<sp/>=<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;org.kde.KWin.EIS.InputCaptureManager&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QString<sp/>kwinInputCaptureInterface<sp/>=<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;org.kde.KWin.EIS.InputCapture&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="input__capture__test_8cpp_1a7d3100a8c2962a690e0f48d4fe151e17" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="input__capture__test_8cpp_1a7d3100a8c2962a690e0f48d4fe151e17" kindref="member">PortalCapabilities</ref><sp/>{</highlight></codeline>
<codeline lineno="37" refid="input__capture__test_8cpp_1a7d3100a8c2962a690e0f48d4fe151e17a6ce4d85a628a88bbdb3ac24a8e5a9c2e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="input__capture__test_8cpp_1a7d3100a8c2962a690e0f48d4fe151e17a6ce4d85a628a88bbdb3ac24a8e5a9c2e" kindref="member">Keyboard</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="38" refid="input__capture__test_8cpp_1a7d3100a8c2962a690e0f48d4fe151e17a61cf8510205077b6f5491d38cd44c0f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="input__capture__test_8cpp_1a7d3100a8c2962a690e0f48d4fe151e17a61cf8510205077b6f5491d38cd44c0f7" kindref="member">Pointer</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="39" refid="input__capture__test_8cpp_1a7d3100a8c2962a690e0f48d4fe151e17af0f31c9700c6b10d8a20dc487b2ae6a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="input__capture__test_8cpp_1a7d3100a8c2962a690e0f48d4fe151e17af0f31c9700c6b10d8a20dc487b2ae6a8" kindref="member">Touch</ref><sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="40" refid="input__capture__test_8cpp_1a7d3100a8c2962a690e0f48d4fe151e17ab1c94ca2fbc3e78fc30069c8d0f01680" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a254cd5c17a7c926651623f471e6906f6a3399351863470ca192583e47cec46977" kindref="member">All</ref><sp/>=<sp/><ref refid="input__capture__test_8cpp_1a7d3100a8c2962a690e0f48d4fe151e17a6ce4d85a628a88bbdb3ac24a8e5a9c2e" kindref="member">Keyboard</ref><sp/>|<sp/><ref refid="input__capture__test_8cpp_1a7d3100a8c2962a690e0f48d4fe151e17a61cf8510205077b6f5491d38cd44c0f7" kindref="member">Pointer</ref><sp/>|<sp/><ref refid="input__capture__test_8cpp_1a7d3100a8c2962a690e0f48d4fe151e17af0f31c9700c6b10d8a20dc487b2ae6a8" kindref="member">Touch</ref>,</highlight></codeline>
<codeline lineno="41"><highlight class="normal">};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="class_input_capture" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_input_capture_1a3d88d717f54097473885a1dc69d0d058" kindref="member">InputCapture</ref></highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="46" refid="class_input_capture_1a3d88d717f54097473885a1dc69d0d058" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_input_capture_1a3d88d717f54097473885a1dc69d0d058" kindref="member">InputCapture</ref>()</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>msg<sp/>=<sp/>QDBusMessage::createMethodCall(QDBusConnection::sessionBus().baseService(),<sp/>kwinInputCapturePath,<sp/>kwinInputCaptureManagerInterface,<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;addInputCapture&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/>static_cast&lt;int&gt;(<ref refid="input__capture__test_8cpp_1a7d3100a8c2962a690e0f48d4fe151e17ab1c94ca2fbc3e78fc30069c8d0f01680" kindref="member">PortalCapabilities::All</ref>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QDBusReply&lt;QDBusObjectPath&gt;<sp/>captureReply<sp/>=<sp/>QDBusConnection::sessionBus().call(msg);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY2(captureReply.isValid(),<sp/>QTest::toString(captureReply.error()));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_input_capture_1aca9f2cfb1801ce96aba64805dd0ad59d" kindref="member">dbusPath</ref><sp/>=<sp/>captureReply.value().path();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/>QDBusMessage::createMethodCall(QDBusConnection::sessionBus().baseService(),<sp/><ref refid="class_input_capture_1aca9f2cfb1801ce96aba64805dd0ad59d" kindref="member">dbusPath</ref>,<sp/>kwinInputCaptureInterface,<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;connectToEIS&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QDBusReply&lt;QDBusUnixFileDescriptor&gt;<sp/>eisReply<sp/>=<sp/>QDBusConnection::sessionBus().call(msg);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY2(eisReply.isValid(),<sp/>QTest::toString(eisReply.error()));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_input_capture_1ae69f21a0b1c903b2a87f56cb2036ba32" kindref="member">eifd</ref><sp/>=<sp/>eisReply.value().takeFileDescriptor();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QList&lt;QPair&lt;QPoint,<sp/>QPoint&gt;&gt;<sp/>barriers<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{0,<sp/>0},<sp/>{0,<sp/>1023}},</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{0,<sp/>0},<sp/>{1279,<sp/>0}},</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{1279,<sp/>0},<sp/>{1279,<sp/>1023}},</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{0,<sp/>1023},<sp/>{1279,<sp/>1023}},</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/>QDBusMessage::createMethodCall(QDBusConnection::sessionBus().baseService(),<sp/><ref refid="class_input_capture_1aca9f2cfb1801ce96aba64805dd0ad59d" kindref="member">dbusPath</ref>,<sp/>kwinInputCaptureInterface,<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;enable&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/>QVariant::fromValue(barriers);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QDBusReply&lt;void&gt;<sp/>enableReply<sp/>=<sp/>QDBusConnection::sessionBus().call(msg);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY2(enableReply.isValid(),<sp/>QTest::toString(enableReply.error()));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="class_input_capture_1a20102ba528771f4af903afd2ba203d1c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_input_capture_1a20102ba528771f4af903afd2ba203d1c" kindref="member">setupSuccessfully</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="72"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_input_capture_1ae69f21a0b1c903b2a87f56cb2036ba32" kindref="member">eifd</ref><sp/>!=<sp/>1<sp/>&amp;&amp;<sp/>!<ref refid="class_input_capture_1aca9f2cfb1801ce96aba64805dd0ad59d" kindref="member">dbusPath</ref>.isEmpty();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="class_input_capture_1ae69f21a0b1c903b2a87f56cb2036ba32" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_input_capture_1ae69f21a0b1c903b2a87f56cb2036ba32" kindref="member">eifd</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="77" refid="class_input_capture_1aca9f2cfb1801ce96aba64805dd0ad59d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>QString<sp/><ref refid="class_input_capture_1aca9f2cfb1801ce96aba64805dd0ad59d" kindref="member">dbusPath</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="class_test_input_capture" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_test_input_capture" kindref="compound">TestInputCapture</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QObject</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Q_SLOTS:</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initTestCase();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanup();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInputCapture_data();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInputCapture();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>disconnectingEiRemovesCapture();</highlight></codeline>
<codeline lineno="91"><highlight class="normal">};</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestInputCapture::init()</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1a36c6e87757c3c97858c55b650c9d304c" kindref="member">Test::setupWaylandConnection</ref>(<ref refid="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a25c40c519686f155291de96c60796f70" kindref="member">Test::AdditionalWaylandInterface::Seat</ref>));</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestInputCapture::cleanup()</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespace_k_win_1_1_test_1ab8d22dbd7b611aa83d13171c80dd821d" kindref="member">Test::waylandConnection</ref>())<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a12755bae9118cb958baf0efbd222d7c8" kindref="member">Test::destroyWaylandConnection</ref>();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestInputCapture::initTestCase()</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;init(s_socketName));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a1373c61710748fcde7e428e05bd5f2cb" kindref="member">Test::setOutputConfig</ref>({QRect(0,<sp/>0,<sp/>1280,<sp/>1024)});</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>kwinApp()-&gt;start();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(kwinApp()-&gt;pluginManager()-&gt;loadedPlugins().contains(</highlight><highlight class="stringliteral">&quot;eis&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestInputCapture::testInputCapture_data()</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;QPoint&gt;(</highlight><highlight class="stringliteral">&quot;mousePos&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;QPointF&gt;(</highlight><highlight class="stringliteral">&quot;delta&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;left&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>QPoint(0,<sp/>512)<sp/>&lt;&lt;<sp/>QPointF(-1,<sp/>0);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;up&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>QPoint(640,<sp/>0)<sp/>&lt;&lt;<sp/>QPointF(0,<sp/>-1);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;right&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>QPoint(1279,<sp/>512)<sp/>&lt;&lt;<sp/>QPointF(1,<sp/>0);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;down&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>QPoint(640,<sp/>1023)<sp/>&lt;&lt;<sp/>QPointF(0,<sp/>1);</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestInputCapture::testInputCapture()</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(QPoint,<sp/>mousePos);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(QPointF,<sp/>delta);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timestamp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1ab4cf52ccd596caf6af24eb259913c597" kindref="member">Test::waitForWaylandPointer</ref>());</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Keyboard&gt;<sp/>keyboard(<ref refid="namespace_k_win_1_1_test_1a5f6b6eee3f6e90f7c4693e06af67d91d" kindref="member">Test::waylandSeat</ref>()-&gt;createKeyboard());</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Pointer&gt;<sp/>pointer(<ref refid="namespace_k_win_1_1_test_1a5f6b6eee3f6e90f7c4693e06af67d91d" kindref="member">Test::waylandSeat</ref>()-&gt;createPointer());</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>surface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shellSurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get());</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>{1280,<sp/>1024},<sp/>Qt::cyan);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>InputCapture<sp/>capture;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!capture.<ref refid="class_input_capture_1a20102ba528771f4af903afd2ba203d1c" kindref="member">setupSuccessfully</ref>())<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a86e49856d56b03d329f477b0df28cec2" kindref="member">Test::pointerMotion</ref>(mousePos,<sp/>++timestamp);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1ab48f9c39f88089daf08aaa45759f7299" kindref="member">Test::waylandSync</ref>();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(keyboard-&gt;enteredSurface(),<sp/>surface.get());</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pointer-&gt;enteredSurface(),<sp/>surface.get());</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>motionSpy(pointer.get(),<sp/>&amp;KWayland::Client::Pointer::motion);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>buttonSpy(pointer.get(),<sp/>&amp;KWayland::Client::Pointer::buttonStateChanged);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>axisSpy(pointer.get(),<sp/>&amp;KWayland::Client::Pointer::axisChanged);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>keySpy(keyboard.get(),<sp/>&amp;KWayland::Client::Keyboard::keyChanged);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(motionSpy.isValid());</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(buttonSpy.isValid());</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(axisSpy.isValid());</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(keySpy.isValid());</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ei<sp/>=<sp/>ei_new_receiver(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>ei_setup_backend_fd(ei,<sp/>capture.<ref refid="class_input_capture_1ae69f21a0b1c903b2a87f56cb2036ba32" kindref="member">eifd</ref>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>QSocketNotifier<sp/>eiNotifier(ei_get_fd(ei),<sp/>QSocketNotifier::Read);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>eiReadableSpy(&amp;eiNotifier,<sp/>&amp;QSocketNotifier::activated);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numDevices<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(numDevices<sp/>!=<sp/>3<sp/>&amp;&amp;<sp/>eiReadableSpy.wait())<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_dispatch(ei);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>event<sp/>=<sp/>ei_get_event(ei))<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1a3223e96fea9ab917c25be94e2434013a" kindref="member">type</ref><sp/>=<sp/>ei_event_get_type(event))<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EI_EVENT_CONNECT:</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_EI_EVENT_SYNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EI_EVENT_SYNC:</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EI_EVENT_SEAT_ADDED:</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_seat_bind_capabilities(ei_event_get_seat(event),<sp/>EI_DEVICE_CAP_POINTER,<sp/>EI_DEVICE_CAP_POINTER_ABSOLUTE,<sp/>EI_DEVICE_CAP_KEYBOARD,<sp/>EI_DEVICE_CAP_TOUCH,<sp/>EI_DEVICE_CAP_SCROLL,<sp/>EI_DEVICE_CAP_BUTTON,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EI_EVENT_DEVICE_ADDED:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EI_EVENT_DEVICE_RESUMED:</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++numDevices;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qFatal()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unexpected<sp/>event:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespace_k_win_1a3223e96fea9ab917c25be94e2434013a" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_event_unref(event);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1aa213f799df23188372b414aceb5bc16c" kindref="member">Test::pointerMotionRelative</ref>(delta,<sp/>++timestamp);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1ab48f9c39f88089daf08aaa45759f7299" kindref="member">Test::waylandSync</ref>();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(motionSpy.empty());</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_dispatch(ei);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numDevices;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>ei_get_event(ei);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_get_type(event),<sp/>EI_EVENT_DEVICE_START_EMULATING);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_event_unref(event);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>ei_get_event(ei);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_get_type(event),<sp/>EI_EVENT_POINTER_MOTION);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_pointer_get_dx(event),<sp/>delta.x());</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_pointer_get_dy(event),<sp/>delta.y());</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_event_unref(event);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>ei_get_event(ei);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_get_type(event),<sp/>EI_EVENT_FRAME);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_event_unref(event);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a7ed1822cd70b207b310b8b892241d15e" kindref="member">Test::pointerButtonPressed</ref>(BTN_LEFT,<sp/>++timestamp);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1abc9def44c9309a5e696d48288462bd08" kindref="member">Test::pointerButtonReleased</ref>(BTN_LEFT,<sp/>++timestamp);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1ab48f9c39f88089daf08aaa45759f7299" kindref="member">Test::waylandSync</ref>();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(buttonSpy.empty());</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_dispatch(ei);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>ei_get_event(ei);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_get_type(event),<sp/>EI_EVENT_BUTTON_BUTTON);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_button_get_button(event),<sp/>BTN_LEFT);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_button_get_is_press(event),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_event_unref(event);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>ei_get_event(ei);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_get_type(event),<sp/>EI_EVENT_FRAME);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_event_unref(event);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>ei_get_event(ei);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_get_type(event),<sp/>EI_EVENT_BUTTON_BUTTON);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_button_get_button(event),<sp/>BTN_LEFT);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_button_get_is_press(event),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_event_unref(event);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>ei_get_event(ei);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_get_type(event),<sp/>EI_EVENT_FRAME);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_event_unref(event);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>ei_get_event(ei);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a70eddb451bb36cb91ad9190b4df265ae" kindref="member">Test::pointerAxisHorizontal</ref>(1,<sp/>++timestamp);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1ab48f9c39f88089daf08aaa45759f7299" kindref="member">Test::waylandSync</ref>();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(axisSpy.empty());</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_dispatch(ei);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>ei_get_event(ei);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_get_type(event),<sp/>EI_EVENT_SCROLL_DELTA);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_scroll_get_dx(event),<sp/>1);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_scroll_get_dy(event),<sp/>0);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_event_unref(event);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>ei_get_event(ei);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_get_type(event),<sp/>EI_EVENT_FRAME);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_event_unref(event);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a24e61eb6fba767f564d715bbae7a2e09" kindref="member">Test::keyboardKeyPressed</ref>(KEY_A,<sp/>++timestamp);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a0e41594af5bb5f89fd58919de458c7c5" kindref="member">Test::keyboardKeyReleased</ref>(KEY_A,<sp/>++timestamp);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1ab48f9c39f88089daf08aaa45759f7299" kindref="member">Test::waylandSync</ref>();</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(buttonSpy.empty());</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_dispatch(ei);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>ei_get_event(ei);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_get_type(event),<sp/>EI_EVENT_KEYBOARD_KEY);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_keyboard_get_key(event),<sp/>KEY_A);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_keyboard_get_key_is_press(event),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_event_unref(event);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>ei_get_event(ei);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_get_type(event),<sp/>EI_EVENT_FRAME);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_event_unref(event);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>ei_get_event(ei);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_get_type(event),<sp/>EI_EVENT_KEYBOARD_KEY);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_keyboard_get_key(event),<sp/>KEY_A);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_keyboard_get_key_is_press(event),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_event_unref(event);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>ei_get_event(ei);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(ei_event_get_type(event),<sp/>EI_EVENT_FRAME);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_event_unref(event);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>msg<sp/>=<sp/>QDBusMessage::createMethodCall(QDBusConnection::sessionBus().baseService(),<sp/>capture.<ref refid="class_input_capture_1aca9f2cfb1801ce96aba64805dd0ad59d" kindref="member">dbusPath</ref>,<sp/>kwinInputCaptureInterface,<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;release&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/>QVariant::fromValue(QPointF(1,<sp/>1))<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>QDBusReply&lt;void&gt;<sp/>releaseReply<sp/>=<sp/>QDBusConnection::sessionBus().call(msg);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY2(releaseReply.isValid(),<sp/>QTest::toString(releaseReply.error()));</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>()-&gt;globalPointer(),<sp/>QPoint(1,<sp/>1));</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(eiReadableSpy.wait());</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>eiReadableSpy.clear();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>ei_dispatch(ei);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Throw<sp/>away<sp/>the<sp/>disconnection<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>event<sp/>=<sp/>ei_get_event(ei))<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_event_unref(event);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a86e49856d56b03d329f477b0df28cec2" kindref="member">Test::pointerMotion</ref>({2,<sp/>2},<sp/>++timestamp);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a7ed1822cd70b207b310b8b892241d15e" kindref="member">Test::pointerButtonPressed</ref>(BTN_LEFT,<sp/>++timestamp);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1abc9def44c9309a5e696d48288462bd08" kindref="member">Test::pointerButtonReleased</ref>(BTN_LEFT,<sp/>++timestamp);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a70eddb451bb36cb91ad9190b4df265ae" kindref="member">Test::pointerAxisHorizontal</ref>(1,<sp/>++timestamp);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a24e61eb6fba767f564d715bbae7a2e09" kindref="member">Test::keyboardKeyPressed</ref>(KEY_A,<sp/>++timestamp);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a0e41594af5bb5f89fd58919de458c7c5" kindref="member">Test::keyboardKeyReleased</ref>(KEY_A,<sp/>++timestamp);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(motionSpy.wait());</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(buttonSpy.count());</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(axisSpy.count());</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(keySpy.count());</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!eiReadableSpy.empty())<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_dispatch(ei);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(!ei_peek_event(ei));</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>=<sp/>QDBusMessage::createMethodCall(QDBusConnection::sessionBus().baseService(),<sp/>kwinInputCapturePath,<sp/>kwinInputCaptureManagerInterface,<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;removeInputCapture&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/>QDBusObjectPath(capture.<ref refid="class_input_capture_1aca9f2cfb1801ce96aba64805dd0ad59d" kindref="member">dbusPath</ref>);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>QDBusReply&lt;void&gt;<sp/>removeReply<sp/>=<sp/>QDBusConnection::sessionBus().call(msg);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY2(removeReply.isValid(),<sp/>QTest::toString(removeReply.error()));</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>ei_unref(ei);</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestInputCapture::disconnectingEiRemovesCapture()</highlight></codeline>
<codeline lineno="330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>InputCapture<sp/>capture;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!capture.<ref refid="class_input_capture_1a20102ba528771f4af903afd2ba203d1c" kindref="member">setupSuccessfully</ref>())<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ei<sp/>=<sp/>ei_new_receiver(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>ei_setup_backend_fd(ei,<sp/>capture.<ref refid="class_input_capture_1ae69f21a0b1c903b2a87f56cb2036ba32" kindref="member">eifd</ref>);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>QSocketNotifier<sp/>eiNotifier(ei_get_fd(ei),<sp/>QSocketNotifier::Read);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>eiReadableSpy(&amp;eiNotifier,<sp/>&amp;QSocketNotifier::activated);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>connected<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!connected<sp/>&amp;&amp;<sp/>eiReadableSpy.wait())<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_dispatch(ei);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>event<sp/>=<sp/>ei_get_event(ei))<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ei_event_get_type(event)<sp/>==<sp/>EI_EVENT_CONNECT)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connected<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei_event_unref(event);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>ei_unref(ei);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>QTRY_COMPARE(QDBusConnection::sessionBus().objectRegisteredAt(capture.<ref refid="class_input_capture_1aca9f2cfb1801ce96aba64805dd0ad59d" kindref="member">dbusPath</ref>),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><ref refid="kwin__wayland__test_8h_1a105fcd0c1d5eb52370ab30db8ad37c4c" kindref="member">WAYLANDTEST_MAIN</ref>(<ref refid="class_test_input_capture" kindref="compound">TestInputCapture</ref>)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;input_capture_test.moc&quot;</highlight></codeline>
    </programlisting>
    <location file="kwin/autotests/integration/input_capture_test.cpp"/>
  </compounddef>
</doxygen>
