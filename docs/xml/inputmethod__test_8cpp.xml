<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="inputmethod__test_8cpp" kind="file" language="C++">
    <compoundname>inputmethod_test.cpp</compoundname>
    <includes refid="kwin__wayland__test_8h" local="yes">kwin_wayland_test.h</includes>
    <includes refid="core_2output_8h" local="yes">core/output.h</includes>
    <includes refid="inputmethod_8h" local="yes">inputmethod.h</includes>
    <includes refid="inputpanelv1window_8h" local="yes">inputpanelv1window.h</includes>
    <includes refid="keyboard__input_8h" local="yes">keyboard_input.h</includes>
    <includes refid="pointer__input_8h" local="yes">pointer_input.h</includes>
    <includes local="yes">qwayland-input-method-unstable-v1.h</includes>
    <includes local="yes">qwayland-text-input-unstable-v3.h</includes>
    <includes refid="virtualkeyboard__dbus_8h" local="yes">virtualkeyboard_dbus.h</includes>
    <includes refid="clientconnection_8h" local="yes">wayland/clientconnection.h</includes>
    <includes refid="display_8h" local="yes">wayland/display.h</includes>
    <includes refid="seat_8h" local="yes">wayland/seat.h</includes>
    <includes refid="surface_8h" local="yes">wayland/surface.h</includes>
    <includes refid="wayland__server_8h" local="yes">wayland_server.h</includes>
    <includes local="yes">window.h</includes>
    <includes refid="workspace_8h" local="yes">workspace.h</includes>
    <includes refid="xkb_8h" local="yes">xkb.h</includes>
    <includes local="no">QDBusConnection</includes>
    <includes local="no">QDBusMessage</includes>
    <includes local="no">QDBusPendingReply</includes>
    <includes local="no">QSignalSpy</includes>
    <includes local="no">QTest</includes>
    <includes local="no">KWayland/Client/compositor.h</includes>
    <includes local="no">KWayland/Client/keyboard.h</includes>
    <includes local="no">KWayland/Client/output.h</includes>
    <includes local="no">KWayland/Client/region.h</includes>
    <includes local="no">KWayland/Client/seat.h</includes>
    <includes local="no">KWayland/Client/surface.h</includes>
    <includes local="no">KWayland/Client/textinput.h</includes>
    <includes local="no">linux/input-event-codes.h</includes>
    <includes local="yes">inputmethod_test.moc</includes>
    <incdepgraph>
      <node id="1">
        <label>kwin/autotests/integration/inputmethod_test.cpp</label>
        <link refid="inputmethod__test_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>kwin_wayland_test.h</label>
        <link refid="kwin__wayland__test_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>core/colorspace.h</label>
        <link refid="colorspace_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>core/inputdevice.h</label>
        <link refid="inputdevice_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>core/output.h</label>
        <link refid="core_2output_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>core/renderbackend.h</label>
        <link refid="renderbackend_8h"/>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>renderloop.h</label>
        <link refid="renderloop_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>core/rendertarget.h</label>
        <link refid="rendertarget_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>cursor.h</label>
        <link refid="cursor_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>effect/globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>input.h</label>
        <link refid="input_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>input_event_spy.h</label>
        <link refid="input__event__spy_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>inputmethod.h</label>
        <link refid="inputmethod_8h"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>inputpanelv1window.h</label>
        <link refid="inputpanelv1window_8h"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>keyboard_input.h</label>
        <link refid="keyboard__input_8h"/>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>main.h</label>
        <link refid="main_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>options.h</label>
        <link refid="options_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>pointer_input.h</label>
        <link refid="pointer__input_8h"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>rules.h</label>
        <link refid="rules_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>sm.h</label>
        <link refid="sm_8h"/>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>utils/common.h</label>
        <link refid="common_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>utils/cursortheme.h</label>
        <link refid="cursortheme_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>utils/edid.h</label>
        <link refid="edid_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>utils/filedescriptor.h</label>
        <link refid="filedescriptor_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>utils/version.h</label>
        <link refid="version_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>virtualkeyboard_dbus.h</label>
        <link refid="virtualkeyboard__dbus_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>wayland/clientconnection.h</label>
        <link refid="clientconnection_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>wayland/display.h</label>
        <link refid="display_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>wayland/inputmethod_v1.h</label>
        <link refid="inputmethod__v1_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>wayland/seat.h</label>
        <link refid="seat_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>wayland/surface.h</label>
        <link refid="surface_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>textinput.h</label>
        <link refid="textinput_8h"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>wayland/textinput_v2.h</label>
        <link refid="textinput__v2_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>wayland_server.h</label>
        <link refid="wayland__server_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>waylandwindow.h</label>
        <link refid="waylandwindow_8h"/>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>window.h</label>
        <link refid="window_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>workspace.h</label>
        <link refid="workspace_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="108">
        <label>xkb.h</label>
        <link refid="xkb_8h"/>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="106">
        <label>KConfigGroup</label>
      </node>
      <node id="71">
        <label>KConfigWatcher</label>
      </node>
      <node id="64">
        <label>KSharedConfig</label>
      </node>
      <node id="113">
        <label>KWayland/Client/compositor.h</label>
      </node>
      <node id="114">
        <label>KWayland/Client/keyboard.h</label>
      </node>
      <node id="115">
        <label>KWayland/Client/output.h</label>
      </node>
      <node id="116">
        <label>KWayland/Client/region.h</label>
      </node>
      <node id="117">
        <label>KWayland/Client/seat.h</label>
      </node>
      <node id="17">
        <label>KWayland/Client/surface.h</label>
      </node>
      <node id="118">
        <label>KWayland/Client/textinput.h</label>
      </node>
      <node id="68">
        <label>QAbstractNativeEventFilter</label>
      </node>
      <node id="69">
        <label>QApplication</label>
      </node>
      <node id="40">
        <label>QByteArray</label>
      </node>
      <node id="6">
        <label>QCoreApplication</label>
      </node>
      <node id="110">
        <label>QDBusConnection</label>
      </node>
      <node id="103">
        <label>QDBusContext</label>
      </node>
      <node id="111">
        <label>QDBusMessage</label>
      </node>
      <node id="112">
        <label>QDBusPendingReply</label>
      </node>
      <node id="104">
        <label>QDataStream</label>
      </node>
      <node id="43">
        <label>QDebug</label>
      </node>
      <node id="80">
        <label>QElapsedTimer</label>
      </node>
      <node id="63">
        <label>QHash</label>
      </node>
      <node id="81">
        <label>QIcon</label>
      </node>
      <node id="7">
        <label>QImage</label>
      </node>
      <node id="82">
        <label>QKeySequence</label>
      </node>
      <node id="41">
        <label>QList</label>
      </node>
      <node id="77">
        <label>QLoggingCategory</label>
      </node>
      <node id="39">
        <label>QMatrix4x4</label>
      </node>
      <node id="50">
        <label>QMetaType</label>
      </node>
      <node id="12">
        <label>QObject</label>
      </node>
      <node id="8">
        <label>QPoint</label>
      </node>
      <node id="86">
        <label>QPointF</label>
      </node>
      <node id="56">
        <label>QPointer</label>
      </node>
      <node id="70">
        <label>QProcessEnvironment</label>
      </node>
      <node id="44">
        <label>QRect</label>
      </node>
      <node id="73">
        <label>QRectF</label>
      </node>
      <node id="99">
        <label>QRegion</label>
      </node>
      <node id="85">
        <label>QSet</label>
      </node>
      <node id="89">
        <label>QSharedDataPointer</label>
      </node>
      <node id="15">
        <label>QSignalSpy</label>
      </node>
      <node id="42">
        <label>QSize</label>
      </node>
      <node id="76">
        <label>QString</label>
      </node>
      <node id="105">
        <label>QStringList</label>
      </node>
      <node id="16">
        <label>QTest</label>
      </node>
      <node id="57">
        <label>QTimer</label>
      </node>
      <node id="45">
        <label>QUuid</label>
      </node>
      <node id="9">
        <label>QVariant</label>
      </node>
      <node id="10">
        <label>QVector2D</label>
      </node>
      <node id="51">
        <label>QtGlobal</label>
      </node>
      <node id="55">
        <label>chrono</label>
      </node>
      <node id="78">
        <label>climits</label>
      </node>
      <node id="5">
        <label>config-kwin.h</label>
      </node>
      <node id="79">
        <label>functional</label>
      </node>
      <node id="120">
        <label>inputmethod_test.moc</label>
      </node>
      <node id="11">
        <label>kwin_export.h</label>
      </node>
      <node id="119">
        <label>linux/input-event-codes.h</label>
      </node>
      <node id="13">
        <label>main.h</label>
      </node>
      <node id="48">
        <label>memory</label>
      </node>
      <node id="107">
        <label>netwm_def.h</label>
      </node>
      <node id="18">
        <label>optional</label>
      </node>
      <node id="19">
        <label>qwayland-color-management-v1.h</label>
      </node>
      <node id="20">
        <label>qwayland-cursor-shape-v1.h</label>
      </node>
      <node id="21">
        <label>qwayland-fake-input.h</label>
      </node>
      <node id="22">
        <label>qwayland-fractional-scale-v1.h</label>
      </node>
      <node id="23">
        <label>qwayland-idle-inhibit-unstable-v1.h</label>
      </node>
      <node id="24">
        <label>qwayland-input-method-unstable-v1.h</label>
      </node>
      <node id="25">
        <label>qwayland-kde-output-device-v2.h</label>
      </node>
      <node id="26">
        <label>qwayland-kde-output-management-v2.h</label>
      </node>
      <node id="27">
        <label>qwayland-kde-screen-edge-v1.h</label>
      </node>
      <node id="28">
        <label>qwayland-security-context-v1.h</label>
      </node>
      <node id="29">
        <label>qwayland-text-input-unstable-v3.h</label>
      </node>
      <node id="30">
        <label>qwayland-wlr-layer-shell-unstable-v1.h</label>
      </node>
      <node id="31">
        <label>qwayland-xdg-decoration-unstable-v1.h</label>
      </node>
      <node id="32">
        <label>qwayland-xdg-dialog-v1.h</label>
      </node>
      <node id="33">
        <label>qwayland-xdg-shell.h</label>
      </node>
      <node id="34">
        <label>qwayland-zkde-screencast-unstable-v1.h</label>
      </node>
      <node id="92">
        <label>sys/types.h</label>
      </node>
      <node id="52">
        <label>utility</label>
      </node>
      <node id="53">
        <label>vector</label>
      </node>
      <node id="14">
        <label>window.h</label>
      </node>
      <node id="65">
        <label>xcb/xcb.h</label>
      </node>
      <node id="109">
        <label>xkbcommon/xkbcommon.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_input_method_test" prot="public">InputMethodTest</innerclass>
    <innerclass refid="class_virtual_keyboard_d_bus" prot="public">VirtualKeyboardDBus</innerclass>
    <sectiondef kind="var">
      <memberdef kind="variable" id="inputmethod__test_8cpp_1a485d6ddd568caea0908934bfdb9fbadb" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString s_socketName</definition>
        <argsstring></argsstring>
        <name>s_socketName</name>
        <initializer>= QStringLiteral(&quot;wayland_test_kwin_inputmethod-0&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/inputmethod_test.cpp" line="46" column="22" bodyfile="kwin/autotests/integration/inputmethod_test.cpp" bodystart="46" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>KWin<sp/>-<sp/>the<sp/>KDE<sp/>window<sp/>manager</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>KDE<sp/>project.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2020<sp/>Marco<sp/>Martin<sp/>&lt;mart@kde.org&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="kwin__wayland__test_8h" kindref="compound">kwin_wayland_test.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="core_2output_8h" kindref="compound">core/output.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="inputmethod_8h" kindref="compound">inputmethod.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="inputpanelv1window_8h" kindref="compound">inputpanelv1window.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="keyboard__input_8h" kindref="compound">keyboard_input.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pointer__input_8h" kindref="compound">pointer_input.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;qwayland-input-method-unstable-v1.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;qwayland-text-input-unstable-v3.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="virtualkeyboard__dbus_8h" kindref="compound">virtualkeyboard_dbus.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="clientconnection_8h" kindref="compound">wayland/clientconnection.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="display_8h" kindref="compound">wayland/display.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="seat_8h" kindref="compound">wayland/seat.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="surface_8h" kindref="compound">wayland/surface.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wayland__server_8h" kindref="compound">wayland_server.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;window.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="workspace_8h" kindref="compound">workspace.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="xkb_8h" kindref="compound">xkb.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QDBusConnection&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QDBusMessage&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QDBusPendingReply&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QSignalSpy&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QTest&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/compositor.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/keyboard.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/output.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/region.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/seat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/surface.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/textinput.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;linux/input-event-codes.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win" kindref="compound">KWin</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="class_k_win_1_1_virtual_keyboard_d_bus" kindref="compound">KWin::VirtualKeyboardDBus</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>s_socketName<sp/>=<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;wayland_test_kwin_inputmethod-0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="class_input_method_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_input_method_test" kindref="compound">InputMethodTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QObject</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Q_SLOTS:</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initTestCase();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanup();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testOpenClose();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testEnableDisableV3();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testEnableActive();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testHidePanel();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testReactivateFocus();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testSwitchFocusedSurfaces();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testV2V3SameClient();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testV3Styling();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testDisableShowInputPanel();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testModifierForwarding();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testFakeEventFallback();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testOverlayPositioning_data();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testOverlayPositioning();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testV3AutoCommit();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>touchNow()</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a23de04a19c3519614786ab986c0c1e7c" kindref="member">Test::touchDown</ref>(0,<sp/>{100,<sp/>100},<sp/>++time);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1abe1cb34b00c3dce9daa8ba37ce7c402b" kindref="member">Test::touchUp</ref>(0,<sp/>++time);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal">};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InputMethodTest::initTestCase()</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>QDBusConnection::sessionBus().registerService(QStringLiteral(</highlight><highlight class="stringliteral">&quot;org.kde.kwin.testvirtualkeyboard&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>qRegisterMetaType&lt;KWin::Window<sp/>*&gt;();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>qRegisterMetaType&lt;KWayland::Client::Output<sp/>*&gt;();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;init(s_socketName));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a1373c61710748fcde7e428e05bd5f2cb" kindref="member">Test::setOutputConfig</ref>({</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QRect(0,<sp/>0,<sp/>1280,<sp/>1024),</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QRect(1280,<sp/>0,<sp/>1280,<sp/>1024),</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">WaylandTestApplication<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kwinApp())-&gt;setInputMethodServerToStart(</highlight><highlight class="stringliteral">&quot;internal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>kwinApp()-&gt;start();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outputs<sp/>=<sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1aaee7f44422f40ea8256b2f54e83a2b37" kindref="member">outputs</ref>();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(outputs.count(),<sp/>2);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(outputs[0]-&gt;geometry(),<sp/>QRect(0,<sp/>0,<sp/>1280,<sp/>1024));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(outputs[1]-&gt;geometry(),<sp/>QRect(1280,<sp/>0,<sp/>1280,<sp/>1024));</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InputMethodTest::init()</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1abe694aeb41eaff7b515070ad0c11dba4" kindref="member">setActiveOutput</ref>(QPoint(640,<sp/>512));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">KWin::input</ref>()-&gt;<ref refid="class_k_win_1_1_input_redirection_1a74da9abb10fc4dd9dcf4a0addc46c9bd" kindref="member">pointer</ref>()-&gt;<ref refid="class_k_win_1_1_pointer_input_redirection_1ad863f302cae5e8e1634db3d75a85f69e" kindref="member">warp</ref>(QPoint(640,<sp/>512));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>touchNow();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1a36c6e87757c3c97858c55b650c9d304c" kindref="member">Test::setupWaylandConnection</ref>(Test::AdditionalWaylandInterface::Seat<sp/>|<sp/>Test::AdditionalWaylandInterface::TextInputManagerV2<sp/>|<sp/>Test::AdditionalWaylandInterface::InputMethodV1<sp/>|<sp/>Test::AdditionalWaylandInterface::TextInputManagerV3));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>kwinApp()-&gt;inputMethod()-&gt;setEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InputMethodTest::cleanup()</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a12755bae9118cb958baf0efbd222d7c8" kindref="member">Test::destroyWaylandConnection</ref>();</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InputMethodTest::testOpenClose()</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowAddedSpy(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_workspace_1a8f82a0ac5517ddb86629fa3f8243e388" kindref="member">Workspace::windowAdded</ref>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowRemovedSpy(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_workspace_1a56e58d6f7f7b1c0cca13384068f2cdd2" kindref="member">Workspace::windowRemoved</ref>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>xdg_toplevel<sp/>surface<sp/>and<sp/>wait<sp/>for<sp/>the<sp/>compositor<sp/>to<sp/>catch<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(1280,<sp/>1024),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>frameGeometryChangedSpy(window,<sp/>&amp;Window::frameGeometryChanged);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::TextInput&gt;<sp/>textInput(<ref refid="namespace_k_win_1_1_test_1aba9aad15d03110344917226405ea7a6e" kindref="member">Test::waylandTextInputManager</ref>()-&gt;createTextInput(<ref refid="namespace_k_win_1_1_test_1a5f6b6eee3f6e90f7c4693e06af67d91d" kindref="member">Test::waylandSeat</ref>()));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(textInput<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Show<sp/>the<sp/>keyboard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>touchNow();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>textInput-&gt;enable(surface.get());</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>textInput-&gt;showInputPanel();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>paneladded(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_input_method_1a08db3d6588a4aaf2752f6f6ec42fdfd0" kindref="member">KWin::InputMethod::panelChanged</ref>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(windowAddedSpy.wait());</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(paneladded.count(),<sp/>1);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*keyboardClient<sp/>=<sp/>windowAddedSpy.last().first().value&lt;Window<sp/>*&gt;();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(keyboardClient);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(keyboardClient-&gt;isInputMethod());</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>the<sp/>actual<sp/>resize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>toplevelConfigureRequestedSpy.last().first().value&lt;QSize&gt;(),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().height(),<sp/>1024<sp/>-<sp/>keyboardClient-&gt;frameGeometry().height());</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hide<sp/>the<sp/>keyboard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>textInput-&gt;hideInputPanel();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>toplevelConfigureRequestedSpy.last().first().value&lt;QSize&gt;(),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().height(),<sp/>1024);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>show<sp/>the<sp/>keyboard<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>touchNow();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>textInput-&gt;enable(surface.get());</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>textInput-&gt;showInputPanel();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(keyboardClient-&gt;isShown());</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>the<sp/>test<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface.reset();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InputMethodTest::testEnableDisableV3()</highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>xdg_toplevel<sp/>surface<sp/>and<sp/>wait<sp/>for<sp/>the<sp/>compositor<sp/>to<sp/>catch<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(1280,<sp/>1024),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>textInputV3<sp/>=<sp/>std::make_unique&lt;Test::TextInputV3&gt;();</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;init(<ref refid="namespace_k_win_1_1_test_1a283aa125534a50e9477ee94e47057e9d" kindref="member">Test::waylandTextInputManagerV3</ref>()-&gt;get_text_input(*(<ref refid="namespace_k_win_1_1_test_1a5f6b6eee3f6e90f7c4693e06af67d91d" kindref="member">Test::waylandSeat</ref>())));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Show<sp/>the<sp/>keyboard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>touchNow();</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;enable();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowAddedSpy(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_workspace_1a8f82a0ac5517ddb86629fa3f8243e388" kindref="member">Workspace::windowAdded</ref>);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>inputMethodActiveSpy(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_input_method_1ab5aa0575d7741abf17220c55f4ba8753" kindref="member">InputMethod::activeChanged</ref>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>enabling<sp/>the<sp/>text-input<sp/>should<sp/>not<sp/>show<sp/>it<sp/>but<sp/>rather<sp/>on<sp/>commit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;commit();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(inputMethodActiveSpy.count()<sp/>||<sp/>inputMethodActiveSpy.wait());</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(windowAddedSpy.wait());</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*keyboardClient<sp/>=<sp/>windowAddedSpy.last().first().value&lt;Window<sp/>*&gt;();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(keyboardClient);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(keyboardClient-&gt;isInputMethod());</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(keyboardClient-&gt;isShown());</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Text<sp/>input<sp/>v3<sp/>doesn&apos;t<sp/>have<sp/>hideInputPanel,<sp/>just<sp/>simiulate<sp/>the<sp/>hide<sp/>from<sp/>dbus<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>kwinApp()-&gt;inputMethod()-&gt;hide();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!keyboardClient-&gt;isShown());</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>hiddenChangedSpy(keyboardClient,<sp/>&amp;Window::hiddenChanged);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Force<sp/>enable<sp/>the<sp/>text<sp/>input<sp/>object.<sp/>This<sp/>is<sp/>what&apos;s<sp/>done<sp/>by<sp/>Gtk.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;enable();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;commit();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>hiddenChangedSpy.wait();</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(keyboardClient-&gt;isShown());</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disable<sp/>text<sp/>input<sp/>and<sp/>ensure<sp/>that<sp/>it<sp/>is<sp/>not<sp/>hiding<sp/>input<sp/>panel<sp/>without<sp/>commit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>inputMethodActiveSpy.clear();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;disable();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;commit();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(inputMethodActiveSpy.count()<sp/>||<sp/>inputMethodActiveSpy.wait());</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InputMethodTest::testEnableActive()</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>enabling<sp/>text-input<sp/>twice<sp/>won&apos;t<sp/>change<sp/>the<sp/>active<sp/>input<sp/>method<sp/>status.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>xdg_toplevel<sp/>surface<sp/>and<sp/>wait<sp/>for<sp/>the<sp/>compositor<sp/>to<sp/>catch<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(1280,<sp/>1024),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Show<sp/>the<sp/>keyboard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowAddedSpy(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_workspace_1a8f82a0ac5517ddb86629fa3f8243e388" kindref="member">Workspace::windowAdded</ref>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::TextInput&gt;<sp/>textInput(<ref refid="namespace_k_win_1_1_test_1aba9aad15d03110344917226405ea7a6e" kindref="member">Test::waylandTextInputManager</ref>()-&gt;createTextInput(<ref refid="namespace_k_win_1_1_test_1a5f6b6eee3f6e90f7c4693e06af67d91d" kindref="member">Test::waylandSeat</ref>()));</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>textInput-&gt;enable(surface.get());</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>paneladded(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_input_method_1a08db3d6588a4aaf2752f6f6ec42fdfd0" kindref="member">KWin::InputMethod::panelChanged</ref>);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(paneladded.wait());</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>textInput-&gt;showInputPanel();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(windowAddedSpy.wait());</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ask<sp/>the<sp/>keyboard<sp/>to<sp/>be<sp/>shown<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>activateSpy(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_input_method_1ab5aa0575d7741abf17220c55f4ba8753" kindref="member">InputMethod::activeChanged</ref>);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>textInput-&gt;enable(surface.get());</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>textInput-&gt;showInputPanel();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>activateSpy.wait(200);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(activateSpy.isEmpty());</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>the<sp/>test<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface.reset();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InputMethodTest::testHidePanel()</highlight></codeline>
<codeline lineno="268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>touchNow();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowAddedSpy(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_workspace_1a8f82a0ac5517ddb86629fa3f8243e388" kindref="member">Workspace::windowAdded</ref>);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowRemovedSpy(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_workspace_1a56e58d6f7f7b1c0cca13384068f2cdd2" kindref="member">Workspace::windowRemoved</ref>);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>activateSpy(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_input_method_1ab5aa0575d7741abf17220c55f4ba8753" kindref="member">InputMethod::activeChanged</ref>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::TextInput&gt;<sp/>textInput(<ref refid="namespace_k_win_1_1_test_1aba9aad15d03110344917226405ea7a6e" kindref="member">Test::waylandTextInputManager</ref>()-&gt;createTextInput(<ref refid="namespace_k_win_1_1_test_1a5f6b6eee3f6e90f7c4693e06af67d91d" kindref="member">Test::waylandSeat</ref>()));</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>xdg_toplevel<sp/>surface<sp/>and<sp/>wait<sp/>for<sp/>the<sp/>compositor<sp/>to<sp/>catch<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(1280,<sp/>1024),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;<ref refid="class_k_win_1_1_wayland_server_1a5eb1a9f63d831179f22f4baf0c630f0e" kindref="member">seat</ref>()-&gt;<ref refid="class_k_win_1_1_seat_interface_1a7f66fb5fb1cf10789ea3d2d0f6938b99" kindref="member">setFocusedTextInputSurface</ref>(window-&gt;surface());</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>textInput-&gt;enable(surface.get());</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>paneladded(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_input_method_1a08db3d6588a4aaf2752f6f6ec42fdfd0" kindref="member">KWin::InputMethod::panelChanged</ref>);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(paneladded.wait());</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>textInput-&gt;showInputPanel();</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(windowAddedSpy.wait());</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;activeWindow(),<sp/>window);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(windowAddedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(activateSpy.count()<sp/>||<sp/>activateSpy.wait());</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>keyboardWindow<sp/>=<sp/>kwinApp()-&gt;inputMethod()-&gt;panel();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ipsurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a79a1e1551387419a4191a986f66c49b7" kindref="member">Test::inputPanelSurface</ref>();</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(keyboardWindow);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>windowRemovedSpy.clear();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ipsurface;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isVisible());</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(windowRemovedSpy.count()<sp/>||<sp/>windowRemovedSpy.wait());</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isVisible());</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>the<sp/>test<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface.reset();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InputMethodTest::testReactivateFocus()</highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>touchNow();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(1280,<sp/>1024),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Show<sp/>the<sp/>keyboard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowAddedSpy(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_workspace_1a8f82a0ac5517ddb86629fa3f8243e388" kindref="member">Workspace::windowAdded</ref>);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::TextInput&gt;<sp/>textInput(<ref refid="namespace_k_win_1_1_test_1aba9aad15d03110344917226405ea7a6e" kindref="member">Test::waylandTextInputManager</ref>()-&gt;createTextInput(<ref refid="namespace_k_win_1_1_test_1a5f6b6eee3f6e90f7c4693e06af67d91d" kindref="member">Test::waylandSeat</ref>()));</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>textInput-&gt;enable(surface.get());</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>paneladded(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_input_method_1a08db3d6588a4aaf2752f6f6ec42fdfd0" kindref="member">KWin::InputMethod::panelChanged</ref>);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(paneladded.wait());</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>textInput-&gt;showInputPanel();</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(windowAddedSpy.wait());</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>activeSpy(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_input_method_1ab5aa0575d7741abf17220c55f4ba8753" kindref="member">InputMethod::activeChanged</ref>);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hide<sp/>keyboard<sp/>like<sp/>keyboardToggle<sp/>button<sp/>on<sp/>navigation<sp/>panel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>kwinApp()-&gt;inputMethod()-&gt;setActive(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>activeSpy.wait(200);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reactivate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>textInput-&gt;enable(surface.get());</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>textInput-&gt;showInputPanel();</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>activeSpy.wait(200);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>the<sp/>test<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface.reset();</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InputMethodTest::testSwitchFocusedSurfaces()</highlight></codeline>
<codeline lineno="351"><highlight class="normal">{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>touchNow();</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowAddedSpy(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_workspace_1a8f82a0ac5517ddb86629fa3f8243e388" kindref="member">Workspace::windowAdded</ref>);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowRemovedSpy(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_workspace_1a56e58d6f7f7b1c0cca13384068f2cdd2" kindref="member">Workspace::windowRemoved</ref>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>activateSpy(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_input_method_1ab5aa0575d7741abf17220c55f4ba8753" kindref="member">InputMethod::activeChanged</ref>);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::TextInput&gt;<sp/>textInput(<ref refid="namespace_k_win_1_1_test_1aba9aad15d03110344917226405ea7a6e" kindref="member">Test::waylandTextInputManager</ref>()-&gt;createTextInput(<ref refid="namespace_k_win_1_1_test_1a5f6b6eee3f6e90f7c4693e06af67d91d" kindref="member">Test::waylandSeat</ref>()));</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;Window<sp/>*&gt;<sp/>windows;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::unique_ptr&lt;KWayland::Client::Surface&gt;&gt;<sp/>surfaces;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::unique_ptr&lt;Test::XdgToplevel&gt;&gt;<sp/>toplevels;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>create<sp/>3<sp/>surfaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shellSurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get());</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windows<sp/>+=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(1280,<sp/>1024),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;activeWindow(),<sp/>windows.constLast());</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surfaces.push_back(std::move(surface));</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toplevels.push_back(std::move(shellSurface));</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(windowAddedSpy.count(),<sp/>3);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;<ref refid="class_k_win_1_1_wayland_server_1a5eb1a9f63d831179f22f4baf0c630f0e" kindref="member">seat</ref>()-&gt;<ref refid="class_k_win_1_1_seat_interface_1a7f66fb5fb1cf10789ea3d2d0f6938b99" kindref="member">setFocusedTextInputSurface</ref>(windows.constFirst()-&gt;surface());</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>textInput-&gt;enable(surfaces.back().get());</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;<ref refid="class_k_win_1_1_wayland_server_1a5eb1a9f63d831179f22f4baf0c630f0e" kindref="member">seat</ref>()-&gt;<ref refid="class_k_win_1_1_seat_interface_1a7f66fb5fb1cf10789ea3d2d0f6938b99" kindref="member">setFocusedTextInputSurface</ref>(windows.first()-&gt;surface());</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>activateSpy.clear();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;<ref refid="class_k_win_1_1_wayland_server_1a5eb1a9f63d831179f22f4baf0c630f0e" kindref="member">seat</ref>()-&gt;<ref refid="class_k_win_1_1_seat_interface_1a7f66fb5fb1cf10789ea3d2d0f6938b99" kindref="member">setFocusedTextInputSurface</ref>(windows.last()-&gt;surface());</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(activateSpy.count()<sp/>||<sp/>activateSpy.wait());</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>activateSpy.clear();</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;<ref refid="class_k_win_1_1_wayland_server_1a5eb1a9f63d831179f22f4baf0c630f0e" kindref="member">seat</ref>()-&gt;<ref refid="class_k_win_1_1_seat_interface_1a7f66fb5fb1cf10789ea3d2d0f6938b99" kindref="member">setFocusedTextInputSurface</ref>(windows.first()-&gt;surface());</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(activateSpy.count()<sp/>||<sp/>activateSpy.wait());</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InputMethodTest::testV2V3SameClient()</highlight></codeline>
<codeline lineno="393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>touchNow();</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowAddedSpy(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_workspace_1a8f82a0ac5517ddb86629fa3f8243e388" kindref="member">Workspace::windowAdded</ref>);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowRemovedSpy(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_workspace_1a56e58d6f7f7b1c0cca13384068f2cdd2" kindref="member">Workspace::windowRemoved</ref>);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>activateSpy(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_input_method_1ab5aa0575d7741abf17220c55f4ba8753" kindref="member">InputMethod::activeChanged</ref>);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::TextInput&gt;<sp/>textInput(<ref refid="namespace_k_win_1_1_test_1aba9aad15d03110344917226405ea7a6e" kindref="member">Test::waylandTextInputManager</ref>()-&gt;createTextInput(<ref refid="namespace_k_win_1_1_test_1a5f6b6eee3f6e90f7c4693e06af67d91d" kindref="member">Test::waylandSeat</ref>()));</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>textInputV3<sp/>=<sp/>std::make_unique&lt;Test::TextInputV3&gt;();</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;init(<ref refid="namespace_k_win_1_1_test_1a283aa125534a50e9477ee94e47057e9d" kindref="member">Test::waylandTextInputManagerV3</ref>()-&gt;get_text_input(*(<ref refid="namespace_k_win_1_1_test_1a5f6b6eee3f6e90f7c4693e06af67d91d" kindref="member">Test::waylandSeat</ref>())));</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>toplevel(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(1280,<sp/>1024),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;activeWindow(),<sp/>window);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(windowAddedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;<ref refid="class_k_win_1_1_wayland_server_1a5eb1a9f63d831179f22f4baf0c630f0e" kindref="member">seat</ref>()-&gt;<ref refid="class_k_win_1_1_seat_interface_1a7f66fb5fb1cf10789ea3d2d0f6938b99" kindref="member">setFocusedTextInputSurface</ref>(window-&gt;surface());</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>and<sp/>disable<sp/>v2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>textInput-&gt;enable(surface.get());</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(activateSpy.count()<sp/>||<sp/>activateSpy.wait());</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>activateSpy.clear();</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>textInput-&gt;disable(surface.get());</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(activateSpy.count()<sp/>||<sp/>activateSpy.wait());</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>and<sp/>disable<sp/>v3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>activateSpy.clear();</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;enable();</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;commit();</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(activateSpy.count()<sp/>||<sp/>activateSpy.wait());</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>activateSpy.clear();</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;disable();</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;commit();</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>activateSpy.clear();</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(activateSpy.count()<sp/>||<sp/>activateSpy.wait());</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>v2<sp/>and<sp/>v3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>activateSpy.clear();</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;enable();</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;commit();</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>textInput-&gt;enable(surface.get());</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(activateSpy.count()<sp/>||<sp/>activateSpy.wait());</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>v3,<sp/>should<sp/>still<sp/>be<sp/>active<sp/>since<sp/>v2<sp/>is<sp/>active.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>activateSpy.clear();</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;disable();</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;commit();</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>activateSpy.wait(200);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>v2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>activateSpy.clear();</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>textInput-&gt;disable(surface.get());</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(activateSpy.count()<sp/>||<sp/>activateSpy.wait());</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>toplevel.reset();</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InputMethodTest::testV3Styling()</highlight></codeline>
<codeline lineno="464"><highlight class="normal">{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>xdg_toplevel<sp/>surface<sp/>and<sp/>wait<sp/>for<sp/>the<sp/>compositor<sp/>to<sp/>catch<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(1280,<sp/>1024),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>textInputV3<sp/>=<sp/>std::make_unique&lt;Test::TextInputV3&gt;();</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;init(<ref refid="namespace_k_win_1_1_test_1a283aa125534a50e9477ee94e47057e9d" kindref="member">Test::waylandTextInputManagerV3</ref>()-&gt;get_text_input(*(<ref refid="namespace_k_win_1_1_test_1a5f6b6eee3f6e90f7c4693e06af67d91d" kindref="member">Test::waylandSeat</ref>())));</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;enable();</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>inputMethodActiveSpy(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_input_method_1ab5aa0575d7741abf17220c55f4ba8753" kindref="member">InputMethod::activeChanged</ref>);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>inputMethodActivateSpy(<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">Test::inputMethod</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a8b1aedbad85f1bc38ce7613e190bcc0d" kindref="member">Test::MockInputMethod::activate</ref>);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>enabling<sp/>the<sp/>text-input<sp/>should<sp/>not<sp/>show<sp/>it<sp/>but<sp/>rather<sp/>on<sp/>commit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;commit();</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(inputMethodActiveSpy.count()<sp/>||<sp/>inputMethodActiveSpy.wait());</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(inputMethodActivateSpy.wait());</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>context<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">Test::inputMethod</ref>()-&gt;<ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a65c83c45b40f087556bb2c2d30800563" kindref="member">context</ref>();</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>textInputPreeditSpy(textInputV3.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_text_input_v3_1adac71f5c1aaa175ca5f79bf3a730c22d" kindref="member">Test::TextInputV3::preeditString</ref>);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_cursor(context,<sp/>0);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_styling(context,<sp/>0,<sp/>3,<sp/>7);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_string(context,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;ABCD&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ABCD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(textInputPreeditSpy.wait());</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last().at(0),<sp/>QString(</highlight><highlight class="stringliteral">&quot;ABCD&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last().at(1),<sp/>0);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last().at(2),<sp/>0);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_cursor(context,<sp/>1);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_styling(context,<sp/>0,<sp/>3,<sp/>7);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_string(context,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;ABCDE&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ABCDE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(textInputPreeditSpy.wait());</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last().at(0),<sp/>QString(</highlight><highlight class="stringliteral">&quot;ABCDE&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last().at(1),<sp/>1);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last().at(2),<sp/>1);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_cursor(context,<sp/>2);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>selection<sp/>for<sp/>[2,<sp/>2+2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_styling(context,<sp/>2,<sp/>2,<sp/>6);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>high<sp/>light<sp/>for<sp/>[3,<sp/>3+3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_styling(context,<sp/>3,<sp/>3,<sp/>4);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_string(context,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;ABCDEF&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ABCDEF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(textInputPreeditSpy.wait());</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last().at(0),<sp/>QString(</highlight><highlight class="stringliteral">&quot;ABCDEF&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Merged<sp/>range<sp/>should<sp/>be<sp/>[2,<sp/>6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last().at(1),<sp/>2);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last().at(2),<sp/>6);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_cursor(context,<sp/>2);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>selection<sp/>for<sp/>[0,<sp/>0+2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_styling(context,<sp/>0,<sp/>2,<sp/>6);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>high<sp/>light<sp/>for<sp/>[3,<sp/>3+3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_styling(context,<sp/>3,<sp/>3,<sp/>4);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_string(context,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;ABCDEF&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ABCDEF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(textInputPreeditSpy.wait());</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last().at(0),<sp/>QString(</highlight><highlight class="stringliteral">&quot;ABCDEF&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Merged<sp/>range<sp/>should<sp/>be<sp/>none,<sp/>because<sp/>of<sp/>the<sp/>disjunction<sp/>highlight.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last().at(1),<sp/>2);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last().at(2),<sp/>2);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_cursor(context,<sp/>1);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>selection<sp/>for<sp/>[0,<sp/>0+2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_styling(context,<sp/>0,<sp/>2,<sp/>6);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>high<sp/>light<sp/>for<sp/>[2,<sp/>2+3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_styling(context,<sp/>2,<sp/>3,<sp/>4);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_string(context,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;ABCDEF&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ABCDEF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(textInputPreeditSpy.wait());</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last().at(0),<sp/>QString(</highlight><highlight class="stringliteral">&quot;ABCDEF&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Merged<sp/>range<sp/>should<sp/>be<sp/>none,<sp/>starting<sp/>offset<sp/>does<sp/>not<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last().at(1),<sp/>1);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last().at(2),<sp/>1);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>different<sp/>order<sp/>of<sp/>styling<sp/>and<sp/>cursor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>high<sp/>light<sp/>for<sp/>[3,<sp/>3+3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_styling(context,<sp/>3,<sp/>3,<sp/>4);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_cursor(context,<sp/>1);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>selection<sp/>for<sp/>[1,<sp/>1+2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_styling(context,<sp/>1,<sp/>2,<sp/>6);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_string(context,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;ABCDEF&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ABCDEF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(textInputPreeditSpy.wait());</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last().at(0),<sp/>QString(</highlight><highlight class="stringliteral">&quot;ABCDEF&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Merged<sp/>range<sp/>should<sp/>be<sp/>[1,6).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last().at(1),<sp/>1);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last().at(2),<sp/>6);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface.reset();</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InputMethodTest::testDisableShowInputPanel()</highlight></codeline>
<codeline lineno="558"><highlight class="normal">{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>xdg_toplevel<sp/>surface<sp/>and<sp/>wait<sp/>for<sp/>the<sp/>compositor<sp/>to<sp/>catch<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(1280,<sp/>1024),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::TextInput&gt;<sp/>textInputV2(<ref refid="namespace_k_win_1_1_test_1aba9aad15d03110344917226405ea7a6e" kindref="member">Test::waylandTextInputManager</ref>()-&gt;createTextInput(<ref refid="namespace_k_win_1_1_test_1a5f6b6eee3f6e90f7c4693e06af67d91d" kindref="member">Test::waylandSeat</ref>()));</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>inputMethodActiveSpy(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_input_method_1ab5aa0575d7741abf17220c55f4ba8753" kindref="member">InputMethod::activeChanged</ref>);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>enabling<sp/>the<sp/>text-input<sp/>should<sp/>not<sp/>show<sp/>it<sp/>but<sp/>rather<sp/>on<sp/>commit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV2-&gt;enable(surface.get());</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(inputMethodActiveSpy.count()<sp/>||<sp/>inputMethodActiveSpy.wait());</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disable<sp/>text<sp/>input<sp/>and<sp/>ensure<sp/>that<sp/>it<sp/>is<sp/>not<sp/>hiding<sp/>input<sp/>panel<sp/>without<sp/>commit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>inputMethodActiveSpy.clear();</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV2-&gt;disable(surface.get());</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(inputMethodActiveSpy.count()<sp/>||<sp/>inputMethodActiveSpy.wait());</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>requestShowInputPanelSpy(<ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;seat()-&gt;textInputV2(),<sp/>&amp;<ref refid="class_k_win_1_1_text_input_v2_interface_1a602a34853071d93b425b9a4321182d6e" kindref="member">TextInputV2Interface::requestShowInputPanel</ref>);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV2-&gt;showInputPanel();</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(requestShowInputPanelSpy.count()<sp/>||<sp/>requestShowInputPanelSpy.wait());</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface.reset();</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InputMethodTest::testModifierForwarding()</highlight></codeline>
<codeline lineno="593"><highlight class="normal">{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>xdg_toplevel<sp/>surface<sp/>and<sp/>wait<sp/>for<sp/>the<sp/>compositor<sp/>to<sp/>catch<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(1280,<sp/>1024),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>textInputV3<sp/>=<sp/>std::make_unique&lt;Test::TextInputV3&gt;();</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;init(<ref refid="namespace_k_win_1_1_test_1a283aa125534a50e9477ee94e47057e9d" kindref="member">Test::waylandTextInputManagerV3</ref>()-&gt;get_text_input(*(<ref refid="namespace_k_win_1_1_test_1a5f6b6eee3f6e90f7c4693e06af67d91d" kindref="member">Test::waylandSeat</ref>())));</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;enable();</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>inputMethodActiveSpy(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_input_method_1ab5aa0575d7741abf17220c55f4ba8753" kindref="member">InputMethod::activeChanged</ref>);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>inputMethodActivateSpy(<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">Test::inputMethod</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a8b1aedbad85f1bc38ce7613e190bcc0d" kindref="member">Test::MockInputMethod::activate</ref>);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>enabling<sp/>the<sp/>text-input<sp/>should<sp/>not<sp/>show<sp/>it<sp/>but<sp/>rather<sp/>on<sp/>commit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;commit();</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(inputMethodActiveSpy.count()<sp/>||<sp/>inputMethodActiveSpy.wait());</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(inputMethodActivateSpy.wait());</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>context<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">Test::inputMethod</ref>()-&gt;<ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a65c83c45b40f087556bb2c2d30800563" kindref="member">context</ref>();</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Keyboard&gt;<sp/>keyboardGrab(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>KWayland::Client::Keyboard);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>keyboardGrab-&gt;setup(zwp_input_method_context_v1_grab_keyboard(context));</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>modifierSpy(keyboardGrab.get(),<sp/>&amp;KWayland::Client::Keyboard::modifiersChanged);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>initial<sp/>modifiers<sp/>update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(modifierSpy.wait());</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>quint32<sp/>timestamp<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>keySpy(keyboardGrab.get(),<sp/>&amp;KWayland::Client::Keyboard::keyChanged);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keyChanged<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>modifiersChanged<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>to<sp/>verify<sp/>the<sp/>order<sp/>of<sp/>two<sp/>signals,<sp/>so<sp/>SignalSpy<sp/>is<sp/>not<sp/>very<sp/>useful<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>keyChangedConnection<sp/>=<sp/>connect(keyboardGrab.get(),<sp/>&amp;KWayland::Client::Keyboard::keyChanged,<sp/>[&amp;keyChanged,<sp/>&amp;modifiersChanged]()<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(!modifiersChanged);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyChanged<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>modifiersChangedConnection<sp/>=<sp/>connect(keyboardGrab.get(),<sp/>&amp;KWayland::Client::Keyboard::modifiersChanged,<sp/>[&amp;keyChanged,<sp/>&amp;modifiersChanged]()<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(keyChanged);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modifiersChanged<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a24e61eb6fba767f564d715bbae7a2e09" kindref="member">Test::keyboardKeyPressed</ref>(KEY_LEFTCTRL,<sp/>timestamp++);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(keySpy.count()<sp/>==<sp/>1<sp/>||<sp/>keySpy.wait());</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(modifierSpy.count()<sp/>==<sp/>2<sp/>||<sp/>modifierSpy.wait());</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>disconnect(keyChangedConnection);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>disconnect(modifiersChangedConnection);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a24e61eb6fba767f564d715bbae7a2e09" kindref="member">Test::keyboardKeyPressed</ref>(KEY_A,<sp/>timestamp++);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(keySpy.count()<sp/>==<sp/>2<sp/>||<sp/>keySpy.wait());</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(modifierSpy.count()<sp/>==<sp/>2<sp/>||<sp/>modifierSpy.wait());</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>verify<sp/>the<sp/>order<sp/>of<sp/>key<sp/>and<sp/>modifiers<sp/>again.<sp/>Key<sp/>first,<sp/>then<sp/>modifiers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>keyChanged<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>modifiersChanged<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>keyChangedConnection<sp/>=<sp/>connect(keyboardGrab.get(),<sp/>&amp;KWayland::Client::Keyboard::keyChanged,<sp/>[&amp;keyChanged,<sp/>&amp;modifiersChanged]()<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(!modifiersChanged);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyChanged<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>modifiersChangedConnection<sp/>=<sp/>connect(keyboardGrab.get(),<sp/>&amp;KWayland::Client::Keyboard::modifiersChanged,<sp/>[&amp;keyChanged,<sp/>&amp;modifiersChanged]()<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(keyChanged);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modifiersChanged<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a0e41594af5bb5f89fd58919de458c7c5" kindref="member">Test::keyboardKeyReleased</ref>(KEY_LEFTCTRL,<sp/>timestamp++);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(keySpy.count()<sp/>==<sp/>3<sp/>||<sp/>keySpy.wait());</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(modifierSpy.count()<sp/>==<sp/>3<sp/>||<sp/>modifierSpy.wait());</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>disconnect(keyChangedConnection);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>disconnect(modifiersChangedConnection);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface.reset();</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a0e41594af5bb5f89fd58919de458c7c5" kindref="member">Test::keyboardKeyReleased</ref>(KEY_A,<sp/>timestamp++);</highlight></codeline>
<codeline lineno="667"><highlight class="normal">}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InputMethodTest::testFakeEventFallback()</highlight></codeline>
<codeline lineno="670"><highlight class="normal">{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>xdg_toplevel<sp/>surface<sp/>and<sp/>wait<sp/>for<sp/>the<sp/>compositor<sp/>to<sp/>catch<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(1280,<sp/>1024),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>we<sp/>don&apos;t<sp/>have<sp/>a<sp/>way<sp/>to<sp/>communicate<sp/>with<sp/>the<sp/>client,<sp/>manually<sp/>activate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>input<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>inputMethodActiveSpy(<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">Test::inputMethod</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a8b1aedbad85f1bc38ce7613e190bcc0d" kindref="member">Test::MockInputMethod::activate</ref>);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>kwinApp()-&gt;inputMethod()-&gt;setActive(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(inputMethodActiveSpy.count()<sp/>||<sp/>inputMethodActiveSpy.wait());</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Without<sp/>a<sp/>way<sp/>to<sp/>communicate<sp/>to<sp/>the<sp/>client,<sp/>we<sp/>send<sp/>fake<sp/>key<sp/>events.<sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>means<sp/>the<sp/>client<sp/>needs<sp/>to<sp/>be<sp/>able<sp/>to<sp/>receive<sp/>them,<sp/>so<sp/>create<sp/>a<sp/>keyboard<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>client<sp/>and<sp/>listen<sp/>whether<sp/>it<sp/>gets<sp/>the<sp/>right<sp/>events.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>keyboard<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a5f6b6eee3f6e90f7c4693e06af67d91d" kindref="member">Test::waylandSeat</ref>()-&gt;createKeyboard(window);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>keySpy(keyboard,<sp/>&amp;KWayland::Client::Keyboard::keyChanged);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>context<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">Test::inputMethod</ref>()-&gt;<ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a65c83c45b40f087556bb2c2d30800563" kindref="member">context</ref>();</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(context);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>send<sp/>a<sp/>simple<sp/>one-character<sp/>string<sp/>and<sp/>check<sp/>to<sp/>see<sp/>if<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>generates<sp/>a<sp/>key<sp/>press<sp/>followed<sp/>by<sp/>a<sp/>key<sp/>release<sp/>on<sp/>the<sp/>client<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_commit_string(context,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>keySpy.wait();</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(keySpy.count()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compare<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QList&lt;QVariant&gt;<sp/>&amp;<ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>,<sp/>quint32<sp/>key,<sp/>KWayland::Client::Keyboard::KeyState<sp/><ref refid="x11keyread_8cpp_1a0db44bec6a2ebf1a0cc819b5c9191cee" kindref="member">state</ref>)<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inputKey<sp/>=<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.at(0).toInt();</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inputState<sp/>=<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>.at(1).value&lt;KWayland::Client::Keyboard::KeyState&gt;();</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(inputKey,<sp/>key);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(inputState,<sp/><ref refid="x11keyread_8cpp_1a0db44bec6a2ebf1a0cc819b5c9191cee" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>compare(keySpy.at(0),<sp/>KEY_A,<sp/>KWayland::Client::Keyboard::KeyState::Pressed);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>compare(keySpy.at(1),<sp/>KEY_A,<sp/>KWayland::Client::Keyboard::KeyState::Released);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>keySpy.clear();</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Capital<sp/>letters<sp/>are<sp/>recognised<sp/>and<sp/>sent<sp/>as<sp/>a<sp/>combination<sp/>of<sp/>Shift<sp/>+<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>letter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_commit_string(context,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>keySpy.wait();</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(keySpy.count()<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>compare(keySpy.at(0),<sp/>KEY_LEFTSHIFT,<sp/>KWayland::Client::Keyboard::KeyState::Pressed);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>compare(keySpy.at(1),<sp/>KEY_A,<sp/>KWayland::Client::Keyboard::KeyState::Pressed);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>compare(keySpy.at(2),<sp/>KEY_A,<sp/>KWayland::Client::Keyboard::KeyState::Released);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>compare(keySpy.at(3),<sp/>KEY_LEFTSHIFT,<sp/>KWayland::Client::Keyboard::KeyState::Released);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>keySpy.clear();</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Special<sp/>keys<sp/>are<sp/>not<sp/>sent<sp/>through<sp/>commit_string<sp/>but<sp/>instead<sp/>use<sp/>keysym.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>enter<sp/>=<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>()-&gt;<ref refid="class_k_win_1_1_input_redirection_1a246b282229b36fc27552487cdd3329d7" kindref="member">keyboard</ref>()-&gt;<ref refid="class_k_win_1_1_keyboard_input_redirection_1a830fc6a1e6dc36cfd3436e43023c11a2" kindref="member">xkb</ref>()-&gt;<ref refid="class_k_win_1_1_xkb_1a585b2b4cad89f9b4e39d11883e602eb9" kindref="member">toKeysym</ref>(KEY_ENTER);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_keysym(context,<sp/>0,<sp/>0,<sp/>enter,<sp/>uint32_t(WL_KEYBOARD_KEY_STATE_PRESSED),<sp/>0);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_keysym(context,<sp/>0,<sp/>1,<sp/>enter,<sp/>uint32_t(WL_KEYBOARD_KEY_STATE_RELEASED),<sp/>0);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>keySpy.wait();</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(keySpy.count()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>compare(keySpy.at(0),<sp/>KEY_ENTER,<sp/>KWayland::Client::Keyboard::KeyState::Pressed);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>compare(keySpy.at(1),<sp/>KEY_ENTER,<sp/>KWayland::Client::Keyboard::KeyState::Released);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface.reset();</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>kwinApp()-&gt;inputMethod()-&gt;setActive(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="743"><highlight class="normal">}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InputMethodTest::testOverlayPositioning_data()</highlight></codeline>
<codeline lineno="746"><highlight class="normal">{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;QRect&gt;(</highlight><highlight class="stringliteral">&quot;cursorRectangle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;QRect&gt;(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;regular&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>QRect(10,<sp/>20,<sp/>30,<sp/>40)<sp/>&lt;&lt;<sp/>QRect(60,<sp/>160,<sp/>200,<sp/>50);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;offscreen-left&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>QRect(-200,<sp/>40,<sp/>30,<sp/>40)<sp/>&lt;&lt;<sp/>QRect(0,<sp/>180,<sp/>200,<sp/>50);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;offscreen-right&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>QRect(1200,<sp/>40,<sp/>30,<sp/>40)<sp/>&lt;&lt;<sp/>QRect(1080,<sp/>180,<sp/>200,<sp/>50);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;offscreen-top&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>QRect(1200,<sp/>-400,<sp/>30,<sp/>40)<sp/>&lt;&lt;<sp/>QRect(1080,<sp/>0,<sp/>200,<sp/>50);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>it<sp/>is<sp/>flipped<sp/>near<sp/>the<sp/>bottom<sp/>of<sp/>screen<sp/>(anchor<sp/>point<sp/>844<sp/>+<sp/>100<sp/>+<sp/>40<sp/>=<sp/>1024<sp/>-<sp/>40)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;offscreen-bottom-flip&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>QRect(1200,<sp/>844,<sp/>30,<sp/>40)<sp/>&lt;&lt;<sp/>QRect(1080,<sp/>894,<sp/>200,<sp/>50);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Top<sp/>is<sp/>(screen<sp/>height<sp/>1024<sp/>-<sp/>window<sp/>height<sp/>50)<sp/>=<sp/>984</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;offscreen-bottom-slide&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>QRect(1200,<sp/>1200,<sp/>30,<sp/>40)<sp/>&lt;&lt;<sp/>QRect(1080,<sp/>974,<sp/>200,<sp/>50);</highlight></codeline>
<codeline lineno="758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InputMethodTest::testOverlayPositioning()</highlight></codeline>
<codeline lineno="761"><highlight class="normal">{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(QRect,<sp/>cursorRectangle);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(QRect,<sp/>result);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">Test::inputMethod</ref>()-&gt;<ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a58bdf66bf3e7508ae7e2602d0f6e88e7" kindref="member">setMode</ref>(Test::MockInputMethod::Mode::Overlay);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>touchNow();</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowAddedSpy(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_workspace_1a8f82a0ac5517ddb86629fa3f8243e388" kindref="member">Workspace::windowAdded</ref>);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowRemovedSpy(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_workspace_1a56e58d6f7f7b1c0cca13384068f2cdd2" kindref="member">Workspace::windowRemoved</ref>);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>activateSpy(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_input_method_1ab5aa0575d7741abf17220c55f4ba8753" kindref="member">InputMethod::activeChanged</ref>);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::TextInput&gt;<sp/>textInput(<ref refid="namespace_k_win_1_1_test_1aba9aad15d03110344917226405ea7a6e" kindref="member">Test::waylandTextInputManager</ref>()-&gt;createTextInput(<ref refid="namespace_k_win_1_1_test_1a5f6b6eee3f6e90f7c4693e06af67d91d" kindref="member">Test::waylandSeat</ref>()));</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>xdg_toplevel<sp/>surface<sp/>and<sp/>wait<sp/>for<sp/>the<sp/>compositor<sp/>to<sp/>catch<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>the<sp/>window<sp/>smaller<sp/>than<sp/>the<sp/>screen<sp/>and<sp/>move<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(1080,<sp/>824),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;move(QPointF(50,<sp/>100));</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;<ref refid="class_k_win_1_1_wayland_server_1a5eb1a9f63d831179f22f4baf0c630f0e" kindref="member">seat</ref>()-&gt;<ref refid="class_k_win_1_1_seat_interface_1a7f66fb5fb1cf10789ea3d2d0f6938b99" kindref="member">setFocusedTextInputSurface</ref>(window-&gt;surface());</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>textInput-&gt;setCursorRectangle(cursorRectangle);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>textInput-&gt;enable(surface.get());</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Overlay<sp/>is<sp/>shown<sp/>upon<sp/>activate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(windowAddedSpy.wait());</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;activeWindow(),<sp/>window);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(windowAddedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(activateSpy.count()<sp/>||<sp/>activateSpy.wait());</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>keyboardWindow<sp/>=<sp/>kwinApp()-&gt;inputMethod()-&gt;panel();</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(keyboardWindow);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>the<sp/>overlay<sp/>window<sp/>is<sp/>placed<sp/>with<sp/>cursor<sp/>rectangle<sp/>+<sp/>window<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(keyboardWindow-&gt;frameGeometry(),<sp/>result);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>the<sp/>test<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface.reset();</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">Test::inputMethod</ref>()-&gt;<ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a58bdf66bf3e7508ae7e2602d0f6e88e7" kindref="member">setMode</ref>(Test::MockInputMethod::Mode::TopLevel);</highlight></codeline>
<codeline lineno="803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InputMethodTest::testV3AutoCommit()</highlight></codeline>
<codeline lineno="806"><highlight class="normal">{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">Test::inputMethod</ref>()-&gt;<ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a58bdf66bf3e7508ae7e2602d0f6e88e7" kindref="member">setMode</ref>(Test::MockInputMethod::Mode::Overlay);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>xdg_toplevel<sp/>surface<sp/>and<sp/>wait<sp/>for<sp/>the<sp/>compositor<sp/>to<sp/>catch<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(1280,<sp/>1024),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>textInputV3<sp/>=<sp/>std::make_unique&lt;Test::TextInputV3&gt;();</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;init(<ref refid="namespace_k_win_1_1_test_1a283aa125534a50e9477ee94e47057e9d" kindref="member">Test::waylandTextInputManagerV3</ref>()-&gt;get_text_input(*(<ref refid="namespace_k_win_1_1_test_1a5f6b6eee3f6e90f7c4693e06af67d91d" kindref="member">Test::waylandSeat</ref>())));</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;enable();</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>textInputPreeditSpy(textInputV3.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_text_input_v3_1adac71f5c1aaa175ca5f79bf3a730c22d" kindref="member">Test::TextInputV3::preeditString</ref>);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>textInputCommitTextSpy(textInputV3.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_text_input_v3_1a252265880e006682a9c80f7a1397029d" kindref="member">Test::TextInputV3::commitString</ref>);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>inputMethodActiveSpy(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_input_method_1ab5aa0575d7741abf17220c55f4ba8753" kindref="member">InputMethod::activeChanged</ref>);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>inputMethodActivateSpy(<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">Test::inputMethod</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a8b1aedbad85f1bc38ce7613e190bcc0d" kindref="member">Test::MockInputMethod::activate</ref>);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>enabling<sp/>the<sp/>text-input<sp/>should<sp/>not<sp/>show<sp/>it<sp/>but<sp/>rather<sp/>on<sp/>commit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;commit();</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(inputMethodActiveSpy.count()<sp/>||<sp/>inputMethodActiveSpy.wait());</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(kwinApp()-&gt;<ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">inputMethod</ref>()-&gt;isActive());</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(inputMethodActivateSpy.wait());</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>context<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" kindref="member">Test::inputMethod</ref>()-&gt;<ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a65c83c45b40f087556bb2c2d30800563" kindref="member">context</ref>();</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_string(context,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;preedit1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;commit1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(textInputPreeditSpy.wait());</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(textInputCommitTextSpy.count()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>******************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Non-grabbing<sp/>key<sp/>press</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timestamp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a24e61eb6fba767f564d715bbae7a2e09" kindref="member">Test::keyboardKeyPressed</ref>(KEY_A,<sp/>timestamp++);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a0e41594af5bb5f89fd58919de458c7c5" kindref="member">Test::keyboardKeyReleased</ref>(KEY_A,<sp/>timestamp++);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(textInputCommitTextSpy.wait());</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputCommitTextSpy.last()[0].toString(),<sp/></highlight><highlight class="stringliteral">&quot;commit1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last()[0].toString(),<sp/>QString());</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>**************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mouse<sp/>clicks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowAddedSpy(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_workspace_1a8f82a0ac5517ddb86629fa3f8243e388" kindref="member">Workspace::windowAdded</ref>);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;disable();</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;enable();</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QList&lt;Window<sp/>*&gt;<sp/>windows<sp/>=<sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1a56ba55626239671625164a73ef19f775" kindref="member">windows</ref>();</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(windows.begin(),<sp/>windows.end(),<sp/>[](Window<sp/>*w)<sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>w-&gt;isInputMethod();</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(it<sp/>!=<sp/>windows.end());</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>textInputWindow<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;commit();</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_string(context,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;preedit2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;commit2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(textInputPreeditSpy.wait());</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last()[0].toString(),<sp/>QString(</highlight><highlight class="stringliteral">&quot;preedit2&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mouse<sp/>clicks<sp/>on<sp/>a<sp/>VK<sp/>does<sp/>not<sp/>submit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a86e49856d56b03d329f477b0df28cec2" kindref="member">Test::pointerMotion</ref>(textInputWindow-&gt;frameGeometry().center(),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a7ed1822cd70b207b310b8b892241d15e" kindref="member">Test::pointerButtonPressed</ref>(1,<sp/>timestamp++);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1abc9def44c9309a5e696d48288462bd08" kindref="member">Test::pointerButtonReleased</ref>(1,<sp/>timestamp++);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!textInputCommitTextSpy.wait(20));</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mouse<sp/>clicks<sp/>on<sp/>our<sp/>main<sp/>window<sp/>submits<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a86e49856d56b03d329f477b0df28cec2" kindref="member">Test::pointerMotion</ref>(window-&gt;frameGeometry().center(),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a7ed1822cd70b207b310b8b892241d15e" kindref="member">Test::pointerButtonPressed</ref>(1,<sp/>timestamp++);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1abc9def44c9309a5e696d48288462bd08" kindref="member">Test::pointerButtonReleased</ref>(1,<sp/>timestamp++);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(textInputCommitTextSpy.wait());</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputCommitTextSpy.last()[0].toString(),<sp/></highlight><highlight class="stringliteral">&quot;commit2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last()[0].toString(),<sp/>QString());</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*****************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Change<sp/>focus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>textInputV3-&gt;commit();</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_input_method_context_v1_preedit_string(context,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;preedit3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;commit3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(textInputPreeditSpy.wait());</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last()[0].toString(),<sp/>QString(</highlight><highlight class="stringliteral">&quot;preedit3&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface2(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface2(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface2.get()));</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window2<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface2.get(),<sp/>QSize(1280,<sp/>1024),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window2-&gt;isActive());</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>these<sp/>variables<sp/>refer<sp/>to<sp/>the<sp/>old<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(textInputCommitTextSpy.wait());</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputCommitTextSpy.last()[0].toString(),<sp/></highlight><highlight class="stringliteral">&quot;commit3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(textInputPreeditSpy.last()[0].toString(),<sp/>QString());</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface.reset();</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface2.reset();</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window2));</highlight></codeline>
<codeline lineno="899"><highlight class="normal">}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><ref refid="kwin__wayland__test_8h_1a105fcd0c1d5eb52370ab30db8ad37c4c" kindref="member">WAYLANDTEST_MAIN</ref>(<ref refid="class_input_method_test" kindref="compound">InputMethodTest</ref>)</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;inputmethod_test.moc&quot;</highlight></codeline>
    </programlisting>
    <location file="kwin/autotests/integration/inputmethod_test.cpp"/>
  </compounddef>
</doxygen>
