<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_locked_pointer_v1_interface" kind="class" language="C++" prot="public">
    <compoundname>KWin::LockedPointerV1Interface</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QObject</basecompoundref>
    <includes refid="pointerconstraints__v1_8h" local="no">pointerconstraints_v1.h</includes>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_k_win_1_1_locked_pointer_v1_interface_1a6898cb9ae5dae696ff59959f040f8193" prot="public" static="no" strong="yes">
        <type>uint</type>
        <name>LifeTime</name>
        <qualifiedname>KWin::LockedPointerV1Interface::LifeTime</qualifiedname>
        <enumvalue id="class_k_win_1_1_locked_pointer_v1_interface_1a6898cb9ae5dae696ff59959f040f8193ac7fc2ee61fad0e2bba6754efdee31481" prot="public">
          <name>OneShot</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_locked_pointer_v1_interface_1a6898cb9ae5dae696ff59959f040f8193a5fe7b9358c9cb1b9eaa8d5aec000def4" prot="public">
          <name>Persistent</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/pointerconstraints_v1.h" line="67" column="5" bodyfile="kwin/src/wayland/pointerconstraints_v1.h" bodystart="67" bodyend="70"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_locked_pointer_v1_interface_1ac819fc2e0b69c08a08faf367538aaec2" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_locked_pointer_v1_interface_private" kindref="compound">LockedPointerV1InterfacePrivate</ref> &gt;</type>
        <definition>std::unique_ptr&lt;LockedPointerV1InterfacePrivate&gt; KWin::LockedPointerV1Interface::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <qualifiedname>KWin::LockedPointerV1Interface::d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/pointerconstraints_v1.h" line="155" column="21" bodyfile="kwin/src/wayland/pointerconstraints_v1.h" bodystart="155" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_k_win_1_1_locked_pointer_v1_interface_1ac5f9dcdfc038266b138a6caa040bdea1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class LockedPointerV1InterfacePrivate</definition>
        <argsstring></argsstring>
        <name>LockedPointerV1InterfacePrivate</name>
        <qualifiedname>KWin::LockedPointerV1Interface::LockedPointerV1InterfacePrivate</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_locked_pointer_v1_interface_private" kindref="compound">LockedPointerV1InterfacePrivate</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/pointerconstraints_v1.h" line="156" column="18" bodyfile="kwin/src/wayland/pointerconstraints_v1.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_k_win_1_1_locked_pointer_v1_interface_1a26d029fc2864b7c79919c27080946a77" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class PointerConstraintsV1InterfacePrivate</definition>
        <argsstring></argsstring>
        <name>PointerConstraintsV1InterfacePrivate</name>
        <qualifiedname>KWin::LockedPointerV1Interface::PointerConstraintsV1InterfacePrivate</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_pointer_constraints_v1_interface_private" kindref="compound">PointerConstraintsV1InterfacePrivate</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/pointerconstraints_v1.h" line="157" column="18" bodyfile="kwin/src/wayland/pointerconstraints_v1.h" bodystart="157" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_locked_pointer_v1_interface_1ac3dcd731450b8e14f0f4363384b32cc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::LockedPointerV1Interface::~LockedPointerV1Interface</definition>
        <argsstring>() override</argsstring>
        <name>~LockedPointerV1Interface</name>
        <qualifiedname>KWin::LockedPointerV1Interface::~LockedPointerV1Interface</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/pointerconstraints_v1.h" line="65" column="5" bodyfile="kwin/src/wayland/pointerconstraints_v1.cpp" bodystart="208" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_locked_pointer_v1_interface_1ae3ce8e22e8796b6c1423e82ab542769d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_locked_pointer_v1_interface_1a6898cb9ae5dae696ff59959f040f8193" kindref="member">LifeTime</ref></type>
        <definition>LockedPointerV1Interface::LifeTime KWin::LockedPointerV1Interface::lifeTime</definition>
        <argsstring>() const</argsstring>
        <name>lifeTime</name>
        <qualifiedname>KWin::LockedPointerV1Interface::lifeTime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/pointerconstraints_v1.h" line="72" column="14" bodyfile="kwin/src/wayland/pointerconstraints_v1.cpp" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_locked_pointer_v1_interface_1a8a7e02cdc7691a66337e52f4c1f548da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRegion</type>
        <definition>QRegion KWin::LockedPointerV1Interface::region</definition>
        <argsstring>() const</argsstring>
        <name>region</name>
        <qualifiedname>KWin::LockedPointerV1Interface::region</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The intersection of this region and the input region of the <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> is used to determine where the pointer must be in order for the lock to activate. It is up to the compositor whether to warp the pointer or require some kind of user interaction for the lock to activate.</para>
<para>If the region is empty the <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> input region is used.</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_locked_pointer_v1_interface_1ae68079a23d4fece926fe10dbcae56f41" kindref="member">regionChanged</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_surface_interface_1a2252ccfdaefae7974f9682cb5d190cda" kindref="member">SurfaceInterface::input</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/pointerconstraints_v1.h" line="85" column="13" bodyfile="kwin/src/wayland/pointerconstraints_v1.cpp" bodystart="217" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_locked_pointer_v1_interface_1ae8e528edfb8f126c2571c2b90680031a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::LockedPointerV1Interface::cursorPositionHint</definition>
        <argsstring>() const</argsstring>
        <name>cursorPositionHint</name>
        <qualifiedname>KWin::LockedPointerV1Interface::cursorPositionHint</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicates where the mouse cursor should be positioned after it has been unlocked again. The compositor can warp the cursor at this moment to the position. For that it will not Q_EMIT any relative motion events. The hint is relative to the top-left corner of the surface the lock was applied to. Only non-negative x and y values are allowed. Otherwise the hint is invalid and should be ignored by the compositor.</para>
<para>In case the client never set the hint, an invalid one will be returned.</para>
<para>This function should be called when the compositor decides to break the lock or the client unbinds the resource. To set the position in this case the compositor should call this function when the aboutToBeUnbound signal has been emitted.</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_locked_pointer_v1_interface_1a875294bc5d88bc481f8b26decdec08d5" kindref="member">cursorPositionHintChanged</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/pointerconstraints_v1.h" line="102" column="13" bodyfile="kwin/src/wayland/pointerconstraints_v1.cpp" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_locked_pointer_v1_interface_1a99df83e3fc7398070fb8365238adc41e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::LockedPointerV1Interface::isLocked</definition>
        <argsstring>() const</argsstring>
        <name>isLocked</name>
        <qualifiedname>KWin::LockedPointerV1Interface::isLocked</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_compositor" kindref="compound">Compositor</ref> set this pointer lock to be active. <simplesect kind="see"><para><ref refid="class_k_win_1_1_locked_pointer_v1_interface_1aefbc342794b5d36fca6efadf22a73b66" kindref="member">setLocked</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_locked_pointer_v1_interface_1a29cd197400c6713f86da269db910eebc" kindref="member">lockedChanged</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/pointerconstraints_v1.h" line="109" column="10" bodyfile="kwin/src/wayland/pointerconstraints_v1.cpp" bodystart="227" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_locked_pointer_v1_interface_1aefbc342794b5d36fca6efadf22a73b66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::LockedPointerV1Interface::setLocked</definition>
        <argsstring>(bool locked)</argsstring>
        <name>setLocked</name>
        <qualifiedname>KWin::LockedPointerV1Interface::setLocked</qualifiedname>
        <param>
          <type>bool</type>
          <declname>locked</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Activates or deactivates the lock.</para>
<para>A pointer lock can only be activated if the <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> this <ref refid="class_k_win_1_1_locked_pointer_v1_interface" kindref="compound">LockedPointerV1Interface</ref> was created for has pointer focus and the pointer is inside the <computeroutput><ref refid="class_k_win_1_1_locked_pointer_v1_interface_1a8a7e02cdc7691a66337e52f4c1f548da" kindref="member">region</ref></computeroutput>.</para>
<para>Unlocking resets the cursor position hint.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>locked</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the lock should be active </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_locked_pointer_v1_interface_1a99df83e3fc7398070fb8365238adc41e" kindref="member">isLocked</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_locked_pointer_v1_interface_1a29cd197400c6713f86da269db910eebc" kindref="member">lockedChanged</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/pointerconstraints_v1.h" line="124" column="10" bodyfile="kwin/src/wayland/pointerconstraints_v1.cpp" bodystart="232" bodyend="247"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="signal">
      <memberdef kind="signal" id="class_k_win_1_1_locked_pointer_v1_interface_1ae9ccc731dabf384a8e340427e0ba4496" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::LockedPointerV1Interface::aboutToBeDestroyed</definition>
        <argsstring>()</argsstring>
        <name>aboutToBeDestroyed</name>
        <qualifiedname>KWin::LockedPointerV1Interface::aboutToBeDestroyed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is signal is emitted when the locked pointer is about to be destroyed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/pointerconstraints_v1.h" line="130" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_locked_pointer_v1_interface_1ae68079a23d4fece926fe10dbcae56f41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::LockedPointerV1Interface::regionChanged</definition>
        <argsstring>()</argsstring>
        <name>regionChanged</name>
        <qualifiedname>KWin::LockedPointerV1Interface::regionChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted whenever the region changes. This happens when the parent <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> gets committed <simplesect kind="see"><para><ref refid="class_k_win_1_1_locked_pointer_v1_interface_1a8a7e02cdc7691a66337e52f4c1f548da" kindref="member">region</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/pointerconstraints_v1.h" line="137" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_locked_pointer_v1_interface_1a875294bc5d88bc481f8b26decdec08d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::LockedPointerV1Interface::cursorPositionHintChanged</definition>
        <argsstring>()</argsstring>
        <name>cursorPositionHintChanged</name>
        <qualifiedname>KWin::LockedPointerV1Interface::cursorPositionHintChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted whenever the cursor position hint changes. This happens when the parent <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> gets committed <simplesect kind="see"><para><ref refid="class_k_win_1_1_locked_pointer_v1_interface_1ae8e528edfb8f126c2571c2b90680031a" kindref="member">cursorPositionHint</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/pointerconstraints_v1.h" line="144" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_locked_pointer_v1_interface_1a29cd197400c6713f86da269db910eebc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::LockedPointerV1Interface::lockedChanged</definition>
        <argsstring>()</argsstring>
        <name>lockedChanged</name>
        <qualifiedname>KWin::LockedPointerV1Interface::lockedChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted whenever the <computeroutput><ref refid="class_k_win_1_1_locked_pointer_v1_interface_1a99df83e3fc7398070fb8365238adc41e" kindref="member">isLocked</ref></computeroutput> state changes. <simplesect kind="see"><para><ref refid="class_k_win_1_1_locked_pointer_v1_interface_1a99df83e3fc7398070fb8365238adc41e" kindref="member">isLocked</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_locked_pointer_v1_interface_1aefbc342794b5d36fca6efadf22a73b66" kindref="member">setLocked</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/pointerconstraints_v1.h" line="151" column="10"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_k_win_1_1_locked_pointer_v1_interface_1a43ac5910ed062d3c834f5322b2bd03c4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::LockedPointerV1Interface::LockedPointerV1Interface</definition>
        <argsstring>(SurfaceInterface *surface, LifeTime lifeTime, const QRegion &amp;region, ::wl_resource *resource)</argsstring>
        <name>LockedPointerV1Interface</name>
        <qualifiedname>KWin::LockedPointerV1Interface::LockedPointerV1Interface</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_locked_pointer_v1_interface_1a6898cb9ae5dae696ff59959f040f8193" kindref="member">LifeTime</ref></type>
          <declname>lifeTime</declname>
        </param>
        <param>
          <type>const QRegion &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>::wl_resource *</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/pointerconstraints_v1.h" line="154" column="5" bodyfile="kwin/src/wayland/pointerconstraints_v1.cpp" bodystart="199" bodyend="206"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="class_k_win_1_1_locked_pointer_v1_interface" kindref="compound">LockedPointerV1Interface</ref> lets the client request to disable movements of the virtual pointer (i.e. the cursor), effectively locking the pointer to a position.</para>
<para>It is up to the compositor whether the lock gets activated. To activate it needs to use <computeroutput><ref refid="class_k_win_1_1_locked_pointer_v1_interface_1aefbc342794b5d36fca6efadf22a73b66" kindref="member">LockedPointerV1Interface::setLocked</ref></computeroutput>. The compositor needs to ensure that the <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> has pointer focus and that the pointer is inside the <computeroutput><ref refid="class_k_win_1_1_locked_pointer_v1_interface_1a8a7e02cdc7691a66337e52f4c1f548da" kindref="member">LockedPointerV1Interface::region</ref></computeroutput> when it activates the lock.</para>
<para>While the lock is active the <ref refid="class_k_win_1_1_pointer_interface" kindref="compound">PointerInterface</ref> does no longer Q_EMIT pointer motion events, but still emits relative pointer motion events. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>KWin::LockedPointerV1Interface</label>
        <link refid="class_k_win_1_1_locked_pointer_v1_interface"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>KWin::LockedPointerV1Interface</label>
        <link refid="class_k_win_1_1_locked_pointer_v1_interface"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/wayland/pointerconstraints_v1.h" line="60" column="1" bodyfile="kwin/src/wayland/pointerconstraints_v1.h" bodystart="61" bodyend="158"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_locked_pointer_v1_interface_1ae9ccc731dabf384a8e340427e0ba4496" prot="public" virt="non-virtual"><scope>KWin::LockedPointerV1Interface</scope><name>aboutToBeDestroyed</name></member>
      <member refid="class_k_win_1_1_locked_pointer_v1_interface_1ae8e528edfb8f126c2571c2b90680031a" prot="public" virt="non-virtual"><scope>KWin::LockedPointerV1Interface</scope><name>cursorPositionHint</name></member>
      <member refid="class_k_win_1_1_locked_pointer_v1_interface_1a875294bc5d88bc481f8b26decdec08d5" prot="public" virt="non-virtual"><scope>KWin::LockedPointerV1Interface</scope><name>cursorPositionHintChanged</name></member>
      <member refid="class_k_win_1_1_locked_pointer_v1_interface_1ac819fc2e0b69c08a08faf367538aaec2" prot="private" virt="non-virtual"><scope>KWin::LockedPointerV1Interface</scope><name>d</name></member>
      <member refid="class_k_win_1_1_locked_pointer_v1_interface_1a99df83e3fc7398070fb8365238adc41e" prot="public" virt="non-virtual"><scope>KWin::LockedPointerV1Interface</scope><name>isLocked</name></member>
      <member refid="class_k_win_1_1_locked_pointer_v1_interface_1a6898cb9ae5dae696ff59959f040f8193" prot="public" virt="non-virtual"><scope>KWin::LockedPointerV1Interface</scope><name>LifeTime</name></member>
      <member refid="class_k_win_1_1_locked_pointer_v1_interface_1ae3ce8e22e8796b6c1423e82ab542769d" prot="public" virt="non-virtual"><scope>KWin::LockedPointerV1Interface</scope><name>lifeTime</name></member>
      <member refid="class_k_win_1_1_locked_pointer_v1_interface_1a29cd197400c6713f86da269db910eebc" prot="public" virt="non-virtual"><scope>KWin::LockedPointerV1Interface</scope><name>lockedChanged</name></member>
      <member refid="class_k_win_1_1_locked_pointer_v1_interface_1a43ac5910ed062d3c834f5322b2bd03c4" prot="private" virt="non-virtual"><scope>KWin::LockedPointerV1Interface</scope><name>LockedPointerV1Interface</name></member>
      <member refid="class_k_win_1_1_locked_pointer_v1_interface_1ac5f9dcdfc038266b138a6caa040bdea1" prot="private" virt="non-virtual"><scope>KWin::LockedPointerV1Interface</scope><name>LockedPointerV1InterfacePrivate</name></member>
      <member refid="class_k_win_1_1_locked_pointer_v1_interface_1a26d029fc2864b7c79919c27080946a77" prot="private" virt="non-virtual"><scope>KWin::LockedPointerV1Interface</scope><name>PointerConstraintsV1InterfacePrivate</name></member>
      <member refid="class_k_win_1_1_locked_pointer_v1_interface_1a8a7e02cdc7691a66337e52f4c1f548da" prot="public" virt="non-virtual"><scope>KWin::LockedPointerV1Interface</scope><name>region</name></member>
      <member refid="class_k_win_1_1_locked_pointer_v1_interface_1ae68079a23d4fece926fe10dbcae56f41" prot="public" virt="non-virtual"><scope>KWin::LockedPointerV1Interface</scope><name>regionChanged</name></member>
      <member refid="class_k_win_1_1_locked_pointer_v1_interface_1aefbc342794b5d36fca6efadf22a73b66" prot="public" virt="non-virtual"><scope>KWin::LockedPointerV1Interface</scope><name>setLocked</name></member>
      <member refid="class_k_win_1_1_locked_pointer_v1_interface_1ac3dcd731450b8e14f0f4363384b32cc2" prot="public" virt="non-virtual"><scope>KWin::LockedPointerV1Interface</scope><name>~LockedPointerV1Interface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
