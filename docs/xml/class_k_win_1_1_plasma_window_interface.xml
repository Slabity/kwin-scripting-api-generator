<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_plasma_window_interface" kind="class" language="C++" prot="public">
    <compoundname>KWin::PlasmaWindowInterface</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QObject</basecompoundref>
    <includes refid="plasmawindowmanagement_8h" local="no">plasmawindowmanagement.h</includes>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_k_win_1_1_plasma_window_interface_1a397750661365f6976a1f166c6549ab57" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class PlasmaWindowManagementInterface</definition>
        <argsstring></argsstring>
        <name>PlasmaWindowManagementInterface</name>
        <qualifiedname>KWin::PlasmaWindowInterface::PlasmaWindowManagementInterface</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_plasma_window_management_interface" kindref="compound">PlasmaWindowManagementInterface</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="303" column="18" bodyfile="kwin/src/wayland/plasmawindowmanagement.h" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_k_win_1_1_plasma_window_interface_1a831daec9dc06df68d2834adcb9adcd56" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class PlasmaWindowInterfacePrivate</definition>
        <argsstring></argsstring>
        <name>PlasmaWindowInterfacePrivate</name>
        <qualifiedname>KWin::PlasmaWindowInterface::PlasmaWindowInterfacePrivate</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_plasma_window_interface_private" kindref="compound">PlasmaWindowInterfacePrivate</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="304" column="18" bodyfile="kwin/src/wayland/plasmawindowmanagement.h" bodystart="304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_k_win_1_1_plasma_window_interface_1a5e5d3c03e487c890fcbd3175f8f910b4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class PlasmaWindowManagementInterfacePrivate</definition>
        <argsstring></argsstring>
        <name>PlasmaWindowManagementInterfacePrivate</name>
        <qualifiedname>KWin::PlasmaWindowInterface::PlasmaWindowManagementInterfacePrivate</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_plasma_window_management_interface_private" kindref="compound">PlasmaWindowManagementInterfacePrivate</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="305" column="18" bodyfile="kwin/src/wayland/plasmawindowmanagement.h" bodystart="305" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_plasma_window_interface_1a9a338b5af36f183ac0f880c3b50f19fe" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_plasma_window_interface_private" kindref="compound">PlasmaWindowInterfacePrivate</ref> &gt;</type>
        <definition>std::unique_ptr&lt;PlasmaWindowInterfacePrivate&gt; KWin::PlasmaWindowInterface::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <qualifiedname>KWin::PlasmaWindowInterface::d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="308" column="21" bodyfile="kwin/src/wayland/plasmawindowmanagement.h" bodystart="308" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1aa04d2ce163e4dbf6cf6327662daa6a9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::PlasmaWindowInterface::~PlasmaWindowInterface</definition>
        <argsstring>() override</argsstring>
        <name>~PlasmaWindowInterface</name>
        <qualifiedname>KWin::PlasmaWindowInterface::~PlasmaWindowInterface</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="110" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1a80573f5db4b8d4e63414e25b4fd1338d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setTitle</definition>
        <argsstring>(const QString &amp;title)</argsstring>
        <name>setTitle</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setTitle</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>title</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="112" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="815" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1af189f3ab92f3ba0db0f9ed30b110c0d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setAppId</definition>
        <argsstring>(const QString &amp;appId)</argsstring>
        <name>setAppId</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setAppId</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>appId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="113" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="805" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1ab3bb5923033ca714ed8088c6224caadd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setPid</definition>
        <argsstring>(quint32 pid)</argsstring>
        <name>setPid</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setPid</qualifiedname>
        <param>
          <type>quint32</type>
          <declname>pid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="114" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="810" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1a1851c9ecab1b8046997007ca7f188b34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setActive</definition>
        <argsstring>(bool set)</argsstring>
        <name>setActive</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setActive</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="115" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="830" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1a74d69026d8853823ad10adfb9b079def" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setMinimized</definition>
        <argsstring>(bool set)</argsstring>
        <name>setMinimized</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setMinimized</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="116" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="855" bodyend="858"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1aa816f7165eabe4c161a6e0301bd3e4f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setMaximized</definition>
        <argsstring>(bool set)</argsstring>
        <name>setMaximized</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setMaximized</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="117" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="850" bodyend="853"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1af9b7155e23bf27b4c71f1b38b96d434b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setFullscreen</definition>
        <argsstring>(bool set)</argsstring>
        <name>setFullscreen</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setFullscreen</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="118" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="835" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1a6adad6faa1369caea7f2247c521b6e93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setKeepAbove</definition>
        <argsstring>(bool set)</argsstring>
        <name>setKeepAbove</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setKeepAbove</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="119" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="840" bodyend="843"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1a523be0d7bf56c882b76b6707e1bfcb08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setKeepBelow</definition>
        <argsstring>(bool set)</argsstring>
        <name>setKeepBelow</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setKeepBelow</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="120" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="845" bodyend="848"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1ae5d5fa02ba5f79f45e943e4b537783c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setOnAllDesktops</definition>
        <argsstring>(bool set)</argsstring>
        <name>setOnAllDesktops</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setOnAllDesktops</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="121" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="860" bodyend="896"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1acf400dca90efc8c69cabba6b47679755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setDemandsAttention</definition>
        <argsstring>(bool set)</argsstring>
        <name>setDemandsAttention</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setDemandsAttention</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="122" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="898" bodyend="901"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1a76623fe7fda59c5d82e48d9ff770d507" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setCloseable</definition>
        <argsstring>(bool set)</argsstring>
        <name>setCloseable</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setCloseable</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="123" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="903" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1ab864e1370658ea8df6a1bfba829f9e43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setMinimizeable</definition>
        <argsstring>(bool set)</argsstring>
        <name>setMinimizeable</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setMinimizeable</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="124" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="918" bodyend="921"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1aec03a1b263641e22f6e2ea161550d411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setMaximizeable</definition>
        <argsstring>(bool set)</argsstring>
        <name>setMaximizeable</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setMaximizeable</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="125" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="913" bodyend="916"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1a9fef82078fb5f3439886ca733c5fc13d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setFullscreenable</definition>
        <argsstring>(bool set)</argsstring>
        <name>setFullscreenable</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setFullscreenable</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="126" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="908" bodyend="911"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1ad366413d83045f68db3c4f4a45ea6ec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setSkipTaskbar</definition>
        <argsstring>(bool skip)</argsstring>
        <name>setSkipTaskbar</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setSkipTaskbar</qualifiedname>
        <param>
          <type>bool</type>
          <declname>skip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="127" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="923" bodyend="926"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1a6ea6cd455e6063c140fec0e9176bda4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setSkipSwitcher</definition>
        <argsstring>(bool skip)</argsstring>
        <name>setSkipSwitcher</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setSkipSwitcher</qualifiedname>
        <param>
          <type>bool</type>
          <declname>skip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="128" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="928" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1ae5be5bfa87795c08a46ff5b652a1f716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setShadeable</definition>
        <argsstring>(bool set)</argsstring>
        <name>setShadeable</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setShadeable</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="129" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="1027" bodyend="1030"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1a79dbd4a91668fc7757188b15cdb74228" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setShaded</definition>
        <argsstring>(bool set)</argsstring>
        <name>setShaded</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setShaded</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="130" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="1032" bodyend="1035"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1a73dc465e6ea8514c6b29f01220cfe87c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setMovable</definition>
        <argsstring>(bool set)</argsstring>
        <name>setMovable</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setMovable</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="131" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="1037" bodyend="1040"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1a39751f9168103f4f1a3e9e1ae0bcdafb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setResizable</definition>
        <argsstring>(bool set)</argsstring>
        <name>setResizable</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setResizable</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="132" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="1042" bodyend="1045"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1aa8b71bd6a7e9e18e8e663a75b0f5560d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setResourceName</definition>
        <argsstring>(const QString &amp;resourceName)</argsstring>
        <name>setResourceName</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setResourceName</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>resourceName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="133" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="938" bodyend="941"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1ab943b992d745296ecfddf7e89e1135c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setVirtualDesktopChangeable</definition>
        <argsstring>(bool set)</argsstring>
        <name>setVirtualDesktopChangeable</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setVirtualDesktopChangeable</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>FIXME: still relevant with new desktops? </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="137" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="1047" bodyend="1050"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1af470bf6d323f613f685aa5a9a7d84ceb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setNoBorder</definition>
        <argsstring>(bool set)</argsstring>
        <name>setNoBorder</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setNoBorder</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="138" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="1052" bodyend="1055"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1a6ef53ccadd45f89de6ae838d135f2012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setCanSetNoBorder</definition>
        <argsstring>(bool set)</argsstring>
        <name>setCanSetNoBorder</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setCanSetNoBorder</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="139" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="1057" bodyend="1060"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1af59329d6c1912ac5efe9af1d72b0aff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::unmap</definition>
        <argsstring>()</argsstring>
        <name>unmap</name>
        <qualifiedname>KWin::PlasmaWindowInterface::unmap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method removes the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> and the <ref refid="class_client" kindref="compound">Client</ref> is supposed to release the resource bound for this <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>.</para>
<para>No more events should be sent afterwards. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="147" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="820" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1ab36dd47acb794b263c1876e53ff2d2a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QHash&lt; <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *, QRect &gt;</type>
        <definition>QHash&lt; SurfaceInterface *, QRect &gt; KWin::PlasmaWindowInterface::minimizedGeometries</definition>
        <argsstring>() const</argsstring>
        <name>minimizedGeometries</name>
        <qualifiedname>KWin::PlasmaWindowInterface::minimizedGeometries</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Geometries of the taskbar entries, indicized by the surface of the panels </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="153" column="11" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="825" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1afaf22b72c83eb4af52036fe6a171210b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setParentWindow</definition>
        <argsstring>(PlasmaWindowInterface *parentWindow)</argsstring>
        <name>setParentWindow</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setParentWindow</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_plasma_window_interface" kindref="compound">PlasmaWindowInterface</ref> *</type>
          <declname>parentWindow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets this <ref refid="class_k_win_1_1_plasma_window_interface" kindref="compound">PlasmaWindowInterface</ref> as a transient window to <computeroutput>parentWindow</computeroutput>. If <computeroutput>parentWindow</computeroutput> is <computeroutput>nullptr</computeroutput>, the <ref refid="class_k_win_1_1_plasma_window_interface" kindref="compound">PlasmaWindowInterface</ref> is a toplevel window and does not have a parent window. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="160" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="1062" bodyend="1065"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1a2104b40a6f77fb2282ed77bfe47ebb8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setGeometry</definition>
        <argsstring>(const QRect &amp;geometry)</argsstring>
        <name>setGeometry</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setGeometry</qualifiedname>
        <param>
          <type>const QRect &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the window <computeroutput>geometry</computeroutput> of this PlasmaWindow.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geometry</parametername>
</parameternamelist>
<parameterdescription>
<para>The geometry in absolute coordinates </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="167" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="1067" bodyend="1070"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1a93759ca7452a835247a9ac054cbb1942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setIcon</definition>
        <argsstring>(const QIcon &amp;icon)</argsstring>
        <name>setIcon</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setIcon</qualifiedname>
        <param>
          <type>const QIcon &amp;</type>
          <declname>icon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the icon of the <ref refid="class_k_win_1_1_plasma_window_interface" kindref="compound">PlasmaWindowInterface</ref>.</para>
<para>In case the icon has a themed name, only the name is sent to the client. Otherwise the client is only informed that there is an icon and the client can request the icon in an asynchronous way by passing a file descriptor into which the icon will be serialized.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>icon</parametername>
</parameternamelist>
<parameterdescription>
<para>The new icon </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="179" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="933" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1a99b159687b69c4de522778edfb65eb86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::addPlasmaVirtualDesktop</definition>
        <argsstring>(const QString &amp;id)</argsstring>
        <name>addPlasmaVirtualDesktop</name>
        <qualifiedname>KWin::PlasmaWindowInterface::addPlasmaVirtualDesktop</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a new desktop to this window: a window can be on an arbitrary subset of virtual desktops. If it&apos;s on none it will be considered on all desktops. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="186" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="943" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1a6f88b20fbf1813b153ee2799255187b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::removePlasmaVirtualDesktop</definition>
        <argsstring>(const QString &amp;id)</argsstring>
        <name>removePlasmaVirtualDesktop</name>
        <qualifiedname>KWin::PlasmaWindowInterface::removePlasmaVirtualDesktop</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes a visrtual desktop from a window </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="191" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="969" bodyend="985"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1a8b827f38e17821c6662599456135798c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringList</type>
        <definition>QStringList KWin::PlasmaWindowInterface::plasmaVirtualDesktops</definition>
        <argsstring>() const</argsstring>
        <name>plasmaVirtualDesktops</name>
        <qualifiedname>KWin::PlasmaWindowInterface::plasmaVirtualDesktops</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The ids of all the desktops currently associated with this window. When a desktop is deleted it will be automatically removed from this list </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="197" column="17" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="987" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1ae612236db16e45a4b515ea3d34e90796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::addPlasmaActivity</definition>
        <argsstring>(const QString &amp;id)</argsstring>
        <name>addPlasmaActivity</name>
        <qualifiedname>KWin::PlasmaWindowInterface::addPlasmaActivity</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds an activity to this window: a window can be on an arbitrary subset of activities. If it&apos;s on none it will be considered on all activities. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="204" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="992" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1abec31c7702f96cbed2ecf30cc28a3c21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::removePlasmaActivity</definition>
        <argsstring>(const QString &amp;id)</argsstring>
        <name>removePlasmaActivity</name>
        <qualifiedname>KWin::PlasmaWindowInterface::removePlasmaActivity</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes an activity from a window </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="209" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="1008" bodyend="1020"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1a1af7be6fa94f0ecb42b8670a195d4ca2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringList</type>
        <definition>QStringList KWin::PlasmaWindowInterface::plasmaActivities</definition>
        <argsstring>() const</argsstring>
        <name>plasmaActivities</name>
        <qualifiedname>KWin::PlasmaWindowInterface::plasmaActivities</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The ids of all the activities currently associated with this window. When an activity is deleted it will be automatically removed from this list </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="215" column="17" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="1022" bodyend="1025"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1a17ae028be6e9fd0a21a596e786d3c631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setApplicationMenuPaths</definition>
        <argsstring>(const QString &amp;serviceName, const QString &amp;objectPath)</argsstring>
        <name>setApplicationMenuPaths</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setApplicationMenuPaths</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>serviceName</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>objectPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the application menu D-BUS service name and object path for the window. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="220" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="1072" bodyend="1075"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1a1d9a1288e46a44f65d1c68a033e3e880" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>quint32</type>
        <definition>quint32 KWin::PlasmaWindowInterface::internalId</definition>
        <argsstring>() const</argsstring>
        <name>internalId</name>
        <qualifiedname>KWin::PlasmaWindowInterface::internalId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the window internal id </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="225" column="13" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="1077" bodyend="1080"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1ab86b9aaed5327205fe218485f5c71cca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::PlasmaWindowInterface::uuid</definition>
        <argsstring>() const</argsstring>
        <name>uuid</name>
        <qualifiedname>KWin::PlasmaWindowInterface::uuid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a unique string that identifies this window </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="230" column="13" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="1082" bodyend="1085"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1a424df5e86d29e4feb4d3ed4d1f639dfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::setClientGeometry</definition>
        <argsstring>(const QRect &amp;geometry)</argsstring>
        <name>setClientGeometry</name>
        <qualifiedname>KWin::PlasmaWindowInterface::setClientGeometry</qualifiedname>
        <param>
          <type>const QRect &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the client geometry (i.e. without window border/style) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="235" column="10" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="1161" bodyend="1164"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="signal">
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1a438a40afd0f441cd5561f889d03964b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::closeRequested</definition>
        <argsstring>()</argsstring>
        <name>closeRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::closeRequested</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="238" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1a77978926bea6ca7bb8ac60e0f5a95c5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::moveRequested</definition>
        <argsstring>()</argsstring>
        <name>moveRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::moveRequested</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="239" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1a40f708c49bfc065329699f6b3f5549f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::resizeRequested</definition>
        <argsstring>()</argsstring>
        <name>resizeRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::resizeRequested</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="240" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1a52c6e871737730a382b1bb1177ea894a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::activeRequested</definition>
        <argsstring>(bool set)</argsstring>
        <name>activeRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::activeRequested</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="241" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1a4fc60347557ab900fb276c0efb98e71a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::minimizedRequested</definition>
        <argsstring>(bool set)</argsstring>
        <name>minimizedRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::minimizedRequested</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="242" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1a1bef6f63d52ecbbbea784e7f7427a5a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::maximizedRequested</definition>
        <argsstring>(bool set)</argsstring>
        <name>maximizedRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::maximizedRequested</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="243" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1a66707c39bc81d7783dff25e4163e82ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::fullscreenRequested</definition>
        <argsstring>(bool set)</argsstring>
        <name>fullscreenRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::fullscreenRequested</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="244" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1a154a36f9af8c59844f2671bfe51b789f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::keepAboveRequested</definition>
        <argsstring>(bool set)</argsstring>
        <name>keepAboveRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::keepAboveRequested</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="245" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1a16001f94d6db86d77799195fdaa14e74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::keepBelowRequested</definition>
        <argsstring>(bool set)</argsstring>
        <name>keepBelowRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::keepBelowRequested</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="246" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1af492ad0aa1b41ef15722338ff3ec3d1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::demandsAttentionRequested</definition>
        <argsstring>(bool set)</argsstring>
        <name>demandsAttentionRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::demandsAttentionRequested</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="247" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1ad869a918cb15ee3b04a8282975d2b16a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::closeableRequested</definition>
        <argsstring>(bool set)</argsstring>
        <name>closeableRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::closeableRequested</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="248" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1ab7690543da7f46e79c3acab2454ff2b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::minimizeableRequested</definition>
        <argsstring>(bool set)</argsstring>
        <name>minimizeableRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::minimizeableRequested</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="249" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1ad863f9b1eab3706d156b00de56d2d910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::maximizeableRequested</definition>
        <argsstring>(bool set)</argsstring>
        <name>maximizeableRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::maximizeableRequested</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="250" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1a8efbea41eb6f5fa041395191232085ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::fullscreenableRequested</definition>
        <argsstring>(bool set)</argsstring>
        <name>fullscreenableRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::fullscreenableRequested</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="251" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1aada5a67ab6832d9773bf3c6298e21c9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::skipTaskbarRequested</definition>
        <argsstring>(bool set)</argsstring>
        <name>skipTaskbarRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::skipTaskbarRequested</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="252" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1a6bd6603fccedbe9d8fd099d1ccccfab1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::skipSwitcherRequested</definition>
        <argsstring>(bool set)</argsstring>
        <name>skipSwitcherRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::skipSwitcherRequested</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="253" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1a2cf3d3adbc0b4191dff455ef47454ccd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QRect</type>
        <definition>QRect KWin::PlasmaWindowInterface::minimizedGeometriesChanged</definition>
        <argsstring>()</argsstring>
        <name>minimizedGeometriesChanged</name>
        <qualifiedname>KWin::PlasmaWindowInterface::minimizedGeometriesChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="254" column="11"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1a04828c784e7175171cfa57a5b1953f34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::shadeableRequested</definition>
        <argsstring>(bool set)</argsstring>
        <name>shadeableRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::shadeableRequested</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="255" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1a0634235401ad741b7c7dedb02bcf783a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::shadedRequested</definition>
        <argsstring>(bool set)</argsstring>
        <name>shadedRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::shadedRequested</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="256" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1a2139e081e26385f81d6a3990341e289e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::movableRequested</definition>
        <argsstring>(bool set)</argsstring>
        <name>movableRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::movableRequested</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="257" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1a380c4385bcc44253b34f964a610e5251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::resizableRequested</definition>
        <argsstring>(bool set)</argsstring>
        <name>resizableRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::resizableRequested</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="258" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1a637c58977c775d159286da89d1dd640c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::virtualDesktopChangeableRequested</definition>
        <argsstring>(bool set)</argsstring>
        <name>virtualDesktopChangeableRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::virtualDesktopChangeableRequested</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>FIXME: still relevant with new virtual desktops? </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="262" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1ae529eb9362ecf903777c74e3fc596d48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::enterPlasmaVirtualDesktopRequested</definition>
        <argsstring>(const QString &amp;desktop)</argsstring>
        <name>enterPlasmaVirtualDesktopRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::enterPlasmaVirtualDesktopRequested</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>desktop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted when the client wishes this window to enter in a new virtual desktop. The server will decide whether to consent this request </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="268" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1a532cad4b7f060b1264c5bee4bd173482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::enterNewPlasmaVirtualDesktopRequested</definition>
        <argsstring>()</argsstring>
        <name>enterNewPlasmaVirtualDesktopRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::enterNewPlasmaVirtualDesktopRequested</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted when the client wishes this window to enter in a new virtual desktop to be created for it. The server will decide whether to consent this request </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="275" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1a68ef60ac0eae024df5b840ce293fb437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::leavePlasmaVirtualDesktopRequested</definition>
        <argsstring>(const QString &amp;desktop)</argsstring>
        <name>leavePlasmaVirtualDesktopRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::leavePlasmaVirtualDesktopRequested</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>desktop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted when the client wishes to remove this window from a virtual desktop. The server will decide whether to consent this request </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="281" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1aac31a49c195ca78a18bc4b553581d10d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::enterPlasmaActivityRequested</definition>
        <argsstring>(const QString &amp;activity)</argsstring>
        <name>enterPlasmaActivityRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::enterPlasmaActivityRequested</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>activity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted when the client wishes this window to enter an activity. The server will decide whether to consent this request </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="287" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1a12f26185080c392bfd0b61b526966a6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::leavePlasmaActivityRequested</definition>
        <argsstring>(const QString &amp;activity)</argsstring>
        <name>leavePlasmaActivityRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::leavePlasmaActivityRequested</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>activity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted when the client wishes to remove this window from an activity. The server will decide whether to consent this request </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="293" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1a10b242ddf7d41e877c6a97db60ff497c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::sendToOutput</definition>
        <argsstring>(KWin::OutputInterface *output)</argsstring>
        <name>sendToOutput</name>
        <qualifiedname>KWin::PlasmaWindowInterface::sendToOutput</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output_interface" kindref="compound">KWin::OutputInterface</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Requests sending the window to <computeroutput>output</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="298" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1af9c68ec76b2ad6be5faafac629f8e155" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::clientGeometryChanged</definition>
        <argsstring>(const QRect &amp;geometry)</argsstring>
        <name>clientGeometryChanged</name>
        <qualifiedname>KWin::PlasmaWindowInterface::clientGeometryChanged</qualifiedname>
        <param>
          <type>const QRect &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="299" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_plasma_window_interface_1ac0a8b7fdef728ea96bdabe8c78631081" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::PlasmaWindowInterface::noBorderRequested</definition>
        <argsstring>(bool noBorder)</argsstring>
        <name>noBorderRequested</name>
        <qualifiedname>KWin::PlasmaWindowInterface::noBorderRequested</qualifiedname>
        <param>
          <type>bool</type>
          <declname>noBorder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="300" column="10"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_k_win_1_1_plasma_window_interface_1ab8535ff74edf0abf6b2bf9b795fda648" prot="private" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::PlasmaWindowInterface::PlasmaWindowInterface</definition>
        <argsstring>(PlasmaWindowManagementInterface *wm, QObject *parent)</argsstring>
        <name>PlasmaWindowInterface</name>
        <qualifiedname>KWin::PlasmaWindowInterface::PlasmaWindowInterface</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_plasma_window_management_interface" kindref="compound">PlasmaWindowManagementInterface</ref> *</type>
          <declname>wm</declname>
        </param>
        <param>
          <type>QObject *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.h" line="306" column="14" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="797" bodyend="801"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><xrefsect id="todo_1_todo000006"><xreftitle>Todo</xreftitle><xrefdescription><para>Add documentation </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>KWin::PlasmaWindowInterface</label>
        <link refid="class_k_win_1_1_plasma_window_interface"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>KWin::PlasmaWindowInterface</label>
        <link refid="class_k_win_1_1_plasma_window_interface"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/wayland/plasmawindowmanagement.h" line="106" column="1" bodyfile="kwin/src/wayland/plasmawindowmanagement.h" bodystart="107" bodyend="309"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_plasma_window_interface_1a52c6e871737730a382b1bb1177ea894a" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>activeRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1ae612236db16e45a4b515ea3d34e90796" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>addPlasmaActivity</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a99b159687b69c4de522778edfb65eb86" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>addPlasmaVirtualDesktop</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1af9c68ec76b2ad6be5faafac629f8e155" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>clientGeometryChanged</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1ad869a918cb15ee3b04a8282975d2b16a" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>closeableRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a438a40afd0f441cd5561f889d03964b0" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>closeRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a9a338b5af36f183ac0f880c3b50f19fe" prot="private" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>d</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1af492ad0aa1b41ef15722338ff3ec3d1c" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>demandsAttentionRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a532cad4b7f060b1264c5bee4bd173482" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>enterNewPlasmaVirtualDesktopRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1aac31a49c195ca78a18bc4b553581d10d" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>enterPlasmaActivityRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1ae529eb9362ecf903777c74e3fc596d48" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>enterPlasmaVirtualDesktopRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a8efbea41eb6f5fa041395191232085ff" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>fullscreenableRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a66707c39bc81d7783dff25e4163e82ab" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>fullscreenRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a1d9a1288e46a44f65d1c68a033e3e880" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>internalId</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a154a36f9af8c59844f2671bfe51b789f" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>keepAboveRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a16001f94d6db86d77799195fdaa14e74" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>keepBelowRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a12f26185080c392bfd0b61b526966a6d" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>leavePlasmaActivityRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a68ef60ac0eae024df5b840ce293fb437" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>leavePlasmaVirtualDesktopRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1ad863f9b1eab3706d156b00de56d2d910" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>maximizeableRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a1bef6f63d52ecbbbea784e7f7427a5a9" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>maximizedRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1ab7690543da7f46e79c3acab2454ff2b9" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>minimizeableRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1ab36dd47acb794b263c1876e53ff2d2a2" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>minimizedGeometries</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a2cf3d3adbc0b4191dff455ef47454ccd" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>minimizedGeometriesChanged</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a4fc60347557ab900fb276c0efb98e71a" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>minimizedRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a2139e081e26385f81d6a3990341e289e" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>movableRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a77978926bea6ca7bb8ac60e0f5a95c5f" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>moveRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1ac0a8b7fdef728ea96bdabe8c78631081" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>noBorderRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a1af7be6fa94f0ecb42b8670a195d4ca2" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>plasmaActivities</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a8b827f38e17821c6662599456135798c" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>plasmaVirtualDesktops</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1ab8535ff74edf0abf6b2bf9b795fda648" prot="private" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>PlasmaWindowInterface</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a831daec9dc06df68d2834adcb9adcd56" prot="private" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>PlasmaWindowInterfacePrivate</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a397750661365f6976a1f166c6549ab57" prot="private" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>PlasmaWindowManagementInterface</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a5e5d3c03e487c890fcbd3175f8f910b4" prot="private" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>PlasmaWindowManagementInterfacePrivate</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1abec31c7702f96cbed2ecf30cc28a3c21" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>removePlasmaActivity</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a6f88b20fbf1813b153ee2799255187b4" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>removePlasmaVirtualDesktop</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a380c4385bcc44253b34f964a610e5251" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>resizableRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a40f708c49bfc065329699f6b3f5549f3" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>resizeRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a10b242ddf7d41e877c6a97db60ff497c" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>sendToOutput</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a1851c9ecab1b8046997007ca7f188b34" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setActive</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1af189f3ab92f3ba0db0f9ed30b110c0d8" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setAppId</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a17ae028be6e9fd0a21a596e786d3c631" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setApplicationMenuPaths</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a6ef53ccadd45f89de6ae838d135f2012" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setCanSetNoBorder</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a424df5e86d29e4feb4d3ed4d1f639dfe" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setClientGeometry</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a76623fe7fda59c5d82e48d9ff770d507" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setCloseable</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1acf400dca90efc8c69cabba6b47679755" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setDemandsAttention</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1af9b7155e23bf27b4c71f1b38b96d434b" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setFullscreen</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a9fef82078fb5f3439886ca733c5fc13d" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setFullscreenable</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a2104b40a6f77fb2282ed77bfe47ebb8b" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setGeometry</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a93759ca7452a835247a9ac054cbb1942" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setIcon</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a6adad6faa1369caea7f2247c521b6e93" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setKeepAbove</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a523be0d7bf56c882b76b6707e1bfcb08" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setKeepBelow</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1aec03a1b263641e22f6e2ea161550d411" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setMaximizeable</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1aa816f7165eabe4c161a6e0301bd3e4f6" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setMaximized</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1ab864e1370658ea8df6a1bfba829f9e43" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setMinimizeable</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a74d69026d8853823ad10adfb9b079def" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setMinimized</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a73dc465e6ea8514c6b29f01220cfe87c" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setMovable</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1af470bf6d323f613f685aa5a9a7d84ceb" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setNoBorder</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1ae5d5fa02ba5f79f45e943e4b537783c7" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setOnAllDesktops</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1afaf22b72c83eb4af52036fe6a171210b" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setParentWindow</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1ab3bb5923033ca714ed8088c6224caadd" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setPid</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a39751f9168103f4f1a3e9e1ae0bcdafb" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setResizable</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1aa8b71bd6a7e9e18e8e663a75b0f5560d" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setResourceName</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1ae5be5bfa87795c08a46ff5b652a1f716" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setShadeable</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a79dbd4a91668fc7757188b15cdb74228" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setShaded</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a6ea6cd455e6063c140fec0e9176bda4b" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setSkipSwitcher</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1ad366413d83045f68db3c4f4a45ea6ec0" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setSkipTaskbar</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a80573f5db4b8d4e63414e25b4fd1338d" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setTitle</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1ab943b992d745296ecfddf7e89e1135c4" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>setVirtualDesktopChangeable</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a04828c784e7175171cfa57a5b1953f34" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>shadeableRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a0634235401ad741b7c7dedb02bcf783a" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>shadedRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a6bd6603fccedbe9d8fd099d1ccccfab1" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>skipSwitcherRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1aada5a67ab6832d9773bf3c6298e21c9c" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>skipTaskbarRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1af59329d6c1912ac5efe9af1d72b0aff0" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>unmap</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1ab86b9aaed5327205fe218485f5c71cca" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>uuid</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1a637c58977c775d159286da89d1dd640c" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>virtualDesktopChangeableRequested</name></member>
      <member refid="class_k_win_1_1_plasma_window_interface_1aa04d2ce163e4dbf6cf6327662daa6a9c" prot="public" virt="non-virtual"><scope>KWin::PlasmaWindowInterface</scope><name>~PlasmaWindowInterface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
