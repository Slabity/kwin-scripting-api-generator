<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_backend" kind="class" language="C++" prot="public">
    <compoundname>Backend</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QObject</basecompoundref>
    <derivedcompoundref refid="class_wayland_backend" prot="public" virt="non-virtual">WaylandBackend</derivedcompoundref>
    <derivedcompoundref refid="class_x_backend" prot="public" virt="non-virtual">XBackend</derivedcompoundref>
    <includes refid="pointerconstraintstest_8h" local="no">pointerconstraintstest.h</includes>
    <sectiondef kind="protected-type">
      <memberdef kind="enum" id="class_backend_1a3146ef7bb0edf5352175361f04bfa48c" prot="protected" static="no" strong="yes">
        <type></type>
        <name>Mode</name>
        <qualifiedname>Backend::Mode</qualifiedname>
        <enumvalue id="class_backend_1a3146ef7bb0edf5352175361f04bfa48cabd9c6c9ca372721e187caeb1654b4209" prot="protected">
          <name>Wayland</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_backend_1a3146ef7bb0edf5352175361f04bfa48ca02129bb861061d1a052c592e2dc6b383" prot="protected">
          <name>X</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="100" column="5" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="100" bodyend="103"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="property">
      <memberdef kind="property" id="class_backend_1a0afd492c3853d7451edbfadd710445e6" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>int</type>
        <definition>int Backend::mode</definition>
        <argsstring></argsstring>
        <name>mode</name>
        <qualifiedname>Backend::mode</qualifiedname>
        <read>mode</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="42" column="5" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_backend_1a4258f56a05d77aa43630d3997ec308d4" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool Backend::lockHint</definition>
        <argsstring></argsstring>
        <name>lockHint</name>
        <qualifiedname>Backend::lockHint</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="43" column="5" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_backend_1a4c7d3e2da4b46223e7173bf0dc48bb35" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool Backend::errorsAllowed</definition>
        <argsstring></argsstring>
        <name>errorsAllowed</name>
        <qualifiedname>Backend::errorsAllowed</qualifiedname>
        <read>errorsAllowed</read>
        <write>setErrorsAllowed</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="44" column="5" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="44" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_backend_1af4021baee702056a9325ded60909b732" prot="private" static="no" mutable="no">
        <type>QQuickView *</type>
        <definition>QQuickView* Backend::m_view</definition>
        <argsstring></argsstring>
        <name>m_view</name>
        <qualifiedname>Backend::m_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="115" column="16" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_backend_1a2410a369eda793bc66e0c9f88cb13a5f" prot="private" static="no" mutable="no">
        <type><ref refid="class_backend_1a3146ef7bb0edf5352175361f04bfa48c" kindref="member">Mode</ref></type>
        <definition>Mode Backend::m_mode</definition>
        <argsstring></argsstring>
        <name>m_mode</name>
        <qualifiedname>Backend::m_mode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="116" column="10" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_backend_1a4045669c0df48b6f6603f4a5c16d0a50" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Backend::m_lockHint</definition>
        <argsstring></argsstring>
        <name>m_lockHint</name>
        <qualifiedname>Backend::m_lockHint</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="118" column="10" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_backend_1a87034258538f2b14f9b143a7a84ee05f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Backend::m_errorsAllowed</definition>
        <argsstring></argsstring>
        <name>m_errorsAllowed</name>
        <qualifiedname>Backend::m_errorsAllowed</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="119" column="10" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="119" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_backend_1a5bc0e9ea135112c07e021ebde56ec44f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Backend::Backend</definition>
        <argsstring>(QObject *parent=nullptr)</argsstring>
        <name>Backend</name>
        <qualifiedname>Backend::Backend</qualifiedname>
        <param>
          <type>QObject *</type>
          <declname>parent</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="37" column="5" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_backend_1a922f911e48ead0c4df7f0acd700e3cd9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Backend::init</definition>
        <argsstring>(QQuickView *view)</argsstring>
        <name>init</name>
        <qualifiedname>Backend::init</qualifiedname>
        <reimplementedby refid="class_wayland_backend_1a56e4b736e71d9fdbca6b1549189d7aa4">init</reimplementedby>
        <reimplementedby refid="class_x_backend_1aa966657ea2778ccfdf93274076c1d12f">init</reimplementedby>
        <param>
          <type>QQuickView *</type>
          <declname>view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="46" column="18" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="class_backend_1ad550fa5f0c97f4f409ac321a18f98726" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Backend::mode</definition>
        <argsstring>() const</argsstring>
        <name>mode</name>
        <qualifiedname>Backend::mode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="50" column="9" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="class_backend_1a0e751b0cd0a4e204772f6c5bda422d96" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Backend::lockHint</definition>
        <argsstring>() const</argsstring>
        <name>lockHint</name>
        <qualifiedname>Backend::lockHint</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="55" column="10" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="class_backend_1a1c0576d117873460a4c68ab5c66d9bad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Backend::errorsAllowed</definition>
        <argsstring>() const</argsstring>
        <name>errorsAllowed</name>
        <qualifiedname>Backend::errorsAllowed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="59" column="10" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_backend_1a93043fcdc55e5cffd5c96d1b3ae64861" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Backend::setErrorsAllowed</definition>
        <argsstring>(bool set)</argsstring>
        <name>setErrorsAllowed</name>
        <qualifiedname>Backend::setErrorsAllowed</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="63" column="10" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="63" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_backend_1aedd0d08660af5a2342f5fe0f895713c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>Q_INVOKABLE void</type>
        <definition>virtual Q_INVOKABLE void Backend::lockRequest</definition>
        <argsstring>(bool persistent=true, QRect region=QRect())</argsstring>
        <name>lockRequest</name>
        <qualifiedname>Backend::lockRequest</qualifiedname>
        <reimplementedby refid="class_wayland_backend_1ab4b50762ea29b950e9643a4027513000">lockRequest</reimplementedby>
        <reimplementedby refid="class_x_backend_1af30b9b3968800ff2a708c44c02a7231b">lockRequest</reimplementedby>
        <param>
          <type>bool</type>
          <declname>persistent</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>QRect</type>
          <declname>region</declname>
          <defval>QRect()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="72" column="30" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_backend_1aaaeac86fecd1cbb2e1c2e31e68f1355e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>Q_INVOKABLE void</type>
        <definition>virtual Q_INVOKABLE void Backend::unlockRequest</definition>
        <argsstring>()</argsstring>
        <name>unlockRequest</name>
        <qualifiedname>Backend::unlockRequest</qualifiedname>
        <reimplementedby refid="class_wayland_backend_1a6ac826b41f876e63f1d26d6b8ee2579a">unlockRequest</reimplementedby>
        <reimplementedby refid="class_x_backend_1a4ed3ac30406c5fdcdf5df004910f6282">unlockRequest</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="75" column="30" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_backend_1a858b038da22f8f0c96f51aa3d44a1dd0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>Q_INVOKABLE void</type>
        <definition>virtual Q_INVOKABLE void Backend::confineRequest</definition>
        <argsstring>(bool persistent=true, QRect region=QRect())</argsstring>
        <name>confineRequest</name>
        <qualifiedname>Backend::confineRequest</qualifiedname>
        <reimplementedby refid="class_wayland_backend_1a13c4e259f062fbddd560241099a2bf59">confineRequest</reimplementedby>
        <reimplementedby refid="class_x_backend_1a6cebc2c7533e2d01939c0d5ebb37ca74">confineRequest</reimplementedby>
        <param>
          <type>bool</type>
          <declname>persistent</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>QRect</type>
          <declname>region</declname>
          <defval>QRect()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="79" column="30" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_backend_1a24f84ba0e2ac3112f12c993e9eee8d5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>Q_INVOKABLE void</type>
        <definition>virtual Q_INVOKABLE void Backend::unconfineRequest</definition>
        <argsstring>()</argsstring>
        <name>unconfineRequest</name>
        <qualifiedname>Backend::unconfineRequest</qualifiedname>
        <reimplementedby refid="class_wayland_backend_1a9b88ca4d1cdeddf232f8005d4402911d">unconfineRequest</reimplementedby>
        <reimplementedby refid="class_x_backend_1ab20b45d3d60a64bee3859bcfa0401605">unconfineRequest</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="82" column="30" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_backend_1a346634cbbb0b586c8abbfb1fa7745307" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>Q_INVOKABLE void</type>
        <definition>virtual Q_INVOKABLE void Backend::hideAndConfineRequest</definition>
        <argsstring>(bool confineBeforeHide=false)</argsstring>
        <name>hideAndConfineRequest</name>
        <qualifiedname>Backend::hideAndConfineRequest</qualifiedname>
        <reimplementedby refid="class_x_backend_1af2806000888b7357d2394cc3d25acdd1">hideAndConfineRequest</reimplementedby>
        <param>
          <type>bool</type>
          <declname>confineBeforeHide</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="85" column="30" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="85" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_backend_1afa628a0785cc8110c033f13f5ebc0d55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>Q_INVOKABLE void</type>
        <definition>virtual Q_INVOKABLE void Backend::undoHideRequest</definition>
        <argsstring>()</argsstring>
        <name>undoHideRequest</name>
        <qualifiedname>Backend::undoHideRequest</qualifiedname>
        <reimplementedby refid="class_x_backend_1a1f94caefefc3321f72bfbeadcc97815f">undoHideRequest</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="88" column="30" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="88" bodyend="90"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="signal">
      <memberdef kind="signal" id="class_backend_1abae42e001ae46520622eee4b0057ae6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Backend::confineChanged</definition>
        <argsstring>(bool confined)</argsstring>
        <name>confineChanged</name>
        <qualifiedname>Backend::confineChanged</qualifiedname>
        <param>
          <type>bool</type>
          <declname>confined</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="93" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_backend_1a30fc3e2a094ede1ac540a1e10fdc9f25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Backend::lockChanged</definition>
        <argsstring>(bool locked)</argsstring>
        <name>lockChanged</name>
        <qualifiedname>Backend::lockChanged</qualifiedname>
        <param>
          <type>bool</type>
          <declname>locked</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="94" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_backend_1a8734aa3612cd8d8694bee1c43d3e5218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Backend::lockHintChanged</definition>
        <argsstring>()</argsstring>
        <name>lockHintChanged</name>
        <qualifiedname>Backend::lockHintChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="95" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_backend_1a41a60536ee920afd0d172c8e8863a134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Backend::errorsAllowedChanged</definition>
        <argsstring>()</argsstring>
        <name>errorsAllowedChanged</name>
        <qualifiedname>Backend::errorsAllowedChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="96" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_backend_1a8260b3774634dfe2cf1816da47f7d764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Backend::forceSurfaceCommit</definition>
        <argsstring>()</argsstring>
        <name>forceSurfaceCommit</name>
        <qualifiedname>Backend::forceSurfaceCommit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="97" column="10"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_backend_1a12349d7c60386523404ffa73cdee07de" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QQuickView *</type>
        <definition>QQuickView * Backend::view</definition>
        <argsstring>() const</argsstring>
        <name>view</name>
        <qualifiedname>Backend::view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="105" column="16" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="class_backend_1ad44f31164228a1fecdf6534ea68e4cad" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Backend::setMode</definition>
        <argsstring>(Mode set)</argsstring>
        <name>setMode</name>
        <qualifiedname>Backend::setMode</qualifiedname>
        <param>
          <type><ref refid="class_backend_1a3146ef7bb0edf5352175361f04bfa48c" kindref="member">Mode</ref></type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/tests/pointerconstraintstest.h" line="109" column="10" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="109" bodyend="112"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Backend</label>
        <link refid="class_backend"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
      <node id="3">
        <label>WaylandBackend</label>
        <link refid="class_wayland_backend"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>XBackend</label>
        <link refid="class_x_backend"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Backend</label>
        <link refid="class_backend"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/tests/pointerconstraintstest.h" line="33" column="1" bodyfile="kwin/tests/pointerconstraintstest.h" bodystart="34" bodyend="120"/>
    <listofallmembers>
      <member refid="class_backend_1a5bc0e9ea135112c07e021ebde56ec44f" prot="public" virt="non-virtual"><scope>Backend</scope><name>Backend</name></member>
      <member refid="class_backend_1abae42e001ae46520622eee4b0057ae6e" prot="public" virt="non-virtual"><scope>Backend</scope><name>confineChanged</name></member>
      <member refid="class_backend_1a858b038da22f8f0c96f51aa3d44a1dd0" prot="public" virt="virtual"><scope>Backend</scope><name>confineRequest</name></member>
      <member refid="class_backend_1a4c7d3e2da4b46223e7173bf0dc48bb35" prot="public" virt="non-virtual"><scope>Backend</scope><name>errorsAllowed</name></member>
      <member refid="class_backend_1a1c0576d117873460a4c68ab5c66d9bad" prot="public" virt="non-virtual"><scope>Backend</scope><name>errorsAllowed</name></member>
      <member refid="class_backend_1a41a60536ee920afd0d172c8e8863a134" prot="public" virt="non-virtual"><scope>Backend</scope><name>errorsAllowedChanged</name></member>
      <member refid="class_backend_1a8260b3774634dfe2cf1816da47f7d764" prot="public" virt="non-virtual"><scope>Backend</scope><name>forceSurfaceCommit</name></member>
      <member refid="class_backend_1a346634cbbb0b586c8abbfb1fa7745307" prot="public" virt="virtual"><scope>Backend</scope><name>hideAndConfineRequest</name></member>
      <member refid="class_backend_1a922f911e48ead0c4df7f0acd700e3cd9" prot="public" virt="virtual"><scope>Backend</scope><name>init</name></member>
      <member refid="class_backend_1a30fc3e2a094ede1ac540a1e10fdc9f25" prot="public" virt="non-virtual"><scope>Backend</scope><name>lockChanged</name></member>
      <member refid="class_backend_1a4258f56a05d77aa43630d3997ec308d4" prot="public" virt="non-virtual"><scope>Backend</scope><name>lockHint</name></member>
      <member refid="class_backend_1a0e751b0cd0a4e204772f6c5bda422d96" prot="public" virt="non-virtual"><scope>Backend</scope><name>lockHint</name></member>
      <member refid="class_backend_1a8734aa3612cd8d8694bee1c43d3e5218" prot="public" virt="non-virtual"><scope>Backend</scope><name>lockHintChanged</name></member>
      <member refid="class_backend_1aedd0d08660af5a2342f5fe0f895713c2" prot="public" virt="virtual"><scope>Backend</scope><name>lockRequest</name></member>
      <member refid="class_backend_1a87034258538f2b14f9b143a7a84ee05f" prot="private" virt="non-virtual"><scope>Backend</scope><name>m_errorsAllowed</name></member>
      <member refid="class_backend_1a4045669c0df48b6f6603f4a5c16d0a50" prot="private" virt="non-virtual"><scope>Backend</scope><name>m_lockHint</name></member>
      <member refid="class_backend_1a2410a369eda793bc66e0c9f88cb13a5f" prot="private" virt="non-virtual"><scope>Backend</scope><name>m_mode</name></member>
      <member refid="class_backend_1af4021baee702056a9325ded60909b732" prot="private" virt="non-virtual"><scope>Backend</scope><name>m_view</name></member>
      <member refid="class_backend_1a3146ef7bb0edf5352175361f04bfa48c" prot="protected" virt="non-virtual"><scope>Backend</scope><name>Mode</name></member>
      <member refid="class_backend_1a0afd492c3853d7451edbfadd710445e6" prot="public" virt="non-virtual"><scope>Backend</scope><name>mode</name></member>
      <member refid="class_backend_1ad550fa5f0c97f4f409ac321a18f98726" prot="public" virt="non-virtual"><scope>Backend</scope><name>mode</name></member>
      <member refid="class_backend_1a93043fcdc55e5cffd5c96d1b3ae64861" prot="public" virt="non-virtual"><scope>Backend</scope><name>setErrorsAllowed</name></member>
      <member refid="class_backend_1ad44f31164228a1fecdf6534ea68e4cad" prot="protected" virt="non-virtual"><scope>Backend</scope><name>setMode</name></member>
      <member refid="class_backend_1a24f84ba0e2ac3112f12c993e9eee8d5e" prot="public" virt="virtual"><scope>Backend</scope><name>unconfineRequest</name></member>
      <member refid="class_backend_1afa628a0785cc8110c033f13f5ebc0d55" prot="public" virt="virtual"><scope>Backend</scope><name>undoHideRequest</name></member>
      <member refid="class_backend_1aaaeac86fecd1cbb2e1c2e31e68f1355e" prot="public" virt="virtual"><scope>Backend</scope><name>unlockRequest</name></member>
      <member refid="class_backend_1a12349d7c60386523404ffa73cdee07de" prot="protected" virt="non-virtual"><scope>Backend</scope><name>view</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
