<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="test__wayland__surface_8cpp" kind="file" language="C++">
    <compoundname>test_wayland_surface.cpp</compoundname>
    <includes local="no">QImage</includes>
    <includes local="no">QPainter</includes>
    <includes local="no">QSignalSpy</includes>
    <includes local="no">QTest</includes>
    <includes refid="graphicsbuffer_8h" local="yes">core/graphicsbuffer.h</includes>
    <includes refid="graphicsbufferview_8h" local="yes">core/graphicsbufferview.h</includes>
    <includes refid="clientconnection_8h" local="yes">wayland/clientconnection.h</includes>
    <includes refid="wayland_2compositor_8h" local="yes">wayland/compositor.h</includes>
    <includes refid="display_8h" local="yes">wayland/display.h</includes>
    <includes refid="idleinhibit__v1_8h" local="yes">wayland/idleinhibit_v1.h</includes>
    <includes refid="wayland_2output_8h" local="yes">wayland/output.h</includes>
    <includes refid="surface_8h" local="yes">wayland/surface.h</includes>
    <includes local="yes">KWayland/Client/compositor.h</includes>
    <includes local="yes">KWayland/Client/connection_thread.h</includes>
    <includes local="yes">KWayland/Client/event_queue.h</includes>
    <includes local="yes">KWayland/Client/idleinhibit.h</includes>
    <includes local="yes">KWayland/Client/output.h</includes>
    <includes local="yes">KWayland/Client/region.h</includes>
    <includes local="yes">KWayland/Client/registry.h</includes>
    <includes local="yes">KWayland/Client/shm_pool.h</includes>
    <includes local="yes">KWayland/Client/surface.h</includes>
    <includes refid="fakeoutput_8h" local="yes">../../../tests/fakeoutput.h</includes>
    <includes local="no">wayland-client-protocol.h</includes>
    <includes local="yes">test_wayland_surface.moc</includes>
    <incdepgraph>
      <node id="1">
        <label>kwin/autotests/wayland/client/test_wayland_surface.cpp</label>
        <link refid="test__wayland__surface_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>core/colorspace.h</label>
        <link refid="colorspace_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>core/graphicsbuffer.h</label>
        <link refid="graphicsbuffer_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>core/graphicsbufferview.h</label>
        <link refid="graphicsbufferview_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>core/output.h</label>
        <link refid="core_2output_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>core/renderbackend.h</label>
        <link refid="renderbackend_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>renderloop.h</label>
        <link refid="renderloop_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>core/rendertarget.h</label>
        <link refid="rendertarget_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>effect/globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>utils/edid.h</label>
        <link refid="edid_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>utils/filedescriptor.h</label>
        <link refid="filedescriptor_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>wayland/clientconnection.h</label>
        <link refid="clientconnection_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>wayland/compositor.h</label>
        <link refid="wayland_2compositor_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>wayland/display.h</label>
        <link refid="display_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>wayland/idleinhibit_v1.h</label>
        <link refid="idleinhibit__v1_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>wayland/output.h</label>
        <link refid="wayland_2output_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>surface.h</label>
        <link refid="surface_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>../../../tests/fakeoutput.h</label>
        <link refid="fakeoutput_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>KWayland/Client/compositor.h</label>
      </node>
      <node id="43">
        <label>KWayland/Client/connection_thread.h</label>
      </node>
      <node id="44">
        <label>KWayland/Client/event_queue.h</label>
      </node>
      <node id="45">
        <label>KWayland/Client/idleinhibit.h</label>
      </node>
      <node id="46">
        <label>KWayland/Client/output.h</label>
      </node>
      <node id="47">
        <label>KWayland/Client/region.h</label>
      </node>
      <node id="48">
        <label>KWayland/Client/registry.h</label>
      </node>
      <node id="49">
        <label>KWayland/Client/shm_pool.h</label>
      </node>
      <node id="50">
        <label>KWayland/Client/surface.h</label>
      </node>
      <node id="30">
        <label>QByteArray</label>
      </node>
      <node id="26">
        <label>QCoreApplication</label>
      </node>
      <node id="32">
        <label>QDebug</label>
      </node>
      <node id="2">
        <label>QImage</label>
      </node>
      <node id="31">
        <label>QList</label>
      </node>
      <node id="20">
        <label>QMatrix4x4</label>
      </node>
      <node id="9">
        <label>QObject</label>
      </node>
      <node id="3">
        <label>QPainter</label>
      </node>
      <node id="27">
        <label>QPoint</label>
      </node>
      <node id="37">
        <label>QPointer</label>
      </node>
      <node id="33">
        <label>QRect</label>
      </node>
      <node id="38">
        <label>QRegion</label>
      </node>
      <node id="4">
        <label>QSignalSpy</label>
      </node>
      <node id="10">
        <label>QSize</label>
      </node>
      <node id="5">
        <label>QTest</label>
      </node>
      <node id="34">
        <label>QUuid</label>
      </node>
      <node id="28">
        <label>QVariant</label>
      </node>
      <node id="21">
        <label>QVector2D</label>
      </node>
      <node id="25">
        <label>config-kwin.h</label>
      </node>
      <node id="7">
        <label>kwin_export.h</label>
      </node>
      <node id="15">
        <label>memory</label>
      </node>
      <node id="19">
        <label>optional</label>
      </node>
      <node id="14">
        <label>sys/types.h</label>
      </node>
      <node id="53">
        <label>test_wayland_surface.moc</label>
      </node>
      <node id="11">
        <label>utility</label>
      </node>
      <node id="52">
        <label>wayland-client-protocol.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_test_wayland_surface" prot="public">TestWaylandSurface</innerclass>
    <sectiondef kind="var">
      <memberdef kind="variable" id="test__wayland__surface_8cpp_1a485d6ddd568caea0908934bfdb9fbadb" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString s_socketName</definition>
        <argsstring></argsstring>
        <name>s_socketName</name>
        <initializer>= QStringLiteral(&quot;kwin-test-wayland-surface-0&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/wayland/client/test_wayland_surface.cpp" line="72" column="22" bodyfile="kwin/autotests/wayland/client/test_wayland_surface.cpp" bodystart="72" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2014<sp/>Martin<sp/>Gräßlin<sp/>&lt;mgraesslin@kde.org&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>LGPL-2.1-only<sp/>OR<sp/>LGPL-3.0-only<sp/>OR<sp/>LicenseRef-KDE-Accepted-LGPL</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Qt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QImage&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QPainter&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QSignalSpy&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QTest&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KWin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="graphicsbuffer_8h" kindref="compound">core/graphicsbuffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="graphicsbufferview_8h" kindref="compound">core/graphicsbufferview.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="clientconnection_8h" kindref="compound">wayland/clientconnection.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wayland_2compositor_8h" kindref="compound">wayland/compositor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="display_8h" kindref="compound">wayland/display.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="idleinhibit__v1_8h" kindref="compound">wayland/idleinhibit_v1.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wayland_2output_8h" kindref="compound">wayland/output.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="surface_8h" kindref="compound">wayland/surface.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/compositor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/connection_thread.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/event_queue.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/idleinhibit.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/output.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/region.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/registry.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/shm_pool.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/surface.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="fakeoutput_8h" kindref="compound">../../../tests/fakeoutput.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Wayland</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wayland-client-protocol.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="class_test_wayland_surface" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_test_wayland_surface_1a40652bfb62e3687ac059622dde51e642" kindref="member">TestWaylandSurface</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QObject</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_test_wayland_surface_1a40652bfb62e3687ac059622dde51e642" kindref="member">TestWaylandSurface</ref>(QObject<sp/>*parent<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Q_SLOTS:</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanup();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testStaticAccessor();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testDamage();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testFrameCallback();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testAttachBuffer();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testOpaque();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInput();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testScale();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testUnmapOfNotMappedSurface();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testSurfaceAt();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testDestroyAttachedBuffer();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testDestroyWithPendingCallback();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testOutput();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testDisconnect();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInhibit();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_display" kindref="compound">KWin::Display</ref><sp/>*m_display;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_compositor_interface" kindref="compound">KWin::CompositorInterface</ref><sp/>*m_compositorInterface;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_idle_inhibit_manager_v1_interface" kindref="compound">KWin::IdleInhibitManagerV1Interface</ref><sp/>*m_idleInhibitInterface;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::ConnectionThread<sp/>*m_connection;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::Compositor<sp/>*m_compositor;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::ShmPool<sp/>*m_shm;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::EventQueue<sp/>*m_queue;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::IdleInhibitManager<sp/>*m_idleInhibitManager;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>QThread<sp/>*m_thread;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">};</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>s_socketName<sp/>=<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;kwin-test-wayland-surface-0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="class_test_wayland_surface_1a40652bfb62e3687ac059622dde51e642" refkind="member"><highlight class="normal"><ref refid="class_test_wayland_surface_1a40652bfb62e3687ac059622dde51e642" kindref="member">TestWaylandSurface::TestWaylandSurface</ref>(QObject<sp/>*parent)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>QObject(parent)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_display(nullptr)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_compositorInterface(nullptr)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_connection(nullptr)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_compositor(nullptr)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_thread(nullptr)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWaylandSurface::init()</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win" kindref="compound">KWin</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_display;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_display" kindref="compound">KWin::Display</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display-&gt;<ref refid="class_k_win_1_1_display_1aa4c4acfe47f745065df276fab792b431" kindref="member">addSocketName</ref>(s_socketName);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display-&gt;<ref refid="class_k_win_1_1_display_1af36443417f1832645373ce713cb226c7" kindref="member">start</ref>();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_display-&gt;<ref refid="class_k_win_1_1_display_1aa50d346a6be40bd7db06214c0350456a" kindref="member">isRunning</ref>());</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display-&gt;<ref refid="class_k_win_1_1_display_1a0be7cd8fa84fabd7a6f51f9819f7d7e1" kindref="member">createShm</ref>();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>m_compositorInterface<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_compositor_interface" kindref="compound">CompositorInterface</ref>(m_display,<sp/>m_display);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_compositorInterface);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>m_idleInhibitInterface<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_idle_inhibit_manager_v1_interface" kindref="compound">IdleInhibitManagerV1Interface</ref>(m_display,<sp/>m_display);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_idleInhibitInterface);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>connection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>KWayland::Client::ConnectionThread;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>connectedSpy(m_connection,<sp/>&amp;KWayland::Client::ConnectionThread::connected);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection-&gt;setSocketName(s_socketName);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>m_thread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QThread(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection-&gt;moveToThread(m_thread);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>m_thread-&gt;start();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*connect(QCoreApplication::eventDispatcher(),<sp/>&amp;QAbstractEventDispatcher::aboutToBlock,<sp/>m_connection,</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[this]()<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(m_connection-&gt;display())<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/>);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection-&gt;initConnection();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(connectedSpy.wait());</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>m_queue<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>KWayland::Client::EventQueue(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!m_queue-&gt;isValid());</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>m_queue-&gt;setup(m_connection);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_queue-&gt;isValid());</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::Registry<sp/>registry;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.setEventQueue(m_queue);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>compositorSpy(&amp;registry,<sp/>&amp;KWayland::Client::Registry::compositorAnnounced);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>shmSpy(&amp;registry,<sp/>&amp;KWayland::Client::Registry::shmAnnounced);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>allAnnounced(&amp;registry,<sp/>&amp;KWayland::Client::Registry::interfacesAnnounced);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.create(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(registry.isValid());</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.setup();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(allAnnounced.wait());</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!compositorSpy.isEmpty());</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!shmSpy.isEmpty());</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>m_compositor<sp/>=<sp/>registry.createCompositor(compositorSpy.first().first().value&lt;quint32&gt;(),<sp/>compositorSpy.first().last().value&lt;quint32&gt;(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_compositor-&gt;isValid());</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>m_shm<sp/>=<sp/>registry.createShmPool(shmSpy.first().first().value&lt;quint32&gt;(),<sp/>shmSpy.first().last().value&lt;quint32&gt;(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_shm-&gt;isValid());</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>m_idleInhibitManager<sp/>=<sp/>registry.createIdleInhibitManager(registry.interface(KWayland::Client::Registry::Interface::IdleInhibitManagerUnstableV1).name,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.interface(KWayland::Client::Registry::Interface::IdleInhibitManagerUnstableV1).version,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_idleInhibitManager-&gt;isValid());</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWaylandSurface::cleanup()</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_compositor)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_compositor;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_compositor<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_idleInhibitManager)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_idleInhibitManager;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_idleInhibitManager<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_shm)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_shm;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_shm<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_queue)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_queue;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_queue<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_thread)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_thread-&gt;quit();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_thread-&gt;wait();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_thread;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_thread<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_connection;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_display;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>these<sp/>are<sp/>the<sp/>children<sp/>of<sp/>the<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>m_compositorInterface<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>m_idleInhibitInterface<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWaylandSurface::testStaticAccessor()</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverSurfaceCreated(m_compositorInterface,<sp/>&amp;<ref refid="class_k_win_1_1_compositor_interface_1a4a560a885ed69d43af0c857331e25592" kindref="member">KWin::CompositorInterface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!<ref refid="class_k_win_1_1_surface_interface_1a24ac16f7936d889771c2ab09d973175b" kindref="member">KWin::SurfaceInterface::get</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!<ref refid="class_k_win_1_1_surface_interface_1a24ac16f7936d889771c2ab09d973175b" kindref="member">KWin::SurfaceInterface::get</ref>(1,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(KWayland::Client::Surface::all().isEmpty());</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>s1(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(s1-&gt;isValid());</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(KWayland::Client::Surface::all().count(),<sp/>1);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(KWayland::Client::Surface::all().first(),<sp/>s1.get());</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(KWayland::Client::Surface::get(*s1),<sp/>s1.get());</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>serverSurface1<sp/>=<sp/>serverSurfaceCreated.first().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface1);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="class_k_win_1_1_surface_interface_1a24ac16f7936d889771c2ab09d973175b" kindref="member">KWin::SurfaceInterface::get</ref>(serverSurface1-&gt;resource()),<sp/>serverSurface1);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="class_k_win_1_1_surface_interface_1a24ac16f7936d889771c2ab09d973175b" kindref="member">KWin::SurfaceInterface::get</ref>(serverSurface1-&gt;id(),<sp/>serverSurface1-&gt;client()),<sp/>serverSurface1);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!s1-&gt;size().isValid());</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>sizeChangedSpy(s1.get(),<sp/>&amp;KWayland::Client::Surface::sizeChanged);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QSize<sp/>testSize(200,<sp/>300);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>s1-&gt;setSize(testSize);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(s1-&gt;size(),<sp/>testSize);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(sizeChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(sizeChangedSpy.first().first().toSize(),<sp/>testSize);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>another<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>s2(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(s2-&gt;isValid());</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(KWayland::Client::Surface::all().count(),<sp/>2);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(KWayland::Client::Surface::all().first(),<sp/>s1.get());</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(KWayland::Client::Surface::all().last(),<sp/>s2.get());</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(KWayland::Client::Surface::get(*s1),<sp/>s1.get());</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(KWayland::Client::Surface::get(*s2),<sp/>s2.get());</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>serverSurfaceCreated.clear();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>serverSurface2<sp/>=<sp/>serverSurfaceCreated.first().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface2);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="class_k_win_1_1_surface_interface_1a24ac16f7936d889771c2ab09d973175b" kindref="member">KWin::SurfaceInterface::get</ref>(serverSurface1-&gt;resource()),<sp/>serverSurface1);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="class_k_win_1_1_surface_interface_1a24ac16f7936d889771c2ab09d973175b" kindref="member">KWin::SurfaceInterface::get</ref>(serverSurface1-&gt;id(),<sp/>serverSurface1-&gt;client()),<sp/>serverSurface1);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="class_k_win_1_1_surface_interface_1a24ac16f7936d889771c2ab09d973175b" kindref="member">KWin::SurfaceInterface::get</ref>(serverSurface2-&gt;resource()),<sp/>serverSurface2);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="class_k_win_1_1_surface_interface_1a24ac16f7936d889771c2ab09d973175b" kindref="member">KWin::SurfaceInterface::get</ref>(serverSurface2-&gt;id(),<sp/>serverSurface2-&gt;client()),<sp/>serverSurface2);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>quint32<sp/>surfaceId1<sp/>=<sp/>serverSurface1-&gt;id();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>quint32<sp/>surfaceId2<sp/>=<sp/>serverSurface2-&gt;id();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>s2<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>s2.reset();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(KWayland::Client::Surface::all().count(),<sp/>1);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(KWayland::Client::Surface::all().first(),<sp/>s1.get());</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(KWayland::Client::Surface::get(*s1),<sp/>s1.get());</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>finally<sp/>delete<sp/>the<sp/>last<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>s1.reset();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(KWayland::Client::Surface::all().isEmpty());</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!KWayland::Client::Surface::get(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>destroyedSpy(serverSurface1,<sp/>&amp;KWin::SurfaceInterface::destroyed);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(destroyedSpy.wait());</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!<ref refid="class_k_win_1_1_surface_interface_1a24ac16f7936d889771c2ab09d973175b" kindref="member">KWin::SurfaceInterface::get</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!<ref refid="class_k_win_1_1_surface_interface_1a24ac16f7936d889771c2ab09d973175b" kindref="member">KWin::SurfaceInterface::get</ref>(surfaceId1,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!<ref refid="class_k_win_1_1_surface_interface_1a24ac16f7936d889771c2ab09d973175b" kindref="member">KWin::SurfaceInterface::get</ref>(surfaceId2,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWaylandSurface::testDamage()</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverSurfaceCreated(m_compositorInterface,<sp/>&amp;<ref refid="class_k_win_1_1_compositor_interface_1a4a560a885ed69d43af0c857331e25592" kindref="member">KWin::CompositorInterface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>s(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;setScale(2);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>KWin::SurfaceInterface<sp/>*serverSurface<sp/>=<sp/>serverSurfaceCreated.first().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a45b8549b5bfff00c85812c836c975995" kindref="member">bufferDamage</ref>(),<sp/>QRegion());</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a5859a70ac95110b480eae0160b1b83f0" kindref="member">isMapped</ref>());</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>committedSpy(serverSurface,<sp/>&amp;<ref refid="class_k_win_1_1_surface_interface_1a0ef181bc149455033328ca56afc61697" kindref="member">KWin::SurfaceInterface::committed</ref>);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>damageSpy(serverSurface,<sp/>&amp;<ref refid="class_k_win_1_1_surface_interface_1a15e2a6742bca026a3031cc31e82bbe89" kindref="member">KWin::SurfaceInterface::damaged</ref>);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>send<sp/>damage<sp/>without<sp/>a<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;damage(QRect(0,<sp/>0,<sp/>100,<sp/>100));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(damageSpy.isEmpty());</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(!serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a5859a70ac95110b480eae0160b1b83f0" kindref="member">isMapped</ref>());</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(committedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>surface<sp/>damage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QImage<sp/>img(QSize(10,<sp/>10),<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>img.fill(Qt::black);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>m_shm-&gt;createBuffer(img);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;attachBuffer(b,<sp/>QPoint(55,<sp/>55));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;damage(QRect(0,<sp/>0,<sp/>10,<sp/>10));</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(damageSpy.wait());</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a5a6b83bbb0260f80c8b98c918cafcba3" kindref="member">offset</ref>(),<sp/>QPoint(55,<sp/>55));<sp/></highlight><highlight class="comment">//<sp/>offset<sp/>is<sp/>surface<sp/>local<sp/>so<sp/>scale<sp/>doesn&apos;t<sp/>change<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a45b8549b5bfff00c85812c836c975995" kindref="member">bufferDamage</ref>(),<sp/>QRegion(0,<sp/>0,<sp/>10,<sp/>10));</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(damageSpy.first().first().value&lt;QRegion&gt;(),<sp/>QRegion(0,<sp/>0,<sp/>10,<sp/>10));</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a5859a70ac95110b480eae0160b1b83f0" kindref="member">isMapped</ref>());</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(committedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>damage<sp/>multiple<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegion<sp/>surfaceDamage<sp/>=<sp/>QRegion(5,<sp/>8,<sp/>3,<sp/>6).united(QRect(10,<sp/>11,<sp/>6,<sp/>1));</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegion<sp/>expectedDamage<sp/>=<sp/>QRegion(10,<sp/>16,<sp/>6,<sp/>12).united(QRect(20,<sp/>22,<sp/>12,<sp/>2));</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QImage<sp/>img(QSize(80,<sp/>70),<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>img.fill(Qt::black);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>m_shm-&gt;createBuffer(img);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;attachBuffer(b);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;damage(surfaceDamage);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>damageSpy.clear();</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(damageSpy.wait());</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a45b8549b5bfff00c85812c836c975995" kindref="member">bufferDamage</ref>(),<sp/>expectedDamage);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(damageSpy.first().first().value&lt;QRegion&gt;(),<sp/>expectedDamage);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a5859a70ac95110b480eae0160b1b83f0" kindref="member">isMapped</ref>());</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(committedSpy.count(),<sp/>3);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>damage<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegion<sp/>damage(30,<sp/>40,<sp/>22,<sp/>4);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QImage<sp/>img(QSize(80,<sp/>70),<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>img.fill(Qt::black);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>m_shm-&gt;createBuffer(img);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;attachBuffer(b);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;damageBuffer(damage);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>damageSpy.clear();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(damageSpy.wait());</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a45b8549b5bfff00c85812c836c975995" kindref="member">bufferDamage</ref>(),<sp/>damage);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(damageSpy.first().first().value&lt;QRegion&gt;(),<sp/>damage);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a5859a70ac95110b480eae0160b1b83f0" kindref="member">isMapped</ref>());</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>combined<sp/>regular<sp/>damage<sp/>and<sp/>damaged<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegion<sp/>surfaceDamage(10,<sp/>20,<sp/>5,<sp/>5);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegion<sp/>bufferDamage(30,<sp/>50,<sp/>50,<sp/>20);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegion<sp/>expectedDamage<sp/>=<sp/>QRegion(20,<sp/>40,<sp/>10,<sp/>10).united(QRect(30,<sp/>50,<sp/>50,<sp/>20));</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QImage<sp/>img(QSize(80,<sp/>70),<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>img.fill(Qt::black);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>m_shm-&gt;createBuffer(img);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;attachBuffer(b);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;damage(surfaceDamage);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;damageBuffer(bufferDamage);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>damageSpy.clear();</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(damageSpy.wait());</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a45b8549b5bfff00c85812c836c975995" kindref="member">bufferDamage</ref>(),<sp/>expectedDamage);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(damageSpy.first().first().value&lt;QRegion&gt;(),<sp/>expectedDamage);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a5859a70ac95110b480eae0160b1b83f0" kindref="member">isMapped</ref>());</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWaylandSurface::testFrameCallback()</highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverSurfaceCreated(m_compositorInterface,<sp/>&amp;<ref refid="class_k_win_1_1_compositor_interface_1a4a560a885ed69d43af0c857331e25592" kindref="member">KWin::CompositorInterface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>s(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>KWin::SurfaceInterface<sp/>*serverSurface<sp/>=<sp/>serverSurfaceCreated.first().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>damageSpy(serverSurface,<sp/>&amp;<ref refid="class_k_win_1_1_surface_interface_1a15e2a6742bca026a3031cc31e82bbe89" kindref="member">KWin::SurfaceInterface::damaged</ref>);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>frameRenderedSpy(s.get(),<sp/>&amp;KWayland::Client::Surface::frameRendered);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>img(QSize(10,<sp/>10),<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>img.fill(Qt::black);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>m_shm-&gt;createBuffer(img);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;attachBuffer(b);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;damage(QRect(0,<sp/>0,<sp/>10,<sp/>10));</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;commit();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(damageSpy.wait());</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa8db310a54de302b6528ea4ac0d1bd29" kindref="member">frameRendered</ref>(10);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameRenderedSpy.isEmpty());</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameRenderedSpy.wait());</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!frameRenderedSpy.isEmpty());</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWaylandSurface::testAttachBuffer()</highlight></codeline>
<codeline lineno="367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverSurfaceCreated(m_compositorInterface,<sp/>&amp;<ref refid="class_k_win_1_1_compositor_interface_1a4a560a885ed69d43af0c857331e25592" kindref="member">KWin::CompositorInterface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>s(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>KWin::SurfaceInterface<sp/>*serverSurface<sp/>=<sp/>serverSurfaceCreated.first().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>three<sp/>images</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>black(24,<sp/>24,<sp/>QImage::Format_RGB32);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>black.fill(Qt::black);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>red(24,<sp/>24,<sp/>QImage::Format_ARGB32);<sp/></highlight><highlight class="comment">//<sp/>Note<sp/>-<sp/>deliberately<sp/>not<sp/>premultiplied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>red.fill(QColor(255,<sp/>0,<sp/>0,<sp/>128));</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>blue(24,<sp/>24,<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>blue.fill(QColor(0,<sp/>0,<sp/>255,<sp/>128));</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>QSharedPointer&lt;KWayland::Client::Buffer&gt;<sp/>blackBufferPtr<sp/>=<sp/>m_shm-&gt;createBuffer(black).toStrongRef();</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(blackBufferPtr);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_buffer<sp/>*blackBuffer<sp/>=<sp/>*(blackBufferPtr.data());</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>QSharedPointer&lt;KWayland::Client::Buffer&gt;<sp/>redBuffer<sp/>=<sp/>m_shm-&gt;createBuffer(red).toStrongRef();</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(redBuffer);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>QSharedPointer&lt;KWayland::Client::Buffer&gt;<sp/>blueBuffer<sp/>=<sp/>m_shm-&gt;createBuffer(blue).toStrongRef();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(blueBuffer);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(blueBuffer-&gt;format(),<sp/>KWayland::Client::Buffer::Format::ARGB32);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(blueBuffer-&gt;size(),<sp/>blue.size());</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!blueBuffer-&gt;isReleased());</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!blueBuffer-&gt;isUsed());</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(blueBuffer-&gt;stride(),<sp/>blue.bytesPerLine());</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;attachBuffer(redBuffer.data());</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;attachBuffer(blackBuffer);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;damage(QRect(0,<sp/>0,<sp/>24,<sp/>24));</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>damageSpy(serverSurface,<sp/>&amp;<ref refid="class_k_win_1_1_surface_interface_1a15e2a6742bca026a3031cc31e82bbe89" kindref="member">KWin::SurfaceInterface::damaged</ref>);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>mappedSpy(serverSurface,<sp/>&amp;<ref refid="class_k_win_1_1_surface_interface_1a6c32a9d40e65dd4be9825da9f05058e3" kindref="member">KWin::SurfaceInterface::mapped</ref>);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>unmappedSpy(serverSurface,<sp/>&amp;<ref refid="class_k_win_1_1_surface_interface_1ab2512fea14715e29cd251d58774c29b3" kindref="member">KWin::SurfaceInterface::unmapped</ref>);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(damageSpy.wait());</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(mappedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(unmappedSpy.isEmpty());</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>the<sp/>ServerSurface<sp/>should<sp/>have<sp/>the<sp/>black<sp/>image<sp/>attached<sp/>as<sp/>a<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>KWin::GraphicsBuffer<sp/>*buffer<sp/>=<sp/>serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a6f53ff0fca97e468e7ccf6681f4a5030" kindref="member">buffer</ref>();</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer-&gt;<ref refid="class_k_win_1_1_graphics_buffer_1abe09a46569d14b3f163f6cc416f4184b" kindref="member">ref</ref>();</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KWin::GraphicsBufferView<sp/>view(buffer);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(view.image());</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(*view.image(),<sp/>black);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(view.image()-&gt;format(),<sp/>QImage::Format_RGB32);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(view.image()-&gt;size(),<sp/>QSize(24,<sp/>24));</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>render<sp/>another<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;attachBuffer(redBuffer);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;damage(QRect(0,<sp/>0,<sp/>24,<sp/>24));</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>damageSpy.clear();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(damageSpy.wait());</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(mappedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(unmappedSpy.isEmpty());</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>KWin::GraphicsBuffer<sp/>*buffer2<sp/>=<sp/>serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a6f53ff0fca97e468e7ccf6681f4a5030" kindref="member">buffer</ref>();</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer2-&gt;<ref refid="class_k_win_1_1_graphics_buffer_1abe09a46569d14b3f163f6cc416f4184b" kindref="member">ref</ref>();</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KWin::GraphicsBufferView<sp/>view(buffer2);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(view.image());</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(view.image()-&gt;format(),<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(view.image()-&gt;size(),<sp/>QSize(24,<sp/>24));</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>24;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>24;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>premultiplied<sp/>in<sp/>the<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(view.image()-&gt;pixel(i,<sp/>j),<sp/>qRgba(128,<sp/>0,<sp/>0,<sp/>128));</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer2-&gt;<ref refid="class_k_win_1_1_graphics_buffer_1ab17e36ea633d5e9b8849b86695c119a6" kindref="member">unref</ref>();</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(buffer2-&gt;<ref refid="class_k_win_1_1_graphics_buffer_1afdb02f1ae060f64b7618130a055b0f42" kindref="member">isReferenced</ref>());</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!redBuffer.data()-&gt;isReleased());</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>render<sp/>another<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>blueBuffer-&gt;setUsed(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(blueBuffer-&gt;isUsed());</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;attachBuffer(blueBuffer.data());</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;damage(QRect(0,<sp/>0,<sp/>24,<sp/>24));</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>frameRenderedSpy(s.get(),<sp/>&amp;KWayland::Client::Surface::frameRendered);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;commit();</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>damageSpy.clear();</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(damageSpy.wait());</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(mappedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(unmappedSpy.isEmpty());</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!buffer2-&gt;<ref refid="class_k_win_1_1_graphics_buffer_1afdb02f1ae060f64b7618130a055b0f42" kindref="member">isReferenced</ref>());</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>we<sp/>should<sp/>have<sp/>a<sp/>signal<sp/>on<sp/>when<sp/>the<sp/>Buffer<sp/>gets<sp/>released</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents(QEventLoop::WaitForMoreEvents);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!redBuffer.data()-&gt;isReleased())<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCoreApplication::processEvents(QEventLoop::WaitForMoreEvents);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(redBuffer.data()-&gt;isReleased());</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>KWin::GraphicsBuffer<sp/>*buffer3<sp/>=<sp/>serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a6f53ff0fca97e468e7ccf6681f4a5030" kindref="member">buffer</ref>();</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer3-&gt;<ref refid="class_k_win_1_1_graphics_buffer_1abe09a46569d14b3f163f6cc416f4184b" kindref="member">ref</ref>();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KWin::GraphicsBufferView<sp/>view(buffer3);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(view.image());</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(view.image()-&gt;format(),<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(view.image()-&gt;size(),<sp/>QSize(24,<sp/>24));</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>24;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>24;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>premultiplied<sp/>in<sp/>the<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(view.image()-&gt;pixel(i,<sp/>j),<sp/>qRgba(0,<sp/>0,<sp/>128,<sp/>128));</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer3-&gt;<ref refid="class_k_win_1_1_graphics_buffer_1ab17e36ea633d5e9b8849b86695c119a6" kindref="member">unref</ref>();</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(buffer3-&gt;<ref refid="class_k_win_1_1_graphics_buffer_1afdb02f1ae060f64b7618130a055b0f42" kindref="member">isReferenced</ref>());</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa8db310a54de302b6528ea4ac0d1bd29" kindref="member">frameRendered</ref>(1);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameRenderedSpy.wait());</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>commit<sp/>a<sp/>different<sp/>value<sp/>shouldn&apos;t<sp/>change<sp/>our<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a6f53ff0fca97e468e7ccf6681f4a5030" kindref="member">buffer</ref>(),<sp/>buffer3);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>damageSpy.clear();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;setInputRegion(m_compositor-&gt;createRegion(QRegion(0,<sp/>0,<sp/>24,<sp/>24)).get());</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a6f53ff0fca97e468e7ccf6681f4a5030" kindref="member">buffer</ref>(),<sp/>buffer3);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(damageSpy.isEmpty());</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(mappedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(unmappedSpy.isEmpty());</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a5859a70ac95110b480eae0160b1b83f0" kindref="member">isMapped</ref>());</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;attachBuffer(blackBuffer);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;damage(QRect(0,<sp/>0,<sp/>1,<sp/>1));</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>better<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;attachBuffer((wl_buffer<sp/>*)</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;damage(QRect(0,<sp/>0,<sp/>10,<sp/>10));</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(unmappedSpy.wait());</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(mappedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(unmappedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(damageSpy.isEmpty());</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a5859a70ac95110b480eae0160b1b83f0" kindref="member">isMapped</ref>());</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>add<sp/>signal<sp/>test<sp/>on<sp/>release</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer-&gt;<ref refid="class_k_win_1_1_graphics_buffer_1ab17e36ea633d5e9b8849b86695c119a6" kindref="member">unref</ref>();</highlight></codeline>
<codeline lineno="513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWaylandSurface::testOpaque()</highlight></codeline>
<codeline lineno="516"><highlight class="normal">{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverSurfaceCreated(m_compositorInterface,<sp/>&amp;<ref refid="class_k_win_1_1_compositor_interface_1a4a560a885ed69d43af0c857331e25592" kindref="member">KWin::CompositorInterface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>s(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*serverSurface<sp/>=<sp/>serverSurfaceCreated.first().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>opaqueRegionChangedSpy(serverSurface,<sp/>&amp;<ref refid="class_k_win_1_1_surface_interface_1a990be21e77584e95208a49d66353d821" kindref="member">KWin::SurfaceInterface::opaqueChanged</ref>);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>default<sp/>there<sp/>should<sp/>be<sp/>an<sp/>empty<sp/>opaque<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1afe2b6c1fb2b1cc64ca1e349e39b90e20" kindref="member">opaque</ref>(),<sp/>QRegion());</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let&apos;s<sp/>install<sp/>an<sp/>opaque<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;setOpaqueRegion(m_compositor-&gt;createRegion(QRegion(0,<sp/>10,<sp/>20,<sp/>30)).get());</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>region<sp/>should<sp/>only<sp/>be<sp/>applied<sp/>after<sp/>the<sp/>surface<sp/>got<sp/>committed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1afe2b6c1fb2b1cc64ca1e349e39b90e20" kindref="member">opaque</ref>(),<sp/>QRegion());</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(opaqueRegionChangedSpy.count(),<sp/>0);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>let&apos;s<sp/>commit<sp/>to<sp/>get<sp/>the<sp/>new<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>black(20,<sp/>40,<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>black.fill(Qt::black);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>QSharedPointer&lt;KWayland::Client::Buffer&gt;<sp/>buffer1<sp/>=<sp/>m_shm-&gt;createBuffer(black).toStrongRef();</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;attachBuffer(buffer1);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(opaqueRegionChangedSpy.wait());</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(opaqueRegionChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(opaqueRegionChangedSpy.last().first().value&lt;QRegion&gt;(),<sp/>QRegion(0,<sp/>10,<sp/>20,<sp/>30));</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1afe2b6c1fb2b1cc64ca1e349e39b90e20" kindref="member">opaque</ref>(),<sp/>QRegion(0,<sp/>10,<sp/>20,<sp/>30));</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>committing<sp/>without<sp/>setting<sp/>a<sp/>new<sp/>region<sp/>shouldn&apos;t<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(opaqueRegionChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1afe2b6c1fb2b1cc64ca1e349e39b90e20" kindref="member">opaque</ref>(),<sp/>QRegion(0,<sp/>10,<sp/>20,<sp/>30));</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let&apos;s<sp/>change<sp/>the<sp/>opaque<sp/>region,<sp/>it<sp/>will<sp/>be<sp/>clipped<sp/>with<sp/>rect(0,<sp/>0,<sp/>20,<sp/>40)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;setOpaqueRegion(m_compositor-&gt;createRegion(QRegion(10,<sp/>20,<sp/>30,<sp/>40)).get());</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(opaqueRegionChangedSpy.wait());</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(opaqueRegionChangedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(opaqueRegionChangedSpy.last().first().value&lt;QRegion&gt;(),<sp/>QRegion(10,<sp/>20,<sp/>10,<sp/>20));</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1afe2b6c1fb2b1cc64ca1e349e39b90e20" kindref="member">opaque</ref>(),<sp/>QRegion(10,<sp/>20,<sp/>10,<sp/>20));</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>let&apos;s<sp/>go<sp/>back<sp/>to<sp/>an<sp/>empty<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;setOpaqueRegion();</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(opaqueRegionChangedSpy.wait());</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(opaqueRegionChangedSpy.count(),<sp/>3);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(opaqueRegionChangedSpy.last().first().value&lt;QRegion&gt;(),<sp/>QRegion());</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1afe2b6c1fb2b1cc64ca1e349e39b90e20" kindref="member">opaque</ref>(),<sp/>QRegion());</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWaylandSurface::testInput()</highlight></codeline>
<codeline lineno="572"><highlight class="normal">{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverSurfaceCreated(m_compositorInterface,<sp/>&amp;<ref refid="class_k_win_1_1_compositor_interface_1a4a560a885ed69d43af0c857331e25592" kindref="member">KWin::CompositorInterface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>s(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*serverSurface<sp/>=<sp/>serverSurfaceCreated.first().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>inputRegionChangedSpy(serverSurface,<sp/>&amp;<ref refid="class_k_win_1_1_surface_interface_1a4e06e3af734c27dccf5334428e21b993" kindref="member">KWin::SurfaceInterface::inputChanged</ref>);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>committedSpy(serverSurface,<sp/>&amp;SurfaceInterface::committed);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>input<sp/>region<sp/>should<sp/>be<sp/>empty<sp/>if<sp/>the<sp/>surface<sp/>has<sp/>no<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a5859a70ac95110b480eae0160b1b83f0" kindref="member">isMapped</ref>());</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a2252ccfdaefae7974f9682cb5d190cda" kindref="member">input</ref>(),<sp/>QRegion());</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>default<sp/>input<sp/>region<sp/>is<sp/>infinite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>black(100,<sp/>50,<sp/>QImage::Format_RGB32);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>black.fill(Qt::black);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>QSharedPointer&lt;KWayland::Client::Buffer&gt;<sp/>buffer1<sp/>=<sp/>m_shm-&gt;createBuffer(black).toStrongRef();</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(buffer1);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;attachBuffer(buffer1);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(committedSpy.wait());</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a5859a70ac95110b480eae0160b1b83f0" kindref="member">isMapped</ref>());</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(inputRegionChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a2252ccfdaefae7974f9682cb5d190cda" kindref="member">input</ref>(),<sp/>QRegion(0,<sp/>0,<sp/>100,<sp/>50));</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let&apos;s<sp/>install<sp/>an<sp/>input<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;setInputRegion(m_compositor-&gt;createRegion(QRegion(0,<sp/>10,<sp/>20,<sp/>30)).get());</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>region<sp/>should<sp/>only<sp/>be<sp/>applied<sp/>after<sp/>the<sp/>surface<sp/>got<sp/>committed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(inputRegionChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a2252ccfdaefae7974f9682cb5d190cda" kindref="member">input</ref>(),<sp/>QRegion(0,<sp/>0,<sp/>100,<sp/>50));</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>let&apos;s<sp/>commit<sp/>to<sp/>get<sp/>the<sp/>new<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(committedSpy.wait());</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(inputRegionChangedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a2252ccfdaefae7974f9682cb5d190cda" kindref="member">input</ref>(),<sp/>QRegion(0,<sp/>10,<sp/>20,<sp/>30));</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>committing<sp/>without<sp/>setting<sp/>a<sp/>new<sp/>region<sp/>shouldn&apos;t<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(inputRegionChangedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a2252ccfdaefae7974f9682cb5d190cda" kindref="member">input</ref>(),<sp/>QRegion(0,<sp/>10,<sp/>20,<sp/>30));</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let&apos;s<sp/>change<sp/>the<sp/>input<sp/>region,<sp/>note<sp/>that<sp/>the<sp/>new<sp/>input<sp/>region<sp/>is<sp/>cropped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;setInputRegion(m_compositor-&gt;createRegion(QRegion(10,<sp/>20,<sp/>30,<sp/>40)).get());</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(committedSpy.wait());</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(inputRegionChangedSpy.count(),<sp/>3);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a2252ccfdaefae7974f9682cb5d190cda" kindref="member">input</ref>(),<sp/>QRegion(10,<sp/>20,<sp/>30,<sp/>30));</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>let&apos;s<sp/>go<sp/>back<sp/>to<sp/>an<sp/>empty<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;setInputRegion();</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(committedSpy.wait());</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(inputRegionChangedSpy.count(),<sp/>4);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a2252ccfdaefae7974f9682cb5d190cda" kindref="member">input</ref>(),<sp/>QRegion(0,<sp/>0,<sp/>100,<sp/>50));</highlight></codeline>
<codeline lineno="632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWaylandSurface::testScale()</highlight></codeline>
<codeline lineno="635"><highlight class="normal">{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>updating<sp/>the<sp/>scale<sp/>factor<sp/>is<sp/>correctly<sp/>passed<sp/>to<sp/>the<sp/>Wayland<sp/>server</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverSurfaceCreated(m_compositorInterface,<sp/>&amp;CompositorInterface::surfaceCreated);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>s(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(s-&gt;scale(),<sp/>1);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*serverSurface<sp/>=<sp/>serverSurfaceCreated.first().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>changing<sp/>the<sp/>scale<sp/>implicitly<sp/>changes<sp/>the<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>sizeChangedSpy(serverSurface,<sp/>&amp;SurfaceInterface::sizeChanged);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>attach<sp/>a<sp/>buffer<sp/>of<sp/>100x100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>red(100,<sp/>100,<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>red.fill(QColor(255,<sp/>0,<sp/>0,<sp/>128));</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>QSharedPointer&lt;KWayland::Client::Buffer&gt;<sp/>redBuffer<sp/>=<sp/>m_shm-&gt;createBuffer(red).toStrongRef();</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(redBuffer);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;attachBuffer(redBuffer.data());</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;damageBuffer(QRect(0,<sp/>0,<sp/>100,<sp/>100));</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(sizeChangedSpy.wait());</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(sizeChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1ad4b3c49e2e99aa0f949c85507850a6b6" kindref="member">size</ref>(),<sp/>QSize(100,<sp/>100));</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>scale<sp/>to<sp/>2,<sp/>buffer<sp/>is<sp/>still<sp/>100x100<sp/>so<sp/>size<sp/>should<sp/>change<sp/>to<sp/>50x50</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;setScale(2);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(sizeChangedSpy.wait());</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(sizeChangedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1ad4b3c49e2e99aa0f949c85507850a6b6" kindref="member">size</ref>(),<sp/>QSize(50,<sp/>50));</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>scale<sp/>and<sp/>size<sp/>in<sp/>one<sp/>commit,<sp/>buffer<sp/>is<sp/>60x60<sp/>at<sp/>scale<sp/>3<sp/>so<sp/>size<sp/>should<sp/>be<sp/>20x20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>blue(60,<sp/>60,<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>red.fill(QColor(255,<sp/>0,<sp/>0,<sp/>128));</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>QSharedPointer&lt;KWayland::Client::Buffer&gt;<sp/>blueBuffer<sp/>=<sp/>m_shm-&gt;createBuffer(blue).toStrongRef();</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(blueBuffer);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;attachBuffer(blueBuffer.data());</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;setScale(3);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(sizeChangedSpy.wait());</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(sizeChangedSpy.count(),<sp/>3);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1ad4b3c49e2e99aa0f949c85507850a6b6" kindref="member">size</ref>(),<sp/>QSize(20,<sp/>20));</highlight></codeline>
<codeline lineno="679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWaylandSurface::testUnmapOfNotMappedSurface()</highlight></codeline>
<codeline lineno="682"><highlight class="normal">{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>a<sp/>surface<sp/>which<sp/>doesn&apos;t<sp/>have<sp/>a<sp/>buffer<sp/>attached<sp/>doesn&apos;t<sp/>trigger<sp/>the<sp/>unmapped<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverSurfaceCreated(m_compositorInterface,<sp/>&amp;CompositorInterface::surfaceCreated);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>s(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*serverSurface<sp/>=<sp/>serverSurfaceCreated.first().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>unmappedSpy(serverSurface,<sp/>&amp;SurfaceInterface::unmapped);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>committedSpy(serverSurface,<sp/>&amp;SurfaceInterface::committed);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let&apos;s<sp/>map<sp/>a<sp/>null<sp/>buffer<sp/>and<sp/>change<sp/>scale<sp/>to<sp/>trigger<sp/>a<sp/>signal<sp/>we<sp/>can<sp/>wait<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;attachBuffer(KWayland::Client::Buffer::Ptr());</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(committedSpy.wait());</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(unmappedSpy.isEmpty());</highlight></codeline>
<codeline lineno="700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWaylandSurface::testSurfaceAt()</highlight></codeline>
<codeline lineno="703"><highlight class="normal">{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>surfaceAt(const<sp/>QPointF&amp;)<sp/>works<sp/>as<sp/>expected<sp/>for<sp/>the<sp/>case<sp/>of<sp/>no<sp/>children</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverSurfaceCreated(m_compositorInterface,<sp/>&amp;CompositorInterface::surfaceCreated);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>s(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*serverSurface<sp/>=<sp/>serverSurfaceCreated.first().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>newly<sp/>created<sp/>surface<sp/>should<sp/>not<sp/>be<sp/>mapped<sp/>and<sp/>not<sp/>provide<sp/>a<sp/>surface<sp/>at<sp/>a<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a5859a70ac95110b480eae0160b1b83f0" kindref="member">isMapped</ref>());</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a121877c312e955cc43e6aa4d337a525d" kindref="member">surfaceAt</ref>(QPointF(0,<sp/>0)));</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let&apos;s<sp/>damage<sp/>this<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>sizeChangedSpy(serverSurface,<sp/>&amp;SurfaceInterface::sizeChanged);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>image(QSize(100,<sp/>100),<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>image.fill(Qt::red);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;attachBuffer(m_shm-&gt;createBuffer(image));</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;damage(QRect(0,<sp/>0,<sp/>100,<sp/>100));</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(sizeChangedSpy.wait());</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>the<sp/>surface<sp/>is<sp/>mapped<sp/>and<sp/>surfaceAt<sp/>should<sp/>give<sp/>the<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a5859a70ac95110b480eae0160b1b83f0" kindref="member">isMapped</ref>());</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a121877c312e955cc43e6aa4d337a525d" kindref="member">surfaceAt</ref>(QPointF(0,<sp/>0)),<sp/>serverSurface);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a121877c312e955cc43e6aa4d337a525d" kindref="member">surfaceAt</ref>(QPointF(99,<sp/>99)),<sp/>serverSurface);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>outside<sp/>the<sp/>geometry<sp/>it<sp/>should<sp/>not<sp/>give<sp/>a<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a121877c312e955cc43e6aa4d337a525d" kindref="member">surfaceAt</ref>(QPointF(100,<sp/>100)));</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a121877c312e955cc43e6aa4d337a525d" kindref="member">surfaceAt</ref>(QPointF(-1,<sp/>-1)));</highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWaylandSurface::testDestroyAttachedBuffer()</highlight></codeline>
<codeline lineno="735"><highlight class="normal">{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>destroying<sp/>of<sp/>a<sp/>buffer<sp/>attached<sp/>to<sp/>a<sp/>surface<sp/>works</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverSurfaceCreated(m_compositorInterface,<sp/>&amp;CompositorInterface::surfaceCreated);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>s(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*serverSurface<sp/>=<sp/>serverSurfaceCreated.first().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let&apos;s<sp/>damage<sp/>this<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>damagedSpy(serverSurface,<sp/>&amp;SurfaceInterface::damaged);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>image(QSize(100,<sp/>100),<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>image.fill(Qt::red);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;attachBuffer(m_shm-&gt;createBuffer(image));</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;damage(QRect(0,<sp/>0,<sp/>100,<sp/>100));</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(damagedSpy.wait());</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a6f53ff0fca97e468e7ccf6681f4a5030" kindref="member">buffer</ref>());</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>attach<sp/>another<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>image.fill(Qt::blue);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;attachBuffer(m_shm-&gt;createBuffer(image));</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection-&gt;flush();</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let&apos;s<sp/>try<sp/>to<sp/>destroy<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_shm;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>m_shm<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>QTRY_VERIFY(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a6f53ff0fca97e468e7ccf6681f4a5030" kindref="member">buffer</ref>()-&gt;<ref refid="class_k_win_1_1_graphics_buffer_1abc5c2b498a66a48573f33f154dde6097" kindref="member">isDropped</ref>());</highlight></codeline>
<codeline lineno="763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWaylandSurface::testDestroyWithPendingCallback()</highlight></codeline>
<codeline lineno="766"><highlight class="normal">{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>tries<sp/>to<sp/>verify<sp/>that<sp/>destroying<sp/>a<sp/>surface<sp/>with<sp/>a<sp/>pending<sp/>callback<sp/>works<sp/>correctly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>create<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>s(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(s<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(s-&gt;isValid());</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceCreatedSpy(m_compositorInterface,<sp/>&amp;CompositorInterface::surfaceCreated);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>serverSurface<sp/>=<sp/>surfaceCreatedSpy.first().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>render<sp/>to<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>img(QSize(10,<sp/>10),<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>img.fill(Qt::black);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>m_shm-&gt;createBuffer(img);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;attachBuffer(b);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;damage(QRect(0,<sp/>0,<sp/>10,<sp/>10));</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>some<sp/>frame<sp/>callbacks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>1000;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wl_surface_frame(*s);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;commit(KWayland::Client::Surface::CommitFlag::FrameCallback);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>damagedSpy(serverSurface,<sp/>&amp;SurfaceInterface::damaged);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(damagedSpy.wait());</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>try<sp/>to<sp/>destroy<sp/>the<sp/>Surface<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>destroyedSpy(serverSurface,<sp/>&amp;QObject::destroyed);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>s.reset();</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(destroyedSpy.wait());</highlight></codeline>
<codeline lineno="796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWaylandSurface::testDisconnect()</highlight></codeline>
<codeline lineno="799"><highlight class="normal">{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>the<sp/>server<sp/>side<sp/>correctly<sp/>tears<sp/>down<sp/>the<sp/>resources<sp/>when<sp/>the<sp/>client<sp/>disconnects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>s(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(s<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(s-&gt;isValid());</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceCreatedSpy(m_compositorInterface,<sp/>&amp;CompositorInterface::surfaceCreated);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>serverSurface<sp/>=<sp/>surfaceCreatedSpy.first().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>destroy<sp/>client</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>clientDisconnectedSpy(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a12f9073812125fc1dd668fe73fc0285a" kindref="member">client</ref>(),<sp/>&amp;ClientConnection::disconnected);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceDestroyedSpy(serverSurface,<sp/>&amp;QObject::destroyed);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_connection)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_connection-&gt;deleteLater();</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_connection<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(clientDisconnectedSpy.wait());</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(clientDisconnectedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(surfaceDestroyedSpy.isEmpty())<sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(surfaceDestroyedSpy.wait());</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>QTRY_COMPARE(surfaceDestroyedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;destroy();</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>m_shm-&gt;destroy();</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>m_compositor-&gt;destroy();</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>m_queue-&gt;destroy();</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>m_idleInhibitManager-&gt;destroy();</highlight></codeline>
<codeline lineno="829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWaylandSurface::testOutput()</highlight></codeline>
<codeline lineno="832"><highlight class="normal">{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>the<sp/>enter/leave<sp/>are<sp/>sent<sp/>correctly<sp/>to<sp/>the<sp/>Client</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>qRegisterMetaType&lt;KWayland::Client::Output<sp/>*&gt;();</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>s(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(s<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(s-&gt;isValid());</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(s-&gt;outputs().isEmpty());</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>enteredSpy(s.get(),<sp/>&amp;KWayland::Client::Surface::outputEntered);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>leftSpy(s.get(),<sp/>&amp;KWayland::Client::Surface::outputLeft);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wait<sp/>for<sp/>the<sp/>surface<sp/>on<sp/>the<sp/>Server<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceCreatedSpy(m_compositorInterface,<sp/>&amp;CompositorInterface::surfaceCreated);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>serverSurface<sp/>=<sp/>surfaceCreatedSpy.first().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a7715aa26db105726d096236a94df69d5" kindref="member">outputs</ref>(),<sp/>QList&lt;OutputInterface<sp/>*&gt;());</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>another<sp/>registry<sp/>to<sp/>get<sp/>notified<sp/>about<sp/>added<sp/>outputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::Registry<sp/>registry;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.setEventQueue(m_queue);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>allAnnounced(&amp;registry,<sp/>&amp;KWayland::Client::Registry::interfacesAnnounced);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.create(m_connection);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(registry.isValid());</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.setup();</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(allAnnounced.wait());</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>outputAnnouncedSpy(&amp;registry,<sp/>&amp;KWayland::Client::Registry::outputAnnounced);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outputHandle<sp/>=<sp/>std::make_unique&lt;FakeOutput&gt;();</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>serverOutput<sp/>=<sp/>std::make_unique&lt;OutputInterface&gt;(m_display,<sp/>outputHandle.get());</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(outputAnnouncedSpy.wait());</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Output&gt;<sp/>clientOutput(</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.createOutput(outputAnnouncedSpy.first().first().value&lt;quint32&gt;(),<sp/>outputAnnouncedSpy.first().last().value&lt;quint32&gt;()));</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(clientOutput-&gt;isValid());</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection-&gt;flush();</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display-&gt;dispatchEvents();</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>enter<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1abad9449df6afe4574c7f48f3a31f53a3" kindref="member">setOutputs</ref>(QList&lt;OutputInterface<sp/>*&gt;{serverOutput.get()},<sp/>serverOutput.get());</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a7715aa26db105726d096236a94df69d5" kindref="member">outputs</ref>(),<sp/>QList&lt;OutputInterface<sp/>*&gt;{serverOutput.get()});</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(enteredSpy.wait());</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(enteredSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(enteredSpy.first().first().value&lt;KWayland::Client::Output<sp/>*&gt;(),<sp/>clientOutput.get());</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(s-&gt;outputs(),<sp/>QList&lt;KWayland::Client::Output<sp/>*&gt;{clientOutput.get()});</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>adding<sp/>to<sp/>same<sp/>should<sp/>not<sp/>trigger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1abad9449df6afe4574c7f48f3a31f53a3" kindref="member">setOutputs</ref>(QList&lt;OutputInterface<sp/>*&gt;{serverOutput.get()},<sp/>serverOutput.get());</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>leave<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1abad9449df6afe4574c7f48f3a31f53a3" kindref="member">setOutputs</ref>(QList&lt;OutputInterface<sp/>*&gt;(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a7715aa26db105726d096236a94df69d5" kindref="member">outputs</ref>(),<sp/>QList&lt;OutputInterface<sp/>*&gt;());</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(leftSpy.wait());</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(enteredSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(leftSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(leftSpy.first().first().value&lt;KWayland::Client::Output<sp/>*&gt;(),<sp/>clientOutput.get());</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(s-&gt;outputs(),<sp/>QList&lt;KWayland::Client::Output<sp/>*&gt;());</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>leave<sp/>again<sp/>should<sp/>not<sp/>trigger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1abad9449df6afe4574c7f48f3a31f53a3" kindref="member">setOutputs</ref>(QList&lt;OutputInterface<sp/>*&gt;(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>enter<sp/>again,<sp/>just<sp/>to<sp/>verify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1abad9449df6afe4574c7f48f3a31f53a3" kindref="member">setOutputs</ref>(QList&lt;OutputInterface<sp/>*&gt;{serverOutput.get()},<sp/>serverOutput.get());</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a7715aa26db105726d096236a94df69d5" kindref="member">outputs</ref>(),<sp/>QList&lt;OutputInterface<sp/>*&gt;{serverOutput.get()});</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(enteredSpy.wait());</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(enteredSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(leftSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>output<sp/>client<sp/>is<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>client<sp/>should<sp/>get<sp/>an<sp/>exit<sp/>and<sp/>be<sp/>left<sp/>on<sp/>no<sp/>outputs<sp/>(which<sp/>is<sp/>allowed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>serverOutput.reset();</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>outputHandle.reset();</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(leftSpy.wait());</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a7715aa26db105726d096236a94df69d5" kindref="member">outputs</ref>(),<sp/>QList&lt;OutputInterface<sp/>*&gt;());</highlight></codeline>
<codeline lineno="904"><highlight class="normal">}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWaylandSurface::testInhibit()</highlight></codeline>
<codeline lineno="907"><highlight class="normal">{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>s(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wait<sp/>for<sp/>the<sp/>surface<sp/>on<sp/>the<sp/>Server<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceCreatedSpy(m_compositorInterface,<sp/>&amp;CompositorInterface::surfaceCreated);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>serverSurface<sp/>=<sp/>surfaceCreatedSpy.first().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1ad04a4a624f04e1ea740924752a4229db" kindref="member">inhibitsIdle</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>inhibitsChangedSpy(serverSurface,<sp/>&amp;SurfaceInterface::inhibitsIdleChanged);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>create<sp/>an<sp/>idle<sp/>inhibition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::IdleInhibitor&gt;<sp/>inhibitor1(m_idleInhibitManager-&gt;createInhibitor(s.get()));</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(inhibitsChangedSpy.wait());</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1ad04a4a624f04e1ea740924752a4229db" kindref="member">inhibitsIdle</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>creating<sp/>a<sp/>second<sp/>idle<sp/>inhibition<sp/>should<sp/>not<sp/>trigger<sp/>the<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::IdleInhibitor&gt;<sp/>inhibitor2(m_idleInhibitManager-&gt;createInhibitor(s.get()));</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!inhibitsChangedSpy.wait(500));</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1ad04a4a624f04e1ea740924752a4229db" kindref="member">inhibitsIdle</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>also<sp/>deleting<sp/>the<sp/>first<sp/>inhibitor<sp/>should<sp/>not<sp/>yet<sp/>change<sp/>the<sp/>inhibition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>inhibitor1.reset();</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!inhibitsChangedSpy.wait(500));</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1ad04a4a624f04e1ea740924752a4229db" kindref="member">inhibitsIdle</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>deleting<sp/>also<sp/>the<sp/>second<sp/>inhibitor<sp/>should<sp/>trigger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>inhibitor2.reset();</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(inhibitsChangedSpy.wait());</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1ad04a4a624f04e1ea740924752a4229db" kindref="member">inhibitsIdle</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(inhibitsChangedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>recreate<sp/>inhibitor1<sp/>should<sp/>inhibit<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>inhibitor1.reset(m_idleInhibitManager-&gt;createInhibitor(s.get()));</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(inhibitsChangedSpy.wait());</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1ad04a4a624f04e1ea740924752a4229db" kindref="member">inhibitsIdle</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>destroying<sp/>should<sp/>uninhibit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>inhibitor1.reset();</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(inhibitsChangedSpy.wait());</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1ad04a4a624f04e1ea740924752a4229db" kindref="member">inhibitsIdle</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(inhibitsChangedSpy.count(),<sp/>4);</highlight></codeline>
<codeline lineno="949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal">QTEST_GUILESS_MAIN(<ref refid="class_test_wayland_surface" kindref="compound">TestWaylandSurface</ref>)</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_wayland_surface.moc&quot;</highlight></codeline>
    </programlisting>
    <location file="kwin/autotests/wayland/client/test_wayland_surface.cpp"/>
  </compounddef>
</doxygen>
