<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_tab_box_1_1_tab_box_handler" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>KWin::TabBox::TabBoxHandler</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QObject</basecompoundref>
    <derivedcompoundref refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl" prot="public" virt="non-virtual">KWin::TabBox::TabBoxHandlerImpl</derivedcompoundref>
    <includes refid="tabboxhandler_8h" local="no">tabboxhandler.h</includes>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1ae3e2153de3ee069afd603d926cd3d026" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class TabBoxHandlerPrivate</definition>
        <argsstring></argsstring>
        <name>TabBoxHandlerPrivate</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::TabBoxHandlerPrivate</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_private" kindref="compound">TabBoxHandlerPrivate</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="293" column="18" bodyfile="kwin/src/tabbox/tabboxhandler.h" bodystart="293" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a8b33389147c8514da47542d82e208346" prot="private" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_private" kindref="compound">TabBoxHandlerPrivate</ref> *</type>
        <definition>TabBoxHandlerPrivate* KWin::TabBox::TabBoxHandler::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="294" column="26" bodyfile="kwin/src/tabbox/tabboxhandler.h" bodystart="294" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1afd9c605d4b851b017536e5a7934b6da2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::TabBox::TabBoxHandler::TabBoxHandler</definition>
        <argsstring>(QObject *parent)</argsstring>
        <name>TabBoxHandler</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::TabBoxHandler</qualifiedname>
        <param>
          <type>QObject *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="78" column="5" bodyfile="kwin/src/tabbox/tabboxhandler.cpp" bodystart="327" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1abd4d01a7af70776b0209b35b6cbb17c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::TabBox::TabBoxHandler::~TabBoxHandler</definition>
        <argsstring>() override</argsstring>
        <name>~TabBoxHandler</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::~TabBoxHandler</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="79" column="5" bodyfile="kwin/src/tabbox/tabboxhandler.cpp" bodystart="334" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a835a3a99578c46256f785aa139478810" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int KWin::TabBox::TabBoxHandler::activeScreen</definition>
        <argsstring>() const =0</argsstring>
        <name>activeScreen</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::activeScreen</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a8624aef24080c90213f594f318ca1c51">activeScreen</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The id of the active screen </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="84" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1ab84bb67514e3a108c2fa6d070e22f4cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
        <definition>virtual Window * KWin::TabBox::TabBoxHandler::activeClient</definition>
        <argsstring>() const =0</argsstring>
        <name>activeClient</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::activeClient</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1ac7d99796a5d77cbf58b3b63386875b4b">activeClient</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current active <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> or NULL if there is no active client. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="89" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a1ca7f3daa9b307dbe36772ccae621afd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
        <definition>virtual Window * KWin::TabBox::TabBoxHandler::nextClientFocusChain</definition>
        <argsstring>(Window *client) const =0</argsstring>
        <name>nextClientFocusChain</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::nextClientFocusChain</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a39c3cfed15b68caf3f9c7d84bfd9e393">nextClientFocusChain</reimplementedby>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The client which is starting point to find the next client </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The next <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> in focus chain </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="94" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a5b00471bfed7957cb251a94e3b5dbb39" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
        <definition>virtual Window * KWin::TabBox::TabBoxHandler::firstClientFocusChain</definition>
        <argsstring>() const =0</argsstring>
        <name>firstClientFocusChain</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::firstClientFocusChain</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1aac40da9b9e7ef4ffe93ae605cb77c826">firstClientFocusChain</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is used by the <ref refid="class_k_win_1_1_tab_box_1_1_client_model" kindref="compound">ClientModel</ref> to find an entrance into the focus chain in case there is no active <ref refid="class_client" kindref="compound">Client</ref>.</para>
<para><simplesect kind="return"><para>The first <ref refid="class_client" kindref="compound">Client</ref> of the focus chain </para>
</simplesect>
<simplesect kind="since"><para>4.9.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="102" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a5430ccba40f20b8e2cba54ea46e9e4d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool KWin::TabBox::TabBoxHandler::isInFocusChain</definition>
        <argsstring>(Window *client) const =0</argsstring>
        <name>isInFocusChain</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::isInFocusChain</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1ae1cc410f909fc5a9023033dbf02f0a65">isInFocusChain</reimplementedby>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks whether the given <computeroutput>client</computeroutput> is part of the focus chain at all. This is useful to figure out whether the currently active <ref refid="class_client" kindref="compound">Client</ref> can be used as a starting point to construct the recently used list.</para>
<para>In case the <computeroutput>client</computeroutput> is not in the focus chain it is recommended to use the <ref refid="class_client" kindref="compound">Client</ref> returned by firstClientFocusChain.</para>
<para>The method accepts a <computeroutput>null</computeroutput> <ref refid="class_client" kindref="compound">Client</ref> and in that case <computeroutput>false</computeroutput> is returned. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="class_client" kindref="compound">Client</ref> to check whether it is in the Focus Chain </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> in case the <ref refid="class_client" kindref="compound">Client</ref> is part of the focus chain, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
<simplesect kind="since"><para>4.9.2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="116" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a93c8d7064108f456363ab1fada1b2bc0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>QString</type>
        <definition>virtual QString KWin::TabBox::TabBoxHandler::desktopName</definition>
        <argsstring>(Window *client) const =0</argsstring>
        <name>desktopName</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::desktopName</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a8e0835bac3d27bbb409200aaca651b14">desktopName</reimplementedby>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The client whose desktop name should be retrieved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The desktop name of the given <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>. If the client is on all desktops the name of current desktop will be returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="122" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1aedc1923f16c9b312ba368baf4f3bf71c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool KWin::TabBox::TabBoxHandler::isKWinCompositing</definition>
        <argsstring>() const =0</argsstring>
        <name>isKWinCompositing</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::isKWinCompositing</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a69ae423644c16b12320601d48558c37d">isKWinCompositing</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether <ref refid="namespace_k_win" kindref="compound">KWin</ref> is currently compositing and it&apos;s related features (elevating) can be used </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="127" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1adc79a68ce2e1b96de9f4e0bd64e4ab6e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void KWin::TabBox::TabBoxHandler::elevateClient</definition>
        <argsstring>(Window *c, QWindow *tabbox, bool elevate) const =0</argsstring>
        <name>elevateClient</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::elevateClient</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a68763b29d004974a9917c7c5fd834aa8">elevateClient</reimplementedby>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>QWindow *</type>
          <declname>tabbox</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>elevate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>De-/Elevate a client using the compositor (if enabled) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="132" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a17bf330a869128e8753245e460d538ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void KWin::TabBox::TabBoxHandler::raiseClient</definition>
        <argsstring>(Window *c) const =0</argsstring>
        <name>raiseClient</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::raiseClient</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1af1e3c769e92554ca0b510f82e901a12d">raiseClient</reimplementedby>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raise a client (w/o activating it) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="137" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1ad3dfbbccaeb9119a6f8511f88f387434" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void KWin::TabBox::TabBoxHandler::restack</definition>
        <argsstring>(Window *c, Window *under)=0</argsstring>
        <name>restack</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::restack</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a4748b99f999ab635acdbdb5b9ef6948a">restack</reimplementedby>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>under</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The client to be restacked </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>under</parametername>
</parameternamelist>
<parameterdescription>
<para>The client the other one will be placed below </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="143" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a34f054117697437aaa5ac929f1ef067d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void KWin::TabBox::TabBoxHandler::shadeClient</definition>
        <argsstring>(Window *c, bool b) const =0</argsstring>
        <name>shadeClient</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::shadeClient</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a19278e6b9ef9d1a431021fd32e1c8b3b">shadeClient</reimplementedby>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Toggle between ShadeHover and ShadeNormal - not shaded windows are unaffected <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The client to be shaded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to un- or shade </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="150" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a2b9d12f0ffca03cdae3b04cebf53025f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void KWin::TabBox::TabBoxHandler::highlightWindows</definition>
        <argsstring>(Window *window=nullptr, QWindow *controller=nullptr)=0</argsstring>
        <name>highlightWindows</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::highlightWindows</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1ad005d20aae9128904e0cf5e25ce5dfb3">highlightWindows</reimplementedby>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>window</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>QWindow *</type>
          <declname>controller</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="152" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a9a72c4f4f9079ca60a5c151297645d06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> * &gt;</type>
        <definition>virtual QList&lt; Window * &gt; KWin::TabBox::TabBoxHandler::stackingOrder</definition>
        <argsstring>() const =0</argsstring>
        <name>stackingOrder</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::stackingOrder</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a18eb06cc15571f0522a35addbebf3e3a">stackingOrder</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current stacking order of Windows </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="157" column="19"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a866b954e11daf2ff29a568e34c412c5d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
        <definition>virtual Window * KWin::TabBox::TabBoxHandler::clientToAddToList</definition>
        <argsstring>(Window *client) const =0</argsstring>
        <name>clientToAddToList</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::clientToAddToList</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a5c94ecbd74c93392289bbf2516d42377">clientToAddToList</reimplementedby>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determines if given client will be added to the list: <itemizedlist>
<listitem>
<para>if the client wants to have tab focus. </para>
</listitem>
<listitem>
<para>The client won&apos;t be added if it has modal dialogs </para>
</listitem>
<listitem>
<para>In that case the modal dialog will be returned if it isn&apos;t already included </para>
</listitem>
<listitem>
<para>Won&apos;t be added if it isn&apos;t on active screen when using separate screen focus </para>
</listitem>
</itemizedlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The client to be checked for inclusion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allDesktops</parametername>
</parameternamelist>
<parameterdescription>
<para>Add clients from all desktops or only from current </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The client to be included in the list or NULL if it isn&apos;t to be included </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="172" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a17d4fa8986e27803dcefce9ada63f17f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
        <definition>virtual Window * KWin::TabBox::TabBoxHandler::desktopClient</definition>
        <argsstring>() const =0</argsstring>
        <name>desktopClient</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::desktopClient</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a0ea98dccf0b15229e30bcd36dac2d051">desktopClient</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The first desktop window in the stacking order. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="176" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1ae61b3a6a810810a54dd80b6c999c057b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void KWin::TabBox::TabBoxHandler::activateAndClose</definition>
        <argsstring>()=0</argsstring>
        <name>activateAndClose</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::activateAndClose</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1a1e46964ea9cdcfe7451a2d294ddcbdca">activateAndClose</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Activates the currently selected client and closes the <ref refid="class_k_win_1_1_tab_box_1_1_tab_box" kindref="compound">TabBox</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="180" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1aab06239dbde732513bfea7314a591fc5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_k_win_1_1_tab_box_1_1_tab_box_config" kindref="compound">TabBoxConfig</ref> &amp;</type>
        <definition>const KWin::TabBox::TabBoxConfig &amp; KWin::TabBox::TabBoxHandler::config</definition>
        <argsstring>() const</argsstring>
        <name>config</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::config</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The currently used <ref refid="class_k_win_1_1_tab_box_1_1_tab_box_config" kindref="compound">TabBoxConfig</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="185" column="24" bodyfile="kwin/src/tabbox/tabboxhandler.cpp" bodystart="339" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a3acd26a3cd3ecbef086d7b27cb2af0c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::TabBox::TabBoxHandler::setConfig</definition>
        <argsstring>(const TabBoxConfig &amp;config)</argsstring>
        <name>setConfig</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::setConfig</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_tab_box_1_1_tab_box_config" kindref="compound">TabBoxConfig</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call this method when you want to change the currently used <ref refid="class_k_win_1_1_tab_box_1_1_tab_box_config" kindref="compound">TabBoxConfig</ref>. It fires the signal configChanged. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Updates the currently used <ref refid="class_k_win_1_1_tab_box_1_1_tab_box_config" kindref="compound">TabBoxConfig</ref> to config </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="191" column="10" bodyfile="kwin/src/tabbox/tabboxhandler.cpp" bodystart="344" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a4474cf46a142bc64d418ecd68786a43a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::TabBox::TabBoxHandler::show</definition>
        <argsstring>()</argsstring>
        <name>show</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::show</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call this method to show the TabBoxView. Depending on current configuration this method might not do anything. If highlight windows effect is to be used it will be activated. <simplesect kind="see"><para><ref refid="class_k_win_1_1_tab_box_1_1_tab_box_config_1ab8176a3440b5411eb51d95d7fd7668c5" kindref="member">TabBoxConfig::isShowTabBox</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_tab_box_1_1_tab_box_config_1a57ed8dad596c18c59f320679fcfae3f3" kindref="member">TabBoxConfig::isHighlightWindows</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="200" column="10" bodyfile="kwin/src/tabbox/tabboxhandler.cpp" bodystart="350" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a4c2bb70440f803a93fdc1d86452fcddf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::TabBox::TabBoxHandler::hide</definition>
        <argsstring>(bool abort=false)</argsstring>
        <name>hide</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::hide</qualifiedname>
        <param>
          <type>bool</type>
          <declname>abort</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hides the TabBoxView if shown. Deactivates highlight windows effect if active. <simplesect kind="see"><para><ref refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a4474cf46a142bc64d418ecd68786a43a" kindref="member">show</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="206" column="10" bodyfile="kwin/src/tabbox/tabboxhandler.cpp" bodystart="378" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1abe666340fa17a9b13d54d598444fad7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::TabBox::TabBoxHandler::setCurrentIndex</definition>
        <argsstring>(const QModelIndex &amp;index)</argsstring>
        <name>setCurrentIndex</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::setCurrentIndex</qualifiedname>
        <param>
          <type>const QModelIndex &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the current model index in the view and updates highlight windows if active. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The current Model index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="213" column="10" bodyfile="kwin/src/tabbox/tabboxhandler.cpp" bodystart="440" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a1b285fdf4fa107e2f43c66ca022c9a51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const QModelIndex &amp;</type>
        <definition>const QModelIndex &amp; KWin::TabBox::TabBoxHandler::currentIndex</definition>
        <argsstring>() const</argsstring>
        <name>currentIndex</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::currentIndex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the current index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="217" column="23" bodyfile="kwin/src/tabbox/tabboxhandler.cpp" bodystart="455" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a7fa99fa6ceb163c461d888c688f46f5c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QModelIndex</type>
        <definition>QModelIndex KWin::TabBox::TabBoxHandler::nextPrev</definition>
        <argsstring>(bool forward) const</argsstring>
        <name>nextPrev</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::nextPrev</qualifiedname>
        <param>
          <type>bool</type>
          <declname>forward</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the next or previous item of the current item. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>forward</parametername>
</parameternamelist>
<parameterdescription>
<para>next or previous item </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The next or previous item. If there is no matching item the current item will be returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="225" column="17" bodyfile="kwin/src/tabbox/tabboxhandler.cpp" bodystart="394" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a0ec37149b20e97a01c73622b776dad1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::TabBox::TabBoxHandler::createModel</definition>
        <argsstring>(bool partialReset=false)</argsstring>
        <name>createModel</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::createModel</qualifiedname>
        <param>
          <type>bool</type>
          <declname>partialReset</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes the model based on the current config. This method has to be invoked before showing the <ref refid="class_k_win_1_1_tab_box_1_1_tab_box" kindref="compound">TabBox</ref>. It can also be invoked when clients are added or removed. In that case partialReset has to be true.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>partialReset</parametername>
</parameternamelist>
<parameterdescription>
<para>Keep the currently selected item or regenerate everything </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="235" column="10" bodyfile="kwin/src/tabbox/tabboxhandler.cpp" bodystart="500" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a79c91051310646f932094c7376722254" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::TabBox::TabBoxHandler::grabbedKeyEvent</definition>
        <argsstring>(QKeyEvent *event) const</argsstring>
        <name>grabbedKeyEvent</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::grabbedKeyEvent</qualifiedname>
        <param>
          <type>QKeyEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handles additional grabbed key events by the <ref refid="class_k_win_1_1_tab_box_1_1_tab_box" kindref="compound">TabBox</ref> controller. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>The key event which has been grabbed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="241" column="18" bodyfile="kwin/src/tabbox/tabboxhandler.cpp" bodystart="460" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a26bc0992590b6dcfb92ef5f1d09ffacf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::TabBox::TabBoxHandler::containsPos</definition>
        <argsstring>(const QPoint &amp;pos) const</argsstring>
        <name>containsPos</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::containsPos</qualifiedname>
        <param>
          <type>const QPoint &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The position to be tested in global coordinates </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the view contains the point, otherwise false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="246" column="10" bodyfile="kwin/src/tabbox/tabboxhandler.cpp" bodystart="468" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1aa5574eda1e9944da7ec3204565f685d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QModelIndex</type>
        <definition>QModelIndex KWin::TabBox::TabBoxHandler::index</definition>
        <argsstring>(Window *client) const</argsstring>
        <name>index</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::index</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> whose index should be returned </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the ModelIndex of given <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> or an invalid ModelIndex if the model does not contain the given <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_tab_box_1_1_client_model_1a82e28d3d3c91eec1b4e0f9f150a32ed6" kindref="member">ClientModel::index</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="253" column="17" bodyfile="kwin/src/tabbox/tabboxhandler.cpp" bodystart="480" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a4d36491fe85396618223ad617d008824" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> * &gt;</type>
        <definition>QList&lt; Window * &gt; KWin::TabBox::TabBoxHandler::clientList</definition>
        <argsstring>() const</argsstring>
        <name>clientList</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::clientList</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns the current list of Windows. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_tab_box_1_1_client_model_1a6c2fb0d2f18f4bc36f80b53d37b9b7cb" kindref="member">ClientModel::clientList</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="258" column="11" bodyfile="kwin/src/tabbox/tabboxhandler.cpp" bodystart="485" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a913dac104fcbe61766ab024f1c674f80" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
        <definition>Window * KWin::TabBox::TabBoxHandler::client</definition>
        <argsstring>(const QModelIndex &amp;index) const</argsstring>
        <name>client</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::client</qualifiedname>
        <param>
          <type>const QModelIndex &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the client to be returned </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> at given model index. If the index is invalid, does not point to a <ref refid="class_client" kindref="compound">Client</ref> or the list is empty, NULL will be returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="265" column="12" bodyfile="kwin/src/tabbox/tabboxhandler.cpp" bodystart="490" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1aee584b93ac358f6c323258662ab3bf6c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QModelIndex</type>
        <definition>QModelIndex KWin::TabBox::TabBoxHandler::first</definition>
        <argsstring>() const</argsstring>
        <name>first</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::first</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The first model index. That is the model index at position 0, 0. It is valid, as desktop has at least one desktop and if there are no clients an empty item is created. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="271" column="17" bodyfile="kwin/src/tabbox/tabboxhandler.cpp" bodystart="523" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a888f356cdd3546f027bb002a76c76924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::TabBox::TabBoxHandler::eventFilter</definition>
        <argsstring>(QObject *watcher, QEvent *event) override</argsstring>
        <name>eventFilter</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::eventFilter</qualifiedname>
        <param>
          <type>QObject *</type>
          <declname>watcher</declname>
        </param>
        <param>
          <type>QEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="273" column="10" bodyfile="kwin/src/tabbox/tabboxhandler.cpp" bodystart="528" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a9799723678f579adfe9286e4d015c318" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool KWin::TabBox::TabBoxHandler::noModifierGrab</definition>
        <argsstring>() const =0</argsstring>
        <name>noModifierGrab</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::noModifierGrab</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl_1ae024df7bd37ecc039c34691c9300f97e">noModifierGrab</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether the <ref refid="class_k_win_1_1_tab_box_1_1_tab_box" kindref="compound">TabBox</ref> operates in a no modifier grab mode. In this mode a click on an item should directly accept and close the tabbox. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="279" column="18"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="signal">
      <memberdef kind="signal" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1abd53ec5810a0ca18fb39c01c2354284c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::TabBox::TabBoxHandler::configChanged</definition>
        <argsstring>()</argsstring>
        <name>configChanged</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::configChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is fired when the <ref refid="class_k_win_1_1_tab_box_1_1_tab_box_config" kindref="compound">TabBoxConfig</ref> changes <simplesect kind="see"><para><ref refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a3acd26a3cd3ecbef086d7b27cb2af0c4" kindref="member">setConfig</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="286" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a9f408a3c9c90a32fa815a6c1e17185fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::TabBox::TabBoxHandler::selectedIndexChanged</definition>
        <argsstring>()</argsstring>
        <name>selectedIndexChanged</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::selectedIndexChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="287" column="10"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-slot">
      <memberdef kind="slot" id="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a76c90b159a1bd3f51b328b6d218b4784" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::TabBox::TabBoxHandler::initHighlightWindows</definition>
        <argsstring>()</argsstring>
        <name>initHighlightWindows</name>
        <qualifiedname>KWin::TabBox::TabBoxHandler::initHighlightWindows</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabbox/tabboxhandler.h" line="290" column="10" bodyfile="kwin/src/tabbox/tabboxhandler.cpp" bodystart="367" bodyend="376"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class is a wrapper around <ref refid="namespace_k_win" kindref="compound">KWin</ref> <ref refid="class_k_win_1_1_workspace" kindref="compound">Workspace</ref>. It is used for accessing the required core methods from inside <ref refid="class_k_win_1_1_tab_box_1_1_tab_box" kindref="compound">TabBox</ref> and has to be implemented in <ref refid="namespace_k_win" kindref="compound">KWin</ref> core.</para>
<para><simplesect kind="author"><para>Martin Gräßlin <ulink url="mailto:mgraesslin@kde.org">mgraesslin@kde.org</ulink> </para>
</simplesect>
<simplesect kind="since"><para>4.4 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>KWin::TabBox::TabBoxHandler</label>
        <link refid="class_k_win_1_1_tab_box_1_1_tab_box_handler"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>KWin::TabBox::TabBoxHandlerImpl</label>
        <link refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_impl"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>KWin::TabBox::TabBoxHandler</label>
        <link refid="class_k_win_1_1_tab_box_1_1_tab_box_handler"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/tabbox/tabboxhandler.h" line="74" column="1" bodyfile="kwin/src/tabbox/tabboxhandler.h" bodystart="75" bodyend="295"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1ae61b3a6a810810a54dd80b6c999c057b" prot="public" virt="pure-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>activateAndClose</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1ab84bb67514e3a108c2fa6d070e22f4cf" prot="public" virt="pure-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>activeClient</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a835a3a99578c46256f785aa139478810" prot="public" virt="pure-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>activeScreen</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a913dac104fcbe61766ab024f1c674f80" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>client</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a4d36491fe85396618223ad617d008824" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>clientList</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a866b954e11daf2ff29a568e34c412c5d" prot="public" virt="pure-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>clientToAddToList</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1aab06239dbde732513bfea7314a591fc5" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>config</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1abd53ec5810a0ca18fb39c01c2354284c" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>configChanged</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a26bc0992590b6dcfb92ef5f1d09ffacf" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>containsPos</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a0ec37149b20e97a01c73622b776dad1d" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>createModel</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a1b285fdf4fa107e2f43c66ca022c9a51" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>currentIndex</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a8b33389147c8514da47542d82e208346" prot="private" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>d</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a17d4fa8986e27803dcefce9ada63f17f" prot="public" virt="pure-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>desktopClient</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a93c8d7064108f456363ab1fada1b2bc0" prot="public" virt="pure-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>desktopName</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1adc79a68ce2e1b96de9f4e0bd64e4ab6e" prot="public" virt="pure-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>elevateClient</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a888f356cdd3546f027bb002a76c76924" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>eventFilter</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1aee584b93ac358f6c323258662ab3bf6c" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>first</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a5b00471bfed7957cb251a94e3b5dbb39" prot="public" virt="pure-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>firstClientFocusChain</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a79c91051310646f932094c7376722254" prot="public" virt="virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>grabbedKeyEvent</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a4c2bb70440f803a93fdc1d86452fcddf" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>hide</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a2b9d12f0ffca03cdae3b04cebf53025f" prot="public" virt="pure-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>highlightWindows</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1aa5574eda1e9944da7ec3204565f685d4" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>index</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a76c90b159a1bd3f51b328b6d218b4784" prot="private" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>initHighlightWindows</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a5430ccba40f20b8e2cba54ea46e9e4d8" prot="public" virt="pure-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>isInFocusChain</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1aedc1923f16c9b312ba368baf4f3bf71c" prot="public" virt="pure-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>isKWinCompositing</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a1ca7f3daa9b307dbe36772ccae621afd" prot="public" virt="pure-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>nextClientFocusChain</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a7fa99fa6ceb163c461d888c688f46f5c" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>nextPrev</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a9799723678f579adfe9286e4d015c318" prot="public" virt="pure-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>noModifierGrab</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a17bf330a869128e8753245e460d538ff" prot="public" virt="pure-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>raiseClient</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1ad3dfbbccaeb9119a6f8511f88f387434" prot="public" virt="pure-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>restack</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a9f408a3c9c90a32fa815a6c1e17185fa" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>selectedIndexChanged</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a3acd26a3cd3ecbef086d7b27cb2af0c4" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>setConfig</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1abe666340fa17a9b13d54d598444fad7b" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>setCurrentIndex</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a34f054117697437aaa5ac929f1ef067d" prot="public" virt="pure-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>shadeClient</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a4474cf46a142bc64d418ecd68786a43a" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>show</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1a9a72c4f4f9079ca60a5c151297645d06" prot="public" virt="pure-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>stackingOrder</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1afd9c605d4b851b017536e5a7934b6da2" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>TabBoxHandler</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1ae3e2153de3ee069afd603d926cd3d026" prot="private" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>TabBoxHandlerPrivate</name></member>
      <member refid="class_k_win_1_1_tab_box_1_1_tab_box_handler_1abd4d01a7af70776b0209b35b6cbb17c9" prot="public" virt="non-virtual"><scope>KWin::TabBox::TabBoxHandler</scope><name>~TabBoxHandler</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
