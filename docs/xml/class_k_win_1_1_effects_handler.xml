<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_effects_handler" kind="class" language="C++" prot="public">
    <compoundname>KWin::EffectsHandler</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QObject</basecompoundref>
    <includes refid="effecthandler_8h" local="no">effecthandler.h</includes>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_k_win_1_1_effects_handler_1a0eea36dec1b6beb304b1fb55ccdd1e47" prot="public" static="no" strong="yes">
        <type></type>
        <name>OnScreenMessageHideFlag</name>
        <qualifiedname>KWin::EffectsHandler::OnScreenMessageHideFlag</qualifiedname>
        <enumvalue id="class_k_win_1_1_effects_handler_1a0eea36dec1b6beb304b1fb55ccdd1e47aacb12f9fb80caca46d68870e9d904d19" prot="public">
          <name>SkipsCloseAnimation</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The on-screen-message should skip the close window animation. <simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_window_1a12a46015a2f18f67615d8a344e1d758c" kindref="member">EffectWindow::skipsCloseAnimation</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flags for how to hide a shown on-screen-message <simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1ad0420267c8d74bcd8f97ec49705ed68c" kindref="member">hideOnScreenMessage</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.9 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="670" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="670" bodyend="676"/>
      </memberdef>
      <memberdef kind="typedef" id="class_k_win_1_1_effects_handler_1ad4c025e3c2d3c8b5da25e6d16ba6257f" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="namespace_k_win_1a7eda12963fb07e3df0c1f337e8526bc5" kindref="member">ElectricBorder</ref> border, const QPointF &amp;, <ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *screen)&gt;</type>
        <definition>using KWin::EffectsHandler::TouchBorderCallback =  std::function&lt;void(ElectricBorder border, const QPointF &amp;, Output *screen)&gt;</definition>
        <argsstring></argsstring>
        <name>TouchBorderCallback</name>
        <qualifiedname>KWin::EffectsHandler::TouchBorderCallback</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="163" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="163" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="class_k_win_1_1_effects_handler_1aa0761c03f3ceaab19268930cb3b12ffb" prot="protected" static="no">
        <type>QList&lt; <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> * &gt;</type>
        <definition>typedef QList&lt;Effect *&gt; KWin::EffectsHandler::EffectsList</definition>
        <argsstring></argsstring>
        <name>EffectsList</name>
        <qualifiedname>KWin::EffectsHandler::EffectsList</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1079" column="19" bodyfile="kwin/src/effect/effecthandler.h" bodystart="1079" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_k_win_1_1_effects_handler_1a1ef2138edc42fc77ec999f4ce147c52c" prot="protected" static="no">
        <type>EffectsList::const_iterator</type>
        <definition>typedef EffectsList::const_iterator KWin::EffectsHandler::EffectsIterator</definition>
        <argsstring></argsstring>
        <name>EffectsIterator</name>
        <qualifiedname>KWin::EffectsHandler::EffectsIterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1080" column="41" bodyfile="kwin/src/effect/effecthandler.h" bodystart="1080" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_k_win_1_1_effects_handler_1a229a83c757b3f0a6237cf88fef717a83" prot="protected" static="no">
        <type>QHash&lt; QByteArray, QList&lt; <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> * &gt; &gt;</type>
        <definition>typedef QHash&lt;QByteArray, QList&lt;Effect *&gt; &gt; KWin::EffectsHandler::PropertyEffectMap</definition>
        <argsstring></argsstring>
        <name>PropertyEffectMap</name>
        <qualifiedname>KWin::EffectsHandler::PropertyEffectMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1101" column="19" bodyfile="kwin/src/effect/effecthandler.h" bodystart="1101" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="property">
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1ae776ded0800eff674090c7502486605f" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QStringList</type>
        <definition>QStringList KWin::EffectsHandler::activeEffects</definition>
        <argsstring></argsstring>
        <name>activeEffects</name>
        <qualifiedname>KWin::EffectsHandler::activeEffects</qualifiedname>
        <read>activeEffects</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="117" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1a3f48b5529766947c2342cf3f5f1899dc" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QStringList</type>
        <definition>QStringList KWin::EffectsHandler::loadedEffects</definition>
        <argsstring></argsstring>
        <name>loadedEffects</name>
        <qualifiedname>KWin::EffectsHandler::loadedEffects</qualifiedname>
        <read>loadedEffects</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="118" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1aa845c78cd710dadd98da204a3d935fab" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QStringList</type>
        <definition>QStringList KWin::EffectsHandler::listOfEffects</definition>
        <argsstring></argsstring>
        <name>listOfEffects</name>
        <qualifiedname>KWin::EffectsHandler::listOfEffects</qualifiedname>
        <read>listOfEffects</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="119" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1a722658571850786bb4516ae98247479f" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">KWin::VirtualDesktop</ref> *</type>
        <definition>KWin::VirtualDesktop * KWin::EffectsHandler::currentDesktop</definition>
        <argsstring></argsstring>
        <name>currentDesktop</name>
        <qualifiedname>KWin::EffectsHandler::currentDesktop</qualifiedname>
        <read>currentDesktop</read>
        <write>setCurrentDesktop</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="121" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1aab5633ab9152a3514d8c443f3c52e3f4" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QString</type>
        <definition>QString KWin::EffectsHandler::currentActivity</definition>
        <argsstring></argsstring>
        <name>currentActivity</name>
        <qualifiedname>KWin::EffectsHandler::currentActivity</qualifiedname>
        <read>currentActivity</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="122" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1a73aa722f6c5ffec5e50555109dee09ab" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
        <definition>KWin::EffectWindow * KWin::EffectsHandler::activeWindow</definition>
        <argsstring></argsstring>
        <name>activeWindow</name>
        <qualifiedname>KWin::EffectsHandler::activeWindow</qualifiedname>
        <read>activeWindow</read>
        <write>activateWindow</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="123" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1aa97258a5b11d2ca1443d57a42e17ee1f" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QSize</type>
        <definition>QSize KWin::EffectsHandler::desktopGridSize</definition>
        <argsstring></argsstring>
        <name>desktopGridSize</name>
        <qualifiedname>KWin::EffectsHandler::desktopGridSize</qualifiedname>
        <read>desktopGridSize</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="124" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1aa0a072eb188008f628b533b2db26f670" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>int</type>
        <definition>int KWin::EffectsHandler::desktopGridWidth</definition>
        <argsstring></argsstring>
        <name>desktopGridWidth</name>
        <qualifiedname>KWin::EffectsHandler::desktopGridWidth</qualifiedname>
        <read>desktopGridWidth</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="125" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1a5db11d2431e86ba3d2bbd29656dc2a92" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>int</type>
        <definition>int KWin::EffectsHandler::desktopGridHeight</definition>
        <argsstring></argsstring>
        <name>desktopGridHeight</name>
        <qualifiedname>KWin::EffectsHandler::desktopGridHeight</qualifiedname>
        <read>desktopGridHeight</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="126" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1a23954c6a5181bfc401a3a916841a26b9" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>int</type>
        <definition>int KWin::EffectsHandler::workspaceWidth</definition>
        <argsstring></argsstring>
        <name>workspaceWidth</name>
        <qualifiedname>KWin::EffectsHandler::workspaceWidth</qualifiedname>
        <read>workspaceWidth</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="127" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1a400258bd3928481b30db16866914f249" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>int</type>
        <definition>int KWin::EffectsHandler::workspaceHeight</definition>
        <argsstring></argsstring>
        <name>workspaceHeight</name>
        <qualifiedname>KWin::EffectsHandler::workspaceHeight</qualifiedname>
        <read>workspaceHeight</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="128" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1ae2c39f07cf91ab8c1e6fc7ec7528ed38" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QList&lt; <ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">KWin::VirtualDesktop</ref> * &gt;</type>
        <definition>QList&lt;KWin::VirtualDesktop *&gt; KWin::EffectsHandler::desktops</definition>
        <argsstring></argsstring>
        <name>desktops</name>
        <qualifiedname>KWin::EffectsHandler::desktops</qualifiedname>
        <read>desktops</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="129" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1a840615298f9f98325cd73661e5ca4abc" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::optionRollOverDesktops</definition>
        <argsstring></argsstring>
        <name>optionRollOverDesktops</name>
        <qualifiedname>KWin::EffectsHandler::optionRollOverDesktops</qualifiedname>
        <read>optionRollOverDesktops</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="130" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1aebd988f34fb170c9b1c5a6752ee695c1" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_k_win_1_1_output" kindref="compound">KWin::Output</ref> *</type>
        <definition>KWin::Output * KWin::EffectsHandler::activeScreen</definition>
        <argsstring></argsstring>
        <name>activeScreen</name>
        <qualifiedname>KWin::EffectsHandler::activeScreen</qualifiedname>
        <read>activeScreen</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="131" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1aec06e259fdd169f6fca3f531d742cdaa" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>qreal</type>
        <definition>qreal KWin::EffectsHandler::animationTimeFactor</definition>
        <argsstring></argsstring>
        <name>animationTimeFactor</name>
        <qualifiedname>KWin::EffectsHandler::animationTimeFactor</qualifiedname>
        <read>animationTimeFactor</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Factor by which animation speed in the effect should be modified (multiplied). If configurable in the effect itself, the option should have also &apos;default&apos; animation speed. The actual value should be determined using animationTime(). Note: The factor can be also 0, so make sure your code can cope with 0ms time if used manually. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="139" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1a3eeaa4210c5eb168ded7ba0198fa0d32" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QList&lt; <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> * &gt;</type>
        <definition>QList&lt;EffectWindow *&gt; KWin::EffectsHandler::stackingOrder</definition>
        <argsstring></argsstring>
        <name>stackingOrder</name>
        <qualifiedname>KWin::EffectsHandler::stackingOrder</qualifiedname>
        <read>stackingOrder</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="140" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1ad0affb062069cceead6205efe6a4f49c" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::decorationsHaveAlpha</definition>
        <argsstring></argsstring>
        <name>decorationsHaveAlpha</name>
        <qualifiedname>KWin::EffectsHandler::decorationsHaveAlpha</qualifiedname>
        <read>decorationsHaveAlpha</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether window decorations use the alpha channel. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="144" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1a53ad442150183d254eca227ddd5571e1" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="namespace_k_win_1aa1e33474a7077a13169f350a5949a79a" kindref="member">CompositingType</ref></type>
        <definition>CompositingType KWin::EffectsHandler::compositingType</definition>
        <argsstring></argsstring>
        <name>compositingType</name>
        <qualifiedname>KWin::EffectsHandler::compositingType</qualifiedname>
        <read>compositingType</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="145" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1af20aeb5fb6f87bf9bbaa52a97fd80478" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QPointF</type>
        <definition>QPointF KWin::EffectsHandler::cursorPos</definition>
        <argsstring></argsstring>
        <name>cursorPos</name>
        <qualifiedname>KWin::EffectsHandler::cursorPos</qualifiedname>
        <read>cursorPos</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="146" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1aebb65bfab7dca8095ded3906b1bca282" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QSize</type>
        <definition>QSize KWin::EffectsHandler::virtualScreenSize</definition>
        <argsstring></argsstring>
        <name>virtualScreenSize</name>
        <qualifiedname>KWin::EffectsHandler::virtualScreenSize</qualifiedname>
        <read>virtualScreenSize</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="147" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1a7f34a25364c7923d76eb5ad42a8c898f" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QRect</type>
        <definition>QRect KWin::EffectsHandler::virtualScreenGeometry</definition>
        <argsstring></argsstring>
        <name>virtualScreenGeometry</name>
        <qualifiedname>KWin::EffectsHandler::virtualScreenGeometry</qualifiedname>
        <read>virtualScreenGeometry</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="148" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1a3aa7ef6f0231387000df1204e4db9ec4" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::hasActiveFullScreenEffect</definition>
        <argsstring></argsstring>
        <name>hasActiveFullScreenEffect</name>
        <qualifiedname>KWin::EffectsHandler::hasActiveFullScreenEffect</qualifiedname>
        <read>hasActiveFullScreenEffect</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="149" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1a28610f54dfc904ebf6628a2e8cb6ca2d" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::colorPickerActive</definition>
        <argsstring></argsstring>
        <name>colorPickerActive</name>
        <qualifiedname>KWin::EffectsHandler::colorPickerActive</qualifiedname>
        <read>isColorPickerActive</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="150" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1ab1027be6b6a2700ab61c62086b5e1a37" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="namespace_k_win_1a416cef954a72080ddb0d040111f008dc" kindref="member">KWin::SessionState</ref></type>
        <definition>KWin::SessionState KWin::EffectsHandler::sessionState</definition>
        <argsstring></argsstring>
        <name>sessionState</name>
        <qualifiedname>KWin::EffectsHandler::sessionState</qualifiedname>
        <read>sessionState</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The status of the session i.e if the user is logging out <simplesect kind="since"><para>5.18 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="156" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effects_handler_1a781ac041fcb37f38a48a2c8aae0efb60" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
        <definition>KWin::EffectWindow * KWin::EffectsHandler::inputPanel</definition>
        <argsstring></argsstring>
        <name>inputPanel</name>
        <qualifiedname>KWin::EffectsHandler::inputPanel</qualifiedname>
        <read>inputPanel</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="158" column="5" bodyfile="kwin/src/effect/effecthandler.h" bodystart="158" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_k_win_1_1_effects_handler_1ac8649272bb0576cc72f2486439664efe" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Effect</definition>
        <argsstring></argsstring>
        <name>Effect</name>
        <qualifiedname>KWin::EffectsHandler::Effect</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="160" column="18" bodyfile="kwin/src/effect/effecthandler.h" bodystart="160" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_effects_handler_1a47055a9e0d3d0c4798dbd946a2f90615" prot="public" static="no" mutable="no">
        <type>QPointF</type>
        <definition>QPointF KWin::EffectsHandler::position</definition>
        <argsstring></argsstring>
        <name>position</name>
        <qualifiedname>KWin::EffectsHandler::position</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1084" column="17" bodyfile="kwin/src/effect/effecthandler.h" bodystart="1084" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_effects_handler_1af01ffad1f759c16e90fb35516964b5c5" prot="public" static="no" mutable="no">
        <type>Qt::MouseButtons</type>
        <definition>Qt::MouseButtons KWin::EffectsHandler::buttons</definition>
        <argsstring></argsstring>
        <name>buttons</name>
        <qualifiedname>KWin::EffectsHandler::buttons</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1085" column="26" bodyfile="kwin/src/effect/effecthandler.h" bodystart="1085" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_effects_handler_1aee134f5a82234293371ed3c7c73b1a4c" prot="public" static="no" mutable="no">
        <type>Qt::KeyboardModifiers</type>
        <definition>Qt::KeyboardModifiers KWin::EffectsHandler::modifiers</definition>
        <argsstring></argsstring>
        <name>modifiers</name>
        <qualifiedname>KWin::EffectsHandler::modifiers</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1086" column="31" bodyfile="kwin/src/effect/effecthandler.h" bodystart="1086" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_effects_handler_1a4c4d65f746ac05b1e127af82df42941e" prot="protected" static="no" mutable="no">
        <type>struct <ref refid="class_k_win_1_1_effects_handler" kindref="compound">KWin::EffectsHandler</ref></type>
        <definition>struct KWin::EffectsHandler KWin::EffectsHandler::m_cursor</definition>
        <argsstring></argsstring>
        <name>m_cursor</name>
        <qualifiedname>KWin::EffectsHandler::m_cursor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1087" column="14"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_effects_handler_1ae1e1f59c67718d9a7ec2c97540d83568" prot="protected" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> *</type>
        <definition>Effect* KWin::EffectsHandler::keyboard_grab_effect</definition>
        <argsstring></argsstring>
        <name>keyboard_grab_effect</name>
        <qualifiedname>KWin::EffectsHandler::keyboard_grab_effect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1089" column="12" bodyfile="kwin/src/effect/effecthandler.h" bodystart="1089" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_effects_handler_1a3eaef43498d3d1008491ed2716347576" prot="protected" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> *</type>
        <definition>Effect* KWin::EffectsHandler::fullscreen_effect</definition>
        <argsstring></argsstring>
        <name>fullscreen_effect</name>
        <qualifiedname>KWin::EffectsHandler::fullscreen_effect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1090" column="12" bodyfile="kwin/src/effect/effecthandler.h" bodystart="1090" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_effects_handler_1abf08ae922efe0dea4102c158cebece79" prot="protected" static="no" mutable="no">
        <type>QMultiMap&lt; int, <ref refid="namespace_k_win_1ace229504290a828dece325a748e290c9" kindref="member">EffectPair</ref> &gt;</type>
        <definition>QMultiMap&lt;int, EffectPair&gt; KWin::EffectsHandler::effect_order</definition>
        <argsstring></argsstring>
        <name>effect_order</name>
        <qualifiedname>KWin::EffectsHandler::effect_order</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1091" column="15" bodyfile="kwin/src/effect/effecthandler.h" bodystart="1091" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_effects_handler_1a8c68577f9c9a9ad8b169dae1b77582ad" prot="protected" static="no" mutable="no">
        <type>QList&lt; <ref refid="namespace_k_win_1ace229504290a828dece325a748e290c9" kindref="member">EffectPair</ref> &gt;</type>
        <definition>QList&lt;EffectPair&gt; KWin::EffectsHandler::loaded_effects</definition>
        <argsstring></argsstring>
        <name>loaded_effects</name>
        <qualifiedname>KWin::EffectsHandler::loaded_effects</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1095" column="11" bodyfile="kwin/src/effect/effecthandler.h" bodystart="1095" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_effects_handler_1a1517b585d33791a3e46492ae6d659584" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_k_win_1aa1e33474a7077a13169f350a5949a79a" kindref="member">CompositingType</ref></type>
        <definition>CompositingType KWin::EffectsHandler::compositing_type</definition>
        <argsstring></argsstring>
        <name>compositing_type</name>
        <qualifiedname>KWin::EffectsHandler::compositing_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1096" column="21" bodyfile="kwin/src/effect/effecthandler.h" bodystart="1096" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_effects_handler_1a991cd17b9a365d9db4d68ddf3f36da0d" prot="protected" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_effects_handler_1aa0761c03f3ceaab19268930cb3b12ffb" kindref="member">EffectsList</ref></type>
        <definition>EffectsList KWin::EffectsHandler::m_activeEffects</definition>
        <argsstring></argsstring>
        <name>m_activeEffects</name>
        <qualifiedname>KWin::EffectsHandler::m_activeEffects</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1097" column="17" bodyfile="kwin/src/effect/effecthandler.h" bodystart="1097" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_effects_handler_1a8f19e1636e6b98a6ab42c1d290fae672" prot="protected" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_effects_handler_1a1ef2138edc42fc77ec999f4ce147c52c" kindref="member">EffectsIterator</ref></type>
        <definition>EffectsIterator KWin::EffectsHandler::m_currentDrawWindowIterator</definition>
        <argsstring></argsstring>
        <name>m_currentDrawWindowIterator</name>
        <qualifiedname>KWin::EffectsHandler::m_currentDrawWindowIterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1098" column="21" bodyfile="kwin/src/effect/effecthandler.h" bodystart="1098" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_effects_handler_1a0ec7dd727c793c6e0e394070959e3058" prot="protected" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_effects_handler_1a1ef2138edc42fc77ec999f4ce147c52c" kindref="member">EffectsIterator</ref></type>
        <definition>EffectsIterator KWin::EffectsHandler::m_currentPaintWindowIterator</definition>
        <argsstring></argsstring>
        <name>m_currentPaintWindowIterator</name>
        <qualifiedname>KWin::EffectsHandler::m_currentPaintWindowIterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1099" column="21" bodyfile="kwin/src/effect/effecthandler.h" bodystart="1099" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_effects_handler_1a33ef50504479d7de0455c75b8863006f" prot="protected" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_effects_handler_1a1ef2138edc42fc77ec999f4ce147c52c" kindref="member">EffectsIterator</ref></type>
        <definition>EffectsIterator KWin::EffectsHandler::m_currentPaintScreenIterator</definition>
        <argsstring></argsstring>
        <name>m_currentPaintScreenIterator</name>
        <qualifiedname>KWin::EffectsHandler::m_currentPaintScreenIterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1100" column="21" bodyfile="kwin/src/effect/effecthandler.h" bodystart="1100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_effects_handler_1a8977f4e67c8cea40eb0d5a56431db5e1" prot="protected" static="no" mutable="no">
        <type>QHash&lt; QByteArray, qulonglong &gt;</type>
        <definition>QHash&lt;QByteArray, qulonglong&gt; KWin::EffectsHandler::m_managedProperties</definition>
        <argsstring></argsstring>
        <name>m_managedProperties</name>
        <qualifiedname>KWin::EffectsHandler::m_managedProperties</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1105" column="11" bodyfile="kwin/src/effect/effecthandler.h" bodystart="1105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_effects_handler_1a4291b830d7c09b02ed712c3d22fd6aa4" prot="protected" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_compositor" kindref="compound">Compositor</ref> *</type>
        <definition>Compositor* KWin::EffectsHandler::m_compositor</definition>
        <argsstring></argsstring>
        <name>m_compositor</name>
        <qualifiedname>KWin::EffectsHandler::m_compositor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1106" column="16" bodyfile="kwin/src/effect/effecthandler.h" bodystart="1106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_effects_handler_1ab85de72d7501ab7654b5f702441c5814" prot="protected" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_workspace_scene" kindref="compound">WorkspaceScene</ref> *</type>
        <definition>WorkspaceScene* KWin::EffectsHandler::m_scene</definition>
        <argsstring></argsstring>
        <name>m_scene</name>
        <qualifiedname>KWin::EffectsHandler::m_scene</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1107" column="20" bodyfile="kwin/src/effect/effecthandler.h" bodystart="1107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_effects_handler_1a316d3ca024679a2bf76dbdb5c39aabd8" prot="protected" static="no" mutable="no">
        <type>QList&lt; <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> * &gt;</type>
        <definition>QList&lt;Effect *&gt; KWin::EffectsHandler::m_grabbedMouseEffects</definition>
        <argsstring></argsstring>
        <name>m_grabbedMouseEffects</name>
        <qualifiedname>KWin::EffectsHandler::m_grabbedMouseEffects</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1108" column="11" bodyfile="kwin/src/effect/effecthandler.h" bodystart="1108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_effects_handler_1a423b07a48fa38374dda8a22e827185af" prot="protected" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_effect_loader" kindref="compound">EffectLoader</ref> *</type>
        <definition>EffectLoader* KWin::EffectsHandler::m_effectLoader</definition>
        <argsstring></argsstring>
        <name>m_effectLoader</name>
        <qualifiedname>KWin::EffectsHandler::m_effectLoader</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1109" column="18" bodyfile="kwin/src/effect/effecthandler.h" bodystart="1109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_effects_handler_1a0326732b7509687116673d3ea6c761b4" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_window_property_notify_x11_filter" kindref="compound">WindowPropertyNotifyX11Filter</ref> &gt;</type>
        <definition>std::unique_ptr&lt;WindowPropertyNotifyX11Filter&gt; KWin::EffectsHandler::m_x11WindowPropertyNotify</definition>
        <argsstring></argsstring>
        <name>m_x11WindowPropertyNotify</name>
        <qualifiedname>KWin::EffectsHandler::m_x11WindowPropertyNotify</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1110" column="21" bodyfile="kwin/src/effect/effecthandler.h" bodystart="1110" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1abbeccbfc8813c73f1915fdd164969a28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::EffectsHandler::EffectsHandler</definition>
        <argsstring>(Compositor *compositor, WorkspaceScene *scene)</argsstring>
        <name>EffectsHandler</name>
        <qualifiedname>KWin::EffectsHandler::EffectsHandler</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_compositor" kindref="compound">Compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_workspace_scene" kindref="compound">WorkspaceScene</ref> *</type>
          <declname>scene</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="165" column="5" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="129" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ae89ac212c4a51c494c972c4cbb06a861" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::EffectsHandler::~EffectsHandler</definition>
        <argsstring>() override</argsstring>
        <name>~EffectsHandler</name>
        <qualifiedname>KWin::EffectsHandler::~EffectsHandler</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="166" column="5" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="287" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a723d140619af3ed4e4fcded38d610340" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::startPaint</definition>
        <argsstring>()</argsstring>
        <name>startPaint</name>
        <qualifiedname>KWin::EffectsHandler::startPaint</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="169" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="441" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a8cf7297931ee6fa6c957eb3f464a2368" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::prePaintScreen</definition>
        <argsstring>(ScreenPrePaintData &amp;data, std::chrono::milliseconds presentTime)</argsstring>
        <name>prePaintScreen</name>
        <qualifiedname>KWin::EffectsHandler::prePaintScreen</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_screen_pre_paint_data" kindref="compound">ScreenPrePaintData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::chrono::milliseconds</type>
          <declname>presentTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="172" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="349" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a26fc71e0f799df4a72349d62a633f74d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::paintScreen</definition>
        <argsstring>(const RenderTarget &amp;renderTarget, const RenderViewport &amp;viewport, int mask, const QRegion &amp;region, Output *screen)</argsstring>
        <name>paintScreen</name>
        <qualifiedname>KWin::EffectsHandler::paintScreen</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref> &amp;</type>
          <declname>renderTarget</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_viewport" kindref="compound">RenderViewport</ref> &amp;</type>
          <declname>viewport</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const QRegion &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>screen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="173" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="358" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a72ed97f0e53631a0820417c90e22766d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::postPaintScreen</definition>
        <argsstring>()</argsstring>
        <name>postPaintScreen</name>
        <qualifiedname>KWin::EffectsHandler::postPaintScreen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="174" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="368" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ab302687d5b4e485443ac69334645ebae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::prePaintWindow</definition>
        <argsstring>(EffectWindow *w, WindowPrePaintData &amp;data, std::chrono::milliseconds presentTime)</argsstring>
        <name>prePaintWindow</name>
        <qualifiedname>KWin::EffectsHandler::prePaintWindow</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_window_pre_paint_data" kindref="compound">WindowPrePaintData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::chrono::milliseconds</type>
          <declname>presentTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="175" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="377" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a70ffbe2f01d2265699d8043728059e53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::paintWindow</definition>
        <argsstring>(const RenderTarget &amp;renderTarget, const RenderViewport &amp;viewport, EffectWindow *w, int mask, const QRegion &amp;region, WindowPaintData &amp;data)</argsstring>
        <name>paintWindow</name>
        <qualifiedname>KWin::EffectsHandler::paintWindow</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref> &amp;</type>
          <declname>renderTarget</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_viewport" kindref="compound">RenderViewport</ref> &amp;</type>
          <declname>viewport</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const QRegion &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_window_paint_data" kindref="compound">WindowPaintData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="176" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="386" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1afb838563295d5c9726feec2b283c676a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::postPaintWindow</definition>
        <argsstring>(EffectWindow *w)</argsstring>
        <name>postPaintWindow</name>
        <qualifiedname>KWin::EffectsHandler::postPaintWindow</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="177" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="396" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a0e7042451513fdb2fa98c3f2b0caa473" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::drawWindow</definition>
        <argsstring>(const RenderTarget &amp;renderTarget, const RenderViewport &amp;viewport, EffectWindow *w, int mask, const QRegion &amp;region, WindowPaintData &amp;data)</argsstring>
        <name>drawWindow</name>
        <qualifiedname>KWin::EffectsHandler::drawWindow</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref> &amp;</type>
          <declname>renderTarget</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_viewport" kindref="compound">RenderViewport</ref> &amp;</type>
          <declname>viewport</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const QRegion &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_window_paint_data" kindref="compound">WindowPaintData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="178" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="415" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1af2aa9519f7c6cd192b2168cbf60a46f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::renderWindow</definition>
        <argsstring>(const RenderTarget &amp;renderTarget, const RenderViewport &amp;viewport, EffectWindow *w, int mask, const QRegion &amp;region, WindowPaintData &amp;data)</argsstring>
        <name>renderWindow</name>
        <qualifiedname>KWin::EffectsHandler::renderWindow</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref> &amp;</type>
          <declname>renderTarget</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_viewport" kindref="compound">RenderViewport</ref> &amp;</type>
          <declname>viewport</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const QRegion &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_window_paint_data" kindref="compound">WindowPaintData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="179" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="425" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a76ace5389ceeafea8b0c55f62b0c67f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QVariant</type>
        <definition>QVariant KWin::EffectsHandler::kwinOption</definition>
        <argsstring>(KWinOption kwopt)</argsstring>
        <name>kwinOption</name>
        <qualifiedname>KWin::EffectsHandler::kwinOption</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a54093b7df57905a541686cce26a8f67b" kindref="member">KWinOption</ref></type>
          <declname>kwopt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="180" column="14" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1359" bodyend="1374"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a5c0e09968cdaed9974cfa062f9db2bec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::defineCursor</definition>
        <argsstring>(Qt::CursorShape shape)</argsstring>
        <name>defineCursor</name>
        <qualifiedname>KWin::EffectsHandler::defineCursor</qualifiedname>
        <param>
          <type>Qt::CursorShape</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the cursor while the mouse is intercepted. <simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1a63a4e07ddffc088ca8f96b354ca8f172" kindref="member">startMouseInterception</ref> </para>
</simplesect>
<simplesect kind="since"><para>4.11 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="186" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1096" bodyend="1099"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a6598ac6e4ad7dfc2c028514106806c12" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::EffectsHandler::cursorPos</definition>
        <argsstring>() const</argsstring>
        <name>cursorPos</name>
        <qualifiedname>KWin::EffectsHandler::cursorPos</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="187" column="13" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1123" bodyend="1126"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a71144931a2568c69935180b2ec096758" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::grabKeyboard</definition>
        <argsstring>(Effect *effect)</argsstring>
        <name>grabKeyboard</name>
        <qualifiedname>KWin::EffectsHandler::grabKeyboard</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> *</type>
          <declname>effect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="188" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="486" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a35bf262b8ab11f42ae6b2b1987142d70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::ungrabKeyboard</definition>
        <argsstring>()</argsstring>
        <name>ungrabKeyboard</name>
        <qualifiedname>KWin::EffectsHandler::ungrabKeyboard</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="189" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="495" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a63a4e07ddffc088ca8f96b354ca8f172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::startMouseInterception</definition>
        <argsstring>(Effect *effect, Qt::CursorShape shape)</argsstring>
        <name>startMouseInterception</name>
        <qualifiedname>KWin::EffectsHandler::startMouseInterception</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> *</type>
          <declname>effect</declname>
        </param>
        <param>
          <type>Qt::CursorShape</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ensures that all mouse events are sent to the <computeroutput>effect</computeroutput>. No window will get the mouse events. Only fullscreen effects providing a custom user interface should be using this method. The input events are delivered to <ref refid="group__kwineffects_1ga7b142933c38cb9b4a433b768b266e7cb" kindref="member">Effect::windowInputMouseEvent</ref>.</para>
<para><simplesect kind="note"><para>This method does not perform an X11 mouse grab. On X11 a fullscreen input window is raised above all other windows, but no grab is performed.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>effect</parametername>
</parameternamelist>
<parameterdescription>
<para>The effect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>Sets the cursor to be used while the mouse is intercepted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1a1516352991da7784110135a5119c602f" kindref="member">stopMouseInterception</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__kwineffects_1ga7b142933c38cb9b4a433b768b266e7cb" kindref="member">Effect::windowInputMouseEvent</ref> </para>
</simplesect>
<simplesect kind="since"><para>4.11 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="204" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="509" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a1516352991da7784110135a5119c602f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::stopMouseInterception</definition>
        <argsstring>(Effect *effect)</argsstring>
        <name>stopMouseInterception</name>
        <qualifiedname>KWin::EffectsHandler::stopMouseInterception</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> *</type>
          <declname>effect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Releases the hold mouse interception for <computeroutput>effect</computeroutput> <simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1a63a4e07ddffc088ca8f96b354ca8f172" kindref="member">startMouseInterception</ref> </para>
</simplesect>
<simplesect kind="since"><para>4.11 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="210" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="533" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a3b898a3f49f8720832df74c20e98abbe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::isMouseInterception</definition>
        <argsstring>() const</argsstring>
        <name>isMouseInterception</name>
        <qualifiedname>KWin::EffectsHandler::isMouseInterception</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="211" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="544" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a79cc3c1ebfb23df5acb8233357b1ad8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::checkInputWindowEvent</definition>
        <argsstring>(QMouseEvent *e)</argsstring>
        <name>checkInputWindowEvent</name>
        <qualifiedname>KWin::EffectsHandler::checkInputWindowEvent</qualifiedname>
        <param>
          <type>QMouseEvent *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="213" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1101" bodyend="1110"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a9bffa1b30bf1a5a03b02673925c76b8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::checkInputWindowEvent</definition>
        <argsstring>(QWheelEvent *e)</argsstring>
        <name>checkInputWindowEvent</name>
        <qualifiedname>KWin::EffectsHandler::checkInputWindowEvent</qualifiedname>
        <param>
          <type>QWheelEvent *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="214" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1112" bodyend="1121"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a45004bb7f62e19a70efa112cd82f0e27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::grabbedKeyboardEvent</definition>
        <argsstring>(QKeyEvent *e)</argsstring>
        <name>grabbedKeyboardEvent</name>
        <qualifiedname>KWin::EffectsHandler::grabbedKeyboardEvent</qualifiedname>
        <param>
          <type>QKeyEvent *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="216" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="502" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a0a54647ffaaae7f98e91acfda2159098" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::hasKeyboardGrab</definition>
        <argsstring>() const</argsstring>
        <name>hasKeyboardGrab</name>
        <qualifiedname>KWin::EffectsHandler::hasKeyboardGrab</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="217" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="691" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a56187bf9d8edc1aaaa72580f8de30fa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::registerPointerShortcut</definition>
        <argsstring>(Qt::KeyboardModifiers modifiers, Qt::MouseButton pointerButtons, QAction *action)</argsstring>
        <name>registerPointerShortcut</name>
        <qualifiedname>KWin::EffectsHandler::registerPointerShortcut</qualifiedname>
        <param>
          <type>Qt::KeyboardModifiers</type>
          <declname>modifiers</declname>
        </param>
        <param>
          <type>Qt::MouseButton</type>
          <declname>pointerButtons</declname>
        </param>
        <param>
          <type>QAction *</type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Registers a global pointer shortcut with the provided <computeroutput>action</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>modifiers</parametername>
</parameternamelist>
<parameterdescription>
<para>The keyboard modifiers which need to be holded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pointerButtons</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer buttons which need to be pressed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>The action which gets triggered when the shortcut matches </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="226" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="666" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a76a6b1b8e36d38a65552259e2d8562d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::registerAxisShortcut</definition>
        <argsstring>(Qt::KeyboardModifiers modifiers, PointerAxisDirection axis, QAction *action)</argsstring>
        <name>registerAxisShortcut</name>
        <qualifiedname>KWin::EffectsHandler::registerAxisShortcut</qualifiedname>
        <param>
          <type>Qt::KeyboardModifiers</type>
          <declname>modifiers</declname>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1a0b8440dc0ffe9aa219e0c0e5fa1137a0" kindref="member">PointerAxisDirection</ref></type>
          <declname>axis</declname>
        </param>
        <param>
          <type>QAction *</type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Registers a global axis shortcut with the provided <computeroutput>action</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>modifiers</parametername>
</parameternamelist>
<parameterdescription>
<para>The keyboard modifiers which need to be holded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The direction in which the axis needs to be moved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>The action which gets triggered when the shortcut matches </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="234" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="671" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a9060b42c8a30efae7e2036088604aa4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::registerTouchpadSwipeShortcut</definition>
        <argsstring>(SwipeDirection dir, uint fingerCount, QAction *onUp, std::function&lt; void(qreal)&gt; progressCallback={})</argsstring>
        <name>registerTouchpadSwipeShortcut</name>
        <qualifiedname>KWin::EffectsHandler::registerTouchpadSwipeShortcut</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1ab2206ebabcc9101a43b58473495efd03" kindref="member">SwipeDirection</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>fingerCount</declname>
        </param>
        <param>
          <type>QAction *</type>
          <declname>onUp</declname>
        </param>
        <param>
          <type>std::function&lt; void(qreal)&gt;</type>
          <declname>progressCallback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Registers a global touchpad swipe gesture shortcut with the provided <computeroutput>action</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>The direction for the swipe </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>The action which gets triggered when the gesture triggers </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>5.10 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="243" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="676" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a8e966f681a1a097f784bd149b5e07cf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::registerTouchpadPinchShortcut</definition>
        <argsstring>(PinchDirection dir, uint fingerCount, QAction *onUp, std::function&lt; void(qreal)&gt; progressCallback={})</argsstring>
        <name>registerTouchpadPinchShortcut</name>
        <qualifiedname>KWin::EffectsHandler::registerTouchpadPinchShortcut</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a8852f83038eda36bc255d8f5f3baae05" kindref="member">PinchDirection</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>fingerCount</declname>
        </param>
        <param>
          <type>QAction *</type>
          <declname>onUp</declname>
        </param>
        <param>
          <type>std::function&lt; void(qreal)&gt;</type>
          <declname>progressCallback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="245" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="681" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1aae43eb00a3f8819c35423ff5f53b46d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::registerTouchscreenSwipeShortcut</definition>
        <argsstring>(SwipeDirection direction, uint fingerCount, QAction *action, std::function&lt; void(qreal)&gt; progressCallback)</argsstring>
        <name>registerTouchscreenSwipeShortcut</name>
        <qualifiedname>KWin::EffectsHandler::registerTouchscreenSwipeShortcut</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1ab2206ebabcc9101a43b58473495efd03" kindref="member">SwipeDirection</ref></type>
          <declname>direction</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>fingerCount</declname>
        </param>
        <param>
          <type>QAction *</type>
          <declname>action</declname>
        </param>
        <param>
          <type>std::function&lt; void(qreal)&gt;</type>
          <declname>progressCallback</declname>
        </param>
        <briefdescription>
<para>Registers a global touchscreen swipe gesture shortcut with the provided <computeroutput>action</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>The direction for the swipe </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>The action which gets triggered when the gesture triggers </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>5.25 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="254" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="686" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a754a4033fda15bb19b0374f21b443bdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::reserveElectricBorder</definition>
        <argsstring>(ElectricBorder border, Effect *effect)</argsstring>
        <name>reserveElectricBorder</name>
        <qualifiedname>KWin::EffectsHandler::reserveElectricBorder</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a7eda12963fb07e3df0c1f337e8526bc5" kindref="member">ElectricBorder</ref></type>
          <declname>border</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> *</type>
          <declname>effect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="256" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1128" bodyend="1131"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ad3aec41564b7d90550ff5517a650b6c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::unreserveElectricBorder</definition>
        <argsstring>(ElectricBorder border, Effect *effect)</argsstring>
        <name>unreserveElectricBorder</name>
        <qualifiedname>KWin::EffectsHandler::unreserveElectricBorder</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a7eda12963fb07e3df0c1f337e8526bc5" kindref="member">ElectricBorder</ref></type>
          <declname>border</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> *</type>
          <declname>effect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="257" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1133" bodyend="1136"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1af4a142bebff417b0a3b9fce9eacaaa2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::registerTouchBorder</definition>
        <argsstring>(ElectricBorder border, QAction *action)</argsstring>
        <name>registerTouchBorder</name>
        <qualifiedname>KWin::EffectsHandler::registerTouchBorder</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a7eda12963fb07e3df0c1f337e8526bc5" kindref="member">ElectricBorder</ref></type>
          <declname>border</declname>
        </param>
        <param>
          <type>QAction *</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Registers the given <computeroutput>action</computeroutput> for the given <computeroutput>border</computeroutput> to be activated through a touch swipe gesture.</para>
<para>If the <computeroutput>border</computeroutput> gets triggered through a touch swipe gesture the QAction::triggered signal gets invoked.</para>
<para>To unregister the touch screen action either delete the <computeroutput>action</computeroutput> or invoke unregisterTouchBorder.</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1a5218f145be4674b91530ef574868230e" kindref="member">unregisterTouchBorder</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.10 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="272" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1138" bodyend="1141"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ad5992a5df8772934e70a869581b6d8b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::registerRealtimeTouchBorder</definition>
        <argsstring>(ElectricBorder border, QAction *action, TouchBorderCallback progressCallback)</argsstring>
        <name>registerRealtimeTouchBorder</name>
        <qualifiedname>KWin::EffectsHandler::registerRealtimeTouchBorder</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a7eda12963fb07e3df0c1f337e8526bc5" kindref="member">ElectricBorder</ref></type>
          <declname>border</declname>
        </param>
        <param>
          <type>QAction *</type>
          <declname>action</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_effects_handler_1ad4c025e3c2d3c8b5da25e6d16ba6257f" kindref="member">TouchBorderCallback</ref></type>
          <declname>progressCallback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Registers the given <computeroutput>action</computeroutput> for the given <computeroutput>border</computeroutput> to be activated through a touch swipe gesture.</para>
<para>If the <computeroutput>border</computeroutput> gets triggered through a touch swipe gesture the QAction::triggered signal gets invoked.</para>
<para>progressCallback will be dinamically called each time the touch position is updated to show the effect &quot;partially&quot; activated</para>
<para>To unregister the touch screen action either delete the <computeroutput>action</computeroutput> or invoke unregisterTouchBorder.</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1a5218f145be4674b91530ef574868230e" kindref="member">unregisterTouchBorder</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.25 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="290" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1143" bodyend="1146"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a5218f145be4674b91530ef574868230e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::unregisterTouchBorder</definition>
        <argsstring>(ElectricBorder border, QAction *action)</argsstring>
        <name>unregisterTouchBorder</name>
        <qualifiedname>KWin::EffectsHandler::unregisterTouchBorder</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a7eda12963fb07e3df0c1f337e8526bc5" kindref="member">ElectricBorder</ref></type>
          <declname>border</declname>
        </param>
        <param>
          <type>QAction *</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unregisters the given <computeroutput>action</computeroutput> for the given touch <computeroutput>border</computeroutput>.</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1af4a142bebff417b0a3b9fce9eacaaa2e" kindref="member">registerTouchBorder</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.10 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="298" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1148" bodyend="1151"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a3bfb75fe1af69602acddcbf07044875b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::activateWindow</definition>
        <argsstring>(KWin::EffectWindow *c)</argsstring>
        <name>activateWindow</name>
        <qualifiedname>KWin::EffectsHandler::activateWindow</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="301" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="764" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a43589bc557ae87f6603b8d42f893d036" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
        <definition>EffectWindow * KWin::EffectsHandler::activeWindow</definition>
        <argsstring>() const</argsstring>
        <name>activeWindow</name>
        <qualifiedname>KWin::EffectsHandler::activeWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="302" column="24" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="772" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a60dcef8af17250d4968ae4ac2c512305" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE void</type>
        <definition>void KWin::EffectsHandler::moveWindow</definition>
        <argsstring>(KWin::EffectWindow *w, const QPoint &amp;pos, bool snap=false, double snapAdjust=1.0)</argsstring>
        <name>moveWindow</name>
        <qualifiedname>KWin::EffectsHandler::moveWindow</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const QPoint &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>snap</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>double</type>
          <declname>snapAdjust</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="303" column="23" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="777" bodyend="789"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a27bf6f965d0d342caa3b1bea82469493" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE void</type>
        <definition>void KWin::EffectsHandler::windowToDesktops</definition>
        <argsstring>(KWin::EffectWindow *w, const QList&lt; KWin::VirtualDesktop * &gt; &amp;desktops)</argsstring>
        <name>windowToDesktops</name>
        <qualifiedname>KWin::EffectsHandler::windowToDesktops</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const QList&lt; <ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">KWin::VirtualDesktop</ref> * &gt; &amp;</type>
          <declname>desktops</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Moves a window to the given desktops On X11, the window will end up on the last window in the list Setting this to an empty list will set the window on all desktops </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="310" column="23" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="791" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a9d851e6b387cee346faa33d9c84cc768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE void</type>
        <definition>void KWin::EffectsHandler::windowToScreen</definition>
        <argsstring>(KWin::EffectWindow *w, Output *screen)</argsstring>
        <name>windowToScreen</name>
        <qualifiedname>KWin::EffectsHandler::windowToScreen</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>screen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="312" column="23" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="800" bodyend="806"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a7391524e5ebfd9ed180b74f1296a93d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::setShowingDesktop</definition>
        <argsstring>(bool showing)</argsstring>
        <name>setShowingDesktop</name>
        <qualifiedname>KWin::EffectsHandler::setShowingDesktop</qualifiedname>
        <param>
          <type>bool</type>
          <declname>showing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="313" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="808" bodyend="811"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a029f3fa131c03029a3a32989ad211be8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::EffectsHandler::currentActivity</definition>
        <argsstring>() const</argsstring>
        <name>currentActivity</name>
        <qualifiedname>KWin::EffectsHandler::currentActivity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The ID of the current activity. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="319" column="13" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="813" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ab2bc33163638728e6a51281b0e07bdcf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">VirtualDesktop</ref> *</type>
        <definition>VirtualDesktop * KWin::EffectsHandler::currentDesktop</definition>
        <argsstring>() const</argsstring>
        <name>currentDesktop</name>
        <qualifiedname>KWin::EffectsHandler::currentDesktop</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current desktop. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="324" column="20" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="825" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a24078f73ece72e4825a50e47ada97e9f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">VirtualDesktop</ref> * &gt;</type>
        <definition>QList&lt; VirtualDesktop * &gt; KWin::EffectsHandler::desktops</definition>
        <argsstring>() const</argsstring>
        <name>desktops</name>
        <qualifiedname>KWin::EffectsHandler::desktops</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Total number of desktops currently in existence. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="328" column="11" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="830" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a9edefda57a6a4f7548985ee40403cc2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::setCurrentDesktop</definition>
        <argsstring>(KWin::VirtualDesktop *desktop)</argsstring>
        <name>setCurrentDesktop</name>
        <qualifiedname>KWin::EffectsHandler::setCurrentDesktop</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">KWin::VirtualDesktop</ref> *</type>
          <declname>desktop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the current desktop to <emphasis>desktop</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="332" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="835" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ab783e37c4b860809759d448ee87e3754" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QSize</type>
        <definition>QSize KWin::EffectsHandler::desktopGridSize</definition>
        <argsstring>() const</argsstring>
        <name>desktopGridSize</name>
        <qualifiedname>KWin::EffectsHandler::desktopGridSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of desktop layout in grid units. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="336" column="11" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="840" bodyend="843"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a8425aec549c668b897162b3e410bbb33" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::EffectsHandler::desktopGridWidth</definition>
        <argsstring>() const</argsstring>
        <name>desktopGridWidth</name>
        <qualifiedname>KWin::EffectsHandler::desktopGridWidth</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The width of desktop layout in grid units. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="340" column="9" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="845" bodyend="848"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1aee24c0866e5e7a3b623c507d46de72c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::EffectsHandler::desktopGridHeight</definition>
        <argsstring>() const</argsstring>
        <name>desktopGridHeight</name>
        <qualifiedname>KWin::EffectsHandler::desktopGridHeight</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The height of desktop layout in grid units. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="344" column="9" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="850" bodyend="853"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a96ddc385c684024766678eea6c74ee1a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::EffectsHandler::workspaceWidth</definition>
        <argsstring>() const</argsstring>
        <name>workspaceWidth</name>
        <qualifiedname>KWin::EffectsHandler::workspaceWidth</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The width of desktop layout in pixels. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="348" column="9" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="855" bodyend="858"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ae8dea3fe89cff9566677ee7bf741d944" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::EffectsHandler::workspaceHeight</definition>
        <argsstring>() const</argsstring>
        <name>workspaceHeight</name>
        <qualifiedname>KWin::EffectsHandler::workspaceHeight</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The height of desktop layout in pixels. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="352" column="9" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="860" bodyend="863"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1af47f89b180a84636be495c610f95ad95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">VirtualDesktop</ref> *</type>
        <definition>VirtualDesktop * KWin::EffectsHandler::desktopAtCoords</definition>
        <argsstring>(QPoint coords) const</argsstring>
        <name>desktopAtCoords</name>
        <qualifiedname>KWin::EffectsHandler::desktopAtCoords</qualifiedname>
        <param>
          <type>QPoint</type>
          <declname>coords</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The desktop at the point <emphasis>coords</emphasis> or 0 if no desktop exists at that point. <emphasis>coords</emphasis> is to be in grid units. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="357" column="20" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="865" bodyend="868"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a18e5d37ec471fbad046660ecba2eb0ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QPoint</type>
        <definition>QPoint KWin::EffectsHandler::desktopGridCoords</definition>
        <argsstring>(VirtualDesktop *desktop) const</argsstring>
        <name>desktopGridCoords</name>
        <qualifiedname>KWin::EffectsHandler::desktopGridCoords</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">VirtualDesktop</ref> *</type>
          <declname>desktop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The coords of the specified <emphasis>desktop</emphasis> in grid units. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="361" column="12" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="870" bodyend="873"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a609ca6c612b03978a51add2d5a24642a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QPoint</type>
        <definition>QPoint KWin::EffectsHandler::desktopCoords</definition>
        <argsstring>(VirtualDesktop *desktop) const</argsstring>
        <name>desktopCoords</name>
        <qualifiedname>KWin::EffectsHandler::desktopCoords</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">VirtualDesktop</ref> *</type>
          <declname>desktop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The coords of the top-left corner of <emphasis>desktop</emphasis> in pixels. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="365" column="12" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="875" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a183eeeb7398e8595cad89a92eda8746b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE <ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">KWin::VirtualDesktop</ref> *</type>
        <definition>VirtualDesktop * KWin::EffectsHandler::desktopAbove</definition>
        <argsstring>(KWin::VirtualDesktop *desktop=nullptr, bool wrap=true) const</argsstring>
        <name>desktopAbove</name>
        <qualifiedname>KWin::EffectsHandler::desktopAbove</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">KWin::VirtualDesktop</ref> *</type>
          <declname>desktop</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>wrap</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The desktop above the given <emphasis>desktop</emphasis>. Wraps around to the bottom of the layout if <emphasis>wrap</emphasis> is set. If <emphasis>id</emphasis> is not set use the current one. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="370" column="39" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="885" bodyend="888"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1aa9bfb3d6996ed5f9b97678f6d3b7b036" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE <ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">KWin::VirtualDesktop</ref> *</type>
        <definition>VirtualDesktop * KWin::EffectsHandler::desktopToRight</definition>
        <argsstring>(KWin::VirtualDesktop *desktop=nullptr, bool wrap=true) const</argsstring>
        <name>desktopToRight</name>
        <qualifiedname>KWin::EffectsHandler::desktopToRight</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">KWin::VirtualDesktop</ref> *</type>
          <declname>desktop</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>wrap</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The desktop to the right of the given <emphasis>desktop</emphasis>. Wraps around to the left of the layout if <emphasis>wrap</emphasis> is set. If <emphasis>id</emphasis> is not set use the current one. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="375" column="39" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="890" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a2b9905c457461e7bb1c5be1114678e7d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE <ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">KWin::VirtualDesktop</ref> *</type>
        <definition>VirtualDesktop * KWin::EffectsHandler::desktopBelow</definition>
        <argsstring>(KWin::VirtualDesktop *desktop=nullptr, bool wrap=true) const</argsstring>
        <name>desktopBelow</name>
        <qualifiedname>KWin::EffectsHandler::desktopBelow</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">KWin::VirtualDesktop</ref> *</type>
          <declname>desktop</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>wrap</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The desktop below the given <emphasis>desktop</emphasis>. Wraps around to the top of the layout if <emphasis>wrap</emphasis> is set. If <emphasis>id</emphasis> is not set use the current one. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="380" column="39" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="895" bodyend="898"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ad5ee6e38a7b9c70d11ee5e1720c82664" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE <ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">KWin::VirtualDesktop</ref> *</type>
        <definition>VirtualDesktop * KWin::EffectsHandler::desktopToLeft</definition>
        <argsstring>(KWin::VirtualDesktop *desktop=nullptr, bool wrap=true) const</argsstring>
        <name>desktopToLeft</name>
        <qualifiedname>KWin::EffectsHandler::desktopToLeft</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">KWin::VirtualDesktop</ref> *</type>
          <declname>desktop</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>wrap</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The desktop to the left of the given <emphasis>desktop</emphasis>. Wraps around to the right of the layout if <emphasis>wrap</emphasis> is set. If <emphasis>id</emphasis> is not set use the current one. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="385" column="39" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="900" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a3d4ee743ebb9adacc7866f3d915cc7ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE QString</type>
        <definition>QString KWin::EffectsHandler::desktopName</definition>
        <argsstring>(KWin::VirtualDesktop *desktop) const</argsstring>
        <name>desktopName</name>
        <qualifiedname>KWin::EffectsHandler::desktopName</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">KWin::VirtualDesktop</ref> *</type>
          <declname>desktop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="386" column="26" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="905" bodyend="908"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1adb18893112254b44f684fbd8e6bad9d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::optionRollOverDesktops</definition>
        <argsstring>() const</argsstring>
        <name>optionRollOverDesktops</name>
        <qualifiedname>KWin::EffectsHandler::optionRollOverDesktops</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="387" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="910" bodyend="913"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a8f9564215cafc6939e4172fa66bdb85b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
        <definition>Output * KWin::EffectsHandler::activeScreen</definition>
        <argsstring>() const</argsstring>
        <name>activeScreen</name>
        <qualifiedname>KWin::EffectsHandler::activeScreen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="389" column="12" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1064" bodyend="1067"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ad7c5dbc6178025906beb67d0a2153250" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::EffectsHandler::clientArea</definition>
        <argsstring>(clientAreaOption, const Output *screen, const VirtualDesktop *desktop) const</argsstring>
        <name>clientArea</name>
        <qualifiedname>KWin::EffectsHandler::clientArea</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a443ac4eb2683c028e5f174031c12ce22" kindref="member">clientAreaOption</ref></type>
          <defname>opt</defname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>screen</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">VirtualDesktop</ref> *</type>
          <declname>desktop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="390" column="12" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1069" bodyend="1072"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a55551a567f8a12cb6daa48bc679dab03" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::EffectsHandler::clientArea</definition>
        <argsstring>(clientAreaOption, const EffectWindow *c) const</argsstring>
        <name>clientArea</name>
        <qualifiedname>KWin::EffectsHandler::clientArea</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a443ac4eb2683c028e5f174031c12ce22" kindref="member">clientAreaOption</ref></type>
          <defname>opt</defname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="391" column="12" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1074" bodyend="1078"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a7e2364b352969429943966b4ebfb89cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::EffectsHandler::clientArea</definition>
        <argsstring>(clientAreaOption, const QPoint &amp;p, const VirtualDesktop *desktop) const</argsstring>
        <name>clientArea</name>
        <qualifiedname>KWin::EffectsHandler::clientArea</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a443ac4eb2683c028e5f174031c12ce22" kindref="member">clientAreaOption</ref></type>
          <defname>opt</defname>
        </param>
        <param>
          <type>const QPoint &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">VirtualDesktop</ref> *</type>
          <declname>desktop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="392" column="12" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1080" bodyend="1084"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1af4a7c87503e3d4fc3c595058e0e3ba28" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QSize</type>
        <definition>QSize KWin::EffectsHandler::virtualScreenSize</definition>
        <argsstring>() const</argsstring>
        <name>virtualScreenSize</name>
        <qualifiedname>KWin::EffectsHandler::virtualScreenSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The bounding size of all screens combined. Overlapping areas are not counted multiple times.</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1a7f34a25364c7923d76eb5ad42a8c898f" kindref="member">virtualScreenGeometry()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1afe0cedc1f3130eba803aa1ff8474c0da" kindref="member">virtualScreenSizeChanged()</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="402" column="11" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1091" bodyend="1094"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ada3d563403409671443da24b4f17fc34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRect</type>
        <definition>QRect KWin::EffectsHandler::virtualScreenGeometry</definition>
        <argsstring>() const</argsstring>
        <name>virtualScreenGeometry</name>
        <qualifiedname>KWin::EffectsHandler::virtualScreenGeometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The bounding geometry of all outputs combined. Always starts at (0,0) and has virtualScreenSize as it&apos;s size.</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1aebb65bfab7dca8095ded3906b1bca282" kindref="member">virtualScreenSize()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1a7c1de7dad6da165bee9963bb8ea79765" kindref="member">virtualScreenGeometryChanged()</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="411" column="11" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1086" bodyend="1089"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a1f0b56fdf429b42e37987e5169dfd697" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double KWin::EffectsHandler::animationTimeFactor</definition>
        <argsstring>() const</argsstring>
        <name>animationTimeFactor</name>
        <qualifiedname>KWin::EffectsHandler::animationTimeFactor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Factor by which animation speed in the effect should be modified (multiplied). If configurable in the effect itself, the option should have also &apos;default&apos; animation speed. The actual value should be determined using animationTime(). Note: The factor can be also 0, so make sure your code can cope with 0ms time if used manually. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="419" column="12" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="915" bodyend="918"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a186244bfb2efd0873286e4b81c8b9652" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE <ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
        <definition>EffectWindow * KWin::EffectsHandler::findWindow</definition>
        <argsstring>(WId id) const</argsstring>
        <name>findWindow</name>
        <qualifiedname>KWin::EffectsHandler::findWindow</qualifiedname>
        <param>
          <type>WId</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="421" column="37" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="920" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ad5e34a1d16be9d688b04364da2f1ef89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE <ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
        <definition>EffectWindow * KWin::EffectsHandler::findWindow</definition>
        <argsstring>(SurfaceInterface *surf) const</argsstring>
        <name>findWindow</name>
        <qualifiedname>KWin::EffectsHandler::findWindow</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
          <declname>surf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="422" column="37" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="932" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1aed2afd9e7c47abaf2b63385d4d3a1d65" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE <ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
        <definition>EffectWindow * KWin::EffectsHandler::findWindow</definition>
        <argsstring>(QWindow *w) const</argsstring>
        <name>findWindow</name>
        <qualifiedname>KWin::EffectsHandler::findWindow</qualifiedname>
        <param>
          <type>QWindow *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds the <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> for the internal window <computeroutput>w</computeroutput>. If there is no such window <computeroutput>null</computeroutput> is returned.</para>
<para>On <ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref> this returns the internal window. On X11 it returns an Unamanged with the window id matching that of the provided window <computeroutput>w</computeroutput>.</para>
<para><simplesect kind="since"><para>5.16 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="432" column="37" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="942" bodyend="948"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a3696b73d3064b2cbb15043dfc314e5ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE <ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
        <definition>EffectWindow * KWin::EffectsHandler::findWindow</definition>
        <argsstring>(const QUuid &amp;id) const</argsstring>
        <name>findWindow</name>
        <qualifiedname>KWin::EffectsHandler::findWindow</qualifiedname>
        <param>
          <type>const QUuid &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds the <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> for the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> with <ref refid="namespace_k_win" kindref="compound">KWin</ref> internal <computeroutput>id</computeroutput>. If there is no such window <computeroutput>null</computeroutput> is returned.</para>
<para><simplesect kind="since"><para>5.16 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="439" column="37" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="950" bodyend="956"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a546b16a5901d103007f2c4886859e295" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> * &gt;</type>
        <definition>QList&lt; EffectWindow * &gt; KWin::EffectsHandler::stackingOrder</definition>
        <argsstring>() const</argsstring>
        <name>stackingOrder</name>
        <qualifiedname>KWin::EffectsHandler::stackingOrder</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="440" column="11" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="958" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a5a5e3987a203417f59fc4d0ba7d9d505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE void</type>
        <definition>void KWin::EffectsHandler::setElevatedWindow</definition>
        <argsstring>(KWin::EffectWindow *w, bool set)</argsstring>
        <name>setElevatedWindow</name>
        <qualifiedname>KWin::EffectsHandler::setElevatedWindow</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="442" column="23" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="970" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a6f82de3946c8b5db50a64dd674fb5557" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::setTabBoxWindow</definition>
        <argsstring>(EffectWindow *)</argsstring>
        <name>setTabBoxWindow</name>
        <qualifiedname>KWin::EffectsHandler::setTabBoxWindow</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
          <defname>w</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="444" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="981" bodyend="989"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a8359adb3d939ac296524e0250b328483" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> * &gt;</type>
        <definition>QList&lt; EffectWindow * &gt; KWin::EffectsHandler::currentTabBoxWindowList</definition>
        <argsstring>() const</argsstring>
        <name>currentTabBoxWindowList</name>
        <qualifiedname>KWin::EffectsHandler::currentTabBoxWindowList</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="445" column="11" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="991" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a0265bfefab98f107c7e20c6acabe10ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::refTabBox</definition>
        <argsstring>()</argsstring>
        <name>refTabBox</name>
        <qualifiedname>KWin::EffectsHandler::refTabBox</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="446" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1008" bodyend="1013"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1af8fd9402ad8a3d2964947a724084fdad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::unrefTabBox</definition>
        <argsstring>()</argsstring>
        <name>unrefTabBox</name>
        <qualifiedname>KWin::EffectsHandler::unrefTabBox</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="447" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1015" bodyend="1020"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a7be83b2010b4c005672584cb89c4e879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::closeTabBox</definition>
        <argsstring>()</argsstring>
        <name>closeTabBox</name>
        <qualifiedname>KWin::EffectsHandler::closeTabBox</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="448" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1022" bodyend="1027"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1aa15ea6a4a8dcc0c98956e093666d0b46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
        <definition>EffectWindow * KWin::EffectsHandler::currentTabBoxWindow</definition>
        <argsstring>() const</argsstring>
        <name>currentTabBoxWindow</name>
        <qualifiedname>KWin::EffectsHandler::currentTabBoxWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="449" column="18" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1029" bodyend="1037"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a5daccf0d58882b9c642fc4036cafea4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::setActiveFullScreenEffect</definition>
        <argsstring>(Effect *e)</argsstring>
        <name>setActiveFullScreenEffect</name>
        <qualifiedname>KWin::EffectsHandler::setActiveFullScreenEffect</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="451" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="455" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1af480b35c69116a1becba5cdb45c44014" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> *</type>
        <definition>Effect * KWin::EffectsHandler::activeFullScreenEffect</definition>
        <argsstring>() const</argsstring>
        <name>activeFullScreenEffect</name>
        <qualifiedname>KWin::EffectsHandler::activeFullScreenEffect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="452" column="12" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="471" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1af3f4b9a57fd81eabe5c19d6e9e4a76c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE void</type>
        <definition>void KWin::EffectsHandler::addRepaintFull</definition>
        <argsstring>()</argsstring>
        <name>addRepaintFull</name>
        <qualifiedname>KWin::EffectsHandler::addRepaintFull</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Schedules the entire workspace to be repainted next time. If you call it during painting (including prepaint) then it does not affect the current painting. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="459" column="23" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1039" bodyend="1042"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a424c34eb4c6c98d766f16159488465a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE void</type>
        <definition>void KWin::EffectsHandler::addRepaint</definition>
        <argsstring>(const QRectF &amp;r)</argsstring>
        <name>addRepaint</name>
        <qualifiedname>KWin::EffectsHandler::addRepaint</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="460" column="23" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1049" bodyend="1052"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a5d9bc7b3c475d3244309997c8b9fcffd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE void</type>
        <definition>void KWin::EffectsHandler::addRepaint</definition>
        <argsstring>(const QRect &amp;r)</argsstring>
        <name>addRepaint</name>
        <qualifiedname>KWin::EffectsHandler::addRepaint</qualifiedname>
        <param>
          <type>const QRect &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="461" column="23" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1044" bodyend="1047"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1afeb4b9d2789390de5a528acf50507787" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE void</type>
        <definition>void KWin::EffectsHandler::addRepaint</definition>
        <argsstring>(const QRegion &amp;r)</argsstring>
        <name>addRepaint</name>
        <qualifiedname>KWin::EffectsHandler::addRepaint</qualifiedname>
        <param>
          <type>const QRegion &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="462" column="23" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1054" bodyend="1057"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1af69d5e0fa0111198cd0206618bf2586a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE void</type>
        <definition>void KWin::EffectsHandler::addRepaint</definition>
        <argsstring>(int x, int y, int w, int h)</argsstring>
        <name>addRepaint</name>
        <qualifiedname>KWin::EffectsHandler::addRepaint</qualifiedname>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="463" column="23" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1059" bodyend="1062"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a87a49a5f918913876412e346eb3a1a56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1aa1e33474a7077a13169f350a5949a79a" kindref="member">CompositingType</ref></type>
        <definition>CompositingType KWin::EffectsHandler::compositingType</definition>
        <argsstring>() const</argsstring>
        <name>compositingType</name>
        <qualifiedname>KWin::EffectsHandler::compositingType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="465" column="21" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="305" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1aa8a3368f17c08de910a182b1666bf610" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::isOpenGLCompositing</definition>
        <argsstring>() const</argsstring>
        <name>isOpenGLCompositing</name>
        <qualifiedname>KWin::EffectsHandler::isOpenGLCompositing</qualifiedname>
        <briefdescription>
<para>Whether the <ref refid="class_k_win_1_1_compositor" kindref="compound">Compositor</ref> is OpenGL based (either GL 1 or 2). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool <computeroutput>true</computeroutput> in case of OpenGL based <ref refid="class_k_win_1_1_compositor" kindref="compound">Compositor</ref>, <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="471" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="310" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ade0f5183637ef9ef74750bed8203d0ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_egl_context" kindref="compound">EglContext</ref> *</type>
        <definition>EglContext * KWin::EffectsHandler::openglContext</definition>
        <argsstring>() const</argsstring>
        <name>openglContext</name>
        <qualifiedname>KWin::EffectsHandler::openglContext</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="472" column="16" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="315" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1af4b34b4b53242b752b7673c6f9e0022c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QPainter *</type>
        <definition>QPainter * KWin::EffectsHandler::scenePainter</definition>
        <argsstring>()</argsstring>
        <name>scenePainter</name>
        <qualifiedname>KWin::EffectsHandler::scenePainter</qualifiedname>
        <briefdescription>
<para>Provides access to the QPainter which is rendering to the back buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Only relevant for <ref refid="namespace_k_win_1aa1e33474a7077a13169f350a5949a79a" kindref="member">CompositingType</ref> QPainterCompositing. For all other compositing types <computeroutput>null</computeroutput> is returned.</para>
<para><simplesect kind="return"><para>QPainter* The <ref refid="class_k_win_1_1_scene" kindref="compound">Scene</ref>&apos;s QPainter or <computeroutput>null</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="481" column="14" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1153" bodyend="1156"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a5dd867dd5c0ce8a24466faf1142dde61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::reconfigure</definition>
        <argsstring>()</argsstring>
        <name>reconfigure</name>
        <qualifiedname>KWin::EffectsHandler::reconfigure</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="482" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="343" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a5b7c3a34acbce4baed8657ebe04a04b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArray</type>
        <definition>QByteArray KWin::EffectsHandler::readRootProperty</definition>
        <argsstring>(long atom, long type, int format) const</argsstring>
        <name>readRootProperty</name>
        <qualifiedname>KWin::EffectsHandler::readRootProperty</qualifiedname>
        <param>
          <type>long</type>
          <declname>atom</declname>
        </param>
        <param>
          <type>long</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="484" column="16" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="752" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a8cfa5fecc8e31e32c18fb5aed4862cc2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::hasDecorationShadows</definition>
        <argsstring>() const</argsstring>
        <name>hasDecorationShadows</name>
        <qualifiedname>KWin::EffectsHandler::hasDecorationShadows</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <emphasis>true</emphasis> if the active window decoration has shadow API hooks. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="523" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="430" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a39cd15fbba425ec1887b8dfe2735d557" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::decorationsHaveAlpha</definition>
        <argsstring>() const</argsstring>
        <name>decorationsHaveAlpha</name>
        <qualifiedname>KWin::EffectsHandler::decorationsHaveAlpha</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <emphasis>true</emphasis> if the window decorations use the alpha channel, and <emphasis>false</emphasis> otherwise. <simplesect kind="since"><para>4.5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="529" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="435" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a2aaccce69b649b1bf7063009763dcb45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::reloadEffect</definition>
        <argsstring>(Effect *effect)</argsstring>
        <name>reloadEffect</name>
        <qualifiedname>KWin::EffectsHandler::reloadEffect</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> *</type>
          <declname>effect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allows an effect to trigger a reload of itself. This can be used by an effect which needs to be reloaded when screen geometry changes. It is possible that the effect cannot be loaded again as it&apos;s supported method does no longer hold. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>effect</parametername>
</parameternamelist>
<parameterdescription>
<para>The effect to reload </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>4.8 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="539" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1289" bodyend="1302"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a3c55f9c15c69fffd19f3ae412ba4aa56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> *</type>
        <definition>Effect * KWin::EffectsHandler::provides</definition>
        <argsstring>(Effect::Feature ef)</argsstring>
        <name>provides</name>
        <qualifiedname>KWin::EffectsHandler::provides</qualifiedname>
        <param>
          <type><ref refid="group__kwineffects_1ga6337b2a9b5aadfbb6b696119144b56ae" kindref="member">Effect::Feature</ref></type>
          <declname>ef</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="540" column="12" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="405" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a8b11dcce0b962be31d2db4a72ddae38d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> *</type>
        <definition>Effect * KWin::EffectsHandler::findEffect</definition>
        <argsstring>(const QString &amp;name) const</argsstring>
        <name>findEffect</name>
        <qualifiedname>KWin::EffectsHandler::findEffect</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="541" column="12" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1503" bodyend="1512"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a7b0c2a8ca6a07f8ac471c306fc0c2e57" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringList</type>
        <definition>QStringList KWin::EffectsHandler::loadedEffects</definition>
        <argsstring>() const</argsstring>
        <name>loadedEffects</name>
        <qualifiedname>KWin::EffectsHandler::loadedEffects</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="542" column="17" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1167" bodyend="1177"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a436c0cabd97bd6780fb1d8ecc7824643" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringList</type>
        <definition>QStringList KWin::EffectsHandler::listOfEffects</definition>
        <argsstring>() const</argsstring>
        <name>listOfEffects</name>
        <qualifiedname>KWin::EffectsHandler::listOfEffects</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="543" column="17" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1179" bodyend="1182"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a8a7da3ec9a422779b8d3b83f92306327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::unloadAllEffects</definition>
        <argsstring>()</argsstring>
        <name>unloadAllEffects</name>
        <qualifiedname>KWin::EffectsHandler::unloadAllEffects</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="544" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="320" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ae69935124b6ac51c1812398aa8c446f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringList</type>
        <definition>QStringList KWin::EffectsHandler::activeEffects</definition>
        <argsstring>() const</argsstring>
        <name>activeEffects</name>
        <qualifiedname>KWin::EffectsHandler::activeEffects</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="545" column="17" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1320" bodyend="1331"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1af6acb0cb90259486c0bf484f6a53e65c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::isEffectActive</definition>
        <argsstring>(const QString &amp;pluginId) const</argsstring>
        <name>isEffectActive</name>
        <qualifiedname>KWin::EffectsHandler::isEffectActive</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>pluginId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="546" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1333" bodyend="1342"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a6e12b706dea38499a8cd78e6d749149b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::isScreenLocked</definition>
        <argsstring>() const</argsstring>
        <name>isScreenLocked</name>
        <qualifiedname>KWin::EffectsHandler::isScreenLocked</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the screen is currently considered as locked. Note for technical reasons this is not always possible to detect. The screen will only be considered as locked if the screen locking process implements the org.freedesktop.ScreenSaver interface.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the screen is currently locked, <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1a1222f73b36c35bb0c3145a0f579aa8a7" kindref="member">screenLockingChanged</ref> </para>
</simplesect>
<simplesect kind="since"><para>4.11 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="558" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1399" bodyend="1406"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a5374d885eb19ec21dece4326968da3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::makeOpenGLContextCurrent</definition>
        <argsstring>()</argsstring>
        <name>makeOpenGLContextCurrent</name>
        <qualifiedname>KWin::EffectsHandler::makeOpenGLContextCurrent</qualifiedname>
        <briefdescription>
<para>Makes the OpenGL compositing context current. </para>
        </briefdescription>
        <detaileddescription>
<para>If the compositing backend is not using OpenGL, this method returns <computeroutput>false</computeroutput>.</para>
<para><simplesect kind="return"><para>bool <computeroutput>true</computeroutput> if the context became current, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="567" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1419" bodyend="1422"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a73310f2b58993037e25247ed54c54720" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::doneOpenGLContextCurrent</definition>
        <argsstring>()</argsstring>
        <name>doneOpenGLContextCurrent</name>
        <qualifiedname>KWin::EffectsHandler::doneOpenGLContextCurrent</qualifiedname>
        <briefdescription>
<para>Makes a null OpenGL context current resulting in no context being current. </para>
        </briefdescription>
        <detaileddescription>
<para>If the compositing backend is not OpenGL based, this method is a noop.</para>
<para>There is normally no reason for an <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> to call this method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="576" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1424" bodyend="1427"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a0b127bfb56ec9dd3ae9f948fe455acc0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_display" kindref="compound">Display</ref> *</type>
        <definition>Display * KWin::EffectsHandler::waylandDisplay</definition>
        <argsstring>() const</argsstring>
        <name>waylandDisplay</name>
        <qualifiedname>KWin::EffectsHandler::waylandDisplay</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interface to the <ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref> display: this is relevant only on <ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref>, on X11 it will be nullptr <simplesect kind="since"><para>5.5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="588" column="13" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1351" bodyend="1357"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a1748cac7be8008e100751281c10c097a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::animationsSupported</definition>
        <argsstring>() const</argsstring>
        <name>animationsSupported</name>
        <qualifiedname>KWin::EffectsHandler::animationsSupported</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether animations are supported by the <ref refid="class_k_win_1_1_scene" kindref="compound">Scene</ref>. If this method returns <computeroutput>false</computeroutput> Effects are supposed to not animate transitions.</para>
<para><simplesect kind="return"><para>Whether the <ref refid="class_k_win_1_1_scene" kindref="compound">Scene</ref> can drive animations </para>
</simplesect>
<simplesect kind="since"><para>5.8 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="598" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1429" bodyend="1437"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ad3fdde61a77c376e5618e4494ce274d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_platform_cursor_image" kindref="compound">PlatformCursorImage</ref></type>
        <definition>PlatformCursorImage KWin::EffectsHandler::cursorImage</definition>
        <argsstring>() const</argsstring>
        <name>cursorImage</name>
        <qualifiedname>KWin::EffectsHandler::cursorImage</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The current cursor image of the Platform. <simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1af20aeb5fb6f87bf9bbaa52a97fd80478" kindref="member">cursorPos</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.9 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="605" column="25" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1448" bodyend="1451"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1af1683f65536d052a2a3693ce62f4894b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::hideCursor</definition>
        <argsstring>()</argsstring>
        <name>hideCursor</name>
        <qualifiedname>KWin::EffectsHandler::hideCursor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The cursor image should be hidden. <simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1a78167bfe2f963caba0142ac5842618a0" kindref="member">showCursor</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.9 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="612" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1453" bodyend="1456"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a78167bfe2f963caba0142ac5842618a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::showCursor</definition>
        <argsstring>()</argsstring>
        <name>showCursor</name>
        <qualifiedname>KWin::EffectsHandler::showCursor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The cursor image should be shown again after having been hidden. <simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1af1683f65536d052a2a3693ce62f4894b" kindref="member">hideCursor</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.9 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="619" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1458" bodyend="1461"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a4864c3b356ffa23c8200e0109127f32b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::isCursorHidden</definition>
        <argsstring>() const</argsstring>
        <name>isCursorHidden</name>
        <qualifiedname>KWin::EffectsHandler::isCursorHidden</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether or not the cursor is currently hidden </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="624" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1600" bodyend="1603"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1abefd9be111d4af51392ebbe1078840c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::startInteractiveWindowSelection</definition>
        <argsstring>(std::function&lt; void(KWin::EffectWindow *)&gt; callback)</argsstring>
        <name>startInteractiveWindowSelection</name>
        <qualifiedname>KWin::EffectsHandler::startInteractiveWindowSelection</qualifiedname>
        <param>
          <type>std::function&lt; void(<ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *)&gt;</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Starts an interactive window selection process.</para>
<para>Once the user selected a window the <computeroutput>callback</computeroutput> is invoked with the selected <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> as argument. In case the user cancels the interactive window selection or selecting a window is currently not possible (e.g. screen locked) the <computeroutput>callback</computeroutput> is invoked with a <computeroutput>nullptr</computeroutput> argument.</para>
<para>During the interactive window selection the cursor is turned into a crosshair cursor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to invoke once the interactive window selection ends </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>5.9 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="638" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1463" bodyend="1472"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a40b73cfa1b04e9f5faa4f727f3d460aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::startInteractivePositionSelection</definition>
        <argsstring>(std::function&lt; void(const QPointF &amp;)&gt; callback)</argsstring>
        <name>startInteractivePositionSelection</name>
        <qualifiedname>KWin::EffectsHandler::startInteractivePositionSelection</qualifiedname>
        <param>
          <type>std::function&lt; void(const QPointF &amp;)&gt;</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Starts an interactive position selection process.</para>
<para>Once the user selected a position on the screen the <computeroutput>callback</computeroutput> is invoked with the selected point as argument. In case the user cancels the interactive position selection or selecting a position is currently not possible (e.g. screen locked) the <computeroutput>callback</computeroutput> is invoked with a point at <computeroutput>-1</computeroutput> as x and y argument.</para>
<para>During the interactive window selection the cursor is turned into a crosshair cursor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to invoke once the interactive position selection ends </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>5.9 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="653" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1474" bodyend="1477"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a4f3937264019252e88536a06b858a539" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::showOnScreenMessage</definition>
        <argsstring>(const QString &amp;message, const QString &amp;iconName=QString())</argsstring>
        <name>showOnScreenMessage</name>
        <qualifiedname>KWin::EffectsHandler::showOnScreenMessage</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>iconName</declname>
          <defval>QString()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shows an on-screen-message. To hide it again use hideOnScreenMessage.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to show </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iconName</parametername>
</parameternamelist>
<parameterdescription>
<para>The optional themed icon name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1ad0420267c8d74bcd8f97ec49705ed68c" kindref="member">hideOnScreenMessage</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.9 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="663" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1479" bodyend="1482"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ad0420267c8d74bcd8f97ec49705ed68c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::hideOnScreenMessage</definition>
        <argsstring>(OnScreenMessageHideFlags flags=OnScreenMessageHideFlags())</argsstring>
        <name>hideOnScreenMessage</name>
        <qualifiedname>KWin::EffectsHandler::hideOnScreenMessage</qualifiedname>
        <param>
          <type>OnScreenMessageHideFlags</type>
          <declname>flags</declname>
          <defval>OnScreenMessageHideFlags()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hides a previously shown on-screen-message again. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags for how to hide the message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1a4f3937264019252e88536a06b858a539" kindref="member">showOnScreenMessage</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.9 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="684" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1484" bodyend="1491"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ae57baacdc4a49cc4f1093c1e318a86cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>KSharedConfigPtr</type>
        <definition>KSharedConfigPtr KWin::EffectsHandler::config</definition>
        <argsstring>() const</argsstring>
        <name>config</name>
        <qualifiedname>KWin::EffectsHandler::config</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="690" column="22" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1493" bodyend="1496"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a6fe044ab2e6fc28262a8701c1f10933c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>KSharedConfigPtr</type>
        <definition>KSharedConfigPtr KWin::EffectsHandler::inputConfig</definition>
        <argsstring>() const</argsstring>
        <name>inputConfig</name>
        <qualifiedname>KWin::EffectsHandler::inputConfig</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The global input configuration (kcminputrc) </para>
</simplesect>
<simplesect kind="since"><para>5.10 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="696" column="22" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1498" bodyend="1501"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a081b07fa37f076c1d686ad4ac8709c2a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::hasActiveFullScreenEffect</definition>
        <argsstring>() const</argsstring>
        <name>hasActiveFullScreenEffect</name>
        <qualifiedname>KWin::EffectsHandler::hasActiveFullScreenEffect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if activeFullScreenEffect is set </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="701" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="476" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ace89088efcad8c8ad356f9ba1fc63f3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::isColorPickerActive</definition>
        <argsstring>() const</argsstring>
        <name>isColorPickerActive</name>
        <qualifiedname>KWin::EffectsHandler::isColorPickerActive</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if color picker effect is currently picking colors. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="706" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="481" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1aaef0446f00d6e9b13fc872acfc366ad3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::renderOffscreenQuickView</definition>
        <argsstring>(const RenderTarget &amp;renderTarget, const RenderViewport &amp;viewport, OffscreenQuickView *effectQuickView) const</argsstring>
        <name>renderOffscreenQuickView</name>
        <qualifiedname>KWin::EffectsHandler::renderOffscreenQuickView</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref> &amp;</type>
          <declname>renderTarget</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_viewport" kindref="compound">RenderViewport</ref> &amp;</type>
          <declname>viewport</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_offscreen_quick_view" kindref="compound">OffscreenQuickView</ref> *</type>
          <declname>effectQuickView</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Render the supplied <ref refid="class_k_win_1_1_offscreen_quick_view" kindref="compound">OffscreenQuickView</ref> onto the scene It can be called at any point during the scene rendering <simplesect kind="since"><para>5.18 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="713" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1514" bodyend="1567"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a5ea305c04226a1522542224e7428dc87" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1a416cef954a72080ddb0d040111f008dc" kindref="member">SessionState</ref></type>
        <definition>SessionState KWin::EffectsHandler::sessionState</definition>
        <argsstring>() const</argsstring>
        <name>sessionState</name>
        <qualifiedname>KWin::EffectsHandler::sessionState</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The status of the session i.e if the user is logging out <simplesect kind="since"><para>5.18 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="719" column="18" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1569" bodyend="1572"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1aa103ea22c2fcc317e101867aa7d7a8e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> * &gt;</type>
        <definition>QList&lt; Output * &gt; KWin::EffectsHandler::screens</definition>
        <argsstring>() const</argsstring>
        <name>screens</name>
        <qualifiedname>KWin::EffectsHandler::screens</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the list of all the screens connected to the system. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="724" column="11" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1574" bodyend="1577"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a6d9a281e11699dcac7ea4974f37dfb7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
        <definition>Output * KWin::EffectsHandler::screenAt</definition>
        <argsstring>(const QPoint &amp;point) const</argsstring>
        <name>screenAt</name>
        <qualifiedname>KWin::EffectsHandler::screenAt</qualifiedname>
        <param>
          <type>const QPoint &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="725" column="12" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1579" bodyend="1582"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a70e7ea2623c1ed2595d5cac76fa722d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
        <definition>Output * KWin::EffectsHandler::findScreen</definition>
        <argsstring>(const QString &amp;name) const</argsstring>
        <name>findScreen</name>
        <qualifiedname>KWin::EffectsHandler::findScreen</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="726" column="12" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1584" bodyend="1593"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a9bb2a29e9d576f71add51d791d32050f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
        <definition>Output * KWin::EffectsHandler::findScreen</definition>
        <argsstring>(int screenId) const</argsstring>
        <name>findScreen</name>
        <qualifiedname>KWin::EffectsHandler::findScreen</qualifiedname>
        <param>
          <type>int</type>
          <declname>screenId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="727" column="12" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1595" bodyend="1598"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a2533f2c2458ffa1f20ae402a5f80af12" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
        <definition>KWin::EffectWindow * KWin::EffectsHandler::inputPanel</definition>
        <argsstring>() const</argsstring>
        <name>inputPanel</name>
        <qualifiedname>KWin::EffectsHandler::inputPanel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="729" column="24" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1605" bodyend="1616"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ad947da637dd6a96b8c8a5126b4561b43" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::isInputPanelOverlay</definition>
        <argsstring>() const</argsstring>
        <name>isInputPanelOverlay</name>
        <qualifiedname>KWin::EffectsHandler::isInputPanelOverlay</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="730" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1618" bodyend="1629"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a3bc2b7f6fc0ec0be58ce9f3cca44480a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QQmlEngine *</type>
        <definition>QQmlEngine * KWin::EffectsHandler::qmlEngine</definition>
        <argsstring>() const</argsstring>
        <name>qmlEngine</name>
        <qualifiedname>KWin::EffectsHandler::qmlEngine</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="732" column="16" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1631" bodyend="1634"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a37991a5d3c5176bc90e133e9df81bf51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::blocksDirectScanout</definition>
        <argsstring>() const</argsstring>
        <name>blocksDirectScanout</name>
        <qualifiedname>KWin::EffectsHandler::blocksDirectScanout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether or not any effect is currently active where <ref refid="namespace_k_win" kindref="compound">KWin</ref> should not use direct scanout </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="737" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1344" bodyend="1349"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ae9387e5aced8ad8a45d661e7137ed4ce" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_workspace_scene" kindref="compound">WorkspaceScene</ref> *</type>
        <definition>WorkspaceScene * KWin::EffectsHandler::scene</definition>
        <argsstring>() const</argsstring>
        <name>scene</name>
        <qualifiedname>KWin::EffectsHandler::scene</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="739" column="20" bodyfile="kwin/src/effect/effecthandler.h" bodystart="739" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ae0a9fa2171bba1e8ea5159031f048a9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::touchDown</definition>
        <argsstring>(qint32 id, const QPointF &amp;pos, std::chrono::microseconds time)</argsstring>
        <name>touchDown</name>
        <qualifiedname>KWin::EffectsHandler::touchDown</qualifiedname>
        <param>
          <type>qint32</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="744" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="549" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a861bdf3663501497a64d53c43a0118c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::touchMotion</definition>
        <argsstring>(qint32 id, const QPointF &amp;pos, std::chrono::microseconds time)</argsstring>
        <name>touchMotion</name>
        <qualifiedname>KWin::EffectsHandler::touchMotion</qualifiedname>
        <param>
          <type>qint32</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="745" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="560" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a9422927aa5b871de8b6634c6c5de3db0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::touchUp</definition>
        <argsstring>(qint32 id, std::chrono::microseconds time)</argsstring>
        <name>touchUp</name>
        <qualifiedname>KWin::EffectsHandler::touchUp</qualifiedname>
        <param>
          <type>qint32</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="746" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="571" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1af7191b0f8b8125d8a6d007902098e331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::touchCancel</definition>
        <argsstring>()</argsstring>
        <name>touchCancel</name>
        <qualifiedname>KWin::EffectsHandler::touchCancel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="747" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="582" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ade6da8f7a9767de92a090d3004413429" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::tabletToolProximityEvent</definition>
        <argsstring>(KWin::TabletToolProximityEvent *event)</argsstring>
        <name>tabletToolProximityEvent</name>
        <qualifiedname>KWin::EffectsHandler::tabletToolProximityEvent</qualifiedname>
        <param>
          <type><ref refid="struct_k_win_1_1_tablet_tool_proximity_event" kindref="compound">KWin::TabletToolProximityEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="749" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="589" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a184ed44a37205e87f4c599a80f6db488" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::tabletToolAxisEvent</definition>
        <argsstring>(KWin::TabletToolAxisEvent *event)</argsstring>
        <name>tabletToolAxisEvent</name>
        <qualifiedname>KWin::EffectsHandler::tabletToolAxisEvent</qualifiedname>
        <param>
          <type><ref refid="struct_k_win_1_1_tablet_tool_axis_event" kindref="compound">KWin::TabletToolAxisEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="750" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="600" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a630858c42fd10ae82eb4914c0a99fab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::tabletToolTipEvent</definition>
        <argsstring>(KWin::TabletToolTipEvent *event)</argsstring>
        <name>tabletToolTipEvent</name>
        <qualifiedname>KWin::EffectsHandler::tabletToolTipEvent</qualifiedname>
        <param>
          <type><ref refid="struct_k_win_1_1_tablet_tool_tip_event" kindref="compound">KWin::TabletToolTipEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="751" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="611" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ad86d42db9f0ad751824df6ecae97f379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::tabletToolButtonEvent</definition>
        <argsstring>(uint button, bool pressed, InputDeviceTabletTool *tool, std::chrono::microseconds time)</argsstring>
        <name>tabletToolButtonEvent</name>
        <qualifiedname>KWin::EffectsHandler::tabletToolButtonEvent</qualifiedname>
        <param>
          <type>uint</type>
          <declname>button</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pressed</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_input_device_tablet_tool" kindref="compound">InputDeviceTabletTool</ref> *</type>
          <declname>tool</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="752" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="622" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ac4f8c390e1dfb26ab441fec0bc911939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::tabletPadButtonEvent</definition>
        <argsstring>(uint button, bool pressed, std::chrono::microseconds time, InputDevice *device)</argsstring>
        <name>tabletPadButtonEvent</name>
        <qualifiedname>KWin::EffectsHandler::tabletPadButtonEvent</qualifiedname>
        <param>
          <type>uint</type>
          <declname>button</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pressed</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_input_device" kindref="compound">InputDevice</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="753" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="633" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a14f19b1a6d50f4ac08cf2fc257953cac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::tabletPadStripEvent</definition>
        <argsstring>(int number, int position, bool isFinger, std::chrono::microseconds time, InputDevice *device)</argsstring>
        <name>tabletPadStripEvent</name>
        <qualifiedname>KWin::EffectsHandler::tabletPadStripEvent</qualifiedname>
        <param>
          <type>int</type>
          <declname>number</declname>
        </param>
        <param>
          <type>int</type>
          <declname>position</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isFinger</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_input_device" kindref="compound">InputDevice</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="754" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="644" bodyend="653"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a06027bd9d632346f3b8e24887f6b8fdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectsHandler::tabletPadRingEvent</definition>
        <argsstring>(int number, int position, bool isFinger, std::chrono::microseconds time, InputDevice *device)</argsstring>
        <name>tabletPadRingEvent</name>
        <qualifiedname>KWin::EffectsHandler::tabletPadRingEvent</qualifiedname>
        <param>
          <type>int</type>
          <declname>number</declname>
        </param>
        <param>
          <type>int</type>
          <declname>position</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isFinger</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_input_device" kindref="compound">InputDevice</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="755" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="655" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a41a696e4b5bc914e8ece8e0ab8f8ff8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::highlightWindows</definition>
        <argsstring>(const QList&lt; EffectWindow * &gt; &amp;windows)</argsstring>
        <name>highlightWindows</name>
        <qualifiedname>KWin::EffectsHandler::highlightWindows</qualifiedname>
        <param>
          <type>const QList&lt; <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> * &gt; &amp;</type>
          <declname>windows</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="757" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1439" bodyend="1446"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="signal">
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1a03c9bd1b03408dd71463f1bcc4c4ec82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::screenAdded</definition>
        <argsstring>(KWin::Output *screen)</argsstring>
        <name>screenAdded</name>
        <qualifiedname>KWin::EffectsHandler::screenAdded</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">KWin::Output</ref> *</type>
          <declname>screen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted whenever a new <emphasis>screen</emphasis> is added to the system. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="770" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1a2aaa46342fafd4d0b09fb7497a0a7401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::screenRemoved</definition>
        <argsstring>(KWin::Output *screen)</argsstring>
        <name>screenRemoved</name>
        <qualifiedname>KWin::EffectsHandler::screenRemoved</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">KWin::Output</ref> *</type>
          <declname>screen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted whenever a <emphasis>screen</emphasis> is removed from the system. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="774" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1ac71df72597202eed23f6211d8fa80c50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::desktopChanged</definition>
        <argsstring>(KWin::VirtualDesktop *oldDesktop, KWin::VirtualDesktop *newDesktop, KWin::EffectWindow *with)</argsstring>
        <name>desktopChanged</name>
        <qualifiedname>KWin::EffectsHandler::desktopChanged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">KWin::VirtualDesktop</ref> *</type>
          <declname>oldDesktop</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">KWin::VirtualDesktop</ref> *</type>
          <declname>newDesktop</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>with</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted when the current desktop changed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>oldDesktop</parametername>
</parameternamelist>
<parameterdescription>
<para>The previously current desktop </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newDesktop</parametername>
</parameternamelist>
<parameterdescription>
<para>The new current desktop </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with</parametername>
</parameternamelist>
<parameterdescription>
<para>The window which is taken over to the new desktop, can be NULL </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>4.9 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="782" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1a2c7e78f36bc49937eb4de56521fcda5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::desktopChanging</definition>
        <argsstring>(KWin::VirtualDesktop *currentDesktop, QPointF offset, KWin::EffectWindow *with)</argsstring>
        <name>desktopChanging</name>
        <qualifiedname>KWin::EffectsHandler::desktopChanging</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">KWin::VirtualDesktop</ref> *</type>
          <declname>currentDesktop</declname>
        </param>
        <param>
          <type>QPointF</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>with</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emmitted while desktop is changing for animation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentDesktop</parametername>
</parameternamelist>
<parameterdescription>
<para>The current desktop untiotherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The current desktop offset. offset.x() = .6 means 60% of the way to the desktop to the right. Positive Values means Up and Right. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="791" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1ade940098c549fce05980843a04d30414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::desktopChangingCancelled</definition>
        <argsstring>()</argsstring>
        <name>desktopChangingCancelled</name>
        <qualifiedname>KWin::EffectsHandler::desktopChangingCancelled</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="792" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1a766f0b484b03e847d42bbe6513b65211" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::desktopAdded</definition>
        <argsstring>(KWin::VirtualDesktop *desktop)</argsstring>
        <name>desktopAdded</name>
        <qualifiedname>KWin::EffectsHandler::desktopAdded</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">KWin::VirtualDesktop</ref> *</type>
          <declname>desktop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="793" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1a649beb5237e8e56d972bec153ee5099d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::desktopRemoved</definition>
        <argsstring>(KWin::VirtualDesktop *desktop)</argsstring>
        <name>desktopRemoved</name>
        <qualifiedname>KWin::EffectsHandler::desktopRemoved</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">KWin::VirtualDesktop</ref> *</type>
          <declname>desktop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="794" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1a0e612c2b8c76eb5c101ab888b374640d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::desktopGridSizeChanged</definition>
        <argsstring>(const QSize &amp;size)</argsstring>
        <name>desktopGridSizeChanged</name>
        <qualifiedname>KWin::EffectsHandler::desktopGridSizeChanged</qualifiedname>
        <param>
          <type>const QSize &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted when the virtual desktop grid layout changes <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>new size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>5.25 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="801" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1a99ce8955558745618a24aad250b7861a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::desktopGridWidthChanged</definition>
        <argsstring>(int width)</argsstring>
        <name>desktopGridWidthChanged</name>
        <qualifiedname>KWin::EffectsHandler::desktopGridWidthChanged</qualifiedname>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted when the virtual desktop grid layout changes <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>new width </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>5.25 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="807" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1acd265f3c8b9f78c6291e6c2f73ea95a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::desktopGridHeightChanged</definition>
        <argsstring>(int height)</argsstring>
        <name>desktopGridHeightChanged</name>
        <qualifiedname>KWin::EffectsHandler::desktopGridHeightChanged</qualifiedname>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted when the virtual desktop grid layout changes <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>new height </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>5.25 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="813" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1a001c56813196665854334eb774d765ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::showingDesktopChanged</definition>
        <argsstring>(bool)</argsstring>
        <name>showingDesktopChanged</name>
        <qualifiedname>KWin::EffectsHandler::showingDesktopChanged</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted when the desktop showing (&quot;dashboard&quot;) state changed The desktop is risen to the keepAbove layer, you may want to elevate windows or such. <simplesect kind="since"><para>5.3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="820" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1af265803a52b130d505ab9f8f66a30eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::windowAdded</definition>
        <argsstring>(KWin::EffectWindow *w)</argsstring>
        <name>windowAdded</name>
        <qualifiedname>KWin::EffectsHandler::windowAdded</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted when a new window has been added to the <ref refid="class_k_win_1_1_workspace" kindref="compound">Workspace</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The added window </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>4.7 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="826" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1a25652fb190ebfb2d9c95b67eb9a3291d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::windowClosed</definition>
        <argsstring>(KWin::EffectWindow *w)</argsstring>
        <name>windowClosed</name>
        <qualifiedname>KWin::EffectsHandler::windowClosed</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted when a window is being removed from the <ref refid="class_k_win_1_1_workspace" kindref="compound">Workspace</ref>. An effect which wants to animate the window closing should connect to this signal and reference the window by using refWindow <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The window which is being closed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>4.7 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="835" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1a3ea23595f9c9f41f2ea0a63072e80852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::windowActivated</definition>
        <argsstring>(KWin::EffectWindow *w)</argsstring>
        <name>windowActivated</name>
        <qualifiedname>KWin::EffectsHandler::windowActivated</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted when a window get&apos;s activated. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The new active window, or <computeroutput>NULL</computeroutput> if there is no active window. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>4.7 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="841" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1a13c385b70a4984545ba1f8ed8204871c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::windowDeleted</definition>
        <argsstring>(KWin::EffectWindow *w)</argsstring>
        <name>windowDeleted</name>
        <qualifiedname>KWin::EffectsHandler::windowDeleted</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted when a window is deleted. This means that a closed window is not referenced any more. An effect bookkeeping the closed windows should connect to this signal to clean up the internal references. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The window which is going to be deleted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_window_1a45a22810efc92ca92df970add8ca7907" kindref="member">EffectWindow::refWindow</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_window_1afca01a54fcb3e189b2e334939737def0" kindref="member">EffectWindow::unrefWindow</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1a25652fb190ebfb2d9c95b67eb9a3291d" kindref="member">windowClosed</ref> </para>
</simplesect>
<simplesect kind="since"><para>4.7 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="853" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1afdd37c120cdf7956a779085df023df32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::tabBoxAdded</definition>
        <argsstring>(int mode)</argsstring>
        <name>tabBoxAdded</name>
        <qualifiedname>KWin::EffectsHandler::tabBoxAdded</qualifiedname>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted when a tabbox is added. An effect who wants to replace the tabbox with itself should use refTabBox. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="namespace_k_win_1aad393b058dfa58c0c3ca91c0c2b5f858" kindref="member">TabBoxMode</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1a0265bfefab98f107c7e20c6acabe10ae" kindref="member">refTabBox</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1aa237f092ce7ff9a89d9894f0f4a6a2e1" kindref="member">tabBoxClosed</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1a4523d2f45730341547249aca8d60756e" kindref="member">tabBoxUpdated</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1a509a05a602542a209519076059e50b40" kindref="member">tabBoxKeyEvent</ref> </para>
</simplesect>
<simplesect kind="since"><para>4.7 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="864" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1aa237f092ce7ff9a89d9894f0f4a6a2e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::tabBoxClosed</definition>
        <argsstring>()</argsstring>
        <name>tabBoxClosed</name>
        <qualifiedname>KWin::EffectsHandler::tabBoxClosed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted when the <ref refid="namespace_k_win_1_1_tab_box" kindref="compound">TabBox</ref> was closed by <ref refid="namespace_k_win" kindref="compound">KWin</ref> core. An effect which referenced the <ref refid="namespace_k_win_1_1_tab_box" kindref="compound">TabBox</ref> should use unrefTabBox to unref again. <simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1af8fd9402ad8a3d2964947a724084fdad" kindref="member">unrefTabBox</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1afdd37c120cdf7956a779085df023df32" kindref="member">tabBoxAdded</ref> </para>
</simplesect>
<simplesect kind="since"><para>4.7 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="872" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1a4523d2f45730341547249aca8d60756e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::tabBoxUpdated</definition>
        <argsstring>()</argsstring>
        <name>tabBoxUpdated</name>
        <qualifiedname>KWin::EffectsHandler::tabBoxUpdated</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted when the selected <ref refid="namespace_k_win_1_1_tab_box" kindref="compound">TabBox</ref> window changed or the <ref refid="namespace_k_win_1_1_tab_box" kindref="compound">TabBox</ref> List changed. An effect should only response to this signal if it referenced the <ref refid="namespace_k_win_1_1_tab_box" kindref="compound">TabBox</ref> with refTabBox. <simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1a0265bfefab98f107c7e20c6acabe10ae" kindref="member">refTabBox</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1a8359adb3d939ac296524e0250b328483" kindref="member">currentTabBoxWindowList</ref> </para>
</simplesect>
<simplesect kind="see"><para>currentTabBoxDesktopList </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1aa15ea6a4a8dcc0c98956e093666d0b46" kindref="member">currentTabBoxWindow</ref> </para>
</simplesect>
<simplesect kind="see"><para>currentTabBoxDesktop </para>
</simplesect>
<simplesect kind="since"><para>4.7 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="883" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1a509a05a602542a209519076059e50b40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::tabBoxKeyEvent</definition>
        <argsstring>(QKeyEvent *event)</argsstring>
        <name>tabBoxKeyEvent</name>
        <qualifiedname>KWin::EffectsHandler::tabBoxKeyEvent</qualifiedname>
        <param>
          <type>QKeyEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted when a key event, which is not handled by <ref refid="namespace_k_win_1_1_tab_box" kindref="compound">TabBox</ref> directly is, happens while <ref refid="namespace_k_win_1_1_tab_box" kindref="compound">TabBox</ref> is active. An effect might use the key event to e.g. change the selected window. An effect should only response to this signal if it referenced the <ref refid="namespace_k_win_1_1_tab_box" kindref="compound">TabBox</ref> with refTabBox. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>The key event not handled by <ref refid="namespace_k_win_1_1_tab_box" kindref="compound">TabBox</ref> directly </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1a0265bfefab98f107c7e20c6acabe10ae" kindref="member">refTabBox</ref> </para>
</simplesect>
<simplesect kind="since"><para>4.7 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="892" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1ace7df1c309d2c4a64e324d6a52c680ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::mouseChanged</definition>
        <argsstring>(const QPointF &amp;pos, const QPointF &amp;oldpos, Qt::MouseButtons buttons, Qt::MouseButtons oldbuttons, Qt::KeyboardModifiers modifiers, Qt::KeyboardModifiers oldmodifiers)</argsstring>
        <name>mouseChanged</name>
        <qualifiedname>KWin::EffectsHandler::mouseChanged</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>oldpos</declname>
        </param>
        <param>
          <type>Qt::MouseButtons</type>
          <declname>buttons</declname>
        </param>
        <param>
          <type>Qt::MouseButtons</type>
          <declname>oldbuttons</declname>
        </param>
        <param>
          <type>Qt::KeyboardModifiers</type>
          <declname>modifiers</declname>
        </param>
        <param>
          <type>Qt::KeyboardModifiers</type>
          <declname>oldmodifiers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted when mouse changed. If an effect needs to get updated mouse positions, it needs to first call startMousePolling. For a fullscreen effect it is better to use an input window and react on windowInputMouseEvent. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The new mouse position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldpos</parametername>
</parameternamelist>
<parameterdescription>
<para>The previously mouse position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buttons</parametername>
</parameternamelist>
<parameterdescription>
<para>The pressed mouse buttons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldbuttons</parametername>
</parameternamelist>
<parameterdescription>
<para>The previously pressed mouse buttons </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modifiers</parametername>
</parameternamelist>
<parameterdescription>
<para>Pressed keyboard modifiers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldmodifiers</parametername>
</parameternamelist>
<parameterdescription>
<para>Previously pressed keyboard modifiers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>startMousePolling </para>
</simplesect>
<simplesect kind="since"><para>4.7 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="906" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1aa92530fc11fbd4b12f8d3791b1ffb92c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::cursorShapeChanged</definition>
        <argsstring>()</argsstring>
        <name>cursorShapeChanged</name>
        <qualifiedname>KWin::EffectsHandler::cursorShapeChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted when the cursor shape changed. You&apos;ll likely want to query the current cursor as reaction: xcb_xfixes_get_cursor_image_unchecked Connection to this signal is tracked, so if you don&apos;t need it anymore, disconnect from it to stop cursor event filtering </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="914" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1a0f841f03b6d16457e2ee08c7def285d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::propertyNotify</definition>
        <argsstring>(KWin::EffectWindow *w, long atom)</argsstring>
        <name>propertyNotify</name>
        <qualifiedname>KWin::EffectsHandler::propertyNotify</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>long</type>
          <declname>atom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Receives events registered for using registerPropertyType. Use readProperty() to get the property data. Note that the property may be already set on the window, so doing the same processing from <ref refid="class_k_win_1_1_effects_handler_1af265803a52b130d505ab9f8f66a30eb0" kindref="member">windowAdded()</ref> (e.g. simply calling <ref refid="class_k_win_1_1_effects_handler_1a0f841f03b6d16457e2ee08c7def285d4" kindref="member">propertyNotify()</ref> from it) is usually needed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose property changed, is <computeroutput>null</computeroutput> if it is a root window property </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atom</parametername>
</parameternamelist>
<parameterdescription>
<para>The property </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>4.7 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="925" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1ae74f59704706fe4ae364853a466513d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::currentActivityAboutToChange</definition>
        <argsstring>()</argsstring>
        <name>currentActivityAboutToChange</name>
        <qualifiedname>KWin::EffectsHandler::currentActivityAboutToChange</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>emitted before the current activity actually changes <simplesect kind="since"><para>6.3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="931" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1a2a62645ebf6d5fc075be76e5545da8f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::currentActivityChanged</definition>
        <argsstring>(const QString &amp;id)</argsstring>
        <name>currentActivityChanged</name>
        <qualifiedname>KWin::EffectsHandler::currentActivityChanged</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the global activity is changed <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>id of the new current activity </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>4.9 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="938" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1af8d871c87ed14f414499776ee6f8cfc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::activityAdded</definition>
        <argsstring>(const QString &amp;id)</argsstring>
        <name>activityAdded</name>
        <qualifiedname>KWin::EffectsHandler::activityAdded</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when a new activity is added <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>id of the new activity </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>4.9 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="944" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1abcffea0410b087f0fc63b611495b4966" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::activityRemoved</definition>
        <argsstring>(const QString &amp;id)</argsstring>
        <name>activityRemoved</name>
        <qualifiedname>KWin::EffectsHandler::activityRemoved</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the activity is removed <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>id of the removed activity </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>4.9 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="951" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1a1222f73b36c35bb0c3145a0f579aa8a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::screenLockingChanged</definition>
        <argsstring>(bool locked)</argsstring>
        <name>screenLockingChanged</name>
        <qualifiedname>KWin::EffectsHandler::screenLockingChanged</qualifiedname>
        <param>
          <type>bool</type>
          <declname>locked</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the screen got locked or unlocked. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>locked</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if the screen is now locked, <computeroutput>false</computeroutput> if it is now unlocked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>4.11 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="957" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1ac89554f16ab6a7eb23b4fcaf7ce3de84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::screenAboutToLock</definition>
        <argsstring>()</argsstring>
        <name>screenAboutToLock</name>
        <qualifiedname>KWin::EffectsHandler::screenAboutToLock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted just before the screen locker tries to grab keys and lock the screen Effects should release any grabs immediately <simplesect kind="since"><para>5.17 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="964" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1a6c05d0ac5ccfd76b8832cc77fb9085ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::stackingOrderChanged</definition>
        <argsstring>()</argsstring>
        <name>stackingOrderChanged</name>
        <qualifiedname>KWin::EffectsHandler::stackingOrderChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signels is emitted when ever the stacking order is change, ie. a window is risen or lowered <simplesect kind="since"><para>4.10 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="971" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1acadff1f45281ea7be68317114e653097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::screenEdgeApproaching</definition>
        <argsstring>(ElectricBorder border, qreal factor, const QRect &amp;geometry)</argsstring>
        <name>screenEdgeApproaching</name>
        <qualifiedname>KWin::EffectsHandler::screenEdgeApproaching</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a7eda12963fb07e3df0c1f337e8526bc5" kindref="member">ElectricBorder</ref></type>
          <declname>border</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>factor</declname>
        </param>
        <param>
          <type>const QRect &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the user starts to approach the <computeroutput>border</computeroutput> with the mouse. The <computeroutput>factor</computeroutput> describes how far away the mouse is in a relative mean. The values are in [0.0, 1.0] with 0.0 being emitted when first entered and on leaving. The value 1.0 means that the <computeroutput>border</computeroutput> is reached with the mouse. So the values are well suited for animations. The signal is always emitted when the mouse cursor position changes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>border</parametername>
</parameternamelist>
<parameterdescription>
<para>The screen edge which is being approached </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Value in range [0.0,1.0] to describe how close the mouse is to the border </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>geometry</parametername>
</parameternamelist>
<parameterdescription>
<para>The geometry of the edge which is being approached </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>4.11 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="983" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1afe0cedc1f3130eba803aa1ff8474c0da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::virtualScreenSizeChanged</definition>
        <argsstring>()</argsstring>
        <name>virtualScreenSizeChanged</name>
        <qualifiedname>KWin::EffectsHandler::virtualScreenSizeChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted whenever the virtualScreenSize changes. <simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1aebb65bfab7dca8095ded3906b1bca282" kindref="member">virtualScreenSize()</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="989" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1a7c1de7dad6da165bee9963bb8ea79765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::virtualScreenGeometryChanged</definition>
        <argsstring>()</argsstring>
        <name>virtualScreenGeometryChanged</name>
        <qualifiedname>KWin::EffectsHandler::virtualScreenGeometryChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted whenever the virtualScreenGeometry changes. <simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1a7f34a25364c7923d76eb5ad42a8c898f" kindref="member">virtualScreenGeometry()</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="995" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1af69a4db9f51dc3d75f03d108009dc07e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::windowDataChanged</definition>
        <argsstring>(KWin::EffectWindow *w, int role)</argsstring>
        <name>windowDataChanged</name>
        <qualifiedname>KWin::EffectsHandler::windowDataChanged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>role</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal gets emitted when the data on <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> <computeroutput>w</computeroutput> for <computeroutput>role</computeroutput> changed.</para>
<para>An <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> can connect to this signal to read the new value and react on it. E.g. an <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> which does not operate on windows grabbed by another <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> wants to cancel the already scheduled animation if another <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> adds a grab.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> for which the data changed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>role</parametername>
</parameternamelist>
<parameterdescription>
<para>The data role which changed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_window_1a69d83e8d2e0e9c5630c054ce31210ce8" kindref="member">EffectWindow::setData</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_window_1a6a82d876206aec3c767d8ea8ca1dc1fe" kindref="member">EffectWindow::data</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.8.4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1010" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1af7e6be37b43602e76272b671cec0bb1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::activeFullScreenEffectChanged</definition>
        <argsstring>()</argsstring>
        <name>activeFullScreenEffectChanged</name>
        <qualifiedname>KWin::EffectsHandler::activeFullScreenEffectChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when active fullscreen effect changed.</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1af480b35c69116a1becba5cdb45c44014" kindref="member">activeFullScreenEffect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1a5daccf0d58882b9c642fc4036cafea4f" kindref="member">setActiveFullScreenEffect</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.14 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1033" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1ae45c8d2112db0ed5c84ba4b9cf66fd4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::hasActiveFullScreenEffectChanged</definition>
        <argsstring>()</argsstring>
        <name>hasActiveFullScreenEffectChanged</name>
        <qualifiedname>KWin::EffectsHandler::hasActiveFullScreenEffectChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when active fullscreen effect changed to being set or unset</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1af480b35c69116a1becba5cdb45c44014" kindref="member">activeFullScreenEffect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1a5daccf0d58882b9c642fc4036cafea4f" kindref="member">setActiveFullScreenEffect</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.15 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1043" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1a261c926494b810a5d8bbfce225c54827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::colorPickerActiveChanged</definition>
        <argsstring>()</argsstring>
        <name>colorPickerActiveChanged</name>
        <qualifiedname>KWin::EffectsHandler::colorPickerActiveChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1045" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1a42c5a8a1ef62297efe3dac1db56eae27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::sessionStateChanged</definition>
        <argsstring>()</argsstring>
        <name>sessionStateChanged</name>
        <qualifiedname>KWin::EffectsHandler::sessionStateChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the session state was changed <simplesect kind="since"><para>5.18 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1051" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1a3359485e3cc84cf6c1db8016fe8e76c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::startupAdded</definition>
        <argsstring>(const QString &amp;id, const QIcon &amp;icon)</argsstring>
        <name>startupAdded</name>
        <qualifiedname>KWin::EffectsHandler::startupAdded</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const QIcon &amp;</type>
          <declname>icon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1053" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1af1a1064cff5b438b6cd3879bd36d8ca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::startupChanged</definition>
        <argsstring>(const QString &amp;id, const QIcon &amp;icon)</argsstring>
        <name>startupChanged</name>
        <qualifiedname>KWin::EffectsHandler::startupChanged</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const QIcon &amp;</type>
          <declname>icon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1054" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1a19b2c5561d7d3407d13fe4a675938e5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::startupRemoved</definition>
        <argsstring>(const QString &amp;id)</argsstring>
        <name>startupRemoved</name>
        <qualifiedname>KWin::EffectsHandler::startupRemoved</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1055" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effects_handler_1ab5a661fdaf15efce0dd0d268cdb6441b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::inputPanelChanged</definition>
        <argsstring>()</argsstring>
        <name>inputPanelChanged</name>
        <qualifiedname>KWin::EffectsHandler::inputPanelChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1057" column="10"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-slot">
      <memberdef kind="slot" id="class_k_win_1_1_effects_handler_1a71c9adc5dae2250dffdfb19ee06656dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE void</type>
        <definition>void KWin::EffectsHandler::reconfigureEffect</definition>
        <argsstring>(const QString &amp;name)</argsstring>
        <name>reconfigureEffect</name>
        <qualifiedname>KWin::EffectsHandler::reconfigureEffect</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1061" column="23" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1243" bodyend="1253"/>
      </memberdef>
      <memberdef kind="slot" id="class_k_win_1_1_effects_handler_1a4ecab9172fb71c47df1e2beaa66ace9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE bool</type>
        <definition>bool KWin::EffectsHandler::loadEffect</definition>
        <argsstring>(const QString &amp;name)</argsstring>
        <name>loadEffect</name>
        <qualifiedname>KWin::EffectsHandler::loadEffect</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1062" column="23" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1184" bodyend="1190"/>
      </memberdef>
      <memberdef kind="slot" id="class_k_win_1_1_effects_handler_1a7cb6e8fe52d7163de7ee50bd0a61caf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE void</type>
        <definition>void KWin::EffectsHandler::toggleEffect</definition>
        <argsstring>(const QString &amp;name)</argsstring>
        <name>toggleEffect</name>
        <qualifiedname>KWin::EffectsHandler::toggleEffect</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1063" column="23" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1158" bodyend="1165"/>
      </memberdef>
      <memberdef kind="slot" id="class_k_win_1_1_effects_handler_1a11e5d52fc3a6ca59ff571f20d219bad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE void</type>
        <definition>void KWin::EffectsHandler::unloadEffect</definition>
        <argsstring>(const QString &amp;name)</argsstring>
        <name>unloadEffect</name>
        <qualifiedname>KWin::EffectsHandler::unloadEffect</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1064" column="23" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1192" bodyend="1209"/>
      </memberdef>
      <memberdef kind="slot" id="class_k_win_1_1_effects_handler_1a9c0910a356943c986b07e4b0cfea4e59" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE bool</type>
        <definition>bool KWin::EffectsHandler::isEffectLoaded</definition>
        <argsstring>(const QString &amp;name) const</argsstring>
        <name>isEffectLoaded</name>
        <qualifiedname>KWin::EffectsHandler::isEffectLoaded</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1065" column="23" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1255" bodyend="1262"/>
      </memberdef>
      <memberdef kind="slot" id="class_k_win_1_1_effects_handler_1a0cf2cca491f1e6a8180a917d59d36b96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE bool</type>
        <definition>bool KWin::EffectsHandler::isEffectSupported</definition>
        <argsstring>(const QString &amp;name)</argsstring>
        <name>isEffectSupported</name>
        <qualifiedname>KWin::EffectsHandler::isEffectSupported</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1066" column="23" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1264" bodyend="1275"/>
      </memberdef>
      <memberdef kind="slot" id="class_k_win_1_1_effects_handler_1a8c590c5d30d4251519fffd228ca251a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE QList&lt; bool &gt;</type>
        <definition>QList&lt; bool &gt; KWin::EffectsHandler::areEffectsSupported</definition>
        <argsstring>(const QStringList &amp;names)</argsstring>
        <name>areEffectsSupported</name>
        <qualifiedname>KWin::EffectsHandler::areEffectsSupported</qualifiedname>
        <param>
          <type>const QStringList &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1067" column="24" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1277" bodyend="1287"/>
      </memberdef>
      <memberdef kind="slot" id="class_k_win_1_1_effects_handler_1a83ea4fb438c2cbbbde040e8cb03bf705" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE QString</type>
        <definition>QString KWin::EffectsHandler::supportInformation</definition>
        <argsstring>(const QString &amp;name) const</argsstring>
        <name>supportInformation</name>
        <qualifiedname>KWin::EffectsHandler::supportInformation</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1068" column="26" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1376" bodyend="1397"/>
      </memberdef>
      <memberdef kind="slot" id="class_k_win_1_1_effects_handler_1a557d7f7af833946dfb8cb2770ded8541" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE QString</type>
        <definition>QString KWin::EffectsHandler::debug</definition>
        <argsstring>(const QString &amp;name, const QString &amp;parameter=QString()) const</argsstring>
        <name>debug</name>
        <qualifiedname>KWin::EffectsHandler::debug</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>parameter</declname>
          <defval>QString()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1069" column="26" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1408" bodyend="1417"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a9917d33d0b1bcf131b7fd6bac9e85d3f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::effectsChanged</definition>
        <argsstring>()</argsstring>
        <name>effectsChanged</name>
        <qualifiedname>KWin::EffectsHandler::effectsChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1072" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1304" bodyend="1318"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a0949e36da2f02fdb23c37185cdbe3a5f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::setupWindowConnections</definition>
        <argsstring>(KWin::Window *window)</argsstring>
        <name>setupWindowConnections</name>
        <qualifiedname>KWin::EffectsHandler::setupWindowConnections</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">KWin::Window</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1073" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="334" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1ad8300908e943ff0bb7163230617f68d2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::registerPropertyType</definition>
        <argsstring>(long atom, bool reg)</argsstring>
        <name>registerPropertyType</name>
        <qualifiedname>KWin::EffectsHandler::registerPropertyType</qualifiedname>
        <param>
          <type>long</type>
          <declname>atom</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1075" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a36b0efbbbf0c50633286eb22f0759c0d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::destroyEffect</definition>
        <argsstring>(Effect *effect)</argsstring>
        <name>destroyEffect</name>
        <qualifiedname>KWin::EffectsHandler::destroyEffect</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> *</type>
          <declname>effect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1076" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1211" bodyend="1233"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effects_handler_1a54ff1538e8794a6f81f271a7ff0d75f6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectsHandler::reconfigureEffects</definition>
        <argsstring>()</argsstring>
        <name>reconfigureEffects</name>
        <qualifiedname>KWin::EffectsHandler::reconfigureEffects</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="1077" column="10" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1235" bodyend="1241"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Manager class that handles all the effects. </para>
    </briefdescription>
    <detaileddescription>
<para>This class creates <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> objects and calls it&apos;s appropriate methods.</para>
<para><ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> objects can call methods of this class to interact with the workspace, e.g. to activate or move a specific window, change current desktop or create a special input window to receive mouse and keyboard events. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>KWin::EffectsHandler</label>
        <link refid="class_k_win_1_1_effects_handler"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="17">
        <label>KWin::AbstractEffectLoader</label>
        <link refid="class_k_win_1_1_abstract_effect_loader"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>KWin::BrightnessDevice</label>
        <link refid="class_k_win_1_1_brightness_device"/>
      </node>
      <node id="10">
        <label>KWin::ColorDescription</label>
        <link refid="class_k_win_1_1_color_description"/>
        <childnode refid="10" relation="usage">
          <edgelabel>sRGB</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>KWin::Compositor</label>
        <link refid="class_k_win_1_1_compositor"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>s_compositor</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>KWin::Edid</label>
        <link refid="class_k_win_1_1_edid"/>
      </node>
      <node id="3">
        <label>KWin::Effect</label>
        <link refid="class_k_win_1_1_effect"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>KWin::EffectLoader</label>
        <link refid="class_k_win_1_1_effect_loader"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::EffectsHandler</label>
        <link refid="class_k_win_1_1_effects_handler"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>fullscreen_effect</edgelabel>
          <edgelabel>keyboard_grab_effect</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>m_compositor</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_scene</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_effectLoader</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>KWin::Output</label>
        <link refid="class_k_win_1_1_output"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_state</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_information</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_brightnessDevice</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>KWin::Output::Information</label>
        <link refid="struct_k_win_1_1_output_1_1_information"/>
        <childnode refid="12" relation="usage">
          <edgelabel>edid</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>panelOrientation</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>KWin::Output::State</label>
        <link refid="struct_k_win_1_1_output_1_1_state"/>
        <childnode refid="9" relation="usage">
          <edgelabel>manualTransform</edgelabel>
          <edgelabel>transform</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>colorDescription</edgelabel>
          <edgelabel>originalColorDescription</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>KWin::OutputTransform</label>
        <link refid="class_k_win_1_1_output_transform"/>
      </node>
      <node id="15">
        <label>KWin::RenderLayerDelegate</label>
        <link refid="class_k_win_1_1_render_layer_delegate"/>
      </node>
      <node id="6">
        <label>KWin::Scene</label>
        <link refid="class_k_win_1_1_scene"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>KWin::SceneDelegate</label>
        <link refid="class_k_win_1_1_scene_delegate"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>KWin::WorkspaceScene</label>
        <link refid="class_k_win_1_1_workspace_scene"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>painted_screen</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>painted_delegate</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/effect/effecthandler.h" line="112" column="1" bodyfile="kwin/src/effect/effecthandler.h" bodystart="113" bodyend="1111"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_effects_handler_1a3bfb75fe1af69602acddcbf07044875b" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>activateWindow</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ae776ded0800eff674090c7502486605f" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>activeEffects</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ae69935124b6ac51c1812398aa8c446f0" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>activeEffects</name></member>
      <member refid="class_k_win_1_1_effects_handler_1af480b35c69116a1becba5cdb45c44014" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>activeFullScreenEffect</name></member>
      <member refid="class_k_win_1_1_effects_handler_1af7e6be37b43602e76272b671cec0bb1b" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>activeFullScreenEffectChanged</name></member>
      <member refid="class_k_win_1_1_effects_handler_1aebd988f34fb170c9b1c5a6752ee695c1" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>activeScreen</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a8f9564215cafc6939e4172fa66bdb85b" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>activeScreen</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a73aa722f6c5ffec5e50555109dee09ab" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>activeWindow</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a43589bc557ae87f6603b8d42f893d036" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>activeWindow</name></member>
      <member refid="class_k_win_1_1_effects_handler_1af8d871c87ed14f414499776ee6f8cfc6" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>activityAdded</name></member>
      <member refid="class_k_win_1_1_effects_handler_1abcffea0410b087f0fc63b611495b4966" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>activityRemoved</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a424c34eb4c6c98d766f16159488465a2" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>addRepaint</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a5d9bc7b3c475d3244309997c8b9fcffd" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>addRepaint</name></member>
      <member refid="class_k_win_1_1_effects_handler_1afeb4b9d2789390de5a528acf50507787" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>addRepaint</name></member>
      <member refid="class_k_win_1_1_effects_handler_1af69d5e0fa0111198cd0206618bf2586a" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>addRepaint</name></member>
      <member refid="class_k_win_1_1_effects_handler_1af3f4b9a57fd81eabe5c19d6e9e4a76c6" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>addRepaintFull</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a1748cac7be8008e100751281c10c097a" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>animationsSupported</name></member>
      <member refid="class_k_win_1_1_effects_handler_1aec06e259fdd169f6fca3f531d742cdaa" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>animationTimeFactor</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a1f0b56fdf429b42e37987e5169dfd697" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>animationTimeFactor</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a8c590c5d30d4251519fffd228ca251a5" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>areEffectsSupported</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a37991a5d3c5176bc90e133e9df81bf51" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>blocksDirectScanout</name></member>
      <member refid="class_k_win_1_1_effects_handler_1af01ffad1f759c16e90fb35516964b5c5" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>buttons</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a79cc3c1ebfb23df5acb8233357b1ad8b" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>checkInputWindowEvent</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a9bffa1b30bf1a5a03b02673925c76b8e" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>checkInputWindowEvent</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ad7c5dbc6178025906beb67d0a2153250" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>clientArea</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a55551a567f8a12cb6daa48bc679dab03" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>clientArea</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a7e2364b352969429943966b4ebfb89cf" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>clientArea</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a7be83b2010b4c005672584cb89c4e879" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>closeTabBox</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a28610f54dfc904ebf6628a2e8cb6ca2d" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>colorPickerActive</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a261c926494b810a5d8bbfce225c54827" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>colorPickerActiveChanged</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a1517b585d33791a3e46492ae6d659584" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>compositing_type</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a53ad442150183d254eca227ddd5571e1" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>compositingType</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a87a49a5f918913876412e346eb3a1a56" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>compositingType</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ae57baacdc4a49cc4f1093c1e318a86cd" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>config</name></member>
      <member refid="class_k_win_1_1_effects_handler_1aab5633ab9152a3514d8c443f3c52e3f4" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>currentActivity</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a029f3fa131c03029a3a32989ad211be8" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>currentActivity</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ae74f59704706fe4ae364853a466513d3" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>currentActivityAboutToChange</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a2a62645ebf6d5fc075be76e5545da8f2" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>currentActivityChanged</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a722658571850786bb4516ae98247479f" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>currentDesktop</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ab2bc33163638728e6a51281b0e07bdcf" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>currentDesktop</name></member>
      <member refid="class_k_win_1_1_effects_handler_1aa15ea6a4a8dcc0c98956e093666d0b46" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>currentTabBoxWindow</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a8359adb3d939ac296524e0250b328483" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>currentTabBoxWindowList</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ad3fdde61a77c376e5618e4494ce274d9" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>cursorImage</name></member>
      <member refid="class_k_win_1_1_effects_handler_1af20aeb5fb6f87bf9bbaa52a97fd80478" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>cursorPos</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a6598ac6e4ad7dfc2c028514106806c12" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>cursorPos</name></member>
      <member refid="class_k_win_1_1_effects_handler_1aa92530fc11fbd4b12f8d3791b1ffb92c" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>cursorShapeChanged</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a557d7f7af833946dfb8cb2770ded8541" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>debug</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ad0affb062069cceead6205efe6a4f49c" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>decorationsHaveAlpha</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a39cd15fbba425ec1887b8dfe2735d557" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>decorationsHaveAlpha</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a5c0e09968cdaed9974cfa062f9db2bec" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>defineCursor</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a183eeeb7398e8595cad89a92eda8746b" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktopAbove</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a766f0b484b03e847d42bbe6513b65211" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktopAdded</name></member>
      <member refid="class_k_win_1_1_effects_handler_1af47f89b180a84636be495c610f95ad95" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktopAtCoords</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a2b9905c457461e7bb1c5be1114678e7d" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktopBelow</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ac71df72597202eed23f6211d8fa80c50" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktopChanged</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a2c7e78f36bc49937eb4de56521fcda5b" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktopChanging</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ade940098c549fce05980843a04d30414" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktopChangingCancelled</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a609ca6c612b03978a51add2d5a24642a" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktopCoords</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a18e5d37ec471fbad046660ecba2eb0ed" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktopGridCoords</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a5db11d2431e86ba3d2bbd29656dc2a92" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktopGridHeight</name></member>
      <member refid="class_k_win_1_1_effects_handler_1aee24c0866e5e7a3b623c507d46de72c2" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktopGridHeight</name></member>
      <member refid="class_k_win_1_1_effects_handler_1acd265f3c8b9f78c6291e6c2f73ea95a0" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktopGridHeightChanged</name></member>
      <member refid="class_k_win_1_1_effects_handler_1aa97258a5b11d2ca1443d57a42e17ee1f" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktopGridSize</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ab783e37c4b860809759d448ee87e3754" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktopGridSize</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a0e612c2b8c76eb5c101ab888b374640d" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktopGridSizeChanged</name></member>
      <member refid="class_k_win_1_1_effects_handler_1aa0a072eb188008f628b533b2db26f670" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktopGridWidth</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a8425aec549c668b897162b3e410bbb33" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktopGridWidth</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a99ce8955558745618a24aad250b7861a" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktopGridWidthChanged</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a3d4ee743ebb9adacc7866f3d915cc7ed" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktopName</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a649beb5237e8e56d972bec153ee5099d" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktopRemoved</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ae2c39f07cf91ab8c1e6fc7ec7528ed38" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktops</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a24078f73ece72e4825a50e47ada97e9f" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktops</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ad5ee6e38a7b9c70d11ee5e1720c82664" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktopToLeft</name></member>
      <member refid="class_k_win_1_1_effects_handler_1aa9bfb3d6996ed5f9b97678f6d3b7b036" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>desktopToRight</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a36b0efbbbf0c50633286eb22f0759c0d" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>destroyEffect</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a73310f2b58993037e25247ed54c54720" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>doneOpenGLContextCurrent</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a0e7042451513fdb2fa98c3f2b0caa473" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>drawWindow</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ac8649272bb0576cc72f2486439664efe" prot="private" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>Effect</name></member>
      <member refid="class_k_win_1_1_effects_handler_1abf08ae922efe0dea4102c158cebece79" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>effect_order</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a9917d33d0b1bcf131b7fd6bac9e85d3f" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>effectsChanged</name></member>
      <member refid="class_k_win_1_1_effects_handler_1abbeccbfc8813c73f1915fdd164969a28" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>EffectsHandler</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a1ef2138edc42fc77ec999f4ce147c52c" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>EffectsIterator</name></member>
      <member refid="class_k_win_1_1_effects_handler_1aa0761c03f3ceaab19268930cb3b12ffb" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>EffectsList</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a8b11dcce0b962be31d2db4a72ddae38d" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>findEffect</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a70e7ea2623c1ed2595d5cac76fa722d2" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>findScreen</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a9bb2a29e9d576f71add51d791d32050f" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>findScreen</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a186244bfb2efd0873286e4b81c8b9652" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>findWindow</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ad5e34a1d16be9d688b04364da2f1ef89" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>findWindow</name></member>
      <member refid="class_k_win_1_1_effects_handler_1aed2afd9e7c47abaf2b63385d4d3a1d65" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>findWindow</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a3696b73d3064b2cbb15043dfc314e5ec" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>findWindow</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a3eaef43498d3d1008491ed2716347576" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>fullscreen_effect</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a45004bb7f62e19a70efa112cd82f0e27" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>grabbedKeyboardEvent</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a71144931a2568c69935180b2ec096758" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>grabKeyboard</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a3aa7ef6f0231387000df1204e4db9ec4" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>hasActiveFullScreenEffect</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a081b07fa37f076c1d686ad4ac8709c2a" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>hasActiveFullScreenEffect</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ae45c8d2112db0ed5c84ba4b9cf66fd4b" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>hasActiveFullScreenEffectChanged</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a8cfa5fecc8e31e32c18fb5aed4862cc2" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>hasDecorationShadows</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a0a54647ffaaae7f98e91acfda2159098" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>hasKeyboardGrab</name></member>
      <member refid="class_k_win_1_1_effects_handler_1af1683f65536d052a2a3693ce62f4894b" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>hideCursor</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ad0420267c8d74bcd8f97ec49705ed68c" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>hideOnScreenMessage</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a41a696e4b5bc914e8ece8e0ab8f8ff8c" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>highlightWindows</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a6fe044ab2e6fc28262a8701c1f10933c" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>inputConfig</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a781ac041fcb37f38a48a2c8aae0efb60" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>inputPanel</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a2533f2c2458ffa1f20ae402a5f80af12" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>inputPanel</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ab5a661fdaf15efce0dd0d268cdb6441b" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>inputPanelChanged</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ace89088efcad8c8ad356f9ba1fc63f3d" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>isColorPickerActive</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a4864c3b356ffa23c8200e0109127f32b" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>isCursorHidden</name></member>
      <member refid="class_k_win_1_1_effects_handler_1af6acb0cb90259486c0bf484f6a53e65c" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>isEffectActive</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a9c0910a356943c986b07e4b0cfea4e59" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>isEffectLoaded</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a0cf2cca491f1e6a8180a917d59d36b96" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>isEffectSupported</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ad947da637dd6a96b8c8a5126b4561b43" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>isInputPanelOverlay</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a3b898a3f49f8720832df74c20e98abbe" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>isMouseInterception</name></member>
      <member refid="class_k_win_1_1_effects_handler_1aa8a3368f17c08de910a182b1666bf610" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>isOpenGLCompositing</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a6e12b706dea38499a8cd78e6d749149b" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>isScreenLocked</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ae1e1f59c67718d9a7ec2c97540d83568" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>keyboard_grab_effect</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a76ace5389ceeafea8b0c55f62b0c67f6" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>kwinOption</name></member>
      <member refid="class_k_win_1_1_effects_handler_1aa845c78cd710dadd98da204a3d935fab" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>listOfEffects</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a436c0cabd97bd6780fb1d8ecc7824643" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>listOfEffects</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a8c68577f9c9a9ad8b169dae1b77582ad" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>loaded_effects</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a3f48b5529766947c2342cf3f5f1899dc" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>loadedEffects</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a7b0c2a8ca6a07f8ac471c306fc0c2e57" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>loadedEffects</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a4ecab9172fb71c47df1e2beaa66ace9d" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>loadEffect</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a991cd17b9a365d9db4d68ddf3f36da0d" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>m_activeEffects</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a4291b830d7c09b02ed712c3d22fd6aa4" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>m_compositor</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a8f19e1636e6b98a6ab42c1d290fae672" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>m_currentDrawWindowIterator</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a33ef50504479d7de0455c75b8863006f" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>m_currentPaintScreenIterator</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a0ec7dd727c793c6e0e394070959e3058" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>m_currentPaintWindowIterator</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a4c4d65f746ac05b1e127af82df42941e" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>m_cursor</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a423b07a48fa38374dda8a22e827185af" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>m_effectLoader</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a316d3ca024679a2bf76dbdb5c39aabd8" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>m_grabbedMouseEffects</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a8977f4e67c8cea40eb0d5a56431db5e1" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>m_managedProperties</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ab85de72d7501ab7654b5f702441c5814" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>m_scene</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a0326732b7509687116673d3ea6c761b4" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>m_x11WindowPropertyNotify</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a5374d885eb19ec21dece4326968da3d4" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>makeOpenGLContextCurrent</name></member>
      <member refid="class_k_win_1_1_effects_handler_1aee134f5a82234293371ed3c7c73b1a4c" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>modifiers</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ace7df1c309d2c4a64e324d6a52c680ca" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>mouseChanged</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a60dcef8af17250d4968ae4ac2c512305" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>moveWindow</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a0eea36dec1b6beb304b1fb55ccdd1e47" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>OnScreenMessageHideFlag</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ade0f5183637ef9ef74750bed8203d0ac" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>openglContext</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a840615298f9f98325cd73661e5ca4abc" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>optionRollOverDesktops</name></member>
      <member refid="class_k_win_1_1_effects_handler_1adb18893112254b44f684fbd8e6bad9d1" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>optionRollOverDesktops</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a26fc71e0f799df4a72349d62a633f74d" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>paintScreen</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a70ffbe2f01d2265699d8043728059e53" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>paintWindow</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a47055a9e0d3d0c4798dbd946a2f90615" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>position</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a72ed97f0e53631a0820417c90e22766d" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>postPaintScreen</name></member>
      <member refid="class_k_win_1_1_effects_handler_1afb838563295d5c9726feec2b283c676a" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>postPaintWindow</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a8cf7297931ee6fa6c957eb3f464a2368" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>prePaintScreen</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ab302687d5b4e485443ac69334645ebae" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>prePaintWindow</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a229a83c757b3f0a6237cf88fef717a83" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>PropertyEffectMap</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a0f841f03b6d16457e2ee08c7def285d4" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>propertyNotify</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a3c55f9c15c69fffd19f3ae412ba4aa56" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>provides</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a3bc2b7f6fc0ec0be58ce9f3cca44480a" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>qmlEngine</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a5b7c3a34acbce4baed8657ebe04a04b6" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>readRootProperty</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a5dd867dd5c0ce8a24466faf1142dde61" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>reconfigure</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a71c9adc5dae2250dffdfb19ee06656dc" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>reconfigureEffect</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a54ff1538e8794a6f81f271a7ff0d75f6" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>reconfigureEffects</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a0265bfefab98f107c7e20c6acabe10ae" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>refTabBox</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a76a6b1b8e36d38a65552259e2d8562d6" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>registerAxisShortcut</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a56187bf9d8edc1aaaa72580f8de30fa5" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>registerPointerShortcut</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ad8300908e943ff0bb7163230617f68d2" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>registerPropertyType</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ad5992a5df8772934e70a869581b6d8b8" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>registerRealtimeTouchBorder</name></member>
      <member refid="class_k_win_1_1_effects_handler_1af4a142bebff417b0a3b9fce9eacaaa2e" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>registerTouchBorder</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a8e966f681a1a097f784bd149b5e07cf4" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>registerTouchpadPinchShortcut</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a9060b42c8a30efae7e2036088604aa4e" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>registerTouchpadSwipeShortcut</name></member>
      <member refid="class_k_win_1_1_effects_handler_1aae43eb00a3f8819c35423ff5f53b46d1" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>registerTouchscreenSwipeShortcut</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a2aaccce69b649b1bf7063009763dcb45" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>reloadEffect</name></member>
      <member refid="class_k_win_1_1_effects_handler_1aaef0446f00d6e9b13fc872acfc366ad3" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>renderOffscreenQuickView</name></member>
      <member refid="class_k_win_1_1_effects_handler_1af2aa9519f7c6cd192b2168cbf60a46f6" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>renderWindow</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a754a4033fda15bb19b0374f21b443bdb" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>reserveElectricBorder</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ae9387e5aced8ad8a45d661e7137ed4ce" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>scene</name></member>
      <member refid="class_k_win_1_1_effects_handler_1af4b34b4b53242b752b7673c6f9e0022c" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>scenePainter</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ac89554f16ab6a7eb23b4fcaf7ce3de84" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>screenAboutToLock</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a03c9bd1b03408dd71463f1bcc4c4ec82" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>screenAdded</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a6d9a281e11699dcac7ea4974f37dfb7f" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>screenAt</name></member>
      <member refid="class_k_win_1_1_effects_handler_1acadff1f45281ea7be68317114e653097" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>screenEdgeApproaching</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a1222f73b36c35bb0c3145a0f579aa8a7" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>screenLockingChanged</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a2aaa46342fafd4d0b09fb7497a0a7401" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>screenRemoved</name></member>
      <member refid="class_k_win_1_1_effects_handler_1aa103ea22c2fcc317e101867aa7d7a8e2" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>screens</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ab1027be6b6a2700ab61c62086b5e1a37" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>sessionState</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a5ea305c04226a1522542224e7428dc87" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>sessionState</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a42c5a8a1ef62297efe3dac1db56eae27" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>sessionStateChanged</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a5daccf0d58882b9c642fc4036cafea4f" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>setActiveFullScreenEffect</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a9edefda57a6a4f7548985ee40403cc2c" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>setCurrentDesktop</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a5a5e3987a203417f59fc4d0ba7d9d505" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>setElevatedWindow</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a7391524e5ebfd9ed180b74f1296a93d4" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>setShowingDesktop</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a6f82de3946c8b5db50a64dd674fb5557" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>setTabBoxWindow</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a0949e36da2f02fdb23c37185cdbe3a5f" prot="protected" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>setupWindowConnections</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a78167bfe2f963caba0142ac5842618a0" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>showCursor</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a001c56813196665854334eb774d765ad" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>showingDesktopChanged</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a4f3937264019252e88536a06b858a539" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>showOnScreenMessage</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a3eeaa4210c5eb168ded7ba0198fa0d32" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>stackingOrder</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a546b16a5901d103007f2c4886859e295" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>stackingOrder</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a6c05d0ac5ccfd76b8832cc77fb9085ac" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>stackingOrderChanged</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a40b73cfa1b04e9f5faa4f727f3d460aa" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>startInteractivePositionSelection</name></member>
      <member refid="class_k_win_1_1_effects_handler_1abefd9be111d4af51392ebbe1078840c2" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>startInteractiveWindowSelection</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a63a4e07ddffc088ca8f96b354ca8f172" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>startMouseInterception</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a723d140619af3ed4e4fcded38d610340" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>startPaint</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a3359485e3cc84cf6c1db8016fe8e76c0" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>startupAdded</name></member>
      <member refid="class_k_win_1_1_effects_handler_1af1a1064cff5b438b6cd3879bd36d8ca2" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>startupChanged</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a19b2c5561d7d3407d13fe4a675938e5c" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>startupRemoved</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a1516352991da7784110135a5119c602f" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>stopMouseInterception</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a83ea4fb438c2cbbbde040e8cb03bf705" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>supportInformation</name></member>
      <member refid="class_k_win_1_1_effects_handler_1afdd37c120cdf7956a779085df023df32" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>tabBoxAdded</name></member>
      <member refid="class_k_win_1_1_effects_handler_1aa237f092ce7ff9a89d9894f0f4a6a2e1" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>tabBoxClosed</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a509a05a602542a209519076059e50b40" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>tabBoxKeyEvent</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a4523d2f45730341547249aca8d60756e" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>tabBoxUpdated</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ac4f8c390e1dfb26ab441fec0bc911939" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>tabletPadButtonEvent</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a06027bd9d632346f3b8e24887f6b8fdf" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>tabletPadRingEvent</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a14f19b1a6d50f4ac08cf2fc257953cac" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>tabletPadStripEvent</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a184ed44a37205e87f4c599a80f6db488" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>tabletToolAxisEvent</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ad86d42db9f0ad751824df6ecae97f379" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>tabletToolButtonEvent</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ade6da8f7a9767de92a090d3004413429" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>tabletToolProximityEvent</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a630858c42fd10ae82eb4914c0a99fab2" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>tabletToolTipEvent</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a7cb6e8fe52d7163de7ee50bd0a61caf4" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>toggleEffect</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ad4c025e3c2d3c8b5da25e6d16ba6257f" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>TouchBorderCallback</name></member>
      <member refid="class_k_win_1_1_effects_handler_1af7191b0f8b8125d8a6d007902098e331" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>touchCancel</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ae0a9fa2171bba1e8ea5159031f048a9a" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>touchDown</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a861bdf3663501497a64d53c43a0118c7" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>touchMotion</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a9422927aa5b871de8b6634c6c5de3db0" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>touchUp</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a35bf262b8ab11f42ae6b2b1987142d70" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>ungrabKeyboard</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a8a7da3ec9a422779b8d3b83f92306327" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>unloadAllEffects</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a11e5d52fc3a6ca59ff571f20d219bad2" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>unloadEffect</name></member>
      <member refid="class_k_win_1_1_effects_handler_1af8fd9402ad8a3d2964947a724084fdad" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>unrefTabBox</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a5218f145be4674b91530ef574868230e" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>unregisterTouchBorder</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ad3aec41564b7d90550ff5517a650b6c0" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>unreserveElectricBorder</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a7f34a25364c7923d76eb5ad42a8c898f" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>virtualScreenGeometry</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ada3d563403409671443da24b4f17fc34" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>virtualScreenGeometry</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a7c1de7dad6da165bee9963bb8ea79765" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>virtualScreenGeometryChanged</name></member>
      <member refid="class_k_win_1_1_effects_handler_1aebb65bfab7dca8095ded3906b1bca282" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>virtualScreenSize</name></member>
      <member refid="class_k_win_1_1_effects_handler_1af4a7c87503e3d4fc3c595058e0e3ba28" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>virtualScreenSize</name></member>
      <member refid="class_k_win_1_1_effects_handler_1afe0cedc1f3130eba803aa1ff8474c0da" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>virtualScreenSizeChanged</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a0b127bfb56ec9dd3ae9f948fe455acc0" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>waylandDisplay</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a3ea23595f9c9f41f2ea0a63072e80852" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>windowActivated</name></member>
      <member refid="class_k_win_1_1_effects_handler_1af265803a52b130d505ab9f8f66a30eb0" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>windowAdded</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a25652fb190ebfb2d9c95b67eb9a3291d" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>windowClosed</name></member>
      <member refid="class_k_win_1_1_effects_handler_1af69a4db9f51dc3d75f03d108009dc07e" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>windowDataChanged</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a13c385b70a4984545ba1f8ed8204871c" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>windowDeleted</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a27bf6f965d0d342caa3b1bea82469493" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>windowToDesktops</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a9d851e6b387cee346faa33d9c84cc768" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>windowToScreen</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a400258bd3928481b30db16866914f249" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>workspaceHeight</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ae8dea3fe89cff9566677ee7bf741d944" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>workspaceHeight</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a23954c6a5181bfc401a3a916841a26b9" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>workspaceWidth</name></member>
      <member refid="class_k_win_1_1_effects_handler_1a96ddc385c684024766678eea6c74ee1a" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>workspaceWidth</name></member>
      <member refid="class_k_win_1_1_effects_handler_1ae89ac212c4a51c494c972c4cbb06a861" prot="public" virt="non-virtual"><scope>KWin::EffectsHandler</scope><name>~EffectsHandler</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
