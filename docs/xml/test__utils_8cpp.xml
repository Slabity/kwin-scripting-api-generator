<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="test__utils_8cpp" kind="file" language="C++">
    <compoundname>test_utils.cpp</compoundname>
    <includes local="no">config-kwin.h</includes>
    <includes local="no">sys/mman.h</includes>
    <includes local="no">unistd.h</includes>
    <includes refid="ramfile_8h" local="yes">utils/ramfile.h</includes>
    <includes local="no">QTest</includes>
    <includes local="yes">test_utils.moc</includes>
    <incdepgraph>
      <node id="1">
        <label>kwin/autotests/test_utils.cpp</label>
        <link refid="test__utils_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>utils/ramfile.h</label>
        <link refid="ramfile_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>QFlag</label>
      </node>
      <node id="7">
        <label>QTemporaryFile</label>
      </node>
      <node id="10">
        <label>QTest</label>
      </node>
      <node id="2">
        <label>config-kwin.h</label>
      </node>
      <node id="6">
        <label>kwin_export.h</label>
      </node>
      <node id="8">
        <label>memory</label>
      </node>
      <node id="3">
        <label>sys/mman.h</label>
      </node>
      <node id="11">
        <label>test_utils.moc</label>
      </node>
      <node id="4">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_test_utils" prot="public">TestUtils</innerclass>
    <sectiondef kind="var">
      <memberdef kind="variable" id="test__utils_8cpp_1a8fb2864e4fa623275b33349eea471c1a" prot="public" static="yes" mutable="no">
        <type>const QByteArray</type>
        <definition>const QByteArray s_testByteArray</definition>
        <argsstring></argsstring>
        <name>s_testByteArray</name>
        <initializer>= QByteArrayLiteral(&quot;Test Data \0\1\2\3&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/test_utils.cpp" line="30" column="25" bodyfile="kwin/autotests/test_utils.cpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__utils_8cpp_1a0e460abf260318ad86383b85a4af0cec" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char s_writeTestArray[]</definition>
        <argsstring>[]</argsstring>
        <name>s_writeTestArray</name>
        <initializer>= &quot;test&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/test_utils.cpp" line="31" column="19" bodyfile="kwin/autotests/test_utils.cpp" bodystart="31" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>KWin<sp/>-<sp/>the<sp/>KDE<sp/>window<sp/>manager</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>KDE<sp/>project.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2022<sp/>MBition<sp/>GmbH</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileContributor:<sp/>Kai<sp/>Uwe<sp/>Broulik<sp/>&lt;kai_uwe.broulik@mbition.io&gt;</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config-kwin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/mman.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ramfile_8h" kindref="compound">utils/ramfile.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QTest&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win" kindref="compound">KWin</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="class_test_utils" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_test_utils" kindref="compound">TestUtils</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QObject</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Q_SLOTS:</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRamFile();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testSealedRamFile();</highlight></codeline>
<codeline lineno="28"><highlight class="normal">};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QByteArray<sp/>s_testByteArray<sp/>=<sp/>QByteArrayLiteral(</highlight><highlight class="stringliteral">&quot;Test<sp/>Data<sp/>\0\1\2\3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>s_writeTestArray[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestUtils::testRamFile()</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_ram_file" kindref="compound">KWin::RamFile</ref><sp/>file(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/>s_testByteArray.constData(),<sp/>s_testByteArray.size());</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(file.isValid());</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(file.size(),<sp/>s_testByteArray.size());</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(file.fd()<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[20];</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>read(file.fd(),<sp/>buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>buf);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(num,<sp/>file.size());</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(qstrcmp(s_testByteArray.constData(),<sp/>buf),<sp/>0);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestUtils::testSealedRamFile()</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_MEMFD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>KWin::RamFile<sp/>file(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/>s_testByteArray.constData(),<sp/>s_testByteArray.size(),<sp/><ref refid="class_k_win_1_1_ram_file_1aa6220723e82ce49c7cf06248f28caf5aa131f7a8057d8bfd6b4e8e52694e36412" kindref="member">KWin::RamFile::Flag::SealWrite</ref>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(file.isValid());</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(file.effectiveFlags().testFlag(<ref refid="class_k_win_1_1_ram_file_1aa6220723e82ce49c7cf06248f28caf5aa131f7a8057d8bfd6b4e8e52694e36412" kindref="member">KWin::RamFile::Flag::SealWrite</ref>));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Writing<sp/>should<sp/>not<sp/>work.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>written<sp/>=<sp/>write(file.fd(),<sp/>s_writeTestArray,<sp/>strlen(s_writeTestArray));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(written,<sp/>-1);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cannot<sp/>use<sp/>MAP_SHARED<sp/>on<sp/>sealed<sp/>file<sp/>descriptor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data<sp/>=<sp/>mmap(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>file.size(),<sp/>PROT_WRITE,<sp/>MAP_SHARED,<sp/>file.fd(),<sp/>0);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(data,<sp/>MAP_FAILED);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>data<sp/>=<sp/>mmap(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>file.size(),<sp/>PROT_WRITE,<sp/>MAP_PRIVATE,<sp/>file.fd(),<sp/>0);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(data<sp/>!=<sp/>MAP_FAILED);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>QSKIP(</highlight><highlight class="stringliteral">&quot;Sealing<sp/>requires<sp/>memfd<sp/>suport.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><ref refid="onscreennotificationtest_8cpp_1a2f6feba20c73ec66058034e36bb8f880" kindref="member">QTEST_MAIN</ref>(<ref refid="class_test_utils" kindref="compound">TestUtils</ref>)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_utils.moc&quot;</highlight></codeline>
    </programlisting>
    <location file="kwin/autotests/test_utils.cpp"/>
  </compounddef>
</doxygen>
