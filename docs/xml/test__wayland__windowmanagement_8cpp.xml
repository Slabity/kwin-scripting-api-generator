<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="test__wayland__windowmanagement_8cpp" kind="file" language="C++">
    <compoundname>test_wayland_windowmanagement.cpp</compoundname>
    <includes local="no">QSignalSpy</includes>
    <includes local="no">QTest</includes>
    <includes refid="wayland_2compositor_8h" local="yes">wayland/compositor.h</includes>
    <includes refid="display_8h" local="yes">wayland/display.h</includes>
    <includes refid="plasmawindowmanagement_8h" local="yes">wayland/plasmawindowmanagement.h</includes>
    <includes refid="surface_8h" local="yes">wayland/surface.h</includes>
    <includes local="no">wayland-plasma-window-management-client-protocol.h</includes>
    <includes local="yes">KWayland/Client/compositor.h</includes>
    <includes local="yes">KWayland/Client/connection_thread.h</includes>
    <includes local="yes">KWayland/Client/event_queue.h</includes>
    <includes local="yes">KWayland/Client/plasmawindowmanagement.h</includes>
    <includes local="yes">KWayland/Client/region.h</includes>
    <includes local="yes">KWayland/Client/registry.h</includes>
    <includes local="yes">KWayland/Client/surface.h</includes>
    <includes local="yes">test_wayland_windowmanagement.moc</includes>
    <incdepgraph>
      <node id="1">
        <label>kwin/autotests/wayland/client/test_wayland_windowmanagement.cpp</label>
        <link refid="test__wayland__windowmanagement_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>core/colorspace.h</label>
        <link refid="colorspace_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>core/output.h</label>
        <link refid="core_2output_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>core/renderbackend.h</label>
        <link refid="renderbackend_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>renderloop.h</label>
        <link refid="renderloop_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>core/rendertarget.h</label>
        <link refid="rendertarget_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>effect/globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>utils/edid.h</label>
        <link refid="edid_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>utils/filedescriptor.h</label>
        <link refid="filedescriptor_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>wayland/compositor.h</label>
        <link refid="wayland_2compositor_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>wayland/display.h</label>
        <link refid="display_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>wayland/plasmawindowmanagement.h</label>
        <link refid="plasmawindowmanagement_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>surface.h</label>
        <link refid="surface_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>KWayland/Client/compositor.h</label>
      </node>
      <node id="37">
        <label>KWayland/Client/connection_thread.h</label>
      </node>
      <node id="38">
        <label>KWayland/Client/event_queue.h</label>
      </node>
      <node id="39">
        <label>KWayland/Client/plasmawindowmanagement.h</label>
      </node>
      <node id="40">
        <label>KWayland/Client/region.h</label>
      </node>
      <node id="41">
        <label>KWayland/Client/registry.h</label>
      </node>
      <node id="42">
        <label>KWayland/Client/surface.h</label>
      </node>
      <node id="21">
        <label>QByteArray</label>
      </node>
      <node id="15">
        <label>QCoreApplication</label>
      </node>
      <node id="24">
        <label>QDebug</label>
      </node>
      <node id="16">
        <label>QImage</label>
      </node>
      <node id="22">
        <label>QList</label>
      </node>
      <node id="9">
        <label>QMatrix4x4</label>
      </node>
      <node id="19">
        <label>QObject</label>
      </node>
      <node id="17">
        <label>QPoint</label>
      </node>
      <node id="30">
        <label>QPointer</label>
      </node>
      <node id="25">
        <label>QRect</label>
      </node>
      <node id="32">
        <label>QRegion</label>
      </node>
      <node id="2">
        <label>QSignalSpy</label>
      </node>
      <node id="23">
        <label>QSize</label>
      </node>
      <node id="3">
        <label>QTest</label>
      </node>
      <node id="26">
        <label>QUuid</label>
      </node>
      <node id="18">
        <label>QVariant</label>
      </node>
      <node id="10">
        <label>QVector2D</label>
      </node>
      <node id="14">
        <label>config-kwin.h</label>
      </node>
      <node id="5">
        <label>kwin_export.h</label>
      </node>
      <node id="31">
        <label>memory</label>
      </node>
      <node id="8">
        <label>optional</label>
      </node>
      <node id="43">
        <label>test_wayland_windowmanagement.moc</label>
      </node>
      <node id="35">
        <label>wayland-plasma-window-management-client-protocol.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_test_window_management" prot="public">TestWindowManagement</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="test__wayland__windowmanagement_8cpp_1a2b0354acbb150819d4a270829b9ec617" prot="public" static="no">
        <type>void(KWin::PlasmaWindowInterface::*</type>
        <definition>typedef void(KWin::PlasmaWindowInterface::* ServerWindowSignal) ()</definition>
        <argsstring>)()</argsstring>
        <name>ServerWindowSignal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/wayland/client/test_wayland_windowmanagement.cpp" line="24" column="9" bodyfile="kwin/autotests/wayland/client/test_wayland_windowmanagement.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="test__wayland__windowmanagement_8cpp_1aa20a0d2cc5f2f0947f454aa833d605bd" prot="public" static="no">
        <type>void(KWin::PlasmaWindowInterface::*</type>
        <definition>typedef void(KWin::PlasmaWindowInterface::* ServerWindowBooleanSignal) (bool)</definition>
        <argsstring>)(bool)</argsstring>
        <name>ServerWindowBooleanSignal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/wayland/client/test_wayland_windowmanagement.cpp" line="26" column="9" bodyfile="kwin/autotests/wayland/client/test_wayland_windowmanagement.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="test__wayland__windowmanagement_8cpp_1aeb722aa588895c954bd2479a87d4242b" prot="public" static="no">
        <type>void(KWayland::Client::PlasmaWindow::*</type>
        <definition>typedef void(KWayland::Client::PlasmaWindow::* ClientWindowVoidSetter) ()</definition>
        <argsstring>)()</argsstring>
        <name>ClientWindowVoidSetter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/wayland/client/test_wayland_windowmanagement.cpp" line="28" column="9" bodyfile="kwin/autotests/wayland/client/test_wayland_windowmanagement.cpp" bodystart="28" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="test__wayland__windowmanagement_8cpp_1a485d6ddd568caea0908934bfdb9fbadb" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString s_socketName</definition>
        <argsstring></argsstring>
        <name>s_socketName</name>
        <initializer>= QStringLiteral(&quot;kwayland-test-wayland-windowmanagement-0&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/wayland/client/test_wayland_windowmanagement.cpp" line="81" column="22" bodyfile="kwin/autotests/wayland/client/test_wayland_windowmanagement.cpp" bodystart="81" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2015<sp/>Marco<sp/>Martin<sp/>&lt;mart@kde.org&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>LGPL-2.1-only<sp/>OR<sp/>LGPL-3.0-only<sp/>OR<sp/>LicenseRef-KDE-Accepted-LGPL</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Qt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QSignalSpy&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QTest&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KWin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wayland_2compositor_8h" kindref="compound">wayland/compositor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="display_8h" kindref="compound">wayland/display.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="plasmawindowmanagement_8h" kindref="compound">wayland/plasmawindowmanagement.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="surface_8h" kindref="compound">wayland/surface.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wayland-plasma-window-management-client-protocol.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/compositor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/connection_thread.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/event_queue.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/plasmawindowmanagement.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/region.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/registry.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/surface.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="test__wayland__windowmanagement_8cpp_1a2b0354acbb150819d4a270829b9ec617" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<ref refid="class_k_win_1_1_plasma_window_interface" kindref="compound">KWin::PlasmaWindowInterface</ref>::*<ref refid="test__wayland__windowmanagement_8cpp_1a2b0354acbb150819d4a270829b9ec617" kindref="member">ServerWindowSignal</ref>)();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><ref refid="x11keyread_8cpp_1ac0925a94f4858115ad1f04be885ac3b3" kindref="member">Q_DECLARE_METATYPE</ref>(<ref refid="test__wayland__windowmanagement_8cpp_1a2b0354acbb150819d4a270829b9ec617" kindref="member">ServerWindowSignal</ref>)</highlight></codeline>
<codeline lineno="26" refid="test__wayland__windowmanagement_8cpp_1aa20a0d2cc5f2f0947f454aa833d605bd" refkind="member"><highlight class="normal">typedef<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(<ref refid="namespace_k_win" kindref="compound">KWin</ref>::PlasmaWindowInterface::*<ref refid="test__wayland__windowmanagement_8cpp_1aa20a0d2cc5f2f0947f454aa833d605bd" kindref="member">ServerWindowBooleanSignal</ref>)(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="x11keyread_8cpp_1ac0925a94f4858115ad1f04be885ac3b3" kindref="member">Q_DECLARE_METATYPE</ref>(<ref refid="test__wayland__windowmanagement_8cpp_1aa20a0d2cc5f2f0947f454aa833d605bd" kindref="member">ServerWindowBooleanSignal</ref>)</highlight></codeline>
<codeline lineno="28" refid="test__wayland__windowmanagement_8cpp_1aeb722aa588895c954bd2479a87d4242b" refkind="member"><highlight class="normal">typedef<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(<ref refid="namespace_k_wayland" kindref="compound">KWayland</ref>::<ref refid="class_client" kindref="compound">Client</ref>::PlasmaWindow::*<ref refid="test__wayland__windowmanagement_8cpp_1aeb722aa588895c954bd2479a87d4242b" kindref="member">ClientWindowVoidSetter</ref>)();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><ref refid="x11keyread_8cpp_1ac0925a94f4858115ad1f04be885ac3b3" kindref="member">Q_DECLARE_METATYPE</ref>(<ref refid="test__wayland__windowmanagement_8cpp_1aeb722aa588895c954bd2479a87d4242b" kindref="member">ClientWindowVoidSetter</ref>)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="class_test_window_management" refkind="compound"><highlight class="normal">class<sp/><ref refid="class_test_window_management_1a4527781d9df0614beda16ca3c7d23eed" kindref="member">TestWindowManagement</ref><sp/>:<sp/>public<sp/>QObject</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_test_window_management_1a4527781d9df0614beda16ca3c7d23eed" kindref="member">TestWindowManagement</ref>(QObject<sp/>*parent<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Q_SLOTS:</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testWindowTitle();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testReallyLongTitle();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testMinimizedGeometry();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testUseAfterUnmap();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testServerDelete();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testActiveWindowOnUnmapped();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testDeleteActiveWindow();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testCreateAfterUnmap();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRequests_data();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRequests();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRequestsBoolean_data();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRequestsBoolean();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testKeepAbove();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testKeepBelow();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testShowingDesktop();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRequestShowingDesktop_data();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRequestShowingDesktop();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testParentWindow();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testGeometry();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testIcon();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testPid();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testApplicationMenu();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanup();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_display" kindref="compound">KWin::Display</ref><sp/>*m_display;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_compositor_interface" kindref="compound">KWin::CompositorInterface</ref><sp/>*m_compositorInterface;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_plasma_window_management_interface" kindref="compound">KWin::PlasmaWindowManagementInterface</ref><sp/>*m_windowManagementInterface;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_plasma_window_interface" kindref="compound">KWin::PlasmaWindowInterface</ref><sp/>*m_windowInterface;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>QPointer&lt;KWin::SurfaceInterface&gt;<sp/>m_surfaceInterface;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::Surface<sp/>*m_surface<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::ConnectionThread<sp/>*m_connection;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::Compositor<sp/>*m_compositor;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::EventQueue<sp/>*m_queue;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::PlasmaWindowManagement<sp/>*m_windowManagement;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::PlasmaWindow<sp/>*m_window;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>QThread<sp/>*m_thread;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::Registry<sp/>*m_registry;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">};</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>s_socketName<sp/>=<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;kwayland-test-wayland-windowmanagement-0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="class_test_window_management_1a4527781d9df0614beda16ca3c7d23eed" refkind="member"><highlight class="normal"><ref refid="class_test_window_management_1a4527781d9df0614beda16ca3c7d23eed" kindref="member">TestWindowManagement::TestWindowManagement</ref>(QObject<sp/>*parent)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>QObject(parent)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_display(nullptr)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_compositorInterface(nullptr)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_connection(nullptr)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_compositor(nullptr)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_queue(nullptr)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_thread(nullptr)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::init()</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win" kindref="compound">KWin</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>qRegisterMetaType&lt;KWin::PlasmaWindowManagementInterface::ShowingDesktopState&gt;(</highlight><highlight class="stringliteral">&quot;ShowingDesktopState&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_display;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_display" kindref="compound">KWin::Display</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display-&gt;<ref refid="class_k_win_1_1_display_1aa4c4acfe47f745065df276fab792b431" kindref="member">addSocketName</ref>(s_socketName);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display-&gt;<ref refid="class_k_win_1_1_display_1af36443417f1832645373ce713cb226c7" kindref="member">start</ref>();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_display-&gt;<ref refid="class_k_win_1_1_display_1aa50d346a6be40bd7db06214c0350456a" kindref="member">isRunning</ref>());</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>connection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>KWayland::Client::ConnectionThread;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>connectedSpy(m_connection,<sp/>&amp;KWayland::Client::ConnectionThread::connected);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection-&gt;setSocketName(s_socketName);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>m_thread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QThread(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection-&gt;moveToThread(m_thread);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>m_thread-&gt;start();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection-&gt;initConnection();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(connectedSpy.wait());</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>m_queue<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>KWayland::Client::EventQueue(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!m_queue-&gt;isValid());</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>m_queue-&gt;setup(m_connection);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_queue-&gt;isValid());</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>m_registry<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>KWayland::Client::Registry(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>compositorSpy(m_registry,<sp/>&amp;KWayland::Client::Registry::compositorAnnounced);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowManagementSpy(m_registry,<sp/>&amp;KWayland::Client::Registry::plasmaWindowManagementAnnounced);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!m_registry-&gt;eventQueue());</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>m_registry-&gt;setEventQueue(m_queue);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_registry-&gt;eventQueue(),<sp/>m_queue);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>m_registry-&gt;create(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_registry-&gt;isValid());</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>m_registry-&gt;setup();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>m_compositorInterface<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_compositor_interface" kindref="compound">CompositorInterface</ref>(m_display,<sp/>m_display);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(compositorSpy.wait());</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>m_compositor<sp/>=<sp/>m_registry-&gt;createCompositor(compositorSpy.first().first().value&lt;quint32&gt;(),<sp/>compositorSpy.first().last().value&lt;quint32&gt;(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowManagementInterface<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_plasma_window_management_interface" kindref="compound">PlasmaWindowManagementInterface</ref>(m_display,<sp/>m_display);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(windowManagementSpy.wait());</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowManagement<sp/>=<sp/>m_registry-&gt;createPlasmaWindowManagement(windowManagementSpy.first().first().value&lt;quint32&gt;(),</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windowManagementSpy.first().last().value&lt;quint32&gt;(),</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowSpy(m_windowManagement,<sp/>&amp;KWayland::Client::PlasmaWindowManagement::windowCreated);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface<sp/>=<sp/>m_windowManagementInterface-&gt;<ref refid="class_k_win_1_1_plasma_window_management_interface_1a765c8b6b3715d0025176ce746cba7ec3" kindref="member">createWindow</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>QUuid::createUuid());</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;<ref refid="class_k_win_1_1_plasma_window_interface_1ab3bb5923033ca714ed8088c6224caadd" kindref="member">setPid</ref>(1337);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(windowSpy.wait());</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>m_window<sp/>=<sp/>windowSpy.first().first().value&lt;KWayland::Client::PlasmaWindow<sp/>*&gt;();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverSurfaceCreated(m_compositorInterface,<sp/>&amp;<ref refid="class_k_win_1_1_compositor_interface_1a4a560a885ed69d43af0c857331e25592" kindref="member">KWin::CompositorInterface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>m_surface<sp/>=<sp/>m_compositor-&gt;createSurface(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_surface);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>m_surfaceInterface<sp/>=<sp/>serverSurfaceCreated.first().first().value&lt;<ref refid="class_k_win_1_1_surface_interface" kindref="compound">KWin::SurfaceInterface</ref><sp/>*&gt;();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_surfaceInterface);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::testWindowTitle()</highlight></codeline>
<codeline lineno="161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;setTitle(QStringLiteral(</highlight><highlight class="stringliteral">&quot;Test<sp/>Title&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>titleSpy(m_window,<sp/>&amp;KWayland::Client::PlasmaWindow::titleChanged);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(titleSpy.wait());</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_window-&gt;title(),<sp/>QString::fromUtf8(</highlight><highlight class="stringliteral">&quot;Test<sp/>Title&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::testReallyLongTitle()</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>QString<sp/>title;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>title.fill(QLatin1Char(</highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">),<sp/>500000);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;setTitle(title);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>titleSpy(m_window,<sp/>&amp;KWayland::Client::PlasmaWindow::titleChanged);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(titleSpy.wait());</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_window-&gt;title().startsWith(</highlight><highlight class="stringliteral">&quot;t&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::testMinimizedGeometry()</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>m_window-&gt;setMinimizedGeometry(m_surface,<sp/>QRect(5,<sp/>10,<sp/>100,<sp/>200));</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>geometrySpy(m_windowInterface,<sp/>&amp;<ref refid="class_k_win_1_1_plasma_window_interface_1a2cf3d3adbc0b4191dff455ef47454ccd" kindref="member">KWin::PlasmaWindowInterface::minimizedGeometriesChanged</ref>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(geometrySpy.wait());</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_windowInterface-&gt;minimizedGeometries().values().first(),<sp/>QRect(5,<sp/>10,<sp/>100,<sp/>200));</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>m_window-&gt;unsetMinimizedGeometry(m_surface);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(geometrySpy.wait());</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_windowInterface-&gt;minimizedGeometries().isEmpty());</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::cleanup()</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_surface)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_surface;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_surface<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_compositor)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_compositor;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_compositor<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_queue)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_queue;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_queue<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_windowManagement)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_windowManagement;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_windowManagement<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_registry)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_registry;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_registry<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_thread)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_connection)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_connection-&gt;flush();</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_connection-&gt;deleteLater();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_thread-&gt;quit();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_thread-&gt;wait();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_thread;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_thread<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display-&gt;dispatchEvents();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_surfaceInterface.isNull());</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_display;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>these<sp/>are<sp/>the<sp/>children<sp/>of<sp/>the<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowManagementInterface<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::testUseAfterUnmap()</highlight></codeline>
<codeline lineno="244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>when<sp/>the<sp/>client<sp/>uses<sp/>a<sp/>window<sp/>after<sp/>it&apos;s<sp/>unmapped,<sp/>things<sp/>don&apos;t<sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>unmappedSpy(m_window,<sp/>&amp;KWayland::Client::PlasmaWindow::unmapped);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>destroyedSpy(m_window,<sp/>&amp;QObject::destroyed);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;deleteLater();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>m_window-&gt;requestClose();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(unmappedSpy.wait());</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(destroyedSpy.wait());</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>m_window<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::testServerDelete()</highlight></codeline>
<codeline lineno="257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>unmappedSpy(m_window,<sp/>&amp;KWayland::Client::PlasmaWindow::unmapped);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>destroyedSpy(m_window,<sp/>&amp;QObject::destroyed);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_windowInterface;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(unmappedSpy.wait());</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(destroyedSpy.wait());</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>m_window<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::testActiveWindowOnUnmapped()</highlight></codeline>
<codeline lineno="268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>unmapping<sp/>the<sp/>active<sp/>window<sp/>changes<sp/>the<sp/>active<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>make<sp/>the<sp/>window<sp/>active</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!m_windowManagement-&gt;activeWindow());</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!m_window-&gt;isActive());</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>activeWindowChangedSpy(m_windowManagement,<sp/>&amp;KWayland::Client::PlasmaWindowManagement::activeWindowChanged);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;setActive(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(activeWindowChangedSpy.wait());</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_windowManagement-&gt;activeWindow(),<sp/>m_window);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_window-&gt;isActive());</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>unmap<sp/>should<sp/>change<sp/>the<sp/>active<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>destroyedSpy(m_window,<sp/>&amp;QObject::destroyed);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverDestroyedSpy(m_windowInterface,<sp/>&amp;QObject::destroyed);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_windowInterface;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(activeWindowChangedSpy.wait());</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!m_windowManagement-&gt;activeWindow());</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::testDeleteActiveWindow()</highlight></codeline>
<codeline lineno="289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>deleting<sp/>the<sp/>active<sp/>window<sp/>on<sp/>client<sp/>side<sp/>changes<sp/>the<sp/>active<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>make<sp/>the<sp/>window<sp/>active</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!m_windowManagement-&gt;activeWindow());</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!m_window-&gt;isActive());</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>activeWindowChangedSpy(m_windowManagement,<sp/>&amp;KWayland::Client::PlasmaWindowManagement::activeWindowChanged);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;setActive(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(activeWindowChangedSpy.wait());</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(activeWindowChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_windowManagement-&gt;activeWindow(),<sp/>m_window);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_window-&gt;isActive());</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>the<sp/>client<sp/>side<sp/>window<sp/>-<sp/>that&apos;s<sp/>semantically<sp/>kind<sp/>of<sp/>wrong,<sp/>but<sp/>shouldn&apos;t<sp/>make<sp/>our<sp/>code<sp/>crash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_window;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>m_window<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(activeWindowChangedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!m_windowManagement-&gt;activeWindow());</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::testCreateAfterUnmap()</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>we<sp/>don&apos;t<sp/>get<sp/>a<sp/>protocol<sp/>error<sp/>on<sp/>client<sp/>side<sp/>when<sp/>creating<sp/>an<sp/>already<sp/>unmapped<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_windowManagement-&gt;children().count(),<sp/>1);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowAddedSpy(m_windowManagement,<sp/>&amp;KWayland::Client::PlasmaWindowManagement::windowCreated);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>and<sp/>unmap<sp/>in<sp/>one<sp/>go</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>client<sp/>will<sp/>first<sp/>handle<sp/>the<sp/>create,<sp/>the<sp/>unmap<sp/>will<sp/>be<sp/>sent<sp/>once<sp/>the<sp/>server<sp/>side<sp/>is<sp/>bound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>serverWindow<sp/>=<sp/>m_windowManagementInterface-&gt;createWindow(m_windowManagementInterface,<sp/>QUuid::createUuid());</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>serverWindow;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_windowManagementInterface-&gt;children().count(),<sp/>0);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>windowAddedSpy.wait();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">KWayland::Client::PlasmaWindow<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_windowManagement-&gt;children().last());</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>this<sp/>is<sp/>not<sp/>yet<sp/>on<sp/>the<sp/>server,<sp/>on<sp/>the<sp/>server<sp/>it<sp/>will<sp/>be<sp/>after<sp/>next<sp/>roundtrip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>we<sp/>can<sp/>trigger<sp/>by<sp/>waiting<sp/>for<sp/>destroy<sp/>of<sp/>the<sp/>newly<sp/>created<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>why<sp/>destroy?<sp/>Because<sp/>we<sp/>will<sp/>get<sp/>the<sp/>unmap<sp/>which<sp/>triggers<sp/>a<sp/>destroy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>clientDestroyedSpy(window,<sp/>&amp;QObject::destroyed);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(clientDestroyedSpy.wait());</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>any<sp/>wrappers<sp/>created<sp/>for<sp/>our<sp/>temporary<sp/>window<sp/>are<sp/>now<sp/>gone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_windowManagement-&gt;children().count(),<sp/>1);</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::testRequests_data()</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;ServerWindowSignal&gt;(</highlight><highlight class="stringliteral">&quot;changedSignal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;ClientWindowVoidSetter&gt;(</highlight><highlight class="stringliteral">&quot;requester&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;close&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>&amp;PlasmaWindowInterface::closeRequested<sp/>&lt;&lt;<sp/>&amp;KWayland::Client::PlasmaWindow::requestClose;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;move&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>&amp;PlasmaWindowInterface::moveRequested<sp/>&lt;&lt;<sp/>&amp;KWayland::Client::PlasmaWindow::requestMove;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;resize&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>&amp;PlasmaWindowInterface::resizeRequested<sp/>&lt;&lt;<sp/>&amp;KWayland::Client::PlasmaWindow::requestResize;</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::testRequests()</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>case<sp/>verifies<sp/>all<sp/>the<sp/>different<sp/>requests<sp/>on<sp/>a<sp/>PlasmaWindow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(<ref refid="test__wayland__windowmanagement_8cpp_1a2b0354acbb150819d4a270829b9ec617" kindref="member">ServerWindowSignal</ref>,<sp/>changedSignal);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>requestSpy(m_windowInterface,<sp/>changedSignal);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(<ref refid="test__wayland__windowmanagement_8cpp_1aeb722aa588895c954bd2479a87d4242b" kindref="member">ClientWindowVoidSetter</ref>,<sp/>requester);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>(m_window-&gt;*(requester))();</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(requestSpy.wait());</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::testRequestsBoolean_data()</highlight></codeline>
<codeline lineno="355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;ServerWindowBooleanSignal&gt;(</highlight><highlight class="stringliteral">&quot;changedSignal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;int&gt;(</highlight><highlight class="stringliteral">&quot;flag&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;activate&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>&amp;PlasmaWindowInterface::activeRequested<sp/>&lt;&lt;<sp/>int(ORG_KDE_PLASMA_WINDOW_MANAGEMENT_STATE_ACTIVE);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;minimized&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>&amp;PlasmaWindowInterface::minimizedRequested<sp/>&lt;&lt;<sp/>int(ORG_KDE_PLASMA_WINDOW_MANAGEMENT_STATE_MINIMIZED);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;maximized&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>&amp;PlasmaWindowInterface::maximizedRequested<sp/>&lt;&lt;<sp/>int(ORG_KDE_PLASMA_WINDOW_MANAGEMENT_STATE_MAXIMIZED);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;fullscreen&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>&amp;PlasmaWindowInterface::fullscreenRequested<sp/>&lt;&lt;<sp/>int(ORG_KDE_PLASMA_WINDOW_MANAGEMENT_STATE_FULLSCREEN);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;keepAbove&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>&amp;PlasmaWindowInterface::keepAboveRequested<sp/>&lt;&lt;<sp/>int(ORG_KDE_PLASMA_WINDOW_MANAGEMENT_STATE_KEEP_ABOVE);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;keepBelow&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>&amp;PlasmaWindowInterface::keepBelowRequested<sp/>&lt;&lt;<sp/>int(ORG_KDE_PLASMA_WINDOW_MANAGEMENT_STATE_KEEP_BELOW);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;demandsAttention&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>&amp;PlasmaWindowInterface::demandsAttentionRequested<sp/>&lt;&lt;<sp/>int(ORG_KDE_PLASMA_WINDOW_MANAGEMENT_STATE_DEMANDS_ATTENTION);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;closeable&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>&amp;PlasmaWindowInterface::closeableRequested<sp/>&lt;&lt;<sp/>int(ORG_KDE_PLASMA_WINDOW_MANAGEMENT_STATE_CLOSEABLE);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;minimizable&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>&amp;PlasmaWindowInterface::minimizeableRequested<sp/>&lt;&lt;<sp/>int(ORG_KDE_PLASMA_WINDOW_MANAGEMENT_STATE_MINIMIZABLE);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;maximizable&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>&amp;PlasmaWindowInterface::maximizeableRequested<sp/>&lt;&lt;<sp/>int(ORG_KDE_PLASMA_WINDOW_MANAGEMENT_STATE_MAXIMIZABLE);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;fullscreenable&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>&amp;PlasmaWindowInterface::fullscreenableRequested<sp/>&lt;&lt;<sp/>int(ORG_KDE_PLASMA_WINDOW_MANAGEMENT_STATE_FULLSCREENABLE);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;skiptaskbar&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>&amp;PlasmaWindowInterface::skipTaskbarRequested<sp/>&lt;&lt;<sp/>int(ORG_KDE_PLASMA_WINDOW_MANAGEMENT_STATE_SKIPTASKBAR);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;skipSwitcher&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>&amp;PlasmaWindowInterface::skipSwitcherRequested<sp/>&lt;&lt;<sp/>int(ORG_KDE_PLASMA_WINDOW_MANAGEMENT_STATE_SKIPSWITCHER);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;shadeable&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>&amp;PlasmaWindowInterface::shadeableRequested<sp/>&lt;&lt;<sp/>int(ORG_KDE_PLASMA_WINDOW_MANAGEMENT_STATE_SHADEABLE);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;shaded&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>&amp;PlasmaWindowInterface::shadedRequested<sp/>&lt;&lt;<sp/>int(ORG_KDE_PLASMA_WINDOW_MANAGEMENT_STATE_SHADED);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;movable&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>&amp;PlasmaWindowInterface::movableRequested<sp/>&lt;&lt;<sp/>int(ORG_KDE_PLASMA_WINDOW_MANAGEMENT_STATE_MOVABLE);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;resizable&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>&amp;PlasmaWindowInterface::resizableRequested<sp/>&lt;&lt;<sp/>int(ORG_KDE_PLASMA_WINDOW_MANAGEMENT_STATE_RESIZABLE);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;virtualDesktopChangeable&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>&amp;PlasmaWindowInterface::virtualDesktopChangeableRequested</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>int(ORG_KDE_PLASMA_WINDOW_MANAGEMENT_STATE_VIRTUAL_DESKTOP_CHANGEABLE);</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::testRequestsBoolean()</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>case<sp/>verifies<sp/>all<sp/>the<sp/>different<sp/>requests<sp/>on<sp/>a<sp/>PlasmaWindow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(<ref refid="test__wayland__windowmanagement_8cpp_1aa20a0d2cc5f2f0947f454aa833d605bd" kindref="member">ServerWindowBooleanSignal</ref>,<sp/>changedSignal);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>requestSpy(m_windowInterface,<sp/>changedSignal);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>flag);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>org_kde_plasma_window_set_state(*m_window,<sp/>flag,<sp/>flag);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(requestSpy.wait());</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(requestSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(requestSpy.first().first().toBool(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>org_kde_plasma_window_set_state(*m_window,<sp/>flag,<sp/>0);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(requestSpy.wait());</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(requestSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(requestSpy.last().first().toBool(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::testShowingDesktop()</highlight></codeline>
<codeline lineno="398"><highlight class="normal">{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>setting<sp/>the<sp/>showing<sp/>desktop<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!m_windowManagement-&gt;isShowingDesktop());</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>showingDesktopChangedSpy(m_windowManagement,<sp/>&amp;KWayland::Client::PlasmaWindowManagement::showingDesktopChanged);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowManagementInterface-&gt;setShowingDesktopState(PlasmaWindowManagementInterface::ShowingDesktopState::Enabled);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(showingDesktopChangedSpy.wait());</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(showingDesktopChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(showingDesktopChangedSpy.first().first().toBool(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_windowManagement-&gt;isShowingDesktop());</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setting<sp/>to<sp/>same<sp/>should<sp/>not<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowManagementInterface-&gt;setShowingDesktopState(PlasmaWindowManagementInterface::ShowingDesktopState::Enabled);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!showingDesktopChangedSpy.wait(100));</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(showingDesktopChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setting<sp/>to<sp/>other<sp/>state<sp/>should<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowManagementInterface-&gt;setShowingDesktopState(PlasmaWindowManagementInterface::ShowingDesktopState::Disabled);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(showingDesktopChangedSpy.wait());</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(showingDesktopChangedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(showingDesktopChangedSpy.first().first().toBool(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(showingDesktopChangedSpy.last().first().toBool(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!m_windowManagement-&gt;isShowingDesktop());</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::testRequestShowingDesktop_data()</highlight></codeline>
<codeline lineno="422"><highlight class="normal">{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;bool&gt;(</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;PlasmaWindowManagementInterface::ShowingDesktopState&gt;(</highlight><highlight class="stringliteral">&quot;expectedValue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;enable&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>PlasmaWindowManagementInterface::ShowingDesktopState::Enabled;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;disable&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>PlasmaWindowManagementInterface::ShowingDesktopState::Disabled;</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::testRequestShowingDesktop()</highlight></codeline>
<codeline lineno="432"><highlight class="normal">{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>requesting<sp/>show<sp/>desktop<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>requestSpy(m_windowManagementInterface,<sp/>&amp;PlasmaWindowManagementInterface::requestChangeShowingDesktop);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowManagement-&gt;setShowingDesktop(value);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(requestSpy.wait());</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(requestSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>QTEST(requestSpy.first().first().value&lt;PlasmaWindowManagementInterface::ShowingDesktopState&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;expectedValue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::testKeepAbove()</highlight></codeline>
<codeline lineno="444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>setting<sp/>the<sp/>keep<sp/>above<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!m_window-&gt;isKeepAbove());</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>keepAboveChangedSpy(m_window,<sp/>&amp;KWayland::Client::PlasmaWindow::keepAboveChanged);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;setKeepAbove(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(keepAboveChangedSpy.wait());</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(keepAboveChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_window-&gt;isKeepAbove());</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setting<sp/>to<sp/>same<sp/>should<sp/>not<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;setKeepAbove(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!keepAboveChangedSpy.wait(100));</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(keepAboveChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setting<sp/>to<sp/>other<sp/>state<sp/>should<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;setKeepAbove(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(keepAboveChangedSpy.wait());</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(keepAboveChangedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!m_window-&gt;isKeepAbove());</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::testKeepBelow()</highlight></codeline>
<codeline lineno="465"><highlight class="normal">{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>setting<sp/>the<sp/>keep<sp/>below<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!m_window-&gt;isKeepBelow());</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>keepBelowChangedSpy(m_window,<sp/>&amp;KWayland::Client::PlasmaWindow::keepBelowChanged);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;setKeepBelow(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(keepBelowChangedSpy.wait());</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(keepBelowChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_window-&gt;isKeepBelow());</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setting<sp/>to<sp/>same<sp/>should<sp/>not<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;setKeepBelow(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!keepBelowChangedSpy.wait(100));</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(keepBelowChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setting<sp/>to<sp/>other<sp/>state<sp/>should<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;setKeepBelow(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(keepBelowChangedSpy.wait());</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(keepBelowChangedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!m_window-&gt;isKeepBelow());</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::testParentWindow()</highlight></codeline>
<codeline lineno="486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>the<sp/>functionality<sp/>of<sp/>ParentWindows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_windowManagement-&gt;windows().count(),<sp/>1);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parentWindow<sp/>=<sp/>m_windowManagement-&gt;windows().first();</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parentWindow);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parentWindow-&gt;parentWindow().isNull());</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>let&apos;s<sp/>create<sp/>a<sp/>second<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowAddedSpy(m_windowManagement,<sp/>&amp;KWayland::Client::PlasmaWindowManagement::windowCreated);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWin::PlasmaWindowInterface&gt;<sp/>serverTransient(m_windowManagementInterface-&gt;createWindow(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>QUuid::createUuid()));</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>serverTransient-&gt;setParentWindow(m_windowInterface);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(windowAddedSpy.wait());</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>transient<sp/>=<sp/>windowAddedSpy.first().first().value&lt;KWayland::Client::PlasmaWindow<sp/>*&gt;();</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(transient-&gt;parentWindow().data(),<sp/>parentWindow);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let&apos;s<sp/>unset<sp/>the<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>parentWindowChangedSpy(transient,<sp/>&amp;KWayland::Client::PlasmaWindow::parentWindowChanged);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>serverTransient-&gt;setParentWindow(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parentWindowChangedSpy.wait());</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(transient-&gt;parentWindow().isNull());</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>set<sp/>it<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>serverTransient-&gt;setParentWindow(m_windowInterface);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parentWindowChangedSpy.wait());</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(transient-&gt;parentWindow().data(),<sp/>parentWindow);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>let&apos;s<sp/>try<sp/>to<sp/>unmap<sp/>the<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;deleteLater();</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>m_window<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parentWindowChangedSpy.wait());</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(transient-&gt;parentWindow().isNull());</highlight></codeline>
<codeline lineno="518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::testGeometry()</highlight></codeline>
<codeline lineno="521"><highlight class="normal">{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_window);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_window-&gt;geometry(),<sp/>QRect());</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowGeometryChangedSpy(m_window,<sp/>&amp;KWayland::Client::PlasmaWindow::geometryChanged);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;setGeometry(QRect(20,<sp/>-10,<sp/>30,<sp/>40));</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(windowGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_window-&gt;geometry(),<sp/>QRect(20,<sp/>-10,<sp/>30,<sp/>40));</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setting<sp/>an<sp/>empty<sp/>geometry<sp/>should<sp/>not<sp/>be<sp/>sent<sp/>to<sp/>the<sp/>client</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;setGeometry(QRect());</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!windowGeometryChangedSpy.wait(10));</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setting<sp/>to<sp/>the<sp/>geometry<sp/>which<sp/>the<sp/>client<sp/>still<sp/>has<sp/>should<sp/>not<sp/>trigger<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;setGeometry(QRect(20,<sp/>-10,<sp/>30,<sp/>40));</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!windowGeometryChangedSpy.wait(10));</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setting<sp/>another<sp/>geometry<sp/>should<sp/>work,<sp/>though</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;setGeometry(QRect(0,<sp/>0,<sp/>35,<sp/>45));</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(windowGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(windowGeometryChangedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_window-&gt;geometry(),<sp/>QRect(0,<sp/>0,<sp/>35,<sp/>45));</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let&apos;s<sp/>bind<sp/>a<sp/>second<sp/>PlasmaWindowManagement<sp/>to<sp/>verify<sp/>the<sp/>initial<sp/>setting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::PlasmaWindowManagement&gt;<sp/>pm(</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_registry-&gt;createPlasmaWindowManagement(m_registry-&gt;interface(KWayland::Client::Registry::Interface::PlasmaWindowManagement).name,</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_registry-&gt;interface(KWayland::Client::Registry::Interface::PlasmaWindowManagement).version));</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(pm<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowAddedSpy(pm.get(),<sp/>&amp;KWayland::Client::PlasmaWindowManagement::windowCreated);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(windowAddedSpy.wait());</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/>pm-&gt;windows().first();</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;geometry(),<sp/>QRect(0,<sp/>0,<sp/>35,<sp/>45));</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::testIcon()</highlight></codeline>
<codeline lineno="552"><highlight class="normal">{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initially,<sp/>there<sp/>shouldn&apos;t<sp/>be<sp/>any<sp/>icon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>iconChangedSpy(m_window,<sp/>&amp;KWayland::Client::PlasmaWindow::iconChanged);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_window-&gt;icon().isNull());</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>icon<sp/>with<sp/>a<sp/>pixmap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>p(32,<sp/>32,<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>p.fill(Qt::red);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QIcon<sp/>dummyIcon(QPixmap::fromImage(p));</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;setIcon(dummyIcon);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(iconChangedSpy.wait());</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(iconChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_window-&gt;icon().pixmap(32,<sp/>32),<sp/>dummyIcon.pixmap(32,<sp/>32));</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let&apos;s<sp/>set<sp/>a<sp/>themed<sp/>icon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;setIcon(QIcon::fromTheme(QStringLiteral(</highlight><highlight class="stringliteral">&quot;wayland&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(iconChangedSpy.wait());</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(iconChangedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!QIcon::hasThemeIcon(QStringLiteral(</highlight><highlight class="stringliteral">&quot;wayland&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QEXPECT_FAIL(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>wayland<sp/>icon&quot;</highlight><highlight class="normal">,<sp/>Continue);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_window-&gt;icon().name(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;wayland&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::testPid()</highlight></codeline>
<codeline lineno="577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_window);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_window-&gt;pid()<sp/>==<sp/>1337);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>server<sp/>not<sp/>setting<sp/>a<sp/>PID<sp/>for<sp/>whatever<sp/>reason</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWin::PlasmaWindowInterface&gt;<sp/>newWindowInterface(m_windowManagementInterface-&gt;createWindow(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>QUuid::createUuid()));</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowSpy(m_windowManagement,<sp/>&amp;KWayland::Client::PlasmaWindowManagement::windowCreated);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(windowSpy.wait());</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::PlasmaWindow&gt;<sp/>newWindow(windowSpy.first().first().value&lt;KWayland::Client::PlasmaWindow<sp/>*&gt;());</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(newWindow);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(newWindow-&gt;pid()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestWindowManagement::testApplicationMenu()</highlight></codeline>
<codeline lineno="591"><highlight class="normal">{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>serviceName<sp/>=<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;org.kde.foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>objectPath<sp/>=<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;/org/kde/bar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;setApplicationMenuPaths(serviceName,<sp/>objectPath);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>applicationMenuChangedSpy(m_window,<sp/>&amp;KWayland::Client::PlasmaWindow::applicationMenuChanged);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(applicationMenuChangedSpy.wait());</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_window-&gt;applicationMenuServiceName(),<sp/>serviceName);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_window-&gt;applicationMenuObjectPath(),<sp/>objectPath);</highlight></codeline>
<codeline lineno="602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><ref refid="onscreennotificationtest_8cpp_1a2f6feba20c73ec66058034e36bb8f880" kindref="member">QTEST_MAIN</ref>(<ref refid="class_test_window_management" kindref="compound">TestWindowManagement</ref>)</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_wayland_windowmanagement.moc&quot;</highlight></codeline>
    </programlisting>
    <location file="kwin/autotests/wayland/client/test_wayland_windowmanagement.cpp"/>
  </compounddef>
</doxygen>
