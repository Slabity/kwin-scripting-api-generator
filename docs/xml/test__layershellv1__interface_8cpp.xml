<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="test__layershellv1__interface_8cpp" kind="file" language="C++">
    <compoundname>test_layershellv1_interface.cpp</compoundname>
    <includes local="no">QSignalSpy</includes>
    <includes local="no">QTest</includes>
    <includes local="no">QThread</includes>
    <includes refid="wayland_2compositor_8h" local="yes">wayland/compositor.h</includes>
    <includes refid="display_8h" local="yes">wayland/display.h</includes>
    <includes refid="layershell__v1_8h" local="yes">wayland/layershell_v1.h</includes>
    <includes refid="surface_8h" local="yes">wayland/surface.h</includes>
    <includes refid="xdgshell_8h" local="yes">wayland/xdgshell.h</includes>
    <includes local="yes">KWayland/Client/compositor.h</includes>
    <includes local="yes">KWayland/Client/connection_thread.h</includes>
    <includes local="yes">KWayland/Client/event_queue.h</includes>
    <includes local="yes">KWayland/Client/registry.h</includes>
    <includes local="yes">KWayland/Client/surface.h</includes>
    <includes local="yes">qwayland-wlr-layer-shell-unstable-v1.h</includes>
    <includes local="yes">qwayland-xdg-shell.h</includes>
    <includes local="yes">test_layershellv1_interface.moc</includes>
    <incdepgraph>
      <node id="1">
        <label>kwin/autotests/wayland/server/test_layershellv1_interface.cpp</label>
        <link refid="test__layershellv1__interface_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>core/colorspace.h</label>
        <link refid="colorspace_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>core/output.h</label>
        <link refid="core_2output_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>core/renderbackend.h</label>
        <link refid="renderbackend_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>renderloop.h</label>
        <link refid="renderloop_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>core/rendertarget.h</label>
        <link refid="rendertarget_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>effect/globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>utils/edid.h</label>
        <link refid="edid_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>utils/filedescriptor.h</label>
        <link refid="filedescriptor_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>wayland/compositor.h</label>
        <link refid="wayland_2compositor_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>wayland/display.h</label>
        <link refid="display_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>wayland/layershell_v1.h</label>
        <link refid="layershell__v1_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>surface.h</label>
        <link refid="surface_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>wayland/xdgshell.h</label>
        <link refid="xdgshell_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>KWayland/Client/compositor.h</label>
      </node>
      <node id="41">
        <label>KWayland/Client/connection_thread.h</label>
      </node>
      <node id="42">
        <label>KWayland/Client/event_queue.h</label>
      </node>
      <node id="43">
        <label>KWayland/Client/registry.h</label>
      </node>
      <node id="44">
        <label>KWayland/Client/surface.h</label>
      </node>
      <node id="22">
        <label>QByteArray</label>
      </node>
      <node id="16">
        <label>QCoreApplication</label>
      </node>
      <node id="25">
        <label>QDebug</label>
      </node>
      <node id="17">
        <label>QImage</label>
      </node>
      <node id="23">
        <label>QList</label>
      </node>
      <node id="36">
        <label>QMargins</label>
      </node>
      <node id="10">
        <label>QMatrix4x4</label>
      </node>
      <node id="20">
        <label>QObject</label>
      </node>
      <node id="18">
        <label>QPoint</label>
      </node>
      <node id="31">
        <label>QPointer</label>
      </node>
      <node id="26">
        <label>QRect</label>
      </node>
      <node id="33">
        <label>QRegion</label>
      </node>
      <node id="38">
        <label>QSharedDataPointer</label>
      </node>
      <node id="2">
        <label>QSignalSpy</label>
      </node>
      <node id="24">
        <label>QSize</label>
      </node>
      <node id="3">
        <label>QTest</label>
      </node>
      <node id="4">
        <label>QThread</label>
      </node>
      <node id="27">
        <label>QUuid</label>
      </node>
      <node id="19">
        <label>QVariant</label>
      </node>
      <node id="11">
        <label>QVector2D</label>
      </node>
      <node id="39">
        <label>chrono</label>
      </node>
      <node id="15">
        <label>config-kwin.h</label>
      </node>
      <node id="6">
        <label>kwin_export.h</label>
      </node>
      <node id="32">
        <label>memory</label>
      </node>
      <node id="9">
        <label>optional</label>
      </node>
      <node id="45">
        <label>qwayland-wlr-layer-shell-unstable-v1.h</label>
      </node>
      <node id="46">
        <label>qwayland-xdg-shell.h</label>
      </node>
      <node id="47">
        <label>test_layershellv1_interface.moc</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_layer_shell_v1" prot="public">LayerShellV1</innerclass>
    <innerclass refid="class_layer_surface_v1" prot="public">LayerSurfaceV1</innerclass>
    <innerclass refid="class_xdg_shell" prot="public">XdgShell</innerclass>
    <innerclass refid="class_xdg_surface" prot="public">XdgSurface</innerclass>
    <innerclass refid="class_xdg_positioner" prot="public">XdgPositioner</innerclass>
    <innerclass refid="class_xdg_popup" prot="public">XdgPopup</innerclass>
    <innerclass refid="class_test_layer_shell_v1_interface" prot="public">TestLayerShellV1Interface</innerclass>
    <sectiondef kind="var">
      <memberdef kind="variable" id="test__layershellv1__interface_8cpp_1a485d6ddd568caea0908934bfdb9fbadb" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString s_socketName</definition>
        <argsstring></argsstring>
        <name>s_socketName</name>
        <initializer>= QStringLiteral(&quot;kwin-wayland-server-layer-shell-v1-test-0&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/wayland/server/test_layershellv1_interface.cpp" line="120" column="22" bodyfile="kwin/autotests/wayland/server/test_layershellv1_interface.cpp" bodystart="120" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2020<sp/>Vlad<sp/>Zahorodnii<sp/>&lt;vlad.zahorodnii@kde.org&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>LGPL-2.1-only<sp/>OR<sp/>LGPL-3.0-only<sp/>OR<sp/>LicenseRef-KDE-Accepted-LGPL</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QSignalSpy&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QTest&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QThread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wayland_2compositor_8h" kindref="compound">wayland/compositor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="display_8h" kindref="compound">wayland/display.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="layershell__v1_8h" kindref="compound">wayland/layershell_v1.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="surface_8h" kindref="compound">wayland/surface.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="xdgshell_8h" kindref="compound">wayland/xdgshell.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/compositor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/connection_thread.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/event_queue.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/registry.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/surface.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;qwayland-wlr-layer-shell-unstable-v1.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;qwayland-xdg-shell.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><ref refid="x11keyread_8cpp_1ac0925a94f4858115ad1f04be885ac3b3" kindref="member">Q_DECLARE_METATYPE</ref>(<ref refid="class_k_win_1_1_layer_surface_v1_interface_1a51877e52eb2c4ff1ad3400b5038a8a64" kindref="member">KWin::LayerSurfaceV1Interface::Layer</ref>)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="x11keyread_8cpp_1ac0925a94f4858115ad1f04be885ac3b3" kindref="member">Q_DECLARE_METATYPE</ref>(<ref refid="class_k_win_1_1_layer_surface_v1_interface" kindref="compound">KWin::LayerSurfaceV1Interface</ref><sp/>*)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win" kindref="compound">KWin</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="class_layer_shell_v1" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_layer_shell_v1" kindref="compound">LayerShellV1</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QtWayland::zwlr_layer_shell_v1</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="34" refid="class_layer_shell_v1_1aa1fa112325ef6ff55a261022cd1e4174" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_layer_shell_v1_1aa1fa112325ef6ff55a261022cd1e4174" kindref="member">~LayerShellV1</ref>()</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline lineno="35"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal">};</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="class_layer_surface_v1" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_layer_surface_v1" kindref="compound">LayerSurfaceV1</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QtWayland::zwlr_layer_surface_v1</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="43" refid="class_layer_surface_v1_1ae286c3499e7b673fa575ae8798915c89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_layer_surface_v1_1ae286c3499e7b673fa575ae8798915c89" kindref="member">~LayerSurfaceV1</ref>()</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline lineno="44"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="class_xdg_shell" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_xdg_shell" kindref="compound">XdgShell</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QtWayland::xdg_wm_base</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="52" refid="class_xdg_shell_1a1a1e86a1f31ddbe6a53e4dcd07f8b37d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_xdg_shell_1a1a1e86a1f31ddbe6a53e4dcd07f8b37d" kindref="member">~XdgShell</ref>()</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal">};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="class_xdg_surface" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_xdg_surface" kindref="compound">XdgSurface</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QtWayland::xdg_surface</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="61" refid="class_xdg_surface_1a19a2b317eadf1f293651de7c6f31c3da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_xdg_surface_1a19a2b317eadf1f293651de7c6f31c3da" kindref="member">~XdgSurface</ref>()</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal">};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="class_xdg_positioner" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_k_win_1_1_xdg_positioner" kindref="compound">XdgPositioner</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QtWayland::xdg_positioner</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="70" refid="class_xdg_positioner_1a4274eac165d92814c0c98f7f43309939" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_xdg_positioner_1a4274eac165d92814c0c98f7f43309939" kindref="member">~XdgPositioner</ref>()</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal">};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="class_xdg_popup" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_xdg_popup" kindref="compound">XdgPopup</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QtWayland::xdg_popup</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="79" refid="class_xdg_popup_1a1dc46dd9bb2dffc484749206eca17179" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_xdg_popup_1a1dc46dd9bb2dffc484749206eca17179" kindref="member">~XdgPopup</ref>()</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal">};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="class_test_layer_shell_v1_interface" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_test_layer_shell_v1_interface" kindref="compound">TestLayerShellV1Interface</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QObject</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_test_layer_shell_v1_interface_1a13efabd83936880a91e67b09c3878306" kindref="member">~TestLayerShellV1Interface</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Q_SLOTS:</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initTestCase();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testDesiredSize();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testScope();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testAnchor_data();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testAnchor();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testMargins();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testExclusiveZone();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testExclusiveEdge_data();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testExclusiveEdge();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testLayer_data();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testLayer();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testPopup();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::ConnectionThread<sp/>*m_connection;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::EventQueue<sp/>*m_queue;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::Compositor<sp/>*m_clientCompositor;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>QThread<sp/>*m_thread;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_display" kindref="compound">KWin::Display</ref><sp/>m_display;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_compositor_interface" kindref="compound">CompositorInterface</ref><sp/>*m_serverCompositor;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_layer_shell_v1" kindref="compound">LayerShellV1</ref><sp/>*m_clientLayerShell<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_layer_shell_v1_interface" kindref="compound">LayerShellV1Interface</ref><sp/>*m_serverLayerShell<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_xdg_shell" kindref="compound">XdgShell</ref><sp/>*m_clientXdgShell<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_xdg_shell_interface" kindref="compound">XdgShellInterface</ref><sp/>*m_serverXdgShell<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">};</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>s_socketName<sp/>=<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;kwin-wayland-server-layer-shell-v1-test-0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLayerShellV1Interface::initTestCase()</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display.<ref refid="class_k_win_1_1_display_1aa4c4acfe47f745065df276fab792b431" kindref="member">addSocketName</ref>(s_socketName);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display.<ref refid="class_k_win_1_1_display_1af36443417f1832645373ce713cb226c7" kindref="member">start</ref>();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_display.<ref refid="class_k_win_1_1_display_1aa50d346a6be40bd7db06214c0350456a" kindref="member">isRunning</ref>());</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>m_serverLayerShell<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_layer_shell_v1_interface" kindref="compound">LayerShellV1Interface</ref>(&amp;m_display,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>m_serverXdgShell<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_xdg_shell_interface" kindref="compound">XdgShellInterface</ref>(&amp;m_display,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>m_serverCompositor<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_compositor_interface" kindref="compound">CompositorInterface</ref>(&amp;m_display,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>KWayland::Client::ConnectionThread;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>connectedSpy(m_connection,<sp/>&amp;KWayland::Client::ConnectionThread::connected);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection-&gt;setSocketName(s_socketName);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>m_thread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QThread(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection-&gt;moveToThread(m_thread);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>m_thread-&gt;start();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection-&gt;initConnection();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(connectedSpy.wait());</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!m_connection-&gt;connections().isEmpty());</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>m_queue<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>KWayland::Client::EventQueue(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!m_queue-&gt;isValid());</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>m_queue-&gt;setup(m_connection);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_queue-&gt;isValid());</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>registry<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>KWayland::Client::Registry(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(registry,<sp/>&amp;KWayland::Client::Registry::interfaceAnnounced,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>registry](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QByteArray<sp/>&amp;interface,<sp/>quint32<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>quint32<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interface<sp/>==<sp/>QByteArrayLiteral(</highlight><highlight class="stringliteral">&quot;zwlr_layer_shell_v1&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_clientLayerShell<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_layer_shell_v1" kindref="compound">LayerShellV1</ref>();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_clientLayerShell-&gt;init(*registry,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interface<sp/>==<sp/>QByteArrayLiteral(</highlight><highlight class="stringliteral">&quot;xdg_wm_base&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_clientXdgShell<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>XdgShell();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_clientXdgShell-&gt;init(*registry,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>allAnnouncedSpy(registry,<sp/>&amp;KWayland::Client::Registry::interfaceAnnounced);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>compositorSpy(registry,<sp/>&amp;KWayland::Client::Registry::compositorAnnounced);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>shmSpy(registry,<sp/>&amp;KWayland::Client::Registry::shmAnnounced);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>registry-&gt;setEventQueue(m_queue);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>registry-&gt;create(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(registry-&gt;isValid());</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>registry-&gt;setup();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(allAnnouncedSpy.wait());</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>m_clientCompositor<sp/>=<sp/>registry-&gt;createCompositor(compositorSpy.first().first().value&lt;quint32&gt;(),<sp/>compositorSpy.first().last().value&lt;quint32&gt;(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_clientCompositor-&gt;isValid());</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="class_test_layer_shell_v1_interface_1a13efabd83936880a91e67b09c3878306" refkind="member"><highlight class="normal"><ref refid="class_test_layer_shell_v1_interface_1a13efabd83936880a91e67b09c3878306" kindref="member">TestLayerShellV1Interface::~TestLayerShellV1Interface</ref>()</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_clientXdgShell)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_clientXdgShell;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_clientXdgShell<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_clientLayerShell)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_clientLayerShell;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_clientLayerShell<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_queue)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_queue;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_queue<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_thread)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_thread-&gt;quit();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_thread-&gt;wait();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_thread;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_thread<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection-&gt;deleteLater();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLayerShellV1Interface::testDesiredSize()</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>test<sp/>wl_surface<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverSurfaceCreatedSpy(m_serverCompositor,<sp/>&amp;<ref refid="class_k_win_1_1_compositor_interface_1a4a560a885ed69d43af0c857331e25592" kindref="member">CompositorInterface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>clientSurface(m_clientCompositor-&gt;createSurface(</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref><sp/>*serverSurface<sp/>=<sp/>serverSurfaceCreatedSpy.first().first().value&lt;<ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref><sp/>*&gt;();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>test<sp/>wlr_layer_surface_v1<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;LayerSurfaceV1&gt;<sp/>clientShellSurface(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_layer_surface_v1" kindref="compound">LayerSurfaceV1</ref>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>clientShellSurface-&gt;init(m_clientLayerShell-&gt;get_layer_surface(*clientSurface,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>LayerShellV1::layer_top,<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>layerSurfaceCreatedSpy(m_serverLayerShell,<sp/>&amp;<ref refid="class_k_win_1_1_layer_shell_v1_interface_1ab31a819d1037beaef8a41107fba713e2" kindref="member">LayerShellV1Interface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(layerSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>serverShellSurface<sp/>=<sp/>layerSurfaceCreatedSpy.last().first().value&lt;<ref refid="class_k_win_1_1_layer_surface_v1_interface" kindref="compound">LayerSurfaceV1Interface</ref><sp/>*&gt;();</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverShellSurface);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>clientShellSurface-&gt;set_size(10,<sp/>20);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>clientSurface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>desiredSizeChangedSpy(serverShellSurface,<sp/>&amp;<ref refid="class_k_win_1_1_layer_surface_v1_interface_1a114d43fb1e24cc16c0aa9910872686c5" kindref="member">LayerSurfaceV1Interface::desiredSizeChanged</ref>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(desiredSizeChangedSpy.wait());</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverShellSurface-&gt;desiredSize(),<sp/>QSize(10,<sp/>20));</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLayerShellV1Interface::testScope()</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>test<sp/>wl_surface<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverSurfaceCreatedSpy(m_serverCompositor,<sp/>&amp;<ref refid="class_k_win_1_1_compositor_interface_1a4a560a885ed69d43af0c857331e25592" kindref="member">CompositorInterface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>clientSurface(m_clientCompositor-&gt;createSurface(</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*serverSurface<sp/>=<sp/>serverSurfaceCreatedSpy.first().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>test<sp/>wlr_layer_surface_v1<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;LayerSurfaceV1&gt;<sp/>clientShellSurface(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>LayerSurfaceV1);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>clientShellSurface-&gt;init(m_clientLayerShell-&gt;get_layer_surface(*clientSurface,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>LayerShellV1::layer_top,<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;foobar&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>clientShellSurface-&gt;set_size(100,<sp/>50);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>layerSurfaceCreatedSpy(m_serverLayerShell,<sp/>&amp;<ref refid="class_k_win_1_1_layer_shell_v1_interface_1ab31a819d1037beaef8a41107fba713e2" kindref="member">LayerShellV1Interface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(layerSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>serverShellSurface<sp/>=<sp/>layerSurfaceCreatedSpy.last().first().value&lt;LayerSurfaceV1Interface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverShellSurface);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverShellSurface-&gt;scope(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;foobar&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLayerShellV1Interface::testAnchor_data()</highlight></codeline>
<codeline lineno="245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;int&gt;(</highlight><highlight class="stringliteral">&quot;anchor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;Qt::Edge&gt;(</highlight><highlight class="stringliteral">&quot;expected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;left&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>int(QtWayland::zwlr_layer_surface_v1::anchor_left)<sp/>&lt;&lt;<sp/>Qt::LeftEdge;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;right&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>int(QtWayland::zwlr_layer_surface_v1::anchor_right)<sp/>&lt;&lt;<sp/>Qt::RightEdge;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;top&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>int(QtWayland::zwlr_layer_surface_v1::anchor_top)<sp/>&lt;&lt;<sp/>Qt::TopEdge;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;bottom&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>int(QtWayland::zwlr_layer_surface_v1::anchor_bottom)<sp/>&lt;&lt;<sp/>Qt::BottomEdge;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLayerShellV1Interface::testAnchor()</highlight></codeline>
<codeline lineno="256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>test<sp/>wl_surface<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverSurfaceCreatedSpy(m_serverCompositor,<sp/>&amp;<ref refid="class_k_win_1_1_compositor_interface_1a4a560a885ed69d43af0c857331e25592" kindref="member">CompositorInterface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>clientSurface(m_clientCompositor-&gt;createSurface(</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*serverSurface<sp/>=<sp/>serverSurfaceCreatedSpy.first().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>test<sp/>wlr_layer_surface_v1<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;LayerSurfaceV1&gt;<sp/>clientShellSurface(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>LayerSurfaceV1);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>clientShellSurface-&gt;init(m_clientLayerShell-&gt;get_layer_surface(*clientSurface,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>LayerShellV1::layer_top,<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>layerSurfaceCreatedSpy(m_serverLayerShell,<sp/>&amp;<ref refid="class_k_win_1_1_layer_shell_v1_interface_1ab31a819d1037beaef8a41107fba713e2" kindref="member">LayerShellV1Interface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(layerSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>serverShellSurface<sp/>=<sp/>layerSurfaceCreatedSpy.last().first().value&lt;LayerSurfaceV1Interface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverShellSurface);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>anchor);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(Qt::Edge,<sp/>expected);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>clientShellSurface-&gt;set_anchor(anchor);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>clientShellSurface-&gt;set_size(100,<sp/>50);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>clientSurface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>anchorChangedSpy(serverShellSurface,<sp/>&amp;<ref refid="class_k_win_1_1_layer_surface_v1_interface_1a910ddd2a349cfed08eb12eaaefad16f4" kindref="member">LayerSurfaceV1Interface::anchorChanged</ref>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(anchorChangedSpy.wait());</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverShellSurface-&gt;anchor(),<sp/>expected);</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLayerShellV1Interface::testMargins()</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>test<sp/>wl_surface<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverSurfaceCreatedSpy(m_serverCompositor,<sp/>&amp;<ref refid="class_k_win_1_1_compositor_interface_1a4a560a885ed69d43af0c857331e25592" kindref="member">CompositorInterface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>clientSurface(m_clientCompositor-&gt;createSurface(</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*serverSurface<sp/>=<sp/>serverSurfaceCreatedSpy.first().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>test<sp/>wlr_layer_surface_v1<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;LayerSurfaceV1&gt;<sp/>clientShellSurface(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>LayerSurfaceV1);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>clientShellSurface-&gt;init(m_clientLayerShell-&gt;get_layer_surface(*clientSurface,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>LayerShellV1::layer_top,<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>layerSurfaceCreatedSpy(m_serverLayerShell,<sp/>&amp;<ref refid="class_k_win_1_1_layer_shell_v1_interface_1ab31a819d1037beaef8a41107fba713e2" kindref="member">LayerShellV1Interface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(layerSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>serverShellSurface<sp/>=<sp/>layerSurfaceCreatedSpy.last().first().value&lt;LayerSurfaceV1Interface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverShellSurface);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>clientShellSurface-&gt;set_margin(10,<sp/>20,<sp/>30,<sp/>40);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>clientShellSurface-&gt;set_size(100,<sp/>50);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>clientSurface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>marginsChangedSpy(serverShellSurface,<sp/>&amp;<ref refid="class_k_win_1_1_layer_surface_v1_interface_1a98b66a60b17b370e945dd666c831022f" kindref="member">LayerSurfaceV1Interface::marginsChanged</ref>);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(marginsChangedSpy.wait());</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverShellSurface-&gt;margins(),<sp/>QMargins(40,<sp/>10,<sp/>20,<sp/>30));</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLayerShellV1Interface::testExclusiveZone()</highlight></codeline>
<codeline lineno="313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>test<sp/>wl_surface<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverSurfaceCreatedSpy(m_serverCompositor,<sp/>&amp;<ref refid="class_k_win_1_1_compositor_interface_1a4a560a885ed69d43af0c857331e25592" kindref="member">CompositorInterface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>clientSurface(m_clientCompositor-&gt;createSurface(</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*serverSurface<sp/>=<sp/>serverSurfaceCreatedSpy.first().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>test<sp/>wlr_layer_surface_v1<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;LayerSurfaceV1&gt;<sp/>clientShellSurface(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>LayerSurfaceV1);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>clientShellSurface-&gt;init(m_clientLayerShell-&gt;get_layer_surface(*clientSurface,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>LayerShellV1::layer_top,<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>layerSurfaceCreatedSpy(m_serverLayerShell,<sp/>&amp;<ref refid="class_k_win_1_1_layer_shell_v1_interface_1ab31a819d1037beaef8a41107fba713e2" kindref="member">LayerShellV1Interface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(layerSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>serverShellSurface<sp/>=<sp/>layerSurfaceCreatedSpy.last().first().value&lt;LayerSurfaceV1Interface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverShellSurface);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>clientShellSurface-&gt;set_exclusive_zone(10);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>clientShellSurface-&gt;set_size(100,<sp/>50);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>clientSurface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>exclusiveZoneChangedSpy(serverShellSurface,<sp/>&amp;<ref refid="class_k_win_1_1_layer_surface_v1_interface_1a9c904e22cb0f76fa36004f0f564852c0" kindref="member">LayerSurfaceV1Interface::exclusiveZoneChanged</ref>);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(exclusiveZoneChangedSpy.wait());</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverShellSurface-&gt;exclusiveZone(),<sp/>10);</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLayerShellV1Interface::testExclusiveEdge_data()</highlight></codeline>
<codeline lineno="340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;int&gt;(</highlight><highlight class="stringliteral">&quot;anchor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;Qt::Edge&gt;(</highlight><highlight class="stringliteral">&quot;expected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;left<sp/>(singular)&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>int(QtWayland::zwlr_layer_surface_v1::anchor_left)<sp/>&lt;&lt;<sp/>Qt::LeftEdge;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;left<sp/>(triplet)&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>(QtWayland::zwlr_layer_surface_v1::anchor_bottom<sp/>|<sp/>QtWayland::zwlr_layer_surface_v1::anchor_left</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>QtWayland::zwlr_layer_surface_v1::anchor_top)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Qt::LeftEdge;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;right<sp/>(singular)&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>int(QtWayland::zwlr_layer_surface_v1::anchor_right)<sp/>&lt;&lt;<sp/>Qt::RightEdge;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;right<sp/>(triplet)&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>(QtWayland::zwlr_layer_surface_v1::anchor_top<sp/>|<sp/>QtWayland::zwlr_layer_surface_v1::anchor_right</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>QtWayland::zwlr_layer_surface_v1::anchor_bottom)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Qt::RightEdge;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;top<sp/>(singular)&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>int(QtWayland::zwlr_layer_surface_v1::anchor_top)<sp/>&lt;&lt;<sp/>Qt::TopEdge;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;top<sp/>(triplet)&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>(QtWayland::zwlr_layer_surface_v1::anchor_left<sp/>|<sp/>QtWayland::zwlr_layer_surface_v1::anchor_top</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>QtWayland::zwlr_layer_surface_v1::anchor_right)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Qt::TopEdge;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;bottom<sp/>(singular)&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>int(QtWayland::zwlr_layer_surface_v1::anchor_bottom)<sp/>&lt;&lt;<sp/>Qt::BottomEdge;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;bottom<sp/>(triplet)&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>(QtWayland::zwlr_layer_surface_v1::anchor_right<sp/>|<sp/>QtWayland::zwlr_layer_surface_v1::anchor_bottom</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>QtWayland::zwlr_layer_surface_v1::anchor_left)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Qt::BottomEdge;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;all&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>(QtWayland::zwlr_layer_surface_v1::anchor_left<sp/>|<sp/>QtWayland::zwlr_layer_surface_v1::anchor_right</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>QtWayland::zwlr_layer_surface_v1::anchor_top<sp/>|<sp/>QtWayland::zwlr_layer_surface_v1::anchor_bottom)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Qt::Edge();</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLayerShellV1Interface::testExclusiveEdge()</highlight></codeline>
<codeline lineno="374"><highlight class="normal">{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>test<sp/>wl_surface<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverSurfaceCreatedSpy(m_serverCompositor,<sp/>&amp;<ref refid="class_k_win_1_1_compositor_interface_1a4a560a885ed69d43af0c857331e25592" kindref="member">CompositorInterface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>clientSurface(m_clientCompositor-&gt;createSurface(</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*serverSurface<sp/>=<sp/>serverSurfaceCreatedSpy.first().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>test<sp/>wlr_layer_surface_v1<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;LayerSurfaceV1&gt;<sp/>clientShellSurface(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>LayerSurfaceV1);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>clientShellSurface-&gt;init(m_clientLayerShell-&gt;get_layer_surface(*clientSurface,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>LayerShellV1::layer_top,<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>layerSurfaceCreatedSpy(m_serverLayerShell,<sp/>&amp;<ref refid="class_k_win_1_1_layer_shell_v1_interface_1ab31a819d1037beaef8a41107fba713e2" kindref="member">LayerShellV1Interface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(layerSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>serverShellSurface<sp/>=<sp/>layerSurfaceCreatedSpy.last().first().value&lt;LayerSurfaceV1Interface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverShellSurface);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>anchor);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(Qt::Edge,<sp/>expected);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>clientShellSurface-&gt;set_exclusive_zone(10);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>clientShellSurface-&gt;set_size(100,<sp/>50);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>clientShellSurface-&gt;set_anchor(anchor);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>clientSurface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>anchorChangedSpy(serverShellSurface,<sp/>&amp;<ref refid="class_k_win_1_1_layer_surface_v1_interface_1a910ddd2a349cfed08eb12eaaefad16f4" kindref="member">LayerSurfaceV1Interface::anchorChanged</ref>);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(anchorChangedSpy.wait());</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverShellSurface-&gt;exclusiveEdge(),<sp/>expected);</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLayerShellV1Interface::testLayer_data()</highlight></codeline>
<codeline lineno="405"><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;int&gt;(</highlight><highlight class="stringliteral">&quot;layer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;LayerSurfaceV1Interface::Layer&gt;(</highlight><highlight class="stringliteral">&quot;expected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;overlay&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>int(QtWayland::zwlr_layer_shell_v1::layer_overlay)<sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_layer_surface_v1_interface_1a51877e52eb2c4ff1ad3400b5038a8a64a44c851fe282d8a5ed9aa3150cb2ce827" kindref="member">LayerSurfaceV1Interface::OverlayLayer</ref>;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;top&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>int(QtWayland::zwlr_layer_shell_v1::layer_top)<sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_layer_surface_v1_interface_1a51877e52eb2c4ff1ad3400b5038a8a64aab96af6ba5758138fb15a722492b46c1" kindref="member">LayerSurfaceV1Interface::TopLayer</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;bottom&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>int(QtWayland::zwlr_layer_shell_v1::layer_bottom)<sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_layer_surface_v1_interface_1a51877e52eb2c4ff1ad3400b5038a8a64a4713b37e17f565445d7a180a27207b20" kindref="member">LayerSurfaceV1Interface::BottomLayer</ref>;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;background&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>int(QtWayland::zwlr_layer_shell_v1::layer_background)<sp/>&lt;&lt;<sp/><ref refid="class_k_win_1_1_layer_surface_v1_interface_1a51877e52eb2c4ff1ad3400b5038a8a64ae364e041278b74a661656a2ba53a5b36" kindref="member">LayerSurfaceV1Interface::BackgroundLayer</ref>;</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLayerShellV1Interface::testLayer()</highlight></codeline>
<codeline lineno="416"><highlight class="normal">{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>test<sp/>wl_surface<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverSurfaceCreatedSpy(m_serverCompositor,<sp/>&amp;<ref refid="class_k_win_1_1_compositor_interface_1a4a560a885ed69d43af0c857331e25592" kindref="member">CompositorInterface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>clientSurface(m_clientCompositor-&gt;createSurface(</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*serverSurface<sp/>=<sp/>serverSurfaceCreatedSpy.first().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>test<sp/>wlr_layer_surface_v1<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;LayerSurfaceV1&gt;<sp/>clientShellSurface(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>LayerSurfaceV1);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>clientShellSurface-&gt;init(m_clientLayerShell-&gt;get_layer_surface(*clientSurface,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>LayerShellV1::layer_top,<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>layerSurfaceCreatedSpy(m_serverLayerShell,<sp/>&amp;<ref refid="class_k_win_1_1_layer_shell_v1_interface_1ab31a819d1037beaef8a41107fba713e2" kindref="member">LayerShellV1Interface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(layerSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>serverShellSurface<sp/>=<sp/>layerSurfaceCreatedSpy.last().first().value&lt;LayerSurfaceV1Interface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverShellSurface);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>layer);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(<ref refid="class_k_win_1_1_layer_surface_v1_interface_1a51877e52eb2c4ff1ad3400b5038a8a64" kindref="member">LayerSurfaceV1Interface::Layer</ref>,<sp/>expected);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>clientShellSurface-&gt;set_layer(layer);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>clientShellSurface-&gt;set_size(100,<sp/>50);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>clientSurface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>committedSpy(serverSurface,<sp/>&amp;<ref refid="class_k_win_1_1_surface_interface_1a0ef181bc149455033328ca56afc61697" kindref="member">SurfaceInterface::committed</ref>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(committedSpy.wait());</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverShellSurface-&gt;layer(),<sp/>expected);</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestLayerShellV1Interface::testPopup()</highlight></codeline>
<codeline lineno="446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>test<sp/>wl_surface<sp/>object<sp/>for<sp/>the<sp/>panel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverPanelSurfaceCreatedSpy(m_serverCompositor,<sp/>&amp;<ref refid="class_k_win_1_1_compositor_interface_1a4a560a885ed69d43af0c857331e25592" kindref="member">CompositorInterface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>clientPanelSurface(m_clientCompositor-&gt;createSurface(</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverPanelSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*serverPanelSurface<sp/>=<sp/>serverPanelSurfaceCreatedSpy.last().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverPanelSurface);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>test<sp/>wlr_layer_surface_v1<sp/>object<sp/>for<sp/>the<sp/>panel..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;LayerSurfaceV1&gt;<sp/>clientPanelShellSurface(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>LayerSurfaceV1);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>clientPanelShellSurface-&gt;init(m_clientLayerShell-&gt;get_layer_surface(*clientPanelSurface,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>LayerShellV1::layer_top,<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;panel&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>clientPanelShellSurface-&gt;set_size(100,<sp/>50);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>layerSurfaceCreatedSpy(m_serverLayerShell,<sp/>&amp;<ref refid="class_k_win_1_1_layer_shell_v1_interface_1ab31a819d1037beaef8a41107fba713e2" kindref="member">LayerShellV1Interface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(layerSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>serverPanelShellSurface<sp/>=<sp/>layerSurfaceCreatedSpy.last().first().value&lt;LayerSurfaceV1Interface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverPanelShellSurface);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>wl_surface<sp/>object<sp/>for<sp/>the<sp/>popup.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>clientPopupSurface(m_clientCompositor-&gt;createSurface(</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverPanelSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*serverPopupSurface<sp/>=<sp/>serverPanelSurfaceCreatedSpy.last().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverPopupSurface);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>xdg_surface<sp/>object<sp/>for<sp/>the<sp/>popup.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;XdgSurface&gt;<sp/>clientXdgSurface(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>XdgSurface);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>clientXdgSurface-&gt;init(m_clientXdgShell-&gt;get_xdg_surface(*clientPopupSurface));</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>xdg_positioner<sp/>object<sp/>for<sp/>the<sp/>popup.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;::XdgPositioner&gt;<sp/>positioner(new<sp/>::XdgPositioner);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>positioner-&gt;init(m_clientXdgShell-&gt;create_positioner());</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>positioner-&gt;set_size(100,<sp/>100);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>positioner-&gt;set_anchor_rect(0,<sp/>0,<sp/>10,<sp/>10);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>xdg_popup<sp/>surface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;XdgPopup&gt;<sp/>clientXdgPopup(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>XdgPopup);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>clientXdgPopup-&gt;init(clientXdgSurface-&gt;get_popup(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>positioner-&gt;object()));</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>server<sp/>side<sp/>to<sp/>catch<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>popupCreatedSpy(m_serverXdgShell,<sp/>&amp;<ref refid="class_k_win_1_1_xdg_shell_interface_1a76ca838bf66a252c237dd69d9f035e99" kindref="member">XdgShellInterface::popupCreated</ref>);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(popupCreatedSpy.wait());</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>XdgPopupInterface<sp/>*serverPopupShellSurface<sp/>=<sp/>popupCreatedSpy.last().first().value&lt;XdgPopupInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverPopupShellSurface);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverPopupShellSurface-&gt;<ref refid="class_k_win_1_1_xdg_popup_interface_1a7536b07b19db11513a3a98a5be3f266b" kindref="member">parentSurface</ref>(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>the<sp/>xdg_popup<sp/>surface<sp/>a<sp/>child<sp/>of<sp/>the<sp/>panel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>clientPanelShellSurface-&gt;get_popup(clientXdgPopup-&gt;object());</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Commit<sp/>the<sp/>initial<sp/>state<sp/>of<sp/>the<sp/>xdg_popup<sp/>surface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>clientPopupSurface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>initializeRequestedSpy(serverPopupShellSurface,<sp/>&amp;<ref refid="class_k_win_1_1_xdg_popup_interface_1aae939c77deb6626374a6dc60dc181019" kindref="member">XdgPopupInterface::initializeRequested</ref>);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(initializeRequestedSpy.wait());</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>popup<sp/>should<sp/>be<sp/>a<sp/>transient<sp/>for<sp/>the<sp/>panel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverPopupShellSurface-&gt;<ref refid="class_k_win_1_1_xdg_popup_interface_1a7536b07b19db11513a3a98a5be3f266b" kindref="member">parentSurface</ref>(),<sp/>serverPanelSurface);</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal">QTEST_GUILESS_MAIN(<ref refid="class_test_layer_shell_v1_interface" kindref="compound">TestLayerShellV1Interface</ref>)</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_layershellv1_interface.moc&quot;</highlight></codeline>
    </programlisting>
    <location file="kwin/autotests/wayland/server/test_layershellv1_interface.cpp"/>
  </compounddef>
</doxygen>
