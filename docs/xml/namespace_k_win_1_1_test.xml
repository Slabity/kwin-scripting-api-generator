<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="namespace_k_win_1_1_test" kind="namespace" language="C++">
    <compoundname>KWin::Test</compoundname>
    <innerclass refid="class_k_win_1_1_test_1_1_auto_hide_screen_edge_v1" prot="public">KWin::Test::AutoHideScreenEdgeV1</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_color_manager_v1" prot="public">KWin::Test::ColorManagerV1</innerclass>
    <innerclass refid="struct_k_win_1_1_test_1_1_connection" prot="public">KWin::Test::Connection</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_cursor_shape_device_v1" prot="public">KWin::Test::CursorShapeDeviceV1</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_cursor_shape_manager_v1" prot="public">KWin::Test::CursorShapeManagerV1</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_fake_input" prot="public">KWin::Test::FakeInput</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_fractional_scale_manager_v1" prot="public">KWin::Test::FractionalScaleManagerV1</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_fractional_scale_v1" prot="public">KWin::Test::FractionalScaleV1</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_idle_inhibit_manager_v1" prot="public">KWin::Test::IdleInhibitManagerV1</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_idle_inhibitor_v1" prot="public">KWin::Test::IdleInhibitorV1</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_layer_shell_v1" prot="public">KWin::Test::LayerShellV1</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_layer_surface_v1" prot="public">KWin::Test::LayerSurfaceV1</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_mock_input_method" prot="public">KWin::Test::MockInputMethod</innerclass>
    <innerclass refid="struct_k_win_1_1_test_1_1_output_info" prot="public">KWin::Test::OutputInfo</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_screencasting_stream_v1" prot="public">KWin::Test::ScreencastingStreamV1</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_screencasting_v1" prot="public">KWin::Test::ScreencastingV1</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_screen_edge_manager_v1" prot="public">KWin::Test::ScreenEdgeManagerV1</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_security_context_manager_v1" prot="public">KWin::Test::SecurityContextManagerV1</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_text_input_manager_v3" prot="public">KWin::Test::TextInputManagerV3</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_text_input_v3" prot="public">KWin::Test::TextInputV3</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_virtual_input_device" prot="public">KWin::Test::VirtualInputDevice</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_virtual_input_device_tablet_tool" prot="public">KWin::Test::VirtualInputDeviceTabletTool</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_wayland_output_configuration_v2" prot="public">KWin::Test::WaylandOutputConfigurationV2</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_wayland_output_device_v2" prot="public">KWin::Test::WaylandOutputDeviceV2</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_wayland_output_device_v2_mode" prot="public">KWin::Test::WaylandOutputDeviceV2Mode</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_wayland_output_management_v2" prot="public">KWin::Test::WaylandOutputManagementV2</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_wayland_sync_point" prot="public">KWin::Test::WaylandSyncPoint</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_xdg_decoration_manager_v1" prot="public">KWin::Test::XdgDecorationManagerV1</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_xdg_dialog_v1" prot="public">KWin::Test::XdgDialogV1</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_xdg_popup" prot="public">KWin::Test::XdgPopup</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_xdg_positioner" prot="public">KWin::Test::XdgPositioner</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_xdg_shell" prot="public">KWin::Test::XdgShell</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_xdg_surface" prot="public">KWin::Test::XdgSurface</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_xdg_toplevel" prot="public">KWin::Test::XdgToplevel</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_xdg_toplevel_decoration_v1" prot="public">KWin::Test::XdgToplevelDecorationV1</innerclass>
    <innerclass refid="class_k_win_1_1_test_1_1_xdg_wm_dialog_v1" prot="public">KWin::Test::XdgWmDialogV1</innerclass>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536" prot="public" static="no" strong="yes">
        <type></type>
        <name>AdditionalWaylandInterface</name>
        <qualifiedname>KWin::Test::AdditionalWaylandInterface</qualifiedname>
        <enumvalue id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a25c40c519686f155291de96c60796f70" prot="public">
          <name>Seat</name>
          <initializer>= 1 &lt;&lt; 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536abf1253b71483a68e9dd4dec785fabe65" prot="public">
          <name>PlasmaShell</name>
          <initializer>= 1 &lt;&lt; 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536afa5c5ed070e7fc241a0421ef4bcb5fdd" prot="public">
          <name>WindowManagement</name>
          <initializer>= 1 &lt;&lt; 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a0b3852f0d5dfd229d7157b15e9bef0e3" prot="public">
          <name>PointerConstraints</name>
          <initializer>= 1 &lt;&lt; 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a3ac80213e556032ec5ba55b6db6181f2" prot="public">
          <name>IdleInhibitV1</name>
          <initializer>= 1 &lt;&lt; 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536af5e7a406a01d3f9470a02c5c110b422d" prot="public">
          <name>AppMenu</name>
          <initializer>= 1 &lt;&lt; 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536ae24bd328d819330778eb44ea54915b6b" prot="public">
          <name>ShadowManager</name>
          <initializer>= 1 &lt;&lt; 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536aa3c659ec106f82ef9eb08668a1094ae3" prot="public">
          <name>XdgDecorationV1</name>
          <initializer>= 1 &lt;&lt; 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a357f08e3548f22d19d4864a66ebef074" prot="public">
          <name>OutputManagementV2</name>
          <initializer>= 1 &lt;&lt; 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a674d5a804927d2b257be26d8376ed267" prot="public">
          <name>TextInputManagerV2</name>
          <initializer>= 1 &lt;&lt; 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a0119a2852474a1f2e7c9fcdca19cf5f1" prot="public">
          <name>InputMethodV1</name>
          <initializer>= 1 &lt;&lt; 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a6b59204a4c30032f5fb59cb7bfe01965" prot="public">
          <name>LayerShellV1</name>
          <initializer>= 1 &lt;&lt; 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a3c201ab228c4a5b71be97b5dae4dc617" prot="public">
          <name>TextInputManagerV3</name>
          <initializer>= 1 &lt;&lt; 13</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536ae2e0547db7a3b8fe0b3d2fea900e8f06" prot="public">
          <name>OutputDeviceV2</name>
          <initializer>= 1 &lt;&lt; 14</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a8d8f0277f1fc7f78144e54bae1b556da" prot="public">
          <name>FractionalScaleManagerV1</name>
          <initializer>= 1 &lt;&lt; 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a940eda63ada8e3685f938def5cf3edb1" prot="public">
          <name>ScreencastingV1</name>
          <initializer>= 1 &lt;&lt; 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a1ad3937ae706ae33c6179f9e466383fc" prot="public">
          <name>ScreenEdgeV1</name>
          <initializer>= 1 &lt;&lt; 17</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536ab1cb0ede2f09d5c94363a308f35616bf" prot="public">
          <name>CursorShapeV1</name>
          <initializer>= 1 &lt;&lt; 18</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a7dd3c03064c2ad624718288dfce79e94" prot="public">
          <name>FakeInput</name>
          <initializer>= 1 &lt;&lt; 19</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a358f919bdc0fb0ee655249ff95254012" prot="public">
          <name>SecurityContextManagerV1</name>
          <initializer>= 1 &lt;&lt; 20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a471db28a9d39b400cbfb1d62d8fe1316" prot="public">
          <name>XdgDialogV1</name>
          <initializer>= 1 &lt;&lt; 21</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1_1_test_1a9af6a2efb4515dd7c977b9cf2d0b2536a4e057fcfe1b74836d9ae00f4cc3b3e04" prot="public">
          <name>ColorManagement</name>
          <initializer>= 1 &lt;&lt; 22</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/kwin_wayland_test.h" line="587" column="1" bodyfile="kwin/autotests/integration/kwin_wayland_test.h" bodystart="587" bodyend="610"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1_1_test_1acc9401c7c509367c1bd5356379700924" prot="public" static="no" strong="yes">
        <type></type>
        <name>CreationSetup</name>
        <qualifiedname>KWin::Test::CreationSetup</qualifiedname>
        <enumvalue id="namespace_k_win_1_1_test_1acc9401c7c509367c1bd5356379700924a77185debc8f1119630b3a59c3384d69d" prot="public">
          <name>CreateOnly</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1_1_test_1acc9401c7c509367c1bd5356379700924af1d9a0dc9e12b9129fc765725484aa11" prot="public">
          <name>CreateAndConfigure</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/kwin_wayland_test.h" line="815" column="1" bodyfile="kwin/autotests/integration/kwin_wayland_test.h" bodystart="815" bodyend="818"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespace_k_win_1_1_test_1ad959e1ac70ca5d5eeb321a108a7d0b98" prot="public" static="yes" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="struct_k_win_1_1_test_1_1_connection" kindref="compound">Connection</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Connection&gt; KWin::Test::s_waylandConnection</definition>
        <argsstring></argsstring>
        <name>s_waylandConnection</name>
        <qualifiedname>KWin::Test::s_waylandConnection</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="63" column="24" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="63" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a24e61eb6fba767f564d715bbae7a2e09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::keyboardKeyPressed</definition>
        <argsstring>(quint32 key, quint32 time)</argsstring>
        <name>keyboardKeyPressed</name>
        <qualifiedname>KWin::Test::keyboardKeyPressed</qualifiedname>
        <param>
          <type>quint32</type>
          <declname>key</declname>
        </param>
        <param>
          <type>quint32</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1745" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1745" bodyend="1749" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="726" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a0e41594af5bb5f89fd58919de458c7c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::keyboardKeyReleased</definition>
        <argsstring>(quint32 key, quint32 time)</argsstring>
        <name>keyboardKeyReleased</name>
        <qualifiedname>KWin::Test::keyboardKeyReleased</qualifiedname>
        <param>
          <type>quint32</type>
          <declname>key</declname>
        </param>
        <param>
          <type>quint32</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1751" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1751" bodyend="1755" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="727" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a70eddb451bb36cb91ad9190b4df265ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::pointerAxisHorizontal</definition>
        <argsstring>(qreal delta, quint32 time, qint32 discreteDelta=0, PointerAxisSource source=PointerAxisSource::Unknown)</argsstring>
        <name>pointerAxisHorizontal</name>
        <qualifiedname>KWin::Test::pointerAxisHorizontal</qualifiedname>
        <param>
          <type>qreal</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>quint32</type>
          <declname>time</declname>
        </param>
        <param>
          <type>qint32</type>
          <declname>discreteDelta</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1a143704533be3f7be8a43b2b962600248" kindref="member">PointerAxisSource</ref></type>
          <declname>source</declname>
          <defval><ref refid="namespace_k_win_1a143704533be3f7be8a43b2b962600248a88183b946cc5f0e8c96b2e66e1c74a7e" kindref="member">PointerAxisSource::Unknown</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1757" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1757" bodyend="1762" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="728" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1af420d2992ffcd40de8c3f31a69f71ade" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::pointerAxisVertical</definition>
        <argsstring>(qreal delta, quint32 time, qint32 discreteDelta=0, PointerAxisSource source=PointerAxisSource::Unknown)</argsstring>
        <name>pointerAxisVertical</name>
        <qualifiedname>KWin::Test::pointerAxisVertical</qualifiedname>
        <param>
          <type>qreal</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>quint32</type>
          <declname>time</declname>
        </param>
        <param>
          <type>qint32</type>
          <declname>discreteDelta</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1a143704533be3f7be8a43b2b962600248" kindref="member">PointerAxisSource</ref></type>
          <declname>source</declname>
          <defval><ref refid="namespace_k_win_1a143704533be3f7be8a43b2b962600248a88183b946cc5f0e8c96b2e66e1c74a7e" kindref="member">PointerAxisSource::Unknown</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1764" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1764" bodyend="1769" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="732" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a7ed1822cd70b207b310b8b892241d15e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::pointerButtonPressed</definition>
        <argsstring>(quint32 button, quint32 time)</argsstring>
        <name>pointerButtonPressed</name>
        <qualifiedname>KWin::Test::pointerButtonPressed</qualifiedname>
        <param>
          <type>quint32</type>
          <declname>button</declname>
        </param>
        <param>
          <type>quint32</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1771" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1771" bodyend="1776" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="736" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1abc9def44c9309a5e696d48288462bd08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::pointerButtonReleased</definition>
        <argsstring>(quint32 button, quint32 time)</argsstring>
        <name>pointerButtonReleased</name>
        <qualifiedname>KWin::Test::pointerButtonReleased</qualifiedname>
        <param>
          <type>quint32</type>
          <declname>button</declname>
        </param>
        <param>
          <type>quint32</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1778" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1778" bodyend="1783" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="737" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a86e49856d56b03d329f477b0df28cec2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::pointerMotion</definition>
        <argsstring>(const QPointF &amp;position, quint32 time)</argsstring>
        <name>pointerMotion</name>
        <qualifiedname>KWin::Test::pointerMotion</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>quint32</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1785" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1785" bodyend="1790" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="738" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1aa213f799df23188372b414aceb5bc16c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::pointerMotionRelative</definition>
        <argsstring>(const QPointF &amp;delta, quint32 time)</argsstring>
        <name>pointerMotionRelative</name>
        <qualifiedname>KWin::Test::pointerMotionRelative</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>quint32</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1792" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1792" bodyend="1797" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="739" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a2207bfe1aedfab2e4366690c842d04b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::touchCancel</definition>
        <argsstring>()</argsstring>
        <name>touchCancel</name>
        <qualifiedname>KWin::Test::touchCancel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1799" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1799" bodyend="1803" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="740" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a23de04a19c3519614786ab986c0c1e7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::touchDown</definition>
        <argsstring>(qint32 id, const QPointF &amp;pos, quint32 time)</argsstring>
        <name>touchDown</name>
        <qualifiedname>KWin::Test::touchDown</qualifiedname>
        <param>
          <type>qint32</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>quint32</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1805" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1805" bodyend="1809" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="741" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a374744d98acd1329e4133c7ab30a1cb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::touchMotion</definition>
        <argsstring>(qint32 id, const QPointF &amp;pos, quint32 time)</argsstring>
        <name>touchMotion</name>
        <qualifiedname>KWin::Test::touchMotion</qualifiedname>
        <param>
          <type>qint32</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>quint32</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1811" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1811" bodyend="1815" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="742" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1abe1cb34b00c3dce9daa8ba37ce7c402b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::touchUp</definition>
        <argsstring>(qint32 id, quint32 time)</argsstring>
        <name>touchUp</name>
        <qualifiedname>KWin::Test::touchUp</qualifiedname>
        <param>
          <type>qint32</type>
          <declname>id</declname>
        </param>
        <param>
          <type>quint32</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1817" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1817" bodyend="1821" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="743" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1ae7850dc4af47e1a9b478c4a2df576a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::tabletPadButtonPressed</definition>
        <argsstring>(quint32 button, quint32 time)</argsstring>
        <name>tabletPadButtonPressed</name>
        <qualifiedname>KWin::Test::tabletPadButtonPressed</qualifiedname>
        <param>
          <type>quint32</type>
          <declname>button</declname>
        </param>
        <param>
          <type>quint32</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1823" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1823" bodyend="1827" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="744" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1af4d8699667d5f322ed303102aac15955" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::tabletPadButtonReleased</definition>
        <argsstring>(quint32 button, quint32 time)</argsstring>
        <name>tabletPadButtonReleased</name>
        <qualifiedname>KWin::Test::tabletPadButtonReleased</qualifiedname>
        <param>
          <type>quint32</type>
          <declname>button</declname>
        </param>
        <param>
          <type>quint32</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1829" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1829" bodyend="1833" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="745" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a4eee7a7f151fa9fbca3e968234190cd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::tabletToolButtonPressed</definition>
        <argsstring>(quint32 button, quint32 time)</argsstring>
        <name>tabletToolButtonPressed</name>
        <qualifiedname>KWin::Test::tabletToolButtonPressed</qualifiedname>
        <param>
          <type>quint32</type>
          <declname>button</declname>
        </param>
        <param>
          <type>quint32</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1835" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1835" bodyend="1840" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="746" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1abc4b212371ebf87d77b09442ddfba60b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::tabletToolButtonReleased</definition>
        <argsstring>(quint32 button, quint32 time)</argsstring>
        <name>tabletToolButtonReleased</name>
        <qualifiedname>KWin::Test::tabletToolButtonReleased</qualifiedname>
        <param>
          <type>quint32</type>
          <declname>button</declname>
        </param>
        <param>
          <type>quint32</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1842" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1842" bodyend="1847" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="747" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a86fd3d965adff706d0732be23bce4018" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::tabletToolProximityEvent</definition>
        <argsstring>(const QPointF &amp;pos, qreal xTilt, qreal yTilt, qreal rotation, qreal distance, bool tipNear, qreal sliderPosition, quint32 time)</argsstring>
        <name>tabletToolProximityEvent</name>
        <qualifiedname>KWin::Test::tabletToolProximityEvent</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>xTilt</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>yTilt</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>distance</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>tipNear</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>sliderPosition</declname>
        </param>
        <param>
          <type>quint32</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1849" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1849" bodyend="1854" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="748" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a36c6e87757c3c97858c55b650c9d304c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Test::setupWaylandConnection</definition>
        <argsstring>(AdditionalWaylandInterfaces flags=AdditionalWaylandInterfaces())</argsstring>
        <name>setupWaylandConnection</name>
        <qualifiedname>KWin::Test::setupWaylandConnection</qualifiedname>
        <param>
          <type>AdditionalWaylandInterfaces</type>
          <declname>flags</declname>
          <defval>AdditionalWaylandInterfaces()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref> <ref refid="struct_k_win_1_1_test_1_1_connection" kindref="compound">Connection</ref> in a dedicated thread and creates various client side objects which can be used to create windows. <simplesect kind="return"><para><computeroutput>true</computeroutput> if created successfully, <computeroutput>false</computeroutput> if there was an error </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespace_k_win_1_1_test_1a12755bae9118cb958baf0efbd222d7c8" kindref="member">destroyWaylandConnection</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="347" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="347" bodyend="354" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="756" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a12755bae9118cb958baf0efbd222d7c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::destroyWaylandConnection</definition>
        <argsstring>()</argsstring>
        <name>destroyWaylandConnection</name>
        <qualifiedname>KWin::Test::destroyWaylandConnection</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroys the <ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref> <ref refid="struct_k_win_1_1_test_1_1_connection" kindref="compound">Connection</ref> created with setupWaylandConnection}. This can be called from cleanup in order to ensure that no <ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref> <ref refid="struct_k_win_1_1_test_1_1_connection" kindref="compound">Connection</ref> leaks into the next test method. <simplesect kind="see"><para><ref refid="namespace_k_win_1_1_test_1a36c6e87757c3c97858c55b650c9d304c" kindref="member">setupWaylandConnection</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="356" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="356" bodyend="359" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="764" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1ab8d22dbd7b611aa83d13171c80dd821d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KWayland::Client::ConnectionThread *</type>
        <definition>KWayland::Client::ConnectionThread * KWin::Test::waylandConnection</definition>
        <argsstring>()</argsstring>
        <name>waylandConnection</name>
        <qualifiedname>KWin::Test::waylandConnection</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="669" column="36" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="669" bodyend="672" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="766" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a47e310e7cc96be89e999b633b01c62b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KWayland::Client::Compositor *</type>
        <definition>KWayland::Client::Compositor * KWin::Test::waylandCompositor</definition>
        <argsstring>()</argsstring>
        <name>waylandCompositor</name>
        <qualifiedname>KWin::Test::waylandCompositor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="674" column="30" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="674" bodyend="677" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="767" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a4d912080e33c3b7e290c0770d4b6a74d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KWayland::Client::SubCompositor *</type>
        <definition>KWayland::Client::SubCompositor * KWin::Test::waylandSubCompositor</definition>
        <argsstring>()</argsstring>
        <name>waylandSubCompositor</name>
        <qualifiedname>KWin::Test::waylandSubCompositor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="679" column="33" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="679" bodyend="682" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="768" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a8196fdc512dee08594d21ac29ff714ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KWayland::Client::ShadowManager *</type>
        <definition>KWayland::Client::ShadowManager * KWin::Test::waylandShadowManager</definition>
        <argsstring>()</argsstring>
        <name>waylandShadowManager</name>
        <qualifiedname>KWin::Test::waylandShadowManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="684" column="33" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="684" bodyend="687" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="769" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1aa0144fabdd618eb668c5d5382631bfe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KWayland::Client::ShmPool *</type>
        <definition>KWayland::Client::ShmPool * KWin::Test::waylandShmPool</definition>
        <argsstring>()</argsstring>
        <name>waylandShmPool</name>
        <qualifiedname>KWin::Test::waylandShmPool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="689" column="27" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="689" bodyend="692" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="770" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a5f6b6eee3f6e90f7c4693e06af67d91d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KWayland::Client::Seat *</type>
        <definition>KWayland::Client::Seat * KWin::Test::waylandSeat</definition>
        <argsstring>()</argsstring>
        <name>waylandSeat</name>
        <qualifiedname>KWin::Test::waylandSeat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="694" column="24" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="694" bodyend="697" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="771" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1ad1f84af09bf2790daf310b36b2ec12a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KWayland::Client::PlasmaShell *</type>
        <definition>KWayland::Client::PlasmaShell * KWin::Test::waylandPlasmaShell</definition>
        <argsstring>()</argsstring>
        <name>waylandPlasmaShell</name>
        <qualifiedname>KWin::Test::waylandPlasmaShell</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="699" column="31" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="699" bodyend="702" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="772" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a37f9b33442f29538d044473f18bcbcc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KWayland::Client::PlasmaWindowManagement *</type>
        <definition>KWayland::Client::PlasmaWindowManagement * KWin::Test::waylandWindowManagement</definition>
        <argsstring>()</argsstring>
        <name>waylandWindowManagement</name>
        <qualifiedname>KWin::Test::waylandWindowManagement</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="704" column="42" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="704" bodyend="707" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="773" declcolumn="42"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a517ef757df68b22a94b9c565a67710bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KWayland::Client::PointerConstraints *</type>
        <definition>KWayland::Client::PointerConstraints * KWin::Test::waylandPointerConstraints</definition>
        <argsstring>()</argsstring>
        <name>waylandPointerConstraints</name>
        <qualifiedname>KWin::Test::waylandPointerConstraints</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="709" column="38" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="709" bodyend="712" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="774" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1aa8d74a9a8291f560dcc95673c7c6d0b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KWayland::Client::AppMenuManager *</type>
        <definition>KWayland::Client::AppMenuManager * KWin::Test::waylandAppMenuManager</definition>
        <argsstring>()</argsstring>
        <name>waylandAppMenuManager</name>
        <qualifiedname>KWin::Test::waylandAppMenuManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="714" column="34" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="714" bodyend="717" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="775" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a07b1c35303c0f89d7b3e98537ffdafdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_test_1_1_wayland_output_management_v2" kindref="compound">WaylandOutputManagementV2</ref> *</type>
        <definition>KWin::Test::WaylandOutputManagementV2 * KWin::Test::waylandOutputManagementV2</definition>
        <argsstring>()</argsstring>
        <name>waylandOutputManagementV2</name>
        <qualifiedname>KWin::Test::waylandOutputManagementV2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="719" column="39" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="719" bodyend="722" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="776" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1aba9aad15d03110344917226405ea7a6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KWayland::Client::TextInputManager *</type>
        <definition>KWayland::Client::TextInputManager * KWin::Test::waylandTextInputManager</definition>
        <argsstring>()</argsstring>
        <name>waylandTextInputManager</name>
        <qualifiedname>KWin::Test::waylandTextInputManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="724" column="36" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="724" bodyend="727" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="777" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a79662c163cb8eecaf6f4c19b0e63316e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; KWayland::Client::Output * &gt;</type>
        <definition>QList&lt; KWayland::Client::Output * &gt; KWin::Test::waylandOutputs</definition>
        <argsstring>()</argsstring>
        <name>waylandOutputs</name>
        <qualifiedname>KWin::Test::waylandOutputs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="734" column="7" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="734" bodyend="737" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="778" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1aef97bdfef9391388689aa4c4bf50d8aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KWayland::Client::Output *</type>
        <definition>KWayland::Client::Output * KWin::Test::waylandOutput</definition>
        <argsstring>(const QString &amp;name)</argsstring>
        <name>waylandOutput</name>
        <qualifiedname>KWin::Test::waylandOutput</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="739" column="26" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="739" bodyend="747" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="779" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a64d1f4d59675d814dafaa35cb026eeb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_test_1_1_screencasting_v1" kindref="compound">ScreencastingV1</ref> *</type>
        <definition>ScreencastingV1 * KWin::Test::screencasting</definition>
        <argsstring>()</argsstring>
        <name>screencasting</name>
        <qualifiedname>KWin::Test::screencasting</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="749" column="17" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="749" bodyend="752" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="780" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a3627732e55b6de7ce69153ec64447d62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2" kindref="compound">WaylandOutputDeviceV2</ref> * &gt;</type>
        <definition>QList&lt; KWin::Test::WaylandOutputDeviceV2 * &gt; KWin::Test::waylandOutputDevicesV2</definition>
        <argsstring>()</argsstring>
        <name>waylandOutputDevicesV2</name>
        <qualifiedname>KWin::Test::waylandOutputDevicesV2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="754" column="7" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="754" bodyend="757" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="781" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1af256d176be24b12c279c66f2154baaf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_test_1_1_fake_input" kindref="compound">FakeInput</ref> *</type>
        <definition>FakeInput * KWin::Test::waylandFakeInput</definition>
        <argsstring>()</argsstring>
        <name>waylandFakeInput</name>
        <qualifiedname>KWin::Test::waylandFakeInput</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="759" column="11" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="759" bodyend="762" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="782" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a63e86219391f6b56b91f2806477dbf02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_test_1_1_security_context_manager_v1" kindref="compound">SecurityContextManagerV1</ref> *</type>
        <definition>SecurityContextManagerV1 * KWin::Test::waylandSecurityContextManagerV1</definition>
        <argsstring>()</argsstring>
        <name>waylandSecurityContextManagerV1</name>
        <qualifiedname>KWin::Test::waylandSecurityContextManagerV1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="764" column="26" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="764" bodyend="767" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="783" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1aa2aeeed8707c8689f32965e0a606cad9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_test_1_1_color_manager_v1" kindref="compound">ColorManagerV1</ref> *</type>
        <definition>ColorManagerV1 * KWin::Test::colorManager</definition>
        <argsstring>()</argsstring>
        <name>colorManager</name>
        <qualifiedname>KWin::Test::colorManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="769" column="16" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="769" bodyend="772" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="784" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a567844737a26d3ce16f876573e87af57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Test::waitForWaylandSurface</definition>
        <argsstring>(Window *window)</argsstring>
        <name>waitForWaylandSurface</name>
        <qualifiedname>KWin::Test::waitForWaylandSurface</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="774" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="774" bodyend="781" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="786" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1ab4cf52ccd596caf6af24eb259913c597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Test::waitForWaylandPointer</definition>
        <argsstring>()</argsstring>
        <name>waitForWaylandPointer</name>
        <qualifiedname>KWin::Test::waitForWaylandPointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="783" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="783" bodyend="789" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="788" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1aef1b97c10f647eab1dc29f3967b96b01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Test::waitForWaylandPointer</definition>
        <argsstring>(KWayland::Client::Seat *seat)</argsstring>
        <name>waitForWaylandPointer</name>
        <qualifiedname>KWin::Test::waitForWaylandPointer</qualifiedname>
        <param>
          <type>KWayland::Client::Seat *</type>
          <declname>seat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="791" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="791" bodyend="795" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="789" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a6988af2cc12a50695d71f199cb3b0565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Test::waitForWaylandTouch</definition>
        <argsstring>()</argsstring>
        <name>waitForWaylandTouch</name>
        <qualifiedname>KWin::Test::waitForWaylandTouch</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="797" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="797" bodyend="803" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="790" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1ab601b2d0979b28b6be02a4777af72a16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Test::waitForWaylandTouch</definition>
        <argsstring>(KWayland::Client::Seat *seat)</argsstring>
        <name>waitForWaylandTouch</name>
        <qualifiedname>KWin::Test::waitForWaylandTouch</qualifiedname>
        <param>
          <type>KWayland::Client::Seat *</type>
          <declname>seat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="805" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="805" bodyend="809" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="791" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a3255b7f27e1f6075c53288186a919d00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Test::waitForWaylandKeyboard</definition>
        <argsstring>()</argsstring>
        <name>waitForWaylandKeyboard</name>
        <qualifiedname>KWin::Test::waitForWaylandKeyboard</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="811" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="811" bodyend="817" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="792" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1ae60e70830c08a372b439c5fae5fd0442" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Test::waitForWaylandKeyboard</definition>
        <argsstring>(KWayland::Client::Seat *seat)</argsstring>
        <name>waitForWaylandKeyboard</name>
        <qualifiedname>KWin::Test::waitForWaylandKeyboard</qualifiedname>
        <param>
          <type>KWayland::Client::Seat *</type>
          <declname>seat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="819" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="819" bodyend="823" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="793" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1ace6446b3dfb4032c38026e43ee355ff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::flushWaylandConnection</definition>
        <argsstring>()</argsstring>
        <name>flushWaylandConnection</name>
        <qualifiedname>KWin::Test::flushWaylandConnection</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="892" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="892" bodyend="897" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="795" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1ab48f9c39f88089daf08aaa45759f7299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Test::waylandSync</definition>
        <argsstring>()</argsstring>
        <name>waylandSync</name>
        <qualifiedname>KWin::Test::waylandSync</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ensures that all client requests are processed by the compositor and all events sent by the compositor are seen by the client. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="930" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="930" bodyend="935" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="801" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; KWayland::Client::Surface &gt;</type>
        <definition>std::unique_ptr&lt; KWayland::Client::Surface &gt; KWin::Test::createSurface</definition>
        <argsstring>()</argsstring>
        <name>createSurface</name>
        <qualifiedname>KWin::Test::createSurface</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="937" column="17" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="937" bodyend="943" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="803" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a862e52e06527e5b8cd253659ab929c5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; KWayland::Client::Surface &gt;</type>
        <definition>std::unique_ptr&lt; KWayland::Client::Surface &gt; KWin::Test::createSurface</definition>
        <argsstring>(KWayland::Client::Compositor *compositor)</argsstring>
        <name>createSurface</name>
        <qualifiedname>KWin::Test::createSurface</qualifiedname>
        <param>
          <type>KWayland::Client::Compositor *</type>
          <declname>compositor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="945" column="17" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="945" bodyend="949" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="804" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1ab4faef15d7046070832101a3953fb0f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; KWayland::Client::SubSurface &gt;</type>
        <definition>std::unique_ptr&lt; KWayland::Client::SubSurface &gt; KWin::Test::createSubSurface</definition>
        <argsstring>(KWayland::Client::Surface *surface, KWayland::Client::Surface *parentSurface)</argsstring>
        <name>createSubSurface</name>
        <qualifiedname>KWin::Test::createSubSurface</qualifiedname>
        <param>
          <type>KWayland::Client::Surface *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>KWayland::Client::Surface *</type>
          <declname>parentSurface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="951" column="17" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="951" bodyend="961" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="805" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1ac166b97d1f64154ee33256ab8d2d1369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_test_1_1_layer_surface_v1" kindref="compound">LayerSurfaceV1</ref> &gt;</type>
        <definition>std::unique_ptr&lt; LayerSurfaceV1 &gt; KWin::Test::createLayerSurfaceV1</definition>
        <argsstring>(KWayland::Client::Surface *surface, const QString &amp;scope, KWayland::Client::Output *output=nullptr, LayerShellV1::layer layer=LayerShellV1::layer_top)</argsstring>
        <name>createLayerSurfaceV1</name>
        <qualifiedname>KWin::Test::createLayerSurfaceV1</qualifiedname>
        <param>
          <type>KWayland::Client::Surface *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>KWayland::Client::Output *</type>
          <declname>output</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>LayerShellV1::layer</type>
          <declname>layer</declname>
          <defval>LayerShellV1::layer_top</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="963" column="17" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="963" bodyend="980" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="808" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a283aa125534a50e9477ee94e47057e9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_test_1_1_text_input_manager_v3" kindref="compound">TextInputManagerV3</ref> *</type>
        <definition>TextInputManagerV3 * KWin::Test::waylandTextInputManagerV3</definition>
        <argsstring>()</argsstring>
        <name>waylandTextInputManagerV3</name>
        <qualifiedname>KWin::Test::waylandTextInputManagerV3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="729" column="20" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="729" bodyend="732" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="813" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a57430bcdf11495b59bdd1d6e45c949d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; QtWayland::zwp_input_panel_surface_v1 &gt;</type>
        <definition>std::unique_ptr&lt; QtWayland::zwp_input_panel_surface_v1 &gt; KWin::Test::createInputPanelSurfaceV1</definition>
        <argsstring>(KWayland::Client::Surface *surface, KWayland::Client::Output *output, MockInputMethod::Mode mode)</argsstring>
        <name>createInputPanelSurfaceV1</name>
        <qualifiedname>KWin::Test::createInputPanelSurfaceV1</qualifiedname>
        <param>
          <type>KWayland::Client::Surface *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>KWayland::Client::Output *</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_test_1_1_mock_input_method_1a619415e949a428ef118af4bea55fa7d7" kindref="member">MockInputMethod::Mode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="982" column="17" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="982" bodyend="1003" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="820" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1ad5d6ef68dc8af138ba9e75cf3844524b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_test_1_1_fractional_scale_v1" kindref="compound">FractionalScaleV1</ref> &gt;</type>
        <definition>std::unique_ptr&lt; FractionalScaleV1 &gt; KWin::Test::createFractionalScaleV1</definition>
        <argsstring>(KWayland::Client::Surface *surface)</argsstring>
        <name>createFractionalScaleV1</name>
        <qualifiedname>KWin::Test::createFractionalScaleV1</qualifiedname>
        <param>
          <type>KWayland::Client::Surface *</type>
          <declname>surface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1005" column="17" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1005" bodyend="1015" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="824" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_test_1_1_xdg_toplevel" kindref="compound">XdgToplevel</ref> &gt;</type>
        <definition>std::unique_ptr&lt; XdgToplevel &gt; KWin::Test::createXdgToplevelSurface</definition>
        <argsstring>(KWayland::Client::Surface *surface)</argsstring>
        <name>createXdgToplevelSurface</name>
        <qualifiedname>KWin::Test::createXdgToplevelSurface</qualifiedname>
        <param>
          <type>KWayland::Client::Surface *</type>
          <declname>surface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1027" column="17" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1027" bodyend="1030" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="826" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a4d0bff722d7d2035978ade6b1db6400a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_test_1_1_xdg_toplevel" kindref="compound">XdgToplevel</ref> &gt;</type>
        <definition>std::unique_ptr&lt; XdgToplevel &gt; KWin::Test::createXdgToplevelSurface</definition>
        <argsstring>(XdgShell *shell, KWayland::Client::Surface *surface)</argsstring>
        <name>createXdgToplevelSurface</name>
        <qualifiedname>KWin::Test::createXdgToplevelSurface</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_test_1_1_xdg_shell" kindref="compound">XdgShell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type>KWayland::Client::Surface *</type>
          <declname>surface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1032" column="17" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1032" bodyend="1035" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="827" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a0c7318f7b2861d4ba92a2ae860afb2f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_test_1_1_xdg_toplevel" kindref="compound">XdgToplevel</ref> &gt;</type>
        <definition>std::unique_ptr&lt; XdgToplevel &gt; KWin::Test::createXdgToplevelSurface</definition>
        <argsstring>(KWayland::Client::Surface *surface, CreationSetup configureMode)</argsstring>
        <name>createXdgToplevelSurface</name>
        <qualifiedname>KWin::Test::createXdgToplevelSurface</qualifiedname>
        <param>
          <type>KWayland::Client::Surface *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1_1_test_1acc9401c7c509367c1bd5356379700924" kindref="member">CreationSetup</ref></type>
          <declname>configureMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1037" column="17" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1037" bodyend="1047" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="828" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1ade742543bfcb0d817f0042590369f8c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_test_1_1_xdg_toplevel" kindref="compound">XdgToplevel</ref> &gt;</type>
        <definition>std::unique_ptr&lt; XdgToplevel &gt; KWin::Test::createXdgToplevelSurface</definition>
        <argsstring>(XdgShell *shell, KWayland::Client::Surface *surface, CreationSetup configureMode)</argsstring>
        <name>createXdgToplevelSurface</name>
        <qualifiedname>KWin::Test::createXdgToplevelSurface</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_test_1_1_xdg_shell" kindref="compound">XdgShell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type>KWayland::Client::Surface *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1_1_test_1acc9401c7c509367c1bd5356379700924" kindref="member">CreationSetup</ref></type>
          <declname>configureMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1049" column="17" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1049" bodyend="1059" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="829" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1ac1fe3be45e880f6a6473d6826b3303ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_test_1_1_xdg_toplevel" kindref="compound">XdgToplevel</ref> &gt;</type>
        <definition>std::unique_ptr&lt; XdgToplevel &gt; KWin::Test::createXdgToplevelSurface</definition>
        <argsstring>(KWayland::Client::Surface *surface, std::function&lt; void(XdgToplevel *toplevel)&gt; setup)</argsstring>
        <name>createXdgToplevelSurface</name>
        <qualifiedname>KWin::Test::createXdgToplevelSurface</qualifiedname>
        <param>
          <type>KWayland::Client::Surface *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel" kindref="compound">XdgToplevel</ref> *toplevel)&gt;</type>
          <declname>setup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1061" column="17" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1061" bodyend="1071" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="830" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a1d47ead3cd96703af6190d5b9b4027de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_test_1_1_xdg_toplevel" kindref="compound">XdgToplevel</ref> &gt;</type>
        <definition>std::unique_ptr&lt; XdgToplevel &gt; KWin::Test::createXdgToplevelSurface</definition>
        <argsstring>(XdgShell *shell, KWayland::Client::Surface *surface, std::function&lt; void(XdgToplevel *toplevel)&gt; setup)</argsstring>
        <name>createXdgToplevelSurface</name>
        <qualifiedname>KWin::Test::createXdgToplevelSurface</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_test_1_1_xdg_shell" kindref="compound">XdgShell</ref> *</type>
          <declname>shell</declname>
        </param>
        <param>
          <type>KWayland::Client::Surface *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel" kindref="compound">XdgToplevel</ref> *toplevel)&gt;</type>
          <declname>setup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1073" column="17" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1073" bodyend="1082" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="831" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a735a2b3ebb5e8d173daba48b745871a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_test_1_1_xdg_positioner" kindref="compound">XdgPositioner</ref> &gt;</type>
        <definition>std::unique_ptr&lt; XdgPositioner &gt; KWin::Test::createXdgPositioner</definition>
        <argsstring>()</argsstring>
        <name>createXdgPositioner</name>
        <qualifiedname>KWin::Test::createXdgPositioner</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1084" column="17" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1084" bodyend="1094" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="833" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a52039e32ae72c4329a4720d32469a385" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_test_1_1_xdg_popup" kindref="compound">XdgPopup</ref> &gt;</type>
        <definition>std::unique_ptr&lt; XdgPopup &gt; KWin::Test::createXdgPopupSurface</definition>
        <argsstring>(KWayland::Client::Surface *surface, XdgSurface *parentSurface, XdgPositioner *positioner, CreationSetup configureMode=CreationSetup::CreateAndConfigure)</argsstring>
        <name>createXdgPopupSurface</name>
        <qualifiedname>KWin::Test::createXdgPopupSurface</qualifiedname>
        <param>
          <type>KWayland::Client::Surface *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_test_1_1_xdg_surface" kindref="compound">XdgSurface</ref> *</type>
          <declname>parentSurface</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_test_1_1_xdg_positioner" kindref="compound">XdgPositioner</ref> *</type>
          <declname>positioner</declname>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1_1_test_1acc9401c7c509367c1bd5356379700924" kindref="member">CreationSetup</ref></type>
          <declname>configureMode</declname>
          <defval><ref refid="namespace_k_win_1_1_test_1acc9401c7c509367c1bd5356379700924af1d9a0dc9e12b9129fc765725484aa11" kindref="member">CreationSetup::CreateAndConfigure</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1096" column="17" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1096" bodyend="1113" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="835" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a5b6ba1c532f1dec604fbb3a7bd44ee04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_decoration_v1" kindref="compound">XdgToplevelDecorationV1</ref> &gt;</type>
        <definition>std::unique_ptr&lt; XdgToplevelDecorationV1 &gt; KWin::Test::createXdgToplevelDecorationV1</definition>
        <argsstring>(XdgToplevel *toplevel)</argsstring>
        <name>createXdgToplevelDecorationV1</name>
        <qualifiedname>KWin::Test::createXdgToplevelDecorationV1</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_test_1_1_xdg_toplevel" kindref="compound">XdgToplevel</ref> *</type>
          <declname>toplevel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1115" column="17" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1115" bodyend="1125" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="839" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a0b5feede4405fb4f6fc9464a95288350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_test_1_1_idle_inhibitor_v1" kindref="compound">IdleInhibitorV1</ref> &gt;</type>
        <definition>std::unique_ptr&lt; IdleInhibitorV1 &gt; KWin::Test::createIdleInhibitorV1</definition>
        <argsstring>(KWayland::Client::Surface *surface)</argsstring>
        <name>createIdleInhibitorV1</name>
        <qualifiedname>KWin::Test::createIdleInhibitorV1</qualifiedname>
        <param>
          <type>KWayland::Client::Surface *</type>
          <declname>surface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1127" column="17" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1127" bodyend="1136" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="840" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1ad4feb97ed84e9de5df974bb8d485c9f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_test_1_1_auto_hide_screen_edge_v1" kindref="compound">AutoHideScreenEdgeV1</ref> &gt;</type>
        <definition>std::unique_ptr&lt; AutoHideScreenEdgeV1 &gt; KWin::Test::createAutoHideScreenEdgeV1</definition>
        <argsstring>(KWayland::Client::Surface *surface, uint32_t border)</argsstring>
        <name>createAutoHideScreenEdgeV1</name>
        <qualifiedname>KWin::Test::createAutoHideScreenEdgeV1</qualifiedname>
        <param>
          <type>KWayland::Client::Surface *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>border</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1138" column="17" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1138" bodyend="1147" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="841" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a2d3ed1291cac418e44d9c114e5427d19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_test_1_1_cursor_shape_device_v1" kindref="compound">CursorShapeDeviceV1</ref> &gt;</type>
        <definition>std::unique_ptr&lt; CursorShapeDeviceV1 &gt; KWin::Test::createCursorShapeDeviceV1</definition>
        <argsstring>(KWayland::Client::Pointer *pointer)</argsstring>
        <name>createCursorShapeDeviceV1</name>
        <qualifiedname>KWin::Test::createCursorShapeDeviceV1</qualifiedname>
        <param>
          <type>KWayland::Client::Pointer *</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1149" column="17" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1149" bodyend="1158" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="842" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a71e6598e56997eed0fa80ed32ade7446" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_test_1_1_xdg_dialog_v1" kindref="compound">XdgDialogV1</ref> &gt;</type>
        <definition>std::unique_ptr&lt; XdgDialogV1 &gt; KWin::Test::createXdgDialogV1</definition>
        <argsstring>(XdgToplevel *toplevel)</argsstring>
        <name>createXdgDialogV1</name>
        <qualifiedname>KWin::Test::createXdgDialogV1</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_test_1_1_xdg_toplevel" kindref="compound">XdgToplevel</ref> *</type>
          <declname>toplevel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1160" column="17" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1160" bodyend="1168" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="843" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::render</definition>
        <argsstring>(KWayland::Client::Surface *surface, const QSize &amp;size, const QColor &amp;color, const QImage::Format &amp;format=QImage::Format_ARGB32_Premultiplied)</argsstring>
        <name>render</name>
        <qualifiedname>KWin::Test::render</qualifiedname>
        <param>
          <type>KWayland::Client::Surface *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>const QSize &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const QColor &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>const QImage::Format &amp;</type>
          <declname>format</declname>
          <defval>QImage::Format_ARGB32_Premultiplied</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a shared memory buffer of <computeroutput>size</computeroutput> in <computeroutput>color</computeroutput> and attaches it to the <computeroutput>surface</computeroutput>. The <computeroutput>surface</computeroutput> gets damaged and committed, thus it&apos;s rendered. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="825" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="825" bodyend="828" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="849" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a222c0724b1eeb78c74aa1a1171fc2268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::render</definition>
        <argsstring>(KWayland::Client::ShmPool *shm, KWayland::Client::Surface *surface, const QSize &amp;size, const QColor &amp;color, const QImage::Format &amp;format=QImage::Format_ARGB32_Premultiplied)</argsstring>
        <name>render</name>
        <qualifiedname>KWin::Test::render</qualifiedname>
        <param>
          <type>KWayland::Client::ShmPool *</type>
          <declname>shm</declname>
        </param>
        <param>
          <type>KWayland::Client::Surface *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>const QSize &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const QColor &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>const QImage::Format &amp;</type>
          <declname>format</declname>
          <defval>QImage::Format_ARGB32_Premultiplied</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="830" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="830" bodyend="835" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="850" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a5a359b903ac5417003a418776036cf84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::render</definition>
        <argsstring>(KWayland::Client::Surface *surface, const QImage &amp;img)</argsstring>
        <name>render</name>
        <qualifiedname>KWin::Test::render</qualifiedname>
        <param>
          <type>KWayland::Client::Surface *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>const QImage &amp;</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a shared memory buffer using the supplied image <computeroutput>img</computeroutput> and attaches it to the <computeroutput>surface</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="837" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="837" bodyend="840" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="855" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1aa8a66a205cec3f773284ff1693794b7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::render</definition>
        <argsstring>(KWayland::Client::ShmPool *shm, KWayland::Client::Surface *surface, const QImage &amp;img)</argsstring>
        <name>render</name>
        <qualifiedname>KWin::Test::render</qualifiedname>
        <param>
          <type>KWayland::Client::ShmPool *</type>
          <declname>shm</declname>
        </param>
        <param>
          <type>KWayland::Client::Surface *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>const QImage &amp;</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="842" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="842" bodyend="847" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="856" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a6526dd5f17b3c80aa9dcb63e12ddb392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
        <definition>Window * KWin::Test::waitForWaylandWindowShown</definition>
        <argsstring>(int timeout=5000)</argsstring>
        <name>waitForWaylandWindowShown</name>
        <qualifiedname>KWin::Test::waitForWaylandWindowShown</qualifiedname>
        <param>
          <type>int</type>
          <declname>timeout</declname>
          <defval>5000</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Waits till a new <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> is shown and returns the created <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>. If no <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> gets shown during <computeroutput>timeout</computeroutput> <computeroutput>null</computeroutput> is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="849" column="8" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="849" bodyend="859" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="862" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
        <definition>Window * KWin::Test::renderAndWaitForShown</definition>
        <argsstring>(KWayland::Client::Surface *surface, const QSize &amp;size, const QColor &amp;color, const QImage::Format &amp;format=QImage::Format_ARGB32, int timeout=5000)</argsstring>
        <name>renderAndWaitForShown</name>
        <qualifiedname>KWin::Test::renderAndWaitForShown</qualifiedname>
        <param>
          <type>KWayland::Client::Surface *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>const QSize &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const QColor &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>const QImage::Format &amp;</type>
          <declname>format</declname>
          <defval>QImage::Format_ARGB32</defval>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
          <defval>5000</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Combination of render} and waitForWaylandWindowShown}. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="861" column="8" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="861" bodyend="864" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="867" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a8de8d0bab0a02cebb6ae46552db10df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
        <definition>Window * KWin::Test::renderAndWaitForShown</definition>
        <argsstring>(KWayland::Client::ShmPool *shm, KWayland::Client::Surface *surface, const QSize &amp;size, const QColor &amp;color, const QImage::Format &amp;format=QImage::Format_ARGB32, int timeout=5000)</argsstring>
        <name>renderAndWaitForShown</name>
        <qualifiedname>KWin::Test::renderAndWaitForShown</qualifiedname>
        <param>
          <type>KWayland::Client::ShmPool *</type>
          <declname>shm</declname>
        </param>
        <param>
          <type>KWayland::Client::Surface *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>const QSize &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const QColor &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>const QImage::Format &amp;</type>
          <declname>format</declname>
          <defval>QImage::Format_ARGB32</defval>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
          <defval>5000</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="866" column="8" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="866" bodyend="871" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="868" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1aa53b8a86d3dca8a9e027da2d983ace5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
        <definition>Window * KWin::Test::renderAndWaitForShown</definition>
        <argsstring>(KWayland::Client::Surface *surface, const QImage &amp;img, int timeout=5000)</argsstring>
        <name>renderAndWaitForShown</name>
        <qualifiedname>KWin::Test::renderAndWaitForShown</qualifiedname>
        <param>
          <type>KWayland::Client::Surface *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>const QImage &amp;</type>
          <declname>img</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
          <defval>5000</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="873" column="8" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="873" bodyend="876" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="870" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a9c772b2c48fb96b64022153299aaa69e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
        <definition>Window * KWin::Test::renderAndWaitForShown</definition>
        <argsstring>(KWayland::Client::ShmPool *shm, KWayland::Client::Surface *surface, const QImage &amp;img, int timeout=5000)</argsstring>
        <name>renderAndWaitForShown</name>
        <qualifiedname>KWin::Test::renderAndWaitForShown</qualifiedname>
        <param>
          <type>KWayland::Client::ShmPool *</type>
          <declname>shm</declname>
        </param>
        <param>
          <type>KWayland::Client::Surface *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>const QImage &amp;</type>
          <declname>img</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
          <defval>5000</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="878" column="8" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="878" bodyend="890" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="871" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Test::waitForWindowClosed</definition>
        <argsstring>(Window *window)</argsstring>
        <name>waitForWindowClosed</name>
        <qualifiedname>KWin::Test::waitForWindowClosed</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Waits for the <computeroutput>window</computeroutput> to be destroyed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1170" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1170" bodyend="1177" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="876" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1ab7915feb352e7c58be574a8a30f513d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Test::lockScreen</definition>
        <argsstring>()</argsstring>
        <name>lockScreen</name>
        <qualifiedname>KWin::Test::lockScreen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Locks the screen and waits till the screen is locked. <simplesect kind="return"><para><computeroutput>true</computeroutput> if the screen could be locked, <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/kwin_wayland_test.h" line="882" column="6" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="882" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a80923801c152ebe9d50f7b3ed392ad4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Test::unlockScreen</definition>
        <argsstring>()</argsstring>
        <name>unlockScreen</name>
        <qualifiedname>KWin::Test::unlockScreen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unlocks the screen and waits till the screen is unlocked. <simplesect kind="return"><para><computeroutput>true</computeroutput> if the screen could be unlocked, <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/kwin_wayland_test.h" line="888" column="6" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="888" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a92ed8ed368ec43eae0bf76b866e14b24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Test::renderNodeAvailable</definition>
        <argsstring>()</argsstring>
        <name>renderNodeAvailable</name>
        <qualifiedname>KWin::Test::renderNodeAvailable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the system has at least one render node; otherwise returns <computeroutput>false</computeroutput>.</para>
<para>This can be used to test whether the system is capable of allocating and sharing prime buffers, etc. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1248" column="6" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1248" bodyend="1266" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="895" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a76fc6ee64cbcb1ad3cea2e670bf37f68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_test_1_1_mock_input_method" kindref="compound">MockInputMethod</ref> *</type>
        <definition>MockInputMethod * KWin::Test::inputMethod</definition>
        <argsstring>()</argsstring>
        <name>inputMethod</name>
        <qualifiedname>KWin::Test::inputMethod</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an X11 connection Internally a nested event loop is spawned whilst we connect to avoid a deadlock with X on demand </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="290" column="17" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="290" bodyend="293" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="912" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a79a1e1551387419a4191a986f66c49b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KWayland::Client::Surface *</type>
        <definition>KWayland::Client::Surface * KWin::Test::inputPanelSurface</definition>
        <argsstring>()</argsstring>
        <name>inputPanelSurface</name>
        <qualifiedname>KWin::Test::inputPanelSurface</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="295" column="27" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="295" bodyend="298" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="913" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a1373c61710748fcde7e428e05bd5f2cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::setOutputConfig</definition>
        <argsstring>(const QList&lt; QRect &gt; &amp;geometries)</argsstring>
        <name>setOutputConfig</name>
        <qualifiedname>KWin::Test::setOutputConfig</qualifiedname>
        <param>
          <type>const QList&lt; QRect &gt; &amp;</type>
          <declname>geometries</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/kwin_wayland_test.h" line="1001" column="6" bodyfile="kwin/autotests/integration/kwin_wayland_test.cpp" bodystart="276" bodyend="285" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="1001" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1a7f7c54630c0b0b4f0b13ec1153c0650a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Test::setOutputConfig</definition>
        <argsstring>(const QList&lt; OutputInfo &gt; &amp;infos)</argsstring>
        <name>setOutputConfig</name>
        <qualifiedname>KWin::Test::setOutputConfig</qualifiedname>
        <param>
          <type>const QList&lt; <ref refid="struct_k_win_1_1_test_1_1_output_info" kindref="compound">OutputInfo</ref> &gt; &amp;</type>
          <declname>infos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/kwin_wayland_test.h" line="1002" column="6" bodyfile="kwin/autotests/integration/kwin_wayland_test.cpp" bodystart="287" bodyend="305" declfile="kwin/autotests/integration/kwin_wayland_test.h" declline="1002" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1ae572f07ee049e026303d14267e228d1a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::Test::waitForConfigured</definition>
        <argsstring>(XdgSurface *shellSurface)</argsstring>
        <name>waitForConfigured</name>
        <qualifiedname>KWin::Test::waitForConfigured</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_test_1_1_xdg_surface" kindref="compound">XdgSurface</ref> *</type>
          <declname>shellSurface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1017" column="13" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1017" bodyend="1025"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_test_1aca28cd61cb4bfd29e61f76cc2eb1736d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QDebug</type>
        <definition>QDebug KWin::Test::operator&lt;&lt;</definition>
        <argsstring>(QDebug dbg, const WaylandOutputDeviceV2 *output)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>KWin::Test::operator&lt;&lt;</qualifiedname>
        <param>
          <type>QDebug</type>
          <declname>dbg</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_test_1_1_wayland_output_device_v2" kindref="compound">WaylandOutputDeviceV2</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/test_helpers.cpp" line="1457" column="1" bodyfile="kwin/autotests/integration/test_helpers.cpp" bodystart="1457" bodyend="1461"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="kwin/autotests/integration/kwin_wayland_test.h" line="85" column="1"/>
  </compounddef>
</doxygen>
