<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_effect_frame" kind="class" language="C++" prot="public">
    <compoundname>KWin::EffectFrame</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QObject</basecompoundref>
    <includes refid="effectframe_8h" local="no">effectframe.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_effect_frame_1a01fb57cb478718236c939e4880d539f4" prot="private" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_effect_frame_quick_scene" kindref="compound">EffectFrameQuickScene</ref> *</type>
        <definition>EffectFrameQuickScene* KWin::EffectFrame::m_view</definition>
        <argsstring></argsstring>
        <name>m_view</name>
        <qualifiedname>KWin::EffectFrame::m_view</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="199" column="27" bodyfile="kwin/src/effect/effectframe.h" bodystart="199" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_effect_frame_1a3035f6fdddeb98c9edb9f3f781a36864" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::EffectFrame::EffectFrame</definition>
        <argsstring>(EffectFrameStyle style, bool staticSize=true, QPoint position=QPoint(-1, -1), Qt::Alignment alignment=Qt::AlignCenter)</argsstring>
        <name>EffectFrame</name>
        <qualifiedname>KWin::EffectFrame::EffectFrame</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a92e14232c9fc6ccaccf6ba1db6cbc7a7" kindref="member">EffectFrameStyle</ref></type>
          <declname>style</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>staticSize</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>QPoint</type>
          <declname>position</declname>
          <defval>QPoint(-1, -1)</defval>
        </param>
        <param>
          <type>Qt::Alignment</type>
          <declname>alignment</declname>
          <defval>Qt::AlignCenter</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="118" column="14" bodyfile="kwin/src/effect/effectframe.cpp" bodystart="226" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_frame_1ad0a2ba6c89c6561ef82162b2d67966af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::EffectFrame::~EffectFrame</definition>
        <argsstring>()</argsstring>
        <name>~EffectFrame</name>
        <qualifiedname>KWin::EffectFrame::~EffectFrame</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="120" column="5" bodyfile="kwin/src/effect/effectframe.cpp" bodystart="238" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_frame_1ae1e7684a30ff9af4522ff6fc8abe4c9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectFrame::free</definition>
        <argsstring>()</argsstring>
        <name>free</name>
        <qualifiedname>KWin::EffectFrame::free</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete any existing textures to free up graphics memory. They will be automatically recreated the next time they are required. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="126" column="10" bodyfile="kwin/src/effect/effectframe.cpp" bodystart="267" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_frame_1a34232993d888d81b6d1fde83a4b7056a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectFrame::render</definition>
        <argsstring>(const RenderTarget &amp;renderTarget, const RenderViewport &amp;viewport, const QRegion &amp;region=infiniteRegion(), double opacity=1.0, double frameOpacity=1.0)</argsstring>
        <name>render</name>
        <qualifiedname>KWin::EffectFrame::render</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref> &amp;</type>
          <declname>renderTarget</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_viewport" kindref="compound">RenderViewport</ref> &amp;</type>
          <declname>viewport</declname>
        </param>
        <param>
          <type>const QRegion &amp;</type>
          <declname>region</declname>
          <defval><ref refid="namespace_k_win_1a0655524c1f1ba8dbb2cf16a1e4b9bb97" kindref="member">infiniteRegion</ref>()</defval>
        </param>
        <param>
          <type>double</type>
          <declname>opacity</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>frameOpacity</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Render the frame. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="131" column="10" bodyfile="kwin/src/effect/effectframe.cpp" bodystart="311" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_frame_1ac041fe3cdda7abebb44a5a97c4b0d7d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectFrame::setPosition</definition>
        <argsstring>(const QPoint &amp;point)</argsstring>
        <name>setPosition</name>
        <qualifiedname>KWin::EffectFrame::setPosition</qualifiedname>
        <param>
          <type>const QPoint &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="133" column="10" bodyfile="kwin/src/effect/effectframe.cpp" bodystart="306" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_frame_1a3b2d2d35364d88177b076c083c06a2b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectFrame::setAlignment</definition>
        <argsstring>(Qt::Alignment alignment)</argsstring>
        <name>setAlignment</name>
        <qualifiedname>KWin::EffectFrame::setAlignment</qualifiedname>
        <param>
          <type>Qt::Alignment</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the text alignment for static frames and the position alignment for non-static. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="138" column="10" bodyfile="kwin/src/effect/effectframe.cpp" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_frame_1a4b33c98ae004c0ff9110b16d14c2af46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Qt::Alignment</type>
        <definition>Qt::Alignment KWin::EffectFrame::alignment</definition>
        <argsstring>() const</argsstring>
        <name>alignment</name>
        <qualifiedname>KWin::EffectFrame::alignment</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="139" column="19" bodyfile="kwin/src/effect/effectframe.cpp" bodystart="247" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_frame_1a95140d64e0b2635fbfe239fce28cd431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectFrame::setGeometry</definition>
        <argsstring>(const QRect &amp;geometry, bool force=false)</argsstring>
        <name>setGeometry</name>
        <qualifiedname>KWin::EffectFrame::setGeometry</qualifiedname>
        <param>
          <type>const QRect &amp;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="140" column="10" bodyfile="kwin/src/effect/effectframe.cpp" bodystart="277" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_frame_1a45032c65f4b01746e4b7718fea2b4c3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRect</type>
        <definition>QRect KWin::EffectFrame::geometry</definition>
        <argsstring>() const</argsstring>
        <name>geometry</name>
        <qualifiedname>KWin::EffectFrame::geometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="141" column="11" bodyfile="kwin/src/effect/effectframe.cpp" bodystart="272" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_frame_1ab313dedc6c7fd0eea4b9359aa09d1229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectFrame::setText</definition>
        <argsstring>(const QString &amp;text)</argsstring>
        <name>setText</name>
        <qualifiedname>KWin::EffectFrame::setText</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="143" column="10" bodyfile="kwin/src/effect/effectframe.cpp" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_frame_1a8f2458fb6a78010193a1076895f81072" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::EffectFrame::text</definition>
        <argsstring>() const</argsstring>
        <name>text</name>
        <qualifiedname>KWin::EffectFrame::text</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="144" column="13" bodyfile="kwin/src/effect/effectframe.cpp" bodystart="325" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_frame_1aae5ce250a8fc2d7e1d2167c03a292539" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectFrame::setFont</definition>
        <argsstring>(const QFont &amp;font)</argsstring>
        <name>setFont</name>
        <qualifiedname>KWin::EffectFrame::setFont</qualifiedname>
        <param>
          <type>const QFont &amp;</type>
          <declname>font</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="145" column="10" bodyfile="kwin/src/effect/effectframe.cpp" bodystart="262" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_frame_1ac570fd7b9912983b91724e6f8ff07805" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QFont</type>
        <definition>QFont KWin::EffectFrame::font</definition>
        <argsstring>() const</argsstring>
        <name>font</name>
        <qualifiedname>KWin::EffectFrame::font</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="146" column="11" bodyfile="kwin/src/effect/effectframe.cpp" bodystart="257" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_frame_1ae448ec58a7181239f809c2980c931267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectFrame::setIcon</definition>
        <argsstring>(const QIcon &amp;icon)</argsstring>
        <name>setIcon</name>
        <qualifiedname>KWin::EffectFrame::setIcon</qualifiedname>
        <param>
          <type>const QIcon &amp;</type>
          <declname>icon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the icon that will appear on the left-hand size of the frame. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="150" column="10" bodyfile="kwin/src/effect/effectframe.cpp" bodystart="287" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_frame_1a19877ff0864dd99153cb3114548b6f1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QIcon</type>
        <definition>QIcon KWin::EffectFrame::icon</definition>
        <argsstring>() const</argsstring>
        <name>icon</name>
        <qualifiedname>KWin::EffectFrame::icon</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="151" column="11" bodyfile="kwin/src/effect/effectframe.cpp" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_frame_1a1d02261299bcef6770e6acf540bc7128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectFrame::setIconSize</definition>
        <argsstring>(const QSize &amp;size)</argsstring>
        <name>setIconSize</name>
        <qualifiedname>KWin::EffectFrame::setIconSize</qualifiedname>
        <param>
          <type>const QSize &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="152" column="10" bodyfile="kwin/src/effect/effectframe.cpp" bodystart="301" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_frame_1a62ae7527e6dc4ac80b5db6c48e80891c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QSize</type>
        <definition>QSize KWin::EffectFrame::iconSize</definition>
        <argsstring>() const</argsstring>
        <name>iconSize</name>
        <qualifiedname>KWin::EffectFrame::iconSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="153" column="11" bodyfile="kwin/src/effect/effectframe.cpp" bodystart="296" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_frame_1a7bd0020d60b122fe53a5397d2ce1b72e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1a92e14232c9fc6ccaccf6ba1db6cbc7a7" kindref="member">EffectFrameStyle</ref></type>
        <definition>EffectFrameStyle KWin::EffectFrame::style</definition>
        <argsstring>() const</argsstring>
        <name>style</name>
        <qualifiedname>KWin::EffectFrame::style</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The style of this <ref refid="class_k_win_1_1_effect_frame" kindref="compound">EffectFrame</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="158" column="22" bodyfile="kwin/src/effect/effectframe.cpp" bodystart="335" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_frame_1a9c1ba2dc867b218fb09b3814009545c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectFrame::enableCrossFade</definition>
        <argsstring>(bool enable)</argsstring>
        <name>enableCrossFade</name>
        <qualifiedname>KWin::EffectFrame::enableCrossFade</qualifiedname>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>enable</computeroutput> is <computeroutput>true</computeroutput> cross fading between icons and text is enabled By default disabled. Use setCrossFadeProgress to cross fade. Cross Fading is currently only available if OpenGL is used. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> enables cross fading, <computeroutput>false</computeroutput> disables it again </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_frame_1abba9d241b391b65f949f8eafe42fde77" kindref="member">isCrossFade</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_frame_1a3ebe463ed281da235842b4e851b4aede" kindref="member">setCrossFadeProgress</ref> </para>
</simplesect>
<simplesect kind="since"><para>4.6 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="169" column="10" bodyfile="kwin/src/effect/effectframe.cpp" bodystart="345" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_frame_1abba9d241b391b65f949f8eafe42fde77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectFrame::isCrossFade</definition>
        <argsstring>() const</argsstring>
        <name>isCrossFade</name>
        <qualifiedname>KWin::EffectFrame::isCrossFade</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if cross fading is enabled, <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_frame_1a9c1ba2dc867b218fb09b3814009545c3" kindref="member">enableCrossFade</ref> </para>
</simplesect>
<simplesect kind="since"><para>4.6 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="175" column="10" bodyfile="kwin/src/effect/effectframe.cpp" bodystart="340" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_frame_1a3ebe463ed281da235842b4e851b4aede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectFrame::setCrossFadeProgress</definition>
        <argsstring>(qreal progress)</argsstring>
        <name>setCrossFadeProgress</name>
        <qualifiedname>KWin::EffectFrame::setCrossFadeProgress</qualifiedname>
        <param>
          <type>qreal</type>
          <declname>progress</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the current progress for cross fading the last used icon/text with current icon/text to <computeroutput>progress</computeroutput>. A value of 0.0 means completely old icon/text, a value of 1.0 means completely current icon/text. Default value is 1.0. You have to enable cross fade before using it. Cross Fading is currently only available if OpenGL is used. <simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_frame_1a9c1ba2dc867b218fb09b3814009545c3" kindref="member">enableCrossFade</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_frame_1abba9d241b391b65f949f8eafe42fde77" kindref="member">isCrossFade</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_frame_1af7dfc0667a9c4f7c24c3e1d3e6150bb1" kindref="member">crossFadeProgress</ref> </para>
</simplesect>
<simplesect kind="since"><para>4.6 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="188" column="10" bodyfile="kwin/src/effect/effectframe.cpp" bodystart="355" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_frame_1af7dfc0667a9c4f7c24c3e1d3e6150bb1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>qreal KWin::EffectFrame::crossFadeProgress</definition>
        <argsstring>() const</argsstring>
        <name>crossFadeProgress</name>
        <qualifiedname>KWin::EffectFrame::crossFadeProgress</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current progress for cross fading </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_frame_1a3ebe463ed281da235842b4e851b4aede" kindref="member">setCrossFadeProgress</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_frame_1a9c1ba2dc867b218fb09b3814009545c3" kindref="member">enableCrossFade</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_frame_1abba9d241b391b65f949f8eafe42fde77" kindref="member">isCrossFade</ref> </para>
</simplesect>
<simplesect kind="since"><para>4.6 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="196" column="11" bodyfile="kwin/src/effect/effectframe.cpp" bodystart="350" bodyend="353"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Helper class for displaying text and icons in frames. </para>
    </briefdescription>
    <detaileddescription>
<para>Paints text and/or and icon with an optional frame around them. The available frames includes one that follows the default Plasma theme and another that doesn&apos;t. It is recommended to use this class whenever displaying text. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>KWin::EffectFrame</label>
        <link refid="class_k_win_1_1_effect_frame"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>KWin::EffectFrame</label>
        <link refid="class_k_win_1_1_effect_frame"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/effect/effectframe.h" line="113" column="1" bodyfile="kwin/src/effect/effectframe.h" bodystart="114" bodyend="200"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_effect_frame_1a4b33c98ae004c0ff9110b16d14c2af46" prot="public" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>alignment</name></member>
      <member refid="class_k_win_1_1_effect_frame_1af7dfc0667a9c4f7c24c3e1d3e6150bb1" prot="public" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>crossFadeProgress</name></member>
      <member refid="class_k_win_1_1_effect_frame_1a3035f6fdddeb98c9edb9f3f781a36864" prot="public" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>EffectFrame</name></member>
      <member refid="class_k_win_1_1_effect_frame_1a9c1ba2dc867b218fb09b3814009545c3" prot="public" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>enableCrossFade</name></member>
      <member refid="class_k_win_1_1_effect_frame_1ac570fd7b9912983b91724e6f8ff07805" prot="public" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>font</name></member>
      <member refid="class_k_win_1_1_effect_frame_1ae1e7684a30ff9af4522ff6fc8abe4c9b" prot="public" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>free</name></member>
      <member refid="class_k_win_1_1_effect_frame_1a45032c65f4b01746e4b7718fea2b4c3b" prot="public" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>geometry</name></member>
      <member refid="class_k_win_1_1_effect_frame_1a19877ff0864dd99153cb3114548b6f1c" prot="public" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>icon</name></member>
      <member refid="class_k_win_1_1_effect_frame_1a62ae7527e6dc4ac80b5db6c48e80891c" prot="public" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>iconSize</name></member>
      <member refid="class_k_win_1_1_effect_frame_1abba9d241b391b65f949f8eafe42fde77" prot="public" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>isCrossFade</name></member>
      <member refid="class_k_win_1_1_effect_frame_1a01fb57cb478718236c939e4880d539f4" prot="private" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>m_view</name></member>
      <member refid="class_k_win_1_1_effect_frame_1a34232993d888d81b6d1fde83a4b7056a" prot="public" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>render</name></member>
      <member refid="class_k_win_1_1_effect_frame_1a3b2d2d35364d88177b076c083c06a2b1" prot="public" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>setAlignment</name></member>
      <member refid="class_k_win_1_1_effect_frame_1a3ebe463ed281da235842b4e851b4aede" prot="public" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>setCrossFadeProgress</name></member>
      <member refid="class_k_win_1_1_effect_frame_1aae5ce250a8fc2d7e1d2167c03a292539" prot="public" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>setFont</name></member>
      <member refid="class_k_win_1_1_effect_frame_1a95140d64e0b2635fbfe239fce28cd431" prot="public" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>setGeometry</name></member>
      <member refid="class_k_win_1_1_effect_frame_1ae448ec58a7181239f809c2980c931267" prot="public" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>setIcon</name></member>
      <member refid="class_k_win_1_1_effect_frame_1a1d02261299bcef6770e6acf540bc7128" prot="public" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>setIconSize</name></member>
      <member refid="class_k_win_1_1_effect_frame_1ac041fe3cdda7abebb44a5a97c4b0d7d3" prot="public" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>setPosition</name></member>
      <member refid="class_k_win_1_1_effect_frame_1ab313dedc6c7fd0eea4b9359aa09d1229" prot="public" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>setText</name></member>
      <member refid="class_k_win_1_1_effect_frame_1a7bd0020d60b122fe53a5397d2ce1b72e" prot="public" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>style</name></member>
      <member refid="class_k_win_1_1_effect_frame_1a8f2458fb6a78010193a1076895f81072" prot="public" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>text</name></member>
      <member refid="class_k_win_1_1_effect_frame_1ad0a2ba6c89c6561ef82162b2d67966af" prot="public" virt="non-virtual"><scope>KWin::EffectFrame</scope><name>~EffectFrame</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
