<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_scene_delegate" kind="class" language="C++" prot="public">
    <compoundname>KWin::SceneDelegate</compoundname>
    <basecompoundref refid="class_k_win_1_1_render_layer_delegate" prot="public" virt="non-virtual">KWin::RenderLayerDelegate</basecompoundref>
    <derivedcompoundref refid="class_k_win_1_1_cursor_delegate_open_g_l" prot="public" virt="non-virtual">KWin::CursorDelegateOpenGL</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_cursor_delegate_q_painter" prot="public" virt="non-virtual">KWin::CursorDelegateQPainter</derivedcompoundref>
    <includes refid="scene_8h" local="no">scene.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_scene_delegate_1ad8e7e45fdbb8420d8983a204d19c6e17" prot="private" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_scene" kindref="compound">Scene</ref> *</type>
        <definition>Scene* KWin::SceneDelegate::m_scene</definition>
        <argsstring></argsstring>
        <name>m_scene</name>
        <qualifiedname>KWin::SceneDelegate::m_scene</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/scene.h" line="40" column="11" bodyfile="kwin/src/scene/scene.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_scene_delegate_1a924107cdbb9f4a8b33143f3e947c2426" prot="private" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
        <definition>Output* KWin::SceneDelegate::m_output</definition>
        <argsstring></argsstring>
        <name>m_output</name>
        <qualifiedname>KWin::SceneDelegate::m_output</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/scene.h" line="41" column="12" bodyfile="kwin/src/scene/scene.h" bodystart="41" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_scene_delegate_1af588779def5b81802b4703098e3e51aa" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::SceneDelegate::SceneDelegate</definition>
        <argsstring>(Scene *scene, Output *output)</argsstring>
        <name>SceneDelegate</name>
        <qualifiedname>KWin::SceneDelegate::SceneDelegate</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_scene" kindref="compound">Scene</ref> *</type>
          <declname>scene</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/scene.h" line="25" column="14" bodyfile="kwin/src/scene/scene.cpp" bodystart="15" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_scene_delegate_1a103fffda54f0371c7d22d5edec527e5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::SceneDelegate::~SceneDelegate</definition>
        <argsstring>() override</argsstring>
        <name>~SceneDelegate</name>
        <qualifiedname>KWin::SceneDelegate::~SceneDelegate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/scene.h" line="26" column="5" bodyfile="kwin/src/scene/scene.cpp" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_scene_delegate_1a3d8dab580174d1e397bb0e93c89bf29e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
        <definition>Output * KWin::SceneDelegate::output</definition>
        <argsstring>() const</argsstring>
        <name>output</name>
        <qualifiedname>KWin::SceneDelegate::output</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/scene.h" line="28" column="12" bodyfile="kwin/src/scene/scene.cpp" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_scene_delegate_1af32106a943eb922f0e8a16d4bb150a5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>qreal KWin::SceneDelegate::scale</definition>
        <argsstring>() const</argsstring>
        <name>scale</name>
        <qualifiedname>KWin::SceneDelegate::scale</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/scene.h" line="29" column="11" bodyfile="kwin/src/scene/scene.cpp" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_scene_delegate_1adbd454056d2ade0014b701965e0bb68d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRect</type>
        <definition>QRect KWin::SceneDelegate::viewport</definition>
        <argsstring>() const</argsstring>
        <name>viewport</name>
        <qualifiedname>KWin::SceneDelegate::viewport</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/scene.h" line="30" column="11" bodyfile="kwin/src/scene/scene.cpp" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_scene_delegate_1a256669357111ac56d45fc0a1bc9fe341" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_surface_item" kindref="compound">SurfaceItem</ref> * &gt;</type>
        <definition>QList&lt; SurfaceItem * &gt; KWin::SceneDelegate::scanoutCandidates</definition>
        <argsstring>(ssize_t maxCount) const override</argsstring>
        <name>scanoutCandidates</name>
        <qualifiedname>KWin::SceneDelegate::scanoutCandidates</qualifiedname>
        <reimplements refid="class_k_win_1_1_render_layer_delegate_1a1f0f568e59f9dd99ac3f06ae9075f16b">scanoutCandidates</reimplements>
        <param>
          <type>ssize_t</type>
          <declname>maxCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the direct scanout candidate hint. It can be used to avoid compositing the render layer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/scene.h" line="32" column="11" bodyfile="kwin/src/scene/scene.cpp" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_scene_delegate_1abce430ef0e06e0258661a0f60f4ce7ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::SceneDelegate::frame</definition>
        <argsstring>(OutputFrame *frame) override</argsstring>
        <name>frame</name>
        <qualifiedname>KWin::SceneDelegate::frame</qualifiedname>
        <reimplements refid="class_k_win_1_1_render_layer_delegate_1ac01978793c2ff944dfd9448c599e6120">frame</reimplements>
        <param>
          <type><ref refid="class_k_win_1_1_output_frame" kindref="compound">OutputFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called by the compositor after compositing the frame. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/scene.h" line="33" column="10" bodyfile="kwin/src/scene/scene.cpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_scene_delegate_1a51f0aba47897e8e279a3574e9601fb02" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>QRegion</type>
        <definition>QRegion KWin::SceneDelegate::prePaint</definition>
        <argsstring>() override</argsstring>
        <name>prePaint</name>
        <qualifiedname>KWin::SceneDelegate::prePaint</qualifiedname>
        <reimplements refid="class_k_win_1_1_render_layer_delegate_1a6af615d88f0bf368032ad62ceb24f1c7">prePaint</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called by the compositor before starting painting. Reimplement this function to do frame initialization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/scene.h" line="34" column="13" bodyfile="kwin/src/scene/scene.cpp" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_scene_delegate_1a39c4ee10614f1314f4e3e4767c3d9854" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::SceneDelegate::postPaint</definition>
        <argsstring>() override</argsstring>
        <name>postPaint</name>
        <qualifiedname>KWin::SceneDelegate::postPaint</qualifiedname>
        <reimplements refid="class_k_win_1_1_render_layer_delegate_1a82f0eb7d816c51dbb4f148b78e61461c">postPaint</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called by the compositor after finishing painting. Reimplement this function to do post frame cleanup. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/scene.h" line="35" column="10" bodyfile="kwin/src/scene/scene.cpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_scene_delegate_1a394e47b6276bb6e724238a627627631c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::SceneDelegate::paint</definition>
        <argsstring>(const RenderTarget &amp;renderTarget, const QRegion &amp;region) override</argsstring>
        <name>paint</name>
        <qualifiedname>KWin::SceneDelegate::paint</qualifiedname>
        <reimplements refid="class_k_win_1_1_render_layer_delegate_1a3f500bc2d919a140f1f88bba94e88dcf">paint</reimplements>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref> &amp;</type>
          <declname>renderTarget</declname>
        </param>
        <param>
          <type>const QRegion &amp;</type>
          <declname>region</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called when the compositor wants the render layer delegate to repaint its contents. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/scene.h" line="36" column="10" bodyfile="kwin/src/scene/scene.cpp" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_scene_delegate_1a4814c93bede9faa4528a23a9585eaa60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double KWin::SceneDelegate::desiredHdrHeadroom</definition>
        <argsstring>() const override</argsstring>
        <name>desiredHdrHeadroom</name>
        <qualifiedname>KWin::SceneDelegate::desiredHdrHeadroom</qualifiedname>
        <reimplements refid="class_k_win_1_1_render_layer_delegate_1a3aaceb67720f15dec80000e0f1560031">desiredHdrHeadroom</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/scene.h" line="37" column="12" bodyfile="kwin/src/scene/scene.cpp" bodystart="47" bodyend="50"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>KWin::CursorDelegateOpenGL</label>
        <link refid="class_k_win_1_1_cursor_delegate_open_g_l"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>KWin::CursorDelegateQPainter</label>
        <link refid="class_k_win_1_1_cursor_delegate_q_painter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>KWin::RenderLayerDelegate</label>
        <link refid="class_k_win_1_1_render_layer_delegate"/>
      </node>
      <node id="1">
        <label>KWin::SceneDelegate</label>
        <link refid="class_k_win_1_1_scene_delegate"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>KWin::RenderLayerDelegate</label>
        <link refid="class_k_win_1_1_render_layer_delegate"/>
      </node>
      <node id="1">
        <label>KWin::SceneDelegate</label>
        <link refid="class_k_win_1_1_scene_delegate"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="kwin/src/scene/scene.h" line="22" column="1" bodyfile="kwin/src/scene/scene.h" bodystart="23" bodyend="42"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_scene_delegate_1a4814c93bede9faa4528a23a9585eaa60" prot="public" virt="virtual"><scope>KWin::SceneDelegate</scope><name>desiredHdrHeadroom</name></member>
      <member refid="class_k_win_1_1_scene_delegate_1abce430ef0e06e0258661a0f60f4ce7ea" prot="public" virt="virtual"><scope>KWin::SceneDelegate</scope><name>frame</name></member>
      <member refid="class_k_win_1_1_render_layer_delegate_1adac9614a26fc1d3e137b0f83786fb6ea" prot="public" virt="non-virtual"><scope>KWin::SceneDelegate</scope><name>layer</name></member>
      <member refid="class_k_win_1_1_scene_delegate_1a924107cdbb9f4a8b33143f3e947c2426" prot="private" virt="non-virtual"><scope>KWin::SceneDelegate</scope><name>m_output</name></member>
      <member refid="class_k_win_1_1_scene_delegate_1ad8e7e45fdbb8420d8983a204d19c6e17" prot="private" virt="non-virtual"><scope>KWin::SceneDelegate</scope><name>m_scene</name></member>
      <member refid="class_k_win_1_1_scene_delegate_1a3d8dab580174d1e397bb0e93c89bf29e" prot="public" virt="non-virtual"><scope>KWin::SceneDelegate</scope><name>output</name></member>
      <member refid="class_k_win_1_1_scene_delegate_1a394e47b6276bb6e724238a627627631c" prot="public" virt="virtual"><scope>KWin::SceneDelegate</scope><name>paint</name></member>
      <member refid="class_k_win_1_1_scene_delegate_1a39c4ee10614f1314f4e3e4767c3d9854" prot="public" virt="virtual"><scope>KWin::SceneDelegate</scope><name>postPaint</name></member>
      <member refid="class_k_win_1_1_scene_delegate_1a51f0aba47897e8e279a3574e9601fb02" prot="public" virt="virtual"><scope>KWin::SceneDelegate</scope><name>prePaint</name></member>
      <member refid="class_k_win_1_1_scene_delegate_1af32106a943eb922f0e8a16d4bb150a5b" prot="public" virt="non-virtual"><scope>KWin::SceneDelegate</scope><name>scale</name></member>
      <member refid="class_k_win_1_1_scene_delegate_1a256669357111ac56d45fc0a1bc9fe341" prot="public" virt="virtual"><scope>KWin::SceneDelegate</scope><name>scanoutCandidates</name></member>
      <member refid="class_k_win_1_1_scene_delegate_1af588779def5b81802b4703098e3e51aa" prot="public" virt="non-virtual"><scope>KWin::SceneDelegate</scope><name>SceneDelegate</name></member>
      <member refid="class_k_win_1_1_render_layer_delegate_1ada9a5fe83fc046fbb68b98217fc8e19b" prot="public" virt="non-virtual"><scope>KWin::SceneDelegate</scope><name>setLayer</name></member>
      <member refid="class_k_win_1_1_scene_delegate_1adbd454056d2ade0014b701965e0bb68d" prot="public" virt="non-virtual"><scope>KWin::SceneDelegate</scope><name>viewport</name></member>
      <member refid="class_k_win_1_1_render_layer_delegate_1a27de4a1c4ac9ff226df4b8eefb548f45" prot="public" virt="virtual"><scope>KWin::SceneDelegate</scope><name>~RenderLayerDelegate</name></member>
      <member refid="class_k_win_1_1_scene_delegate_1a103fffda54f0371c7d22d5edec527e5c" prot="public" virt="non-virtual"><scope>KWin::SceneDelegate</scope><name>~SceneDelegate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
