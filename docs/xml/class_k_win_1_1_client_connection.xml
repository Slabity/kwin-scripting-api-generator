<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_client_connection" kind="class" language="C++" prot="public">
    <compoundname>KWin::ClientConnection</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QObject</basecompoundref>
    <includes refid="clientconnection_8h" local="no">clientconnection.h</includes>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_k_win_1_1_client_connection_1a97af53b9a9ff09603a3dbcbe7074ad11" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Display</definition>
        <argsstring></argsstring>
        <name>Display</name>
        <qualifiedname>KWin::ClientConnection::Display</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_display" kindref="compound">Display</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/clientconnection.h" line="143" column="18" bodyfile="kwin/src/wayland/clientconnection.h" bodystart="143" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_client_connection_1acaadde4baf4b142557a601fcd94bda6d" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_client_connection_private" kindref="compound">ClientConnectionPrivate</ref> &gt;</type>
        <definition>std::unique_ptr&lt;ClientConnectionPrivate&gt; KWin::ClientConnection::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <qualifiedname>KWin::ClientConnection::d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/clientconnection.h" line="145" column="21" bodyfile="kwin/src/wayland/clientconnection.h" bodystart="145" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_client_connection_1a4ee9e810b5c3f429f648d313ac5356f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>KWin::ClientConnection::~ClientConnection</definition>
        <argsstring>()</argsstring>
        <name>~ClientConnection</name>
        <qualifiedname>KWin::ClientConnection::~ClientConnection</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/clientconnection.h" line="35" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_client_connection_1a0d9bc58f88c4a594a6a3e581ddcfdac4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ClientConnection::flush</definition>
        <argsstring>()</argsstring>
        <name>flush</name>
        <qualifiedname>KWin::ClientConnection::flush</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flushes the connection to this client. Ensures that all events are pushed to the client. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/clientconnection.h" line="40" column="10" bodyfile="kwin/src/wayland/clientconnection.cpp" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_client_connection_1a5ba6671f13d50b3efd9328f81dd41aab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>wl_resource *</type>
        <definition>wl_resource * KWin::ClientConnection::getResource</definition>
        <argsstring>(quint32 id) const</argsstring>
        <name>getResource</name>
        <qualifiedname>KWin::ClientConnection::getResource</qualifiedname>
        <param>
          <type>quint32</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the wl_resource associated with the given <computeroutput>id</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/clientconnection.h" line="44" column="17" bodyfile="kwin/src/wayland/clientconnection.cpp" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_client_connection_1aa3b49670cf09ff8b5bf837f7ba29f7d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>wl_client *</type>
        <definition>wl_client * KWin::ClientConnection::client</definition>
        <argsstring>() const</argsstring>
        <name>client</name>
        <qualifiedname>KWin::ClientConnection::client</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the native wl_client this <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> represents. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/clientconnection.h" line="49" column="15" bodyfile="kwin/src/wayland/clientconnection.cpp" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_client_connection_1a635055023a16313b85a1715ef73b6e9f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_display" kindref="compound">Display</ref> *</type>
        <definition>Display * KWin::ClientConnection::display</definition>
        <argsstring>() const</argsstring>
        <name>display</name>
        <qualifiedname>KWin::ClientConnection::display</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The <ref refid="class_k_win_1_1_display" kindref="compound">Display</ref> this <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> is connected to </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/clientconnection.h" line="53" column="13" bodyfile="kwin/src/wayland/clientconnection.cpp" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_client_connection_1a2f9fb48a2e72330e0f5b170a30fd4212" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>pid_t</type>
        <definition>pid_t KWin::ClientConnection::processId</definition>
        <argsstring>() const</argsstring>
        <name>processId</name>
        <qualifiedname>KWin::ClientConnection::processId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The pid of the <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> endpoint.</para>
<para>Please note: if the <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> got created with <ref refid="class_k_win_1_1_display_1a07034ffcff1c993fe2efabbb4371ab77" kindref="member">Display::createClient</ref> the pid will be identical to the process running the <ref refid="class_k_win_1_1_display" kindref="compound">KWin::Display</ref>.</para>
<para><simplesect kind="return"><para>The pid of the connection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/clientconnection.h" line="63" column="11" bodyfile="kwin/src/wayland/clientconnection.cpp" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_client_connection_1a12cc688a7ce7fec08507f9f087f86b7c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uid_t</type>
        <definition>uid_t KWin::ClientConnection::userId</definition>
        <argsstring>() const</argsstring>
        <name>userId</name>
        <qualifiedname>KWin::ClientConnection::userId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The uid of the <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> endpoint.</para>
<para>Please note: if the <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> got created with <ref refid="class_k_win_1_1_display_1a07034ffcff1c993fe2efabbb4371ab77" kindref="member">Display::createClient</ref> the uid will be identical to the process running the <ref refid="class_k_win_1_1_display" kindref="compound">KWin::Display</ref>.</para>
<para><simplesect kind="return"><para>The uid of the connection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/clientconnection.h" line="72" column="11" bodyfile="kwin/src/wayland/clientconnection.cpp" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_client_connection_1a70dfcbf2db8478f74888bdad07c4ba5c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>gid_t</type>
        <definition>gid_t KWin::ClientConnection::groupId</definition>
        <argsstring>() const</argsstring>
        <name>groupId</name>
        <qualifiedname>KWin::ClientConnection::groupId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The gid of the <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> endpoint.</para>
<para>Please note: if the <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> got created with <ref refid="class_k_win_1_1_display_1a07034ffcff1c993fe2efabbb4371ab77" kindref="member">Display::createClient</ref> the gid will be identical to the process running the <ref refid="class_k_win_1_1_display" kindref="compound">KWin::Display</ref>.</para>
<para><simplesect kind="return"><para>The gid of the connection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/clientconnection.h" line="81" column="11" bodyfile="kwin/src/wayland/clientconnection.cpp" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_client_connection_1a14c8bb705cafaad238432319d429b68e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::ClientConnection::executablePath</definition>
        <argsstring>() const</argsstring>
        <name>executablePath</name>
        <qualifiedname>KWin::ClientConnection::executablePath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The absolute path to the executable.</para>
<para>Please note: if the <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> got created with <ref refid="class_k_win_1_1_display_1a07034ffcff1c993fe2efabbb4371ab77" kindref="member">Display::createClient</ref> the executablePath will be identical to the process running the <ref refid="class_k_win_1_1_display" kindref="compound">KWin::Display</ref>.</para>
<para>If the executable path cannot be resolved an empty QString is returned.</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_client_connection_1a2f9fb48a2e72330e0f5b170a30fd4212" kindref="member">processId</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/clientconnection.h" line="93" column="13" bodyfile="kwin/src/wayland/clientconnection.cpp" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_client_connection_1a95a6bcfedab45fe6df5918380894e834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::ClientConnection::operator wl_client *</definition>
        <argsstring>()</argsstring>
        <name>operator wl_client *</name>
        <qualifiedname>KWin::ClientConnection::operator wl_client *</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cast operator the native wl_client this <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> represents. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/clientconnection.h" line="98" column="5" bodyfile="kwin/src/wayland/clientconnection.cpp" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_client_connection_1af0802b9573a77993ac928b1978fd147f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::ClientConnection::operator wl_client *</definition>
        <argsstring>() const</argsstring>
        <name>operator wl_client *</name>
        <qualifiedname>KWin::ClientConnection::operator wl_client *</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cast operator the native wl_client this <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> represents. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/clientconnection.h" line="102" column="5" bodyfile="kwin/src/wayland/clientconnection.cpp" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_client_connection_1a88ead87bf9710ef8a329432a4aab854a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ClientConnection::destroy</definition>
        <argsstring>()</argsstring>
        <name>destroy</name>
        <qualifiedname>KWin::ClientConnection::destroy</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroys this <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref>. This is a convenient wrapper around wl_client_destroy. The use case is in combination with ClientConnections created through <ref refid="class_k_win_1_1_display_1a07034ffcff1c993fe2efabbb4371ab77" kindref="member">Display::createClient</ref>. E.g. once the process for the <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> exited, the <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> needs to be destroyed, too. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/clientconnection.h" line="110" column="10" bodyfile="kwin/src/wayland/clientconnection.cpp" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_client_connection_1a12b3837602c68f64c096301e195bd82c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ClientConnection::setScaleOverride</definition>
        <argsstring>(qreal scaleOverride)</argsstring>
        <name>setScaleOverride</name>
        <qualifiedname>KWin::ClientConnection::setScaleOverride</qualifiedname>
        <param>
          <type>qreal</type>
          <declname>scaleOverride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set an additional mapping between kwin&apos;s logical co-ordinate space and the client&apos;s logical co-ordinate space.</para>
<para>This is used in the same way as if the client was setting the surface.buffer_scale on every surface i.e a value of 2.0 will make the windows appear smaller on a regular DPI monitor.</para>
<para>Only the minimal set of protocols used by xwayland have support.</para>
<para>Buffer sizes are unaffected. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/clientconnection.h" line="124" column="10" bodyfile="kwin/src/wayland/clientconnection.cpp" bodystart="157" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_client_connection_1aedf8276f02e493fe5297ff54ef901a68" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>qreal KWin::ClientConnection::scaleOverride</definition>
        <argsstring>() const</argsstring>
        <name>scaleOverride</name>
        <qualifiedname>KWin::ClientConnection::scaleOverride</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/clientconnection.h" line="125" column="11" bodyfile="kwin/src/wayland/clientconnection.cpp" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_client_connection_1ad0243e8722894d431933828af1485000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ClientConnection::setSecurityContextAppId</definition>
        <argsstring>(const QString &amp;appId)</argsstring>
        <name>setSecurityContextAppId</name>
        <qualifiedname>KWin::ClientConnection::setSecurityContextAppId</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>appId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/clientconnection.h" line="127" column="10" bodyfile="kwin/src/wayland/clientconnection.cpp" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_client_connection_1a575257ba6fc5d7b5d65e91092b15365b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::ClientConnection::securityContextAppId</definition>
        <argsstring>() const</argsstring>
        <name>securityContextAppId</name>
        <qualifiedname>KWin::ClientConnection::securityContextAppId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/clientconnection.h" line="128" column="13" bodyfile="kwin/src/wayland/clientconnection.cpp" bodystart="174" bodyend="177"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="signal">
      <memberdef kind="signal" id="class_k_win_1_1_client_connection_1a8e212adb4355ce097b0ac314a8b744df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ClientConnection::aboutToBeDestroyed</definition>
        <argsstring>()</argsstring>
        <name>aboutToBeDestroyed</name>
        <qualifiedname>KWin::ClientConnection::aboutToBeDestroyed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the client is about to be destroyed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/clientconnection.h" line="134" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_client_connection_1ad7bc6fb81b62838582ac033050abc13c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ClientConnection::disconnected</definition>
        <argsstring>(KWin::ClientConnection *)</argsstring>
        <name>disconnected</name>
        <qualifiedname>KWin::ClientConnection::disconnected</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_client_connection" kindref="compound">KWin::ClientConnection</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted when the <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> got disconnected from the server. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/clientconnection.h" line="138" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_client_connection_1add152dd3b2eec28cf0d737d8affb411f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ClientConnection::scaleOverrideChanged</definition>
        <argsstring>()</argsstring>
        <name>scaleOverrideChanged</name>
        <qualifiedname>KWin::ClientConnection::scaleOverrideChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/clientconnection.h" line="140" column="10"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_k_win_1_1_client_connection_1a4d0baa962f4fccf96a4993fbc1b42f34" prot="private" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::ClientConnection::ClientConnection</definition>
        <argsstring>(wl_client *c, Display *parent)</argsstring>
        <name>ClientConnection</name>
        <qualifiedname>KWin::ClientConnection::ClientConnection</qualifiedname>
        <param>
          <type>wl_client *</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_display" kindref="compound">Display</ref> *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/clientconnection.h" line="144" column="14" bodyfile="kwin/src/wayland/clientconnection.cpp" bodystart="94" bodyend="98"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Convenient Class which represents a wl_client. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> gets automatically created for a wl_client. In particular, the signal <ref refid="class_k_win_1_1_display_1a04054e9c882bab1a04bbf319585712e5" kindref="member">Display::clientConnected</ref> will be emitted.</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_display" kindref="compound">Display</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>KWin::ClientConnection</label>
        <link refid="class_k_win_1_1_client_connection"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>KWin::ClientConnection</label>
        <link refid="class_k_win_1_1_client_connection"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/wayland/clientconnection.h" line="31" column="1" bodyfile="kwin/src/wayland/clientconnection.h" bodystart="32" bodyend="146"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_client_connection_1a8e212adb4355ce097b0ac314a8b744df" prot="public" virt="non-virtual"><scope>KWin::ClientConnection</scope><name>aboutToBeDestroyed</name></member>
      <member refid="class_k_win_1_1_client_connection_1aa3b49670cf09ff8b5bf837f7ba29f7d2" prot="public" virt="non-virtual"><scope>KWin::ClientConnection</scope><name>client</name></member>
      <member refid="class_k_win_1_1_client_connection_1a4d0baa962f4fccf96a4993fbc1b42f34" prot="private" virt="non-virtual"><scope>KWin::ClientConnection</scope><name>ClientConnection</name></member>
      <member refid="class_k_win_1_1_client_connection_1acaadde4baf4b142557a601fcd94bda6d" prot="private" virt="non-virtual"><scope>KWin::ClientConnection</scope><name>d</name></member>
      <member refid="class_k_win_1_1_client_connection_1a88ead87bf9710ef8a329432a4aab854a" prot="public" virt="non-virtual"><scope>KWin::ClientConnection</scope><name>destroy</name></member>
      <member refid="class_k_win_1_1_client_connection_1ad7bc6fb81b62838582ac033050abc13c" prot="public" virt="non-virtual"><scope>KWin::ClientConnection</scope><name>disconnected</name></member>
      <member refid="class_k_win_1_1_client_connection_1a97af53b9a9ff09603a3dbcbe7074ad11" prot="private" virt="non-virtual"><scope>KWin::ClientConnection</scope><name>Display</name></member>
      <member refid="class_k_win_1_1_client_connection_1a635055023a16313b85a1715ef73b6e9f" prot="public" virt="non-virtual"><scope>KWin::ClientConnection</scope><name>display</name></member>
      <member refid="class_k_win_1_1_client_connection_1a14c8bb705cafaad238432319d429b68e" prot="public" virt="non-virtual"><scope>KWin::ClientConnection</scope><name>executablePath</name></member>
      <member refid="class_k_win_1_1_client_connection_1a0d9bc58f88c4a594a6a3e581ddcfdac4" prot="public" virt="non-virtual"><scope>KWin::ClientConnection</scope><name>flush</name></member>
      <member refid="class_k_win_1_1_client_connection_1a5ba6671f13d50b3efd9328f81dd41aab" prot="public" virt="non-virtual"><scope>KWin::ClientConnection</scope><name>getResource</name></member>
      <member refid="class_k_win_1_1_client_connection_1a70dfcbf2db8478f74888bdad07c4ba5c" prot="public" virt="non-virtual"><scope>KWin::ClientConnection</scope><name>groupId</name></member>
      <member refid="class_k_win_1_1_client_connection_1a95a6bcfedab45fe6df5918380894e834" prot="public" virt="non-virtual"><scope>KWin::ClientConnection</scope><name>operator wl_client *</name></member>
      <member refid="class_k_win_1_1_client_connection_1af0802b9573a77993ac928b1978fd147f" prot="public" virt="non-virtual"><scope>KWin::ClientConnection</scope><name>operator wl_client *</name></member>
      <member refid="class_k_win_1_1_client_connection_1a2f9fb48a2e72330e0f5b170a30fd4212" prot="public" virt="non-virtual"><scope>KWin::ClientConnection</scope><name>processId</name></member>
      <member refid="class_k_win_1_1_client_connection_1aedf8276f02e493fe5297ff54ef901a68" prot="public" virt="non-virtual"><scope>KWin::ClientConnection</scope><name>scaleOverride</name></member>
      <member refid="class_k_win_1_1_client_connection_1add152dd3b2eec28cf0d737d8affb411f" prot="public" virt="non-virtual"><scope>KWin::ClientConnection</scope><name>scaleOverrideChanged</name></member>
      <member refid="class_k_win_1_1_client_connection_1a575257ba6fc5d7b5d65e91092b15365b" prot="public" virt="non-virtual"><scope>KWin::ClientConnection</scope><name>securityContextAppId</name></member>
      <member refid="class_k_win_1_1_client_connection_1a12b3837602c68f64c096301e195bd82c" prot="public" virt="non-virtual"><scope>KWin::ClientConnection</scope><name>setScaleOverride</name></member>
      <member refid="class_k_win_1_1_client_connection_1ad0243e8722894d431933828af1485000" prot="public" virt="non-virtual"><scope>KWin::ClientConnection</scope><name>setSecurityContextAppId</name></member>
      <member refid="class_k_win_1_1_client_connection_1a12cc688a7ce7fec08507f9f087f86b7c" prot="public" virt="non-virtual"><scope>KWin::ClientConnection</scope><name>userId</name></member>
      <member refid="class_k_win_1_1_client_connection_1a4ee9e810b5c3f429f648d313ac5356f6" prot="public" virt="virtual"><scope>KWin::ClientConnection</scope><name>~ClientConnection</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
