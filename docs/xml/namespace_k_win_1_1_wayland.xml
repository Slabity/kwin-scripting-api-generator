<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="namespace_k_win_1_1_wayland" kind="namespace" language="C++">
    <compoundname>KWin::Wayland</compoundname>
    <innerclass refid="class_k_win_1_1_wayland_1_1_color_manager" prot="public">KWin::Wayland::ColorManager</innerclass>
    <innerclass refid="struct_k_win_1_1_wayland_1_1s__presentation_listener" prot="public">KWin::Wayland::s_presentationListener</innerclass>
    <innerclass refid="class_k_win_1_1_wayland_1_1_wayland_backend" prot="public">KWin::Wayland::WaylandBackend</innerclass>
    <innerclass refid="struct_k_win_1_1_wayland_1_1_wayland_backend_options" prot="public">KWin::Wayland::WaylandBackendOptions</innerclass>
    <innerclass refid="class_k_win_1_1_wayland_1_1_wayland_buffer" prot="public">KWin::Wayland::WaylandBuffer</innerclass>
    <innerclass refid="class_k_win_1_1_wayland_1_1_wayland_cursor" prot="public">KWin::Wayland::WaylandCursor</innerclass>
    <innerclass refid="class_k_win_1_1_wayland_1_1_wayland_display" prot="public">KWin::Wayland::WaylandDisplay</innerclass>
    <innerclass refid="class_k_win_1_1_wayland_1_1_wayland_egl_backend" prot="public">KWin::Wayland::WaylandEglBackend</innerclass>
    <innerclass refid="class_k_win_1_1_wayland_1_1_wayland_egl_cursor_layer" prot="public">KWin::Wayland::WaylandEglCursorLayer</innerclass>
    <innerclass refid="class_k_win_1_1_wayland_1_1_wayland_egl_primary_layer" prot="public">KWin::Wayland::WaylandEglPrimaryLayer</innerclass>
    <innerclass refid="class_k_win_1_1_wayland_1_1_wayland_event_thread" prot="public">KWin::Wayland::WaylandEventThread</innerclass>
    <innerclass refid="class_k_win_1_1_wayland_1_1_wayland_input_backend" prot="public">KWin::Wayland::WaylandInputBackend</innerclass>
    <innerclass refid="class_k_win_1_1_wayland_1_1_wayland_input_device" prot="public">KWin::Wayland::WaylandInputDevice</innerclass>
    <innerclass refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1" prot="public">KWin::Wayland::WaylandLinuxDmabufFeedbackV1</innerclass>
    <innerclass refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_v1" prot="public">KWin::Wayland::WaylandLinuxDmabufV1</innerclass>
    <innerclass refid="class_k_win_1_1_wayland_1_1_wayland_output" prot="public">KWin::Wayland::WaylandOutput</innerclass>
    <innerclass refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_backend" prot="public">KWin::Wayland::WaylandQPainterBackend</innerclass>
    <innerclass refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_cursor_layer" prot="public">KWin::Wayland::WaylandQPainterCursorLayer</innerclass>
    <innerclass refid="class_k_win_1_1_wayland_1_1_wayland_q_painter_primary_layer" prot="public">KWin::Wayland::WaylandQPainterPrimaryLayer</innerclass>
    <innerclass refid="class_k_win_1_1_wayland_1_1_wayland_seat" prot="public">KWin::Wayland::WaylandSeat</innerclass>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespace_k_win_1_1_wayland_1a23b37038f7a2d358b577a013f768c6a3" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>double</type>
        <definition>double KWin::Wayland::s_primariesUnit</definition>
        <argsstring></argsstring>
        <name>s_primariesUnit</name>
        <qualifiedname>KWin::Wayland::s_primariesUnit</qualifiedname>
        <initializer>= 1.0 / 1&apos;000&apos;000.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/wayland/color_manager.cpp" line="118" column="25" bodyfile="kwin/src/backends/wayland/color_manager.cpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1_1_wayland_1a3cd1eb3922aec82c72d86bc26e3f66ce" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool KWin::Wayland::bufferAgeEnabled</definition>
        <argsstring></argsstring>
        <name>bufferAgeEnabled</name>
        <qualifiedname>KWin::Wayland::bufferAgeEnabled</qualifiedname>
        <initializer>= qEnvironmentVariable(&quot;KWIN_USE_BUFFER_AGE&quot;) != QStringLiteral(&quot;0&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/wayland/wayland_egl_backend.cpp" line="36" column="19" bodyfile="kwin/src/backends/wayland/wayland_egl_backend.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespace_k_win_1_1_wayland_1aef2e522e07caade7cc85fa31a0b7aae3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; uint32_t &gt;</type>
        <definition>static std::optional&lt; uint32_t &gt; KWin::Wayland::kwinPrimariesToProtoPrimaires</definition>
        <argsstring>(const Colorimetry &amp;color)</argsstring>
        <name>kwinPrimariesToProtoPrimaires</name>
        <qualifiedname>KWin::Wayland::kwinPrimariesToProtoPrimaires</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/wayland/color_manager.cpp" line="76" column="22" bodyfile="kwin/src/backends/wayland/color_manager.cpp" bodystart="76" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_wayland_1a3715f41a69139b41d48ead54ee17e51b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t KWin::Wayland::kwinTFtoProtoTF</definition>
        <argsstring>(TransferFunction tf)</argsstring>
        <name>kwinTFtoProtoTF</name>
        <qualifiedname>KWin::Wayland::kwinTFtoProtoTF</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_transfer_function" kindref="compound">TransferFunction</ref></type>
          <declname>tf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/wayland/color_manager.cpp" line="103" column="17" bodyfile="kwin/src/backends/wayland/color_manager.cpp" bodystart="103" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_wayland_1a3ee07044b220ba60d7f96d4e06b917b5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>QPointF</type>
        <definition>static QPointF KWin::Wayland::sizeToPoint</definition>
        <argsstring>(const QSizeF &amp;size)</argsstring>
        <name>sizeToPoint</name>
        <qualifiedname>KWin::Wayland::sizeToPoint</qualifiedname>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/wayland/wayland_backend.cpp" line="45" column="23" bodyfile="kwin/src/backends/wayland/wayland_backend.cpp" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_wayland_1ad07baaa5c85cd86efc602095f5e1252a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wl_buffer *</type>
        <definition>static wl_buffer * KWin::Wayland::importDmaBufBuffer</definition>
        <argsstring>(WaylandDisplay *display, const DmaBufAttributes *attributes)</argsstring>
        <name>importDmaBufBuffer</name>
        <qualifiedname>KWin::Wayland::importDmaBufBuffer</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_wayland_1_1_wayland_display" kindref="compound">WaylandDisplay</ref> *</type>
          <declname>display</declname>
        </param>
        <param>
          <type>const <ref refid="struct_k_win_1_1_dma_buf_attributes" kindref="compound">DmaBufAttributes</ref> *</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/wayland/wayland_backend.cpp" line="581" column="18" bodyfile="kwin/src/backends/wayland/wayland_backend.cpp" bodystart="581" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_wayland_1af2f17af5d7da44d04cb417cfe6adaf29" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wl_buffer *</type>
        <definition>static wl_buffer * KWin::Wayland::importShmBuffer</definition>
        <argsstring>(WaylandDisplay *display, const ShmAttributes *attributes)</argsstring>
        <name>importShmBuffer</name>
        <qualifiedname>KWin::Wayland::importShmBuffer</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_wayland_1_1_wayland_display" kindref="compound">WaylandDisplay</ref> *</type>
          <declname>display</declname>
        </param>
        <param>
          <type>const <ref refid="struct_k_win_1_1_shm_attributes" kindref="compound">ShmAttributes</ref> *</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/wayland/wayland_backend.cpp" line="600" column="18" bodyfile="kwin/src/backends/wayland/wayland_backend.cpp" bodystart="600" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_wayland_1a6a804279137b1f3c55412b89ab5798f0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dev_t</type>
        <definition>static dev_t KWin::Wayland::deserializeDeviceId</definition>
        <argsstring>(wl_array *data)</argsstring>
        <name>deserializeDeviceId</name>
        <qualifiedname>KWin::Wayland::deserializeDeviceId</qualifiedname>
        <param>
          <type>wl_array *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/wayland/wayland_display.cpp" line="158" column="14" bodyfile="kwin/src/backends/wayland/wayland_display.cpp" bodystart="158" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_wayland_1aa24e8a3398dc39275ea62c1fc4824d3c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::Wayland::handleDiscarded</definition>
        <argsstring>(void *data, struct wp_presentation_feedback *wp_presentation_feedback)</argsstring>
        <name>handleDiscarded</name>
        <qualifiedname>KWin::Wayland::handleDiscarded</qualifiedname>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>struct wp_presentation_feedback *</type>
          <declname>wp_presentation_feedback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/wayland/wayland_output.cpp" line="184" column="13" bodyfile="kwin/src/backends/wayland/wayland_output.cpp" bodystart="184" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_wayland_1a04c53a2df0f28d55cd46c8d609c6a7f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::Wayland::handlePresented</definition>
        <argsstring>(void *data, struct wp_presentation_feedback *wp_presentation_feedback, uint32_t tv_sec_hi, uint32_t tv_sec_lo, uint32_t tv_nsec, uint32_t refresh, uint32_t seq_hi, uint32_t seq_lo, uint32_t flags)</argsstring>
        <name>handlePresented</name>
        <qualifiedname>KWin::Wayland::handlePresented</qualifiedname>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>struct wp_presentation_feedback *</type>
          <declname>wp_presentation_feedback</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>tv_sec_hi</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>tv_sec_lo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>tv_nsec</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>refresh</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>seq_hi</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>seq_lo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/wayland/wayland_output.cpp" line="190" column="13" bodyfile="kwin/src/backends/wayland/wayland_output.cpp" bodystart="190" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1_1_wayland_1a70c5aef4ce290280cb30a7f45cbe63b9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::Wayland::handleSyncOutput</definition>
        <argsstring>(void *data, struct wp_presentation_feedback *, struct wl_output *)</argsstring>
        <name>handleSyncOutput</name>
        <qualifiedname>KWin::Wayland::handleSyncOutput</qualifiedname>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>struct wp_presentation_feedback *</type>
        </param>
        <param>
          <type>struct wl_output *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/wayland/wayland_output.cpp" line="208" column="13" bodyfile="kwin/src/backends/wayland/wayland_output.cpp" bodystart="208" bodyend="211"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="kwin/src/backends/wayland/color_manager.cpp" line="10" column="1"/>
  </compounddef>
</doxygen>
