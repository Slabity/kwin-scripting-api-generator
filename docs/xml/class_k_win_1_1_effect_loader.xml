<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_effect_loader" kind="class" language="C++" prot="public">
    <compoundname>KWin::EffectLoader</compoundname>
    <basecompoundref refid="class_k_win_1_1_abstract_effect_loader" prot="public" virt="non-virtual">KWin::AbstractEffectLoader</basecompoundref>
    <includes refid="effectloader_8h" local="no">effectloader.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_effect_loader_1a66d077b6cb6e7b895e70bf80f52d19d2" prot="private" static="no" mutable="no">
        <type>QList&lt; <ref refid="class_k_win_1_1_abstract_effect_loader" kindref="compound">AbstractEffectLoader</ref> * &gt;</type>
        <definition>QList&lt;AbstractEffectLoader *&gt; KWin::EffectLoader::m_loaders</definition>
        <argsstring></argsstring>
        <name>m_loaders</name>
        <qualifiedname>KWin::EffectLoader::m_loaders</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="342" column="11" bodyfile="kwin/src/effect/effectloader.h" bodystart="342" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_effect_loader_1a8adbdd15efea1d7787207bef9e3e2af7" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::EffectLoader::EffectLoader</definition>
        <argsstring>(QObject *parent=nullptr)</argsstring>
        <name>EffectLoader</name>
        <qualifiedname>KWin::EffectLoader::EffectLoader</qualifiedname>
        <param>
          <type>QObject *</type>
          <declname>parent</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="331" column="14" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="413" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_loader_1ab64bbf9a143395153fedd01c43db9dc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::EffectLoader::~EffectLoader</definition>
        <argsstring>() override</argsstring>
        <name>~EffectLoader</name>
        <qualifiedname>KWin::EffectLoader::~EffectLoader</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="332" column="5" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="423" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_loader_1a72cb689ba0ce539e92d0b8443121dddb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::EffectLoader::hasEffect</definition>
        <argsstring>(const QString &amp;name) const override</argsstring>
        <name>hasEffect</name>
        <qualifiedname>KWin::EffectLoader::hasEffect</qualifiedname>
        <reimplements refid="class_k_win_1_1_abstract_effect_loader_1a60477aa2be67a8391bb9d45d2cbb7fb9">hasEffect</reimplements>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Whether this <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> Loader can load the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> with the given <computeroutput>name</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> Loader determines whether it knows or can find an <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> called <computeroutput>name</computeroutput>, and thus whether it can attempt to load the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> to look for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool <computeroutput>true</computeroutput> if the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> Loader knows this effect, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="333" column="10" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="427" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_loader_1aa3c8cde0a570830fbb4defd2bc9e180b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::EffectLoader::isEffectSupported</definition>
        <argsstring>(const QString &amp;name) const override</argsstring>
        <name>isEffectSupported</name>
        <qualifiedname>KWin::EffectLoader::isEffectSupported</qualifiedname>
        <reimplements refid="class_k_win_1_1_abstract_effect_loader_1af4d8106dd1ba61715e7388583af8cdad">isEffectSupported</reimplements>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Whether the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> with the given <computeroutput>name</computeroutput> is supported by the compositing backend. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool <computeroutput>true</computeroutput> if it is supported, <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="334" column="10" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="434" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_loader_1a42fb49b2befdd7b4e606378ff44b2370" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QStringList</type>
        <definition>QStringList KWin::EffectLoader::listOfKnownEffects</definition>
        <argsstring>() const override</argsstring>
        <name>listOfKnownEffects</name>
        <qualifiedname>KWin::EffectLoader::listOfKnownEffects</qualifiedname>
        <reimplements refid="class_k_win_1_1_abstract_effect_loader_1a37acdd75a09f5b80cd72ab9df2858b81">listOfKnownEffects</reimplements>
        <briefdescription>
<para>All the Effects this loader knows of. </para>
        </briefdescription>
        <detaileddescription>
<para>The implementation should re-query its store whenever this method is invoked. It&apos;s possible that the store of effects changed (e.g. a new one got installed)</para>
<para><simplesect kind="return"><para>QStringList The internal names of the known Effects </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="335" column="17" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="441" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_loader_1acb2ee7307f9f6bdc420fc582c7f9afb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::EffectLoader::loadEffect</definition>
        <argsstring>(const QString &amp;name) override</argsstring>
        <name>loadEffect</name>
        <qualifiedname>KWin::EffectLoader::loadEffect</qualifiedname>
        <reimplements refid="class_k_win_1_1_abstract_effect_loader_1ab2ad0c661413834127d8ba00f7517f76">loadEffect</reimplements>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Synchronous loading of the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> with the given <computeroutput>name</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Loads the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> without checking any configuration value or any enabled by default function provided by the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref>.</para>
<para>The loader is expected to apply the following checks: If the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> is already loaded, the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> should not get loaded again. Thus the loader is expected to track which Effects it has loaded, and which of those have been destroyed. The loader should check whether the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> is supported. If the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> indicates it is not supported, it should not get loaded.</para>
<para>If the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> loaded successfully the signal <ref refid="class_k_win_1_1_abstract_effect_loader_1a4a431e11259b47ecb9ba3346b8012e63" kindref="member">effectLoaded(KWin::Effect*,const QString&amp;)</ref> must be emitted. Otherwise the user of the loader is not able to get the loaded <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref>. It&apos;s not returning the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> as <ref refid="class_k_win_1_1_effect_loader_1abda4690d3dfdb04c897a748c5ab7966b" kindref="member">queryAndLoadAll()</ref> is working async and thus the users of the loader are expected to be prepared for async loading.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal name of the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> which should be loaded </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool <computeroutput>true</computeroutput> if the effect could be loaded, <computeroutput>false</computeroutput> in error case </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_loader_1abda4690d3dfdb04c897a748c5ab7966b" kindref="member">queryAndLoadAll()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_abstract_effect_loader_1a4a431e11259b47ecb9ba3346b8012e63" kindref="member">effectLoaded(KWin::Effect*,const QString&amp;)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="336" column="10" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="450" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_loader_1abda4690d3dfdb04c897a748c5ab7966b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::EffectLoader::queryAndLoadAll</definition>
        <argsstring>() override</argsstring>
        <name>queryAndLoadAll</name>
        <qualifiedname>KWin::EffectLoader::queryAndLoadAll</qualifiedname>
        <reimplements refid="class_k_win_1_1_abstract_effect_loader_1a5ee594e63dee4af44d512d0a262a5ff1">queryAndLoadAll</reimplements>
        <briefdescription>
<para>The <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> Loader should query its store for all available effects and try to load them. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> Loader is supposed to perform this operation in a highly async way. If there is IO which needs to be performed this should be done in a background thread and a queue should be used to load the effects. The loader should make sure to not load more than one <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> in one event cycle. Loading the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> has to be performed in the <ref refid="class_k_win_1_1_compositor" kindref="compound">Compositor</ref> thread and thus blocks the <ref refid="class_k_win_1_1_compositor" kindref="compound">Compositor</ref>. Therefore after loading one <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> all events should get processed first, so that the <ref refid="class_k_win_1_1_compositor" kindref="compound">Compositor</ref> can perform a painting pass if needed. To simplify this operation one can use the <ref refid="class_k_win_1_1_effect_load_queue" kindref="compound">EffectLoadQueue</ref>. This requires to add another loadEffect method with the custom loader specific type to refer to an <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> and LoadEffectFlags.</para>
<para>The LoadEffectFlags have to be determined by querying the configuration with <ref refid="class_k_win_1_1_abstract_effect_loader_1ac47832e9c8313b3c7fa6b1b5bda554e7" kindref="member">readConfig()</ref>. If the Load flag is set the loading can proceed and all the checks from <ref refid="class_k_win_1_1_effect_loader_1acb2ee7307f9f6bdc420fc582c7f9afb2" kindref="member">loadEffect(const QString &amp;)</ref> have to be applied. In addition if the CheckDefaultFunction flag is set and the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> provides such a method, it should be queried to determine whether the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> is enabled by default. If such a method returns <computeroutput>false</computeroutput> the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> should not get loaded. If the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> does not provide a way to query whether it&apos;s enabled by default at runtime the flag can get ignored.</para>
<para>If the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> loaded successfully the signal <ref refid="class_k_win_1_1_abstract_effect_loader_1a4a431e11259b47ecb9ba3346b8012e63" kindref="member">effectLoaded(KWin::Effect*,const QString&amp;)</ref> must be emitted.</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_loader_1acb2ee7307f9f6bdc420fc582c7f9afb2" kindref="member">loadEffect(const QString &amp;)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_abstract_effect_loader_1a4a431e11259b47ecb9ba3346b8012e63" kindref="member">effectLoaded(KWin::Effect*,const QString&amp;)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="337" column="10" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="460" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_loader_1a5edaf6cb786fa68d8e65253e514c440f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::EffectLoader::setConfig</definition>
        <argsstring>(KSharedConfig::Ptr config) override</argsstring>
        <name>setConfig</name>
        <qualifiedname>KWin::EffectLoader::setConfig</qualifiedname>
        <reimplements refid="class_k_win_1_1_abstract_effect_loader_1ae8c28c5fb1964a05d46e3fac76016ab1">setConfig</reimplements>
        <param>
          <type>KSharedConfig::Ptr</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>The KSharedConfig this <ref refid="class_k_win_1_1_effect_loader" kindref="compound">EffectLoader</ref> should operate on. </para>
        </briefdescription>
        <detaileddescription>
<para>Important: a valid KSharedConfig must be provided before trying to load any effects!</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="338" column="10" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="467" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_loader_1a0f2ddd646c670342618e5717213da4d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::EffectLoader::clear</definition>
        <argsstring>() override</argsstring>
        <name>clear</name>
        <qualifiedname>KWin::EffectLoader::clear</qualifiedname>
        <reimplements refid="class_k_win_1_1_abstract_effect_loader_1a7fe32dee9950b830dbb552d59d79b6ff">clear</reimplements>
        <briefdescription>
<para>Clears the load queue, that is all scheduled Effects are discarded from loading. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="339" column="10" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="475" bodyend="480"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>KWin::AbstractEffectLoader</label>
        <link refid="class_k_win_1_1_abstract_effect_loader"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::EffectLoader</label>
        <link refid="class_k_win_1_1_effect_loader"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>KWin::AbstractEffectLoader</label>
        <link refid="class_k_win_1_1_abstract_effect_loader"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::EffectLoader</label>
        <link refid="class_k_win_1_1_effect_loader"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/effect/effectloader.h" line="327" column="1" bodyfile="kwin/src/effect/effectloader.h" bodystart="328" bodyend="343"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_abstract_effect_loader_1abce33027093225995ad61aa665aeb45e" prot="protected" virt="non-virtual"><scope>KWin::EffectLoader</scope><name>AbstractEffectLoader</name></member>
      <member refid="class_k_win_1_1_effect_loader_1a0f2ddd646c670342618e5717213da4d0" prot="public" virt="virtual"><scope>KWin::EffectLoader</scope><name>clear</name></member>
      <member refid="class_k_win_1_1_abstract_effect_loader_1a4a431e11259b47ecb9ba3346b8012e63" prot="public" virt="non-virtual"><scope>KWin::EffectLoader</scope><name>effectLoaded</name></member>
      <member refid="class_k_win_1_1_effect_loader_1a8adbdd15efea1d7787207bef9e3e2af7" prot="public" virt="non-virtual"><scope>KWin::EffectLoader</scope><name>EffectLoader</name></member>
      <member refid="class_k_win_1_1_effect_loader_1a72cb689ba0ce539e92d0b8443121dddb" prot="public" virt="virtual"><scope>KWin::EffectLoader</scope><name>hasEffect</name></member>
      <member refid="class_k_win_1_1_effect_loader_1aa3c8cde0a570830fbb4defd2bc9e180b" prot="public" virt="virtual"><scope>KWin::EffectLoader</scope><name>isEffectSupported</name></member>
      <member refid="class_k_win_1_1_effect_loader_1a42fb49b2befdd7b4e606378ff44b2370" prot="public" virt="virtual"><scope>KWin::EffectLoader</scope><name>listOfKnownEffects</name></member>
      <member refid="class_k_win_1_1_effect_loader_1acb2ee7307f9f6bdc420fc582c7f9afb2" prot="public" virt="virtual"><scope>KWin::EffectLoader</scope><name>loadEffect</name></member>
      <member refid="class_k_win_1_1_effect_loader_1a66d077b6cb6e7b895e70bf80f52d19d2" prot="private" virt="non-virtual"><scope>KWin::EffectLoader</scope><name>m_loaders</name></member>
      <member refid="class_k_win_1_1_effect_loader_1abda4690d3dfdb04c897a748c5ab7966b" prot="public" virt="virtual"><scope>KWin::EffectLoader</scope><name>queryAndLoadAll</name></member>
      <member refid="class_k_win_1_1_abstract_effect_loader_1ac47832e9c8313b3c7fa6b1b5bda554e7" prot="protected" virt="non-virtual"><scope>KWin::EffectLoader</scope><name>readConfig</name></member>
      <member refid="class_k_win_1_1_effect_loader_1a5edaf6cb786fa68d8e65253e514c440f" prot="public" virt="virtual"><scope>KWin::EffectLoader</scope><name>setConfig</name></member>
      <member refid="class_k_win_1_1_abstract_effect_loader_1a4bb5209f35491c73801410b4da6f3933" prot="public" virt="non-virtual"><scope>KWin::EffectLoader</scope><name>~AbstractEffectLoader</name></member>
      <member refid="class_k_win_1_1_effect_loader_1ab64bbf9a143395153fedd01c43db9dc3" prot="public" virt="non-virtual"><scope>KWin::EffectLoader</scope><name>~EffectLoader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
