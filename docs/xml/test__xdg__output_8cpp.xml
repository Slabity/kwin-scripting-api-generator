<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="test__xdg__output_8cpp" kind="file" language="C++">
    <compoundname>test_xdg_output.cpp</compoundname>
    <includes local="no">QSignalSpy</includes>
    <includes local="no">QTest</includes>
    <includes refid="display_8h" local="yes">wayland/display.h</includes>
    <includes refid="wayland_2output_8h" local="yes">wayland/output.h</includes>
    <includes refid="xdgoutput__v1_8h" local="yes">wayland/xdgoutput_v1.h</includes>
    <includes local="yes">KWayland/Client/connection_thread.h</includes>
    <includes local="yes">KWayland/Client/event_queue.h</includes>
    <includes local="yes">KWayland/Client/output.h</includes>
    <includes local="yes">KWayland/Client/registry.h</includes>
    <includes local="yes">KWayland/Client/xdgoutput.h</includes>
    <includes refid="fakeoutput_8h" local="yes">../../../tests/fakeoutput.h</includes>
    <includes local="yes">test_xdg_output.moc</includes>
    <incdepgraph>
      <node id="1">
        <label>kwin/autotests/wayland/client/test_xdg_output.cpp</label>
        <link refid="test__xdg__output_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>core/colorspace.h</label>
        <link refid="colorspace_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>core/output.h</label>
        <link refid="core_2output_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>renderloop.h</label>
        <link refid="renderloop_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>effect/globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>utils/edid.h</label>
        <link refid="edid_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>wayland/display.h</label>
        <link refid="display_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>wayland/output.h</label>
        <link refid="wayland_2output_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>wayland/xdgoutput_v1.h</label>
        <link refid="xdgoutput__v1_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>../../../tests/fakeoutput.h</label>
        <link refid="fakeoutput_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>KWayland/Client/connection_thread.h</label>
      </node>
      <node id="30">
        <label>KWayland/Client/event_queue.h</label>
      </node>
      <node id="31">
        <label>KWayland/Client/output.h</label>
      </node>
      <node id="32">
        <label>KWayland/Client/registry.h</label>
      </node>
      <node id="33">
        <label>KWayland/Client/xdgoutput.h</label>
      </node>
      <node id="22">
        <label>QByteArray</label>
      </node>
      <node id="13">
        <label>QCoreApplication</label>
      </node>
      <node id="24">
        <label>QDebug</label>
      </node>
      <node id="14">
        <label>QImage</label>
      </node>
      <node id="6">
        <label>QList</label>
      </node>
      <node id="21">
        <label>QMatrix4x4</label>
      </node>
      <node id="7">
        <label>QObject</label>
      </node>
      <node id="15">
        <label>QPoint</label>
      </node>
      <node id="25">
        <label>QRect</label>
      </node>
      <node id="2">
        <label>QSignalSpy</label>
      </node>
      <node id="23">
        <label>QSize</label>
      </node>
      <node id="3">
        <label>QTest</label>
      </node>
      <node id="26">
        <label>QUuid</label>
      </node>
      <node id="16">
        <label>QVariant</label>
      </node>
      <node id="17">
        <label>QVector2D</label>
      </node>
      <node id="12">
        <label>config-kwin.h</label>
      </node>
      <node id="5">
        <label>kwin_export.h</label>
      </node>
      <node id="28">
        <label>memory</label>
      </node>
      <node id="20">
        <label>optional</label>
      </node>
      <node id="35">
        <label>test_xdg_output.moc</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_test_xdg_output" prot="public">TestXdgOutput</innerclass>
    <sectiondef kind="var">
      <memberdef kind="variable" id="test__xdg__output_8cpp_1a485d6ddd568caea0908934bfdb9fbadb" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString s_socketName</definition>
        <argsstring></argsstring>
        <name>s_socketName</name>
        <initializer>= QStringLiteral(&quot;kwin-test-xdg-output-0&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/wayland/client/test_xdg_output.cpp" line="42" column="22" bodyfile="kwin/autotests/wayland/client/test_xdg_output.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2018<sp/>David<sp/>Edmundson<sp/>&lt;davidedmundson@kde.org&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>LGPL-2.1-only<sp/>OR<sp/>LGPL-3.0-only<sp/>OR<sp/>LicenseRef-KDE-Accepted-LGPL</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Qt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QSignalSpy&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QTest&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KWin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="display_8h" kindref="compound">wayland/display.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wayland_2output_8h" kindref="compound">wayland/output.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="xdgoutput__v1_8h" kindref="compound">wayland/xdgoutput_v1.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/connection_thread.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/event_queue.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/output.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/registry.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/xdgoutput.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="fakeoutput_8h" kindref="compound">../../../tests/fakeoutput.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="class_test_xdg_output" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_test_xdg_output_1a66e3541d0c8f85631171a33930e60256" kindref="member">TestXdgOutput</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QObject</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_test_xdg_output_1a66e3541d0c8f85631171a33930e60256" kindref="member">TestXdgOutput</ref>(QObject<sp/>*parent<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Q_SLOTS:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanup();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testChanges();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_display" kindref="compound">KWin::Display</ref><sp/>*m_display;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;FakeOutput&gt;<sp/>m_outputHandle;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_output_interface" kindref="compound">KWin::OutputInterface</ref><sp/>*m_serverOutput;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_xdg_output_manager_v1_interface" kindref="compound">KWin::XdgOutputManagerV1Interface</ref><sp/>*m_serverXdgOutputManager;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::ConnectionThread<sp/>*m_connection;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::EventQueue<sp/>*m_queue;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>QThread<sp/>*m_thread;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>s_socketName<sp/>=<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;kwin-test-xdg-output-0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="class_test_xdg_output_1a66e3541d0c8f85631171a33930e60256" refkind="member"><highlight class="normal"><ref refid="class_test_xdg_output_1a66e3541d0c8f85631171a33930e60256" kindref="member">TestXdgOutput::TestXdgOutput</ref>(QObject<sp/>*parent)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>QObject(parent)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_display(nullptr)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_serverOutput(nullptr)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_connection(nullptr)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_thread(nullptr)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgOutput::init()</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win" kindref="compound">KWin</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_display;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_display" kindref="compound">KWin::Display</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display-&gt;<ref refid="class_k_win_1_1_display_1aa4c4acfe47f745065df276fab792b431" kindref="member">addSocketName</ref>(s_socketName);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display-&gt;<ref refid="class_k_win_1_1_display_1af36443417f1832645373ce713cb226c7" kindref="member">start</ref>();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_display-&gt;<ref refid="class_k_win_1_1_display_1aa50d346a6be40bd7db06214c0350456a" kindref="member">isRunning</ref>());</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>m_outputHandle<sp/>=<sp/>std::make_unique&lt;FakeOutput&gt;();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>m_outputHandle-&gt;setMode(QSize(1920,<sp/>1080),<sp/>60000);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>m_outputHandle-&gt;moveTo(QPoint(11,<sp/>12));<sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>sensible<sp/>value<sp/>for<sp/>one<sp/>monitor,<sp/>but<sp/>works<sp/>for<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>m_outputHandle-&gt;setScale(1.5);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>m_outputHandle-&gt;setName(</highlight><highlight class="stringliteral">&quot;testName&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>m_outputHandle-&gt;setManufacturer(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>m_outputHandle-&gt;setModel(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>m_serverOutput<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_output_interface" kindref="compound">OutputInterface</ref>(m_display,<sp/>m_outputHandle.get(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>m_serverXdgOutputManager<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_xdg_output_manager_v1_interface" kindref="compound">XdgOutputManagerV1Interface</ref>(m_display,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>m_serverXdgOutputManager-&gt;<ref refid="class_k_win_1_1_xdg_output_manager_v1_interface_1a18e6de3828e2d3e167e6dbc65b7c99bb" kindref="member">offer</ref>(m_serverOutput);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>connection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>KWayland::Client::ConnectionThread;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>connectedSpy(m_connection,<sp/>&amp;KWayland::Client::ConnectionThread::connected);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection-&gt;setSocketName(s_socketName);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>m_thread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QThread(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection-&gt;moveToThread(m_thread);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>m_thread-&gt;start();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection-&gt;initConnection();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(connectedSpy.wait());</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>m_queue<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>KWayland::Client::EventQueue(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!m_queue-&gt;isValid());</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>m_queue-&gt;setup(m_connection);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_queue-&gt;isValid());</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgOutput::cleanup()</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_queue)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_queue;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_queue<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_thread)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_thread-&gt;quit();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_thread-&gt;wait();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_thread;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_thread<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_connection;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_serverOutput;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>m_serverOutput<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>m_outputHandle.reset();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_display;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgOutput::testChanges()</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>verify<sp/>the<sp/>server<sp/>modes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::Registry<sp/>registry;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>announced(&amp;registry,<sp/>&amp;KWayland::Client::Registry::outputAnnounced);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>xdgOutputAnnounced(&amp;registry,<sp/>&amp;KWayland::Client::Registry::xdgOutputAnnounced);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.setEventQueue(m_queue);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.create(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(registry.isValid());</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.setup();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(announced.wait());</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xdgOutputAnnounced.count()<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(xdgOutputAnnounced.wait());</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::Output<sp/>output;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>outputChanged(&amp;output,<sp/>&amp;KWayland::Client::Output::changed);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>output.setup(registry.bindOutput(announced.first().first().value&lt;quint32&gt;(),<sp/>announced.first().last().value&lt;quint32&gt;()));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(outputChanged.wait());</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::XdgOutputManager&gt;<sp/>xdgOutputManager(</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.createXdgOutputManager(xdgOutputAnnounced.first().first().value&lt;quint32&gt;(),<sp/>xdgOutputAnnounced.first().last().value&lt;quint32&gt;(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::XdgOutput&gt;<sp/>xdgOutput(xdgOutputManager-&gt;getXdgOutput(&amp;output,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>xdgOutputChanged(xdgOutput.get(),<sp/>&amp;KWayland::Client::XdgOutput::changed);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>details<sp/>are<sp/>sent<sp/>on<sp/>client<sp/>bind</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(xdgOutputChanged.wait());</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>xdgOutputChanged.clear();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(xdgOutput-&gt;logicalPosition(),<sp/>QPoint(11,<sp/>12));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(xdgOutput-&gt;logicalSize(),<sp/>QSize(1280,<sp/>720));</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(xdgOutput-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;testName&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(xdgOutput-&gt;description(),<sp/></highlight><highlight class="stringliteral">&quot;foo<sp/>bar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>change<sp/>the<sp/>logical<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>m_outputHandle-&gt;moveTo(QPoint(1000,<sp/>2000));</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(xdgOutputChanged.wait());</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(xdgOutputChanged.count(),<sp/>1);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(xdgOutput-&gt;logicalPosition(),<sp/>QPoint(1000,<sp/>2000));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>QEXPECT_FAIL(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;KWayland::Client::XdgOutput<sp/>incorrectly<sp/>handles<sp/>partial<sp/>updates&quot;</highlight><highlight class="normal">,<sp/>Continue);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(xdgOutput-&gt;logicalSize(),<sp/>QSize(1280,<sp/>720));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>change<sp/>the<sp/>logical<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>m_outputHandle-&gt;setScale(2);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(xdgOutputChanged.wait());</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(xdgOutputChanged.count(),<sp/>2);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>QEXPECT_FAIL(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;KWayland::Client::XdgOutput<sp/>incorrectly<sp/>handles<sp/>partial<sp/>updates&quot;</highlight><highlight class="normal">,<sp/>Continue);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(xdgOutput-&gt;logicalPosition(),<sp/>QPoint(1000,<sp/>2000));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(xdgOutput-&gt;logicalSize(),<sp/>QSize(960,<sp/>540));</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal">QTEST_GUILESS_MAIN(<ref refid="class_test_xdg_output" kindref="compound">TestXdgOutput</ref>)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_xdg_output.moc&quot;</highlight></codeline>
    </programlisting>
    <location file="kwin/autotests/wayland/client/test_xdg_output.cpp"/>
  </compounddef>
</doxygen>
