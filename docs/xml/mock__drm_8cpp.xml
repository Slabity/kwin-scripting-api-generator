<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="mock__drm_8cpp" kind="file" language="C++">
    <compoundname>mock_drm.cpp</compoundname>
    <includes refid="mock__drm_8h" local="yes">mock_drm.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">libxcvt/libxcvt.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">memory</includes>
    <includes local="no">QMap</includes>
    <includes local="no">QDebug</includes>
    <incdepgraph>
      <node id="1">
        <label>kwin/autotests/drm/mock_drm.cpp</label>
        <link refid="mock__drm_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>mock_drm.h</label>
        <link refid="mock__drm_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>QDebug</label>
      </node>
      <node id="5">
        <label>QList</label>
      </node>
      <node id="6">
        <label>QMap</label>
      </node>
      <node id="7">
        <label>QRect</label>
      </node>
      <node id="11">
        <label>errno.h</label>
      </node>
      <node id="12">
        <label>libxcvt/libxcvt.h</label>
      </node>
      <node id="13">
        <label>math.h</label>
      </node>
      <node id="8">
        <label>memory</label>
      </node>
      <node id="9">
        <label>mutex</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
      <node id="3">
        <label>xf86drm.h</label>
      </node>
      <node id="4">
        <label>xf86drmMode.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="mock__drm_8cpp_1a40697ca6da5d8aa33aa40475c5252dcf" prot="public" static="no">
        <name>addProp</name>
        <param><defname>name</defname></param>
        <param><defname>value</defname></param>
        <param><defname>flags</defname></param>
        <initializer>props &lt;&lt; <ref refid="class_mock_property" kindref="compound">MockProperty</ref>(this, QStringLiteral(name), value, flags)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="165" column="9" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" prot="public" static="no">
        <name>GPU</name>
        <param><defname>fd</defname></param>
        <param><defname>error</defname></param>
        <initializer>    auto gpu = getGpu(fd);             \
    if (!gpu) {                        \
        qWarning(&quot;invalid fd %d&quot;, fd); \
        errno = EINVAL;                \
        return error;                  \
    }                                  \
    std::scoped_lock lock(gpu-&gt;m_mutex);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="286" column="9" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="286" bodyend="293"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="mock__drm_8cpp_1ae6d456aa974a0e4bf36d0de16a2979b2" prot="public" static="yes" mutable="no">
        <type>QMap&lt; int, <ref refid="class_mock_gpu" kindref="compound">MockGpu</ref> * &gt;</type>
        <definition>QMap&lt;int, MockGpu*&gt; s_gpus</definition>
        <argsstring></argsstring>
        <name>s_gpus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="24" column="13" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mock__drm_8cpp_1ac4624555978a3d5649bbb16b7e12aa2e" prot="public" static="yes" mutable="no">
        <type>std::atomic&lt; int &gt;</type>
        <definition>std::atomic&lt;int&gt; autoIncrementedConnectorId</definition>
        <argsstring></argsstring>
        <name>autoIncrementedConnectorId</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="628" column="20" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="628" bodyend="628"/>
      </memberdef>
      <memberdef kind="variable" id="mock__drm_8cpp_1aab09f560dfd5d828130411cd561b506a" prot="public" static="yes" mutable="no">
        <type>QList&lt; drmModeAtomicReqPtr &gt;</type>
        <definition>QList&lt;drmModeAtomicReqPtr&gt; s_atomicReqs</definition>
        <argsstring></argsstring>
        <name>s_atomicReqs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="923" column="14" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="923" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="mock__drm_8cpp_1a1a1361985bf67b7ceda450e7bcd9cdc5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_mock_gpu" kindref="compound">MockGpu</ref> *</type>
        <definition>static MockGpu * getGpu</definition>
        <argsstring>(int fd)</argsstring>
        <name>getGpu</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="26" column="16" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="26" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1aabb52f28bfc81b9af64866f88131d513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>drmVersionPtr</type>
        <definition>drmVersionPtr drmGetVersion</definition>
        <argsstring>(int fd)</argsstring>
        <name>drmGetVersion</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="295" column="15" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="295" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1afa388c7bb16d59c795d8f6b64f4b1b34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void drmFreeVersion</definition>
        <argsstring>(drmVersionPtr ptr)</argsstring>
        <name>drmFreeVersion</name>
        <param>
          <type>drmVersionPtr</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="304" column="6" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="304" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1ab25f8928b38d02da6ed66a38f2802205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int drmSetClientCap</definition>
        <argsstring>(int fd, uint64_t capability, uint64_t value)</argsstring>
        <name>drmSetClientCap</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>capability</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="311" column="5" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="311" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a608d8576033a20ace1b8ff78e6828844" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int drmGetCap</definition>
        <argsstring>(int fd, uint64_t capability, uint64_t *value)</argsstring>
        <name>drmGetCap</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>capability</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="324" column="5" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="324" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a2970491de5292bb05abb087c66406c87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int drmHandleEvent</definition>
        <argsstring>(int fd, drmEventContextPtr evctx)</argsstring>
        <name>drmHandleEvent</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>drmEventContextPtr</type>
          <declname>evctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="335" column="5" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="335" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1aba799e2473539a47ddb2c325962c544c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int drmIoctl</definition>
        <argsstring>(int fd, unsigned long request, void *arg)</argsstring>
        <name>drmIoctl</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>request</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="341" column="5" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="341" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a4906098a4ca599bd9a2d0e36076f890c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>drmModeResPtr</type>
        <definition>drmModeResPtr drmModeGetResources</definition>
        <argsstring>(int fd)</argsstring>
        <name>drmModeGetResources</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="378" column="15" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="378" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a2b6953f6bc86c2fd4851690038b7b52f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int drmModeAddFB</definition>
        <argsstring>(int fd, uint32_t width, uint32_t height, uint8_t depth, uint8_t bpp, uint32_t pitch, uint32_t bo_handle, uint32_t *buf_id)</argsstring>
        <name>drmModeAddFB</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bpp</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pitch</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bo_handle</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>buf_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="420" column="5" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="420" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a6676c10fbb9132d282435054a8d5621b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int drmModeAddFB2</definition>
        <argsstring>(int fd, uint32_t width, uint32_t height, uint32_t pixel_format, const uint32_t bo_handles[4], const uint32_t pitches[4], const uint32_t offsets[4], uint32_t *buf_id, uint32_t flags)</argsstring>
        <name>drmModeAddFB2</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pixel_format</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>bo_handles</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>pitches</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>offsets</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>buf_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="430" column="5" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="430" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1af83aa6b878e5b33353777b5a7c1108d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int drmModeAddFB2WithModifiers</definition>
        <argsstring>(int fd, uint32_t width, uint32_t height, uint32_t pixel_format, const uint32_t bo_handles[4], const uint32_t pitches[4], const uint32_t offsets[4], const uint64_t modifier[4], uint32_t *buf_id, uint32_t flags)</argsstring>
        <name>drmModeAddFB2WithModifiers</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pixel_format</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>bo_handles</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>pitches</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>offsets</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>modifier</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>buf_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="441" column="5" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="441" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a0c7d8e057cf355bacf00746b6612d624" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int drmModeRmFB</definition>
        <argsstring>(int fd, uint32_t bufferId)</argsstring>
        <name>drmModeRmFB</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bufferId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="456" column="5" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="456" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1ab7196b2aae22d934f66ffcae2a615440" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>drmModeCrtcPtr</type>
        <definition>drmModeCrtcPtr drmModeGetCrtc</definition>
        <argsstring>(int fd, uint32_t crtcId)</argsstring>
        <name>drmModeGetCrtc</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>crtcId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="494" column="16" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="494" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1aa3ad56fa89b448dd435d27653a38f5c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int drmModeSetCrtc</definition>
        <argsstring>(int fd, uint32_t crtcId, uint32_t bufferId, uint32_t x, uint32_t y, uint32_t *connectors, int count, drmModeModeInfoPtr mode)</argsstring>
        <name>drmModeSetCrtc</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>crtcId</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bufferId</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>connectors</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>drmModeModeInfoPtr</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="517" column="5" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="517" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1ae704b371352247966c6bf8068b0833da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int drmModeSetCursor</definition>
        <argsstring>(int fd, uint32_t crtcId, uint32_t bo_handle, uint32_t width, uint32_t height)</argsstring>
        <name>drmModeSetCursor</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>crtcId</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bo_handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="570" column="5" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="570" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1ac58d7187aad757eb94f622dea9ba5243" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int drmModeSetCursor2</definition>
        <argsstring>(int fd, uint32_t crtcId, uint32_t bo_handle, uint32_t width, uint32_t height, int32_t hot_x, int32_t hot_y)</argsstring>
        <name>drmModeSetCursor2</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>crtcId</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bo_handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>hot_x</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>hot_y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="582" column="5" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="582" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a99f2f79bcf17c963869869a38141e242" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int drmModeMoveCursor</definition>
        <argsstring>(int fd, uint32_t crtcId, int x, int y)</argsstring>
        <name>drmModeMoveCursor</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>crtcId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="588" column="5" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="588" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1aa359029a5590b09da1c7ddb1790eff4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>drmModeEncoderPtr</type>
        <definition>drmModeEncoderPtr drmModeGetEncoder</definition>
        <argsstring>(int fd, uint32_t encoder_id)</argsstring>
        <name>drmModeGetEncoder</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>encoder_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="600" column="19" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="600" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a9db042bcf43df1f8906d7898d4df7d93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>drmModeConnectorPtr</type>
        <definition>drmModeConnectorPtr drmModeGetConnector</definition>
        <argsstring>(int fd, uint32_t connectorId)</argsstring>
        <name>drmModeGetConnector</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>connectorId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="630" column="21" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="630" bodyend="668"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a762676a726fea0701142411c5f9c4ae1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>drmModeConnectorPtr</type>
        <definition>drmModeConnectorPtr drmModeGetConnectorCurrent</definition>
        <argsstring>(int fd, uint32_t connector_id)</argsstring>
        <name>drmModeGetConnectorCurrent</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>connector_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="670" column="21" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="670" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a95b96c1caeae6d2c1224800cc84fcb46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int drmModeCrtcSetGamma</definition>
        <argsstring>(int fd, uint32_t crtc_id, uint32_t size, uint16_t *red, uint16_t *green, uint16_t *blue)</argsstring>
        <name>drmModeCrtcSetGamma</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>crtc_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>red</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>green</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>blue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="675" column="5" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="675" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1af16a05d5b066b226eb1063e31a364e04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int drmModePageFlip</definition>
        <argsstring>(int fd, uint32_t crtc_id, uint32_t fb_id, uint32_t flags, void *user_data)</argsstring>
        <name>drmModePageFlip</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>crtc_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>fb_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="680" column="5" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="680" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a13b3a6046814b78da4852672859950a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>drmModePlaneResPtr</type>
        <definition>drmModePlaneResPtr drmModeGetPlaneResources</definition>
        <argsstring>(int fd)</argsstring>
        <name>drmModeGetPlaneResources</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="697" column="20" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="697" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1ae031b4ca6efc4e789c39dbeb33950784" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>drmModePlanePtr</type>
        <definition>drmModePlanePtr drmModeGetPlane</definition>
        <argsstring>(int fd, uint32_t plane_id)</argsstring>
        <name>drmModeGetPlane</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>plane_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="710" column="17" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="710" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1aee000c44bad980e06a89016eaf45bf4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>drmModePropertyPtr</type>
        <definition>drmModePropertyPtr drmModeGetProperty</definition>
        <argsstring>(int fd, uint32_t propertyId)</argsstring>
        <name>drmModeGetProperty</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>propertyId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="738" column="20" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="738" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a0d22cb9228c24231951cb18ffc9a2205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void drmModeFreeProperty</definition>
        <argsstring>(drmModePropertyPtr ptr)</argsstring>
        <name>drmModeFreeProperty</name>
        <param>
          <type>drmModePropertyPtr</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="779" column="6" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="779" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a0f95678f7a8c44d1b0deb18fe1af831b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>drmModePropertyBlobPtr</type>
        <definition>drmModePropertyBlobPtr drmModeGetPropertyBlob</definition>
        <argsstring>(int fd, uint32_t blob_id)</argsstring>
        <name>drmModeGetPropertyBlob</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blob_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="797" column="24" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="797" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1ad38a0f9b44e58f9dbac67b42be1b2faf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void drmModeFreePropertyBlob</definition>
        <argsstring>(drmModePropertyBlobPtr ptr)</argsstring>
        <name>drmModeFreePropertyBlob</name>
        <param>
          <type>drmModePropertyBlobPtr</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="820" column="6" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="820" bodyend="832"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a0d38621f86313ac1b950c01b0e3d6b13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int drmModeConnectorSetProperty</definition>
        <argsstring>(int fd, uint32_t connector_id, uint32_t property_id, uint64_t value)</argsstring>
        <name>drmModeConnectorSetProperty</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>connector_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>property_id</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="834" column="5" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="834" bodyend="837"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a9914a79940a8aee8143c96daaaa05b4b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t getType</definition>
        <argsstring>(MockObject *obj)</argsstring>
        <name>getType</name>
        <param>
          <type><ref refid="class_mock_object" kindref="compound">MockObject</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="839" column="17" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="839" bodyend="850"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a6f010a7f4a792b854408a6da42b5d67e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>drmModeObjectPropertiesPtr</type>
        <definition>drmModeObjectPropertiesPtr drmModeObjectGetProperties</definition>
        <argsstring>(int fd, uint32_t object_id, uint32_t object_type)</argsstring>
        <name>drmModeObjectGetProperties</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>object_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="852" column="28" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="852" bodyend="887"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a1ac82e1559b874f1fd512250fdd11b0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void drmModeFreeObjectProperties</definition>
        <argsstring>(drmModeObjectPropertiesPtr ptr)</argsstring>
        <name>drmModeFreeObjectProperties</name>
        <param>
          <type>drmModeObjectPropertiesPtr</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="889" column="6" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="889" bodyend="899"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a5c95da1e12be6960e21e9dbd65932472" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int drmModeObjectSetProperty</definition>
        <argsstring>(int fd, uint32_t object_id, uint32_t object_type, uint32_t property_id, uint64_t value)</argsstring>
        <name>drmModeObjectSetProperty</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>object_type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>property_id</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="901" column="5" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="901" bodyend="921"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1aa50e546d53e6c4ea54011ac0aebf610d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>drmModeAtomicReqPtr</type>
        <definition>drmModeAtomicReqPtr drmModeAtomicAlloc</definition>
        <argsstring>(void)</argsstring>
        <name>drmModeAtomicAlloc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="925" column="21" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="925" bodyend="930"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a96b0312490f50a4669a4c198093afa21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void drmModeAtomicFree</definition>
        <argsstring>(drmModeAtomicReqPtr req)</argsstring>
        <name>drmModeAtomicFree</name>
        <param>
          <type>drmModeAtomicReqPtr</type>
          <declname>req</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="932" column="6" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="932" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a0032a98798ecd4021c37f3134d818fe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int drmModeAtomicAddProperty</definition>
        <argsstring>(drmModeAtomicReqPtr req, uint32_t object_id, uint32_t property_id, uint64_t value)</argsstring>
        <name>drmModeAtomicAddProperty</name>
        <param>
          <type>drmModeAtomicReqPtr</type>
          <declname>req</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>property_id</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="938" column="5" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="938" bodyend="949"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a6afc35f822b452e30bb3584cc0aa9030" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool checkIfEqual</definition>
        <argsstring>(const drmModeModeInfo &amp;one, const drmModeModeInfo &amp;two)</argsstring>
        <name>checkIfEqual</name>
        <param>
          <type>const drmModeModeInfo &amp;</type>
          <declname>one</declname>
        </param>
        <param>
          <type>const drmModeModeInfo &amp;</type>
          <declname>two</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="951" column="13" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="951" bodyend="965"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1af7cbcfbaf1decf92c6638af4adec39a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int drmModeAtomicCommit</definition>
        <argsstring>(int fd, drmModeAtomicReqPtr req, uint32_t flags, void *user_data)</argsstring>
        <name>drmModeAtomicCommit</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>drmModeAtomicReqPtr</type>
          <declname>req</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="967" column="5" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="967" bodyend="1173"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a698d12c656ce6f16558538f242202ae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int drmModeCreatePropertyBlob</definition>
        <argsstring>(int fd, const void *data, size_t size, uint32_t *id)</argsstring>
        <name>drmModeCreatePropertyBlob</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="1176" column="5" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="1176" bodyend="1186"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1ac04573abc352f88d7ea41caf2f09757a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int drmModeDestroyPropertyBlob</definition>
        <argsstring>(int fd, uint32_t id)</argsstring>
        <name>drmModeDestroyPropertyBlob</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="1188" column="5" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="1188" bodyend="1200"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a0a43c7fc249af31ed857cdafd8c3692c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int drmModeCreateLease</definition>
        <argsstring>(int fd, const uint32_t *objects, int num_objects, int flags, uint32_t *lessee_id)</argsstring>
        <name>drmModeCreateLease</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>objects</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_objects</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>lessee_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="1202" column="5" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="1202" bodyend="1205"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a91323de6dc7dfdd7aa9337041aa634f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>drmModeLesseeListPtr</type>
        <definition>drmModeLesseeListPtr drmModeListLessees</definition>
        <argsstring>(int fd)</argsstring>
        <name>drmModeListLessees</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="1207" column="22" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="1207" bodyend="1210"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a8da1064f168a51203636eb92dd004fd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>drmModeObjectListPtr</type>
        <definition>drmModeObjectListPtr drmModeGetLease</definition>
        <argsstring>(int fd)</argsstring>
        <name>drmModeGetLease</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="1212" column="22" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="1212" bodyend="1215"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a79ea9dba1511d4ea5a18523b9deca335" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int drmModeRevokeLease</definition>
        <argsstring>(int fd, uint32_t lessee_id)</argsstring>
        <name>drmModeRevokeLease</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>lessee_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="1217" column="5" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="1217" bodyend="1220"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1ae4bb6c02567ec7053e6161fa4768dd60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void drmModeFreeResources</definition>
        <argsstring>(drmModeResPtr ptr)</argsstring>
        <name>drmModeFreeResources</name>
        <param>
          <type>drmModeResPtr</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="1222" column="6" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="1222" bodyend="1233"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1ac7fb2823b73ac63a26536d5c12f9da0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void drmModeFreePlaneResources</definition>
        <argsstring>(drmModePlaneResPtr ptr)</argsstring>
        <name>drmModeFreePlaneResources</name>
        <param>
          <type>drmModePlaneResPtr</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="1235" column="6" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="1235" bodyend="1243"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a76326d91a7388b993c9cb46b210feeee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void drmModeFreeCrtc</definition>
        <argsstring>(drmModeCrtcPtr ptr)</argsstring>
        <name>drmModeFreeCrtc</name>
        <param>
          <type>drmModeCrtcPtr</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="1245" column="6" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="1245" bodyend="1254"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a8b940d0de7211d48210abc28b416df5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void drmModeFreeConnector</definition>
        <argsstring>(drmModeConnectorPtr ptr)</argsstring>
        <name>drmModeFreeConnector</name>
        <param>
          <type>drmModeConnectorPtr</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="1256" column="6" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="1256" bodyend="1268"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a2c7fe96b3c2f9f77b4f3dd9a228b6a4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void drmModeFreeEncoder</definition>
        <argsstring>(drmModeEncoderPtr ptr)</argsstring>
        <name>drmModeFreeEncoder</name>
        <param>
          <type>drmModeEncoderPtr</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="1270" column="6" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="1270" bodyend="1279"/>
      </memberdef>
      <memberdef kind="function" id="mock__drm_8cpp_1a250febcbc5c970e7dfdfd21cd2d86ffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void drmModeFreePlane</definition>
        <argsstring>(drmModePlanePtr ptr)</argsstring>
        <name>drmModeFreePlane</name>
        <param>
          <type>drmModePlanePtr</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/mock_drm.cpp" line="1281" column="6" bodyfile="kwin/autotests/drm/mock_drm.cpp" bodystart="1281" bodyend="1290"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>KWin<sp/>-<sp/>the<sp/>KDE<sp/>window<sp/>manager</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>KDE<sp/>project.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2022<sp/>Xaver<sp/>Hugl<sp/>&lt;xaver.hugl@gmail.com&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mock__drm_8h" kindref="compound">mock_drm.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libxcvt/libxcvt.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QMap&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QDebug&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mock<sp/>impls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QMap&lt;int,<sp/>MockGpu*&gt;<sp/>s_gpus;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_mock_gpu" kindref="compound">MockGpu</ref><sp/>*getGpu(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_gpus[fd];</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="class_mock_gpu_1ae354f1a9166a6dcaf4506723f9a1ada0" refkind="member"><highlight class="normal"><ref refid="class_mock_gpu_1ae354f1a9166a6dcaf4506723f9a1ada0" kindref="member">MockGpu::MockGpu</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mock_gpu_1af5351fd0eb06b646c0ea2ec2602b4ab4" kindref="member">fd</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>&amp;<ref refid="class_mock_gpu_1ad0c1c380ad4c73d10055ed4b6a16b796" kindref="member">devNode</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numCrtcs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gammaSize)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_mock_gpu_1af5351fd0eb06b646c0ea2ec2602b4ab4" kindref="member">fd</ref>(<ref refid="class_mock_gpu_1af5351fd0eb06b646c0ea2ec2602b4ab4" kindref="member">fd</ref>)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_mock_gpu_1ad0c1c380ad4c73d10055ed4b6a16b796" kindref="member">devNode</ref>(<ref refid="class_mock_gpu_1ad0c1c380ad4c73d10055ed4b6a16b796" kindref="member">devNode</ref>)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>s_gpus.insert(<ref refid="class_mock_gpu_1af5351fd0eb06b646c0ea2ec2602b4ab4" kindref="member">fd</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numCrtcs;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;plane<sp/>=<sp/>std::make_shared&lt;MockPlane&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="mock__drm_8h_1abb8069f242e006c559a71f47984115bda074de7e7c226d5c60f8af14c20725352" kindref="member">PlaneType::Primary</ref>,<sp/>i);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mock_gpu_1a099a159db7e9d7c71ef51fa8160e113e" kindref="member">crtcs &lt;&lt; std::make_shared&lt;MockCrtc&gt;</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>plane,<sp/>i,<sp/>gammaSize);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mock_gpu_1a82ee29b7bfcb3c9b214c0b06e9a06638" kindref="member">planes</ref><sp/>&lt;&lt;<sp/>plane;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mock_gpu_1a04f44a862d91b1be9f85430be09bda0d" kindref="member">deviceCaps</ref>.insert(<ref refid="mock__drm_8h_1a999115459f7a1b8d0e2088aab86bdf92" kindref="member">MOCKDRM_DEVICE_CAP_ATOMIC</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mock_gpu_1a04f44a862d91b1be9f85430be09bda0d" kindref="member">deviceCaps</ref>.insert(DRM_CAP_DUMB_BUFFER,<sp/>1);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mock_gpu_1a04f44a862d91b1be9f85430be09bda0d" kindref="member">deviceCaps</ref>.insert(DRM_CAP_PRIME,<sp/>DRM_PRIME_CAP_IMPORT<sp/>|<sp/>DRM_PRIME_CAP_EXPORT);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mock_gpu_1a04f44a862d91b1be9f85430be09bda0d" kindref="member">deviceCaps</ref>.insert(DRM_CAP_ASYNC_PAGE_FLIP,<sp/>0);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mock_gpu_1a04f44a862d91b1be9f85430be09bda0d" kindref="member">deviceCaps</ref>.insert(DRM_CAP_ADDFB2_MODIFIERS,<sp/>1);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="class_mock_gpu_1ad49c2886c32ff785d72ae9c3565d338c" refkind="member"><highlight class="normal"><ref refid="class_mock_gpu_1ad49c2886c32ff785d72ae9c3565d338c" kindref="member">MockGpu::~MockGpu</ref>()</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>s_gpus.remove(<ref refid="class_mock_gpu_1af5351fd0eb06b646c0ea2ec2602b4ab4" kindref="member">fd</ref>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="class_mock_gpu_1af43f2cb9895d07cfece378389be0397b" refkind="member"><highlight class="normal"><ref refid="class_mock_property_blob" kindref="compound">MockPropertyBlob</ref><sp/>*<ref refid="class_mock_gpu_1af43f2cb9895d07cfece378389be0397b" kindref="member">MockGpu::getBlob</ref>(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="54"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(<ref refid="class_mock_gpu_1a5c3921b692cdb5b5b10022dc1d75fc4e" kindref="member">propertyBlobs</ref>.begin(),<sp/><ref refid="class_mock_gpu_1a5c3921b692cdb5b5b10022dc1d75fc4e" kindref="member">propertyBlobs</ref>.end(),<sp/>[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;propBlob)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>propBlob-&gt;id<sp/>==<sp/>id;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it<sp/>==<sp/><ref refid="class_mock_gpu_1a5c3921b692cdb5b5b10022dc1d75fc4e" kindref="member">propertyBlobs</ref>.end()<sp/>?<sp/>nullptr<sp/>:<sp/>it-&gt;get();</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="class_mock_gpu_1aefee8ba24883f2b3ac70d30c5a07afc4" refkind="member"><highlight class="normal"><ref refid="class_mock_connector" kindref="compound">MockConnector</ref><sp/>*<ref refid="class_mock_gpu_1aefee8ba24883f2b3ac70d30c5a07afc4" kindref="member">MockGpu::findConnector</ref>(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="62"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(<ref refid="class_mock_gpu_1ae385e7151cc0ba270fd92fd9b597c7fb" kindref="member">connectors</ref>.constBegin(),<sp/><ref refid="class_mock_gpu_1ae385e7151cc0ba270fd92fd9b597c7fb" kindref="member">connectors</ref>.constEnd(),<sp/>[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;c){return<sp/>c-&gt;id<sp/>==<sp/>id;});</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it<sp/>==<sp/><ref refid="class_mock_gpu_1ae385e7151cc0ba270fd92fd9b597c7fb" kindref="member">connectors</ref>.constEnd()<sp/>?<sp/>nullptr<sp/>:<sp/>(*it).get();</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="class_mock_gpu_1a9b2c20aa21560e073aa27042690591b9" refkind="member"><highlight class="normal"><ref refid="class_mock_crtc" kindref="compound">MockCrtc</ref><sp/>*<ref refid="class_mock_gpu_1a9b2c20aa21560e073aa27042690591b9" kindref="member">MockGpu::findCrtc</ref>(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="68"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(<ref refid="class_mock_gpu_1a099a159db7e9d7c71ef51fa8160e113e" kindref="member">crtcs</ref>.constBegin(),<sp/><ref refid="class_mock_gpu_1a099a159db7e9d7c71ef51fa8160e113e" kindref="member">crtcs</ref>.constEnd(),<sp/>[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;c){return<sp/>c-&gt;id<sp/>==<sp/>id;});</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it<sp/>==<sp/><ref refid="class_mock_gpu_1a099a159db7e9d7c71ef51fa8160e113e" kindref="member">crtcs</ref>.constEnd()<sp/>?<sp/>nullptr<sp/>:<sp/>(*it).get();</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="class_mock_gpu_1aa26af920e7adb460784136c0a1f528f9" refkind="member"><highlight class="normal"><ref refid="class_mock_plane" kindref="compound">MockPlane</ref><sp/>*<ref refid="class_mock_gpu_1aa26af920e7adb460784136c0a1f528f9" kindref="member">MockGpu::findPlane</ref>(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="74"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(<ref refid="class_mock_gpu_1a82ee29b7bfcb3c9b214c0b06e9a06638" kindref="member">planes</ref>.constBegin(),<sp/><ref refid="class_mock_gpu_1a82ee29b7bfcb3c9b214c0b06e9a06638" kindref="member">planes</ref>.constEnd(),<sp/>[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p){return<sp/>p-&gt;id<sp/>==<sp/>id;});</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it<sp/>==<sp/><ref refid="class_mock_gpu_1a82ee29b7bfcb3c9b214c0b06e9a06638" kindref="member">planes</ref>.constEnd()<sp/>?<sp/>nullptr<sp/>:<sp/>(*it).get();</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="class_mock_gpu_1ad294b2530950a96055ef2c659fb8a320" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_mock_gpu_1ad294b2530950a96055ef2c659fb8a320" kindref="member">MockGpu::flipPage</ref>(uint32_t<sp/>crtcId)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>crtc<sp/>=<sp/><ref refid="class_mock_gpu_1a9b2c20aa21560e073aa27042690591b9" kindref="member">findCrtc</ref>(crtcId);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_ASSERT(crtc);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;plane<sp/>:<sp/>std::as_const(<ref refid="class_mock_gpu_1a82ee29b7bfcb3c9b214c0b06e9a06638" kindref="member">planes</ref>))<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(plane-&gt;getProp(QStringLiteral(</highlight><highlight class="stringliteral">&quot;CRTC_ID&quot;</highlight><highlight class="normal">))<sp/>==<sp/>crtc-&gt;id)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plane-&gt;currentFb<sp/>=<sp/>plane-&gt;nextFb;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>page<sp/>flip<sp/>event?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="class_mock_object_1aa99edcf828702ea4827416c5df93e448" refkind="member"><highlight class="normal"><ref refid="class_mock_object_1aa99edcf828702ea4827416c5df93e448" kindref="member">MockObject::MockObject</ref>(<ref refid="class_mock_gpu" kindref="compound">MockGpu</ref><sp/>*<ref refid="class_mock_object_1aee2a37c6a86ae20ee579900b72e04bfe" kindref="member">gpu</ref>)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_mock_object_1a9578562398c7e2f643300da2bf8f745f" kindref="member">id</ref>(<ref refid="class_mock_object_1aee2a37c6a86ae20ee579900b72e04bfe" kindref="member">gpu</ref>-&gt;idCounter++)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_mock_object_1aee2a37c6a86ae20ee579900b72e04bfe" kindref="member">gpu</ref>(<ref refid="class_mock_object_1aee2a37c6a86ae20ee579900b72e04bfe" kindref="member">gpu</ref>)</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mock_object_1aee2a37c6a86ae20ee579900b72e04bfe" kindref="member">gpu</ref>-&gt;objects<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="class_mock_object_1aa32f10d16e17321d7e37fe2fe442e7d3" refkind="member"><highlight class="normal"><ref refid="class_mock_object_1aa32f10d16e17321d7e37fe2fe442e7d3" kindref="member">MockObject::~MockObject</ref>()</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mock_object_1aee2a37c6a86ae20ee579900b72e04bfe" kindref="member">gpu</ref>-&gt;objects.removeOne(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="class_mock_object_1a76f1c2955f448959528ffc1c4872c36a" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="class_mock_object_1a76f1c2955f448959528ffc1c4872c36a" kindref="member">MockObject::getProp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>&amp;propName)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="106"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;prop<sp/>:<sp/>std::as_const(<ref refid="class_mock_object_1a90cdcc4aa90c655ff7f76fa82e39401e" kindref="member">props</ref>))<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prop.name<sp/>==<sp/>propName)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prop.value;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_UNREACHABLE();</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="class_mock_object_1ac1fb4229dc515cc08cef807dce970962" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_mock_object_1ac1fb4229dc515cc08cef807dce970962" kindref="member">MockObject::setProp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>&amp;propName,<sp/>uint64_t<sp/>value)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;prop<sp/>:<sp/><ref refid="class_mock_object_1a90cdcc4aa90c655ff7f76fa82e39401e" kindref="member">props</ref>)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prop.name<sp/>==<sp/>propName)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prop.value<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_UNREACHABLE();</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="class_mock_object_1a9529304fa4cb728bfb7a57c1327ab6cc" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="class_mock_object_1a9529304fa4cb728bfb7a57c1327ab6cc" kindref="member">MockObject::getPropId</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>&amp;propName)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="127"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;prop<sp/>:<sp/>std::as_const(<ref refid="class_mock_object_1a90cdcc4aa90c655ff7f76fa82e39401e" kindref="member">props</ref>))<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prop.name<sp/>==<sp/>propName)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prop.id;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_UNREACHABLE();</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="class_mock_property_1ace1a41f3c79cf3c44301b4e2e3d0cdf9" refkind="member"><highlight class="normal"><ref refid="class_mock_property_1ace1a41f3c79cf3c44301b4e2e3d0cdf9" kindref="member">MockProperty::MockProperty</ref>(<ref refid="class_mock_object" kindref="compound">MockObject</ref><sp/>*<ref refid="class_mock_property_1ac9cdfc8b7c01735eab784c38c9018cc5" kindref="member">obj</ref>,<sp/>QString<sp/><ref refid="class_mock_property_1a3c4a0d16cadf7b60966c569a8b697646" kindref="member">name</ref>,<sp/>uint64_t<sp/>initialValue,<sp/>uint32_t<sp/><ref refid="class_mock_property_1a17f34352a1d4365c53897c25359482cb" kindref="member">flags</ref>,<sp/>QList&lt;QByteArray&gt;<sp/><ref refid="class_mock_property_1a1becafc767ba4679e23db9ecf07fcb22" kindref="member">enums</ref>)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_mock_property_1ac9cdfc8b7c01735eab784c38c9018cc5" kindref="member">obj</ref>(<ref refid="class_mock_property_1ac9cdfc8b7c01735eab784c38c9018cc5" kindref="member">obj</ref>)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_mock_property_1a1198e54aa32ec5f1b1267079bc2f7126" kindref="member">id</ref>(<ref refid="class_mock_property_1ac9cdfc8b7c01735eab784c38c9018cc5" kindref="member">obj</ref>-&gt;gpu-&gt;idCounter++)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_mock_property_1a17f34352a1d4365c53897c25359482cb" kindref="member">flags</ref>(<ref refid="class_mock_property_1a17f34352a1d4365c53897c25359482cb" kindref="member">flags</ref>)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_mock_property_1a3c4a0d16cadf7b60966c569a8b697646" kindref="member">name</ref>(<ref refid="class_mock_property_1a3c4a0d16cadf7b60966c569a8b697646" kindref="member">name</ref>)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_mock_property_1a1ceebe6ed0150fa707eb5a8bcda7e1c7" kindref="member">value</ref>(initialValue)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_mock_property_1a1becafc767ba4679e23db9ecf07fcb22" kindref="member">enums</ref>(<ref refid="class_mock_property_1a1becafc767ba4679e23db9ecf07fcb22" kindref="member">enums</ref>)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>qDebug(</highlight><highlight class="stringliteral">&quot;Added<sp/>property<sp/>%s<sp/>with<sp/>id<sp/>%u<sp/>to<sp/>object<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>qPrintable(<ref refid="class_mock_property_1a3c4a0d16cadf7b60966c569a8b697646" kindref="member">name</ref>),<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="class_mock_property_1ac9cdfc8b7c01735eab784c38c9018cc5" kindref="member">obj</ref>-&gt;id);</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="class_mock_property_blob_1a4c38d8a8fe2f11254bc488b1ecdf0272" refkind="member"><highlight class="normal"><ref refid="class_mock_property_blob_1a4c38d8a8fe2f11254bc488b1ecdf0272" kindref="member">MockPropertyBlob::MockPropertyBlob</ref>(<ref refid="class_mock_gpu" kindref="compound">MockGpu</ref><sp/>*<ref refid="class_mock_property_blob_1a571c855afe8c4503745b97e5d7c2a165" kindref="member">gpu</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_mock_property_blob_1a74d846e5138528a3c1c363e9929a5b0e" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_mock_property_blob_1a571c855afe8c4503745b97e5d7c2a165" kindref="member">gpu</ref>(<ref refid="class_mock_property_blob_1a571c855afe8c4503745b97e5d7c2a165" kindref="member">gpu</ref>)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_mock_property_blob_1abe06556cb2e708aa2c5d3f996323423a" kindref="member">id</ref>(<ref refid="class_mock_property_blob_1a571c855afe8c4503745b97e5d7c2a165" kindref="member">gpu</ref>-&gt;idCounter++)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_mock_property_blob_1a1759fcc6a40810454653393da409bd4c" kindref="member">data</ref>(malloc(<ref refid="class_mock_property_blob_1a74d846e5138528a3c1c363e9929a5b0e" kindref="member">size</ref>))</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_mock_property_blob_1a74d846e5138528a3c1c363e9929a5b0e" kindref="member">size</ref>(<ref refid="class_mock_property_blob_1a74d846e5138528a3c1c363e9929a5b0e" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(<ref refid="class_mock_property_blob_1a1759fcc6a40810454653393da409bd4c" kindref="member">data</ref>,<sp/>d,<sp/><ref refid="class_mock_property_blob_1a74d846e5138528a3c1c363e9929a5b0e" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="class_mock_property_blob_1a47ae7835de01ac899aa14d7987b61a7d" refkind="member"><highlight class="normal"><ref refid="class_mock_property_blob_1a47ae7835de01ac899aa14d7987b61a7d" kindref="member">MockPropertyBlob::~MockPropertyBlob</ref>()</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>free(<ref refid="class_mock_property_blob_1a1759fcc6a40810454653393da409bd4c" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="mock__drm_8cpp_1a40697ca6da5d8aa33aa40475c5252dcf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>addProp(name,<sp/>value,<sp/>flags)<sp/>props<sp/>&lt;&lt;<sp/>MockProperty(this,<sp/>QStringLiteral(name),<sp/>value,<sp/>flags)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="class_mock_connector_1a548e11eeecbb46956d284ab0399207a3" refkind="member"><highlight class="normal"><ref refid="class_mock_connector_1a548e11eeecbb46956d284ab0399207a3" kindref="member">MockConnector::MockConnector</ref>(<ref refid="class_mock_gpu" kindref="compound">MockGpu</ref><sp/>*<ref refid="class_mock_object_1aee2a37c6a86ae20ee579900b72e04bfe" kindref="member">gpu</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nonDesktop)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_mock_object_1aa99edcf828702ea4827416c5df93e448" kindref="member">MockObject</ref>(<ref refid="class_mock_object_1aee2a37c6a86ae20ee579900b72e04bfe" kindref="member">gpu</ref>)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_mock_connector_1adeac016077f6cc685f339bbb734d8aa0" kindref="member">connection</ref>(DRM_MODE_CONNECTED)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_mock_connector_1a4ebe6e0fb800b73874fa449fffda836b" kindref="member">type</ref>(DRM_MODE_CONNECTOR_DisplayPort)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_mock_connector_1a0088945a0aef1f6184dcc51b3d590f4f" kindref="member">encoder</ref>(std::make_shared&lt;<ref refid="class_mock_encoder" kindref="compound">MockEncoder</ref>&gt;(<ref refid="class_mock_object_1aee2a37c6a86ae20ee579900b72e04bfe" kindref="member">gpu</ref>,<sp/>0xFF))</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mock_object_1aee2a37c6a86ae20ee579900b72e04bfe" kindref="member">gpu</ref>-&gt;encoders<sp/>&lt;&lt;<sp/><ref refid="class_mock_connector_1a0088945a0aef1f6184dcc51b3d590f4f" kindref="member">encoder</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a40697ca6da5d8aa33aa40475c5252dcf" kindref="member">addProp</ref>(</highlight><highlight class="stringliteral">&quot;CRTC_ID&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>DRM_MODE_PROP_ATOMIC);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a40697ca6da5d8aa33aa40475c5252dcf" kindref="member">addProp</ref>(</highlight><highlight class="stringliteral">&quot;Subpixel&quot;</highlight><highlight class="normal">,<sp/>DRM_MODE_SUBPIXEL_UNKNOWN,<sp/>DRM_MODE_PROP_IMMUTABLE);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a40697ca6da5d8aa33aa40475c5252dcf" kindref="member">addProp</ref>(</highlight><highlight class="stringliteral">&quot;non-desktop&quot;</highlight><highlight class="normal">,<sp/>nonDesktop,<sp/>DRM_MODE_PROP_IMMUTABLE);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a40697ca6da5d8aa33aa40475c5252dcf" kindref="member">addProp</ref>(</highlight><highlight class="stringliteral">&quot;vrr_capable&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>DRM_MODE_PROP_IMMUTABLE);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a40697ca6da5d8aa33aa40475c5252dcf" kindref="member">addProp</ref>(</highlight><highlight class="stringliteral">&quot;DPMS&quot;</highlight><highlight class="normal">,<sp/>DRM_MODE_DPMS_OFF,<sp/>0);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a40697ca6da5d8aa33aa40475c5252dcf" kindref="member">addProp</ref>(</highlight><highlight class="stringliteral">&quot;EDID&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>DRM_MODE_PROP_BLOB<sp/>|<sp/>DRM_MODE_PROP_IMMUTABLE);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mock_connector_1a7ad921223c796e2a3576041d1efa379a" kindref="member">addMode</ref>(1920,<sp/>1080,<sp/>60.0);</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="class_mock_connector_1a7ad921223c796e2a3576041d1efa379a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_mock_connector_1a7ad921223c796e2a3576041d1efa379a" kindref="member">MockConnector::addMode</ref>(uint32_t<sp/>width,<sp/>uint32_t<sp/>height,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>refreshRate,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>preferred)</highlight></codeline>
<codeline lineno="187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>modeInfo<sp/>=<sp/>libxcvt_gen_mode_info(width,<sp/>height,<sp/>refreshRate,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>drmModeModeInfo<sp/>mode{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.clock<sp/>=<sp/>uint32_t(modeInfo-&gt;dot_clock),</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.hdisplay<sp/>=<sp/>uint16_t(modeInfo-&gt;hdisplay),</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.hsync_start<sp/>=<sp/>modeInfo-&gt;hsync_start,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.hsync_end<sp/>=<sp/>modeInfo-&gt;hsync_end,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.htotal<sp/>=<sp/>modeInfo-&gt;htotal,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.hskew<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.vdisplay<sp/>=<sp/>uint16_t(modeInfo-&gt;vdisplay),</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.vsync_start<sp/>=<sp/>modeInfo-&gt;vsync_start,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.vsync_end<sp/>=<sp/>modeInfo-&gt;vsync_end,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.vtotal<sp/>=<sp/>modeInfo-&gt;vtotal,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.vscan<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.vrefresh<sp/>=<sp/>uint32_t(modeInfo-&gt;vrefresh),</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.flags<sp/>=<sp/>modeInfo-&gt;mode_flags,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/>DRM_MODE_TYPE_DRIVER,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(preferred)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode.type<sp/>|=<sp/>DRM_MODE_TYPE_PREFERRED;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(mode.name,<sp/></highlight><highlight class="stringliteral">&quot;%dx%d@%d&quot;</highlight><highlight class="normal">,<sp/>width,<sp/>height,<sp/>mode.vrefresh);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mock_connector_1a6ec0196bce507c391fd434a9250a8f2e" kindref="member">modes</ref>.push_back(mode);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>free(modeInfo);</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="class_mock_connector_1a38abe162bd98b91774d127537cc7fceb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_mock_connector_1a38abe162bd98b91774d127537cc7fceb" kindref="member">MockConnector::setVrrCapable</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cap)</highlight></codeline>
<codeline lineno="216"><highlight class="normal">{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;prop<sp/>=<sp/>*std::ranges::find_if(<ref refid="class_mock_object_1a90cdcc4aa90c655ff7f76fa82e39401e" kindref="member">props</ref>,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;prop)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prop.name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;vrr_capable&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>prop.value<sp/>=<sp/>cap<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="class_mock_crtc_1afb59c8108c1f8580be8129bbb2ed4b92" refkind="member"><highlight class="normal"><ref refid="class_mock_crtc_1afb59c8108c1f8580be8129bbb2ed4b92" kindref="member">MockCrtc::MockCrtc</ref>(<ref refid="class_mock_gpu" kindref="compound">MockGpu</ref><sp/>*<ref refid="class_mock_object_1aee2a37c6a86ae20ee579900b72e04bfe" kindref="member">gpu</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;MockPlane&gt;<sp/>&amp;<ref refid="class_mock_crtc_1ac294fcb981ce69ca8ddd7244c04a906f" kindref="member">legacyPlane</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mock_crtc_1ab7f2e3b0af513242174fb2c5d86a406d" kindref="member">pipeIndex</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mock_crtc_1a3a838ef4659c6c43459b8fb7222b5bcd" kindref="member">gamma_size</ref>)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_mock_object_1aa99edcf828702ea4827416c5df93e448" kindref="member">MockObject</ref>(<ref refid="class_mock_object_1aee2a37c6a86ae20ee579900b72e04bfe" kindref="member">gpu</ref>)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_mock_crtc_1ab7f2e3b0af513242174fb2c5d86a406d" kindref="member">pipeIndex</ref>(<ref refid="class_mock_crtc_1ab7f2e3b0af513242174fb2c5d86a406d" kindref="member">pipeIndex</ref>)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_mock_crtc_1a3a838ef4659c6c43459b8fb7222b5bcd" kindref="member">gamma_size</ref>(<ref refid="class_mock_crtc_1a3a838ef4659c6c43459b8fb7222b5bcd" kindref="member">gamma_size</ref>)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_mock_crtc_1ac294fcb981ce69ca8ddd7244c04a906f" kindref="member">legacyPlane</ref>(<ref refid="class_mock_crtc_1ac294fcb981ce69ca8ddd7244c04a906f" kindref="member">legacyPlane</ref>)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a40697ca6da5d8aa33aa40475c5252dcf" kindref="member">addProp</ref>(</highlight><highlight class="stringliteral">&quot;MODE_ID&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>DRM_MODE_PROP_ATOMIC<sp/>|<sp/>DRM_MODE_PROP_BLOB);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a40697ca6da5d8aa33aa40475c5252dcf" kindref="member">addProp</ref>(</highlight><highlight class="stringliteral">&quot;ACTIVE&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>DRM_MODE_PROP_ATOMIC);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a40697ca6da5d8aa33aa40475c5252dcf" kindref="member">addProp</ref>(</highlight><highlight class="stringliteral">&quot;GAMMA_LUT&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>DRM_MODE_PROP_ATOMIC<sp/>|<sp/>DRM_MODE_PROP_BLOB);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a40697ca6da5d8aa33aa40475c5252dcf" kindref="member">addProp</ref>(</highlight><highlight class="stringliteral">&quot;GAMMA_LUT_SIZE&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_mock_crtc_1a3a838ef4659c6c43459b8fb7222b5bcd" kindref="member">gamma_size</ref>,<sp/>DRM_MODE_PROP_ATOMIC);</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="class_mock_plane_1a7b8e24d9807e29f702104e4c93b8d0e2" refkind="member"><highlight class="normal"><ref refid="class_mock_plane_1a7b8e24d9807e29f702104e4c93b8d0e2" kindref="member">MockPlane::MockPlane</ref>(<ref refid="class_mock_gpu" kindref="compound">MockGpu</ref><sp/>*<ref refid="class_mock_object_1aee2a37c6a86ae20ee579900b72e04bfe" kindref="member">gpu</ref>,<sp/><ref refid="mock__drm_8h_1abb8069f242e006c559a71f47984115bd" kindref="member">PlaneType</ref><sp/><ref refid="class_mock_plane_1ac470750c75e3ff2c32daea5ce1abee38" kindref="member">type</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>crtcIndex)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_mock_object_1aa99edcf828702ea4827416c5df93e448" kindref="member">MockObject</ref>(<ref refid="class_mock_object_1aee2a37c6a86ae20ee579900b72e04bfe" kindref="member">gpu</ref>)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_mock_plane_1afafd52d4429e7131d0551146be8f9ecf" kindref="member">possibleCrtcs</ref>(1<sp/>&lt;&lt;<sp/>crtcIndex)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_mock_plane_1ac470750c75e3ff2c32daea5ce1abee38" kindref="member">type</ref>(<ref refid="class_mock_plane_1ac470750c75e3ff2c32daea5ce1abee38" kindref="member">type</ref>)</highlight></codeline>
<codeline lineno="244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mock_object_1a90cdcc4aa90c655ff7f76fa82e39401e" kindref="member">props</ref><sp/>&lt;&lt;<sp/><ref refid="class_mock_property" kindref="compound">MockProperty</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_mock_plane_1ac470750c75e3ff2c32daea5ce1abee38" kindref="member">type</ref>),<sp/>DRM_MODE_PROP_IMMUTABLE<sp/>|<sp/>DRM_MODE_PROP_ENUM,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{QByteArrayLiteral(</highlight><highlight class="stringliteral">&quot;Primary&quot;</highlight><highlight class="normal">),<sp/>QByteArrayLiteral(</highlight><highlight class="stringliteral">&quot;Overlay&quot;</highlight><highlight class="normal">),<sp/>QByteArrayLiteral(</highlight><highlight class="stringliteral">&quot;Cursor&quot;</highlight><highlight class="normal">)});</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a40697ca6da5d8aa33aa40475c5252dcf" kindref="member">addProp</ref>(</highlight><highlight class="stringliteral">&quot;FB_ID&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>DRM_MODE_PROP_ATOMIC);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a40697ca6da5d8aa33aa40475c5252dcf" kindref="member">addProp</ref>(</highlight><highlight class="stringliteral">&quot;CRTC_ID&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>DRM_MODE_PROP_ATOMIC);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a40697ca6da5d8aa33aa40475c5252dcf" kindref="member">addProp</ref>(</highlight><highlight class="stringliteral">&quot;CRTC_X&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>DRM_MODE_PROP_ATOMIC);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a40697ca6da5d8aa33aa40475c5252dcf" kindref="member">addProp</ref>(</highlight><highlight class="stringliteral">&quot;CRTC_Y&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>DRM_MODE_PROP_ATOMIC);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a40697ca6da5d8aa33aa40475c5252dcf" kindref="member">addProp</ref>(</highlight><highlight class="stringliteral">&quot;CRTC_W&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>DRM_MODE_PROP_ATOMIC);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a40697ca6da5d8aa33aa40475c5252dcf" kindref="member">addProp</ref>(</highlight><highlight class="stringliteral">&quot;CRTC_H&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>DRM_MODE_PROP_ATOMIC);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a40697ca6da5d8aa33aa40475c5252dcf" kindref="member">addProp</ref>(</highlight><highlight class="stringliteral">&quot;SRC_X&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>DRM_MODE_PROP_ATOMIC);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a40697ca6da5d8aa33aa40475c5252dcf" kindref="member">addProp</ref>(</highlight><highlight class="stringliteral">&quot;SRC_Y&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>DRM_MODE_PROP_ATOMIC);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a40697ca6da5d8aa33aa40475c5252dcf" kindref="member">addProp</ref>(</highlight><highlight class="stringliteral">&quot;SRC_W&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>DRM_MODE_PROP_ATOMIC);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a40697ca6da5d8aa33aa40475c5252dcf" kindref="member">addProp</ref>(</highlight><highlight class="stringliteral">&quot;SRC_H&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>DRM_MODE_PROP_ATOMIC);</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261" refid="class_mock_encoder_1af8291b748dd54ec9c8765a99accd3cce" refkind="member"><highlight class="normal"><ref refid="class_mock_encoder_1af8291b748dd54ec9c8765a99accd3cce" kindref="member">MockEncoder::MockEncoder</ref>(<ref refid="class_mock_gpu" kindref="compound">MockGpu</ref>*<sp/><ref refid="class_mock_object_1aee2a37c6a86ae20ee579900b72e04bfe" kindref="member">gpu</ref>,<sp/>uint32_t<sp/><ref refid="class_mock_encoder_1a505c376d85f3cedb48933ff5c8ccb430" kindref="member">possible_crtcs</ref>)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_mock_object_1aa99edcf828702ea4827416c5df93e448" kindref="member">MockObject</ref>(<ref refid="class_mock_object_1aee2a37c6a86ae20ee579900b72e04bfe" kindref="member">gpu</ref>)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_mock_encoder_1a505c376d85f3cedb48933ff5c8ccb430" kindref="member">possible_crtcs</ref>(<ref refid="class_mock_encoder_1a505c376d85f3cedb48933ff5c8ccb430" kindref="member">possible_crtcs</ref>)</highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="class_mock_fb_1ace19351db6241ca09b6d3aa123a6171f" refkind="member"><highlight class="normal"><ref refid="class_mock_fb_1ace19351db6241ca09b6d3aa123a6171f" kindref="member">MockFb::MockFb</ref>(<ref refid="class_mock_gpu" kindref="compound">MockGpu</ref><sp/>*<ref refid="class_mock_fb_1a958a027e63c77eeb757cbef6e1be45ba" kindref="member">gpu</ref>,<sp/>uint32_t<sp/><ref refid="class_mock_fb_1ac9fe2ed0d77a9584927d92c813311618" kindref="member">width</ref>,<sp/>uint32_t<sp/><ref refid="class_mock_fb_1a76fc6b61fed0921cdf2f84266ec38d6c" kindref="member">height</ref>)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_mock_fb_1ad7f1aa5418e1999d6cd9cb76a08569a3" kindref="member">id</ref>(<ref refid="class_mock_fb_1a958a027e63c77eeb757cbef6e1be45ba" kindref="member">gpu</ref>-&gt;idCounter++)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_mock_fb_1ac9fe2ed0d77a9584927d92c813311618" kindref="member">width</ref>(<ref refid="class_mock_fb_1ac9fe2ed0d77a9584927d92c813311618" kindref="member">width</ref>)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_mock_fb_1a76fc6b61fed0921cdf2f84266ec38d6c" kindref="member">height</ref>(<ref refid="class_mock_fb_1a76fc6b61fed0921cdf2f84266ec38d6c" kindref="member">height</ref>)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_mock_fb_1a958a027e63c77eeb757cbef6e1be45ba" kindref="member">gpu</ref>(<ref refid="class_mock_fb_1a958a027e63c77eeb757cbef6e1be45ba" kindref="member">gpu</ref>)</highlight></codeline>
<codeline lineno="275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mock_fb_1a958a027e63c77eeb757cbef6e1be45ba" kindref="member">gpu</ref>-&gt;fbs<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="class_mock_fb_1a17ebc9db895922c08e0b140459d18e78" refkind="member"><highlight class="normal"><ref refid="class_mock_fb_1a17ebc9db895922c08e0b140459d18e78" kindref="member">MockFb::~MockFb</ref>()</highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mock_fb_1a958a027e63c77eeb757cbef6e1be45ba" kindref="member">gpu</ref>-&gt;fbs.removeOne(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="comment">//<sp/>drm<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GPU(fd,<sp/>error)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>auto<sp/>gpu<sp/>=<sp/>getGpu(fd);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!gpu)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="289"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(&quot;invalid<sp/>fd<sp/>%d&quot;,<sp/>fd);<sp/>\</highlight></codeline>
<codeline lineno="290"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINVAL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="291"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="292"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="293"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>std::scoped_lock<sp/>lock(gpu-&gt;m_mutex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="mock__drm_8cpp_1aabb52f28bfc81b9af64866f88131d513" refkind="member"><highlight class="normal">drmVersionPtr<sp/><ref refid="mock__drm_8cpp_1aabb52f28bfc81b9af64866f88131d513" kindref="member">drmGetVersion</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>drmVersionPtr<sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>drmVersion;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;name<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[gpu-&gt;name.size()<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(ptr-&gt;name,<sp/>gpu-&gt;name.data());</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304" refid="mock__drm_8cpp_1afa388c7bb16d59c795d8f6b64f4b1b34" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1afa388c7bb16d59c795d8f6b64f4b1b34" kindref="member">drmFreeVersion</ref>(drmVersionPtr<sp/>ptr)</highlight></codeline>
<codeline lineno="305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_ASSERT(ptr);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ptr-&gt;name;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="mock__drm_8cpp_1ab25f8928b38d02da6ed66a38f2802205" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1ab25f8928b38d02da6ed66a38f2802205" kindref="member">drmSetClientCap</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint64_t<sp/>capability,<sp/>uint64_t<sp/>value)</highlight></codeline>
<codeline lineno="312"><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/>-EINVAL);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(capability<sp/>==<sp/>DRM_CLIENT_CAP_ATOMIC)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gpu-&gt;deviceCaps[<ref refid="mock__drm_8h_1a999115459f7a1b8d0e2088aab86bdf92" kindref="member">MOCKDRM_DEVICE_CAP_ATOMIC</ref>])<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>ENOTSUP);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qDebug(</highlight><highlight class="stringliteral">&quot;Setting<sp/>DRM_CLIENT_CAP_ATOMIC<sp/>to<sp/>%lu&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>gpu-&gt;clientCaps.insert(capability,<sp/>value);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="mock__drm_8cpp_1a608d8576033a20ace1b8ff78e6828844" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1a608d8576033a20ace1b8ff78e6828844" kindref="member">drmGetCap</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint64_t<sp/>capability,<sp/>uint64_t<sp/>*value)</highlight></codeline>
<codeline lineno="325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/>-EINVAL);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gpu-&gt;deviceCaps.contains(capability))<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*value<sp/>=<sp/>gpu-&gt;deviceCaps[capability];</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>qDebug(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>find<sp/>capability<sp/>%lu&quot;</highlight><highlight class="normal">,<sp/>capability);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335" refid="mock__drm_8cpp_1a2970491de5292bb05abb087c66406c87" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1a2970491de5292bb05abb087c66406c87" kindref="member">drmHandleEvent</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>drmEventContextPtr<sp/>evctx)</highlight></codeline>
<codeline lineno="336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/>-EINVAL);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>ENOTSUP);</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341" refid="mock__drm_8cpp_1aba799e2473539a47ddb2c325962c544c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1aba799e2473539a47ddb2c325962c544c" kindref="member">drmIoctl</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>request,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg)</highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(request<sp/>==<sp/>DRM_IOCTL_PRIME_FD_TO_HANDLE)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/>-EINVAL);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>args<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">drm_prime_handle<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(arg);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args-&gt;handle<sp/>=<sp/>42;<sp/></highlight><highlight class="comment">//<sp/>just<sp/>pass<sp/>a<sp/>dummy<sp/>value<sp/>so<sp/>the<sp/>request<sp/>doesn&apos;t<sp/>fail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(request<sp/>==<sp/>DRM_IOCTL_PRIME_HANDLE_TO_FD)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>ENOTSUP);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(request<sp/>==<sp/>DRM_IOCTL_GEM_CLOSE)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/>-EINVAL);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(request<sp/>==<sp/>DRM_IOCTL_MODE_ATOMIC)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>args<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">drm_mode_atomic<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(arg);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>req<sp/>=<sp/><ref refid="mock__drm_8cpp_1aa50e546d53e6c4ea54011ac0aebf610d" kindref="member">drmModeAtomicAlloc</ref>();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>objects<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint32_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(args-&gt;objs_ptr);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>propsCounts<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint32_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(args-&gt;count_props_ptr);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>props<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint32_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(args-&gt;props_ptr);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>values<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint64_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(args-&gt;prop_values_ptr);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>propIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>objIndex<sp/>=<sp/>0;<sp/>objIndex<sp/>&lt;<sp/>args-&gt;count_objs;<sp/>objIndex++)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>objectId<sp/>=<sp/>objects[objIndex];</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>count<sp/>=<sp/>propsCounts[objIndex];</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a0032a98798ecd4021c37f3134d818fe9" kindref="member">drmModeAtomicAddProperty</ref>(req,<sp/>objectId,<sp/>props[propIndex<sp/>+<sp/>i],<sp/>values[propIndex<sp/>+<sp/>i]);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>propIndex<sp/>+=<sp/>count;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="mock__drm_8cpp_1af7cbcfbaf1decf92c6638af4adec39a2" kindref="member">drmModeAtomicCommit</ref>(fd,<sp/>req,<sp/>args-&gt;flags,<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(args-&gt;user_data));</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a96b0312490f50a4669a4c198093afa21" kindref="member">drmModeAtomicFree</ref>(req);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(request<sp/>==<sp/>DRM_IOCTL_MODE_RMFB)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a0c7d8e057cf355bacf00746b6612d624" kindref="member">drmModeRmFB</ref>(fd,<sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint32_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(arg));</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>ENOTSUP);</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378" refid="mock__drm_8cpp_1a4906098a4ca599bd9a2d0e36076f890c" refkind="member"><highlight class="normal">drmModeResPtr<sp/><ref refid="mock__drm_8cpp_1a4906098a4ca599bd9a2d0e36076f890c" kindref="member">drmModeGetResources</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)</highlight></codeline>
<codeline lineno="379"><highlight class="normal">{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>drmModeResPtr<sp/>res<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>drmModeRes;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>res-&gt;count_connectors<sp/>=<sp/>gpu-&gt;connectors.count();</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>res-&gt;connectors<sp/>=<sp/>res-&gt;count_connectors<sp/>?<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint32_t[res-&gt;count_connectors]<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;conn<sp/>:<sp/>std::as_const(gpu-&gt;connectors))<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res-&gt;connectors[i++]<sp/>=<sp/>conn-&gt;id;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>res-&gt;count_encoders<sp/>=<sp/>gpu-&gt;encoders.count();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>res-&gt;encoders<sp/>=<sp/>res-&gt;count_encoders<sp/>?<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint32_t[res-&gt;count_encoders]<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;enc<sp/>:<sp/>std::as_const(gpu-&gt;encoders))<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res-&gt;encoders[i++]<sp/>=<sp/>enc-&gt;id;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>res-&gt;count_crtcs<sp/>=<sp/>gpu-&gt;crtcs.count();</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>res-&gt;crtcs<sp/>=<sp/>res-&gt;count_crtcs<sp/>?<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint32_t[res-&gt;count_crtcs]<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;crtc<sp/>:<sp/>std::as_const(gpu-&gt;crtcs))<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res-&gt;crtcs[i++]<sp/>=<sp/>crtc-&gt;id;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>res-&gt;count_fbs<sp/>=<sp/>gpu-&gt;fbs.count();</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>res-&gt;fbs<sp/>=<sp/>res-&gt;count_fbs<sp/>?<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint32_t[res-&gt;count_fbs]<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;fb<sp/>:<sp/>std::as_const(gpu-&gt;fbs))<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res-&gt;fbs[i++]<sp/>=<sp/>fb-&gt;id;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>res-&gt;min_width<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>res-&gt;min_height<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>res-&gt;max_width<sp/>=<sp/>2<sp/>&lt;&lt;<sp/>14;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>res-&gt;max_height<sp/>=<sp/>2<sp/>&lt;&lt;<sp/>14;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>gpu-&gt;resPtrs<sp/>&lt;&lt;<sp/>res;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="mock__drm_8cpp_1a2b6953f6bc86c2fd4851690038b7b52f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1a2b6953f6bc86c2fd4851690038b7b52f" kindref="member">drmModeAddFB</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint32_t<sp/>width,<sp/>uint32_t<sp/>height,<sp/>uint8_t<sp/>depth,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bpp,<sp/>uint32_t<sp/>pitch,<sp/>uint32_t<sp/>bo_handle,</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*buf_id)</highlight></codeline>
<codeline lineno="423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/>EINVAL)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fb<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_mock_fb" kindref="compound">MockFb</ref>(gpu,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>*buf_id<sp/>=<sp/>fb-&gt;id;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="mock__drm_8cpp_1a6676c10fbb9132d282435054a8d5621b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1a6676c10fbb9132d282435054a8d5621b" kindref="member">drmModeAddFB2</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint32_t<sp/>width,<sp/>uint32_t<sp/>height,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>pixel_format,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bo_handles[4],</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>pitches[4],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>offsets[4],</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*buf_id,<sp/>uint32_t<sp/>flags)</highlight></codeline>
<codeline lineno="434"><highlight class="normal">{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/>EINVAL)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fb<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_mock_fb" kindref="compound">MockFb</ref>(gpu,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>*buf_id<sp/>=<sp/>fb-&gt;id;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441" refid="mock__drm_8cpp_1af83aa6b878e5b33353777b5a7c1108d3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1af83aa6b878e5b33353777b5a7c1108d3" kindref="member">drmModeAddFB2WithModifiers</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint32_t<sp/>width,<sp/>uint32_t<sp/>height,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>pixel_format,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bo_handles[4],</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>pitches[4],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>offsets[4],</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>modifier[4],<sp/>uint32_t<sp/>*buf_id,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>flags)</highlight></codeline>
<codeline lineno="446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/>EINVAL)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gpu-&gt;deviceCaps.contains(DRM_CAP_ADDFB2_MODIFIERS))<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>ENOTSUP);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fb<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_mock_fb" kindref="compound">MockFb</ref>(gpu,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>*buf_id<sp/>=<sp/>fb-&gt;id;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456" refid="mock__drm_8cpp_1a0c7d8e057cf355bacf00746b6612d624" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1a0c7d8e057cf355bacf00746b6612d624" kindref="member">drmModeRmFB</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint32_t<sp/>bufferId)</highlight></codeline>
<codeline lineno="457"><highlight class="normal">{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/>EINVAL)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(gpu-&gt;fbs.begin(),<sp/>gpu-&gt;fbs.end(),<sp/>[bufferId](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;fb){return<sp/>fb-&gt;id<sp/>==<sp/>bufferId;});</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>gpu-&gt;fbs.end())<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;invalid<sp/>bufferId<sp/>%u<sp/>passed<sp/>to<sp/>drmModeRmFB&quot;</highlight><highlight class="normal">,<sp/>bufferId);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EINVAL;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fb<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpu-&gt;fbs.erase(it);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;plane<sp/>:<sp/>std::as_const(gpu-&gt;planes))<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(plane-&gt;nextFb<sp/>==<sp/>fb)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plane-&gt;nextFb<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(plane-&gt;currentFb<sp/>==<sp/>fb)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;current<sp/>fb<sp/>%u<sp/>of<sp/>plane<sp/>%u<sp/>got<sp/>removed.<sp/>Deactivating<sp/>plane&quot;</highlight><highlight class="normal">,<sp/>bufferId,<sp/>plane-&gt;id);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plane-&gt;setProp(QStringLiteral(</highlight><highlight class="stringliteral">&quot;CRTC_ID&quot;</highlight><highlight class="normal">),<sp/>0);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plane-&gt;setProp(QStringLiteral(</highlight><highlight class="stringliteral">&quot;FB_ID&quot;</highlight><highlight class="normal">),<sp/>0);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plane-&gt;currentFb<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>crtc<sp/>=<sp/>gpu-&gt;findCrtc(plane-&gt;getProp(QStringLiteral(</highlight><highlight class="stringliteral">&quot;CRTC_ID&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q_ASSERT(crtc);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crtc-&gt;setProp(QStringLiteral(</highlight><highlight class="stringliteral">&quot;ACTIVE&quot;</highlight><highlight class="normal">),<sp/>0);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;deactvating<sp/>crtc<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>crtc-&gt;id);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;conn<sp/>:<sp/>std::as_const(gpu-&gt;connectors))<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(conn-&gt;getProp(QStringLiteral(</highlight><highlight class="stringliteral">&quot;CRTC_ID&quot;</highlight><highlight class="normal">))<sp/>==<sp/>crtc-&gt;id)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conn-&gt;setProp(QStringLiteral(</highlight><highlight class="stringliteral">&quot;CRTC_ID&quot;</highlight><highlight class="normal">),<sp/>0);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;deactvating<sp/>connector<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>conn-&gt;id);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fb;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494" refid="mock__drm_8cpp_1ab7196b2aae22d934f66ffcae2a615440" refkind="member"><highlight class="normal">drmModeCrtcPtr<sp/><ref refid="mock__drm_8cpp_1ab7196b2aae22d934f66ffcae2a615440" kindref="member">drmModeGetCrtc</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint32_t<sp/>crtcId)</highlight></codeline>
<codeline lineno="495"><highlight class="normal">{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>crtc<sp/>=<sp/>gpu-&gt;findCrtc(crtcId))<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drmModeCrtcPtr<sp/>c<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>drmModeCrtc;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;crtc_id<sp/>=<sp/>crtcId;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;buffer_id<sp/>=<sp/>crtc-&gt;currentFb<sp/>?<sp/>crtc-&gt;currentFb-&gt;id<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;gamma_size<sp/>=<sp/>crtc-&gt;gamma_size;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;mode_valid<sp/>=<sp/>crtc-&gt;modeValid;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;mode<sp/>=<sp/>crtc-&gt;mode;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;width<sp/>=<sp/>crtc-&gt;mode.hdisplay;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;height<sp/>=<sp/>crtc-&gt;mode.vdisplay;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpu-&gt;drmCrtcs<sp/>&lt;&lt;<sp/>c;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;invalid<sp/>crtcId<sp/>%u<sp/>passed<sp/>to<sp/>drmModeGetCrtc&quot;</highlight><highlight class="normal">,<sp/>crtcId);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINVAL;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517" refid="mock__drm_8cpp_1aa3ad56fa89b448dd435d27653a38f5c3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1aa3ad56fa89b448dd435d27653a38f5c3" kindref="member">drmModeSetCrtc</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint32_t<sp/>crtcId,<sp/>uint32_t<sp/>bufferId,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>x,<sp/>uint32_t<sp/>y,<sp/>uint32_t<sp/>*connectors,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drmModeModeInfoPtr<sp/>mode)</highlight></codeline>
<codeline lineno="520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/>-EINVAL);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>crtc<sp/>=<sp/>gpu-&gt;findCrtc(crtcId);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!crtc)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;invalid<sp/>crtcId<sp/>%u<sp/>passed<sp/>to<sp/>drmModeSetCrtc&quot;</highlight><highlight class="normal">,<sp/>crtcId);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oldModeBlob<sp/>=<sp/>crtc-&gt;getProp(QStringLiteral(</highlight><highlight class="stringliteral">&quot;MODE_ID&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>modeBlob<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a698d12c656ce6f16558538f242202ae7" kindref="member">drmModeCreatePropertyBlob</ref>(fd,<sp/>mode,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(drmModeModeInfo),<sp/>&amp;modeBlob);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>req<sp/>=<sp/><ref refid="mock__drm_8cpp_1aa50e546d53e6c4ea54011ac0aebf610d" kindref="member">drmModeAtomicAlloc</ref>();</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>req-&gt;legacyEmulation<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a0032a98798ecd4021c37f3134d818fe9" kindref="member">drmModeAtomicAddProperty</ref>(req,<sp/>crtcId,<sp/>crtc-&gt;getPropId(QStringLiteral(</highlight><highlight class="stringliteral">&quot;MODE_ID&quot;</highlight><highlight class="normal">)),<sp/>modeBlob);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a0032a98798ecd4021c37f3134d818fe9" kindref="member">drmModeAtomicAddProperty</ref>(req,<sp/>crtcId,<sp/>crtc-&gt;getPropId(QStringLiteral(</highlight><highlight class="stringliteral">&quot;ACTIVE&quot;</highlight><highlight class="normal">)),<sp/>modeBlob<sp/>&amp;&amp;<sp/>count);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;uint32_t&gt;<sp/>conns;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conns<sp/>&lt;&lt;<sp/>connectors[i];</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;conn<sp/>:<sp/>std::as_const(gpu-&gt;connectors))<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(conns.contains(conn-&gt;id))<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a0032a98798ecd4021c37f3134d818fe9" kindref="member">drmModeAtomicAddProperty</ref>(req,<sp/>conn-&gt;id,<sp/>conn-&gt;getPropId(QStringLiteral(</highlight><highlight class="stringliteral">&quot;CRTC_ID&quot;</highlight><highlight class="normal">)),<sp/>modeBlob<sp/>?<sp/>crtc-&gt;id<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conns.removeOne(conn-&gt;id);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(conn-&gt;getProp(QStringLiteral(</highlight><highlight class="stringliteral">&quot;CRTC_ID&quot;</highlight><highlight class="normal">))<sp/>==<sp/>crtc-&gt;id)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a0032a98798ecd4021c37f3134d818fe9" kindref="member">drmModeAtomicAddProperty</ref>(req,<sp/>conn-&gt;id,<sp/>conn-&gt;getPropId(QStringLiteral(</highlight><highlight class="stringliteral">&quot;CRTC_ID&quot;</highlight><highlight class="normal">)),<sp/>0);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!conns.isEmpty())<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;c<sp/>:<sp/>std::as_const(conns))<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;invalid<sp/>connector<sp/>%u<sp/>passed<sp/>to<sp/>drmModeSetCrtc&quot;</highlight><highlight class="normal">,<sp/>c);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a96b0312490f50a4669a4c198093afa21" kindref="member">drmModeAtomicFree</ref>(req);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a0032a98798ecd4021c37f3134d818fe9" kindref="member">drmModeAtomicAddProperty</ref>(req,<sp/>crtc-&gt;legacyPlane-&gt;id,<sp/>crtc-&gt;legacyPlane-&gt;getPropId(QStringLiteral(</highlight><highlight class="stringliteral">&quot;CRTC_ID&quot;</highlight><highlight class="normal">)),<sp/>modeBlob<sp/>&amp;&amp;<sp/>count<sp/>?<sp/>crtc-&gt;id<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a0032a98798ecd4021c37f3134d818fe9" kindref="member">drmModeAtomicAddProperty</ref>(req,<sp/>crtc-&gt;legacyPlane-&gt;id,<sp/>crtc-&gt;legacyPlane-&gt;getPropId(QStringLiteral(</highlight><highlight class="stringliteral">&quot;CRTC_X&quot;</highlight><highlight class="normal">)),<sp/>x);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a0032a98798ecd4021c37f3134d818fe9" kindref="member">drmModeAtomicAddProperty</ref>(req,<sp/>crtc-&gt;legacyPlane-&gt;id,<sp/>crtc-&gt;legacyPlane-&gt;getPropId(QStringLiteral(</highlight><highlight class="stringliteral">&quot;CRTC_Y&quot;</highlight><highlight class="normal">)),<sp/>y);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a0032a98798ecd4021c37f3134d818fe9" kindref="member">drmModeAtomicAddProperty</ref>(req,<sp/>crtc-&gt;legacyPlane-&gt;id,<sp/>crtc-&gt;legacyPlane-&gt;getPropId(QStringLiteral(</highlight><highlight class="stringliteral">&quot;CRTC_W&quot;</highlight><highlight class="normal">)),<sp/>mode-&gt;hdisplay<sp/>-<sp/>x);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a0032a98798ecd4021c37f3134d818fe9" kindref="member">drmModeAtomicAddProperty</ref>(req,<sp/>crtc-&gt;legacyPlane-&gt;id,<sp/>crtc-&gt;legacyPlane-&gt;getPropId(QStringLiteral(</highlight><highlight class="stringliteral">&quot;CRTC_H&quot;</highlight><highlight class="normal">)),<sp/>mode-&gt;vdisplay<sp/>-<sp/>y);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a0032a98798ecd4021c37f3134d818fe9" kindref="member">drmModeAtomicAddProperty</ref>(req,<sp/>crtc-&gt;legacyPlane-&gt;id,<sp/>crtc-&gt;legacyPlane-&gt;getPropId(QStringLiteral(</highlight><highlight class="stringliteral">&quot;FB_ID&quot;</highlight><highlight class="normal">)),<sp/>bufferId);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="mock__drm_8cpp_1af7cbcfbaf1decf92c6638af4adec39a2" kindref="member">drmModeAtomicCommit</ref>(fd,<sp/>req,<sp/>DRM_MODE_ATOMIC_ALLOW_MODESET,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a96b0312490f50a4669a4c198093afa21" kindref="member">drmModeAtomicFree</ref>(req);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1ac04573abc352f88d7ea41caf2f09757a" kindref="member">drmModeDestroyPropertyBlob</ref>(fd,<sp/>oldModeBlob);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570" refid="mock__drm_8cpp_1ae704b371352247966c6bf8068b0833da" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1ae704b371352247966c6bf8068b0833da" kindref="member">drmModeSetCursor</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint32_t<sp/>crtcId,<sp/>uint32_t<sp/>bo_handle,<sp/>uint32_t<sp/>width,<sp/>uint32_t<sp/>height)</highlight></codeline>
<codeline lineno="571"><highlight class="normal">{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/>-EINVAL);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>crtc<sp/>=<sp/>gpu-&gt;findCrtc(crtcId))<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crtc-&gt;cursorRect.setSize(QSize(width,<sp/>height));</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;invalid<sp/>crtcId<sp/>%u<sp/>passed<sp/>to<sp/>drmModeSetCursor&quot;</highlight><highlight class="normal">,<sp/>crtcId);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582" refid="mock__drm_8cpp_1ac58d7187aad757eb94f622dea9ba5243" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1ac58d7187aad757eb94f622dea9ba5243" kindref="member">drmModeSetCursor2</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint32_t<sp/>crtcId,<sp/>uint32_t<sp/>bo_handle,<sp/>uint32_t<sp/>width,<sp/>uint32_t<sp/>height,<sp/>int32_t<sp/>hot_x,<sp/>int32_t<sp/>hot_y)</highlight></codeline>
<codeline lineno="583"><highlight class="normal">{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/>-EINVAL);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>ENOTSUP);</highlight></codeline>
<codeline lineno="586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588" refid="mock__drm_8cpp_1a99f2f79bcf17c963869869a38141e242" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1a99f2f79bcf17c963869869a38141e242" kindref="member">drmModeMoveCursor</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint32_t<sp/>crtcId,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y)</highlight></codeline>
<codeline lineno="589"><highlight class="normal">{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/>-EINVAL);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>crtc<sp/>=<sp/>gpu-&gt;findCrtc(crtcId))<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crtc-&gt;cursorRect.moveTo(x,<sp/>y);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;invalid<sp/>crtcId<sp/>%u<sp/>passed<sp/>to<sp/>drmModeMoveCursor&quot;</highlight><highlight class="normal">,<sp/>crtcId);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600" refid="mock__drm_8cpp_1aa359029a5590b09da1c7ddb1790eff4f" refkind="member"><highlight class="normal">drmModeEncoderPtr<sp/><ref refid="mock__drm_8cpp_1aa359029a5590b09da1c7ddb1790eff4f" kindref="member">drmModeGetEncoder</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint32_t<sp/>encoder_id)</highlight></codeline>
<codeline lineno="601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(gpu-&gt;encoders.constBegin(),<sp/>gpu-&gt;encoders.constEnd(),<sp/>[encoder_id](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;e){return<sp/>e-&gt;id<sp/>==<sp/>encoder_id;});</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>gpu-&gt;encoders.constEnd())<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;invalid<sp/>encoder_id<sp/>%u<sp/>passed<sp/>to<sp/>drmModeGetEncoder&quot;</highlight><highlight class="normal">,<sp/>encoder_id);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINVAL;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>encoder<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drmModeEncoderPtr<sp/>enc<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>drmModeEncoder;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enc-&gt;encoder_id<sp/>=<sp/>encoder_id;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enc-&gt;crtc_id<sp/>=<sp/>encoder-&gt;crtc<sp/>?<sp/>encoder-&gt;crtc-&gt;id<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enc-&gt;encoder_type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enc-&gt;possible_crtcs<sp/>=<sp/>encoder-&gt;possible_crtcs;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enc-&gt;possible_clones<sp/>=<sp/>encoder-&gt;possible_clones;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpu-&gt;drmEncoders<sp/>&lt;&lt;<sp/>enc;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>enc;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Instance<sp/>ID<sp/>of<sp/>(some)<sp/>specific<sp/>connector<sp/>type,<sp/>incremented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>new<sp/>connector<sp/>(of<sp/>any<sp/>type)<sp/>being<sp/>created.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>no<sp/>particular<sp/>guarantees<sp/>on<sp/>the<sp/>_stability_<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="comment">//<sp/>connector<sp/>type<sp/>&quot;instance<sp/>IDs&quot;<sp/>issued<sp/>by<sp/>the<sp/>kernel,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>simply<sp/>giving<sp/>each<sp/>(new)<sp/>connector<sp/>a<sp/>fresh<sp/>ID<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="comment">//<sp/>acceptable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::atomic&lt;int&gt;<sp/>autoIncrementedConnectorId{};</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630" refid="mock__drm_8cpp_1a9db042bcf43df1f8906d7898d4df7d93" refkind="member"><highlight class="normal">drmModeConnectorPtr<sp/><ref refid="mock__drm_8cpp_1a9db042bcf43df1f8906d7898d4df7d93" kindref="member">drmModeGetConnector</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint32_t<sp/>connectorId)</highlight></codeline>
<codeline lineno="631"><highlight class="normal">{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>conn<sp/>=<sp/>gpu-&gt;findConnector(connectorId))<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drmModeConnectorPtr<sp/>c<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>drmModeConnector{};</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;connector_id<sp/>=<sp/>conn-&gt;id;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;connection<sp/>=<sp/>conn-&gt;connection;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;connector_type<sp/>=<sp/>conn-&gt;type;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;connector_type_id<sp/>=<sp/>autoIncrementedConnectorId++;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;encoder_id<sp/>=<sp/>conn-&gt;encoder<sp/>?<sp/>conn-&gt;encoder-&gt;id<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;count_encoders<sp/>=<sp/>conn-&gt;encoder<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;encoders<sp/>=<sp/>c-&gt;count_encoders<sp/>?<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint32_t[1]<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;encoders)<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;encoders[0]<sp/>=<sp/>conn-&gt;encoder-&gt;id;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;count_modes<sp/>=<sp/>conn-&gt;modes.count();</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;modes<sp/>=<sp/>c-&gt;count_modes<sp/>?<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>drmModeModeInfo[c-&gt;count_modes]<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>c-&gt;count_modes;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;modes[i]<sp/>=<sp/>conn-&gt;modes[i];</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;mmHeight<sp/>=<sp/>900;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;mmWidth<sp/>=<sp/>1600;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;subpixel<sp/>=<sp/>DRM_MODE_SUBPIXEL_HORIZONTAL_RGB;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>these<sp/>are<sp/>not<sp/>used<sp/>nor<sp/>will<sp/>they<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;count_props<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;props<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;prop_values<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpu-&gt;drmConnectors<sp/>&lt;&lt;<sp/>c;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;invalid<sp/>connectorId<sp/>%u<sp/>passed<sp/>to<sp/>drmModeGetConnector&quot;</highlight><highlight class="normal">,<sp/>connectorId);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINVAL;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670" refid="mock__drm_8cpp_1a762676a726fea0701142411c5f9c4ae1" refkind="member"><highlight class="normal">drmModeConnectorPtr<sp/><ref refid="mock__drm_8cpp_1a762676a726fea0701142411c5f9c4ae1" kindref="member">drmModeGetConnectorCurrent</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint32_t<sp/>connector_id)</highlight></codeline>
<codeline lineno="671"><highlight class="normal">{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1a9db042bcf43df1f8906d7898d4df7d93" kindref="member">drmModeGetConnector</ref>(fd,<sp/>connector_id);</highlight></codeline>
<codeline lineno="673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675" refid="mock__drm_8cpp_1a95b96c1caeae6d2c1224800cc84fcb46" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1a95b96c1caeae6d2c1224800cc84fcb46" kindref="member">drmModeCrtcSetGamma</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint32_t<sp/>crtc_id,<sp/>uint32_t<sp/>size,<sp/>uint16_t<sp/>*red,<sp/>uint16_t<sp/>*green,<sp/>uint16_t<sp/>*blue)</highlight></codeline>
<codeline lineno="676"><highlight class="normal">{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>ENOTSUP);</highlight></codeline>
<codeline lineno="678"><highlight class="normal">}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680" refid="mock__drm_8cpp_1af16a05d5b066b226eb1063e31a364e04" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1af16a05d5b066b226eb1063e31a364e04" kindref="member">drmModePageFlip</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint32_t<sp/>crtc_id,<sp/>uint32_t<sp/>fb_id,<sp/>uint32_t<sp/>flags,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user_data)</highlight></codeline>
<codeline lineno="681"><highlight class="normal">{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/>-EINVAL);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>crtc<sp/>=<sp/>gpu-&gt;findCrtc(crtc_id);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!crtc)<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;invalid<sp/>crtc_id<sp/>%u<sp/>passed<sp/>to<sp/>drmModePageFlip&quot;</highlight><highlight class="normal">,<sp/>crtc_id);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>req<sp/>=<sp/><ref refid="mock__drm_8cpp_1aa50e546d53e6c4ea54011ac0aebf610d" kindref="member">drmModeAtomicAlloc</ref>();</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>req-&gt;legacyEmulation<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a0032a98798ecd4021c37f3134d818fe9" kindref="member">drmModeAtomicAddProperty</ref>(req,<sp/>crtc-&gt;legacyPlane-&gt;id,<sp/>crtc-&gt;legacyPlane-&gt;getPropId(QStringLiteral(</highlight><highlight class="stringliteral">&quot;FB_ID&quot;</highlight><highlight class="normal">)),<sp/>fb_id);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="mock__drm_8cpp_1af7cbcfbaf1decf92c6638af4adec39a2" kindref="member">drmModeAtomicCommit</ref>(fd,<sp/>req,<sp/>flags,<sp/>user_data);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a96b0312490f50a4669a4c198093afa21" kindref="member">drmModeAtomicFree</ref>(req);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697" refid="mock__drm_8cpp_1a13b3a6046814b78da4852672859950a7" refkind="member"><highlight class="normal">drmModePlaneResPtr<sp/><ref refid="mock__drm_8cpp_1a13b3a6046814b78da4852672859950a7" kindref="member">drmModeGetPlaneResources</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)</highlight></codeline>
<codeline lineno="698"><highlight class="normal">{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>drmModePlaneResPtr<sp/>res<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>drmModePlaneRes;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>res-&gt;count_planes<sp/>=<sp/>gpu-&gt;planes.count();</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>res-&gt;planes<sp/>=<sp/>res-&gt;count_planes<sp/>?<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint32_t[res-&gt;count_planes]<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>res-&gt;count_planes;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res-&gt;planes[i]<sp/>=<sp/>gpu-&gt;planes[i]-&gt;id;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>gpu-&gt;drmPlaneRes<sp/>&lt;&lt;<sp/>res;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710" refid="mock__drm_8cpp_1ae031b4ca6efc4e789c39dbeb33950784" refkind="member"><highlight class="normal">drmModePlanePtr<sp/><ref refid="mock__drm_8cpp_1ae031b4ca6efc4e789c39dbeb33950784" kindref="member">drmModeGetPlane</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint32_t<sp/>plane_id)</highlight></codeline>
<codeline lineno="711"><highlight class="normal">{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>plane<sp/>=<sp/>gpu-&gt;findPlane(plane_id))<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drmModePlanePtr<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>drmModePlane;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;plane_id<sp/>=<sp/>plane_id;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;crtc_id<sp/>=<sp/>plane-&gt;getProp(QStringLiteral(</highlight><highlight class="stringliteral">&quot;CRTC_ID&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;crtc_x<sp/>=<sp/>plane-&gt;getProp(QStringLiteral(</highlight><highlight class="stringliteral">&quot;CRTC_X&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;crtc_y<sp/>=<sp/>plane-&gt;getProp(QStringLiteral(</highlight><highlight class="stringliteral">&quot;CRTC_Y&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;fb_id<sp/>=<sp/>plane-&gt;getProp(QStringLiteral(</highlight><highlight class="stringliteral">&quot;FB_ID&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;x<sp/>=<sp/>plane-&gt;getProp(QStringLiteral(</highlight><highlight class="stringliteral">&quot;SRC_X&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;y<sp/>=<sp/>plane-&gt;getProp(QStringLiteral(</highlight><highlight class="stringliteral">&quot;SRC_Y&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;possible_crtcs<sp/>=<sp/>plane-&gt;possibleCrtcs;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unused<sp/>atm:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;count_formats<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;formats<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;gamma_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpu-&gt;drmPlanes<sp/>&lt;&lt;<sp/>p;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;invalid<sp/>plane_id<sp/>%u<sp/>passed<sp/>to<sp/>drmModeGetPlane&quot;</highlight><highlight class="normal">,<sp/>plane_id);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINVAL;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738" refid="mock__drm_8cpp_1aee000c44bad980e06a89016eaf45bf4d" refkind="member"><highlight class="normal">drmModePropertyPtr<sp/><ref refid="mock__drm_8cpp_1aee000c44bad980e06a89016eaf45bf4d" kindref="member">drmModeGetProperty</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint32_t<sp/>propertyId)</highlight></codeline>
<codeline lineno="739"><highlight class="normal">{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;obj<sp/>:<sp/>std::as_const(gpu-&gt;objects))<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;prop<sp/>:<sp/>std::as_const(obj-&gt;props))<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prop.id<sp/>==<sp/>propertyId)<sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drmModePropertyPtr<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>drmModePropertyRes;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;prop_id<sp/>=<sp/>prop.id;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;flags<sp/>=<sp/>prop.flags;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arr<sp/>=<sp/>prop.name.toLocal8Bit();</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(p-&gt;name,<sp/>arr.constData());</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;count_blobs<sp/>=<sp/>prop.flags<sp/>&amp;<sp/>DRM_MODE_PROP_BLOB<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;count_blobs)<sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;blob_ids<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint32_t[1];</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;blob_ids[0]<sp/>=<sp/>prop.value;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;blob_ids<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;count_enums<sp/>=<sp/>prop.enums.count();</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;enums<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>drm_mode_property_enum[p-&gt;count_enums];</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>p-&gt;count_enums;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(p-&gt;enums[i].name,<sp/>prop.enums[i].constData());</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;enums[i].value<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;count_values<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;values<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint64_t[1];</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;values[0]<sp/>=<sp/>prop.value;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpu-&gt;drmProps<sp/>&lt;&lt;<sp/>p;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;invalid<sp/>propertyId<sp/>%u<sp/>passed<sp/>to<sp/>drmModeGetProperty&quot;</highlight><highlight class="normal">,<sp/>propertyId);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINVAL;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779" refid="mock__drm_8cpp_1a0d22cb9228c24231951cb18ffc9a2205" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1a0d22cb9228c24231951cb18ffc9a2205" kindref="member">drmModeFreeProperty</ref>(drmModePropertyPtr<sp/>ptr)</highlight></codeline>
<codeline lineno="780"><highlight class="normal">{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ptr)<sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;gpu<sp/>:<sp/>std::as_const(s_gpus))<sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gpu-&gt;drmProps.removeOne(ptr))<sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ptr-&gt;values;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ptr-&gt;blob_ids;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ptr-&gt;enums;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797" refid="mock__drm_8cpp_1a0f95678f7a8c44d1b0deb18fe1af831b" refkind="member"><highlight class="normal">drmModePropertyBlobPtr<sp/><ref refid="mock__drm_8cpp_1a0f95678f7a8c44d1b0deb18fe1af831b" kindref="member">drmModeGetPropertyBlob</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint32_t<sp/>blob_id)</highlight></codeline>
<codeline lineno="798"><highlight class="normal">{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blob_id<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(gpu-&gt;propertyBlobs.begin(),<sp/>gpu-&gt;propertyBlobs.end(),<sp/>[blob_id](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;blob)<sp/>{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>blob-&gt;id<sp/>==<sp/>blob_id;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>gpu-&gt;propertyBlobs.end())<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;invalid<sp/>blob_id<sp/>%u<sp/>passed<sp/>to<sp/>drmModeGetPropertyBlob&quot;</highlight><highlight class="normal">,<sp/>blob_id);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINVAL;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>blob<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>drmModePropertyBlobRes;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blob-&gt;id<sp/>=<sp/>(*it)-&gt;id;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blob-&gt;length<sp/>=<sp/>(*it)-&gt;size;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blob-&gt;data<sp/>=<sp/>malloc(blob-&gt;length);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(blob-&gt;data,<sp/>(*it)-&gt;data,<sp/>blob-&gt;length);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blob;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820" refid="mock__drm_8cpp_1ad38a0f9b44e58f9dbac67b42be1b2faf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1ad38a0f9b44e58f9dbac67b42be1b2faf" kindref="member">drmModeFreePropertyBlob</ref>(drmModePropertyBlobPtr<sp/>ptr)</highlight></codeline>
<codeline lineno="821"><highlight class="normal">{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ptr)<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;gpu<sp/>:<sp/>std::as_const(s_gpus))<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gpu-&gt;drmPropertyBlobs.removeOne(ptr))<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr-&gt;data);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal">}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834" refid="mock__drm_8cpp_1a0d38621f86313ac1b950c01b0e3d6b13" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1a0d38621f86313ac1b950c01b0e3d6b13" kindref="member">drmModeConnectorSetProperty</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint32_t<sp/>connector_id,<sp/>uint32_t<sp/>property_id,<sp/>uint64_t<sp/>value)</highlight></codeline>
<codeline lineno="835"><highlight class="normal">{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1a5c95da1e12be6960e21e9dbd65932472" kindref="member">drmModeObjectSetProperty</ref>(fd,<sp/>connector_id,<sp/>DRM_MODE_OBJECT_CONNECTOR,<sp/>property_id,<sp/>value);</highlight></codeline>
<codeline lineno="837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>getType(<ref refid="class_mock_object" kindref="compound">MockObject</ref><sp/>*obj)</highlight></codeline>
<codeline lineno="840"><highlight class="normal">{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_mock_connector" kindref="compound">MockConnector</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj))<sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRM_MODE_OBJECT_CONNECTOR;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_mock_crtc" kindref="compound">MockCrtc</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj))<sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRM_MODE_OBJECT_CRTC;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_mock_plane" kindref="compound">MockPlane</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj))<sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRM_MODE_OBJECT_PLANE;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DRM_MODE_OBJECT_ANY;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852" refid="mock__drm_8cpp_1a6f010a7f4a792b854408a6da42b5d67e" refkind="member"><highlight class="normal">drmModeObjectPropertiesPtr<sp/><ref refid="mock__drm_8cpp_1a6f010a7f4a792b854408a6da42b5d67e" kindref="member">drmModeObjectGetProperties</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint32_t<sp/>object_id,<sp/>uint32_t<sp/>object_type)</highlight></codeline>
<codeline lineno="853"><highlight class="normal">{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(gpu-&gt;objects.constBegin(),<sp/>gpu-&gt;objects.constEnd(),<sp/>[object_id](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;obj){return<sp/>obj-&gt;id<sp/>==<sp/>object_id;});</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>gpu-&gt;objects.constEnd())<sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;invalid<sp/>object_id<sp/>%u<sp/>passed<sp/>to<sp/>drmModeObjectGetProperties&quot;</highlight><highlight class="normal">,<sp/>object_id);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINVAL;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>getType(obj);<sp/>type<sp/>!=<sp/>object_type)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;wrong<sp/>object_type<sp/>%u<sp/>passed<sp/>to<sp/>drmModeObjectGetProperties<sp/>for<sp/>object<sp/>%u<sp/>with<sp/>type<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>object_type,<sp/>object_id,<sp/>type);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINVAL;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QList&lt;MockProperty&gt;<sp/>props;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>deviceAtomic<sp/>=<sp/>gpu-&gt;clientCaps.contains(DRM_CLIENT_CAP_ATOMIC)<sp/>&amp;&amp;<sp/>gpu-&gt;clientCaps[DRM_CLIENT_CAP_ATOMIC];</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;prop<sp/>:<sp/>std::as_const(obj-&gt;<ref refid="class_mock_object_1a90cdcc4aa90c655ff7f76fa82e39401e" kindref="member">props</ref>))<sp/>{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(deviceAtomic<sp/>||<sp/>!(prop.flags<sp/>&amp;<sp/>DRM_MODE_PROP_ATOMIC))<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>props<sp/>&lt;&lt;<sp/>prop;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drmModeObjectPropertiesPtr<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>drmModeObjectProperties;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;count_props<sp/>=<sp/>props.count();</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;props<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint32_t[p-&gt;count_props];</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;prop_values<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint64_t[p-&gt;count_props];</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;prop<sp/>:<sp/>std::as_const(props))<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;props[i]<sp/>=<sp/>prop.id;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;prop_values[i]<sp/>=<sp/>prop.value;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpu-&gt;drmObjectProperties<sp/>&lt;&lt;<sp/>p;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889" refid="mock__drm_8cpp_1a1ac82e1559b874f1fd512250fdd11b0c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1a1ac82e1559b874f1fd512250fdd11b0c" kindref="member">drmModeFreeObjectProperties</ref>(drmModeObjectPropertiesPtr<sp/>ptr)</highlight></codeline>
<codeline lineno="890"><highlight class="normal">{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;gpu<sp/>:<sp/>std::as_const(s_gpus))<sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gpu-&gt;drmObjectProperties.removeOne(ptr))<sp/>{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ptr-&gt;props;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ptr-&gt;prop_values;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal">}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901" refid="mock__drm_8cpp_1a5c95da1e12be6960e21e9dbd65932472" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1a5c95da1e12be6960e21e9dbd65932472" kindref="member">drmModeObjectSetProperty</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint32_t<sp/>object_id,<sp/>uint32_t<sp/>object_type,<sp/>uint32_t<sp/>property_id,<sp/>uint64_t<sp/>value)</highlight></codeline>
<codeline lineno="902"><highlight class="normal">{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/>-EINVAL);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(gpu-&gt;objects.constBegin(),<sp/>gpu-&gt;objects.constEnd(),<sp/>[object_id](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;obj){return<sp/>obj-&gt;id<sp/>==<sp/>object_id;});</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>gpu-&gt;objects.constEnd())<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;invalid<sp/>object_id<sp/>%u<sp/>passed<sp/>to<sp/>drmModeObjectSetProperty&quot;</highlight><highlight class="normal">,<sp/>object_id);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>getType(obj);<sp/>type<sp/>!=<sp/>object_type)<sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;wrong<sp/>object_type<sp/>%u<sp/>passed<sp/>to<sp/>drmModeObjectSetProperty<sp/>for<sp/>object<sp/>%u<sp/>with<sp/>type<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>object_type,<sp/>object_id,<sp/>type);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>req<sp/>=<sp/><ref refid="mock__drm_8cpp_1aa50e546d53e6c4ea54011ac0aebf610d" kindref="member">drmModeAtomicAlloc</ref>();</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>req-&gt;legacyEmulation<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a0032a98798ecd4021c37f3134d818fe9" kindref="member">drmModeAtomicAddProperty</ref>(req,<sp/>object_id,<sp/>property_id,<sp/>value);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="mock__drm_8cpp_1af7cbcfbaf1decf92c6638af4adec39a2" kindref="member">drmModeAtomicCommit</ref>(fd,<sp/>req,<sp/>0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1a96b0312490f50a4669a4c198093afa21" kindref="member">drmModeAtomicFree</ref>(req);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal">}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QList&lt;drmModeAtomicReqPtr&gt;<sp/>s_atomicReqs;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925" refid="mock__drm_8cpp_1aa50e546d53e6c4ea54011ac0aebf610d" refkind="member"><highlight class="normal">drmModeAtomicReqPtr<sp/><ref refid="mock__drm_8cpp_1aa50e546d53e6c4ea54011ac0aebf610d" kindref="member">drmModeAtomicAlloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="926"><highlight class="normal">{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>req<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>drmModeAtomicReq;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>s_atomicReqs<sp/>&lt;&lt;<sp/>req;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>req;</highlight></codeline>
<codeline lineno="930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932" refid="mock__drm_8cpp_1a96b0312490f50a4669a4c198093afa21" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1a96b0312490f50a4669a4c198093afa21" kindref="member">drmModeAtomicFree</ref>(drmModeAtomicReqPtr<sp/>req)</highlight></codeline>
<codeline lineno="933"><highlight class="normal">{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>s_atomicReqs.removeOne(req);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>req;</highlight></codeline>
<codeline lineno="936"><highlight class="normal">}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938" refid="mock__drm_8cpp_1a0032a98798ecd4021c37f3134d818fe9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1a0032a98798ecd4021c37f3134d818fe9" kindref="member">drmModeAtomicAddProperty</ref>(drmModeAtomicReqPtr<sp/>req,<sp/>uint32_t<sp/>object_id,<sp/>uint32_t<sp/>property_id,<sp/>uint64_t<sp/>value)</highlight></codeline>
<codeline lineno="939"><highlight class="normal">{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!req)<sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_prop" kindref="compound">Prop</ref><sp/>p;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>p.<ref refid="struct_prop_1ae50b0f2c1685f769ebf0dc079bdc3794" kindref="member">obj</ref><sp/>=<sp/>object_id;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>p.<ref refid="struct_prop_1a2b35c7b7e4e785c442d9c1e512d3e0d8" kindref="member">prop</ref><sp/>=<sp/>property_id;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>p.<ref refid="struct_prop_1a79a485c4488ba7a77f28c7b746425be2" kindref="member">value</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>req-&gt;props<sp/>&lt;&lt;<sp/>p;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>req-&gt;props.count();</highlight></codeline>
<codeline lineno="949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkIfEqual(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>drmModeModeInfo<sp/>&amp;one,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>drmModeModeInfo<sp/>&amp;two)</highlight></codeline>
<codeline lineno="952"><highlight class="normal">{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>one.clock<sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>two.clock</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>one.hdisplay<sp/><sp/><sp/><sp/>==<sp/>two.hdisplay</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>one.hsync_start<sp/>==<sp/>two.hsync_start</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>one.hsync_end<sp/><sp/><sp/>==<sp/>two.hsync_end</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>one.htotal<sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>two.htotal</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>one.hskew<sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>two.hskew</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>one.vdisplay<sp/><sp/><sp/><sp/>==<sp/>two.vdisplay</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>one.vsync_start<sp/>==<sp/>two.vsync_start</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>one.vsync_end<sp/><sp/><sp/>==<sp/>two.vsync_end</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>one.vtotal<sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>two.vtotal</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>one.vscan<sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>two.vscan</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>one.vrefresh<sp/><sp/><sp/><sp/>==<sp/>two.vrefresh;</highlight></codeline>
<codeline lineno="965"><highlight class="normal">}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967" refid="mock__drm_8cpp_1af7cbcfbaf1decf92c6638af4adec39a2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1af7cbcfbaf1decf92c6638af4adec39a2" kindref="member">drmModeAtomicCommit</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>drmModeAtomicReqPtr<sp/>req,<sp/>uint32_t<sp/>flags,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user_data)</highlight></codeline>
<codeline lineno="968"><highlight class="normal">{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/>-EINVAL);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!req-&gt;legacyEmulation<sp/>&amp;&amp;<sp/>(!gpu-&gt;clientCaps.contains(DRM_CLIENT_CAP_ATOMIC)<sp/>||<sp/>!gpu-&gt;clientCaps[DRM_CLIENT_CAP_ATOMIC]))<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;drmModeAtomicCommit<sp/>requires<sp/>the<sp/>atomic<sp/>capability&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>verify<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((flags<sp/>&amp;<sp/>DRM_MODE_ATOMIC_NONBLOCK)<sp/>&amp;&amp;<sp/>(flags<sp/>&amp;<sp/>DRM_MODE_ATOMIC_ALLOW_MODESET))<sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;NONBLOCK<sp/>and<sp/>MODESET<sp/>are<sp/>not<sp/>allowed<sp/>together&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((flags<sp/>&amp;<sp/>DRM_MODE_ATOMIC_TEST_ONLY)<sp/>&amp;&amp;<sp/>(flags<sp/>&amp;<sp/>DRM_MODE_PAGE_FLIP_EVENT))<sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TEST_ONLY<sp/>and<sp/>PAGE_FLIP_EVENT<sp/>are<sp/>not<sp/>allowed<sp/>together&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>DRM_MODE_PAGE_FLIP_ASYNC)<sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;PAGE_FLIP_ASYNC<sp/>is<sp/>currently<sp/>not<sp/>supported<sp/>with<sp/>AMS&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;MockConnector&gt;<sp/>connCopies;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;conn<sp/>:<sp/>std::as_const(gpu-&gt;connectors))<sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connCopies<sp/>&lt;&lt;<sp/>*conn;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;MockCrtc&gt;<sp/>crtcCopies;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;crtc<sp/>:<sp/>std::as_const(gpu-&gt;crtcs))<sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crtcCopies<sp/>&lt;&lt;<sp/>*crtc;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;MockPlane&gt;<sp/>planeCopies;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;plane<sp/>:<sp/>std::as_const(gpu-&gt;planes))<sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planeCopies<sp/>&lt;&lt;<sp/>*plane;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;MockObject<sp/>*&gt;<sp/>objects;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>connCopies.count();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objects<sp/>&lt;&lt;<sp/>&amp;connCopies[i];</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>crtcCopies.count();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objects<sp/>&lt;&lt;<sp/>&amp;crtcCopies[i];</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>planeCopies.count();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objects<sp/>&lt;&lt;<sp/>&amp;planeCopies[i];</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>changes<sp/>to<sp/>the<sp/>copies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>req-&gt;props.count();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>req-&gt;props[i];</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(objects.constBegin(),<sp/>objects.constEnd(),<sp/>[p](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;obj){return<sp/>obj-&gt;id<sp/>==<sp/>p.obj;});</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>objects.constEnd())<sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;Object<sp/>%u<sp/>in<sp/>atomic<sp/>request<sp/>not<sp/>found!&quot;</highlight><highlight class="normal">,<sp/>p.obj);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;obj<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj-&gt;<ref refid="class_mock_object_1a9578562398c7e2f643300da2bf8f745f" kindref="member">id</ref><sp/>==<sp/>p.obj)<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>prop<sp/>=<sp/>std::find_if(obj-&gt;<ref refid="class_mock_object_1a90cdcc4aa90c655ff7f76fa82e39401e" kindref="member">props</ref>.begin(),<sp/>obj-&gt;<ref refid="class_mock_object_1a90cdcc4aa90c655ff7f76fa82e39401e" kindref="member">props</ref>.end(),<sp/>[p](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;prop){return<sp/>prop.id<sp/>==<sp/>p.prop;});</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prop<sp/>==<sp/>obj-&gt;<ref refid="class_mock_object_1a90cdcc4aa90c655ff7f76fa82e39401e" kindref="member">props</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;Property<sp/>%u<sp/>in<sp/>atomic<sp/>request<sp/>for<sp/>object<sp/>%u<sp/>not<sp/>found!&quot;</highlight><highlight class="normal">,<sp/>p.prop,<sp/>p.obj);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prop-&gt;value<sp/>!=<sp/>p.value)<sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(flags<sp/>&amp;<sp/>DRM_MODE_ATOMIC_ALLOW_MODESET)<sp/>&amp;&amp;<sp/>(prop-&gt;name<sp/>==<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;CRTC_ID&quot;</highlight><highlight class="normal">)<sp/>||<sp/>prop-&gt;name<sp/>==<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;ACTIVE&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;Atomic<sp/>request<sp/>without<sp/>DRM_MODE_ATOMIC_ALLOW_MODESET<sp/>tries<sp/>to<sp/>do<sp/>a<sp/>modeset<sp/>with<sp/>object<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>obj-&gt;<ref refid="class_mock_object_1a9578562398c7e2f643300da2bf8f745f" kindref="member">id</ref>);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prop-&gt;flags<sp/>&amp;<sp/>DRM_MODE_PROP_BLOB)<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>blobExists<sp/>=<sp/>gpu-&gt;getBlob(p.value)<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blobExists<sp/>!=<sp/>(p.value<sp/>&gt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;Atomic<sp/>request<sp/>tries<sp/>to<sp/>set<sp/>property<sp/>%s<sp/>on<sp/>obj<sp/>%u<sp/>to<sp/>invalid<sp/>blob<sp/>id<sp/>%lu&quot;</highlight><highlight class="normal">,<sp/>qPrintable(prop-&gt;name),<sp/>obj-&gt;<ref refid="class_mock_object_1a9578562398c7e2f643300da2bf8f745f" kindref="member">id</ref>,<sp/>p.value);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prop-&gt;value<sp/>=<sp/>p.value;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>the<sp/>desired<sp/>changes<sp/>are<sp/>allowed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Pipeline<sp/>{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mock_crtc" kindref="compound">MockCrtc</ref><sp/>*crtc;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QList&lt;MockConnector<sp/>*&gt;<sp/>conns;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mock_plane" kindref="compound">MockPlane</ref><sp/>*primaryPlane<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;Pipeline&gt;<sp/>pipelines;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>crtcCopies.count();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(crtcCopies[i].getProp(QStringLiteral(</highlight><highlight class="stringliteral">&quot;ACTIVE&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>blob<sp/>=<sp/>gpu-&gt;getBlob(crtcCopies[i].getProp(QStringLiteral(</highlight><highlight class="stringliteral">&quot;MODE_ID&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!blob)<sp/>{</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;Atomic<sp/>request<sp/>tries<sp/>to<sp/>enable<sp/>CRTC<sp/>%u<sp/>without<sp/>a<sp/>mode&quot;</highlight><highlight class="normal">,<sp/>crtcCopies[i].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blob-&gt;size<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(drmModeModeInfo))<sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;Atomic<sp/>request<sp/>tries<sp/>to<sp/>enable<sp/>CRTC<sp/>%u<sp/>with<sp/>an<sp/>invalid<sp/>mode<sp/>blob&quot;</highlight><highlight class="normal">,<sp/>crtcCopies[i].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pipeline<sp/>pipeline;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pipeline.crtc<sp/>=<sp/>&amp;crtcCopies[i];</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pipelines<sp/>&lt;&lt;<sp/>pipeline;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>connCopies.count();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>crtc<sp/>=<sp/>connCopies[i].getProp(QStringLiteral(</highlight><highlight class="stringliteral">&quot;CRTC_ID&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/>pipelines.count();<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pipelines[p].crtc-&gt;id<sp/>==<sp/>crtc)<sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pipelines[p].conns<sp/>&lt;&lt;<sp/>&amp;connCopies[i];</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)<sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;CRTC_ID<sp/>of<sp/>connector<sp/>%u<sp/>points<sp/>to<sp/>inactive<sp/>or<sp/>wrong<sp/>crtc&quot;</highlight><highlight class="normal">,<sp/>connCopies[i].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>planeCopies.count();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>crtc<sp/>=<sp/>planeCopies[i].getProp(QStringLiteral(</highlight><highlight class="stringliteral">&quot;CRTC_ID&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/>pipelines.count();<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pipelines[p].crtc-&gt;id<sp/>==<sp/>crtc)<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pipelines[p].primaryPlane)<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;crtc<sp/>%u<sp/>has<sp/>more<sp/>than<sp/>one<sp/>primary<sp/>planes<sp/>assigned:<sp/>%u<sp/>and<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>pipelines[p].crtc-&gt;id,<sp/>pipelines[p].primaryPlane-&gt;id,<sp/>planeCopies[i].id);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(planeCopies[i].possibleCrtcs<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>pipelines[p].crtc-&gt;pipeIndex)))<sp/>{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;crtc<sp/>%u<sp/>is<sp/>not<sp/>suitable<sp/>for<sp/>primary<sp/>plane<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>pipelines[p].crtc-&gt;id,<sp/>planeCopies[i].id);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pipelines[p].primaryPlane<sp/>=<sp/>&amp;planeCopies[i];</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)<sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;CRTC_ID<sp/>of<sp/>plane<sp/>%u<sp/>points<sp/>to<sp/>inactive<sp/>or<sp/>wrong<sp/>crtc&quot;</highlight><highlight class="normal">,<sp/>planeCopies[i].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fbId<sp/>=<sp/>planeCopies[i].getProp(QStringLiteral(</highlight><highlight class="stringliteral">&quot;FB_ID&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fbId)<sp/>{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;FB_ID<sp/>of<sp/>active<sp/>plane<sp/>%u<sp/>is<sp/>0&quot;</highlight><highlight class="normal">,<sp/>planeCopies[i].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(gpu-&gt;fbs.constBegin(),<sp/>gpu-&gt;fbs.constEnd(),<sp/>[fbId](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fb){return<sp/>fb-&gt;id<sp/>==<sp/>fbId;});</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>gpu-&gt;fbs.constEnd())<sp/>{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;FB_ID<sp/>%lu<sp/>of<sp/>active<sp/>plane<sp/>%u<sp/>is<sp/>invalid&quot;</highlight><highlight class="normal">,<sp/>fbId,<sp/>planeCopies[i].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planeCopies[i].nextFb<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planeCopies[i].nextFb<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p<sp/>:<sp/>std::as_const(pipelines))<sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.conns.isEmpty())<sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;Active<sp/>crtc<sp/>%u<sp/>has<sp/>no<sp/>assigned<sp/>connectors&quot;</highlight><highlight class="normal">,<sp/>p.crtc-&gt;id);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p.primaryPlane)<sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;Active<sp/>crtc<sp/>%u<sp/>has<sp/>no<sp/>assigned<sp/>primary<sp/>plane&quot;</highlight><highlight class="normal">,<sp/>p.crtc-&gt;id);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drmModeModeInfo<sp/>mode<sp/>=<sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">drmModeModeInfo*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(gpu-&gt;getBlob(p.crtc-&gt;getProp(QStringLiteral(</highlight><highlight class="stringliteral">&quot;MODE_ID&quot;</highlight><highlight class="normal">)))-&gt;data);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;conn<sp/>:<sp/>p.conns)<sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>modeFound<sp/>=<sp/>std::find_if(conn-&gt;modes.constBegin(),<sp/>conn-&gt;modes.constEnd(),<sp/>[mode](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;m){</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>checkIfEqual(mode,<sp/>m);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})<sp/>!=<sp/>conn-&gt;modes.constEnd();</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!modeFound)<sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;mode<sp/>on<sp/>crtc<sp/>%u<sp/>is<sp/>incompatible<sp/>with<sp/>connector<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>p.crtc-&gt;id,<sp/>conn-&gt;id);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>wanted,<sp/>apply<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(flags<sp/>&amp;<sp/>DRM_MODE_ATOMIC_TEST_ONLY))<sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;conn<sp/>:<sp/>std::as_const(gpu-&gt;connectors))<sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(connCopies.constBegin(),<sp/>connCopies.constEnd(),<sp/>[conn](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c){return<sp/>c.id<sp/>==<sp/>conn-&gt;id;});</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>connCopies.constEnd())<sp/>{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qCritical(</highlight><highlight class="stringliteral">&quot;implementation<sp/>error:<sp/>can&apos;t<sp/>find<sp/>connector<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>conn-&gt;id);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*conn<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;crtc<sp/>:<sp/>std::as_const(gpu-&gt;crtcs))<sp/>{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(crtcCopies.constBegin(),<sp/>crtcCopies.constEnd(),<sp/>[crtc](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c){return<sp/>c.id<sp/>==<sp/>crtc-&gt;id;});</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>crtcCopies.constEnd())<sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qCritical(</highlight><highlight class="stringliteral">&quot;implementation<sp/>error:<sp/>can&apos;t<sp/>find<sp/>crtc<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>crtc-&gt;id);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*crtc<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;plane<sp/>:<sp/>std::as_const(gpu-&gt;planes))<sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(planeCopies.constBegin(),<sp/>planeCopies.constEnd(),<sp/>[plane](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c){return<sp/>c.id<sp/>==<sp/>plane-&gt;id;});</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>planeCopies.constEnd())<sp/>{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qCritical(</highlight><highlight class="stringliteral">&quot;implementation<sp/>error:<sp/>can&apos;t<sp/>find<sp/>plane<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>plane-&gt;id);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*plane<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>DRM_MODE_PAGE_FLIP_EVENT)<sp/>{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unsupported</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176" refid="mock__drm_8cpp_1a698d12c656ce6f16558538f242202ae7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1a698d12c656ce6f16558538f242202ae7" kindref="member">drmModeCreatePropertyBlob</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/>uint32_t<sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/>-EINVAL);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!data<sp/>||<sp/>!size<sp/>||<sp/>!</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>blob<sp/>=<sp/>std::make_unique&lt;MockPropertyBlob&gt;(gpu,<sp/>data,<sp/>size);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>blob-&gt;id;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>gpu-&gt;propertyBlobs.push_back(std::move(blob));</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188" refid="mock__drm_8cpp_1ac04573abc352f88d7ea41caf2f09757a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1ac04573abc352f88d7ea41caf2f09757a" kindref="member">drmModeDestroyPropertyBlob</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__drm_8cpp_1aee03cce956afb6ba10816b8e1474c61d" kindref="member">GPU</ref>(fd,<sp/>-EINVAL);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::remove_if(gpu-&gt;propertyBlobs.begin(),<sp/>gpu-&gt;propertyBlobs.end(),<sp/>[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;blob)<sp/>{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>blob-&gt;id<sp/>==<sp/>id;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>gpu-&gt;propertyBlobs.end())<sp/>{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>EINVAL);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpu-&gt;propertyBlobs.erase(it,<sp/>gpu-&gt;propertyBlobs.end());</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202" refid="mock__drm_8cpp_1a0a43c7fc249af31ed857cdafd8c3692c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1a0a43c7fc249af31ed857cdafd8c3692c" kindref="member">drmModeCreateLease</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*objects,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_objects,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/>uint32_t<sp/>*lessee_id)</highlight></codeline>
<codeline lineno="1203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>ENOTSUP);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207" refid="mock__drm_8cpp_1a91323de6dc7dfdd7aa9337041aa634f5" refkind="member"><highlight class="normal">drmModeLesseeListPtr<sp/><ref refid="mock__drm_8cpp_1a91323de6dc7dfdd7aa9337041aa634f5" kindref="member">drmModeListLessees</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)</highlight></codeline>
<codeline lineno="1208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212" refid="mock__drm_8cpp_1a8da1064f168a51203636eb92dd004fd8" refkind="member"><highlight class="normal">drmModeObjectListPtr<sp/><ref refid="mock__drm_8cpp_1a8da1064f168a51203636eb92dd004fd8" kindref="member">drmModeGetLease</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)</highlight></codeline>
<codeline lineno="1213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217" refid="mock__drm_8cpp_1a79ea9dba1511d4ea5a18523b9deca335" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1a79ea9dba1511d4ea5a18523b9deca335" kindref="member">drmModeRevokeLease</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint32_t<sp/>lessee_id)</highlight></codeline>
<codeline lineno="1218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(errno<sp/>=<sp/>ENOTSUP);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222" refid="mock__drm_8cpp_1ae4bb6c02567ec7053e6161fa4768dd60" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1ae4bb6c02567ec7053e6161fa4768dd60" kindref="member">drmModeFreeResources</ref>(drmModeResPtr<sp/>ptr)</highlight></codeline>
<codeline lineno="1223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;gpu<sp/>:<sp/>std::as_const(s_gpus))<sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gpu-&gt;resPtrs.removeOne(ptr))<sp/>{</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ptr-&gt;connectors;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ptr-&gt;crtcs;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ptr-&gt;encoders;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ptr-&gt;fbs;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235" refid="mock__drm_8cpp_1ac7fb2823b73ac63a26536d5c12f9da0f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1ac7fb2823b73ac63a26536d5c12f9da0f" kindref="member">drmModeFreePlaneResources</ref>(drmModePlaneResPtr<sp/>ptr)</highlight></codeline>
<codeline lineno="1236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;gpu<sp/>:<sp/>std::as_const(s_gpus))<sp/>{</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gpu-&gt;drmPlaneRes.removeOne(ptr))<sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ptr-&gt;planes;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245" refid="mock__drm_8cpp_1a76326d91a7388b993c9cb46b210feeee" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1a76326d91a7388b993c9cb46b210feeee" kindref="member">drmModeFreeCrtc</ref>(drmModeCrtcPtr<sp/>ptr)</highlight></codeline>
<codeline lineno="1246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;gpu<sp/>:<sp/>std::as_const(s_gpus))<sp/>{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gpu-&gt;drmCrtcs.removeOne(ptr))<sp/>{</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_UNREACHABLE();</highlight></codeline>
<codeline lineno="1254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256" refid="mock__drm_8cpp_1a8b940d0de7211d48210abc28b416df5f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1a8b940d0de7211d48210abc28b416df5f" kindref="member">drmModeFreeConnector</ref>(drmModeConnectorPtr<sp/>ptr)</highlight></codeline>
<codeline lineno="1257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;gpu<sp/>:<sp/>std::as_const(s_gpus))<sp/>{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gpu-&gt;drmConnectors.removeOne(ptr))<sp/>{</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ptr-&gt;encoders;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ptr-&gt;props;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ptr-&gt;prop_values;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_UNREACHABLE();</highlight></codeline>
<codeline lineno="1268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270" refid="mock__drm_8cpp_1a2c7fe96b3c2f9f77b4f3dd9a228b6a4f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1a2c7fe96b3c2f9f77b4f3dd9a228b6a4f" kindref="member">drmModeFreeEncoder</ref>(drmModeEncoderPtr<sp/>ptr)</highlight></codeline>
<codeline lineno="1271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;gpu<sp/>:<sp/>std::as_const(s_gpus))<sp/>{</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gpu-&gt;drmEncoders.removeOne(ptr))<sp/>{</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_UNREACHABLE();</highlight></codeline>
<codeline lineno="1279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281" refid="mock__drm_8cpp_1a250febcbc5c970e7dfdfd21cd2d86ffe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mock__drm_8cpp_1a250febcbc5c970e7dfdfd21cd2d86ffe" kindref="member">drmModeFreePlane</ref>(drmModePlanePtr<sp/>ptr)</highlight></codeline>
<codeline lineno="1282"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;gpu<sp/>:<sp/>std::as_const(s_gpus))<sp/>{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gpu-&gt;drmPlanes.removeOne(ptr))<sp/>{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_UNREACHABLE();</highlight></codeline>
<codeline lineno="1290"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="kwin/autotests/drm/mock_drm.cpp"/>
  </compounddef>
</doxygen>
