<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="xdgshellwindow__test_8cpp" kind="file" language="C++">
    <compoundname>xdgshellwindow_test.cpp</compoundname>
    <includes refid="kwin__wayland__test_8h" local="yes">kwin_wayland_test.h</includes>
    <includes refid="core_2output_8h" local="yes">core/output.h</includes>
    <includes refid="decorationbridge_8h" local="yes">decorations/decorationbridge.h</includes>
    <includes refid="settings_8h" local="yes">decorations/settings.h</includes>
    <includes refid="pointer__input_8h" local="yes">pointer_input.h</includes>
    <includes local="yes">virtualdesktops.h</includes>
    <includes refid="clientconnection_8h" local="yes">wayland/clientconnection.h</includes>
    <includes refid="display_8h" local="yes">wayland/display.h</includes>
    <includes refid="surface_8h" local="yes">wayland/surface.h</includes>
    <includes refid="wayland__server_8h" local="yes">wayland_server.h</includes>
    <includes local="yes">window.h</includes>
    <includes refid="workspace_8h" local="yes">workspace.h</includes>
    <includes local="no">KDecoration3/DecoratedWindow</includes>
    <includes local="no">KDecoration3/Decoration</includes>
    <includes local="no">KDecoration3/DecorationSettings</includes>
    <includes local="no">KWayland/Client/appmenu.h</includes>
    <includes local="no">KWayland/Client/compositor.h</includes>
    <includes local="no">KWayland/Client/connection_thread.h</includes>
    <includes local="no">KWayland/Client/output.h</includes>
    <includes local="no">KWayland/Client/pointer.h</includes>
    <includes local="no">KWayland/Client/seat.h</includes>
    <includes local="no">KWayland/Client/subsurface.h</includes>
    <includes local="no">KWayland/Client/surface.h</includes>
    <includes local="no">QDBusConnection</includes>
    <includes local="no">sys/socket.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">csignal</includes>
    <includes local="yes">xdgshellwindow_test.moc</includes>
    <incdepgraph>
      <node id="2">
        <label>kwin_wayland_test.h</label>
        <link refid="kwin__wayland__test_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>kwin/autotests/integration/xdgshellwindow_test.cpp</label>
        <link refid="xdgshellwindow__test_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>core/colorspace.h</label>
        <link refid="colorspace_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>core/inputdevice.h</label>
        <link refid="inputdevice_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>core/output.h</label>
        <link refid="core_2output_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>core/renderbackend.h</label>
        <link refid="renderbackend_8h"/>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>renderloop.h</label>
        <link refid="renderloop_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>core/rendertarget.h</label>
        <link refid="rendertarget_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>cursor.h</label>
        <link refid="cursor_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>decorations/decorationbridge.h</label>
        <link refid="decorationbridge_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>decorations/settings.h</label>
        <link refid="settings_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>effect/globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>input.h</label>
        <link refid="input_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>main.h</label>
        <link refid="main_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>options.h</label>
        <link refid="options_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>pointer_input.h</label>
        <link refid="pointer__input_8h"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>sm.h</label>
        <link refid="sm_8h"/>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>utils/common.h</label>
        <link refid="common_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>utils/cursortheme.h</label>
        <link refid="cursortheme_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>utils/edid.h</label>
        <link refid="edid_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>utils/filedescriptor.h</label>
        <link refid="filedescriptor_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>utils/version.h</label>
        <link refid="version_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>wayland/clientconnection.h</label>
        <link refid="clientconnection_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>wayland/display.h</label>
        <link refid="display_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>wayland/surface.h</label>
        <link refid="surface_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>wayland_server.h</label>
        <link refid="wayland__server_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>workspace.h</label>
        <link refid="workspace_8h"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>KConfigGroup</label>
      </node>
      <node id="57">
        <label>KConfigWatcher</label>
      </node>
      <node id="94">
        <label>KDecoration3/DecoratedWindow</label>
      </node>
      <node id="95">
        <label>KDecoration3/Decoration</label>
      </node>
      <node id="96">
        <label>KDecoration3/DecorationSettings</label>
      </node>
      <node id="47">
        <label>KDecoration3/Private/DecorationBridge</label>
      </node>
      <node id="49">
        <label>KDecoration3/Private/DecorationSettingsPrivate</label>
      </node>
      <node id="53">
        <label>KSharedConfig</label>
      </node>
      <node id="97">
        <label>KWayland/Client/appmenu.h</label>
      </node>
      <node id="98">
        <label>KWayland/Client/compositor.h</label>
      </node>
      <node id="99">
        <label>KWayland/Client/connection_thread.h</label>
      </node>
      <node id="100">
        <label>KWayland/Client/output.h</label>
      </node>
      <node id="101">
        <label>KWayland/Client/pointer.h</label>
      </node>
      <node id="102">
        <label>KWayland/Client/seat.h</label>
      </node>
      <node id="103">
        <label>KWayland/Client/subsurface.h</label>
      </node>
      <node id="17">
        <label>KWayland/Client/surface.h</label>
      </node>
      <node id="79">
        <label>QAbstractNativeEventFilter</label>
      </node>
      <node id="80">
        <label>QApplication</label>
      </node>
      <node id="40">
        <label>QByteArray</label>
      </node>
      <node id="6">
        <label>QCoreApplication</label>
      </node>
      <node id="104">
        <label>QDBusConnection</label>
      </node>
      <node id="83">
        <label>QDBusContext</label>
      </node>
      <node id="84">
        <label>QDataStream</label>
      </node>
      <node id="43">
        <label>QDebug</label>
      </node>
      <node id="63">
        <label>QElapsedTimer</label>
      </node>
      <node id="52">
        <label>QHash</label>
      </node>
      <node id="7">
        <label>QImage</label>
      </node>
      <node id="41">
        <label>QList</label>
      </node>
      <node id="91">
        <label>QLoggingCategory</label>
      </node>
      <node id="39">
        <label>QMatrix4x4</label>
      </node>
      <node id="12">
        <label>QObject</label>
      </node>
      <node id="8">
        <label>QPoint</label>
      </node>
      <node id="64">
        <label>QPointF</label>
      </node>
      <node id="56">
        <label>QPointer</label>
      </node>
      <node id="81">
        <label>QProcessEnvironment</label>
      </node>
      <node id="44">
        <label>QRect</label>
      </node>
      <node id="74">
        <label>QRegion</label>
      </node>
      <node id="58">
        <label>QSet</label>
      </node>
      <node id="61">
        <label>QSharedDataPointer</label>
      </node>
      <node id="15">
        <label>QSignalSpy</label>
      </node>
      <node id="42">
        <label>QSize</label>
      </node>
      <node id="90">
        <label>QString</label>
      </node>
      <node id="85">
        <label>QStringList</label>
      </node>
      <node id="16">
        <label>QTest</label>
      </node>
      <node id="86">
        <label>QTimer</label>
      </node>
      <node id="45">
        <label>QUuid</label>
      </node>
      <node id="9">
        <label>QVariant</label>
      </node>
      <node id="10">
        <label>QVector2D</label>
      </node>
      <node id="62">
        <label>chrono</label>
      </node>
      <node id="92">
        <label>climits</label>
      </node>
      <node id="5">
        <label>config-kwin.h</label>
      </node>
      <node id="107">
        <label>csignal</label>
      </node>
      <node id="59">
        <label>functional</label>
      </node>
      <node id="11">
        <label>kwin_export.h</label>
      </node>
      <node id="13">
        <label>main.h</label>
      </node>
      <node id="68">
        <label>memory</label>
      </node>
      <node id="93">
        <label>netwm_def.h</label>
      </node>
      <node id="18">
        <label>optional</label>
      </node>
      <node id="19">
        <label>qwayland-color-management-v1.h</label>
      </node>
      <node id="20">
        <label>qwayland-cursor-shape-v1.h</label>
      </node>
      <node id="21">
        <label>qwayland-fake-input.h</label>
      </node>
      <node id="22">
        <label>qwayland-fractional-scale-v1.h</label>
      </node>
      <node id="23">
        <label>qwayland-idle-inhibit-unstable-v1.h</label>
      </node>
      <node id="24">
        <label>qwayland-input-method-unstable-v1.h</label>
      </node>
      <node id="25">
        <label>qwayland-kde-output-device-v2.h</label>
      </node>
      <node id="26">
        <label>qwayland-kde-output-management-v2.h</label>
      </node>
      <node id="27">
        <label>qwayland-kde-screen-edge-v1.h</label>
      </node>
      <node id="28">
        <label>qwayland-security-context-v1.h</label>
      </node>
      <node id="29">
        <label>qwayland-text-input-unstable-v3.h</label>
      </node>
      <node id="30">
        <label>qwayland-wlr-layer-shell-unstable-v1.h</label>
      </node>
      <node id="31">
        <label>qwayland-xdg-decoration-unstable-v1.h</label>
      </node>
      <node id="32">
        <label>qwayland-xdg-dialog-v1.h</label>
      </node>
      <node id="33">
        <label>qwayland-xdg-shell.h</label>
      </node>
      <node id="34">
        <label>qwayland-zkde-screencast-unstable-v1.h</label>
      </node>
      <node id="105">
        <label>sys/socket.h</label>
      </node>
      <node id="67">
        <label>sys/types.h</label>
      </node>
      <node id="106">
        <label>unistd.h</label>
      </node>
      <node id="65">
        <label>virtualdesktops.h</label>
      </node>
      <node id="14">
        <label>window.h</label>
      </node>
      <node id="54">
        <label>xcb/xcb.h</label>
      </node>
      <node id="108">
        <label>xdgshellwindow_test.moc</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_test_xdg_shell_window" prot="public">TestXdgShellWindow</innerclass>
    <sectiondef kind="var">
      <memberdef kind="variable" id="xdgshellwindow__test_8cpp_1a485d6ddd568caea0908934bfdb9fbadb" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString s_socketName</definition>
        <argsstring></argsstring>
        <name>s_socketName</name>
        <initializer>= QStringLiteral(&quot;wayland_test_kwin_xdgshellwindow-0&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/integration/xdgshellwindow_test.cpp" line="48" column="22" bodyfile="kwin/autotests/integration/xdgshellwindow_test.cpp" bodystart="48" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>KWin<sp/>-<sp/>the<sp/>KDE<sp/>window<sp/>manager</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>KDE<sp/>project.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2016<sp/>Martin<sp/>Gräßlin<sp/>&lt;mgraesslin@kde.org&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2019<sp/>David<sp/>Edmundson<sp/>&lt;davidedmundson@kde.org&gt;</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="kwin__wayland__test_8h" kindref="compound">kwin_wayland_test.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="core_2output_8h" kindref="compound">core/output.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="decorationbridge_8h" kindref="compound">decorations/decorationbridge.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="settings_8h" kindref="compound">decorations/settings.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pointer__input_8h" kindref="compound">pointer_input.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;virtualdesktops.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="clientconnection_8h" kindref="compound">wayland/clientconnection.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="display_8h" kindref="compound">wayland/display.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="surface_8h" kindref="compound">wayland/surface.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wayland__server_8h" kindref="compound">wayland_server.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;window.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="workspace_8h" kindref="compound">workspace.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KDecoration3/DecoratedWindow&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KDecoration3/Decoration&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KDecoration3/DecorationSettings&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/appmenu.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/compositor.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/connection_thread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/output.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/pointer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/seat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/subsurface.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/surface.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QDBusConnection&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/socket.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;csignal&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win" kindref="compound">KWin</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>s_socketName<sp/>=<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;wayland_test_kwin_xdgshellwindow-0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="class_test_xdg_shell_window" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_test_xdg_shell_window" kindref="compound">TestXdgShellWindow</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QObject</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Q_SLOTS:</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initTestCase();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanup();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testMapUnmap();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testWindowOutputs();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testMinimizeActiveWindow();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testFullscreen_data();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testFullscreen();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testUserCanSetFullscreen();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testSendFullScreenWindowToAnotherOutput();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testMaximizeHorizontal();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testMaximizeVertical();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testMaximizeFull();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testMaximizedToFullscreen_data();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testMaximizedToFullscreen();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testSendMaximizedWindowToAnotherOutput();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInteractiveMoveUnmaximizeFull();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInteractiveMoveUnmaximizeInitiallyFull();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInteractiveMoveUnmaximizeHorizontal();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInteractiveMoveUnmaximizeVertical();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testFullscreenMultipleOutputs();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testHidden();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testDesktopFileName();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testCaptionSimplified();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testUnresponsiveWindow_data();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testUnresponsiveWindow();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testAppMenu();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testSendClientWithTransientToDesktop();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testMinimizeWindowWithTransients();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testXdgDecoration_data();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testXdgDecoration();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testXdgNeverCommitted();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testXdgInitialState();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testXdgInitiallyMaximised();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testXdgInitiallyFullscreen();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testXdgInitiallyMinimized();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testXdgWindowGeometryIsntSet();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testXdgWindowGeometryAttachBuffer();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testXdgWindowGeometryAttachSubSurface();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testXdgWindowGeometryInteractiveResize();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testXdgWindowGeometryFullScreen();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testXdgWindowGeometryMaximize();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testXdgPopupReactive_data();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testXdgPopupReactive();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testXdgPopupReposition();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testPointerInputTransform();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testReentrantSetFrameGeometry();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testDoubleMaximize();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testDoubleFullscreenSeparatedByCommit();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testMaximizeAndChangeDecorationModeAfterInitialCommit();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testFullScreenAndChangeDecorationModeAfterInitialCommit();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testChangeDecorationModeAfterInitialCommit();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testModal();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testCloseModal();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testCloseModalPreSetup();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testCloseInactiveModal();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testClosePopupOnParentUnmapped();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testPopupWithDismissedParent();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testMinimumSize();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testNoMinimumSize();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testMaximumSize();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testNoMaximumSize();</highlight></codeline>
<codeline lineno="118"><highlight class="normal">};</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testXdgPopupReactive_data()</highlight></codeline>
<codeline lineno="121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;bool&gt;(</highlight><highlight class="stringliteral">&quot;reactive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;QPointF&gt;(</highlight><highlight class="stringliteral">&quot;parentPos&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;QPointF&gt;(</highlight><highlight class="stringliteral">&quot;popupPos&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;reactive&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>QPointF(0,<sp/>1024)<sp/>&lt;&lt;<sp/>QPointF(50,<sp/>1024<sp/>-<sp/>10);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;not<sp/>reactive&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>QPointF(0,<sp/>1024)<sp/>&lt;&lt;<sp/>QPointF(50,<sp/>1024<sp/>+<sp/>40);</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testXdgPopupReactive()</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>the<sp/>behavior<sp/>of<sp/>reactive<sp/>popups.<sp/>If<sp/>a<sp/>popup<sp/>is<sp/>not<sp/>reactive,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>only<sp/>has<sp/>to<sp/>move<sp/>together<sp/>with<sp/>its<sp/>parent.<sp/>If<sp/>a<sp/>popup<sp/>is<sp/>reactive,<sp/>it<sp/>moves</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>its<sp/>parent<sp/>and<sp/>it&apos;s<sp/>reconstrained<sp/>as<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgPositioner&gt;<sp/>positioner(<ref refid="namespace_k_win_1_1_test_1a735a2b3ebb5e8d173daba48b745871a4" kindref="member">Test::createXdgPositioner</ref>());</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>positioner-&gt;set_size(10,<sp/>10);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>positioner-&gt;set_anchor_rect(10,<sp/>10,<sp/>10,<sp/>10);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>positioner-&gt;set_anchor_rect(0,<sp/>0,<sp/>50,<sp/>40);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>positioner-&gt;set_anchor(Test::XdgPositioner::anchor_bottom_right);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>positioner-&gt;set_gravity(Test::XdgPositioner::gravity_bottom_right);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>positioner-&gt;set_constraint_adjustment(Test::XdgPositioner::constraint_adjustment_slide_y);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>reactive);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reactive)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>positioner-&gt;set_reactive();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>rootSurface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>root(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(rootSurface.get()));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1a1c718478bc9788d32a9614c371aa754b" kindref="member">rootWindow</ref><sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(rootSurface.get(),<sp/>QSize(100,<sp/>100),<sp/>Qt::cyan);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1a1c718478bc9788d32a9614c371aa754b" kindref="member">rootWindow</ref>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>childSurface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgPopup&gt;<sp/>popup(<ref refid="namespace_k_win_1_1_test_1a52039e32ae72c4329a4720d32469a385" kindref="member">Test::createXdgPopupSurface</ref>(childSurface.get(),<sp/>root-&gt;xdgSurface(),<sp/>positioner.get()));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childWindow<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(childSurface.get(),<sp/>QSize(10,<sp/>10),<sp/>Qt::cyan);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childWindow);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(QPointF,<sp/>parentPos);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(QPointF,<sp/>popupPos);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>popupConfigureRequested(popup.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_popup_1a49692131e1f07345dbb7242c5f9308ae" kindref="member">Test::XdgPopup::configureRequested</ref>);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a1c718478bc9788d32a9614c371aa754b" kindref="member">rootWindow</ref>-&gt;move(parentPos);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(popupConfigureRequested.wait());</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(popupConfigureRequested.count(),<sp/>1);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(childWindow-&gt;pos(),<sp/>popupPos);</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testXdgPopupReposition()</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgPositioner&gt;<sp/>positioner(<ref refid="namespace_k_win_1_1_test_1a735a2b3ebb5e8d173daba48b745871a4" kindref="member">Test::createXdgPositioner</ref>());</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>positioner-&gt;set_size(10,<sp/>10);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>positioner-&gt;set_anchor_rect(10,<sp/>10,<sp/>10,<sp/>10);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgPositioner&gt;<sp/>otherPositioner(<ref refid="namespace_k_win_1_1_test_1a735a2b3ebb5e8d173daba48b745871a4" kindref="member">Test::createXdgPositioner</ref>());</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>otherPositioner-&gt;set_size(50,<sp/>50);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>otherPositioner-&gt;set_anchor_rect(10,<sp/>10,<sp/>10,<sp/>10);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>rootSurface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>root(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(rootSurface.get()));</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1a1c718478bc9788d32a9614c371aa754b" kindref="member">rootWindow</ref><sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(rootSurface.get(),<sp/>QSize(100,<sp/>100),<sp/>Qt::cyan);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1a1c718478bc9788d32a9614c371aa754b" kindref="member">rootWindow</ref>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>childSurface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgPopup&gt;<sp/>popup(<ref refid="namespace_k_win_1_1_test_1a52039e32ae72c4329a4720d32469a385" kindref="member">Test::createXdgPopupSurface</ref>(childSurface.get(),<sp/>root-&gt;xdgSurface(),<sp/>positioner.get()));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childWindow<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(childSurface.get(),<sp/>QSize(10,<sp/>10),<sp/>Qt::cyan);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childWindow);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>reconfigureSpy(popup.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_popup_1a49692131e1f07345dbb7242c5f9308ae" kindref="member">Test::XdgPopup::configureRequested</ref>);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>popup-&gt;reposition(otherPositioner-&gt;object(),<sp/>500000);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(reconfigureSpy.wait());</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(reconfigureSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::initTestCase()</highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>qRegisterMetaType&lt;KWin::Window<sp/>*&gt;();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>qRegisterMetaType&lt;KWayland::Client::Output<sp/>*&gt;();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;init(s_socketName));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a1373c61710748fcde7e428e05bd5f2cb" kindref="member">Test::setOutputConfig</ref>({</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QRect(0,<sp/>0,<sp/>1280,<sp/>1024),</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QRect(1280,<sp/>0,<sp/>1280,<sp/>1024),</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>kwinApp()-&gt;start();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outputs<sp/>=<sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1aaee7f44422f40ea8256b2f54e83a2b37" kindref="member">outputs</ref>();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(outputs.count(),<sp/>2);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(outputs[0]-&gt;geometry(),<sp/>QRect(0,<sp/>0,<sp/>1280,<sp/>1024));</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(outputs[1]-&gt;geometry(),<sp/>QRect(1280,<sp/>0,<sp/>1280,<sp/>1024));</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::init()</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1a36c6e87757c3c97858c55b650c9d304c" kindref="member">Test::setupWaylandConnection</ref>(Test::AdditionalWaylandInterface::Seat<sp/>|<sp/>Test::AdditionalWaylandInterface::XdgDecorationV1<sp/>|<sp/>Test::AdditionalWaylandInterface::AppMenu<sp/>|<sp/>Test::AdditionalWaylandInterface::XdgDialogV1));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1ab4cf52ccd596caf6af24eb259913c597" kindref="member">Test::waitForWaylandPointer</ref>());</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1abe694aeb41eaff7b515070ad0c11dba4" kindref="member">setActiveOutput</ref>(QPoint(640,<sp/>512));</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>mouse<sp/>in<sp/>the<sp/>middle<sp/>of<sp/>screen<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">KWin::input</ref>()-&gt;<ref refid="class_k_win_1_1_input_redirection_1a74da9abb10fc4dd9dcf4a0addc46c9bd" kindref="member">pointer</ref>()-&gt;<ref refid="class_k_win_1_1_pointer_input_redirection_1ad863f302cae5e8e1634db3d75a85f69e" kindref="member">warp</ref>(QPoint(640,<sp/>512));</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::cleanup()</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a12755bae9118cb958baf0efbd222d7c8" kindref="member">Test::destroyWaylandConnection</ref>();</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testMapUnmap()</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>the<sp/>compositor<sp/>destroys<sp/>XdgToplevelWindow<sp/>when<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>associated<sp/>xdg_toplevel<sp/>surface<sp/>is<sp/>unmapped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>wl_surface<sp/>and<sp/>an<sp/>xdg_toplevel,<sp/>but<sp/>don&apos;t<sp/>commit<sp/>them<sp/>yet!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get(),<sp/>Test::CreationSetup::CreateOnly));</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowAddedSpy(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_workspace_1a8f82a0ac5517ddb86629fa3f8243e388" kindref="member">Workspace::windowAdded</ref>);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>configureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tell<sp/>the<sp/>compositor<sp/>that<sp/>we<sp/>want<sp/>to<sp/>map<sp/>the<sp/>surface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>compositor<sp/>will<sp/>respond<sp/>with<sp/>a<sp/>configure<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(configureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(configureRequestedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>can<sp/>attach<sp/>a<sp/>buffer<sp/>with<sp/>actual<sp/>data<sp/>to<sp/>the<sp/>surface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(windowAddedSpy.wait());</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(windowAddedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/>windowAddedSpy.last().first().value&lt;Window<sp/>*&gt;();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;readyForPainting(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>the<sp/>window<sp/>becomes<sp/>active,<sp/>the<sp/>compositor<sp/>will<sp/>send<sp/>another<sp/>configure<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(configureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(configureRequestedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unmap<sp/>the<sp/>xdg_toplevel<sp/>surface<sp/>by<sp/>committing<sp/>a<sp/>null<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;attachBuffer(KWayland::Client::Buffer::Ptr());</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tell<sp/>the<sp/>compositor<sp/>that<sp/>we<sp/>want<sp/>to<sp/>re-map<sp/>the<sp/>xdg_toplevel<sp/>surface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>compositor<sp/>will<sp/>respond<sp/>with<sp/>a<sp/>configure<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(configureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(configureRequestedSpy.count(),<sp/>3);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>can<sp/>attach<sp/>a<sp/>buffer<sp/>with<sp/>actual<sp/>data<sp/>to<sp/>the<sp/>surface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(windowAddedSpy.wait());</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(windowAddedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>window<sp/>=<sp/>windowAddedSpy.last().first().value&lt;Window<sp/>*&gt;();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;readyForPainting(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>compositor<sp/>will<sp/>respond<sp/>with<sp/>a<sp/>configure<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(configureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(configureRequestedSpy.count(),<sp/>4);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>the<sp/>test<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface.reset();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testWindowOutputs()</highlight></codeline>
<codeline lineno="293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>QSize(200,<sp/>200);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>outputEnteredSpy(surface.get(),<sp/>&amp;KWayland::Client::Surface::outputEntered);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>outputLeftSpy(surface.get(),<sp/>&amp;KWayland::Client::Surface::outputLeft);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>size,<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assumption:<sp/>window<sp/>is<sp/>initially<sp/>placed<sp/>on<sp/>first<sp/>screen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(outputEnteredSpy.wait());</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(outputEnteredSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surface-&gt;outputs().count(),<sp/>1);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surface-&gt;outputs().first()-&gt;globalPosition(),<sp/>QPoint(0,<sp/>0));</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>to<sp/>overlapping<sp/>both<sp/>first<sp/>and<sp/>second<sp/>screen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;moveResize(QRect(QPoint(1250,<sp/>100),<sp/>size));</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(outputEnteredSpy.wait());</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(outputEnteredSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(outputLeftSpy.count(),<sp/>0);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surface-&gt;outputs().count(),<sp/>2);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surface-&gt;outputs()[0]<sp/>!=<sp/>surface-&gt;outputs()[1]);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>entirely<sp/>into<sp/>second<sp/>screen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;moveResize(QRect(QPoint(1400,<sp/>100),<sp/>size));</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(outputLeftSpy.wait());</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(outputEnteredSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(outputLeftSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surface-&gt;outputs().count(),<sp/>1);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surface-&gt;outputs().first()-&gt;globalPosition(),<sp/>QPoint(1280,<sp/>0));</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testMinimizeActiveWindow()</highlight></codeline>
<codeline lineno="326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>when<sp/>minimizing<sp/>the<sp/>active<sp/>window<sp/>it<sp/>gets<sp/>deactivated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;QObject&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;activeWindow(),<sp/>window);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;wantsInput());</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;wantsTabFocus());</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isShown());</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1a3c6dad0c89221aafe580d298f7a2bab5" kindref="member">slotWindowMinimize</ref>();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!window-&gt;isShown());</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;wantsInput());</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;wantsTabFocus());</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!window-&gt;isActive());</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;activeWindow());</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isMinimized());</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unminimize<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;setMinimized(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!window-&gt;isMinimized());</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!window-&gt;isActive());</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;wantsInput());</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;wantsTabFocus());</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isShown());</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;activeWindow(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testFullscreen_data()</highlight></codeline>
<codeline lineno="357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;Test::XdgToplevelDecorationV1::mode&gt;(</highlight><highlight class="stringliteral">&quot;decoMode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;client-side<sp/>deco&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>Test::XdgToplevelDecorationV1::mode_client_side;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;server-side<sp/>deco&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>Test::XdgToplevelDecorationV1::mode_server_side;</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testFullscreen()</highlight></codeline>
<codeline lineno="365"><highlight class="normal">{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>a<sp/>window<sp/>can<sp/>be<sp/>properly<sp/>fullscreened</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>Test::XdgToplevel::States<sp/>states;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get(),<sp/>Test::CreationSetup::CreateOnly));</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevelDecorationV1&gt;<sp/>decoration(<ref refid="namespace_k_win_1_1_test_1a5b6ba1c532f1dec604fbb3a7bd44ee04" kindref="member">Test::createXdgToplevelDecorationV1</ref>(shellSurface.get()));</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>decorationConfigureRequestedSpy(decoration.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_decoration_v1_1a389a2bf556a1e31a46eeca8afb482619" kindref="member">Test::XdgToplevelDecorationV1::configureRequested</ref>);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>xdg-toplevel<sp/>surface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(Test::XdgToplevelDecorationV1::mode,<sp/>decoMode);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>decoration-&gt;set_mode(decoMode);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(500,<sp/>250),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;layer(),<sp/><ref refid="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7bae433b31a6f103cf33c75a7b84b999116" kindref="member">NormalLayer</ref>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!window-&gt;isFullScreen());</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;clientSize(),<sp/>QSize(500,<sp/>250));</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;isDecorated(),<sp/>decoMode<sp/>==<sp/>Test::XdgToplevelDecorationV1::mode_server_side);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;clientSizeToFrameSize(window-&gt;clientSize()),<sp/>window-&gt;size());</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>fullScreenChangedSpy(window,<sp/>&amp;Window::fullScreenChanged);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>frameGeometryChangedSpy(window,<sp/>&amp;Window::frameGeometryChanged);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>compositor<sp/>to<sp/>send<sp/>a<sp/>configure<sp/>event<sp/>with<sp/>the<sp/>Activated<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(states<sp/>&amp;<sp/>Test::XdgToplevel::State::Activated);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ask<sp/>the<sp/>compositor<sp/>to<sp/>show<sp/>the<sp/>window<sp/>in<sp/>full<sp/>screen<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_fullscreen(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>3);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(states<sp/>&amp;<sp/>Test::XdgToplevel::State::Fullscreen);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>window-&gt;output()-&gt;geometry().size());</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(fullScreenChangedSpy.wait());</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(fullScreenChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isFullScreen());</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!window-&gt;isDecorated());</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;layer(),<sp/><ref refid="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7ba72d87368e7eece861abf32b4d9cd5db0" kindref="member">ActiveLayer</ref>);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>QRect(QPoint(0,<sp/>0),<sp/>window-&gt;output()-&gt;geometry().size()));</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ask<sp/>the<sp/>compositor<sp/>to<sp/>show<sp/>the<sp/>window<sp/>in<sp/>normal<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;unset_fullscreen();</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>4);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!(states<sp/>&amp;<sp/>Test::XdgToplevel::State::Fullscreen));</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>QSize(500,<sp/>250));</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(fullScreenChangedSpy.wait());</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(fullScreenChangedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;clientSize(),<sp/>QSize(500,<sp/>250));</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!window-&gt;isFullScreen());</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;isDecorated(),<sp/>decoMode<sp/>==<sp/>Test::XdgToplevelDecorationV1::mode_server_side);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;layer(),<sp/><ref refid="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7bae433b31a6f103cf33c75a7b84b999116" kindref="member">NormalLayer</ref>);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface.reset();</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testUserCanSetFullscreen()</highlight></codeline>
<codeline lineno="444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!window-&gt;isFullScreen());</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isFullScreenable());</highlight></codeline>
<codeline lineno="452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testSendFullScreenWindowToAnotherOutput()</highlight></codeline>
<codeline lineno="455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>the<sp/>fullscreen<sp/>window<sp/>will<sp/>have<sp/>correct<sp/>geometry<sp/>restore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>it&apos;s<sp/>sent<sp/>to<sp/>another<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outputs<sp/>=<sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1aaee7f44422f40ea8256b2f54e83a2b37" kindref="member">outputs</ref>();</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>compositor<sp/>to<sp/>send<sp/>a<sp/>configure<sp/>event<sp/>with<sp/>the<sp/>activated<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>window<sp/>to<sp/>the<sp/>left<sp/>monitor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;move(QPointF(10,<sp/>20));</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>QRectF(10,<sp/>20,<sp/>100,<sp/>50));</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;output(),<sp/>outputs[0]);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>the<sp/>window<sp/>fullscreen.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>frameGeometryChangedSpy(window,<sp/>&amp;Window::frameGeometryChanged);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_fullscreen(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;isFullScreen(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>QRectF(0,<sp/>0,<sp/>1280,<sp/>1024));</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;fullscreenGeometryRestore(),<sp/>QRectF(10,<sp/>20,<sp/>100,<sp/>50));</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;output(),<sp/>outputs[0]);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>the<sp/>window<sp/>to<sp/>another<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;sendToOutput(outputs[1]);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;isFullScreen(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>QRectF(1280,<sp/>0,<sp/>1280,<sp/>1024));</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;fullscreenGeometryRestore(),<sp/>QRectF(1280<sp/>+<sp/>10,<sp/>20,<sp/>100,<sp/>50));</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;output(),<sp/>outputs[1]);</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testMaximizedToFullscreen_data()</highlight></codeline>
<codeline lineno="498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;Test::XdgToplevelDecorationV1::mode&gt;(</highlight><highlight class="stringliteral">&quot;decoMode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;client-side<sp/>deco&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>Test::XdgToplevelDecorationV1::mode_client_side;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;server-side<sp/>deco&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>Test::XdgToplevelDecorationV1::mode_server_side;</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testMaximizedToFullscreen()</highlight></codeline>
<codeline lineno="506"><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>a<sp/>window<sp/>can<sp/>be<sp/>properly<sp/>fullscreened<sp/>after<sp/>maximizing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>Test::XdgToplevel::States<sp/>states;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get(),<sp/>Test::CreationSetup::CreateOnly));</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevelDecorationV1&gt;<sp/>decoration(<ref refid="namespace_k_win_1_1_test_1a5b6ba1c532f1dec604fbb3a7bd44ee04" kindref="member">Test::createXdgToplevelDecorationV1</ref>(shellSurface.get()));</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>decorationConfigureRequestedSpy(decoration.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_decoration_v1_1a389a2bf556a1e31a46eeca8afb482619" kindref="member">Test::XdgToplevelDecorationV1::configureRequested</ref>);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>xdg-toplevel<sp/>surface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(Test::XdgToplevelDecorationV1::mode,<sp/>decoMode);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>decoration-&gt;set_mode(decoMode);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!window-&gt;isFullScreen());</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;clientSize(),<sp/>QSize(100,<sp/>50));</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;isDecorated(),<sp/>decoMode<sp/>==<sp/>Test::XdgToplevelDecorationV1::mode_server_side);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>fullscreenChangedSpy(window,<sp/>&amp;Window::fullScreenChanged);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>frameGeometryChangedSpy(window,<sp/>&amp;Window::frameGeometryChanged);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>compositor<sp/>to<sp/>send<sp/>a<sp/>configure<sp/>event<sp/>with<sp/>the<sp/>Activated<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(states<sp/>&amp;<sp/>Test::XdgToplevel::State::Activated);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ask<sp/>the<sp/>compositor<sp/>to<sp/>maximize<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_maximized();</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>3);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(states<sp/>&amp;<sp/>Test::XdgToplevel::State::Maximized);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9abc602b186700b8c6fb525fe2c828e910" kindref="member">MaximizeFull</ref>);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ask<sp/>the<sp/>compositor<sp/>to<sp/>show<sp/>the<sp/>window<sp/>in<sp/>full<sp/>screen<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_fullscreen(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>4);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>window-&gt;output()-&gt;geometry().size());</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(states<sp/>&amp;<sp/>Test::XdgToplevel::State::Maximized);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(states<sp/>&amp;<sp/>Test::XdgToplevel::State::Fullscreen);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(fullscreenChangedSpy.wait());</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(fullscreenChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9abc602b186700b8c6fb525fe2c828e910" kindref="member">MaximizeFull</ref>);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isFullScreen());</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!window-&gt;isDecorated());</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Switch<sp/>back<sp/>to<sp/>normal<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;unset_fullscreen();</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;unset_maximized();</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>5);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>QSize(100,<sp/>50));</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!(states<sp/>&amp;<sp/>Test::XdgToplevel::State::Maximized));</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!(states<sp/>&amp;<sp/>Test::XdgToplevel::State::Fullscreen));</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!window-&gt;isFullScreen());</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;isDecorated(),<sp/>decoMode<sp/>==<sp/>Test::XdgToplevelDecorationV1::mode_server_side);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface.reset();</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testFullscreenMultipleOutputs()</highlight></codeline>
<codeline lineno="595"><highlight class="normal">{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>kwin<sp/>will<sp/>place<sp/>fullscreen<sp/>windows<sp/>in<sp/>the<sp/>outputs<sp/>its<sp/>instructed<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outputs<sp/>=<sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1aaee7f44422f40ea8256b2f54e83a2b37" kindref="member">outputs</ref>();</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(KWin::Output<sp/>*output<sp/>:<sp/>outputs)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Test::XdgToplevel::States<sp/>states;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(surface);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(shellSurface);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(!window-&gt;isFullScreen());</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;clientSize(),<sp/>QSize(100,<sp/>50));</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(!window-&gt;isDecorated());</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSignalSpy<sp/>fullscreenChangedSpy(window,<sp/>&amp;Window::fullScreenChanged);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSignalSpy<sp/>frameGeometryChangedSpy(window,<sp/>&amp;Window::frameGeometryChanged);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>compositor<sp/>to<sp/>send<sp/>a<sp/>configure<sp/>event<sp/>with<sp/>the<sp/>Activated<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(states.testFlag(Test::XdgToplevel::State::Activated));</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ask<sp/>the<sp/>compositor<sp/>to<sp/>show<sp/>the<sp/>window<sp/>in<sp/>full<sp/>screen<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shellSurface-&gt;set_fullscreen(*<ref refid="namespace_k_win_1_1_test_1aef97bdfef9391388689aa4c4bf50d8aa" kindref="member">Test::waylandOutput</ref>(output-&gt;name()));</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>output-&gt;geometry().size());</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(!fullscreenChangedSpy.isEmpty()<sp/>||<sp/>fullscreenChangedSpy.wait());</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(fullscreenChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(!frameGeometryChangedSpy.isEmpty()<sp/>||<sp/>frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isFullScreen());</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>output-&gt;geometry());</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testHidden()</highlight></codeline>
<codeline lineno="646"><highlight class="normal">{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>when<sp/>hiding<sp/>window<sp/>it<sp/>doesn&apos;t<sp/>get<sp/>shown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;QObject&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;activeWindow(),<sp/>window);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;wantsInput());</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;wantsTabFocus());</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isShown());</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;setHidden(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!window-&gt;isShown());</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!window-&gt;isActive());</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;wantsInput());</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;wantsTabFocus());</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unhide<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;setHidden(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isShown());</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;wantsInput());</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;wantsTabFocus());</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>QCOMPARE(workspace()-&gt;activeClient(),<sp/>c);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testDesktopFileName()</highlight></codeline>
<codeline lineno="674"><highlight class="normal">{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>QIcon::setThemeName(QStringLiteral(</highlight><highlight class="stringliteral">&quot;breeze&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>desktop<sp/>file<sp/>name<sp/>is<sp/>passed<sp/>correctly<sp/>to<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>xdg-shell<sp/>as<sp/>ShellSurface<sp/>misses<sp/>the<sp/>setter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_app_id(QStringLiteral(</highlight><highlight class="stringliteral">&quot;org.kde.foo&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;desktopFileName(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;org.kde.foo&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;resourceClass(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;org.kde.foo&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;resourceName().startsWith(</highlight><highlight class="stringliteral">&quot;testXdgShellWindow&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>desktop<sp/>file<sp/>does<sp/>not<sp/>exist,<sp/>so<sp/>icon<sp/>should<sp/>be<sp/>generic<sp/>Wayland</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;icon().name(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;wayland&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>desktopFileNameChangedSpy(window,<sp/>&amp;Window::desktopFileNameChanged);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>iconChangedSpy(window,<sp/>&amp;Window::iconChanged);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_app_id(QStringLiteral(</highlight><highlight class="stringliteral">&quot;org.kde.bar&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(desktopFileNameChangedSpy.wait());</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;desktopFileName(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;org.kde.bar&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;resourceClass(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;org.kde.bar&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;resourceName().startsWith(</highlight><highlight class="stringliteral">&quot;testXdgShellWindow&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>icon<sp/>should<sp/>still<sp/>be<sp/>wayland</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;icon().name(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;wayland&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(iconChangedSpy.isEmpty());</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>dfPath<sp/>=<sp/>QFINDTESTDATA(</highlight><highlight class="stringliteral">&quot;data/example.desktop&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_app_id(dfPath.toUtf8());</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(desktopFileNameChangedSpy.wait());</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(iconChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;desktopFileName(),<sp/>dfPath);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;icon().name(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;kwin&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testCaptionSimplified()</highlight></codeline>
<codeline lineno="709"><highlight class="normal">{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>caption<sp/>is<sp/>properly<sp/>trimmed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>BUG<sp/>323798<sp/>comment<sp/>#12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>done<sp/>for<sp/>xdg-shell<sp/>as<sp/>ShellSurface<sp/>misses<sp/>the<sp/>setter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>origTitle<sp/>=<sp/>QString::fromUtf8(QByteArrayLiteral(</highlight><highlight class="stringliteral">&quot;Was<sp/>tun,<sp/>wenn<sp/>Schüler<sp/>Autismus<sp/>haben?\342\200\250\342\200\250\342\200\250<sp/>–<sp/>Marlies<sp/>Hübner<sp/>-<sp/>Mozilla<sp/>Firefox&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_title(origTitle);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;caption()<sp/>!=<sp/>origTitle);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;caption(),<sp/>origTitle.simplified());</highlight></codeline>
<codeline lineno="721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testUnresponsiveWindow_data()</highlight></codeline>
<codeline lineno="724"><highlight class="normal">{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;QString&gt;(</highlight><highlight class="stringliteral">&quot;shellInterface&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>see<sp/>env<sp/>selection<sp/>in<sp/>qwaylandintegration.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;bool&gt;(</highlight><highlight class="stringliteral">&quot;socketMode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;xdg<sp/>display&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;xdg-shell&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;xdg<sp/>socket&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;xdg-shell&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testUnresponsiveWindow()</highlight></codeline>
<codeline lineno="733"><highlight class="normal">{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>killWindow<sp/>properly<sp/>terminates<sp/>a<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>this<sp/>an<sp/>external<sp/>binary<sp/>is<sp/>launched</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>kill<sp/>=<sp/>QFINDTESTDATA(QStringLiteral(</highlight><highlight class="stringliteral">&quot;kill&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!kill.isEmpty());</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowAddedSpy(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>(),<sp/>&amp;<ref refid="class_k_win_1_1_workspace_1a8f82a0ac5517ddb86629fa3f8243e388" kindref="member">Workspace::windowAdded</ref>);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;QProcess&gt;<sp/>process(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QProcess);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>QProcessEnvironment<sp/>env<sp/>=<sp/>QProcessEnvironment::systemEnvironment();</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(QString,<sp/>shellInterface);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>socketMode);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>env.insert(</highlight><highlight class="stringliteral">&quot;QT_WAYLAND_SHELL_INTEGRATION&quot;</highlight><highlight class="normal">,<sp/>shellInterface);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(socketMode)<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sx[2];</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(socketpair(AF_UNIX,<sp/>SOCK_STREAM<sp/>|<sp/>SOCK_CLOEXEC,<sp/>0,<sp/>sx)<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" kindref="member">waylandServer</ref>()-&gt;<ref refid="class_k_win_1_1_wayland_server_1a86c30976bd1f0d56f359f9d25160e1f6" kindref="member">display</ref>()-&gt;<ref refid="class_k_win_1_1_display_1a07034ffcff1c993fe2efabbb4371ab77" kindref="member">createClient</ref>(sx[0]);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>socket<sp/>=<sp/>dup(sx[1]);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(socket<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env.insert(QStringLiteral(</highlight><highlight class="stringliteral">&quot;WAYLAND_SOCKET&quot;</highlight><highlight class="normal">),<sp/>QByteArray::number(socket));</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env.remove(</highlight><highlight class="stringliteral">&quot;WAYLAND_DISPLAY&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env.insert(</highlight><highlight class="stringliteral">&quot;WAYLAND_DISPLAY&quot;</highlight><highlight class="normal">,<sp/>s_socketName);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>process-&gt;setProcessEnvironment(env);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>process-&gt;setProcessChannelMode(QProcess::ForwardedChannels);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>process-&gt;setProgram(kill);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>processStartedSpy{process.get(),<sp/>&amp;QProcess::started};</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>process-&gt;start();</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(processStartedSpy.wait());</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*killWindow<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(windowAddedSpy.isEmpty())<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(windowAddedSpy.wait());</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>::kill(process-&gt;processId(),<sp/>SIGUSR1);<sp/></highlight><highlight class="comment">//<sp/>send<sp/>a<sp/>signal<sp/>to<sp/>freeze<sp/>the<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>killWindow<sp/>=<sp/>windowAddedSpy.first().first().value&lt;Window<sp/>*&gt;();</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(killWindow);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>unresponsiveSpy(killWindow,<sp/>&amp;Window::unresponsiveChanged);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>killedSpy(process.get(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(QProcess::*)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>QProcess::ExitStatus)</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;QProcess::finished));</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>deletedSpy(killWindow,<sp/>&amp;QObject::destroyed);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>qint64<sp/>startTime<sp/>=<sp/>QDateTime::currentMSecsSinceEpoch();</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wait<sp/>for<sp/>the<sp/>process<sp/>to<sp/>be<sp/>frozen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::qWait(10);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pretend<sp/>the<sp/>user<sp/>clicked<sp/>the<sp/>close<sp/>button</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>killWindow-&gt;closeWindow();</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>window<sp/>should<sp/>not<sp/>yet<sp/>be<sp/>marked<sp/>unresponsive<sp/>nor<sp/>killed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!killWindow-&gt;unresponsive());</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(killedSpy.isEmpty());</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(unresponsiveSpy.wait());</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>window<sp/>should<sp/>be<sp/>marked<sp/>unresponsive<sp/>but<sp/>not<sp/>killed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>elapsed1<sp/>=<sp/>QDateTime::currentMSecsSinceEpoch()<sp/>-<sp/>startTime;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeout<sp/>=<sp/><ref refid="namespace_k_win_1aacddce7916a99bb943d9071c40754c1c" kindref="member">options</ref>-&gt;<ref refid="class_k_win_1_1_options_1ac2798ddc024d3a39d93b29ed09ec53ef" kindref="member">killPingTimeout</ref>()<sp/>/<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>first<sp/>timeout<sp/>at<sp/>half<sp/>the<sp/>time<sp/>is<sp/>for<sp/>&quot;unresponsive&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(elapsed1<sp/>&gt;<sp/>timeout<sp/>-<sp/>200<sp/>&amp;&amp;<sp/>elapsed1<sp/>&lt;<sp/>timeout<sp/>+<sp/>200);<sp/></highlight><highlight class="comment">//<sp/>coarse<sp/>timers<sp/>on<sp/>a<sp/>test<sp/>across<sp/>two<sp/>processes<sp/>means<sp/>we<sp/>need<sp/>a<sp/>fuzzy<sp/>compare</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(killWindow-&gt;unresponsive());</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(killedSpy.isEmpty());</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>verify<sp/>that<sp/>kill<sp/>prompt<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>killWindow-&gt;killWindow();</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>process-&gt;kill();</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(killedSpy.wait());</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(deletedSpy.isEmpty())<sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(deletedSpy.wait());</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testAppMenu()</highlight></codeline>
<codeline lineno="808"><highlight class="normal">{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>register<sp/>a<sp/>faux<sp/>appmenu<sp/>client</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(QDBusConnection::sessionBus().registerService(</highlight><highlight class="stringliteral">&quot;org.kde.kappmenu&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::AppMenu&gt;<sp/>menu(<ref refid="namespace_k_win_1_1_test_1aa8d74a9a8291f560dcc95673c7c6d0b1" kindref="member">Test::waylandAppMenuManager</ref>()-&gt;create(surface.get()));</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>spy(window,<sp/>&amp;Window::hasApplicationMenuChanged);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>menu-&gt;setAddress(</highlight><highlight class="stringliteral">&quot;service.name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;object/path&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>spy.wait();</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;hasApplicationMenu(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;applicationMenuServiceName(),<sp/>QString(</highlight><highlight class="stringliteral">&quot;service.name&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;applicationMenuObjectPath(),<sp/>QString(</highlight><highlight class="stringliteral">&quot;object/path&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(QDBusConnection::sessionBus().unregisterService(</highlight><highlight class="stringliteral">&quot;org.kde.kappmenu&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testSendClientWithTransientToDesktop()</highlight></codeline>
<codeline lineno="828"><highlight class="normal">{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>when<sp/>sending<sp/>a<sp/>window<sp/>to<sp/>a<sp/>desktop<sp/>all<sp/>transients<sp/>are<sp/>also<sp/>send<sp/>to<sp/>that<sp/>desktop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>VirtualDesktopManager<sp/>*vds<sp/>=<sp/>VirtualDesktopManager::self();</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>vds-&gt;<ref refid="class_k_win_1_1_virtual_desktop_manager_1abaf69d1d87ff0b752a15a828b678e867" kindref="member">setCount</ref>(2);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QList&lt;VirtualDesktop<sp/>*&gt;<sp/>desktops<sp/>=<sp/>vds-&gt;<ref refid="class_k_win_1_1_virtual_desktop_manager_1a8dd5e6c6a909a82b8aa32fa6823e9e4f" kindref="member">desktops</ref>();</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface{<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>()};</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let&apos;s<sp/>create<sp/>a<sp/>transient<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>transientSurface{<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>()};</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>transientShellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(transientSurface.get()));</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>transientShellSurface-&gt;set_parent(shellSurface-&gt;object());</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>transient<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(transientSurface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(transient);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;activeWindow(),<sp/>transient);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(transient-&gt;transientFor(),<sp/>window);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;transients().contains(transient));</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initially,<sp/>the<sp/>parent<sp/>and<sp/>the<sp/>transient<sp/>are<sp/>on<sp/>the<sp/>first<sp/>virtual<sp/>desktop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;desktops(),<sp/>QList&lt;VirtualDesktop<sp/>*&gt;{desktops[0]});</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!window-&gt;isOnAllDesktops());</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(transient-&gt;desktops(),<sp/>QList&lt;VirtualDesktop<sp/>*&gt;{desktops[0]});</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!transient-&gt;isOnAllDesktops());</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>send<sp/>the<sp/>transient<sp/>to<sp/>the<sp/>second<sp/>virtual<sp/>desktop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1afbb3df3d37cb7e389ed825975b2dbea6" kindref="member">slotWindowToDesktop</ref>(desktops[1]);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;desktops(),<sp/>QList&lt;VirtualDesktop<sp/>*&gt;{desktops[0]});</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(transient-&gt;desktops(),<sp/>QList&lt;VirtualDesktop<sp/>*&gt;{desktops[1]});</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>activate<sp/>c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1a310f6402f9da20ba7b69c2327680b43e" kindref="member">activateWindow</ref>(window);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;activeWindow(),<sp/>window);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>send<sp/>it<sp/>to<sp/>the<sp/>desktop<sp/>it&apos;s<sp/>already<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;desktops(),<sp/>QList&lt;VirtualDesktop<sp/>*&gt;{desktops[0]});</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(transient-&gt;desktops(),<sp/>QList&lt;VirtualDesktop<sp/>*&gt;{desktops[1]});</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1afbb3df3d37cb7e389ed825975b2dbea6" kindref="member">slotWindowToDesktop</ref>(desktops[0]);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>should<sp/>move<sp/>the<sp/>transient<sp/>back<sp/>to<sp/>the<sp/>desktop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;desktops(),<sp/>QList&lt;VirtualDesktop<sp/>*&gt;{desktops[0]});</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(transient-&gt;desktops(),<sp/>QList&lt;VirtualDesktop<sp/>*&gt;{desktops[0]});</highlight></codeline>
<codeline lineno="876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testMinimizeWindowWithTransients()</highlight></codeline>
<codeline lineno="879"><highlight class="normal">{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>when<sp/>minimizing/unminimizing<sp/>a<sp/>window<sp/>all<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transients<sp/>will<sp/>be<sp/>minimized/unminimized<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>main<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!window-&gt;isMinimized());</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>transient<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>transientSurface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>transientShellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(transientSurface.get()));</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>transientShellSurface-&gt;set_parent(shellSurface-&gt;object());</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>transient<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(transientSurface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(transient);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!transient-&gt;isMinimized());</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(transient-&gt;transientFor(),<sp/>window);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;hasTransient(transient,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>minimize<sp/>the<sp/>main<sp/>window,<sp/>the<sp/>transient<sp/>should<sp/>be<sp/>minimized<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;setMinimized(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isMinimized());</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(transient-&gt;isMinimized());</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unminimize<sp/>the<sp/>main<sp/>window,<sp/>the<sp/>transient<sp/>should<sp/>be<sp/>unminimized<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;setMinimized(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!window-&gt;isMinimized());</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!transient-&gt;isMinimized());</highlight></codeline>
<codeline lineno="909"><highlight class="normal">}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testXdgDecoration_data()</highlight></codeline>
<codeline lineno="912"><highlight class="normal">{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;Test::XdgToplevelDecorationV1::mode&gt;(</highlight><highlight class="stringliteral">&quot;requestedMode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;Test::XdgToplevelDecorationV1::mode&gt;(</highlight><highlight class="stringliteral">&quot;expectedMode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;client<sp/>side<sp/>requested&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>Test::XdgToplevelDecorationV1::mode_client_side<sp/>&lt;&lt;<sp/>Test::XdgToplevelDecorationV1::mode_client_side;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;server<sp/>side<sp/>requested&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>Test::XdgToplevelDecorationV1::mode_server_side<sp/>&lt;&lt;<sp/>Test::XdgToplevelDecorationV1::mode_server_side;</highlight></codeline>
<codeline lineno="918"><highlight class="normal">}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testXdgDecoration()</highlight></codeline>
<codeline lineno="921"><highlight class="normal">{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevelDecorationV1&gt;<sp/>deco(<ref refid="namespace_k_win_1_1_test_1a5b6ba1c532f1dec604fbb3a7bd44ee04" kindref="member">Test::createXdgToplevelDecorationV1</ref>(shellSurface.get()));</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>decorationConfigureRequestedSpy(deco.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_decoration_v1_1a389a2bf556a1e31a46eeca8afb482619" kindref="member">Test::XdgToplevelDecorationV1::configureRequested</ref>);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(Test::XdgToplevelDecorationV1::mode,<sp/>requestedMode);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(Test::XdgToplevelDecorationV1::mode,<sp/>expectedMode);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>request<sp/>a<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>deco-&gt;set_mode(requestedMode);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kwin<sp/>will<sp/>send<sp/>a<sp/>configure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(decorationConfigureRequestedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(decorationConfigureRequestedSpy.last()[0].value&lt;Test::XdgToplevelDecorationV1::mode&gt;(),<sp/>expectedMode);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(decorationConfigureRequestedSpy.count()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last()[0].toInt());</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;isDecorated(),<sp/>expectedMode<sp/>==<sp/>Test::XdgToplevelDecorationV1::mode_server_side);</highlight></codeline>
<codeline lineno="945"><highlight class="normal">}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testXdgNeverCommitted()</highlight></codeline>
<codeline lineno="948"><highlight class="normal">{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>we<sp/>don&apos;t<sp/>crash<sp/>if<sp/>we<sp/>create<sp/>a<sp/>shell<sp/>object<sp/>but<sp/>delete<sp/>the<sp/>XdgShellClient<sp/>before<sp/>committing<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get(),<sp/>Test::CreationSetup::CreateOnly));</highlight></codeline>
<codeline lineno="952"><highlight class="normal">}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testXdgInitialState()</highlight></codeline>
<codeline lineno="955"><highlight class="normal">{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get(),<sp/>Test::CreationSetup::CreateOnly));</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>surfaceConfigureRequestedSpy.wait();</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>toplevelConfigureRequestedSpy.first()[0].value&lt;QSize&gt;();</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(size,<sp/>QSize(0,<sp/>0));<sp/></highlight><highlight class="comment">//<sp/>window<sp/>should<sp/>chose<sp/>it&apos;s<sp/>preferred<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.first()[0].toUInt());</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(200,<sp/>100),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="973"><highlight class="normal">}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testXdgInitiallyMaximised()</highlight></codeline>
<codeline lineno="976"><highlight class="normal">{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get(),<sp/>Test::CreationSetup::CreateOnly));</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_maximized();</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>surfaceConfigureRequestedSpy.wait();</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>toplevelConfigureRequestedSpy.first()[0].value&lt;QSize&gt;();</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="x11keyread_8cpp_1a0db44bec6a2ebf1a0cc819b5c9191cee" kindref="member">state</ref><sp/>=<sp/>toplevelConfigureRequestedSpy.first()[1].value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(size,<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="x11keyread_8cpp_1a0db44bec6a2ebf1a0cc819b5c9191cee" kindref="member">state</ref><sp/>&amp;<sp/>Test::XdgToplevel::State::Maximized);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.first()[0].toUInt());</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>size,<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9abc602b186700b8c6fb525fe2c828e910" kindref="member">MaximizeFull</ref>);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;size(),<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="1000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testXdgInitiallyFullscreen()</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get(),<sp/>Test::CreationSetup::CreateOnly));</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_fullscreen(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>surfaceConfigureRequestedSpy.wait();</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>toplevelConfigureRequestedSpy.first()[0].value&lt;QSize&gt;();</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="x11keyread_8cpp_1a0db44bec6a2ebf1a0cc819b5c9191cee" kindref="member">state</ref><sp/>=<sp/>toplevelConfigureRequestedSpy.first()[1].value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(size,<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="x11keyread_8cpp_1a0db44bec6a2ebf1a0cc819b5c9191cee" kindref="member">state</ref><sp/>&amp;<sp/>Test::XdgToplevel::State::Fullscreen);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.first()[0].toUInt());</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>size,<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;isFullScreen(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;size(),<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="1027"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testXdgInitiallyMinimized()</highlight></codeline>
<codeline lineno="1030"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get(),<sp/>Test::CreationSetup::CreateOnly));</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_minimized();</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>surfaceConfigureRequestedSpy.wait();</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>toplevelConfigureRequestedSpy.first()[0].value&lt;QSize&gt;();</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="x11keyread_8cpp_1a0db44bec6a2ebf1a0cc819b5c9191cee" kindref="member">state</ref><sp/>=<sp/>toplevelConfigureRequestedSpy.first()[1].value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(size,<sp/>QSize(0,<sp/>0));</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="x11keyread_8cpp_1a0db44bec6a2ebf1a0cc819b5c9191cee" kindref="member">state</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.first()[0].toUInt());</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>QEXPECT_FAIL(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Client<sp/>created<sp/>in<sp/>a<sp/>minimised<sp/>state<sp/>is<sp/>not<sp/>exposed<sp/>to<sp/>kwin<sp/>bug<sp/>404838&quot;</highlight><highlight class="normal">,<sp/>Abort);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>size,<sp/>Qt::blue,<sp/>QImage::Format_ARGB32,<sp/>10);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isMinimized());</highlight></codeline>
<codeline lineno="1053"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testXdgWindowGeometryIsntSet()</highlight></codeline>
<codeline lineno="1056"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>the<sp/>effective<sp/>window<sp/>geometry<sp/>corresponds<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bounding<sp/>rectangle<sp/>of<sp/>the<sp/>main<sp/>surface<sp/>and<sp/>its<sp/>sub-surfaces<sp/>if<sp/>no<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>geometry<sp/>is<sp/>set<sp/>by<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(200,<sp/>100),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QPointF<sp/>oldPosition<sp/>=<sp/>window-&gt;pos();</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>frameGeometryChangedSpy(window,<sp/>&amp;Window::frameGeometryChanged);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().topLeft(),<sp/>oldPosition);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(100,<sp/>50));</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().topLeft(),<sp/>oldPosition);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(100,<sp/>50));</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>childSurface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::SubSurface&gt;<sp/>subSurface(<ref refid="namespace_k_win_1_1_test_1ab4faef15d7046070832101a3953fb0f1" kindref="member">Test::createSubSurface</ref>(childSurface.get(),<sp/>surface.get()));</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(subSurface);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurface-&gt;setPosition(QPoint(-20,<sp/>-10));</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(childSurface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().topLeft(),<sp/>oldPosition);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(120,<sp/>60));</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().topLeft(),<sp/>oldPosition<sp/>+<sp/>QPoint(20,<sp/>10));</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(100,<sp/>50));</highlight></codeline>
<codeline lineno="1089"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testXdgWindowGeometryAttachBuffer()</highlight></codeline>
<codeline lineno="1092"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>the<sp/>effective<sp/>window<sp/>geometry<sp/>remains<sp/>the<sp/>same<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>new<sp/>buffer<sp/>is<sp/>attached<sp/>and<sp/>xdg_surface.set_window_geometry<sp/>is<sp/>not<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>again.<sp/>Notice<sp/>that<sp/>the<sp/>window<sp/>geometry<sp/>must<sp/>remain<sp/>the<sp/>same<sp/>even<sp/>if<sp/>the<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>buffer<sp/>is<sp/>smaller.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(200,<sp/>100),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QPointF<sp/>oldPosition<sp/>=<sp/>window-&gt;pos();</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>frameGeometryChangedSpy(window,<sp/>&amp;Window::frameGeometryChanged);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;set_window_geometry(10,<sp/>10,<sp/>180,<sp/>80);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(frameGeometryChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().topLeft(),<sp/>oldPosition);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(180,<sp/>80));</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().topLeft(),<sp/>oldPosition<sp/>-<sp/>QPoint(10,<sp/>10));</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(frameGeometryChangedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().topLeft(),<sp/>oldPosition);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(90,<sp/>40));</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().topLeft(),<sp/>oldPosition<sp/>-<sp/>QPoint(10,<sp/>10));</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(100,<sp/>50));</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;set_window_geometry(0,<sp/>0,<sp/>100,<sp/>50);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(frameGeometryChangedSpy.count(),<sp/>3);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().topLeft(),<sp/>oldPosition);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(100,<sp/>50));</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().topLeft(),<sp/>oldPosition);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(100,<sp/>50));</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface.reset();</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="1136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testXdgWindowGeometryAttachSubSurface()</highlight></codeline>
<codeline lineno="1139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>the<sp/>effective<sp/>window<sp/>geometry<sp/>remains<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>a<sp/>new<sp/>sub-surface<sp/>is<sp/>added<sp/>and<sp/>xdg_surface.set_window_geometry<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>called<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(200,<sp/>100),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QPointF<sp/>oldPosition<sp/>=<sp/>window-&gt;pos();</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>frameGeometryChangedSpy(window,<sp/>&amp;Window::frameGeometryChanged);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;set_window_geometry(10,<sp/>10,<sp/>180,<sp/>80);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().topLeft(),<sp/>oldPosition);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(180,<sp/>80));</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().topLeft(),<sp/>oldPosition<sp/>-<sp/>QPoint(10,<sp/>10));</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>childSurface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::SubSurface&gt;<sp/>subSurface(<ref refid="namespace_k_win_1_1_test_1ab4faef15d7046070832101a3953fb0f1" kindref="member">Test::createSubSurface</ref>(childSurface.get(),<sp/>surface.get()));</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(subSurface);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurface-&gt;setPosition(QPoint(-20,<sp/>-20));</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(childSurface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().topLeft(),<sp/>oldPosition);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(180,<sp/>80));</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().topLeft(),<sp/>oldPosition<sp/>-<sp/>QPoint(10,<sp/>10));</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;set_window_geometry(-15,<sp/>-15,<sp/>50,<sp/>40);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().topLeft(),<sp/>oldPosition);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(50,<sp/>40));</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().topLeft(),<sp/>oldPosition<sp/>-<sp/>QPoint(-15,<sp/>-15));</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testXdgWindowGeometryInteractiveResize()</highlight></codeline>
<codeline lineno="1183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>correct<sp/>window<sp/>geometry<sp/>is<sp/>provided<sp/>along<sp/>each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>configure<sp/>event<sp/>when<sp/>an<sp/>xdg-shell<sp/>is<sp/>being<sp/>interactively<sp/>resized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(200,<sp/>100),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>frameGeometryChangedSpy(window,<sp/>&amp;Window::frameGeometryChanged);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;set_window_geometry(10,<sp/>10,<sp/>180,<sp/>80);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(180,<sp/>80));</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>interactiveMoveResizeStartedSpy(window,<sp/>&amp;Window::interactiveMoveResizeStarted);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>interactiveMoveResizeSteppedSpy(window,<sp/>&amp;Window::interactiveMoveResizeStepped);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>interactiveMoveResizeFinishedSpy(window,<sp/>&amp;Window::interactiveMoveResizeFinished);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>interactively<sp/>resizing<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;moveResizeWindow(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1af2ff89705cde1c8147baa542af320f57" kindref="member">slotWindowResize</ref>();</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;moveResizeWindow(),<sp/>window);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeStartedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/>Test::XdgToplevel::States<sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(states.testFlag(Test::XdgToplevel::State::Resizing));</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Go<sp/>right.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>QPointF<sp/>cursorPos<sp/>=<sp/><ref refid="class_k_win_1_1_cursors_1a5e43427047cf7663b4d9723fac4c1408" kindref="member">KWin::Cursors::self</ref>()-&gt;<ref refid="class_k_win_1_1_cursors_1acf6c2a783e4dec9b50fc15784ce3f167" kindref="member">mouse</ref>()-&gt;<ref refid="class_k_win_1_1_cursor_1a072173549f79b150251d835dc02515ba" kindref="member">pos</ref>();</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;<ref refid="class_window_1a66b7e14f10836111c35be451d81a742e" kindref="member">keyPressEvent</ref>(Qt::Key_Right);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;updateInteractiveMoveResize(<ref refid="class_k_win_1_1_cursors_1a5e43427047cf7663b4d9723fac4c1408" kindref="member">KWin::Cursors::self</ref>()-&gt;mouse()-&gt;pos(),<sp/>Qt::KeyboardModifiers());</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="class_k_win_1_1_cursors_1a5e43427047cf7663b4d9723fac4c1408" kindref="member">KWin::Cursors::self</ref>()-&gt;mouse()-&gt;pos(),<sp/>cursorPos<sp/>+<sp/>QPoint(8,<sp/>0));</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>3);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(states.testFlag(Test::XdgToplevel::State::Resizing));</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).toSize(),<sp/>QSize(188,<sp/>80));</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;set_window_geometry(10,<sp/>10,<sp/>188,<sp/>80);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>QSize(208,<sp/>100),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeSteppedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(208,<sp/>100));</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(188,<sp/>80));</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Go<sp/>down.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>cursorPos<sp/>=<sp/><ref refid="class_k_win_1_1_cursors_1a5e43427047cf7663b4d9723fac4c1408" kindref="member">KWin::Cursors::self</ref>()-&gt;<ref refid="class_k_win_1_1_cursors_1acf6c2a783e4dec9b50fc15784ce3f167" kindref="member">mouse</ref>()-&gt;<ref refid="class_k_win_1_1_cursor_1a072173549f79b150251d835dc02515ba" kindref="member">pos</ref>();</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;<ref refid="class_window_1a66b7e14f10836111c35be451d81a742e" kindref="member">keyPressEvent</ref>(Qt::Key_Down);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;updateInteractiveMoveResize(<ref refid="class_k_win_1_1_cursors_1a5e43427047cf7663b4d9723fac4c1408" kindref="member">KWin::Cursors::self</ref>()-&gt;mouse()-&gt;pos(),<sp/>Qt::KeyboardModifiers());</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="class_k_win_1_1_cursors_1a5e43427047cf7663b4d9723fac4c1408" kindref="member">KWin::Cursors::self</ref>()-&gt;mouse()-&gt;pos(),<sp/>cursorPos<sp/>+<sp/>QPoint(0,<sp/>8));</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>4);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(states.testFlag(Test::XdgToplevel::State::Resizing));</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).toSize(),<sp/>QSize(188,<sp/>88));</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;set_window_geometry(10,<sp/>10,<sp/>188,<sp/>88);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>QSize(208,<sp/>108),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeSteppedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(208,<sp/>108));</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(188,<sp/>88));</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finish<sp/>resizing<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;<ref refid="class_window_1a66b7e14f10836111c35be451d81a742e" kindref="member">keyPressEvent</ref>(Qt::Key_Enter);</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeFinishedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;moveResizeWindow(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>5);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!states.testFlag(Test::XdgToplevel::State::Resizing));</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface.reset();</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="1268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testXdgWindowGeometryFullScreen()</highlight></codeline>
<codeline lineno="1271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>an<sp/>xdg-shell<sp/>receives<sp/>correct<sp/>window<sp/>geometry<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>its<sp/>fullscreen<sp/>state<sp/>gets<sp/>changed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(200,<sp/>100),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>frameGeometryChangedSpy(window,<sp/>&amp;Window::frameGeometryChanged);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;set_window_geometry(10,<sp/>10,<sp/>180,<sp/>80);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(180,<sp/>80));</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1a9995140fe55894b5085c5cfb84243caa" kindref="member">slotWindowFullScreen</ref>();</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).toSize(),<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/>Test::XdgToplevel::States<sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(states.testFlag(Test::XdgToplevel::State::Fullscreen));</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;set_window_geometry(0,<sp/>0,<sp/>1280,<sp/>1024);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>QSize(1280,<sp/>1024),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1a9995140fe55894b5085c5cfb84243caa" kindref="member">slotWindowFullScreen</ref>();</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>3);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).toSize(),<sp/>QSize(180,<sp/>80));</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!states.testFlag(Test::XdgToplevel::State::Fullscreen));</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;set_window_geometry(10,<sp/>10,<sp/>180,<sp/>80);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>QSize(200,<sp/>100),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(180,<sp/>80));</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface.reset();</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="1323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testXdgWindowGeometryMaximize()</highlight></codeline>
<codeline lineno="1326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>an<sp/>xdg-shell<sp/>receives<sp/>correct<sp/>window<sp/>geometry<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>its<sp/>maximized<sp/>state<sp/>gets<sp/>changed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(200,<sp/>100),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>frameGeometryChangedSpy(window,<sp/>&amp;Window::frameGeometryChanged);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;set_window_geometry(10,<sp/>10,<sp/>180,<sp/>80);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(180,<sp/>80));</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1a6275eab1e7d8c5270d6d1d526b6a505c" kindref="member">slotWindowMaximize</ref>();</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).toSize(),<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>Test::XdgToplevel::States<sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(states.testFlag(Test::XdgToplevel::State::Maximized));</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;set_window_geometry(0,<sp/>0,<sp/>1280,<sp/>1024);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>QSize(1280,<sp/>1024),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1a6275eab1e7d8c5270d6d1d526b6a505c" kindref="member">slotWindowMaximize</ref>();</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>3);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).toSize(),<sp/>QSize(180,<sp/>80));</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!states.testFlag(Test::XdgToplevel::State::Maximized));</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;set_window_geometry(10,<sp/>10,<sp/>180,<sp/>80);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>QSize(200,<sp/>100),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(180,<sp/>80));</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface.reset();</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="1378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testPointerInputTransform()</highlight></codeline>
<codeline lineno="1381"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>XdgToplevelWindow<sp/>provides<sp/>correct<sp/>input<sp/>transform<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>input<sp/>transform<sp/>matrix<sp/>is<sp/>used<sp/>by<sp/>seat<sp/>to<sp/>map<sp/>pointer<sp/>events<sp/>from<sp/>the<sp/>global</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>screen<sp/>coordinates<sp/>to<sp/>the<sp/>surface-local<sp/>coordinates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>a<sp/>wl_pointer<sp/>object<sp/>on<sp/>the<sp/>client<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Pointer&gt;<sp/>pointer(<ref refid="namespace_k_win_1_1_test_1a5f6b6eee3f6e90f7c4693e06af67d91d" kindref="member">Test::waylandSeat</ref>()-&gt;createPointer());</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(pointer);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(pointer-&gt;isValid());</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>pointerEnteredSpy(pointer.get(),<sp/>&amp;KWayland::Client::Pointer::entered);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>pointerMotionSpy(pointer.get(),<sp/>&amp;KWayland::Client::Pointer::motion);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>xdg_toplevel<sp/>surface<sp/>and<sp/>wait<sp/>for<sp/>the<sp/>compositor<sp/>to<sp/>catch<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(200,<sp/>100),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enter<sp/>the<sp/>surface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/>quint32<sp/>timestamp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a86e49856d56b03d329f477b0df28cec2" kindref="member">Test::pointerMotion</ref>(window-&gt;pos(),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(pointerEnteredSpy.wait());</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>pointer<sp/>to<sp/>(10,<sp/>5)<sp/>relative<sp/>to<sp/>the<sp/>upper<sp/>left<sp/>frame<sp/>corner,<sp/>which<sp/>is<sp/>located</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>(0,<sp/>0)<sp/>in<sp/>the<sp/>surface-local<sp/>coordinates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a86e49856d56b03d329f477b0df28cec2" kindref="member">Test::pointerMotion</ref>(window-&gt;pos()<sp/>+<sp/>QPointF(10,<sp/>5),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(pointerMotionSpy.wait());</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pointerMotionSpy.last().first().toPointF(),<sp/>QPointF(10,<sp/>5));</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let&apos;s<sp/>pretend<sp/>that<sp/>the<sp/>window<sp/>has<sp/>changed<sp/>the<sp/>extents<sp/>of<sp/>the<sp/>client-side<sp/>drop-shadow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>the<sp/>frame<sp/>geometry<sp/>didn&apos;t<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>bufferGeometryChangedSpy(window,<sp/>&amp;Window::bufferGeometryChanged);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>frameGeometryChangedSpy(window,<sp/>&amp;Window::frameGeometryChanged);</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;set_window_geometry(10,<sp/>20,<sp/>200,<sp/>100);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>QSize(220,<sp/>140),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(bufferGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(frameGeometryChangedSpy.count(),<sp/>0);</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry().size(),<sp/>QSize(200,<sp/>100));</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;bufferGeometry().size(),<sp/>QSize(220,<sp/>140));</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>pointer<sp/>to<sp/>(20,<sp/>50)<sp/>relative<sp/>to<sp/>the<sp/>upper<sp/>left<sp/>frame<sp/>corner,<sp/>which<sp/>is<sp/>located</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>(10,<sp/>20)<sp/>in<sp/>the<sp/>surface-local<sp/>coordinates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a86e49856d56b03d329f477b0df28cec2" kindref="member">Test::pointerMotion</ref>(window-&gt;pos()<sp/>+<sp/>QPointF(20,<sp/>50),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(pointerMotionSpy.wait());</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(pointerMotionSpy.last().first().toPointF(),<sp/>QPointF(10,<sp/>20)<sp/>+<sp/>QPointF(20,<sp/>50));</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>the<sp/>xdg-toplevel<sp/>surface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface.reset();</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="1433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testReentrantSetFrameGeometry()</highlight></codeline>
<codeline lineno="1436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>calling<sp/>moveResize()<sp/>from<sp/>a<sp/>slot<sp/>connected<sp/>directly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>frameGeometryChanged()<sp/>signal<sp/>won&apos;t<sp/>cause<sp/>an<sp/>infinite<sp/>recursion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>xdg-toplevel<sp/>surface<sp/>and<sp/>wait<sp/>for<sp/>the<sp/>compositor<sp/>to<sp/>catch<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(200,<sp/>100),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;pos(),<sp/>QPoint(0,<sp/>0));</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let&apos;s<sp/>pretend<sp/>that<sp/>there<sp/>is<sp/>a<sp/>script<sp/>that<sp/>really<sp/>wants<sp/>the<sp/>window<sp/>to<sp/>be<sp/>at<sp/>(100,<sp/>100).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(window,<sp/>&amp;Window::frameGeometryChanged,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>[window]()<sp/>{</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window-&gt;moveResize(QRectF(QPointF(100,<sp/>100),<sp/>window-&gt;size()));</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Trigger<sp/>the<sp/>lambda<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;move(QPoint(40,<sp/>50));</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Eventually,<sp/>the<sp/>window<sp/>will<sp/>end<sp/>up<sp/>at<sp/>(100,<sp/>100).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;pos(),<sp/>QPoint(100,<sp/>100));</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>the<sp/>xdg-toplevel<sp/>surface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface.reset();</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="1461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testDoubleMaximize()</highlight></codeline>
<codeline lineno="1464"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>the<sp/>case<sp/>where<sp/>a<sp/>window<sp/>issues<sp/>two<sp/>set_maximized()<sp/>requests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>separated<sp/>by<sp/>the<sp/>initial<sp/>commit<sp/>is<sp/>handled<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>test<sp/>surface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_maximized();</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>compositor<sp/>to<sp/>respond<sp/>with<sp/>a<sp/>configure<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>QSize<sp/>size<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(0).toSize();</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(size,<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/>Test::XdgToplevel::States<sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(states.testFlag(Test::XdgToplevel::State::Maximized));</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>another<sp/>set_maximized()<sp/>request,<sp/>but<sp/>do<sp/>not<sp/>attach<sp/>any<sp/>buffer<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_maximized();</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>compositor<sp/>must<sp/>respond<sp/>with<sp/>another<sp/>configure<sp/>event<sp/>even<sp/>if<sp/>the<sp/>state<sp/>hasn&apos;t<sp/>changed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(0).toSize();</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(size,<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(states.testFlag(Test::XdgToplevel::State::Maximized));</highlight></codeline>
<codeline lineno="1496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testDoubleFullscreenSeparatedByCommit()</highlight></codeline>
<codeline lineno="1499"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>applications<sp/>do<sp/>weird<sp/>things<sp/>at<sp/>startup<sp/>and<sp/>this<sp/>is<sp/>one<sp/>of<sp/>them.<sp/>This<sp/>test<sp/>verifies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>the<sp/>window<sp/>will<sp/>have<sp/>good<sp/>frame<sp/>geometry<sp/>if<sp/>the<sp/>window<sp/>has<sp/>issued<sp/>several</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>xdg_toplevel.set_fullscreen<sp/>requests<sp/>and<sp/>they<sp/>are<sp/>separated<sp/>by<sp/>a<sp/>surface<sp/>commit<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>attached<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tell<sp/>the<sp/>compositor<sp/>that<sp/>we<sp/>want<sp/>the<sp/>window<sp/>to<sp/>be<sp/>shown<sp/>in<sp/>fullscreen<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_fullscreen(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;()<sp/>&amp;<sp/>Test::XdgToplevel::State::Fullscreen);</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ask<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_fullscreen(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;()<sp/>&amp;<sp/>Test::XdgToplevel::State::Fullscreen);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(1280,<sp/>1024),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isFullScreen());</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>QRect(0,<sp/>0,<sp/>1280,<sp/>1024));</highlight></codeline>
<codeline lineno="1529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testMaximizeHorizontal()</highlight></codeline>
<codeline lineno="1532"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>test<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get(),<sp/>Test::CreationSetup::CreateOnly));</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>initial<sp/>configure<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/>Test::XdgToplevel::States<sp/>states;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).toSize(),<sp/>QSize(0,<sp/>0));</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!states.testFlag(Test::XdgToplevel::State::Activated));</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!states.testFlag(Test::XdgToplevel::State::Maximized));</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(800,<sp/>600),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isMaximizable());</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/>MaximizeMode::MaximizeRestore);</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/>MaximizeMode::MaximizeRestore);</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;size(),<sp/>QSize(800,<sp/>600));</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>should<sp/>receive<sp/>a<sp/>configure<sp/>event<sp/>when<sp/>the<sp/>window<sp/>becomes<sp/>active.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(states.testFlag(Test::XdgToplevel::State::Activated));</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!states.testFlag(Test::XdgToplevel::State::Maximized));</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximize<sp/>the<sp/>test<sp/>window<sp/>in<sp/>horizontal<sp/>direction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1ac80d2da241bb5d8e0802f3f5885f3ee5" kindref="member">slotWindowMaximizeHorizontal</ref>();</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9aac06708e540fd3823add3d1fc048876d" kindref="member">MaximizeHorizontal</ref>);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>3);</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).toSize(),<sp/>QSize(1280,<sp/>600));</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!states.testFlag(Test::XdgToplevel::State::Maximized));</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>contents<sp/>of<sp/>the<sp/>maximized<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>frameGeometryChangedSpy(window,<sp/>&amp;Window::frameGeometryChanged);</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>QSize(1280,<sp/>600),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;size(),<sp/>QSize(1280,<sp/>600));</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9aac06708e540fd3823add3d1fc048876d" kindref="member">MaximizeHorizontal</ref>);</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9aac06708e540fd3823add3d1fc048876d" kindref="member">MaximizeHorizontal</ref>);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1ac80d2da241bb5d8e0802f3f5885f3ee5" kindref="member">slotWindowMaximizeHorizontal</ref>();</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9aac06708e540fd3823add3d1fc048876d" kindref="member">MaximizeHorizontal</ref>);</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>4);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).toSize(),<sp/>QSize(800,<sp/>600));</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!states.testFlag(Test::XdgToplevel::State::Maximized));</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>contents<sp/>of<sp/>the<sp/>restored<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>QSize(800,<sp/>600),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;size(),<sp/>QSize(800,<sp/>600));</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface.reset();</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>surface.reset();</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="1608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testMaximizeVertical()</highlight></codeline>
<codeline lineno="1611"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>test<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get(),<sp/>Test::CreationSetup::CreateOnly));</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>initial<sp/>configure<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/>Test::XdgToplevel::States<sp/>states;</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).toSize(),<sp/>QSize(0,<sp/>0));</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!states.testFlag(Test::XdgToplevel::State::Activated));</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!states.testFlag(Test::XdgToplevel::State::Maximized));</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(800,<sp/>600),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isMaximizable());</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/>MaximizeMode::MaximizeRestore);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/>MaximizeMode::MaximizeRestore);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;size(),<sp/>QSize(800,<sp/>600));</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>should<sp/>receive<sp/>a<sp/>configure<sp/>event<sp/>when<sp/>the<sp/>window<sp/>becomes<sp/>active.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(states.testFlag(Test::XdgToplevel::State::Activated));</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!states.testFlag(Test::XdgToplevel::State::Maximized));</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximize<sp/>the<sp/>test<sp/>window<sp/>in<sp/>vertical<sp/>direction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1a534516cead522fa6237ced7ef5e9c8f1" kindref="member">slotWindowMaximizeVertical</ref>();</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a21499d1263beb477425205b49fca8ef1" kindref="member">MaximizeVertical</ref>);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>3);</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).toSize(),<sp/>QSize(800,<sp/>1024));</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!states.testFlag(Test::XdgToplevel::State::Maximized));</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>contents<sp/>of<sp/>the<sp/>maximized<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>frameGeometryChangedSpy(window,<sp/>&amp;Window::frameGeometryChanged);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>QSize(800,<sp/>1024),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;size(),<sp/>QSize(800,<sp/>1024));</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a21499d1263beb477425205b49fca8ef1" kindref="member">MaximizeVertical</ref>);</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a21499d1263beb477425205b49fca8ef1" kindref="member">MaximizeVertical</ref>);</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1a534516cead522fa6237ced7ef5e9c8f1" kindref="member">slotWindowMaximizeVertical</ref>();</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a21499d1263beb477425205b49fca8ef1" kindref="member">MaximizeVertical</ref>);</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>4);</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).toSize(),<sp/>QSize(800,<sp/>600));</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!states.testFlag(Test::XdgToplevel::State::Maximized));</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>contents<sp/>of<sp/>the<sp/>restored<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>QSize(800,<sp/>600),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;size(),<sp/>QSize(800,<sp/>600));</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface.reset();</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/>surface.reset();</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="1687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testMaximizeFull()</highlight></codeline>
<codeline lineno="1690"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>test<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get(),<sp/>Test::CreationSetup::CreateOnly));</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>initial<sp/>configure<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>Test::XdgToplevel::States<sp/>states;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).toSize(),<sp/>QSize(0,<sp/>0));</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!states.testFlag(Test::XdgToplevel::State::Activated));</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!states.testFlag(Test::XdgToplevel::State::Maximized));</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(800,<sp/>600),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isActive());</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window-&gt;isMaximizable());</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/>MaximizeMode::MaximizeRestore);</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/>MaximizeMode::MaximizeRestore);</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;size(),<sp/>QSize(800,<sp/>600));</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>should<sp/>receive<sp/>a<sp/>configure<sp/>event<sp/>when<sp/>the<sp/>window<sp/>becomes<sp/>active.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(states.testFlag(Test::XdgToplevel::State::Activated));</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!states.testFlag(Test::XdgToplevel::State::Maximized));</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximize<sp/>the<sp/>test<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1a6275eab1e7d8c5270d6d1d526b6a505c" kindref="member">slotWindowMaximize</ref>();</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9abc602b186700b8c6fb525fe2c828e910" kindref="member">MaximizeFull</ref>);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>3);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).toSize(),<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(states.testFlag(Test::XdgToplevel::State::Maximized));</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>contents<sp/>of<sp/>the<sp/>maximized<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>frameGeometryChangedSpy(window,<sp/>&amp;Window::frameGeometryChanged);</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>QSize(1280,<sp/>1024),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;size(),<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9abc602b186700b8c6fb525fe2c828e910" kindref="member">MaximizeFull</ref>);</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9abc602b186700b8c6fb525fe2c828e910" kindref="member">MaximizeFull</ref>);</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1a6275eab1e7d8c5270d6d1d526b6a505c" kindref="member">slotWindowMaximize</ref>();</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9abc602b186700b8c6fb525fe2c828e910" kindref="member">MaximizeFull</ref>);</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(surfaceConfigureRequestedSpy.count(),<sp/>4);</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).toSize(),<sp/>QSize(800,<sp/>600));</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/>states<sp/>=<sp/>toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;();</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!states.testFlag(Test::XdgToplevel::State::Maximized));</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>contents<sp/>of<sp/>the<sp/>restored<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>QSize(800,<sp/>600),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;size(),<sp/>QSize(800,<sp/>600));</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface.reset();</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/>surface.reset();</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1aea84309ec3fa292db3aba909e9b0b406" kindref="member">Test::waitForWindowClosed</ref>(window));</highlight></codeline>
<codeline lineno="1766"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testSendMaximizedWindowToAnotherOutput()</highlight></codeline>
<codeline lineno="1769"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>the<sp/>maximized<sp/>window<sp/>will<sp/>have<sp/>correct<sp/>geometry<sp/>restore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>it&apos;s<sp/>sent<sp/>to<sp/>another<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outputs<sp/>=<sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1aaee7f44422f40ea8256b2f54e83a2b37" kindref="member">outputs</ref>();</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(window);</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>compositor<sp/>to<sp/>send<sp/>a<sp/>configure<sp/>event<sp/>with<sp/>the<sp/>activated<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>window<sp/>to<sp/>the<sp/>left<sp/>monitor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;move(QPointF(10,<sp/>20));</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>QRectF(10,<sp/>20,<sp/>100,<sp/>50));</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;output(),<sp/>outputs[0]);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>the<sp/>window<sp/>maximized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>frameGeometryChangedSpy(window,<sp/>&amp;Window::frameGeometryChanged);</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_maximized();</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9abc602b186700b8c6fb525fe2c828e910" kindref="member">MaximizeFull</ref>);</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>QRectF(0,<sp/>0,<sp/>1280,<sp/>1024));</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;geometryRestore(),<sp/>QRectF(10,<sp/>20,<sp/>100,<sp/>50));</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;output(),<sp/>outputs[0]);</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>the<sp/>window<sp/>to<sp/>another<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;sendToOutput(outputs[1]);</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9abc602b186700b8c6fb525fe2c828e910" kindref="member">MaximizeFull</ref>);</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>QRectF(1280,<sp/>0,<sp/>1280,<sp/>1024));</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;geometryRestore(),<sp/>QRectF(1280<sp/>+<sp/>10,<sp/>20,<sp/>100,<sp/>50));</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;output(),<sp/>outputs[1]);</highlight></codeline>
<codeline lineno="1809"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testInteractiveMoveUnmaximizeFull()</highlight></codeline>
<codeline lineno="1812"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>a<sp/>maximized<sp/>xdg-toplevel<sp/>is<sp/>going<sp/>to<sp/>be<sp/>properly<sp/>unmaximized<sp/>when<sp/>it&apos;s<sp/>dragged.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>compositor<sp/>to<sp/>send<sp/>a<sp/>configure<sp/>event<sp/>with<sp/>the<sp/>activated<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>the<sp/>window<sp/>maximized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>originalGeometry<sp/>=<sp/>window-&gt;frameGeometry();</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>frameGeometryChangedSpy(window,<sp/>&amp;Window::frameGeometryChanged);</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;maximize(<ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9abc602b186700b8c6fb525fe2c828e910" kindref="member">MaximizeFull</ref>);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9abc602b186700b8c6fb525fe2c828e910" kindref="member">MaximizeFull</ref>);</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9abc602b186700b8c6fb525fe2c828e910" kindref="member">MaximizeFull</ref>);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>interactive<sp/>move.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>interactiveMoveResizeStartedSpy(window,<sp/>&amp;Window::interactiveMoveResizeStarted);</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>interactiveMoveResizeSteppedSpy(window,<sp/>&amp;Window::interactiveMoveResizeStepped);</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>interactiveMoveResizeFinishedSpy(window,<sp/>&amp;Window::interactiveMoveResizeFinished);</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>qreal<sp/>xOffset<sp/>=<sp/>0.25;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>qreal<sp/>yOffset<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/>quint32<sp/>timestamp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a86e49856d56b03d329f477b0df28cec2" kindref="member">Test::pointerMotion</ref>(QPointF(window-&gt;x()<sp/>+<sp/>window-&gt;width()<sp/>*<sp/>xOffset,<sp/>window-&gt;y()<sp/>+<sp/>window-&gt;height()<sp/>*<sp/>yOffset),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;performMousePressCommand(<ref refid="class_k_win_1_1_options_1a3ea5092c5fafec92b108838f1cecedcdac769cf145bf19177c3818dab014f19bc" kindref="member">Options::MouseMove</ref>,<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>()-&gt;pointer()-&gt;pos());</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeStartedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9abc602b186700b8c6fb525fe2c828e910" kindref="member">MaximizeFull</ref>);</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9abc602b186700b8c6fb525fe2c828e910" kindref="member">MaximizeFull</ref>);</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>window<sp/>to<sp/>unmaximize<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>maximizedGeometry<sp/>=<sp/>window-&gt;frameGeometry();</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1aa213f799df23188372b414aceb5bc16c" kindref="member">Test::pointerMotionRelative</ref>(QPointF(0,<sp/>100),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeSteppedSpy.count(),<sp/>0);</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9abc602b186700b8c6fb525fe2c828e910" kindref="member">MaximizeFull</ref>);</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>maximizedGeometry);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>window<sp/>a<sp/>tiny<sp/>bit<sp/>more.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1aa213f799df23188372b414aceb5bc16c" kindref="member">Test::pointerMotionRelative</ref>(QPointF(0,<sp/>10),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeSteppedSpy.count(),<sp/>0);</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9abc602b186700b8c6fb525fe2c828e910" kindref="member">MaximizeFull</ref>);</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>maximizedGeometry);</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Render<sp/>the<sp/>window<sp/>at<sp/>the<sp/>new<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>QRectF(<ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>()-&gt;pointer()-&gt;pos()<sp/>-<sp/>QPointF(originalGeometry.width()<sp/>*<sp/>xOffset,<sp/>originalGeometry.height()<sp/>*<sp/>yOffset),<sp/>originalGeometry.size()));</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>window<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>normalGeometry<sp/>=<sp/>window-&gt;frameGeometry();</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1aa213f799df23188372b414aceb5bc16c" kindref="member">Test::pointerMotionRelative</ref>(QPointF(0,<sp/>10),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeSteppedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>normalGeometry.translated(0,<sp/>10));</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finish<sp/>interactive<sp/>move.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;<ref refid="class_window_1a66b7e14f10836111c35be451d81a742e" kindref="member">keyPressEvent</ref>(Qt::Key_Enter);</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeFinishedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="1884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testInteractiveMoveUnmaximizeInitiallyFull()</highlight></codeline>
<codeline lineno="1887"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>an<sp/>initially<sp/>maximized<sp/>xdg-toplevel<sp/>will<sp/>be<sp/>properly<sp/>unmaximized<sp/>when<sp/>it&apos;s<sp/>dragged.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get(),<sp/>[](Test::XdgToplevel<sp/>*toplevel)<sp/>{</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toplevel-&gt;set_maximized();</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>compositor<sp/>to<sp/>send<sp/>a<sp/>configure<sp/>event<sp/>with<sp/>the<sp/>activated<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>interactive<sp/>move.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>interactiveMoveResizeStartedSpy(window,<sp/>&amp;Window::interactiveMoveResizeStarted);</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>interactiveMoveResizeSteppedSpy(window,<sp/>&amp;Window::interactiveMoveResizeStepped);</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>interactiveMoveResizeFinishedSpy(window,<sp/>&amp;Window::interactiveMoveResizeFinished);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>qreal<sp/>xOffset<sp/>=<sp/>0.25;</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>qreal<sp/>yOffset<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/>quint32<sp/>timestamp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a86e49856d56b03d329f477b0df28cec2" kindref="member">Test::pointerMotion</ref>(QPointF(window-&gt;x()<sp/>+<sp/>window-&gt;width()<sp/>*<sp/>xOffset,<sp/>window-&gt;y()<sp/>+<sp/>window-&gt;height()<sp/>*<sp/>yOffset),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;performMousePressCommand(<ref refid="class_k_win_1_1_options_1a3ea5092c5fafec92b108838f1cecedcdac769cf145bf19177c3818dab014f19bc" kindref="member">Options::MouseMove</ref>,<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>()-&gt;pointer()-&gt;pos());</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeStartedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9abc602b186700b8c6fb525fe2c828e910" kindref="member">MaximizeFull</ref>);</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9abc602b186700b8c6fb525fe2c828e910" kindref="member">MaximizeFull</ref>);</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>window<sp/>to<sp/>unmaximize<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>maximizedGeometry<sp/>=<sp/>window-&gt;frameGeometry();</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1aa213f799df23188372b414aceb5bc16c" kindref="member">Test::pointerMotionRelative</ref>(QPointF(0,<sp/>100),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeSteppedSpy.count(),<sp/>0);</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9abc602b186700b8c6fb525fe2c828e910" kindref="member">MaximizeFull</ref>);</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>maximizedGeometry);</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>window<sp/>a<sp/>tiny<sp/>bit<sp/>more.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1aa213f799df23188372b414aceb5bc16c" kindref="member">Test::pointerMotionRelative</ref>(QPointF(0,<sp/>10),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeSteppedSpy.count(),<sp/>0);</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9abc602b186700b8c6fb525fe2c828e910" kindref="member">MaximizeFull</ref>);</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>maximizedGeometry);</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Render<sp/>the<sp/>window<sp/>at<sp/>the<sp/>new<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QSize<sp/>restoredSize(100,<sp/>50);</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>frameGeometryChangedSpy(window,<sp/>&amp;Window::frameGeometryChanged);</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>QSize(0,<sp/>0));</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>restoredSize,<sp/>Qt::red);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>QRectF(<ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>()-&gt;pointer()-&gt;pos()<sp/>-<sp/>QPointF(restoredSize.width()<sp/>*<sp/>xOffset,<sp/>restoredSize.height()<sp/>*<sp/>yOffset),<sp/>restoredSize));</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>window<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>normalGeometry<sp/>=<sp/>window-&gt;frameGeometry();</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1aa213f799df23188372b414aceb5bc16c" kindref="member">Test::pointerMotionRelative</ref>(QPointF(0,<sp/>10),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeSteppedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>normalGeometry.translated(0,<sp/>10));</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"></highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finish<sp/>interactive<sp/>move.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;<ref refid="class_window_1a66b7e14f10836111c35be451d81a742e" kindref="member">keyPressEvent</ref>(Qt::Key_Enter);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeFinishedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="1953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testInteractiveMoveUnmaximizeHorizontal()</highlight></codeline>
<codeline lineno="1956"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>a<sp/>maximized<sp/>horizontally<sp/>xdg-toplevel<sp/>is<sp/>going<sp/>to<sp/>be<sp/>properly<sp/>unmaximized<sp/>when<sp/>it&apos;s<sp/>dragged<sp/>horizontally.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>compositor<sp/>to<sp/>send<sp/>a<sp/>configure<sp/>event<sp/>with<sp/>the<sp/>activated<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>the<sp/>window<sp/>maximized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>originalGeometry<sp/>=<sp/>window-&gt;frameGeometry();</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>frameGeometryChangedSpy(window,<sp/>&amp;Window::frameGeometryChanged);</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;maximize(<ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9aac06708e540fd3823add3d1fc048876d" kindref="member">MaximizeHorizontal</ref>);</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9aac06708e540fd3823add3d1fc048876d" kindref="member">MaximizeHorizontal</ref>);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9aac06708e540fd3823add3d1fc048876d" kindref="member">MaximizeHorizontal</ref>);</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>interactive<sp/>move.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>interactiveMoveResizeStartedSpy(window,<sp/>&amp;Window::interactiveMoveResizeStarted);</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>interactiveMoveResizeSteppedSpy(window,<sp/>&amp;Window::interactiveMoveResizeStepped);</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>interactiveMoveResizeFinishedSpy(window,<sp/>&amp;Window::interactiveMoveResizeFinished);</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>qreal<sp/>xOffset<sp/>=<sp/>0.25;</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>qreal<sp/>yOffset<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/>quint32<sp/>timestamp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a86e49856d56b03d329f477b0df28cec2" kindref="member">Test::pointerMotion</ref>(QPointF(window-&gt;x()<sp/>+<sp/>window-&gt;width()<sp/>*<sp/>xOffset,<sp/>window-&gt;y()<sp/>+<sp/>window-&gt;height()<sp/>*<sp/>yOffset),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;performMousePressCommand(<ref refid="class_k_win_1_1_options_1a3ea5092c5fafec92b108838f1cecedcdac769cf145bf19177c3818dab014f19bc" kindref="member">Options::MouseMove</ref>,<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>()-&gt;pointer()-&gt;pos());</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeStartedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9aac06708e540fd3823add3d1fc048876d" kindref="member">MaximizeHorizontal</ref>);</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9aac06708e540fd3823add3d1fc048876d" kindref="member">MaximizeHorizontal</ref>);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>window<sp/>vertically,<sp/>it&apos;s<sp/>not<sp/>going<sp/>to<sp/>be<sp/>unmaximized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>maximizedGeometry<sp/>=<sp/>window-&gt;frameGeometry();</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1aa213f799df23188372b414aceb5bc16c" kindref="member">Test::pointerMotionRelative</ref>(QPointF(0,<sp/>100),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeSteppedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9aac06708e540fd3823add3d1fc048876d" kindref="member">MaximizeHorizontal</ref>);</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9aac06708e540fd3823add3d1fc048876d" kindref="member">MaximizeHorizontal</ref>);</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>maximizedGeometry.translated(0,<sp/>100));</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>window<sp/>horizontally.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1aa213f799df23188372b414aceb5bc16c" kindref="member">Test::pointerMotionRelative</ref>(QPointF(100,<sp/>0),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeSteppedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9aac06708e540fd3823add3d1fc048876d" kindref="member">MaximizeHorizontal</ref>);</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>maximizedGeometry.translated(0,<sp/>100));</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>window<sp/>to<sp/>the<sp/>right<sp/>a<sp/>bit<sp/>more.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1aa213f799df23188372b414aceb5bc16c" kindref="member">Test::pointerMotionRelative</ref>(QPointF(10,<sp/>0),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeSteppedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9aac06708e540fd3823add3d1fc048876d" kindref="member">MaximizeHorizontal</ref>);</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>maximizedGeometry.translated(0,<sp/>100));</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Render<sp/>the<sp/>window<sp/>at<sp/>the<sp/>new<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>QRectF(<ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>()-&gt;pointer()-&gt;pos()<sp/>-<sp/>QPointF(originalGeometry.width()<sp/>*<sp/>xOffset,<sp/>originalGeometry.height()<sp/>*<sp/>yOffset),<sp/>originalGeometry.size()));</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>window<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>normalGeometry<sp/>=<sp/>window-&gt;frameGeometry();</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1aa213f799df23188372b414aceb5bc16c" kindref="member">Test::pointerMotionRelative</ref>(QPointF(10,<sp/>0),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeSteppedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>normalGeometry.translated(10,<sp/>0));</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finish<sp/>interactive<sp/>move.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;<ref refid="class_window_1a66b7e14f10836111c35be451d81a742e" kindref="member">keyPressEvent</ref>(Qt::Key_Enter);</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeFinishedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="2035"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testInteractiveMoveUnmaximizeVertical()</highlight></codeline>
<codeline lineno="2038"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>a<sp/>maximized<sp/>vertically<sp/>xdg-toplevel<sp/>is<sp/>going<sp/>to<sp/>be<sp/>properly<sp/>unmaximized<sp/>when<sp/>it&apos;s<sp/>dragged<sp/>vertically.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get()));</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(100,<sp/>50),<sp/>Qt::blue);</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>compositor<sp/>to<sp/>send<sp/>a<sp/>configure<sp/>event<sp/>with<sp/>the<sp/>activated<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>the<sp/>window<sp/>maximized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>originalGeometry<sp/>=<sp/>window-&gt;frameGeometry();</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>frameGeometryChangedSpy(window,<sp/>&amp;Window::frameGeometryChanged);</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;maximize(<ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a21499d1263beb477425205b49fca8ef1" kindref="member">MaximizeVertical</ref>);</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a21499d1263beb477425205b49fca8ef1" kindref="member">MaximizeVertical</ref>);</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a21499d1263beb477425205b49fca8ef1" kindref="member">MaximizeVertical</ref>);</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>interactive<sp/>move.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>interactiveMoveResizeStartedSpy(window,<sp/>&amp;Window::interactiveMoveResizeStarted);</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>interactiveMoveResizeSteppedSpy(window,<sp/>&amp;Window::interactiveMoveResizeStepped);</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>interactiveMoveResizeFinishedSpy(window,<sp/>&amp;Window::interactiveMoveResizeFinished);</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>qreal<sp/>xOffset<sp/>=<sp/>0.25;</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>qreal<sp/>yOffset<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/>quint32<sp/>timestamp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a86e49856d56b03d329f477b0df28cec2" kindref="member">Test::pointerMotion</ref>(QPointF(window-&gt;x()<sp/>+<sp/>window-&gt;width()<sp/>*<sp/>xOffset,<sp/>window-&gt;y()<sp/>+<sp/>window-&gt;height()<sp/>*<sp/>yOffset),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;performMousePressCommand(<ref refid="class_k_win_1_1_options_1a3ea5092c5fafec92b108838f1cecedcdac769cf145bf19177c3818dab014f19bc" kindref="member">Options::MouseMove</ref>,<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>()-&gt;pointer()-&gt;pos());</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeStartedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a21499d1263beb477425205b49fca8ef1" kindref="member">MaximizeVertical</ref>);</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a21499d1263beb477425205b49fca8ef1" kindref="member">MaximizeVertical</ref>);</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>window<sp/>to<sp/>the<sp/>right,<sp/>it&apos;s<sp/>not<sp/>going<sp/>to<sp/>be<sp/>unmaximized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>maximizedGeometry<sp/>=<sp/>window-&gt;frameGeometry();</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1aa213f799df23188372b414aceb5bc16c" kindref="member">Test::pointerMotionRelative</ref>(QPointF(100,<sp/>0),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeSteppedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a21499d1263beb477425205b49fca8ef1" kindref="member">MaximizeVertical</ref>);</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a21499d1263beb477425205b49fca8ef1" kindref="member">MaximizeVertical</ref>);</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>maximizedGeometry.translated(100,<sp/>0));</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>window<sp/>vertically.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1aa213f799df23188372b414aceb5bc16c" kindref="member">Test::pointerMotionRelative</ref>(QPointF(0,<sp/>100),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeSteppedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a21499d1263beb477425205b49fca8ef1" kindref="member">MaximizeVertical</ref>);</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>maximizedGeometry.translated(100,<sp/>0));</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>window<sp/>down<sp/>a<sp/>bit<sp/>more.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1aa213f799df23188372b414aceb5bc16c" kindref="member">Test::pointerMotionRelative</ref>(QPointF(0,<sp/>10),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeSteppedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a21499d1263beb477425205b49fca8ef1" kindref="member">MaximizeVertical</ref>);</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>maximizedGeometry.translated(100,<sp/>0));</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Render<sp/>the<sp/>window<sp/>at<sp/>the<sp/>new<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;xdgSurface()-&gt;ack_configure(surfaceConfigureRequestedSpy.last().at(0).value&lt;quint32&gt;());</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1a52f3d8ae9752639a4364bf8fd8d5b8e6" kindref="member">Test::render</ref>(surface.get(),<sp/>toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>Qt::red);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(frameGeometryChangedSpy.wait());</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>QRectF(<ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref>()-&gt;pointer()-&gt;pos()<sp/>-<sp/>QPointF(originalGeometry.width()<sp/>*<sp/>xOffset,<sp/>originalGeometry.height()<sp/>*<sp/>yOffset),<sp/>originalGeometry.size()));</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"></highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>window<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>normalGeometry<sp/>=<sp/>window-&gt;frameGeometry();</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1aa213f799df23188372b414aceb5bc16c" kindref="member">Test::pointerMotionRelative</ref>(QPointF(0,<sp/>10),<sp/>timestamp++);</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeSteppedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;requestedMaximizeMode(),<sp/><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" kindref="member">MaximizeRestore</ref>);</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;frameGeometry(),<sp/>normalGeometry.translated(0,<sp/>10));</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finish<sp/>interactive<sp/>move.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;<ref refid="class_window_1a66b7e14f10836111c35be451d81a742e" kindref="member">keyPressEvent</ref>(Qt::Key_Enter);</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(interactiveMoveResizeFinishedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="2117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testMaximizeAndChangeDecorationModeAfterInitialCommit()</highlight></codeline>
<codeline lineno="2120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ideally,<sp/>the<sp/>app<sp/>would<sp/>initialize<sp/>the<sp/>xdg-toplevel<sp/>surface<sp/>before<sp/>the<sp/>initial<sp/>commit,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>many<sp/>don&apos;t<sp/>do<sp/>it.<sp/>They<sp/>initialize<sp/>the<sp/>surface<sp/>after<sp/>the<sp/>first<sp/>commit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>the<sp/>window<sp/>will<sp/>receive<sp/>a<sp/>configure<sp/>event<sp/>with<sp/>correct<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>an<sp/>xdg-toplevel<sp/>surface<sp/>is<sp/>set<sp/>maximized<sp/>and<sp/>decoration<sp/>mode<sp/>changes<sp/>after<sp/>initial<sp/>commit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get(),<sp/>Test::CreationSetup::CreateOnly));</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevelDecorationV1&gt;<sp/>decoration(<ref refid="namespace_k_win_1_1_test_1a5b6ba1c532f1dec604fbb3a7bd44ee04" kindref="member">Test::createXdgToplevelDecorationV1</ref>(shellSurface.get()));</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Commit<sp/>the<sp/>initial<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>QSize(0,<sp/>0));</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"></highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Request<sp/>maximized<sp/>mode<sp/>and<sp/>set<sp/>decoration<sp/>mode,<sp/>i.e.<sp/>perform<sp/>late<sp/>initialization.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_maximized();</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/>decoration-&gt;set_mode(Test::XdgToplevelDecorationV1::mode_client_side);</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>compositor<sp/>will<sp/>respond<sp/>with<sp/>a<sp/>new<sp/>configure<sp/>event,<sp/>which<sp/>should<sp/>contain<sp/>maximized<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;(),<sp/>Test::XdgToplevel::State::Maximized);</highlight></codeline>
<codeline lineno="2145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testFullScreenAndChangeDecorationModeAfterInitialCommit()</highlight></codeline>
<codeline lineno="2148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ideally,<sp/>the<sp/>app<sp/>would<sp/>initialize<sp/>the<sp/>xdg-toplevel<sp/>surface<sp/>before<sp/>the<sp/>initial<sp/>commit,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>many<sp/>don&apos;t<sp/>do<sp/>it.<sp/>They<sp/>initialize<sp/>the<sp/>surface<sp/>after<sp/>the<sp/>first<sp/>commit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>the<sp/>window<sp/>will<sp/>receive<sp/>a<sp/>configure<sp/>event<sp/>with<sp/>correct<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>an<sp/>xdg-toplevel<sp/>surface<sp/>is<sp/>set<sp/>fullscreen<sp/>and<sp/>decoration<sp/>mode<sp/>changes<sp/>after<sp/>initial<sp/>commit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get(),<sp/>Test::CreationSetup::CreateOnly));</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevelDecorationV1&gt;<sp/>decoration(<ref refid="namespace_k_win_1_1_test_1a5b6ba1c532f1dec604fbb3a7bd44ee04" kindref="member">Test::createXdgToplevelDecorationV1</ref>(shellSurface.get()));</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Commit<sp/>the<sp/>initial<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>QSize(0,<sp/>0));</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Request<sp/>fullscreen<sp/>mode<sp/>and<sp/>set<sp/>decoration<sp/>mode,<sp/>i.e.<sp/>perform<sp/>late<sp/>initialization.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_fullscreen(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/>decoration-&gt;set_mode(Test::XdgToplevelDecorationV1::mode_client_side);</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>compositor<sp/>will<sp/>respond<sp/>with<sp/>a<sp/>new<sp/>configure<sp/>event,<sp/>which<sp/>should<sp/>contain<sp/>fullscreen<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>QSize(1280,<sp/>1024));</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(1).value&lt;Test::XdgToplevel::States&gt;(),<sp/>Test::XdgToplevel::State::Fullscreen);</highlight></codeline>
<codeline lineno="2173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testChangeDecorationModeAfterInitialCommit()</highlight></codeline>
<codeline lineno="2176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>the<sp/>compositor<sp/>will<sp/>respond<sp/>with<sp/>a<sp/>good<sp/>configure<sp/>event<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>decoration<sp/>mode<sp/>changes<sp/>after<sp/>the<sp/>first<sp/>surface<sp/>commit<sp/>but<sp/>before<sp/>the<sp/>surface<sp/>is<sp/>mapped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(<ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>());</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>shellSurface(<ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get(),<sp/>Test::CreationSetup::CreateOnly));</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevelDecorationV1&gt;<sp/>decoration(<ref refid="namespace_k_win_1_1_test_1a5b6ba1c532f1dec604fbb3a7bd44ee04" kindref="member">Test::createXdgToplevelDecorationV1</ref>(shellSurface.get()));</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>decorationConfigureRequestedSpy(decoration.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_decoration_v1_1a389a2bf556a1e31a46eeca8afb482619" kindref="member">Test::XdgToplevelDecorationV1::configureRequested</ref>);</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>toplevelConfigureRequestedSpy(shellSurface.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_toplevel_1acd9bde0a055bcdbb4623d0d97525a0c9" kindref="member">Test::XdgToplevel::configureRequested</ref>);</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceConfigureRequestedSpy(shellSurface-&gt;xdgSurface(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_surface_1a7acfa65721c5be4f16fc45886605ddd2" kindref="member">Test::XdgSurface::configureRequested</ref>);</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"></highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>the<sp/>initial<sp/>commit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>QSize(0,<sp/>0));</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(decorationConfigureRequestedSpy.last().at(0).value&lt;Test::XdgToplevelDecorationV1::mode&gt;(),<sp/>Test::XdgToplevelDecorationV1::mode_server_side);</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Change<sp/>decoration<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/>decoration-&gt;set_mode(Test::XdgToplevelDecorationV1::mode_client_side);</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>configure<sp/>event<sp/>should<sp/>still<sp/>have<sp/>0x0<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceConfigureRequestedSpy.wait());</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(toplevelConfigureRequestedSpy.last().at(0).value&lt;QSize&gt;(),<sp/>QSize(0,<sp/>0));</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(decorationConfigureRequestedSpy.last().at(0).value&lt;Test::XdgToplevelDecorationV1::mode&gt;(),<sp/>Test::XdgToplevelDecorationV1::mode_client_side);</highlight></codeline>
<codeline lineno="2200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testModal()</highlight></codeline>
<codeline lineno="2203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parentSurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parentToplevel<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(parentSurface.get());</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parentWindow<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(parentSurface.get(),<sp/>{200,<sp/>200},<sp/>Qt::cyan);</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parentWindow);</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childSurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childToplevel<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(childSurface.get(),<sp/>[&amp;parentToplevel](Test::XdgToplevel<sp/>*toplevel)<sp/>{</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toplevel-&gt;set_parent(parentToplevel-&gt;object());</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childWindow<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(childSurface.get(),<sp/>{200,<sp/>200},<sp/>Qt::yellow);</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childWindow);</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!childWindow-&gt;isModal());</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(childWindow-&gt;transientFor(),<sp/>parentWindow);</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dialog<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a71e6598e56997eed0fa80ed32ade7446" kindref="member">Test::createXdgDialogV1</ref>(childToplevel.get());</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(<ref refid="namespace_k_win_1_1_test_1ab48f9c39f88089daf08aaa45759f7299" kindref="member">Test::waylandSync</ref>());</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(dialog);</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!childWindow-&gt;isModal());</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>modalChangedSpy(childWindow,<sp/>&amp;Window::modalChanged);</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/>dialog-&gt;set_modal();</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1ace6446b3dfb4032c38026e43ee355ff5" kindref="member">Test::flushWaylandConnection</ref>();</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(modalChangedSpy.wait());</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childWindow-&gt;isModal());</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/>dialog-&gt;unset_modal();</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1ace6446b3dfb4032c38026e43ee355ff5" kindref="member">Test::flushWaylandConnection</ref>();</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(modalChangedSpy.wait());</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!childWindow-&gt;isModal());</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/>dialog-&gt;set_modal();</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1ace6446b3dfb4032c38026e43ee355ff5" kindref="member">Test::flushWaylandConnection</ref>();</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(modalChangedSpy.wait());</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_workspace_1a8ca8f8a3904f007fd6a256c0d6996201" kindref="member">Workspace::self</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1a310f6402f9da20ba7b69c2327680b43e" kindref="member">activateWindow</ref>(parentWindow);</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="class_k_win_1_1_workspace_1a8ca8f8a3904f007fd6a256c0d6996201" kindref="member">Workspace::self</ref>()-&gt;activeWindow(),<sp/>childWindow);</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/>dialog.reset();</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1ace6446b3dfb4032c38026e43ee355ff5" kindref="member">Test::flushWaylandConnection</ref>();</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(modalChangedSpy.wait());</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!childWindow-&gt;isModal());</highlight></codeline>
<codeline lineno="2245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testCloseModal()</highlight></codeline>
<codeline lineno="2248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>the<sp/>parent<sp/>window<sp/>will<sp/>be<sp/>activated<sp/>when<sp/>an<sp/>active<sp/>modal<sp/>dialog<sp/>is<sp/>closed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>parent<sp/>and<sp/>a<sp/>child<sp/>windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parentSurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parentToplevel<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(parentSurface.get());</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parent<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(parentSurface.get(),<sp/>{200,<sp/>200},<sp/>Qt::cyan);</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parent);</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childSurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childToplevel<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(childSurface.get(),<sp/>[&amp;parentToplevel](Test::XdgToplevel<sp/>*toplevel)<sp/>{</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toplevel-&gt;set_parent(parentToplevel-&gt;object());</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>child<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(childSurface.get(),<sp/>{200,<sp/>200},<sp/>Qt::yellow);</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(child);</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!child-&gt;isModal());</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child-&gt;transientFor(),<sp/>parent);</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>modal<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dialog<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a71e6598e56997eed0fa80ed32ade7446" kindref="member">Test::createXdgDialogV1</ref>(childToplevel.get());</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>modalChangedSpy(child,<sp/>&amp;Window::modalChanged);</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/>dialog-&gt;set_modal();</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1ace6446b3dfb4032c38026e43ee355ff5" kindref="member">Test::flushWaylandConnection</ref>();</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(modalChangedSpy.wait());</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(child-&gt;isModal());</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;activeWindow(),<sp/>child);</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>the<sp/>child.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>childClosedSpy(child,<sp/>&amp;Window::closed);</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/>childToplevel.reset();</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/>childSurface.reset();</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/>dialog.reset();</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1ace6446b3dfb4032c38026e43ee355ff5" kindref="member">Test::flushWaylandConnection</ref>();</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childClosedSpy.wait());</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;activeWindow(),<sp/>parent);</highlight></codeline>
<codeline lineno="2283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testCloseModalPreSetup()</highlight></codeline>
<codeline lineno="2286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>the<sp/>parent<sp/>window<sp/>will<sp/>be<sp/>activated<sp/>when<sp/>an<sp/>active<sp/>modal<sp/>dialog<sp/>is<sp/>closed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>even<sp/>if<sp/>the<sp/>modality<sp/>existed<sp/>before<sp/>mapping<sp/>the<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2289"><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>parent<sp/>and<sp/>a<sp/>child<sp/>windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parentSurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parentToplevel<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(parentSurface.get());</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childSurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childToplevel<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(childSurface.get(),<sp/>[&amp;parentToplevel](Test::XdgToplevel<sp/>*toplevel)<sp/>{</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toplevel-&gt;set_parent(parentToplevel-&gt;object());</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dialog<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a71e6598e56997eed0fa80ed32ade7446" kindref="member">Test::createXdgDialogV1</ref>(childToplevel.get());</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/>dialog-&gt;set_modal();</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parent<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(parentSurface.get(),<sp/>{200,<sp/>200},<sp/>Qt::cyan);</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parent);</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>child<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(childSurface.get(),<sp/>{200,<sp/>200},<sp/>Qt::yellow);</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(child);</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child-&gt;transientFor(),<sp/>parent);</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1ace6446b3dfb4032c38026e43ee355ff5" kindref="member">Test::flushWaylandConnection</ref>();</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(child-&gt;isModal());</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;activeWindow(),<sp/>child);</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>the<sp/>child.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>childClosedSpy(child,<sp/>&amp;Window::closed);</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/>childToplevel.reset();</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/>childSurface.reset();</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1ace6446b3dfb4032c38026e43ee355ff5" kindref="member">Test::flushWaylandConnection</ref>();</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childClosedSpy.wait());</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;activeWindow(),<sp/>parent);</highlight></codeline>
<codeline lineno="2318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testCloseInactiveModal()</highlight></codeline>
<codeline lineno="2321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>the<sp/>parent<sp/>window<sp/>will<sp/>not<sp/>be<sp/>activated<sp/>when<sp/>an<sp/>inactive<sp/>modal<sp/>dialog<sp/>is<sp/>closed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>parent<sp/>and<sp/>a<sp/>child<sp/>windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parentSurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parentToplevel<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(parentSurface.get());</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parent<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(parentSurface.get(),<sp/>{200,<sp/>200},<sp/>Qt::cyan);</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parent);</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childSurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childToplevel<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(childSurface.get(),<sp/>[&amp;parentToplevel](Test::XdgToplevel<sp/>*toplevel)<sp/>{</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toplevel-&gt;set_parent(parentToplevel-&gt;object());</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>child<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(childSurface.get(),<sp/>{200,<sp/>200},<sp/>Qt::yellow);</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(child);</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!child-&gt;isModal());</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child-&gt;transientFor(),<sp/>parent);</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>modal<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dialog<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a71e6598e56997eed0fa80ed32ade7446" kindref="member">Test::createXdgDialogV1</ref>(childToplevel.get());</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>modalChangedSpy(child,<sp/>&amp;Window::modalChanged);</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/>dialog-&gt;set_modal();</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1ace6446b3dfb4032c38026e43ee355ff5" kindref="member">Test::flushWaylandConnection</ref>();</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(modalChangedSpy.wait());</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(child-&gt;isModal());</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;activeWindow(),<sp/>child);</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Show<sp/>another<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>otherSurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>otherToplevel<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(otherSurface.get());</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>otherWindow<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(otherSurface.get(),<sp/>{200,<sp/>200},<sp/>Qt::magenta);</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(otherWindow);</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;<ref refid="class_k_win_1_1_workspace_1aafa49cabb69a96aef0140b23c791b5f7" kindref="member">setActiveWindow</ref>(otherWindow);</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;activeWindow(),<sp/>otherWindow);</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>the<sp/>child.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>childClosedSpy(child,<sp/>&amp;Window::closed);</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/>childToplevel.reset();</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/>childSurface.reset();</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/>dialog.reset();</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_k_win_1_1_test_1ace6446b3dfb4032c38026e43ee355ff5" kindref="member">Test::flushWaylandConnection</ref>();</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childClosedSpy.wait());</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(<ref refid="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" kindref="member">workspace</ref>()-&gt;activeWindow(),<sp/>otherWindow);</highlight></codeline>
<codeline lineno="2364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testClosePopupOnParentUnmapped()</highlight></codeline>
<codeline lineno="2367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>a<sp/>popup<sp/>window<sp/>will<sp/>be<sp/>closed<sp/>when<sp/>the<sp/>parent<sp/>window<sp/>is<sp/>closed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>parentSurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>parentToplevel<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(parentSurface.get());</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*parent<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(parentSurface.get(),<sp/>QSize(200,<sp/>200),<sp/>Qt::cyan);</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parent);</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"></highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgPositioner&gt;<sp/>positioner<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a735a2b3ebb5e8d173daba48b745871a4" kindref="member">Test::createXdgPositioner</ref>();</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/>positioner-&gt;set_size(10,<sp/>10);</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/>positioner-&gt;set_anchor_rect(10,<sp/>10,<sp/>10,<sp/>10);</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>childSurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgPopup&gt;<sp/>popup<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a52039e32ae72c4329a4720d32469a385" kindref="member">Test::createXdgPopupSurface</ref>(childSurface.get(),<sp/>parentToplevel-&gt;xdgSurface(),<sp/>positioner.get());</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*child<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(childSurface.get(),<sp/>QSize(10,<sp/>10),<sp/>Qt::cyan);</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(child);</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>childClosedSpy(child,<sp/>&amp;Window::closed);</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/>parentToplevel.reset();</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/>parentSurface.reset();</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childClosedSpy.wait());</highlight></codeline>
<codeline lineno="2388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testPopupWithDismissedParent()</highlight></codeline>
<codeline lineno="2391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>verifies<sp/>that<sp/>a<sp/>popup<sp/>window<sp/>will<sp/>be<sp/>closed<sp/>when<sp/>the<sp/>parent<sp/>window<sp/>is<sp/>already<sp/>dismissed<sp/>by<sp/>the<sp/>compositor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>parentSurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgToplevel&gt;<sp/>parentToplevel<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(parentSurface.get());</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*parent<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(parentSurface.get(),<sp/>QSize(200,<sp/>200),<sp/>Qt::cyan);</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parent);</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"></highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgPositioner&gt;<sp/>positioner<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a735a2b3ebb5e8d173daba48b745871a4" kindref="member">Test::createXdgPositioner</ref>();</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/>positioner-&gt;set_size(10,<sp/>10);</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/>positioner-&gt;set_anchor_rect(10,<sp/>10,<sp/>10,<sp/>10);</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>childSurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgPopup&gt;<sp/>popup<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a52039e32ae72c4329a4720d32469a385" kindref="member">Test::createXdgPopupSurface</ref>(childSurface.get(),<sp/>parentToplevel-&gt;xdgSurface(),<sp/>positioner.get());</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*child<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(childSurface.get(),<sp/>QSize(10,<sp/>10),<sp/>Qt::cyan);</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(child);</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"></highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>childDoneSpy(popup.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_popup_1a2b766a2e5a276eeb692320d679a9c522" kindref="member">Test::XdgPopup::doneReceived</ref>);</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/>child-&gt;popupDone();</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childDoneSpy.wait());</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>nested<sp/>popup<sp/>will<sp/>be<sp/>dismissed<sp/>immediately<sp/>if<sp/>its<sp/>parent<sp/>popup<sp/>is<sp/>already<sp/>dismissed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>grandChildSurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Test::XdgPopup&gt;<sp/>grandChildPopup<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a52039e32ae72c4329a4720d32469a385" kindref="member">Test::createXdgPopupSurface</ref>(grandChildSurface.get(),<sp/>popup-&gt;xdgSurface(),<sp/>positioner.get(),<sp/>Test::CreationSetup::CreateOnly);</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>grandChildDoneSpy(grandChildPopup.get(),<sp/>&amp;<ref refid="class_k_win_1_1_test_1_1_xdg_popup_1a2b766a2e5a276eeb692320d679a9c522" kindref="member">Test::XdgPopup::doneReceived</ref>);</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/>grandChildPopup-&gt;xdgSurface()-&gt;surface()-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(grandChildDoneSpy.wait());</highlight></codeline>
<codeline lineno="2418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testMinimumSize()</highlight></codeline>
<codeline lineno="2421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>a<sp/>minimum<sp/>size<sp/>of<sp/>20px<sp/>is<sp/>forced<sp/>by<sp/>the<sp/>compositor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"></highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>surface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shellSurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get(),<sp/>[](Test::XdgToplevel<sp/>*toplevel)<sp/>{</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toplevel-&gt;set_min_size(200,<sp/>250);</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(300,<sp/>300),<sp/>Qt::cyan);</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;minSize(),<sp/>QSizeF(200,<sp/>250));</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>committedSpy(window-&gt;surface(),<sp/>&amp;<ref refid="class_k_win_1_1_surface_interface_1a0ef181bc149455033328ca56afc61697" kindref="member">SurfaceInterface::committed</ref>);</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"></highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_min_size(100,<sp/>100);</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(committedSpy.wait());</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;minSize(),<sp/>QSizeF(100,<sp/>100));</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_min_size(0,<sp/>100);</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(committedSpy.wait());</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;minSize(),<sp/>QSizeF(20,<sp/>100));</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_min_size(100,<sp/>0);</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(committedSpy.wait());</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;minSize(),<sp/>QSizeF(100,<sp/>20));</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_min_size(0,<sp/>0);</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(committedSpy.wait());</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;minSize(),<sp/>QSizeF(20,<sp/>20));</highlight></codeline>
<codeline lineno="2452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testNoMinimumSize()</highlight></codeline>
<codeline lineno="2455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>a<sp/>minimum<sp/>size<sp/>of<sp/>20px<sp/>is<sp/>forced<sp/>by<sp/>the<sp/>compositor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>surface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shellSurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get());</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(300,<sp/>300),<sp/>Qt::cyan);</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;minSize(),<sp/>QSizeF(20,<sp/>20));</highlight></codeline>
<codeline lineno="2462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testMaximumSize()</highlight></codeline>
<codeline lineno="2465"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>surface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shellSurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get(),<sp/>[](Test::XdgToplevel<sp/>*toplevel)<sp/>{</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toplevel-&gt;set_max_size(300,<sp/>350);</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(200,<sp/>200),<sp/>Qt::cyan);</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maxSize(),<sp/>QSizeF(300,<sp/>350));</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"></highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>committedSpy(window-&gt;surface(),<sp/>&amp;<ref refid="class_k_win_1_1_surface_interface_1a0ef181bc149455033328ca56afc61697" kindref="member">SurfaceInterface::committed</ref>);</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"></highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_max_size(400,<sp/>400);</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(committedSpy.wait());</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maxSize(),<sp/>QSizeF(400,<sp/>400));</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_max_size(0,<sp/>400);</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(committedSpy.wait());</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maxSize(),<sp/>QSizeF(INT_MAX,<sp/>400));</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_max_size(400,<sp/>0);</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(committedSpy.wait());</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maxSize(),<sp/>QSizeF(400,<sp/>INT_MAX));</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/>shellSurface-&gt;set_max_size(0,<sp/>0);</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(committedSpy.wait());</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maxSize(),<sp/>QSizeF(INT_MAX,<sp/>INT_MAX));</highlight></codeline>
<codeline lineno="2494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestXdgShellWindow::testNoMaximumSize()</highlight></codeline>
<codeline lineno="2497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>surface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a9ee27d765011e13e97bbd4c0920bc9cc" kindref="member">Test::createSurface</ref>();</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shellSurface<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a8bda443625951cf5813685da7a3119ce" kindref="member">Test::createXdgToplevelSurface</ref>(surface.get());</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/>Window<sp/>*window<sp/>=<sp/><ref refid="namespace_k_win_1_1_test_1a0e1cd98b5ec744f0d5de36c224a91092" kindref="member">Test::renderAndWaitForShown</ref>(surface.get(),<sp/>QSize(300,<sp/>300),<sp/>Qt::cyan);</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(window-&gt;maxSize(),<sp/>QSizeF(INT_MAX,<sp/>INT_MAX));</highlight></codeline>
<codeline lineno="2502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><ref refid="kwin__wayland__test_8h_1a105fcd0c1d5eb52370ab30db8ad37c4c" kindref="member">WAYLANDTEST_MAIN</ref>(<ref refid="class_test_xdg_shell_window" kindref="compound">TestXdgShellWindow</ref>)</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xdgshellwindow_test.moc&quot;</highlight></codeline>
    </programlisting>
    <location file="kwin/autotests/integration/xdgshellwindow_test.cpp"/>
  </compounddef>
</doxygen>
