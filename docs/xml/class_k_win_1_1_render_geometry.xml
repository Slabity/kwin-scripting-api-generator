<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_render_geometry" kind="class" language="C++" prot="public">
    <compoundname>KWin::RenderGeometry</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QList&lt; GLVertex2D &gt;</basecompoundref>
    <includes refid="itemgeometry_8h" local="no">itemgeometry.h</includes>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_k_win_1_1_render_geometry_1a7bc1c02ecb839871aadec8895abda2e4" prot="public" static="no" strong="yes">
        <type></type>
        <name>VertexSnappingMode</name>
        <qualifiedname>KWin::RenderGeometry::VertexSnappingMode</qualifiedname>
        <enumvalue id="class_k_win_1_1_render_geometry_1a7bc1c02ecb839871aadec8895abda2e4a6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_render_geometry_1a7bc1c02ecb839871aadec8895abda2e4ab7f41fc1412ad2ee75e9b2635d3b9d5c" prot="public">
          <name>Round</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>In what way should vertices snap to integer device coordinates?</para>
<para>Vertices are converted to device coordinates before being sent to the rendering system. Depending on scaling factors, this may lead to device coordinates with fractional parts. For some cases, this may not be ideal as fractional coordinates need to be interpolated and can lead to &quot;blurry&quot; rendering. To avoid that, we can snap the vertices to integer device coordinates when they are added. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/itemgeometry.h" line="109" column="5" bodyfile="kwin/src/scene/itemgeometry.h" bodystart="109" bodyend="114"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_render_geometry_1a7391cb6fbf9389ca6da7a28655d23add" prot="private" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_render_geometry_1a7bc1c02ecb839871aadec8895abda2e4" kindref="member">VertexSnappingMode</ref></type>
        <definition>VertexSnappingMode KWin::RenderGeometry::m_vertexSnappingMode</definition>
        <argsstring></argsstring>
        <name>m_vertexSnappingMode</name>
        <qualifiedname>KWin::RenderGeometry::m_vertexSnappingMode</qualifiedname>
        <initializer>= <ref refid="class_k_win_1_1_render_geometry_1a7bc1c02ecb839871aadec8895abda2e4ab7f41fc1412ad2ee75e9b2635d3b9d5c" kindref="member">VertexSnappingMode::Round</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/itemgeometry.h" line="201" column="24" bodyfile="kwin/src/scene/itemgeometry.h" bodystart="201" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_render_geometry_1a10fc7a299c92a64bd64db7f60eb321cc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_render_geometry_1a7bc1c02ecb839871aadec8895abda2e4" kindref="member">VertexSnappingMode</ref></type>
        <definition>VertexSnappingMode KWin::RenderGeometry::vertexSnappingMode</definition>
        <argsstring>() const</argsstring>
        <name>vertexSnappingMode</name>
        <qualifiedname>KWin::RenderGeometry::vertexSnappingMode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The vertex snapping mode to use for this geometry.</para>
<para>By default, this is <ref refid="class_k_win_1_1_render_geometry_1a7bc1c02ecb839871aadec8895abda2e4ab7f41fc1412ad2ee75e9b2635d3b9d5c" kindref="member">VertexSnappingMode::Round</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/itemgeometry.h" line="121" column="31" bodyfile="kwin/src/scene/itemgeometry.h" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_render_geometry_1a831970848983731dc5ed787dfc7d591f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::RenderGeometry::setVertexSnappingMode</definition>
        <argsstring>(VertexSnappingMode mode)</argsstring>
        <name>setVertexSnappingMode</name>
        <qualifiedname>KWin::RenderGeometry::setVertexSnappingMode</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_render_geometry_1a7bc1c02ecb839871aadec8895abda2e4" kindref="member">VertexSnappingMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the vertex snapping mode to use for this geometry.</para>
<para>Note that this doesn&apos;t change vertices retroactively, so you should set this before adding any vertices, or clear and rebuild the geometry after setting it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The new rounding mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/itemgeometry.h" line="134" column="10" bodyfile="kwin/src/scene/itemgeometry.h" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_render_geometry_1a60e0c419486a2418a05719b9440f19d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::RenderGeometry::copy</definition>
        <argsstring>(std::span&lt; GLVertex2D &gt; destination)</argsstring>
        <name>copy</name>
        <qualifiedname>KWin::RenderGeometry::copy</qualifiedname>
        <param>
          <type>std::span&lt; <ref refid="struct_k_win_1_1_g_l_vertex2_d" kindref="compound">GLVertex2D</ref> &gt;</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy geometry data into another buffer.</para>
<para>This is primarily intended for copying into a vertex buffer for rendering.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination buffer. This needs to be at least large enough to contain all elements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/itemgeometry.h" line="146" column="10" bodyfile="kwin/src/scene/itemgeometry.cpp" bodystart="217" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_render_geometry_1abe4f9a52015ff91b3e71203b56f9ce1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::RenderGeometry::appendWindowVertex</definition>
        <argsstring>(const WindowVertex &amp;windowVertex, qreal deviceScale)</argsstring>
        <name>appendWindowVertex</name>
        <qualifiedname>KWin::RenderGeometry::appendWindowVertex</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_window_vertex" kindref="compound">WindowVertex</ref> &amp;</type>
          <declname>windowVertex</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>deviceScale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append a <ref refid="class_k_win_1_1_window_vertex" kindref="compound">WindowVertex</ref> as a geometry vertex.</para>
<para><ref refid="class_k_win_1_1_window_vertex" kindref="compound">WindowVertex</ref> is assumed to be in logical coordinates. It will be converted to device coordinates using the specified device scale and then rounded so it fits correctly on the device pixel grid.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>windowVertex</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="class_k_win_1_1_window_vertex" kindref="compound">WindowVertex</ref> instance to append. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deviceScale</parametername>
</parameternamelist>
<parameterdescription>
<para>The scaling factor to use to go from logical to device coordinates. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/itemgeometry.h" line="158" column="10" bodyfile="kwin/src/scene/itemgeometry.cpp" bodystart="223" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_render_geometry_1a5cf9bbadd32a2608ea784d4dacc72b89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::RenderGeometry::appendWindowQuad</definition>
        <argsstring>(const WindowQuad &amp;quad, qreal deviceScale)</argsstring>
        <name>appendWindowQuad</name>
        <qualifiedname>KWin::RenderGeometry::appendWindowQuad</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_window_quad" kindref="compound">WindowQuad</ref> &amp;</type>
          <declname>quad</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>deviceScale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append a <ref refid="class_k_win_1_1_window_quad" kindref="compound">WindowQuad</ref> as two triangles.</para>
<para>This will append the corners of the specified <ref refid="class_k_win_1_1_window_quad" kindref="compound">WindowQuad</ref> in the right order so they make two triangles that can be rendered by OpenGL. The corners are converted to device coordinates and rounded, just like <computeroutput><ref refid="class_k_win_1_1_render_geometry_1abe4f9a52015ff91b3e71203b56f9ce1f" kindref="member">appendWindowVertex()</ref></computeroutput> does.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>quad</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="class_k_win_1_1_window_quad" kindref="compound">WindowQuad</ref> instance to append. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deviceScale</parametername>
</parameternamelist>
<parameterdescription>
<para>The scaling factor to use to go from logical to device coordinates. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/itemgeometry.h" line="171" column="10" bodyfile="kwin/src/scene/itemgeometry.cpp" bodystart="238" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_render_geometry_1aad7385d8fa01609e00e63322c169b936" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::RenderGeometry::appendSubQuad</definition>
        <argsstring>(const WindowQuad &amp;quad, const QRectF &amp;subquad, qreal deviceScale)</argsstring>
        <name>appendSubQuad</name>
        <qualifiedname>KWin::RenderGeometry::appendSubQuad</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_window_quad" kindref="compound">WindowQuad</ref> &amp;</type>
          <declname>quad</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>subquad</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>deviceScale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append a sub-quad of a <ref refid="class_k_win_1_1_window_quad" kindref="compound">WindowQuad</ref> as two triangles.</para>
<para>This will append the sub-quad specified by <computeroutput>intersection</computeroutput> as two triangles. The quad is expected to be in logical coordinates, while the intersection is expected to be in device coordinates. The texture coordinates of the resulting vertices are based upon those of the quad, using bilinear interpolation for interpolating how much of the original texture coordinates to use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>quad</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="class_k_win_1_1_window_quad" kindref="compound">WindowQuad</ref> instance to use a sub-quad of. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subquad</parametername>
</parameternamelist>
<parameterdescription>
<para>The sub-quad to append. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deviceScale</parametername>
</parameternamelist>
<parameterdescription>
<para>The scaling factor used to convert from logical to device coordinates. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/itemgeometry.h" line="187" column="10" bodyfile="kwin/src/scene/itemgeometry.cpp" bodystart="252" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_render_geometry_1a475c78cc940615e7d37a8f7fd78978db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::RenderGeometry::postProcessTextureCoordinates</definition>
        <argsstring>(const QMatrix4x4 &amp;textureMatrix)</argsstring>
        <name>postProcessTextureCoordinates</name>
        <qualifiedname>KWin::RenderGeometry::postProcessTextureCoordinates</qualifiedname>
        <param>
          <type>const QMatrix4x4 &amp;</type>
          <declname>textureMatrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modify this geometry&apos;s texture coordinates based on a matrix.</para>
<para>This is primarily intended to convert from non-normalised to normalised texture coordinates.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>textureMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture matrix to use for modifying the texture coordinates. Note that only the 2D scale and translation are used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/itemgeometry.h" line="198" column="10" bodyfile="kwin/src/scene/itemgeometry.cpp" bodystart="289" bodyend="299"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A helper class for render geometry in device coordinates.</para>
<para>This mostly represents a vector of vertices, with some convenience methods for easily converting from <ref refid="class_k_win_1_1_window_quad" kindref="compound">WindowQuad</ref> and related classes to lists of <ref refid="struct_k_win_1_1_g_l_vertex2_d" kindref="compound">GLVertex2D</ref>. This class assumes rendering happens as unindexed triangles. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>KWin::RenderGeometry</label>
        <link refid="class_k_win_1_1_render_geometry"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QList&lt; GLVertex2D &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>KWin::RenderGeometry</label>
        <link refid="class_k_win_1_1_render_geometry"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QList&lt; GLVertex2D &gt;</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/scene/itemgeometry.h" line="96" column="1" bodyfile="kwin/src/scene/itemgeometry.h" bodystart="97" bodyend="202"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_render_geometry_1aad7385d8fa01609e00e63322c169b936" prot="public" virt="non-virtual"><scope>KWin::RenderGeometry</scope><name>appendSubQuad</name></member>
      <member refid="class_k_win_1_1_render_geometry_1a5cf9bbadd32a2608ea784d4dacc72b89" prot="public" virt="non-virtual"><scope>KWin::RenderGeometry</scope><name>appendWindowQuad</name></member>
      <member refid="class_k_win_1_1_render_geometry_1abe4f9a52015ff91b3e71203b56f9ce1f" prot="public" virt="non-virtual"><scope>KWin::RenderGeometry</scope><name>appendWindowVertex</name></member>
      <member refid="class_k_win_1_1_render_geometry_1a60e0c419486a2418a05719b9440f19d2" prot="public" virt="non-virtual"><scope>KWin::RenderGeometry</scope><name>copy</name></member>
      <member refid="class_k_win_1_1_render_geometry_1a7391cb6fbf9389ca6da7a28655d23add" prot="private" virt="non-virtual"><scope>KWin::RenderGeometry</scope><name>m_vertexSnappingMode</name></member>
      <member refid="class_k_win_1_1_render_geometry_1a475c78cc940615e7d37a8f7fd78978db" prot="public" virt="non-virtual"><scope>KWin::RenderGeometry</scope><name>postProcessTextureCoordinates</name></member>
      <member refid="class_k_win_1_1_render_geometry_1a831970848983731dc5ed787dfc7d591f" prot="public" virt="non-virtual"><scope>KWin::RenderGeometry</scope><name>setVertexSnappingMode</name></member>
      <member refid="class_k_win_1_1_render_geometry_1a7bc1c02ecb839871aadec8895abda2e4" prot="public" virt="non-virtual"><scope>KWin::RenderGeometry</scope><name>VertexSnappingMode</name></member>
      <member refid="class_k_win_1_1_render_geometry_1a10fc7a299c92a64bd64db7f60eb321cc" prot="public" virt="non-virtual"><scope>KWin::RenderGeometry</scope><name>vertexSnappingMode</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
