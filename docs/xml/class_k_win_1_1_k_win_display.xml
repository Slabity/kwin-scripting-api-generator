<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_k_win_display" kind="class" language="C++" prot="public">
    <compoundname>KWin::KWinDisplay</compoundname>
    <basecompoundref refid="class_k_win_1_1_filtered_display" prot="public" virt="non-virtual">KWin::FilteredDisplay</basecompoundref>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_k_win_display_1a0d0d1ba832f94bc43630eb8c08e2bded" prot="public" static="no" mutable="no">
        <type>const QSet&lt; QByteArray &gt;</type>
        <definition>const QSet&lt;QByteArray&gt; KWin::KWinDisplay::interfacesBlackList</definition>
        <argsstring></argsstring>
        <name>interfacesBlackList</name>
        <qualifiedname>KWin::KWinDisplay::interfacesBlackList</qualifiedname>
        <initializer>= {
        QByteArrayLiteral(&quot;org_kde_plasma_window_management&quot;),
        QByteArrayLiteral(&quot;org_kde_kwin_fake_input&quot;),
        QByteArrayLiteral(&quot;org_kde_kwin_keystate&quot;),
        QByteArrayLiteral(&quot;zkde_screencast_unstable_v1&quot;),
        QByteArrayLiteral(&quot;org_kde_plasma_activation_feedback&quot;),
        QByteArrayLiteral(&quot;kde_lockscreen_overlay_v1&quot;),
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland_server.cpp" line="129" column="16" bodyfile="kwin/src/wayland_server.cpp" bodystart="129" bodyend="136"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_k_win_display_1a6e9cf5e21c342d140d41889af7f7d362" prot="public" static="no" mutable="no">
        <type>const QSet&lt; QByteArray &gt;</type>
        <definition>const QSet&lt;QByteArray&gt; KWin::KWinDisplay::inputmethodInterfaces</definition>
        <argsstring></argsstring>
        <name>inputmethodInterfaces</name>
        <qualifiedname>KWin::KWinDisplay::inputmethodInterfaces</qualifiedname>
        <initializer>= {&quot;zwp_input_panel_v1&quot;, &quot;zwp_input_method_v1&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland_server.cpp" line="138" column="16" bodyfile="kwin/src/wayland_server.cpp" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_k_win_display_1a16a6d63a6c000ab3d510c3a76e688082" prot="public" static="no" mutable="no">
        <type>const QSet&lt; QByteArray &gt;</type>
        <definition>const QSet&lt;QByteArray&gt; KWin::KWinDisplay::xwaylandInterfaces</definition>
        <argsstring></argsstring>
        <name>xwaylandInterfaces</name>
        <qualifiedname>KWin::KWinDisplay::xwaylandInterfaces</qualifiedname>
        <initializer>= {
        QByteArrayLiteral(&quot;zwp_xwayland_keyboard_grab_manager_v1&quot;),
        QByteArrayLiteral(&quot;xwayland_shell_v1&quot;),
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland_server.cpp" line="139" column="16" bodyfile="kwin/src/wayland_server.cpp" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_k_win_display_1ae25cdbe99e946b9917254c2da8e89e6a" prot="public" static="no" mutable="no">
        <type>QSet&lt; QString &gt;</type>
        <definition>QSet&lt;QString&gt; KWin::KWinDisplay::m_reported</definition>
        <argsstring></argsstring>
        <name>m_reported</name>
        <qualifiedname>KWin::KWinDisplay::m_reported</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland_server.cpp" line="144" column="10" bodyfile="kwin/src/wayland_server.cpp" bodystart="144" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_k_win_display_1a1f164a8b419e0f37ca003a12262efb45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KWin::KWinDisplay::KWinDisplay</definition>
        <argsstring>(QObject *parent)</argsstring>
        <name>KWinDisplay</name>
        <qualifiedname>KWin::KWinDisplay::KWinDisplay</qualifiedname>
        <param>
          <type>QObject *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland_server.cpp" line="116" column="5" bodyfile="kwin/src/wayland_server.cpp" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_k_win_display_1a991dfb617dbedb5d3b2c0b8f32c21c49" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QStringList</type>
        <definition>QStringList KWin::KWinDisplay::fetchRequestedInterfaces</definition>
        <argsstring>(ClientConnection *client) const</argsstring>
        <name>fetchRequestedInterfaces</name>
        <qualifiedname>KWin::KWinDisplay::fetchRequestedInterfaces</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland_server.cpp" line="121" column="17" bodyfile="kwin/src/wayland_server.cpp" bodystart="121" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_k_win_display_1ab8bd1d8330dc7e4e0815367d2f9d4bcf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::KWinDisplay::allowInterface</definition>
        <argsstring>(ClientConnection *client, const QByteArray &amp;interfaceName) override</argsstring>
        <name>allowInterface</name>
        <qualifiedname>KWin::KWinDisplay::allowInterface</qualifiedname>
        <reimplements refid="class_k_win_1_1_filtered_display_1a06525cd1966b7ac6f200cbfe736fc847">allowInterface</reimplements>
        <param>
          <type><ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const QByteArray &amp;</type>
          <declname>interfaceName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether the <itemizedlist>
<listitem><para>client can see the interface with the given </para>
</listitem>
<listitem><para>interfaceName</para>
</listitem>
</itemizedlist>
When false will not see these globals for a given interface in the registry, and any manual attempts to bind will fail</para>
<para><simplesect kind="return"><para>true if the client should be able to access the global with the following interfaceName </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland_server.cpp" line="146" column="10" bodyfile="kwin/src/wayland_server.cpp" bodystart="146" bodyend="193"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>KWin::Display</label>
        <link refid="class_k_win_1_1_display"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>KWin::FilteredDisplay</label>
        <link refid="class_k_win_1_1_filtered_display"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::KWinDisplay</label>
        <link refid="class_k_win_1_1_k_win_display"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>KWin::Display</label>
        <link refid="class_k_win_1_1_display"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>KWin::FilteredDisplay</label>
        <link refid="class_k_win_1_1_filtered_display"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::KWinDisplay</label>
        <link refid="class_k_win_1_1_k_win_display"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/wayland_server.cpp" line="113" column="1" bodyfile="kwin/src/wayland_server.cpp" bodystart="114" bodyend="194"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_display_1ae4065e04d9a4a44150d44585f6942bb3" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>addSocketFileDescriptor</name></member>
      <member refid="class_k_win_1_1_display_1aa4c4acfe47f745065df276fab792b431" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>addSocketName</name></member>
      <member refid="class_k_win_1_1_k_win_display_1ab8bd1d8330dc7e4e0815367d2f9d4bcf" prot="public" virt="virtual"><scope>KWin::KWinDisplay</scope><name>allowInterface</name></member>
      <member refid="class_k_win_1_1_display_1a374a4d7de3f7a40aed96a879dc92b497" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>bufferForResource</name></member>
      <member refid="class_k_win_1_1_display_1a04054e9c882bab1a04bbf319585712e5" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>clientConnected</name></member>
      <member refid="class_k_win_1_1_display_1a2dae745448a325e7f6e8d0e640080047" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>clientDisconnected</name></member>
      <member refid="class_k_win_1_1_display_1a07034ffcff1c993fe2efabbb4371ab77" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>createClient</name></member>
      <member refid="class_k_win_1_1_display_1a0be7cd8fa84fabd7a6f51f9819f7d7e1" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>createShm</name></member>
      <member refid="class_k_win_1_1_display_1a39c8828d70c0deafb5c1b3b9ccf95979" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>dispatchEvents</name></member>
      <member refid="class_k_win_1_1_display_1abec28e9c667dfa4485597aaeebb07129" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>Display</name></member>
      <member refid="class_k_win_1_1_k_win_display_1a991dfb617dbedb5d3b2c0b8f32c21c49" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>fetchRequestedInterfaces</name></member>
      <member refid="class_k_win_1_1_filtered_display_1a9fe1a40add12e705ea5c68883528a2ff" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>FilteredDisplay</name></member>
      <member refid="class_k_win_1_1_display_1a2260ce48af41a11b1a0d4225603c7766" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>flush</name></member>
      <member refid="class_k_win_1_1_display_1a79c16fcdaf407c74c7a0d4395762a86f" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>getConnection</name></member>
      <member refid="class_k_win_1_1_k_win_display_1a6e9cf5e21c342d140d41889af7f7d362" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>inputmethodInterfaces</name></member>
      <member refid="class_k_win_1_1_k_win_display_1a0d0d1ba832f94bc43630eb8c08e2bded" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>interfacesBlackList</name></member>
      <member refid="class_k_win_1_1_display_1aa50d346a6be40bd7db06214c0350456a" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>isRunning</name></member>
      <member refid="class_k_win_1_1_k_win_display_1a1f164a8b419e0f37ca003a12262efb45" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>KWinDisplay</name></member>
      <member refid="class_k_win_1_1_display_1a442b1534e9a5002094ebfb5db1c7c82a" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>largestIntersectingOutput</name></member>
      <member refid="class_k_win_1_1_k_win_display_1ae25cdbe99e946b9917254c2da8e89e6a" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>m_reported</name></member>
      <member refid="class_k_win_1_1_display_1a88d04e81a3c1a696bae7fca6426fabcc" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>nextSerial</name></member>
      <member refid="class_k_win_1_1_display_1afe19d2ff1279b5a89fbe761a99dc58eb" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>operator wl_display *</name></member>
      <member refid="class_k_win_1_1_display_1a1544ce9fb0ca6c88896be026ee164ee5" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>operator wl_display *</name></member>
      <member refid="class_k_win_1_1_display_1a768cfd4a55a23aa9d002aefb0065892b" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>outputDevices</name></member>
      <member refid="class_k_win_1_1_display_1a6fb3b0641dcb2f4f911346aa8696b7fe" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>outputs</name></member>
      <member refid="class_k_win_1_1_display_1a5e188d47beffd1102046c911952f6f19" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>outputsIntersecting</name></member>
      <member refid="class_k_win_1_1_display_1a0242f5e4216de825ed68f34f5d78820f" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>running</name></member>
      <member refid="class_k_win_1_1_display_1a923ef782d0c9b5b8d0afed92c506d11c" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>runningChanged</name></member>
      <member refid="class_k_win_1_1_display_1aef2adf782212918f49a67897ae38a39e" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>seats</name></member>
      <member refid="class_k_win_1_1_display_1a1592cc63a3c36673842d84fa3933a202" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>serial</name></member>
      <member refid="class_k_win_1_1_display_1a90caf1e11bcbe97111449fc3b040bcc2" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>setDefaultMaxBufferSize</name></member>
      <member refid="class_k_win_1_1_display_1a0d0e89f4da09f16cdb95e7f7440fbe33" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>socketNames</name></member>
      <member refid="class_k_win_1_1_display_1ab01e78a46ce6279919e4e853658fa771" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>socketNamesChanged</name></member>
      <member refid="class_k_win_1_1_display_1af36443417f1832645373ce713cb226c7" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>start</name></member>
      <member refid="class_k_win_1_1_k_win_display_1a16a6d63a6c000ab3d510c3a76e688082" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>xwaylandInterfaces</name></member>
      <member refid="class_k_win_1_1_display_1a69bab00bcda1b5d18a26d85d06ff0950" prot="public" virt="virtual"><scope>KWin::KWinDisplay</scope><name>~Display</name></member>
      <member refid="class_k_win_1_1_filtered_display_1aa8d25de1f330eeaa605a30e699c34606" prot="public" virt="non-virtual"><scope>KWin::KWinDisplay</scope><name>~FilteredDisplay</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
