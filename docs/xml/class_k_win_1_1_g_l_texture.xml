<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_g_l_texture" kind="class" language="C++" prot="public">
    <compoundname>KWin::GLTexture</compoundname>
    <derivedcompoundref refid="class_k_win_1_1_e_g_l_image_texture" prot="public" virt="non-virtual">KWin::EGLImageTexture</derivedcompoundref>
    <includes refid="gltexture_8h" local="no">gltexture.h</includes>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_g_l_texture_1a1060852093ece0363e9abcf49da3c8af" prot="protected" static="no" mutable="no">
        <type>const std::unique_ptr&lt; <ref refid="class_k_win_1_1_g_l_texture_private" kindref="compound">GLTexturePrivate</ref> &gt;</type>
        <definition>const std::unique_ptr&lt;GLTexturePrivate&gt; KWin::GLTexture::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <qualifiedname>KWin::GLTexture::d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="132" column="27" bodyfile="kwin/src/opengl/gltexture.h" bodystart="132" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1ad2e7540fd78f144ccfd5fb010bff9a36" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::GLTexture::GLTexture</definition>
        <argsstring>(GLenum target)</argsstring>
        <name>GLTexture</name>
        <qualifiedname>KWin::GLTexture::GLTexture</qualifiedname>
        <param>
          <type>GLenum</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="42" column="14" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="70" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1aa3d73c1663aaaa8611fcef846fc78742" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::GLTexture::create</definition>
        <argsstring>()</argsstring>
        <name>create</name>
        <qualifiedname>KWin::GLTexture::create</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates the underlying texture object. Returns <computeroutput>true</computeroutput> if the texture has been created successfully; otherwise returns <computeroutput>false</computeroutput>. Note that this does not allocate any storage for the texture. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="49" column="10" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="97" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1a467f2f1ee778d3c04dbe7c3eecf2737e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>KWin::GLTexture::~GLTexture</definition>
        <argsstring>()</argsstring>
        <name>~GLTexture</name>
        <qualifiedname>KWin::GLTexture::~GLTexture</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="50" column="13" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1a4732e9350196f128470ca6a56dd89de9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::GLTexture::isNull</definition>
        <argsstring>() const</argsstring>
        <name>isNull</name>
        <qualifiedname>KWin::GLTexture::isNull</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="52" column="10" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1a1dec6b68997f434cadbaaed078875ece" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QSize</type>
        <definition>QSize KWin::GLTexture::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>KWin::GLTexture::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="53" column="11" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1aae1de5a574570f21feb3438a05011014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::GLTexture::setSize</definition>
        <argsstring>(const QSize &amp;size)</argsstring>
        <name>setSize</name>
        <qualifiedname>KWin::GLTexture::setSize</qualifiedname>
        <param>
          <type>const QSize &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="54" column="10" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="143" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1a1ca4334af1a415346fca662ffba25da1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::GLTexture::width</definition>
        <argsstring>() const</argsstring>
        <name>width</name>
        <qualifiedname>KWin::GLTexture::width</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="55" column="9" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="423" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1aad07b441c0726ead8e91b73a750c0289" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::GLTexture::height</definition>
        <argsstring>() const</argsstring>
        <name>height</name>
        <qualifiedname>KWin::GLTexture::height</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="56" column="9" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="428" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1a2c981651fa4c6b0779bf2efd8a30bebf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::GLTexture::setContentTransform</definition>
        <argsstring>(OutputTransform transform)</argsstring>
        <name>setContentTransform</name>
        <qualifiedname>KWin::GLTexture::setContentTransform</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output_transform" kindref="compound">OutputTransform</ref></type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets the transform between the content and the buffer </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="61" column="10" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="397" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1a2b8c1ac9232f0356ac604a963350e91a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_output_transform" kindref="compound">OutputTransform</ref></type>
        <definition>OutputTransform KWin::GLTexture::contentTransform</definition>
        <argsstring>() const</argsstring>
        <name>contentTransform</name>
        <qualifiedname>KWin::GLTexture::contentTransform</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the transform between the content and the buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="66" column="21" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="405" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1aba9725197cdfa27ed5db7a16463d43f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::GLTexture::setSwizzle</definition>
        <argsstring>(GLenum red, GLenum green, GLenum blue, GLenum alpha)</argsstring>
        <name>setSwizzle</name>
        <qualifiedname>KWin::GLTexture::setSwizzle</qualifiedname>
        <param>
          <type>GLenum</type>
          <declname>red</declname>
        </param>
        <param>
          <type>GLenum</type>
          <declname>green</declname>
        </param>
        <param>
          <type>GLenum</type>
          <declname>blue</declname>
        </param>
        <param>
          <type>GLenum</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies which component of a texel is placed in each respective component of the vector returned to the shader.</para>
<para>Valid values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_ONE and GL_ZERO.</para>
<para><simplesect kind="see"><para>swizzleSupported() </para>
</simplesect>
<simplesect kind="since"><para>5.2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="77" column="10" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="410" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1ade184fbdb00efd4e35c42a4b975a100a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QMatrix4x4</type>
        <definition>QMatrix4x4 KWin::GLTexture::matrix</definition>
        <argsstring>(TextureCoordinateType type) const</argsstring>
        <name>matrix</name>
        <qualifiedname>KWin::GLTexture::matrix</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1ad6098fc293bb371948ad74f841c6a7b7" kindref="member">TextureCoordinateType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a matrix that transforms texture coordinates of the given type, taking the texture target and the y-inversion flag into account.</para>
<para><simplesect kind="since"><para>4.11 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="85" column="16" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="433" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1a8089683b63e92df439d27a1e3ada4404" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::GLTexture::update</definition>
        <argsstring>(const QImage &amp;image, const QRegion &amp;region, const QPoint &amp;offset=QPoint())</argsstring>
        <name>update</name>
        <qualifiedname>KWin::GLTexture::update</qualifiedname>
        <param>
          <type>const QImage &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const QRegion &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>const QPoint &amp;</type>
          <declname>offset</declname>
          <defval>QPoint()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="87" column="10" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="152" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1af4d227b648ea821f3f2ad01a7a166daa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::GLTexture::bind</definition>
        <argsstring>()</argsstring>
        <name>bind</name>
        <qualifiedname>KWin::GLTexture::bind</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="88" column="10" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="211" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1a411bfda8f73dd14077b15b3f4a87457f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::GLTexture::unbind</definition>
        <argsstring>()</argsstring>
        <name>unbind</name>
        <qualifiedname>KWin::GLTexture::unbind</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="89" column="10" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="262" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1ae171f72388c70d1e30af3da712def893" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::GLTexture::render</definition>
        <argsstring>(const QSizeF &amp;size)</argsstring>
        <name>render</name>
        <qualifiedname>KWin::GLTexture::render</qualifiedname>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="90" column="10" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="267" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1a787e7f2d161a88b97e0d998bbcf9fd5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::GLTexture::render</definition>
        <argsstring>(const QRegion &amp;region, const QSizeF &amp;size, bool hardwareClipping=false)</argsstring>
        <name>render</name>
        <qualifiedname>KWin::GLTexture::render</qualifiedname>
        <param>
          <type>const QRegion &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hardwareClipping</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="91" column="10" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="272" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1aa430a60e300f2fadeca388f6081c491f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::GLTexture::render</definition>
        <argsstring>(const QRectF &amp;source, const QRegion &amp;region, const QSizeF &amp;targetSize, bool hardwareClipping=false)</argsstring>
        <name>render</name>
        <qualifiedname>KWin::GLTexture::render</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const QRegion &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>targetSize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hardwareClipping</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="92" column="10" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="278" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1a360a391fa414aca738ddd07dee9c4cbd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GLuint</type>
        <definition>GLuint KWin::GLTexture::texture</definition>
        <argsstring>() const</argsstring>
        <name>texture</name>
        <qualifiedname>KWin::GLTexture::texture</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="94" column="12" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="336" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1ae095181b76e95834bfba13b60cdcb1a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GLenum</type>
        <definition>GLenum KWin::GLTexture::target</definition>
        <argsstring>() const</argsstring>
        <name>target</name>
        <qualifiedname>KWin::GLTexture::target</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="95" column="12" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="341" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1a1e49874ce269e7be549d24be64fdc51c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GLenum</type>
        <definition>GLenum KWin::GLTexture::filter</definition>
        <argsstring>() const</argsstring>
        <name>filter</name>
        <qualifiedname>KWin::GLTexture::filter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="96" column="12" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="346" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1a8c7cd33c9ac0c984b6aa50c7a8f258ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GLenum</type>
        <definition>GLenum KWin::GLTexture::internalFormat</definition>
        <argsstring>() const</argsstring>
        <name>internalFormat</name>
        <qualifiedname>KWin::GLTexture::internalFormat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="97" column="12" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="351" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1a0c9c3d518e8a66594937e820d31f5cd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QImage</type>
        <definition>QImage KWin::GLTexture::toImage</definition>
        <argsstring>()</argsstring>
        <name>toImage</name>
        <qualifiedname>KWin::GLTexture::toImage</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="99" column="12" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="448" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1a59759b0cac258d426a5583b6ae01e11b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::GLTexture::setFilter</definition>
        <argsstring>(GLenum filter)</argsstring>
        <name>setFilter</name>
        <qualifiedname>KWin::GLTexture::setFilter</qualifiedname>
        <param>
          <type>GLenum</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="101" column="10" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="356" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1aec13a982bbfa6c29e0502eb368f643bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::GLTexture::setWrapMode</definition>
        <argsstring>(GLenum mode)</argsstring>
        <name>setWrapMode</name>
        <qualifiedname>KWin::GLTexture::setWrapMode</qualifiedname>
        <param>
          <type>GLenum</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="102" column="10" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="364" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1a40fec104ab8844fcccf19be86ec74986" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::GLTexture::generateMipmaps</definition>
        <argsstring>()</argsstring>
        <name>generateMipmaps</name>
        <qualifiedname>KWin::GLTexture::generateMipmaps</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="104" column="10" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="255" bodyend="260"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1af0cdc1bf0a2c14c934caa8779e8ef96c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::GLTexture::supportsSwizzle</definition>
        <argsstring>()</argsstring>
        <name>supportsSwizzle</name>
        <qualifiedname>KWin::GLTexture::supportsSwizzle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if texture swizzle is supported, and false otherwise</para>
<para>Texture swizzle requires OpenGL 3.3, GL_ARB_texture_swizzle, or OpenGL ES 3.0.</para>
<para><simplesect kind="since"><para>5.2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="113" column="17" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="438" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1a396def695ca56d81cf47fecc0dc2d74a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::GLTexture::supportsFormatRG</definition>
        <argsstring>()</argsstring>
        <name>supportsFormatRG</name>
        <qualifiedname>KWin::GLTexture::supportsFormatRG</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if texture formats R* are supported, and <computeroutput>false</computeroutput> otherwise.</para>
<para>This requires OpenGL 3.0, GL_ARB_texture_rg or OpenGL ES 3.0 or GL_EXT_texture_rg.</para>
<para><simplesect kind="since"><para>5.2.1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="122" column="17" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="443" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1a832006557690b1b0e0b605f1553742aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_g_l_texture" kindref="compound">GLTexture</ref> &gt;</type>
        <definition>std::unique_ptr&lt; GLTexture &gt; KWin::GLTexture::createNonOwningWrapper</definition>
        <argsstring>(GLuint textureId, GLenum internalFormat, const QSize &amp;size)</argsstring>
        <name>createNonOwningWrapper</name>
        <qualifiedname>KWin::GLTexture::createNonOwningWrapper</qualifiedname>
        <param>
          <type>GLuint</type>
          <declname>textureId</declname>
        </param>
        <param>
          <type>GLenum</type>
          <declname>internalFormat</declname>
        </param>
        <param>
          <type>const QSize &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="124" column="28" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="474" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1a22b5bb33ada7c4b53f73c57f5405289f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_g_l_texture" kindref="compound">GLTexture</ref> &gt;</type>
        <definition>std::unique_ptr&lt; GLTexture &gt; KWin::GLTexture::allocate</definition>
        <argsstring>(GLenum internalFormat, const QSize &amp;size, int levels=1)</argsstring>
        <name>allocate</name>
        <qualifiedname>KWin::GLTexture::allocate</qualifiedname>
        <param>
          <type>GLenum</type>
          <declname>internalFormat</declname>
        </param>
        <param>
          <type>const QSize &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>levels</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="125" column="28" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="479" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1abfb1321ce70899df263d8c8db90a2d59" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_g_l_texture" kindref="compound">GLTexture</ref> &gt;</type>
        <definition>std::unique_ptr&lt; GLTexture &gt; KWin::GLTexture::upload</definition>
        <argsstring>(const QImage &amp;image)</argsstring>
        <name>upload</name>
        <qualifiedname>KWin::GLTexture::upload</qualifiedname>
        <param>
          <type>const QImage &amp;</type>
          <declname>image</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="126" column="28" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="513" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1af2232b9dada7294a45a7a9e2784068d6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_g_l_texture" kindref="compound">GLTexture</ref> &gt;</type>
        <definition>std::unique_ptr&lt; GLTexture &gt; KWin::GLTexture::upload</definition>
        <argsstring>(const QPixmap &amp;pixmap)</argsstring>
        <name>upload</name>
        <qualifiedname>KWin::GLTexture::upload</qualifiedname>
        <param>
          <type>const QPixmap &amp;</type>
          <declname>pixmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="127" column="28" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="581" bodyend="584"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_k_win_1_1_g_l_texture_1ac820e0fd92ee134c1d46ce061b5b6e4f" prot="protected" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::GLTexture::GLTexture</definition>
        <argsstring>(GLenum target, GLuint textureId, GLenum internalFormat, const QSize &amp;size, int levels, bool owning, OutputTransform transform)</argsstring>
        <name>GLTexture</name>
        <qualifiedname>KWin::GLTexture::GLTexture</qualifiedname>
        <param>
          <type>GLenum</type>
          <declname>target</declname>
        </param>
        <param>
          <type>GLuint</type>
          <declname>textureId</declname>
        </param>
        <param>
          <type>GLenum</type>
          <declname>internalFormat</declname>
        </param>
        <param>
          <type>const QSize &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>levels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>owning</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_output_transform" kindref="compound">OutputTransform</ref></type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="130" column="14" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="76" bodyend="91"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>KWin::EGLImageTexture</label>
        <link refid="class_k_win_1_1_e_g_l_image_texture"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::GLTexture</label>
        <link refid="class_k_win_1_1_g_l_texture"/>
      </node>
    </inheritancegraph>
    <location file="kwin/src/opengl/gltexture.h" line="39" column="1" bodyfile="kwin/src/opengl/gltexture.h" bodystart="40" bodyend="133"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_g_l_texture_1a22b5bb33ada7c4b53f73c57f5405289f" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>allocate</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1af4d227b648ea821f3f2ad01a7a166daa" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>bind</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1a2b8c1ac9232f0356ac604a963350e91a" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>contentTransform</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1aa3d73c1663aaaa8611fcef846fc78742" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>create</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1a832006557690b1b0e0b605f1553742aa" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>createNonOwningWrapper</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1a1060852093ece0363e9abcf49da3c8af" prot="protected" virt="non-virtual"><scope>KWin::GLTexture</scope><name>d</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1a1e49874ce269e7be549d24be64fdc51c" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>filter</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1a40fec104ab8844fcccf19be86ec74986" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>generateMipmaps</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1ad2e7540fd78f144ccfd5fb010bff9a36" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>GLTexture</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1ac820e0fd92ee134c1d46ce061b5b6e4f" prot="protected" virt="non-virtual"><scope>KWin::GLTexture</scope><name>GLTexture</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1aad07b441c0726ead8e91b73a750c0289" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>height</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1a8c7cd33c9ac0c984b6aa50c7a8f258ea" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>internalFormat</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1a4732e9350196f128470ca6a56dd89de9" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>isNull</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1ade184fbdb00efd4e35c42a4b975a100a" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>matrix</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1ae171f72388c70d1e30af3da712def893" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>render</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1a787e7f2d161a88b97e0d998bbcf9fd5a" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>render</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1aa430a60e300f2fadeca388f6081c491f" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>render</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1a2c981651fa4c6b0779bf2efd8a30bebf" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>setContentTransform</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1a59759b0cac258d426a5583b6ae01e11b" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>setFilter</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1aae1de5a574570f21feb3438a05011014" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>setSize</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1aba9725197cdfa27ed5db7a16463d43f9" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>setSwizzle</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1aec13a982bbfa6c29e0502eb368f643bb" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>setWrapMode</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1a1dec6b68997f434cadbaaed078875ece" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>size</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1a396def695ca56d81cf47fecc0dc2d74a" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>supportsFormatRG</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1af0cdc1bf0a2c14c934caa8779e8ef96c" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>supportsSwizzle</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1ae095181b76e95834bfba13b60cdcb1a2" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>target</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1a360a391fa414aca738ddd07dee9c4cbd" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>texture</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1a0c9c3d518e8a66594937e820d31f5cd2" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>toImage</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1a411bfda8f73dd14077b15b3f4a87457f" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>unbind</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1a8089683b63e92df439d27a1e3ada4404" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>update</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1abfb1321ce70899df263d8c8db90a2d59" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>upload</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1af2232b9dada7294a45a7a9e2784068d6" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>upload</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1a1ca4334af1a415346fca662ffba25da1" prot="public" virt="non-virtual"><scope>KWin::GLTexture</scope><name>width</name></member>
      <member refid="class_k_win_1_1_g_l_texture_1a467f2f1ee778d3c04dbe7c3eecf2737e" prot="public" virt="virtual"><scope>KWin::GLTexture</scope><name>~GLTexture</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
