<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_edid" kind="class" language="C++" prot="public">
    <compoundname>KWin::Edid</compoundname>
    <includes refid="edid_8h" local="no">edid.h</includes>
    <innerclass refid="struct_k_win_1_1_edid_1_1_h_d_r_metadata" prot="private">KWin::Edid::HDRMetadata</innerclass>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_edid_1ab8d2c754e9c15426bd273b10679ba528" prot="private" static="no" mutable="no">
        <type>QSize</type>
        <definition>QSize KWin::Edid::m_physicalSize</definition>
        <argsstring></argsstring>
        <name>m_physicalSize</name>
        <qualifiedname>KWin::Edid::m_physicalSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="110" column="11" bodyfile="kwin/src/utils/edid.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_edid_1a5546b3f833a3c5a232585d1911fa7c09" prot="private" static="no" mutable="no">
        <type>QByteArray</type>
        <definition>QByteArray KWin::Edid::m_vendor</definition>
        <argsstring></argsstring>
        <name>m_vendor</name>
        <qualifiedname>KWin::Edid::m_vendor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="111" column="16" bodyfile="kwin/src/utils/edid.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_edid_1a6bb6897aa55c7ec36065bb8b697f4393" prot="private" static="no" mutable="no">
        <type>QByteArray</type>
        <definition>QByteArray KWin::Edid::m_eisaId</definition>
        <argsstring></argsstring>
        <name>m_eisaId</name>
        <qualifiedname>KWin::Edid::m_eisaId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="112" column="16" bodyfile="kwin/src/utils/edid.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_edid_1aa9713e47791a317155cfa598bc1a76ec" prot="private" static="no" mutable="no">
        <type>QByteArray</type>
        <definition>QByteArray KWin::Edid::m_monitorName</definition>
        <argsstring></argsstring>
        <name>m_monitorName</name>
        <qualifiedname>KWin::Edid::m_monitorName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="113" column="16" bodyfile="kwin/src/utils/edid.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_edid_1a579fcdaedeb0e66cc4c1fd941a20db74" prot="private" static="no" mutable="no">
        <type>QByteArray</type>
        <definition>QByteArray KWin::Edid::m_serialNumber</definition>
        <argsstring></argsstring>
        <name>m_serialNumber</name>
        <qualifiedname>KWin::Edid::m_serialNumber</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="114" column="16" bodyfile="kwin/src/utils/edid.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_edid_1ae680040b1889d5ead5bfb127e4b852be" prot="private" static="no" mutable="no">
        <type>QString</type>
        <definition>QString KWin::Edid::m_hash</definition>
        <argsstring></argsstring>
        <name>m_hash</name>
        <qualifiedname>KWin::Edid::m_hash</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="115" column="13" bodyfile="kwin/src/utils/edid.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_edid_1a930fe3504a232a19b658c17d61c6f26d" prot="private" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref> &gt;</type>
        <definition>std::optional&lt;Colorimetry&gt; KWin::Edid::m_colorimetry</definition>
        <argsstring></argsstring>
        <name>m_colorimetry</name>
        <qualifiedname>KWin::Edid::m_colorimetry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="116" column="19" bodyfile="kwin/src/utils/edid.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_edid_1a60f7c615bfd6606635c23f921518fa63" prot="private" static="no" mutable="no">
        <type>std::optional&lt; HDRMetadata &gt;</type>
        <definition>std::optional&lt;HDRMetadata&gt; KWin::Edid::m_hdrMetadata</definition>
        <argsstring></argsstring>
        <name>m_hdrMetadata</name>
        <qualifiedname>KWin::Edid::m_hdrMetadata</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="125" column="19" bodyfile="kwin/src/utils/edid.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_edid_1a49bc772e4838dec5a9d357f4b6cda125" prot="private" static="no" mutable="no">
        <type>std::optional&lt; QSize &gt;</type>
        <definition>std::optional&lt;QSize&gt; KWin::Edid::m_nativeResolution</definition>
        <argsstring></argsstring>
        <name>m_nativeResolution</name>
        <qualifiedname>KWin::Edid::m_nativeResolution</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="126" column="19" bodyfile="kwin/src/utils/edid.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_edid_1ad6c3928dc97786206162961561a49f2f" prot="private" static="no" mutable="no">
        <type>QByteArray</type>
        <definition>QByteArray KWin::Edid::m_identifier</definition>
        <argsstring></argsstring>
        <name>m_identifier</name>
        <qualifiedname>KWin::Edid::m_identifier</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="128" column="16" bodyfile="kwin/src/utils/edid.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_edid_1abd33ef8eac635de792cb6c11673ab069" prot="private" static="no" mutable="no">
        <type>QByteArray</type>
        <definition>QByteArray KWin::Edid::m_raw</definition>
        <argsstring></argsstring>
        <name>m_raw</name>
        <qualifiedname>KWin::Edid::m_raw</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="130" column="16" bodyfile="kwin/src/utils/edid.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_edid_1afec6aef46ea3446839554bfd858a5761" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Edid::m_isValid</definition>
        <argsstring></argsstring>
        <name>m_isValid</name>
        <qualifiedname>KWin::Edid::m_isValid</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="131" column="10" bodyfile="kwin/src/utils/edid.h" bodystart="131" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_edid_1aa91af8f63b6190e836e5d8499ff027cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::Edid::Edid</definition>
        <argsstring>()</argsstring>
        <name>Edid</name>
        <qualifiedname>KWin::Edid::Edid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="31" column="5" bodyfile="kwin/src/utils/edid.cpp" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_edid_1a03aff2f32486b10422b7c4d92d2976d2" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::Edid::Edid</definition>
        <argsstring>(const void *data, uint32_t size)</argsstring>
        <name>Edid</name>
        <qualifiedname>KWin::Edid::Edid</qualifiedname>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="32" column="14" bodyfile="kwin/src/utils/edid.cpp" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_edid_1ab3c4591e4af359f8bac394d8977c806b" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::Edid::Edid</definition>
        <argsstring>(QByteArrayView data)</argsstring>
        <name>Edid</name>
        <qualifiedname>KWin::Edid::Edid</qualifiedname>
        <param>
          <type>QByteArrayView</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="33" column="14" bodyfile="kwin/src/utils/edid.cpp" bodystart="145" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_edid_1af9f6650f3fd121da226ea68719bc4643" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::Edid::Edid</definition>
        <argsstring>(QByteArrayView data, std::optional&lt; QByteArrayView &gt; identifierOverride)</argsstring>
        <name>Edid</name>
        <qualifiedname>KWin::Edid::Edid</qualifiedname>
        <param>
          <type>QByteArrayView</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::optional&lt; QByteArrayView &gt;</type>
          <declname>identifierOverride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>for testing purpose, optionally overrides the identifier with the specified value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="37" column="14" bodyfile="kwin/src/utils/edid.cpp" bodystart="135" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_edid_1af4c0508f9c56a2f771719c9e1c6a6a37" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Edid::isValid</definition>
        <argsstring>() const</argsstring>
        <name>isValid</name>
        <qualifiedname>KWin::Edid::isValid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this instance of EDID is valid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="42" column="10" bodyfile="kwin/src/utils/edid.cpp" bodystart="273" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_edid_1a3047d39c80d01a8235bd8d03023c3ed0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QSize</type>
        <definition>QSize KWin::Edid::physicalSize</definition>
        <argsstring>() const</argsstring>
        <name>physicalSize</name>
        <qualifiedname>KWin::Edid::physicalSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns physical dimensions of the monitor, in millimeters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="47" column="11" bodyfile="kwin/src/utils/edid.cpp" bodystart="278" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_edid_1a25efd5a6a6ea5e51efa997445ea3881e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArray</type>
        <definition>QByteArray KWin::Edid::eisaId</definition>
        <argsstring>() const</argsstring>
        <name>eisaId</name>
        <qualifiedname>KWin::Edid::eisaId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns EISA ID of the manufacturer of the monitor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="52" column="16" bodyfile="kwin/src/utils/edid.cpp" bodystart="283" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_edid_1adb0a5481f9cb3f1af468b74429f387f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArray</type>
        <definition>QByteArray KWin::Edid::monitorName</definition>
        <argsstring>() const</argsstring>
        <name>monitorName</name>
        <qualifiedname>KWin::Edid::monitorName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the product name of the monitor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="57" column="16" bodyfile="kwin/src/utils/edid.cpp" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_edid_1a7b70fc96ea54da9f143447cc8bba0aed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArray</type>
        <definition>QByteArray KWin::Edid::serialNumber</definition>
        <argsstring>() const</argsstring>
        <name>serialNumber</name>
        <qualifiedname>KWin::Edid::serialNumber</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the serial number of the monitor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="62" column="16" bodyfile="kwin/src/utils/edid.cpp" bodystart="293" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_edid_1af6283b82da5c08c55e620baf626b2fb8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArray</type>
        <definition>QByteArray KWin::Edid::vendor</definition>
        <argsstring>() const</argsstring>
        <name>vendor</name>
        <qualifiedname>KWin::Edid::vendor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the name of the vendor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="67" column="16" bodyfile="kwin/src/utils/edid.cpp" bodystart="298" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_edid_1a7a8f08d321ef15dd28da75b728399e28" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArray</type>
        <definition>QByteArray KWin::Edid::raw</definition>
        <argsstring>() const</argsstring>
        <name>raw</name>
        <qualifiedname>KWin::Edid::raw</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the raw edid </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="72" column="16" bodyfile="kwin/src/utils/edid.cpp" bodystart="303" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_edid_1a018559cd6ddfa5eada96d24f166cdb50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::Edid::manufacturerString</definition>
        <argsstring>() const</argsstring>
        <name>manufacturerString</name>
        <qualifiedname>KWin::Edid::manufacturerString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the vendor if included, the EISA ID if not </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="77" column="13" bodyfile="kwin/src/utils/edid.cpp" bodystart="308" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_edid_1af1c375043cb9c52049b56e70c42774c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::Edid::nameString</definition>
        <argsstring>() const</argsstring>
        <name>nameString</name>
        <qualifiedname>KWin::Edid::nameString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns a string representing the monitor name Can be a serial number or &quot;unknown&quot; if the name is empty </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="83" column="13" bodyfile="kwin/src/utils/edid.cpp" bodystart="319" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_edid_1a9edaf9cdb9e1ee953310170b1e092fd6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::Edid::hash</definition>
        <argsstring>() const</argsstring>
        <name>hash</name>
        <qualifiedname>KWin::Edid::hash</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="85" column="13" bodyfile="kwin/src/utils/edid.cpp" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_edid_1a8559d6adbf3edb709508411e4a3e1a05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref> &gt;</type>
        <definition>std::optional&lt; Colorimetry &gt; KWin::Edid::colorimetry</definition>
        <argsstring>() const</argsstring>
        <name>colorimetry</name>
        <qualifiedname>KWin::Edid::colorimetry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="87" column="19" bodyfile="kwin/src/utils/edid.cpp" bodystart="335" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_edid_1a198a877ee001b42d96ff962e98b73a58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double KWin::Edid::desiredMinLuminance</definition>
        <argsstring>() const</argsstring>
        <name>desiredMinLuminance</name>
        <qualifiedname>KWin::Edid::desiredMinLuminance</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="89" column="12" bodyfile="kwin/src/utils/edid.cpp" bodystart="340" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_edid_1a5f8866c491ef81e92de663953720a441" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; double &gt;</type>
        <definition>std::optional&lt; double &gt; KWin::Edid::desiredMaxFrameAverageLuminance</definition>
        <argsstring>() const</argsstring>
        <name>desiredMaxFrameAverageLuminance</name>
        <qualifiedname>KWin::Edid::desiredMaxFrameAverageLuminance</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="90" column="19" bodyfile="kwin/src/utils/edid.cpp" bodystart="345" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_edid_1ad74cab42ff528d8b2bef4ae83afc30d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; double &gt;</type>
        <definition>std::optional&lt; double &gt; KWin::Edid::desiredMaxLuminance</definition>
        <argsstring>() const</argsstring>
        <name>desiredMaxLuminance</name>
        <qualifiedname>KWin::Edid::desiredMaxLuminance</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="91" column="19" bodyfile="kwin/src/utils/edid.cpp" bodystart="350" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_edid_1aaa57a17a12f2044fa31523f3b2676cfb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Edid::supportsPQ</definition>
        <argsstring>() const</argsstring>
        <name>supportsPQ</name>
        <qualifiedname>KWin::Edid::supportsPQ</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="92" column="10" bodyfile="kwin/src/utils/edid.cpp" bodystart="355" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_edid_1a980e6ca28d3e30891e1dfe89de7dd467" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Edid::supportsBT2020</definition>
        <argsstring>() const</argsstring>
        <name>supportsBT2020</name>
        <qualifiedname>KWin::Edid::supportsBT2020</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="93" column="10" bodyfile="kwin/src/utils/edid.cpp" bodystart="360" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_edid_1abc77479091d011db10051cc94acd2088" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArray</type>
        <definition>QByteArray KWin::Edid::identifier</definition>
        <argsstring>() const</argsstring>
        <name>identifier</name>
        <qualifiedname>KWin::Edid::identifier</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a string that is intended to identify the monitor uniquely. Note that multiple monitors can have the same EDID, so this is not always actually unique </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="99" column="16" bodyfile="kwin/src/utils/edid.cpp" bodystart="365" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_edid_1a0827c586e4238ea8f7d65dbd6661f10e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; QSize &gt;</type>
        <definition>std::optional&lt; QSize &gt; KWin::Edid::likelyNativeResolution</definition>
        <argsstring>() const</argsstring>
        <name>likelyNativeResolution</name>
        <qualifiedname>KWin::Edid::likelyNativeResolution</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the resolution that&apos;s most likely native. This is unreliable, because<itemizedlist>
<listitem><para>some displays provide the wrong information</para>
</listitem><listitem><para>libdisplay-info doesn&apos;t parse all the DisplayID things yet so it should only be used as a fallback, when the kernel doesn&apos;t provide a preferred mode </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.h" line="107" column="19" bodyfile="kwin/src/utils/edid.cpp" bodystart="268" bodyend="271"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Helper class that can be used for parsing EDID blobs.</para>
<para><ulink url="http://read.pudn.com/downloads110/ebook/456020/E-EDID%20Standard.pdf">http://read.pudn.com/downloads110/ebook/456020/E-EDID%20Standard.pdf</ulink> </para>
    </detaileddescription>
    <location file="kwin/src/utils/edid.h" line="28" column="1" bodyfile="kwin/src/utils/edid.h" bodystart="29" bodyend="132"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_edid_1a8559d6adbf3edb709508411e4a3e1a05" prot="public" virt="non-virtual"><scope>KWin::Edid</scope><name>colorimetry</name></member>
      <member refid="class_k_win_1_1_edid_1a5f8866c491ef81e92de663953720a441" prot="public" virt="non-virtual"><scope>KWin::Edid</scope><name>desiredMaxFrameAverageLuminance</name></member>
      <member refid="class_k_win_1_1_edid_1ad74cab42ff528d8b2bef4ae83afc30d4" prot="public" virt="non-virtual"><scope>KWin::Edid</scope><name>desiredMaxLuminance</name></member>
      <member refid="class_k_win_1_1_edid_1a198a877ee001b42d96ff962e98b73a58" prot="public" virt="non-virtual"><scope>KWin::Edid</scope><name>desiredMinLuminance</name></member>
      <member refid="class_k_win_1_1_edid_1aa91af8f63b6190e836e5d8499ff027cb" prot="public" virt="non-virtual"><scope>KWin::Edid</scope><name>Edid</name></member>
      <member refid="class_k_win_1_1_edid_1a03aff2f32486b10422b7c4d92d2976d2" prot="public" virt="non-virtual"><scope>KWin::Edid</scope><name>Edid</name></member>
      <member refid="class_k_win_1_1_edid_1ab3c4591e4af359f8bac394d8977c806b" prot="public" virt="non-virtual"><scope>KWin::Edid</scope><name>Edid</name></member>
      <member refid="class_k_win_1_1_edid_1af9f6650f3fd121da226ea68719bc4643" prot="public" virt="non-virtual"><scope>KWin::Edid</scope><name>Edid</name></member>
      <member refid="class_k_win_1_1_edid_1a25efd5a6a6ea5e51efa997445ea3881e" prot="public" virt="non-virtual"><scope>KWin::Edid</scope><name>eisaId</name></member>
      <member refid="class_k_win_1_1_edid_1a9edaf9cdb9e1ee953310170b1e092fd6" prot="public" virt="non-virtual"><scope>KWin::Edid</scope><name>hash</name></member>
      <member refid="class_k_win_1_1_edid_1abc77479091d011db10051cc94acd2088" prot="public" virt="non-virtual"><scope>KWin::Edid</scope><name>identifier</name></member>
      <member refid="class_k_win_1_1_edid_1af4c0508f9c56a2f771719c9e1c6a6a37" prot="public" virt="non-virtual"><scope>KWin::Edid</scope><name>isValid</name></member>
      <member refid="class_k_win_1_1_edid_1a0827c586e4238ea8f7d65dbd6661f10e" prot="public" virt="non-virtual"><scope>KWin::Edid</scope><name>likelyNativeResolution</name></member>
      <member refid="class_k_win_1_1_edid_1a930fe3504a232a19b658c17d61c6f26d" prot="private" virt="non-virtual"><scope>KWin::Edid</scope><name>m_colorimetry</name></member>
      <member refid="class_k_win_1_1_edid_1a6bb6897aa55c7ec36065bb8b697f4393" prot="private" virt="non-virtual"><scope>KWin::Edid</scope><name>m_eisaId</name></member>
      <member refid="class_k_win_1_1_edid_1ae680040b1889d5ead5bfb127e4b852be" prot="private" virt="non-virtual"><scope>KWin::Edid</scope><name>m_hash</name></member>
      <member refid="class_k_win_1_1_edid_1a60f7c615bfd6606635c23f921518fa63" prot="private" virt="non-virtual"><scope>KWin::Edid</scope><name>m_hdrMetadata</name></member>
      <member refid="class_k_win_1_1_edid_1ad6c3928dc97786206162961561a49f2f" prot="private" virt="non-virtual"><scope>KWin::Edid</scope><name>m_identifier</name></member>
      <member refid="class_k_win_1_1_edid_1afec6aef46ea3446839554bfd858a5761" prot="private" virt="non-virtual"><scope>KWin::Edid</scope><name>m_isValid</name></member>
      <member refid="class_k_win_1_1_edid_1aa9713e47791a317155cfa598bc1a76ec" prot="private" virt="non-virtual"><scope>KWin::Edid</scope><name>m_monitorName</name></member>
      <member refid="class_k_win_1_1_edid_1a49bc772e4838dec5a9d357f4b6cda125" prot="private" virt="non-virtual"><scope>KWin::Edid</scope><name>m_nativeResolution</name></member>
      <member refid="class_k_win_1_1_edid_1ab8d2c754e9c15426bd273b10679ba528" prot="private" virt="non-virtual"><scope>KWin::Edid</scope><name>m_physicalSize</name></member>
      <member refid="class_k_win_1_1_edid_1abd33ef8eac635de792cb6c11673ab069" prot="private" virt="non-virtual"><scope>KWin::Edid</scope><name>m_raw</name></member>
      <member refid="class_k_win_1_1_edid_1a579fcdaedeb0e66cc4c1fd941a20db74" prot="private" virt="non-virtual"><scope>KWin::Edid</scope><name>m_serialNumber</name></member>
      <member refid="class_k_win_1_1_edid_1a5546b3f833a3c5a232585d1911fa7c09" prot="private" virt="non-virtual"><scope>KWin::Edid</scope><name>m_vendor</name></member>
      <member refid="class_k_win_1_1_edid_1a018559cd6ddfa5eada96d24f166cdb50" prot="public" virt="non-virtual"><scope>KWin::Edid</scope><name>manufacturerString</name></member>
      <member refid="class_k_win_1_1_edid_1adb0a5481f9cb3f1af468b74429f387f8" prot="public" virt="non-virtual"><scope>KWin::Edid</scope><name>monitorName</name></member>
      <member refid="class_k_win_1_1_edid_1af1c375043cb9c52049b56e70c42774c1" prot="public" virt="non-virtual"><scope>KWin::Edid</scope><name>nameString</name></member>
      <member refid="class_k_win_1_1_edid_1a3047d39c80d01a8235bd8d03023c3ed0" prot="public" virt="non-virtual"><scope>KWin::Edid</scope><name>physicalSize</name></member>
      <member refid="class_k_win_1_1_edid_1a7a8f08d321ef15dd28da75b728399e28" prot="public" virt="non-virtual"><scope>KWin::Edid</scope><name>raw</name></member>
      <member refid="class_k_win_1_1_edid_1a7b70fc96ea54da9f143447cc8bba0aed" prot="public" virt="non-virtual"><scope>KWin::Edid</scope><name>serialNumber</name></member>
      <member refid="class_k_win_1_1_edid_1a980e6ca28d3e30891e1dfe89de7dd467" prot="public" virt="non-virtual"><scope>KWin::Edid</scope><name>supportsBT2020</name></member>
      <member refid="class_k_win_1_1_edid_1aaa57a17a12f2044fa31523f3b2676cfb" prot="public" virt="non-virtual"><scope>KWin::Edid</scope><name>supportsPQ</name></member>
      <member refid="class_k_win_1_1_edid_1af6283b82da5c08c55e620baf626b2fb8" prot="public" virt="non-virtual"><scope>KWin::Edid</scope><name>vendor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
