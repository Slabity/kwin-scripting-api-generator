<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="namespace_k_win" kind="namespace" language="C++">
    <compoundname>KWin</compoundname>
    <innerclass refid="class_k_win_1_1_abstract_data_source" prot="public">KWin::AbstractDataSource</innerclass>
    <innerclass refid="class_k_win_1_1_abstract_drop_handler" prot="public">KWin::AbstractDropHandler</innerclass>
    <innerclass refid="class_k_win_1_1_abstract_effect_loader" prot="public">KWin::AbstractEffectLoader</innerclass>
    <innerclass refid="class_k_win_1_1_abstract_effect_load_queue" prot="public">KWin::AbstractEffectLoadQueue</innerclass>
    <innerclass refid="class_k_win_1_1_abstract_egl_backend" prot="public">KWin::AbstractEglBackend</innerclass>
    <innerclass refid="class_k_win_1_1_abstract_open_g_l_context_attribute_builder" prot="public">KWin::AbstractOpenGLContextAttributeBuilder</innerclass>
    <innerclass refid="class_k_win_1_1_abstract_script" prot="public">KWin::AbstractScript</innerclass>
    <innerclass refid="class_k_win_1_1_activities" prot="public">KWin::Activities</innerclass>
    <innerclass refid="class_k_win_1_1_alpha_modifier_manager_v1" prot="public">KWin::AlphaModifierManagerV1</innerclass>
    <innerclass refid="class_k_win_1_1_alpha_modifier_surface_v1" prot="public">KWin::AlphaModifierSurfaceV1</innerclass>
    <innerclass refid="class_k_win_1_1_ani_data" prot="public">KWin::AniData</innerclass>
    <innerclass refid="class_k_win_1_1_animation_effect" prot="public">KWin::AnimationEffect</innerclass>
    <innerclass refid="class_k_win_1_1_animation_effect_private" prot="public">KWin::AnimationEffectPrivate</innerclass>
    <innerclass refid="struct_k_win_1_1_animation_settings" prot="public">KWin::AnimationSettings</innerclass>
    <innerclass refid="class_k_win_1_1_animations_model" prot="public">KWin::AnimationsModel</innerclass>
    <innerclass refid="class_k_win_1_1_application" prot="public">KWin::Application</innerclass>
    <innerclass refid="class_k_win_1_1_application_menu" prot="public">KWin::ApplicationMenu</innerclass>
    <innerclass refid="class_k_win_1_1_application_wayland" prot="public">KWin::ApplicationWayland</innerclass>
    <innerclass refid="class_k_win_1_1_app_menu_interface" prot="public">KWin::AppMenuInterface</innerclass>
    <innerclass refid="class_k_win_1_1_app_menu_interface_private" prot="public">KWin::AppMenuInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_app_menu_manager_interface" prot="public">KWin::AppMenuManagerInterface</innerclass>
    <innerclass refid="class_k_win_1_1_app_menu_manager_interface_private" prot="public">KWin::AppMenuManagerInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_atoms" prot="public">KWin::Atoms</innerclass>
    <innerclass refid="class_k_win_1_1_auto_hide_screen_edge_v1_interface" prot="public">KWin::AutoHideScreenEdgeV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_auto_hide_screen_edge_v1_interface_private" prot="public">KWin::AutoHideScreenEdgeV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_barrier_spy" prot="public">KWin::BarrierSpy</innerclass>
    <innerclass refid="class_k_win_1_1_blend_changes" prot="public">KWin::BlendChanges</innerclass>
    <innerclass refid="class_k_win_1_1_blur_effect" prot="public">KWin::BlurEffect</innerclass>
    <innerclass refid="class_k_win_1_1_blur_effect_config" prot="public">KWin::BlurEffectConfig</innerclass>
    <innerclass refid="struct_k_win_1_1_blur_effect_data" prot="public">KWin::BlurEffectData</innerclass>
    <innerclass refid="class_k_win_1_1_blur_interface" prot="public">KWin::BlurInterface</innerclass>
    <innerclass refid="class_k_win_1_1_blur_interface_private" prot="public">KWin::BlurInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_blur_manager_interface" prot="public">KWin::BlurManagerInterface</innerclass>
    <innerclass refid="class_k_win_1_1_blur_manager_interface_private" prot="public">KWin::BlurManagerInterfacePrivate</innerclass>
    <innerclass refid="struct_k_win_1_1_blur_render_data" prot="public">KWin::BlurRenderData</innerclass>
    <innerclass refid="class_k_win_1_1_brightness_device" prot="public">KWin::BrightnessDevice</innerclass>
    <innerclass refid="struct_k_win_1_1_buffer_fence" prot="public">KWin::BufferFence</innerclass>
    <innerclass refid="struct_k_win_1_1_c_deleter" prot="public">KWin::CDeleter</innerclass>
    <innerclass refid="class_k_win_1_1_client_connection" prot="public">KWin::ClientConnection</innerclass>
    <innerclass refid="class_k_win_1_1_client_connection_private" prot="public">KWin::ClientConnectionPrivate</innerclass>
    <innerclass refid="class_k_win_1_1_client_machine" prot="public">KWin::ClientMachine</innerclass>
    <innerclass refid="class_k_win_1_1_clock_skew_notifier" prot="public">KWin::ClockSkewNotifier</innerclass>
    <innerclass refid="class_k_win_1_1_clock_skew_notifier_engine" prot="public">KWin::ClockSkewNotifierEngine</innerclass>
    <innerclass refid="class_k_win_1_1_color_blindness_correction_effect" prot="public">KWin::ColorBlindnessCorrectionEffect</innerclass>
    <innerclass refid="class_k_win_1_1_color_description" prot="public">KWin::ColorDescription</innerclass>
    <innerclass refid="class_k_win_1_1_color_device" prot="public">KWin::ColorDevice</innerclass>
    <innerclass refid="class_k_win_1_1_color_device_private" prot="public">KWin::ColorDevicePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_color_feedback_surface_v1" prot="public">KWin::ColorFeedbackSurfaceV1</innerclass>
    <innerclass refid="class_k_win_1_1_colorimetry" prot="public">KWin::Colorimetry</innerclass>
    <innerclass refid="class_k_win_1_1_color_l_u_t3_d" prot="public">KWin::ColorLUT3D</innerclass>
    <innerclass refid="class_k_win_1_1_color_management_output_v1" prot="public">KWin::ColorManagementOutputV1</innerclass>
    <innerclass refid="class_k_win_1_1_color_manager" prot="public">KWin::ColorManager</innerclass>
    <innerclass refid="class_k_win_1_1_color_manager_private" prot="public">KWin::ColorManagerPrivate</innerclass>
    <innerclass refid="class_k_win_1_1_color_manager_v1" prot="public">KWin::ColorManagerV1</innerclass>
    <innerclass refid="class_k_win_1_1_color_matrix" prot="public">KWin::ColorMatrix</innerclass>
    <innerclass refid="class_k_win_1_1_color_multiplier" prot="public">KWin::ColorMultiplier</innerclass>
    <innerclass refid="class_k_win_1_1_color_op" prot="public">KWin::ColorOp</innerclass>
    <innerclass refid="class_k_win_1_1_color_parametric_creator_v1" prot="public">KWin::ColorParametricCreatorV1</innerclass>
    <innerclass refid="class_k_win_1_1_color_picker_effect" prot="public">KWin::ColorPickerEffect</innerclass>
    <innerclass refid="class_k_win_1_1_color_pipeline" prot="public">KWin::ColorPipeline</innerclass>
    <innerclass refid="class_k_win_1_1_color_pipeline_stage" prot="public">KWin::ColorPipelineStage</innerclass>
    <innerclass refid="class_k_win_1_1_color_surface_v1" prot="public">KWin::ColorSurfaceV1</innerclass>
    <innerclass refid="class_k_win_1_1_color_tonemapper" prot="public">KWin::ColorTonemapper</innerclass>
    <innerclass refid="class_k_win_1_1_color_transfer_function" prot="public">KWin::ColorTransferFunction</innerclass>
    <innerclass refid="class_k_win_1_1_color_transformation" prot="public">KWin::ColorTransformation</innerclass>
    <innerclass refid="class_k_win_1_1_compositor" prot="public">KWin::Compositor</innerclass>
    <innerclass refid="class_k_win_1_1_compositor_d_bus_interface" prot="public">KWin::CompositorDBusInterface</innerclass>
    <innerclass refid="class_k_win_1_1_compositor_interface" prot="public">KWin::CompositorInterface</innerclass>
    <innerclass refid="class_k_win_1_1_compositor_interface_private" prot="public">KWin::CompositorInterfacePrivate</innerclass>
    <innerclass refid="struct_k_win_1_1_confined_pointer_v1_commit" prot="public">KWin::ConfinedPointerV1Commit</innerclass>
    <innerclass refid="class_k_win_1_1_confined_pointer_v1_interface" prot="public">KWin::ConfinedPointerV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_confined_pointer_v1_interface_private" prot="public">KWin::ConfinedPointerV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_console_kit_session" prot="public">KWin::ConsoleKitSession</innerclass>
    <innerclass refid="class_k_win_1_1_content_type_manager_v1_interface" prot="public">KWin::ContentTypeManagerV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_content_type_v1_interface" prot="public">KWin::ContentTypeV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_contrast_effect" prot="public">KWin::ContrastEffect</innerclass>
    <innerclass refid="class_k_win_1_1_contrast_interface" prot="public">KWin::ContrastInterface</innerclass>
    <innerclass refid="class_k_win_1_1_contrast_interface_private" prot="public">KWin::ContrastInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_contrast_manager_interface" prot="public">KWin::ContrastManagerInterface</innerclass>
    <innerclass refid="class_k_win_1_1_contrast_manager_interface_private" prot="public">KWin::ContrastManagerInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_contrast_shader" prot="public">KWin::ContrastShader</innerclass>
    <innerclass refid="class_k_win_1_1_cpu_render_time_query" prot="public">KWin::CpuRenderTimeQuery</innerclass>
    <innerclass refid="class_k_win_1_1_cross_fade_effect" prot="public">KWin::CrossFadeEffect</innerclass>
    <innerclass refid="class_k_win_1_1_cross_fade_effect_private" prot="public">KWin::CrossFadeEffectPrivate</innerclass>
    <innerclass refid="class_k_win_1_1_cross_fade_window_data" prot="public">KWin::CrossFadeWindowData</innerclass>
    <innerclass refid="class_k_win_1_1_cursor" prot="public">KWin::Cursor</innerclass>
    <innerclass refid="class_k_win_1_1_cursor_delegate_open_g_l" prot="public">KWin::CursorDelegateOpenGL</innerclass>
    <innerclass refid="class_k_win_1_1_cursor_delegate_q_painter" prot="public">KWin::CursorDelegateQPainter</innerclass>
    <innerclass refid="class_k_win_1_1_cursor_image" prot="public">KWin::CursorImage</innerclass>
    <innerclass refid="class_k_win_1_1_cursor_item" prot="public">KWin::CursorItem</innerclass>
    <innerclass refid="class_k_win_1_1_cursors" prot="public">KWin::Cursors</innerclass>
    <innerclass refid="class_k_win_1_1_cursor_scene" prot="public">KWin::CursorScene</innerclass>
    <innerclass refid="class_k_win_1_1_cursor_shape" prot="public">KWin::CursorShape</innerclass>
    <innerclass refid="class_k_win_1_1_cursor_shape_device_v1_interface" prot="public">KWin::CursorShapeDeviceV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_cursor_shape_manager_v1_interface" prot="public">KWin::CursorShapeManagerV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_cursor_shape_manager_v1_interface_private" prot="public">KWin::CursorShapeManagerV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_cursor_source" prot="public">KWin::CursorSource</innerclass>
    <innerclass refid="class_k_win_1_1_cursor_sprite" prot="public">KWin::CursorSprite</innerclass>
    <innerclass refid="class_k_win_1_1_cursor_sprite_private" prot="public">KWin::CursorSpritePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_cursor_theme" prot="public">KWin::CursorTheme</innerclass>
    <innerclass refid="class_k_win_1_1_cursor_theme_entry" prot="public">KWin::CursorThemeEntry</innerclass>
    <innerclass refid="class_k_win_1_1_cursor_theme_private" prot="public">KWin::CursorThemePrivate</innerclass>
    <innerclass refid="struct_k_win_1_1_cursor_theme_svg_entry_info" prot="public">KWin::CursorThemeSvgEntryInfo</innerclass>
    <innerclass refid="struct_k_win_1_1_cursor_theme_x_entry_info" prot="public">KWin::CursorThemeXEntryInfo</innerclass>
    <innerclass refid="class_k_win_1_1_custom_tile" prot="public">KWin::CustomTile</innerclass>
    <innerclass refid="class_k_win_1_1_damage_journal" prot="public">KWin::DamageJournal</innerclass>
    <innerclass refid="class_k_win_1_1_data_control_device_manager_v1_interface" prot="public">KWin::DataControlDeviceManagerV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_data_control_device_manager_v1_interface_private" prot="public">KWin::DataControlDeviceManagerV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_data_control_device_v1_interface" prot="public">KWin::DataControlDeviceV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_data_control_device_v1_interface_private" prot="public">KWin::DataControlDeviceV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_data_control_offer_v1_interface" prot="public">KWin::DataControlOfferV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_data_control_offer_v1_interface_private" prot="public">KWin::DataControlOfferV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_data_control_source_v1_interface" prot="public">KWin::DataControlSourceV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_data_control_source_v1_interface_private" prot="public">KWin::DataControlSourceV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_data_device_interface" prot="public">KWin::DataDeviceInterface</innerclass>
    <innerclass refid="class_k_win_1_1_data_device_interface_private" prot="public">KWin::DataDeviceInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_data_device_manager_interface" prot="public">KWin::DataDeviceManagerInterface</innerclass>
    <innerclass refid="class_k_win_1_1_data_device_manager_interface_private" prot="public">KWin::DataDeviceManagerInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_data_offer_interface" prot="public">KWin::DataOfferInterface</innerclass>
    <innerclass refid="class_k_win_1_1_data_offer_interface_private" prot="public">KWin::DataOfferInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_data_source_interface" prot="public">KWin::DataSourceInterface</innerclass>
    <innerclass refid="class_k_win_1_1_data_source_interface_private" prot="public">KWin::DataSourceInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_data_source_model" prot="public">KWin::DataSourceModel</innerclass>
    <innerclass refid="class_k_win_1_1_d_bus_call" prot="public">KWin::DBusCall</innerclass>
    <innerclass refid="struct_k_win_1_1_d_bus_desktop_data_struct" prot="public">KWin::DBusDesktopDataStruct</innerclass>
    <innerclass refid="class_k_win_1_1_d_bus_interface" prot="public">KWin::DBusInterface</innerclass>
    <innerclass refid="class_k_win_1_1_debug_console" prot="public">KWin::DebugConsole</innerclass>
    <innerclass refid="class_k_win_1_1_debug_console_delegate" prot="public">KWin::DebugConsoleDelegate</innerclass>
    <innerclass refid="class_k_win_1_1_debug_console_effect_item" prot="public">KWin::DebugConsoleEffectItem</innerclass>
    <innerclass refid="class_k_win_1_1_debug_console_effects_tab" prot="public">KWin::DebugConsoleEffectsTab</innerclass>
    <innerclass refid="class_k_win_1_1_debug_console_filter" prot="public">KWin::DebugConsoleFilter</innerclass>
    <innerclass refid="class_k_win_1_1_debug_console_model" prot="public">KWin::DebugConsoleModel</innerclass>
    <innerclass refid="class_k_win_1_1_declarative_script" prot="public">KWin::DeclarativeScript</innerclass>
    <innerclass refid="class_k_win_1_1_declarative_script_workspace_wrapper" prot="public">KWin::DeclarativeScriptWorkspaceWrapper</innerclass>
    <innerclass refid="class_k_win_1_1_decoration_event_filter" prot="public">KWin::DecorationEventFilter</innerclass>
    <innerclass refid="class_k_win_1_1_decoration_item" prot="public">KWin::DecorationItem</innerclass>
    <innerclass refid="class_k_win_1_1_decoration_renderer" prot="public">KWin::DecorationRenderer</innerclass>
    <innerclass refid="class_k_win_1_1_decoration_shadow_texture_cache" prot="public">KWin::DecorationShadowTextureCache</innerclass>
    <innerclass refid="class_k_win_1_1_desktop_background_item" prot="public">KWin::DesktopBackgroundItem</innerclass>
    <innerclass refid="class_k_win_1_1_desktop_effects_data" prot="public">KWin::DesktopEffectsData</innerclass>
    <innerclass refid="class_k_win_1_1_desktop_effects_k_c_m" prot="public">KWin::DesktopEffectsKCM</innerclass>
    <innerclass refid="class_k_win_1_1_desktops_model" prot="public">KWin::DesktopsModel</innerclass>
    <innerclass refid="class_k_win_1_1_dim_inactive_effect" prot="public">KWin::DimInactiveEffect</innerclass>
    <innerclass refid="class_k_win_1_1_dim_inactive_effect_config" prot="public">KWin::DimInactiveEffectConfig</innerclass>
    <innerclass refid="class_k_win_1_1_display" prot="public">KWin::Display</innerclass>
    <innerclass refid="class_k_win_1_1_display_private" prot="public">KWin::DisplayPrivate</innerclass>
    <innerclass refid="struct_k_win_1_1_dma_buf_attributes" prot="public">KWin::DmaBufAttributes</innerclass>
    <innerclass refid="class_k_win_1_1_dma_buf_screen_cast_buffer" prot="public">KWin::DmaBufScreenCastBuffer</innerclass>
    <innerclass refid="class_k_win_1_1_dpms_input_event_filter" prot="public">KWin::DpmsInputEventFilter</innerclass>
    <innerclass refid="class_k_win_1_1_dpms_interface" prot="public">KWin::DpmsInterface</innerclass>
    <innerclass refid="class_k_win_1_1_dpms_manager_interface" prot="public">KWin::DpmsManagerInterface</innerclass>
    <innerclass refid="class_k_win_1_1_dpms_manager_interface_private" prot="public">KWin::DpmsManagerInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_drag_and_drop_icon" prot="public">KWin::DragAndDropIcon</innerclass>
    <innerclass refid="class_k_win_1_1_drag_and_drop_icon_item" prot="public">KWin::DragAndDropIconItem</innerclass>
    <innerclass refid="class_k_win_1_1_drag_and_drop_icon_private" prot="public">KWin::DragAndDropIconPrivate</innerclass>
    <innerclass refid="class_k_win_1_1_drag_and_drop_input_filter" prot="public">KWin::DragAndDropInputFilter</innerclass>
    <innerclass refid="class_k_win_1_1_drm_abstract_color_op" prot="public">KWin::DrmAbstractColorOp</innerclass>
    <innerclass refid="class_k_win_1_1_drm_abstract_output" prot="public">KWin::DrmAbstractOutput</innerclass>
    <innerclass refid="class_k_win_1_1_drm_atomic_commit" prot="public">KWin::DrmAtomicCommit</innerclass>
    <innerclass refid="class_k_win_1_1_drm_backend" prot="public">KWin::DrmBackend</innerclass>
    <innerclass refid="class_k_win_1_1_drm_blob" prot="public">KWin::DrmBlob</innerclass>
    <innerclass refid="class_k_win_1_1_drm_client_buffer_integration" prot="public">KWin::DrmClientBufferIntegration</innerclass>
    <innerclass refid="class_k_win_1_1_drm_client_buffer_integration_private" prot="public">KWin::DrmClientBufferIntegrationPrivate</innerclass>
    <innerclass refid="class_k_win_1_1_drm_commit" prot="public">KWin::DrmCommit</innerclass>
    <innerclass refid="class_k_win_1_1_drm_commit_thread" prot="public">KWin::DrmCommitThread</innerclass>
    <innerclass refid="class_k_win_1_1_drm_connector" prot="public">KWin::DrmConnector</innerclass>
    <innerclass refid="class_k_win_1_1_drm_connector_mode" prot="public">KWin::DrmConnectorMode</innerclass>
    <innerclass refid="class_k_win_1_1_drm_crtc" prot="public">KWin::DrmCrtc</innerclass>
    <innerclass refid="struct_k_win_1_1_drm_deleter" prot="public">KWin::DrmDeleter</innerclass>
    <innerclass refid="struct_k_win_1_1_drm_deleter_3_01drm_mode_atomic_req_01_4" prot="public">KWin::DrmDeleter&lt; drmModeAtomicReq &gt;</innerclass>
    <innerclass refid="struct_k_win_1_1_drm_deleter_3_01drm_mode_connector_01_4" prot="public">KWin::DrmDeleter&lt; drmModeConnector &gt;</innerclass>
    <innerclass refid="struct_k_win_1_1_drm_deleter_3_01drm_mode_crtc_01_4" prot="public">KWin::DrmDeleter&lt; drmModeCrtc &gt;</innerclass>
    <innerclass refid="struct_k_win_1_1_drm_deleter_3_01drm_mode_encoder_01_4" prot="public">KWin::DrmDeleter&lt; drmModeEncoder &gt;</innerclass>
    <innerclass refid="struct_k_win_1_1_drm_deleter_3_01drm_mode_f_b_01_4" prot="public">KWin::DrmDeleter&lt; drmModeFB &gt;</innerclass>
    <innerclass refid="struct_k_win_1_1_drm_deleter_3_01drm_mode_lessee_list_res_01_4" prot="public">KWin::DrmDeleter&lt; drmModeLesseeListRes &gt;</innerclass>
    <innerclass refid="struct_k_win_1_1_drm_deleter_3_01drm_mode_mode_info_01_4" prot="public">KWin::DrmDeleter&lt; drmModeModeInfo &gt;</innerclass>
    <innerclass refid="struct_k_win_1_1_drm_deleter_3_01drm_mode_object_properties_01_4" prot="public">KWin::DrmDeleter&lt; drmModeObjectProperties &gt;</innerclass>
    <innerclass refid="struct_k_win_1_1_drm_deleter_3_01drm_mode_plane_01_4" prot="public">KWin::DrmDeleter&lt; drmModePlane &gt;</innerclass>
    <innerclass refid="struct_k_win_1_1_drm_deleter_3_01drm_mode_plane_res_01_4" prot="public">KWin::DrmDeleter&lt; drmModePlaneRes &gt;</innerclass>
    <innerclass refid="struct_k_win_1_1_drm_deleter_3_01drm_mode_property_blob_res_01_4" prot="public">KWin::DrmDeleter&lt; drmModePropertyBlobRes &gt;</innerclass>
    <innerclass refid="struct_k_win_1_1_drm_deleter_3_01drm_mode_property_res_01_4" prot="public">KWin::DrmDeleter&lt; drmModePropertyRes &gt;</innerclass>
    <innerclass refid="struct_k_win_1_1_drm_deleter_3_01drm_mode_res_01_4" prot="public">KWin::DrmDeleter&lt; drmModeRes &gt;</innerclass>
    <innerclass refid="struct_k_win_1_1_drm_deleter_3_01drm_version_01_4" prot="public">KWin::DrmDeleter&lt; drmVersion &gt;</innerclass>
    <innerclass refid="class_k_win_1_1_drm_device" prot="public">KWin::DrmDevice</innerclass>
    <innerclass refid="class_k_win_1_1_drm_enum_property" prot="public">KWin::DrmEnumProperty</innerclass>
    <innerclass refid="class_k_win_1_1_drm_framebuffer" prot="public">KWin::DrmFramebuffer</innerclass>
    <innerclass refid="class_k_win_1_1_drm_framebuffer_data" prot="public">KWin::DrmFramebufferData</innerclass>
    <innerclass refid="class_k_win_1_1_drm_gpu" prot="public">KWin::DrmGpu</innerclass>
    <innerclass refid="class_k_win_1_1_drm_lease" prot="public">KWin::DrmLease</innerclass>
    <innerclass refid="class_k_win_1_1_drm_lease_connector_v1_interface" prot="public">KWin::DrmLeaseConnectorV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_drm_lease_device_v1_interface" prot="public">KWin::DrmLeaseDeviceV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_drm_lease_manager_v1" prot="public">KWin::DrmLeaseManagerV1</innerclass>
    <innerclass refid="class_k_win_1_1_drm_lease_request_v1_interface" prot="public">KWin::DrmLeaseRequestV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_drm_lease_v1_interface" prot="public">KWin::DrmLeaseV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_drm_legacy_commit" prot="public">KWin::DrmLegacyCommit</innerclass>
    <innerclass refid="class_k_win_1_1_drm_lut_color_op" prot="public">KWin::DrmLutColorOp</innerclass>
    <innerclass refid="class_k_win_1_1_drm_object" prot="public">KWin::DrmObject</innerclass>
    <innerclass refid="class_k_win_1_1_drm_output" prot="public">KWin::DrmOutput</innerclass>
    <innerclass refid="class_k_win_1_1_drm_output_layer" prot="public">KWin::DrmOutputLayer</innerclass>
    <innerclass refid="class_k_win_1_1_drm_pipeline" prot="public">KWin::DrmPipeline</innerclass>
    <innerclass refid="class_k_win_1_1_drm_pipeline_layer" prot="public">KWin::DrmPipelineLayer</innerclass>
    <innerclass refid="class_k_win_1_1_drm_plane" prot="public">KWin::DrmPlane</innerclass>
    <innerclass refid="class_k_win_1_1_drm_property" prot="public">KWin::DrmProperty</innerclass>
    <innerclass refid="class_k_win_1_1_drm_property_list" prot="public">KWin::DrmPropertyList</innerclass>
    <innerclass refid="class_k_win_1_1_drm_q_painter_backend" prot="public">KWin::DrmQPainterBackend</innerclass>
    <innerclass refid="class_k_win_1_1_drm_q_painter_layer" prot="public">KWin::DrmQPainterLayer</innerclass>
    <innerclass refid="class_k_win_1_1_drm_render_backend" prot="public">KWin::DrmRenderBackend</innerclass>
    <innerclass refid="class_k_win_1_1_drm_virtual_output" prot="public">KWin::DrmVirtualOutput</innerclass>
    <innerclass refid="class_k_win_1_1_drm_virtual_q_painter_layer" prot="public">KWin::DrmVirtualQPainterLayer</innerclass>
    <innerclass refid="class_k_win_1_1_dumb_graphics_buffer" prot="public">KWin::DumbGraphicsBuffer</innerclass>
    <innerclass refid="class_k_win_1_1_edge" prot="public">KWin::Edge</innerclass>
    <innerclass refid="class_k_win_1_1_edid" prot="public">KWin::Edid</innerclass>
    <innerclass refid="class_k_win_1_1_effect" prot="public">KWin::Effect</innerclass>
    <innerclass refid="class_k_win_1_1_effect_frame" prot="public">KWin::EffectFrame</innerclass>
    <innerclass refid="class_k_win_1_1_effect_frame_quick_scene" prot="public">KWin::EffectFrameQuickScene</innerclass>
    <innerclass refid="class_k_win_1_1_effect_loader" prot="public">KWin::EffectLoader</innerclass>
    <innerclass refid="class_k_win_1_1_effect_load_queue" prot="public">KWin::EffectLoadQueue</innerclass>
    <innerclass refid="class_k_win_1_1_effect_plugin_factory" prot="public">KWin::EffectPluginFactory</innerclass>
    <innerclass refid="class_k_win_1_1_effects_filter" prot="public">KWin::EffectsFilter</innerclass>
    <innerclass refid="class_k_win_1_1_effects_filter_proxy_model" prot="public">KWin::EffectsFilterProxyModel</innerclass>
    <innerclass refid="class_k_win_1_1_effects_handler" prot="public">KWin::EffectsHandler</innerclass>
    <innerclass refid="class_k_win_1_1_effects_model" prot="public">KWin::EffectsModel</innerclass>
    <innerclass refid="class_k_win_1_1_effect_togglable_gesture" prot="public">KWin::EffectTogglableGesture</innerclass>
    <innerclass refid="class_k_win_1_1_effect_togglable_state" prot="public">KWin::EffectTogglableState</innerclass>
    <innerclass refid="class_k_win_1_1_effect_togglable_touch_border" prot="public">KWin::EffectTogglableTouchBorder</innerclass>
    <innerclass refid="class_k_win_1_1_effect_window" prot="public">KWin::EffectWindow</innerclass>
    <innerclass refid="class_k_win_1_1_effect_window_deleted_ref" prot="public">KWin::EffectWindowDeletedRef</innerclass>
    <innerclass refid="class_k_win_1_1_effect_window_group" prot="public">KWin::EffectWindowGroup</innerclass>
    <innerclass refid="class_k_win_1_1_effect_window_visible_ref" prot="public">KWin::EffectWindowVisibleRef</innerclass>
    <innerclass refid="class_k_win_1_1_egl_context" prot="public">KWin::EglContext</innerclass>
    <innerclass refid="class_k_win_1_1_egl_context_attribute_builder" prot="public">KWin::EglContextAttributeBuilder</innerclass>
    <innerclass refid="class_k_win_1_1_egl_display" prot="public">KWin::EglDisplay</innerclass>
    <innerclass refid="class_k_win_1_1_egl_gbm_backend" prot="public">KWin::EglGbmBackend</innerclass>
    <innerclass refid="class_k_win_1_1_egl_gbm_layer" prot="public">KWin::EglGbmLayer</innerclass>
    <innerclass refid="class_k_win_1_1_egl_gbm_layer_surface" prot="public">KWin::EglGbmLayerSurface</innerclass>
    <innerclass refid="class_k_win_1_1_e_g_l_image_texture" prot="public">KWin::EGLImageTexture</innerclass>
    <innerclass refid="class_k_win_1_1_e_g_l_native_fence" prot="public">KWin::EGLNativeFence</innerclass>
    <innerclass refid="class_k_win_1_1_egl_open_g_l_e_s_context_attribute_builder" prot="public">KWin::EglOpenGLESContextAttributeBuilder</innerclass>
    <innerclass refid="class_k_win_1_1_egl_swapchain" prot="public">KWin::EglSwapchain</innerclass>
    <innerclass refid="class_k_win_1_1_egl_swapchain_slot" prot="public">KWin::EglSwapchainSlot</innerclass>
    <innerclass refid="class_k_win_1_1_eis_backend" prot="public">KWin::EisBackend</innerclass>
    <innerclass refid="struct_k_win_1_1_eis_client" prot="public">KWin::EisClient</innerclass>
    <innerclass refid="class_k_win_1_1_eis_context" prot="public">KWin::EisContext</innerclass>
    <innerclass refid="class_k_win_1_1_eis_device" prot="public">KWin::EisDevice</innerclass>
    <innerclass refid="class_k_win_1_1_eis_input_capture" prot="public">KWin::EisInputCapture</innerclass>
    <innerclass refid="struct_k_win_1_1_eis_input_capture_barrier" prot="public">KWin::EisInputCaptureBarrier</innerclass>
    <innerclass refid="class_k_win_1_1_eis_input_capture_filter" prot="public">KWin::EisInputCaptureFilter</innerclass>
    <innerclass refid="class_k_win_1_1_eis_input_capture_manager" prot="public">KWin::EisInputCaptureManager</innerclass>
    <innerclass refid="class_k_win_1_1_expo_area" prot="public">KWin::ExpoArea</innerclass>
    <innerclass refid="class_k_win_1_1_external_brightness_device_v1" prot="public">KWin::ExternalBrightnessDeviceV1</innerclass>
    <innerclass refid="class_k_win_1_1_external_brightness_v1" prot="public">KWin::ExternalBrightnessV1</innerclass>
    <innerclass refid="class_k_win_1_1_fake_input_backend" prot="public">KWin::FakeInputBackend</innerclass>
    <innerclass refid="class_k_win_1_1_fake_input_backend_private" prot="public">KWin::FakeInputBackendPrivate</innerclass>
    <innerclass refid="class_k_win_1_1_fake_input_device" prot="public">KWin::FakeInputDevice</innerclass>
    <innerclass refid="struct_k_win_1_1_fall_apart_animation" prot="public">KWin::FallApartAnimation</innerclass>
    <innerclass refid="class_k_win_1_1_fall_apart_effect" prot="public">KWin::FallApartEffect</innerclass>
    <innerclass refid="class_k_win_1_1_file_descriptor" prot="public">KWin::FileDescriptor</innerclass>
    <innerclass refid="class_k_win_1_1_filtered_display" prot="public">KWin::FilteredDisplay</innerclass>
    <innerclass refid="class_k_win_1_1_filtered_display_private" prot="public">KWin::FilteredDisplayPrivate</innerclass>
    <innerclass refid="class_k_win_1_1_focus_chain" prot="public">KWin::FocusChain</innerclass>
    <innerclass refid="struct_k_win_1_1_format_info" prot="public">KWin::FormatInfo</innerclass>
    <innerclass refid="class_k_win_1_1_forward_input_filter" prot="public">KWin::ForwardInputFilter</innerclass>
    <innerclass refid="class_k_win_1_1_f_px2" prot="public">KWin::FPx2</innerclass>
    <innerclass refid="class_k_win_1_1_fractional_scale_manager_v1_interface" prot="public">KWin::FractionalScaleManagerV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_fractional_scale_manager_v1_interface_private" prot="public">KWin::FractionalScaleManagerV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_fractional_scale_v1_interface" prot="public">KWin::FractionalScaleV1Interface</innerclass>
    <innerclass refid="struct_k_win_1_1_frame_sizes_array" prot="public">KWin::FrameSizesArray</innerclass>
    <innerclass refid="class_k_win_1_1_frog_color_management_surface_v1" prot="public">KWin::FrogColorManagementSurfaceV1</innerclass>
    <innerclass refid="class_k_win_1_1_frog_color_management_v1" prot="public">KWin::FrogColorManagementV1</innerclass>
    <innerclass refid="class_k_win_1_1_f_trace_duration" prot="public">KWin::FTraceDuration</innerclass>
    <innerclass refid="class_k_win_1_1_f_trace_logger" prot="public">KWin::FTraceLogger</innerclass>
    <innerclass refid="class_k_win_1_1_full_screen_effect_lock" prot="public">KWin::FullScreenEffectLock</innerclass>
    <innerclass refid="class_k_win_1_1_gbm_graphics_buffer" prot="public">KWin::GbmGraphicsBuffer</innerclass>
    <innerclass refid="class_k_win_1_1_gbm_graphics_buffer_allocator" prot="public">KWin::GbmGraphicsBufferAllocator</innerclass>
    <innerclass refid="class_k_win_1_1_generic_scripted_config" prot="public">KWin::GenericScriptedConfig</innerclass>
    <innerclass refid="class_k_win_1_1_generic_scripted_config_factory" prot="public">KWin::GenericScriptedConfigFactory</innerclass>
    <innerclass refid="class_k_win_1_1_gesture" prot="public">KWin::Gesture</innerclass>
    <innerclass refid="class_k_win_1_1_gesture_recognizer" prot="public">KWin::GestureRecognizer</innerclass>
    <innerclass refid="class_k_win_1_1_get_addr_info" prot="public">KWin::GetAddrInfo</innerclass>
    <innerclass refid="class_k_win_1_1_g_l_framebuffer" prot="public">KWin::GLFramebuffer</innerclass>
    <innerclass refid="struct_k_win_1_1_glide_animation" prot="public">KWin::GlideAnimation</innerclass>
    <innerclass refid="class_k_win_1_1_glide_effect" prot="public">KWin::GlideEffect</innerclass>
    <innerclass refid="class_k_win_1_1_glide_effect_config" prot="public">KWin::GlideEffectConfig</innerclass>
    <innerclass refid="class_k_win_1_1_gl_look_up_table" prot="public">KWin::GlLookUpTable</innerclass>
    <innerclass refid="class_k_win_1_1_gl_look_up_table3_d" prot="public">KWin::GlLookUpTable3D</innerclass>
    <innerclass refid="class_k_win_1_1_global_shortcut" prot="public">KWin::GlobalShortcut</innerclass>
    <innerclass refid="class_k_win_1_1_global_shortcuts_manager" prot="public">KWin::GlobalShortcutsManager</innerclass>
    <innerclass refid="class_k_win_1_1_g_l_platform" prot="public">KWin::GLPlatform</innerclass>
    <innerclass refid="class_k_win_1_1_g_l_render_time_query" prot="public">KWin::GLRenderTimeQuery</innerclass>
    <innerclass refid="class_k_win_1_1_g_l_shader" prot="public">KWin::GLShader</innerclass>
    <innerclass refid="class_k_win_1_1_g_l_texture" prot="public">KWin::GLTexture</innerclass>
    <innerclass refid="class_k_win_1_1_g_l_texture_private" prot="public">KWin::GLTexturePrivate</innerclass>
    <innerclass refid="struct_k_win_1_1_g_l_vertex2_d" prot="public">KWin::GLVertex2D</innerclass>
    <innerclass refid="struct_k_win_1_1_g_l_vertex3_d" prot="public">KWin::GLVertex3D</innerclass>
    <innerclass refid="struct_k_win_1_1_g_l_vertex_attrib" prot="public">KWin::GLVertexAttrib</innerclass>
    <innerclass refid="class_k_win_1_1_g_l_vertex_buffer" prot="public">KWin::GLVertexBuffer</innerclass>
    <innerclass refid="class_k_win_1_1_g_l_vertex_buffer_private" prot="public">KWin::GLVertexBufferPrivate</innerclass>
    <innerclass refid="class_k_win_1_1_graphics_buffer" prot="public">KWin::GraphicsBuffer</innerclass>
    <innerclass refid="class_k_win_1_1_graphics_buffer_allocator" prot="public">KWin::GraphicsBufferAllocator</innerclass>
    <innerclass refid="struct_k_win_1_1_graphics_buffer_options" prot="public">KWin::GraphicsBufferOptions</innerclass>
    <innerclass refid="class_k_win_1_1_graphics_buffer_ref" prot="public">KWin::GraphicsBufferRef</innerclass>
    <innerclass refid="class_k_win_1_1_graphics_buffer_view" prot="public">KWin::GraphicsBufferView</innerclass>
    <innerclass refid="class_k_win_1_1_group" prot="public">KWin::Group</innerclass>
    <innerclass refid="class_k_win_1_1_hide_cursor_effect" prot="public">KWin::HideCursorEffect</innerclass>
    <innerclass refid="class_k_win_1_1_hide_cursor_effect_config" prot="public">KWin::HideCursorEffectConfig</innerclass>
    <innerclass refid="class_k_win_1_1_hide_cursor_spy" prot="public">KWin::HideCursorSpy</innerclass>
    <innerclass refid="class_k_win_1_1_highlight_window_effect" prot="public">KWin::HighlightWindowEffect</innerclass>
    <innerclass refid="class_k_win_1_1_icc_profile" prot="public">KWin::IccProfile</innerclass>
    <innerclass refid="class_k_win_1_1_icc_shader" prot="public">KWin::IccShader</innerclass>
    <innerclass refid="class_k_win_1_1_idle_detector" prot="public">KWin::IdleDetector</innerclass>
    <innerclass refid="class_k_win_1_1_idle_inhibition" prot="public">KWin::IdleInhibition</innerclass>
    <innerclass refid="class_k_win_1_1_idle_inhibit_manager_v1_interface" prot="public">KWin::IdleInhibitManagerV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_idle_inhibit_manager_v1_interface_private" prot="public">KWin::IdleInhibitManagerV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_idle_inhibitor_v1_interface" prot="public">KWin::IdleInhibitorV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_idle_interface" prot="public">KWin::IdleInterface</innerclass>
    <innerclass refid="class_k_win_1_1_idle_interface_private" prot="public">KWin::IdleInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_idle_notification_v1_interface" prot="public">KWin::IdleNotificationV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_idle_notify_v1_interface" prot="public">KWin::IdleNotifyV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_idle_notify_v1_interface_private" prot="public">KWin::IdleNotifyV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_idle_timeout_interface" prot="public">KWin::IdleTimeoutInterface</innerclass>
    <innerclass refid="class_k_win_1_1_image_description_v1" prot="public">KWin::ImageDescriptionV1</innerclass>
    <innerclass refid="class_k_win_1_1_image_item" prot="public">KWin::ImageItem</innerclass>
    <innerclass refid="class_k_win_1_1_image_item_open_g_l" prot="public">KWin::ImageItemOpenGL</innerclass>
    <innerclass refid="class_k_win_1_1_inactivity_duration_combo_box" prot="public">KWin::InactivityDurationComboBox</innerclass>
    <innerclass refid="class_k_win_1_1_index_buffer" prot="public">KWin::IndexBuffer</innerclass>
    <innerclass refid="class_k_win_1_1_input_backend" prot="public">KWin::InputBackend</innerclass>
    <innerclass refid="class_k_win_1_1_input_device" prot="public">KWin::InputDevice</innerclass>
    <innerclass refid="class_k_win_1_1_input_device_handler" prot="public">KWin::InputDeviceHandler</innerclass>
    <innerclass refid="class_k_win_1_1_input_device_model" prot="public">KWin::InputDeviceModel</innerclass>
    <innerclass refid="struct_k_win_1_1_input_device_tablet_pad_mode_group" prot="public">KWin::InputDeviceTabletPadModeGroup</innerclass>
    <innerclass refid="class_k_win_1_1_input_device_tablet_tool" prot="public">KWin::InputDeviceTabletTool</innerclass>
    <innerclass refid="class_k_win_1_1_input_event_filter" prot="public">KWin::InputEventFilter</innerclass>
    <innerclass refid="class_k_win_1_1_input_event_spy" prot="public">KWin::InputEventSpy</innerclass>
    <innerclass refid="class_k_win_1_1_input_keyboard_v1_interface_private" prot="public">KWin::InputKeyboardV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_input_method" prot="public">KWin::InputMethod</innerclass>
    <innerclass refid="class_k_win_1_1_input_method_context_v1_interface" prot="public">KWin::InputMethodContextV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_input_method_context_v1_interface_private" prot="public">KWin::InputMethodContextV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_input_method_event_filter" prot="public">KWin::InputMethodEventFilter</innerclass>
    <innerclass refid="class_k_win_1_1_input_method_grab_v1" prot="public">KWin::InputMethodGrabV1</innerclass>
    <innerclass refid="class_k_win_1_1_input_method_v1_interface" prot="public">KWin::InputMethodV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_input_method_v1_interface_private" prot="public">KWin::InputMethodV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_input_panel_surface_v1_interface" prot="public">KWin::InputPanelSurfaceV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_input_panel_surface_v1_interface_private" prot="public">KWin::InputPanelSurfaceV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_input_panel_v1_integration" prot="public">KWin::InputPanelV1Integration</innerclass>
    <innerclass refid="class_k_win_1_1_input_panel_v1_interface" prot="public">KWin::InputPanelV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_input_panel_v1_interface_private" prot="public">KWin::InputPanelV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_input_panel_v1_window" prot="public">KWin::InputPanelV1Window</innerclass>
    <innerclass refid="class_k_win_1_1_input_redirection" prot="public">KWin::InputRedirection</innerclass>
    <innerclass refid="class_k_win_1_1_internal_input_method_context" prot="public">KWin::InternalInputMethodContext</innerclass>
    <innerclass refid="class_k_win_1_1_internal_window" prot="public">KWin::InternalWindow</innerclass>
    <innerclass refid="class_k_win_1_1_internal_window_event_filter" prot="public">KWin::InternalWindowEventFilter</innerclass>
    <innerclass refid="struct_k_win_1_1_internal_window_frame" prot="public">KWin::InternalWindowFrame</innerclass>
    <innerclass refid="class_k_win_1_1_inverse_color_transfer_function" prot="public">KWin::InverseColorTransferFunction</innerclass>
    <innerclass refid="class_k_win_1_1_invert_effect" prot="public">KWin::InvertEffect</innerclass>
    <innerclass refid="class_k_win_1_1_invert_effect_config" prot="public">KWin::InvertEffectConfig</innerclass>
    <innerclass refid="class_k_win_1_1_item" prot="public">KWin::Item</innerclass>
    <innerclass refid="class_k_win_1_1_item_effect" prot="public">KWin::ItemEffect</innerclass>
    <innerclass refid="class_k_win_1_1_item_renderer" prot="public">KWin::ItemRenderer</innerclass>
    <innerclass refid="class_k_win_1_1_item_renderer_open_g_l" prot="public">KWin::ItemRendererOpenGL</innerclass>
    <innerclass refid="class_k_win_1_1_item_renderer_q_painter" prot="public">KWin::ItemRendererQPainter</innerclass>
    <innerclass refid="class_k_win_1_1_j_s_engine_global_methods_wrapper" prot="public">KWin::JSEngineGlobalMethodsWrapper</innerclass>
    <innerclass refid="class_k_win_1_1_k_c_m_k_win_rules" prot="public">KWin::KCMKWinRules</innerclass>
    <innerclass refid="class_k_win_1_1_keyboard_input_redirection" prot="public">KWin::KeyboardInputRedirection</innerclass>
    <innerclass refid="class_k_win_1_1_keyboard_interface" prot="public">KWin::KeyboardInterface</innerclass>
    <innerclass refid="class_k_win_1_1_keyboard_interface_private" prot="public">KWin::KeyboardInterfacePrivate</innerclass>
    <innerclass refid="struct_k_win_1_1_keyboard_key_event" prot="public">KWin::KeyboardKeyEvent</innerclass>
    <innerclass refid="class_k_win_1_1_keyboard_layout" prot="public">KWin::KeyboardLayout</innerclass>
    <innerclass refid="class_k_win_1_1_keyboard_layout_d_bus_interface" prot="public">KWin::KeyboardLayoutDBusInterface</innerclass>
    <innerclass refid="class_k_win_1_1_keyboard_repeat" prot="public">KWin::KeyboardRepeat</innerclass>
    <innerclass refid="struct_k_win_1_1_keyboard_shortcut" prot="public">KWin::KeyboardShortcut</innerclass>
    <innerclass refid="class_k_win_1_1_keyboard_shortcuts_inhibit_manager_v1_interface" prot="public">KWin::KeyboardShortcutsInhibitManagerV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_keyboard_shortcuts_inhibit_manager_v1_interface_private" prot="public">KWin::KeyboardShortcutsInhibitManagerV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_keyboard_shortcuts_inhibitor_v1_interface" prot="public">KWin::KeyboardShortcutsInhibitorV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_keyboard_shortcuts_inhibitor_v1_interface_private" prot="public">KWin::KeyboardShortcutsInhibitorV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_key_notification_plugin" prot="public">KWin::KeyNotificationPlugin</innerclass>
    <innerclass refid="class_k_win_1_1_key_state_changed_spy" prot="public">KWin::KeyStateChangedSpy</innerclass>
    <innerclass refid="class_k_win_1_1_key_state_interface" prot="public">KWin::KeyStateInterface</innerclass>
    <innerclass refid="class_k_win_1_1_key_state_interface_private" prot="public">KWin::KeyStateInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_kill_prompt" prot="public">KWin::KillPrompt</innerclass>
    <innerclass refid="class_k_win_1_1_kill_window" prot="public">KWin::KillWindow</innerclass>
    <innerclass refid="class_k_win_1_1_kscreen_effect" prot="public">KWin::KscreenEffect</innerclass>
    <innerclass refid="class_k_win_1_1_k_win_display" prot="public">KWin::KWinDisplay</innerclass>
    <innerclass refid="class_k_win_1_1_k_win_idle_time_poller" prot="public">KWin::KWinIdleTimePoller</innerclass>
    <innerclass refid="class_k_win_1_1_k_win_screen_edge" prot="public">KWin::KWinScreenEdge</innerclass>
    <innerclass refid="class_k_win_1_1_k_win_screen_edges_config" prot="public">KWin::KWinScreenEdgesConfig</innerclass>
    <innerclass refid="class_k_win_1_1_k_win_screen_edges_config_form" prot="public">KWin::KWinScreenEdgesConfigForm</innerclass>
    <innerclass refid="class_k_win_1_1_k_win_tab_box_config" prot="public">KWin::KWinTabBoxConfig</innerclass>
    <innerclass refid="class_k_win_1_1_k_win_tab_box_config_form" prot="public">KWin::KWinTabBoxConfigForm</innerclass>
    <innerclass refid="class_k_win_1_1_k_win_touch_screen_edge_config_form" prot="public">KWin::KWinTouchScreenEdgeConfigForm</innerclass>
    <innerclass refid="struct_k_win_1_1_layer_shell_v1_configure_event" prot="public">KWin::LayerShellV1ConfigureEvent</innerclass>
    <innerclass refid="class_k_win_1_1_layer_shell_v1_integration" prot="public">KWin::LayerShellV1Integration</innerclass>
    <innerclass refid="class_k_win_1_1_layer_shell_v1_interface" prot="public">KWin::LayerShellV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_layer_shell_v1_interface_private" prot="public">KWin::LayerShellV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_layer_shell_v1_window" prot="public">KWin::LayerShellV1Window</innerclass>
    <innerclass refid="struct_k_win_1_1_layer_surface_v1_commit" prot="public">KWin::LayerSurfaceV1Commit</innerclass>
    <innerclass refid="class_k_win_1_1_layer_surface_v1_interface" prot="public">KWin::LayerSurfaceV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_layer_surface_v1_interface_private" prot="public">KWin::LayerSurfaceV1InterfacePrivate</innerclass>
    <innerclass refid="struct_k_win_1_1_layer_surface_v1_state" prot="public">KWin::LayerSurfaceV1State</innerclass>
    <innerclass refid="class_k_win_1_1_legacy_matrix_color_op" prot="public">KWin::LegacyMatrixColorOp</innerclass>
    <innerclass refid="class_k_win_1_1_libinput_backend" prot="public">KWin::LibinputBackend</innerclass>
    <innerclass refid="class_k_win_1_1_lid_switch_tracker" prot="public">KWin::LidSwitchTracker</innerclass>
    <innerclass refid="struct_k_win_1_1linux__dmabuf__feedback__v1__table__entry" prot="public">KWin::linux_dmabuf_feedback_v1_table_entry</innerclass>
    <innerclass refid="class_k_win_1_1_linux_clock_skew_notifier_engine" prot="public">KWin::LinuxClockSkewNotifierEngine</innerclass>
    <innerclass refid="class_k_win_1_1_linux_dma_buf_params_v1" prot="public">KWin::LinuxDmaBufParamsV1</innerclass>
    <innerclass refid="class_k_win_1_1_linux_dma_buf_v1_client_buffer" prot="public">KWin::LinuxDmaBufV1ClientBuffer</innerclass>
    <innerclass refid="class_k_win_1_1_linux_dma_buf_v1_client_buffer_integration" prot="public">KWin::LinuxDmaBufV1ClientBufferIntegration</innerclass>
    <innerclass refid="class_k_win_1_1_linux_dma_buf_v1_client_buffer_integration_private" prot="public">KWin::LinuxDmaBufV1ClientBufferIntegrationPrivate</innerclass>
    <innerclass refid="class_k_win_1_1_linux_dma_buf_v1_feedback" prot="public">KWin::LinuxDmaBufV1Feedback</innerclass>
    <innerclass refid="class_k_win_1_1_linux_dma_buf_v1_feedback_private" prot="public">KWin::LinuxDmaBufV1FeedbackPrivate</innerclass>
    <innerclass refid="class_k_win_1_1_linux_dma_buf_v1_format_table" prot="public">KWin::LinuxDmaBufV1FormatTable</innerclass>
    <innerclass refid="class_k_win_1_1_linux_drm_sync_obj_surface_v1" prot="public">KWin::LinuxDrmSyncObjSurfaceV1</innerclass>
    <innerclass refid="class_k_win_1_1_linux_drm_sync_obj_timeline_v1" prot="public">KWin::LinuxDrmSyncObjTimelineV1</innerclass>
    <innerclass refid="class_k_win_1_1_linux_drm_sync_obj_v1_interface" prot="public">KWin::LinuxDrmSyncObjV1Interface</innerclass>
    <innerclass refid="struct_k_win_1_1_locked_pointer_v1_commit" prot="public">KWin::LockedPointerV1Commit</innerclass>
    <innerclass refid="class_k_win_1_1_locked_pointer_v1_interface" prot="public">KWin::LockedPointerV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_locked_pointer_v1_interface_private" prot="public">KWin::LockedPointerV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_lockscreen_overlay_v1_interface" prot="public">KWin::LockscreenOverlayV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_lockscreen_overlay_v1_interface_private" prot="public">KWin::LockscreenOverlayV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_logind_session" prot="public">KWin::LogindSession</innerclass>
    <innerclass refid="struct_k_win_1_1_magic_lamp_animation" prot="public">KWin::MagicLampAnimation</innerclass>
    <innerclass refid="class_k_win_1_1_magic_lamp_effect" prot="public">KWin::MagicLampEffect</innerclass>
    <innerclass refid="class_k_win_1_1_magic_lamp_effect_config" prot="public">KWin::MagicLampEffectConfig</innerclass>
    <innerclass refid="class_k_win_1_1_magnifier_effect" prot="public">KWin::MagnifierEffect</innerclass>
    <innerclass refid="class_k_win_1_1_magnifier_effect_config" prot="public">KWin::MagnifierEffectConfig</innerclass>
    <innerclass refid="class_k_win_1_1_mem_fd_screen_cast_buffer" prot="public">KWin::MemFdScreenCastBuffer</innerclass>
    <innerclass refid="class_k_win_1_1_memory_map" prot="public">KWin::MemoryMap</innerclass>
    <innerclass refid="class_k_win_1_1_modifiers_changed_spy" prot="public">KWin::ModifiersChangedSpy</innerclass>
    <innerclass refid="class_k_win_1_1_monitor" prot="public">KWin::Monitor</innerclass>
    <innerclass refid="class_k_win_1_1_motion" prot="public">KWin::Motion</innerclass>
    <innerclass refid="class_k_win_1_1_motion1_d" prot="public">KWin::Motion1D</innerclass>
    <innerclass refid="class_k_win_1_1_motion2_d" prot="public">KWin::Motion2D</innerclass>
    <innerclass refid="class_k_win_1_1_mouse_button" prot="public">KWin::MouseButton</innerclass>
    <innerclass refid="class_k_win_1_1_mouse_click_effect" prot="public">KWin::MouseClickEffect</innerclass>
    <innerclass refid="class_k_win_1_1_mouse_click_effect_config" prot="public">KWin::MouseClickEffectConfig</innerclass>
    <innerclass refid="class_k_win_1_1_mouse_click_mouse_event" prot="public">KWin::MouseClickMouseEvent</innerclass>
    <innerclass refid="class_k_win_1_1_mouse_mark_effect" prot="public">KWin::MouseMarkEffect</innerclass>
    <innerclass refid="class_k_win_1_1_mouse_mark_effect_config" prot="public">KWin::MouseMarkEffectConfig</innerclass>
    <innerclass refid="class_k_win_1_1_mouse_wheel_accumulator" prot="public">KWin::MouseWheelAccumulator</innerclass>
    <innerclass refid="class_k_win_1_1_move_resize_filter" prot="public">KWin::MoveResizeFilter</innerclass>
    <innerclass refid="class_k_win_1_1_night_light_d_bus_interface" prot="public">KWin::NightLightDBusInterface</innerclass>
    <innerclass refid="class_k_win_1_1_night_light_manager" prot="public">KWin::NightLightManager</innerclass>
    <innerclass refid="class_k_win_1_1_noop_session" prot="public">KWin::NoopSession</innerclass>
    <innerclass refid="struct_k_win_1_1_offscreen_data" prot="public">KWin::OffscreenData</innerclass>
    <innerclass refid="class_k_win_1_1_offscreen_effect" prot="public">KWin::OffscreenEffect</innerclass>
    <innerclass refid="class_k_win_1_1_offscreen_effect_private" prot="public">KWin::OffscreenEffectPrivate</innerclass>
    <innerclass refid="class_k_win_1_1_offscreen_quick_scene" prot="public">KWin::OffscreenQuickScene</innerclass>
    <innerclass refid="class_k_win_1_1_offscreen_quick_view" prot="public">KWin::OffscreenQuickView</innerclass>
    <innerclass refid="class_k_win_1_1_on_screen_notification" prot="public">KWin::OnScreenNotification</innerclass>
    <innerclass refid="class_k_win_1_1_on_screen_notification_input_event_spy" prot="public">KWin::OnScreenNotificationInputEventSpy</innerclass>
    <innerclass refid="class_k_win_1_1_open_g_l_backend" prot="public">KWin::OpenGLBackend</innerclass>
    <innerclass refid="class_k_win_1_1_open_g_l_shadow_texture_provider" prot="public">KWin::OpenGLShadowTextureProvider</innerclass>
    <innerclass refid="class_k_win_1_1_open_g_l_surface_contents" prot="public">KWin::OpenGLSurfaceContents</innerclass>
    <innerclass refid="class_k_win_1_1_open_g_l_surface_texture" prot="public">KWin::OpenGLSurfaceTexture</innerclass>
    <innerclass refid="class_k_win_1_1_options" prot="public">KWin::Options</innerclass>
    <innerclass refid="class_k_win_1_1_options_model" prot="public">KWin::OptionsModel</innerclass>
    <innerclass refid="class_k_win_1_1_orientation_sensor" prot="public">KWin::OrientationSensor</innerclass>
    <innerclass refid="class_k_win_1_1_outline" prot="public">KWin::Outline</innerclass>
    <innerclass refid="class_k_win_1_1_outline_visual" prot="public">KWin::OutlineVisual</innerclass>
    <innerclass refid="class_k_win_1_1_output" prot="public">KWin::Output</innerclass>
    <innerclass refid="class_k_win_1_1_output_backend" prot="public">KWin::OutputBackend</innerclass>
    <innerclass refid="class_k_win_1_1_output_change_set" prot="public">KWin::OutputChangeSet</innerclass>
    <innerclass refid="class_k_win_1_1_output_configuration" prot="public">KWin::OutputConfiguration</innerclass>
    <innerclass refid="class_k_win_1_1_output_configuration_store" prot="public">KWin::OutputConfigurationStore</innerclass>
    <innerclass refid="class_k_win_1_1_output_configuration_v2_interface" prot="public">KWin::OutputConfigurationV2Interface</innerclass>
    <innerclass refid="class_k_win_1_1_output_device_mode_v2_interface" prot="public">KWin::OutputDeviceModeV2Interface</innerclass>
    <innerclass refid="class_k_win_1_1_output_device_mode_v2_interface_private" prot="public">KWin::OutputDeviceModeV2InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_output_device_v2_interface" prot="public">KWin::OutputDeviceV2Interface</innerclass>
    <innerclass refid="class_k_win_1_1_output_device_v2_interface_private" prot="public">KWin::OutputDeviceV2InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_output_frame" prot="public">KWin::OutputFrame</innerclass>
    <innerclass refid="class_k_win_1_1_output_interface" prot="public">KWin::OutputInterface</innerclass>
    <innerclass refid="class_k_win_1_1_output_interface_private" prot="public">KWin::OutputInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_output_layer" prot="public">KWin::OutputLayer</innerclass>
    <innerclass refid="struct_k_win_1_1_output_layer_begin_frame_info" prot="public">KWin::OutputLayerBeginFrameInfo</innerclass>
    <innerclass refid="class_k_win_1_1_output_locator_effect" prot="public">KWin::OutputLocatorEffect</innerclass>
    <innerclass refid="class_k_win_1_1_output_management_v2_interface" prot="public">KWin::OutputManagementV2Interface</innerclass>
    <innerclass refid="class_k_win_1_1_output_management_v2_interface_private" prot="public">KWin::OutputManagementV2InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_output_mode" prot="public">KWin::OutputMode</innerclass>
    <innerclass refid="class_k_win_1_1_output_order_v1_interface" prot="public">KWin::OutputOrderV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_output_order_v1_interface_private" prot="public">KWin::OutputOrderV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_outputs" prot="public">KWin::Outputs</innerclass>
    <innerclass refid="class_k_win_1_1_output_screen_cast_source" prot="public">KWin::OutputScreenCastSource</innerclass>
    <innerclass refid="class_k_win_1_1_output_transform" prot="public">KWin::OutputTransform</innerclass>
    <innerclass refid="class_k_win_1_1_overview_effect" prot="public">KWin::OverviewEffect</innerclass>
    <innerclass refid="class_k_win_1_1_overview_effect_config" prot="public">KWin::OverviewEffectConfig</innerclass>
    <innerclass refid="class_k_win_1_1_paint_data" prot="public">KWin::PaintData</innerclass>
    <innerclass refid="class_k_win_1_1_paint_data_private" prot="public">KWin::PaintDataPrivate</innerclass>
    <innerclass refid="struct_k_win_1_1_parameter_set" prot="public">KWin::ParameterSet</innerclass>
    <innerclass refid="class_k_win_1_1_pinch_gesture" prot="public">KWin::PinchGesture</innerclass>
    <innerclass refid="class_k_win_1_1_pinch_gesture_handler" prot="public">KWin::PinchGestureHandler</innerclass>
    <innerclass refid="struct_k_win_1_1_pipe" prot="public">KWin::Pipe</innerclass>
    <innerclass refid="class_k_win_1_1_pipe_wire_core" prot="public">KWin::PipeWireCore</innerclass>
    <innerclass refid="class_k_win_1_1_placeholder_input_event_filter" prot="public">KWin::PlaceholderInputEventFilter</innerclass>
    <innerclass refid="class_k_win_1_1_placeholder_output" prot="public">KWin::PlaceholderOutput</innerclass>
    <innerclass refid="class_k_win_1_1_placement" prot="public">KWin::Placement</innerclass>
    <innerclass refid="class_k_win_1_1_placement_tracker" prot="public">KWin::PlacementTracker</innerclass>
    <innerclass refid="class_k_win_1_1_plasma_shell_interface" prot="public">KWin::PlasmaShellInterface</innerclass>
    <innerclass refid="class_k_win_1_1_plasma_shell_interface_private" prot="public">KWin::PlasmaShellInterfacePrivate</innerclass>
    <innerclass refid="struct_k_win_1_1_plasma_shell_surface_commit" prot="public">KWin::PlasmaShellSurfaceCommit</innerclass>
    <innerclass refid="class_k_win_1_1_plasma_shell_surface_interface" prot="public">KWin::PlasmaShellSurfaceInterface</innerclass>
    <innerclass refid="class_k_win_1_1_plasma_shell_surface_interface_private" prot="public">KWin::PlasmaShellSurfaceInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_plasma_virtual_desktop_interface" prot="public">KWin::PlasmaVirtualDesktopInterface</innerclass>
    <innerclass refid="class_k_win_1_1_plasma_virtual_desktop_interface_private" prot="public">KWin::PlasmaVirtualDesktopInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_plasma_virtual_desktop_management_interface" prot="public">KWin::PlasmaVirtualDesktopManagementInterface</innerclass>
    <innerclass refid="class_k_win_1_1_plasma_virtual_desktop_management_interface_private" prot="public">KWin::PlasmaVirtualDesktopManagementInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_plasma_window_activation_feedback_interface" prot="public">KWin::PlasmaWindowActivationFeedbackInterface</innerclass>
    <innerclass refid="class_k_win_1_1_plasma_window_activation_feedback_interface_private" prot="public">KWin::PlasmaWindowActivationFeedbackInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_plasma_window_activation_interface" prot="public">KWin::PlasmaWindowActivationInterface</innerclass>
    <innerclass refid="class_k_win_1_1_plasma_window_activation_interface_private" prot="public">KWin::PlasmaWindowActivationInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_plasma_window_interface" prot="public">KWin::PlasmaWindowInterface</innerclass>
    <innerclass refid="class_k_win_1_1_plasma_window_interface_private" prot="public">KWin::PlasmaWindowInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_plasma_window_management_interface" prot="public">KWin::PlasmaWindowManagementInterface</innerclass>
    <innerclass refid="class_k_win_1_1_plasma_window_management_interface_private" prot="public">KWin::PlasmaWindowManagementInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_platform_cursor_image" prot="public">KWin::PlatformCursorImage</innerclass>
    <innerclass refid="class_k_win_1_1_plugin" prot="public">KWin::Plugin</innerclass>
    <innerclass refid="class_k_win_1_1_plugin_effect_loader" prot="public">KWin::PluginEffectLoader</innerclass>
    <innerclass refid="class_k_win_1_1_plugin_factory" prot="public">KWin::PluginFactory</innerclass>
    <innerclass refid="class_k_win_1_1_plugin_manager" prot="public">KWin::PluginManager</innerclass>
    <innerclass refid="class_k_win_1_1_plugin_manager_d_bus_interface" prot="public">KWin::PluginManagerDBusInterface</innerclass>
    <innerclass refid="struct_k_win_1_1_pointer_axis_event" prot="public">KWin::PointerAxisEvent</innerclass>
    <innerclass refid="class_k_win_1_1_pointer_axis_gesture_modifiers_widget" prot="public">KWin::PointerAxisGestureModifiersWidget</innerclass>
    <innerclass refid="struct_k_win_1_1_pointer_axis_shortcut" prot="public">KWin::PointerAxisShortcut</innerclass>
    <innerclass refid="struct_k_win_1_1_pointer_button_event" prot="public">KWin::PointerButtonEvent</innerclass>
    <innerclass refid="struct_k_win_1_1_pointer_button_shortcut" prot="public">KWin::PointerButtonShortcut</innerclass>
    <innerclass refid="class_k_win_1_1_pointer_constraints_v1_interface" prot="public">KWin::PointerConstraintsV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_pointer_constraints_v1_interface_private" prot="public">KWin::PointerConstraintsV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_pointer_gestures_v1_interface" prot="public">KWin::PointerGesturesV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_pointer_gestures_v1_interface_private" prot="public">KWin::PointerGesturesV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_pointer_hold_gesture_v1_interface" prot="public">KWin::PointerHoldGestureV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_pointer_input_redirection" prot="public">KWin::PointerInputRedirection</innerclass>
    <innerclass refid="class_k_win_1_1_pointer_interface" prot="public">KWin::PointerInterface</innerclass>
    <innerclass refid="class_k_win_1_1_pointer_interface_private" prot="public">KWin::PointerInterfacePrivate</innerclass>
    <innerclass refid="struct_k_win_1_1_pointer_motion_event" prot="public">KWin::PointerMotionEvent</innerclass>
    <innerclass refid="class_k_win_1_1_pointer_pinch_gesture_v1_interface" prot="public">KWin::PointerPinchGestureV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_pointer_surface_cursor" prot="public">KWin::PointerSurfaceCursor</innerclass>
    <innerclass refid="class_k_win_1_1_pointer_surface_cursor_private" prot="public">KWin::PointerSurfaceCursorPrivate</innerclass>
    <innerclass refid="class_k_win_1_1_pointer_swipe_gesture_v1_interface" prot="public">KWin::PointerSwipeGestureV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_popup_input_filter" prot="public">KWin::PopupInputFilter</innerclass>
    <innerclass refid="class_k_win_1_1_position_update_blocker" prot="public">KWin::PositionUpdateBlocker</innerclass>
    <innerclass refid="class_k_win_1_1_presentation_feedback" prot="public">KWin::PresentationFeedback</innerclass>
    <innerclass refid="class_k_win_1_1_presentation_time" prot="public">KWin::PresentationTime</innerclass>
    <innerclass refid="class_k_win_1_1_presentation_time_feedback" prot="public">KWin::PresentationTimeFeedback</innerclass>
    <innerclass refid="class_k_win_1_1_primary_selection_device_manager_v1_interface" prot="public">KWin::PrimarySelectionDeviceManagerV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_primary_selection_device_manager_v1_interface_private" prot="public">KWin::PrimarySelectionDeviceManagerV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_primary_selection_device_v1_interface" prot="public">KWin::PrimarySelectionDeviceV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_primary_selection_device_v1_interface_private" prot="public">KWin::PrimarySelectionDeviceV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_primary_selection_offer_v1_interface" prot="public">KWin::PrimarySelectionOfferV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_primary_selection_offer_v1_interface_private" prot="public">KWin::PrimarySelectionOfferV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_primary_selection_source_v1_interface" prot="public">KWin::PrimarySelectionSourceV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_primary_selection_source_v1_interface_private" prot="public">KWin::PrimarySelectionSourceV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_q_painter_backend" prot="public">KWin::QPainterBackend</innerclass>
    <innerclass refid="class_k_win_1_1_q_painter_shadow_texture_provider" prot="public">KWin::QPainterShadowTextureProvider</innerclass>
    <innerclass refid="class_k_win_1_1_q_painter_surface_texture" prot="public">KWin::QPainterSurfaceTexture</innerclass>
    <innerclass refid="class_k_win_1_1_q_painter_swapchain" prot="public">KWin::QPainterSwapchain</innerclass>
    <innerclass refid="class_k_win_1_1_q_painter_swapchain_slot" prot="public">KWin::QPainterSwapchainSlot</innerclass>
    <innerclass refid="class_k_win_1_1_qt_script_workspace_wrapper" prot="public">KWin::QtScriptWorkspaceWrapper</innerclass>
    <innerclass refid="class_k_win_1_1_quick_root_tile" prot="public">KWin::QuickRootTile</innerclass>
    <innerclass refid="class_k_win_1_1_quick_scene_effect" prot="public">KWin::QuickSceneEffect</innerclass>
    <innerclass refid="class_k_win_1_1_quick_scene_effect_private" prot="public">KWin::QuickSceneEffectPrivate</innerclass>
    <innerclass refid="class_k_win_1_1_quick_scene_view" prot="public">KWin::QuickSceneView</innerclass>
    <innerclass refid="class_k_win_1_1_quick_scene_view_incubator" prot="public">KWin::QuickSceneViewIncubator</innerclass>
    <innerclass refid="class_k_win_1_1_ram_file" prot="public">KWin::RamFile</innerclass>
    <innerclass refid="struct_k_win_1_1_realtime_feedback_pinch_shortcut" prot="public">KWin::RealtimeFeedbackPinchShortcut</innerclass>
    <innerclass refid="struct_k_win_1_1_realtime_feedback_swipe_shortcut" prot="public">KWin::RealtimeFeedbackSwipeShortcut</innerclass>
    <innerclass refid="class_k_win_1_1_region_interface" prot="public">KWin::RegionInterface</innerclass>
    <innerclass refid="class_k_win_1_1_region_screen_cast_scrapper" prot="public">KWin::RegionScreenCastScrapper</innerclass>
    <innerclass refid="class_k_win_1_1_region_screen_cast_source" prot="public">KWin::RegionScreenCastSource</innerclass>
    <innerclass refid="class_k_win_1_1_relative_pointer_manager_v1_interface" prot="public">KWin::RelativePointerManagerV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_relative_pointer_manager_v1_interface_private" prot="public">KWin::RelativePointerManagerV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_relative_pointer_v1_interface" prot="public">KWin::RelativePointerV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_render_backend" prot="public">KWin::RenderBackend</innerclass>
    <innerclass refid="class_k_win_1_1_render_geometry" prot="public">KWin::RenderGeometry</innerclass>
    <innerclass refid="class_k_win_1_1_render_journal" prot="public">KWin::RenderJournal</innerclass>
    <innerclass refid="class_k_win_1_1_render_layer" prot="public">KWin::RenderLayer</innerclass>
    <innerclass refid="class_k_win_1_1_render_layer_delegate" prot="public">KWin::RenderLayerDelegate</innerclass>
    <innerclass refid="class_k_win_1_1_render_loop" prot="public">KWin::RenderLoop</innerclass>
    <innerclass refid="class_k_win_1_1_render_loop_private" prot="public">KWin::RenderLoopPrivate</innerclass>
    <innerclass refid="class_k_win_1_1_render_target" prot="public">KWin::RenderTarget</innerclass>
    <innerclass refid="class_k_win_1_1_render_time_query" prot="public">KWin::RenderTimeQuery</innerclass>
    <innerclass refid="struct_k_win_1_1_render_time_span" prot="public">KWin::RenderTimeSpan</innerclass>
    <innerclass refid="class_k_win_1_1_render_viewport" prot="public">KWin::RenderViewport</innerclass>
    <innerclass refid="class_k_win_1_1_root_info" prot="public">KWin::RootInfo</innerclass>
    <innerclass refid="class_k_win_1_1_root_info_filter" prot="public">KWin::RootInfoFilter</innerclass>
    <innerclass refid="class_k_win_1_1_root_item" prot="public">KWin::RootItem</innerclass>
    <innerclass refid="class_k_win_1_1_root_tile" prot="public">KWin::RootTile</innerclass>
    <innerclass refid="class_k_win_1_1_rotating_arcs_item" prot="public">KWin::RotatingArcsItem</innerclass>
    <innerclass refid="class_k_win_1_1_rule_book" prot="public">KWin::RuleBook</innerclass>
    <innerclass refid="class_k_win_1_1_rule_book_model" prot="public">KWin::RuleBookModel</innerclass>
    <innerclass refid="class_k_win_1_1_rule_book_settings" prot="public">KWin::RuleBookSettings</innerclass>
    <innerclass refid="class_k_win_1_1_rule_item" prot="public">KWin::RuleItem</innerclass>
    <innerclass refid="class_k_win_1_1_rule_policy" prot="public">KWin::RulePolicy</innerclass>
    <innerclass refid="class_k_win_1_1_rules" prot="public">KWin::Rules</innerclass>
    <innerclass refid="class_k_win_1_1_rules_model" prot="public">KWin::RulesModel</innerclass>
    <innerclass refid="class_k_win_1_1_scene" prot="public">KWin::Scene</innerclass>
    <innerclass refid="class_k_win_1_1_scene_delegate" prot="public">KWin::SceneDelegate</innerclass>
    <innerclass refid="class_k_win_1_1_scene_open_g_l_decoration_renderer" prot="public">KWin::SceneOpenGLDecorationRenderer</innerclass>
    <innerclass refid="class_k_win_1_1_scene_q_painter_decoration_renderer" prot="public">KWin::SceneQPainterDecorationRenderer</innerclass>
    <innerclass refid="class_k_win_1_1_screen_cast_buffer" prot="public">KWin::ScreenCastBuffer</innerclass>
    <innerclass refid="struct_k_win_1_1_screen_cast_dma_buf_texture_params" prot="public">KWin::ScreenCastDmaBufTextureParams</innerclass>
    <innerclass refid="class_k_win_1_1_screencast_manager" prot="public">KWin::ScreencastManager</innerclass>
    <innerclass refid="class_k_win_1_1_screen_cast_source" prot="public">KWin::ScreenCastSource</innerclass>
    <innerclass refid="class_k_win_1_1_screen_cast_stream" prot="public">KWin::ScreenCastStream</innerclass>
    <innerclass refid="class_k_win_1_1_screencast_stream_v1_interface" prot="public">KWin::ScreencastStreamV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_screencast_stream_v1_interface_private" prot="public">KWin::ScreencastStreamV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_screencast_v1_interface" prot="public">KWin::ScreencastV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_screencast_v1_interface_private" prot="public">KWin::ScreencastV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_screen_edge_effect" prot="public">KWin::ScreenEdgeEffect</innerclass>
    <innerclass refid="class_k_win_1_1_screen_edge_handler" prot="public">KWin::ScreenEdgeHandler</innerclass>
    <innerclass refid="class_k_win_1_1_screen_edge_input_filter" prot="public">KWin::ScreenEdgeInputFilter</innerclass>
    <innerclass refid="class_k_win_1_1_screen_edge_manager_v1_interface" prot="public">KWin::ScreenEdgeManagerV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_screen_edge_manager_v1_interface_private" prot="public">KWin::ScreenEdgeManagerV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_screen_edges" prot="public">KWin::ScreenEdges</innerclass>
    <innerclass refid="class_k_win_1_1_screen_locker_watcher" prot="public">KWin::ScreenLockerWatcher</innerclass>
    <innerclass refid="class_k_win_1_1_screen_pre_paint_data" prot="public">KWin::ScreenPrePaintData</innerclass>
    <innerclass refid="struct_k_win_1_1_screen_shot_area_data" prot="public">KWin::ScreenShotAreaData</innerclass>
    <innerclass refid="class_k_win_1_1_screen_shot_d_bus_interface2" prot="public">KWin::ScreenShotDBusInterface2</innerclass>
    <innerclass refid="class_k_win_1_1_screen_shot_effect" prot="public">KWin::ScreenShotEffect</innerclass>
    <innerclass refid="struct_k_win_1_1_screen_shot_screen_data" prot="public">KWin::ScreenShotScreenData</innerclass>
    <innerclass refid="class_k_win_1_1_screen_shot_sink_pipe2" prot="public">KWin::ScreenShotSinkPipe2</innerclass>
    <innerclass refid="class_k_win_1_1_screen_shot_source2" prot="public">KWin::ScreenShotSource2</innerclass>
    <innerclass refid="class_k_win_1_1_screen_shot_source_area2" prot="public">KWin::ScreenShotSourceArea2</innerclass>
    <innerclass refid="class_k_win_1_1_screen_shot_source_screen2" prot="public">KWin::ScreenShotSourceScreen2</innerclass>
    <innerclass refid="class_k_win_1_1_screen_shot_source_window2" prot="public">KWin::ScreenShotSourceWindow2</innerclass>
    <innerclass refid="struct_k_win_1_1_screen_shot_window_data" prot="public">KWin::ScreenShotWindowData</innerclass>
    <innerclass refid="class_k_win_1_1_screen_shot_writer2" prot="public">KWin::ScreenShotWriter2</innerclass>
    <innerclass refid="class_k_win_1_1_screen_transform_effect" prot="public">KWin::ScreenTransformEffect</innerclass>
    <innerclass refid="class_k_win_1_1_script" prot="public">KWin::Script</innerclass>
    <innerclass refid="class_k_win_1_1_scripted_effect" prot="public">KWin::ScriptedEffect</innerclass>
    <innerclass refid="class_k_win_1_1_scripted_effect_config" prot="public">KWin::ScriptedEffectConfig</innerclass>
    <innerclass refid="class_k_win_1_1_scripted_effect_loader" prot="public">KWin::ScriptedEffectLoader</innerclass>
    <innerclass refid="class_k_win_1_1_scripted_quick_scene_effect" prot="public">KWin::ScriptedQuickSceneEffect</innerclass>
    <innerclass refid="class_k_win_1_1_scripting" prot="public">KWin::Scripting</innerclass>
    <innerclass refid="class_k_win_1_1_scripting_config" prot="public">KWin::ScriptingConfig</innerclass>
    <innerclass refid="class_k_win_1_1_script_timer" prot="public">KWin::ScriptTimer</innerclass>
    <innerclass refid="class_k_win_1_1_seat_interface" prot="public">KWin::SeatInterface</innerclass>
    <innerclass refid="class_k_win_1_1_seat_interface_private" prot="public">KWin::SeatInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_security_context" prot="public">KWin::SecurityContext</innerclass>
    <innerclass refid="class_k_win_1_1_security_context_manager_v1_interface" prot="public">KWin::SecurityContextManagerV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_security_context_manager_v1_interface_private" prot="public">KWin::SecurityContextManagerV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_security_context_v1_interface" prot="public">KWin::SecurityContextV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_server_side_decoration_interface" prot="public">KWin::ServerSideDecorationInterface</innerclass>
    <innerclass refid="class_k_win_1_1_server_side_decoration_interface_private" prot="public">KWin::ServerSideDecorationInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_server_side_decoration_manager_interface" prot="public">KWin::ServerSideDecorationManagerInterface</innerclass>
    <innerclass refid="class_k_win_1_1_server_side_decoration_manager_interface_private" prot="public">KWin::ServerSideDecorationManagerInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_server_side_decoration_palette_interface" prot="public">KWin::ServerSideDecorationPaletteInterface</innerclass>
    <innerclass refid="class_k_win_1_1_server_side_decoration_palette_interface_private" prot="public">KWin::ServerSideDecorationPaletteInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_server_side_decoration_palette_manager_interface" prot="public">KWin::ServerSideDecorationPaletteManagerInterface</innerclass>
    <innerclass refid="class_k_win_1_1_server_side_decoration_palette_manager_interface_private" prot="public">KWin::ServerSideDecorationPaletteManagerInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_session" prot="public">KWin::Session</innerclass>
    <innerclass refid="struct_k_win_1_1_session_info" prot="public">KWin::SessionInfo</innerclass>
    <innerclass refid="class_k_win_1_1_session_manager" prot="public">KWin::SessionManager</innerclass>
    <innerclass refid="class_k_win_1_1_shader_binder" prot="public">KWin::ShaderBinder</innerclass>
    <innerclass refid="class_k_win_1_1_shader_manager" prot="public">KWin::ShaderManager</innerclass>
    <innerclass refid="class_k_win_1_1_shadow" prot="public">KWin::Shadow</innerclass>
    <innerclass refid="class_k_win_1_1_shadow_interface" prot="public">KWin::ShadowInterface</innerclass>
    <innerclass refid="class_k_win_1_1_shadow_interface_private" prot="public">KWin::ShadowInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_shadow_item" prot="public">KWin::ShadowItem</innerclass>
    <innerclass refid="class_k_win_1_1_shadow_manager_interface" prot="public">KWin::ShadowManagerInterface</innerclass>
    <innerclass refid="class_k_win_1_1_shadow_manager_interface_private" prot="public">KWin::ShadowManagerInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_shadow_texture_provider" prot="public">KWin::ShadowTextureProvider</innerclass>
    <innerclass refid="class_k_win_1_1_shake_cursor_effect" prot="public">KWin::ShakeCursorEffect</innerclass>
    <innerclass refid="class_k_win_1_1_shake_cursor_item" prot="public">KWin::ShakeCursorItem</innerclass>
    <innerclass refid="class_k_win_1_1_shake_detector" prot="public">KWin::ShakeDetector</innerclass>
    <innerclass refid="class_k_win_1_1_shape_cursor_source" prot="public">KWin::ShapeCursorSource</innerclass>
    <innerclass refid="class_k_win_1_1_sheet_effect" prot="public">KWin::SheetEffect</innerclass>
    <innerclass refid="struct_k_win_1_1_shm_access" prot="public">KWin::ShmAccess</innerclass>
    <innerclass refid="struct_k_win_1_1_shm_attributes" prot="public">KWin::ShmAttributes</innerclass>
    <innerclass refid="class_k_win_1_1_shm_client_buffer" prot="public">KWin::ShmClientBuffer</innerclass>
    <innerclass refid="class_k_win_1_1_shm_client_buffer_integration" prot="public">KWin::ShmClientBufferIntegration</innerclass>
    <innerclass refid="class_k_win_1_1_shm_client_buffer_integration_private" prot="public">KWin::ShmClientBufferIntegrationPrivate</innerclass>
    <innerclass refid="class_k_win_1_1_shm_graphics_buffer" prot="public">KWin::ShmGraphicsBuffer</innerclass>
    <innerclass refid="class_k_win_1_1_shm_graphics_buffer_allocator" prot="public">KWin::ShmGraphicsBufferAllocator</innerclass>
    <innerclass refid="class_k_win_1_1_shm_pool" prot="public">KWin::ShmPool</innerclass>
    <innerclass refid="class_k_win_1_1_shortcut_dialog" prot="public">KWin::ShortcutDialog</innerclass>
    <innerclass refid="class_k_win_1_1_shortcut_handler" prot="public">KWin::ShortcutHandler</innerclass>
    <innerclass refid="class_k_win_1_1_show_compositing_effect" prot="public">KWin::ShowCompositingEffect</innerclass>
    <innerclass refid="class_k_win_1_1_show_fps_effect" prot="public">KWin::ShowFpsEffect</innerclass>
    <innerclass refid="class_k_win_1_1_show_paint_effect" prot="public">KWin::ShowPaintEffect</innerclass>
    <innerclass refid="class_k_win_1_1_show_paint_effect_config" prot="public">KWin::ShowPaintEffectConfig</innerclass>
    <innerclass refid="class_k_win_1_1_slide_back_effect" prot="public">KWin::SlideBackEffect</innerclass>
    <innerclass refid="class_k_win_1_1_slide_effect" prot="public">KWin::SlideEffect</innerclass>
    <innerclass refid="class_k_win_1_1_slide_effect_config" prot="public">KWin::SlideEffectConfig</innerclass>
    <innerclass refid="class_k_win_1_1_slide_interface" prot="public">KWin::SlideInterface</innerclass>
    <innerclass refid="class_k_win_1_1_slide_interface_private" prot="public">KWin::SlideInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_slide_manager_interface" prot="public">KWin::SlideManagerInterface</innerclass>
    <innerclass refid="class_k_win_1_1_slide_manager_interface_private" prot="public">KWin::SlideManagerInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_sliding_popups_effect" prot="public">KWin::SlidingPopupsEffect</innerclass>
    <innerclass refid="class_k_win_1_1_snap_helper_effect" prot="public">KWin::SnapHelperEffect</innerclass>
    <innerclass refid="struct_k_win_1_1_socket_pair" prot="public">KWin::SocketPair</innerclass>
    <innerclass refid="class_k_win_1_1_software_vsync_monitor" prot="public">KWin::SoftwareVsyncMonitor</innerclass>
    <innerclass refid="class_k_win_1_1_spring_motion" prot="public">KWin::SpringMotion</innerclass>
    <innerclass refid="class_k_win_1_1_stacking_updates_blocker" prot="public">KWin::StackingUpdatesBlocker</innerclass>
    <innerclass refid="class_k_win_1_1_startup_feedback_effect" prot="public">KWin::StartupFeedbackEffect</innerclass>
    <innerclass refid="class_k_win_1_1_strut_rect" prot="public">KWin::StrutRect</innerclass>
    <innerclass refid="class_k_win_1_1_sub_compositor_interface" prot="public">KWin::SubCompositorInterface</innerclass>
    <innerclass refid="class_k_win_1_1_sub_compositor_interface_private" prot="public">KWin::SubCompositorInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_sub_surface_interface" prot="public">KWin::SubSurfaceInterface</innerclass>
    <innerclass refid="class_k_win_1_1_sub_surface_interface_private" prot="public">KWin::SubSurfaceInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_sub_surface_monitor" prot="public">KWin::SubSurfaceMonitor</innerclass>
    <innerclass refid="class_k_win_1_1_surface_cursor" prot="public">KWin::SurfaceCursor</innerclass>
    <innerclass refid="class_k_win_1_1_surface_cursor_source" prot="public">KWin::SurfaceCursorSource</innerclass>
    <innerclass refid="class_k_win_1_1_surface_extension" prot="public">KWin::SurfaceExtension</innerclass>
    <innerclass refid="class_k_win_1_1_surface_interface" prot="public">KWin::SurfaceInterface</innerclass>
    <innerclass refid="class_k_win_1_1_surface_interface_private" prot="public">KWin::SurfaceInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_surface_item" prot="public">KWin::SurfaceItem</innerclass>
    <innerclass refid="class_k_win_1_1_surface_item_internal" prot="public">KWin::SurfaceItemInternal</innerclass>
    <innerclass refid="class_k_win_1_1_surface_item_wayland" prot="public">KWin::SurfaceItemWayland</innerclass>
    <innerclass refid="class_k_win_1_1_surface_pixmap" prot="public">KWin::SurfacePixmap</innerclass>
    <innerclass refid="class_k_win_1_1_surface_role" prot="public">KWin::SurfaceRole</innerclass>
    <innerclass refid="struct_k_win_1_1_surface_state" prot="public">KWin::SurfaceState</innerclass>
    <innerclass refid="class_k_win_1_1_surface_texture" prot="public">KWin::SurfaceTexture</innerclass>
    <innerclass refid="struct_k_win_1_1_svg_cursor_meta_data" prot="public">KWin::SvgCursorMetaData</innerclass>
    <innerclass refid="struct_k_win_1_1_svg_cursor_meta_data_entry" prot="public">KWin::SvgCursorMetaDataEntry</innerclass>
    <innerclass refid="class_k_win_1_1_svg_cursor_reader" prot="public">KWin::SvgCursorReader</innerclass>
    <innerclass refid="class_k_win_1_1_swipe_gesture" prot="public">KWin::SwipeGesture</innerclass>
    <innerclass refid="class_k_win_1_1_swipe_gesture_handler" prot="public">KWin::SwipeGestureHandler</innerclass>
    <innerclass refid="struct_k_win_1_1_switch_event" prot="public">KWin::SwitchEvent</innerclass>
    <innerclass refid="class_k_win_1_1_sync_alarm_x11_filter" prot="public">KWin::SyncAlarmX11Filter</innerclass>
    <innerclass refid="class_k_win_1_1_sync_release_point" prot="public">KWin::SyncReleasePoint</innerclass>
    <innerclass refid="class_k_win_1_1_sync_timeline" prot="public">KWin::SyncTimeline</innerclass>
    <innerclass refid="class_k_win_1_1_system_bell_effect" prot="public">KWin::SystemBellEffect</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_input_redirection" prot="public">KWin::TabletInputRedirection</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_manager_v2_interface" prot="public">KWin::TabletManagerV2Interface</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_manager_v2_interface_private" prot="public">KWin::TabletManagerV2InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_mode_manager" prot="public">KWin::TabletModeManager</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_mode_switch_event_spy" prot="public">KWin::TabletModeSwitchEventSpy</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_mode_touchpad_removed_spy" prot="public">KWin::TabletModeTouchpadRemovedSpy</innerclass>
    <innerclass refid="struct_k_win_1_1_tablet_pad_button_event" prot="public">KWin::TabletPadButtonEvent</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_pad_group_v2_interface" prot="public">KWin::TabletPadGroupV2Interface</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_pad_group_v2_interface_private" prot="public">KWin::TabletPadGroupV2InterfacePrivate</innerclass>
    <innerclass refid="struct_k_win_1_1_tablet_pad_ring_event" prot="public">KWin::TabletPadRingEvent</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_pad_ring_v2_interface" prot="public">KWin::TabletPadRingV2Interface</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_pad_ring_v2_interface_private" prot="public">KWin::TabletPadRingV2InterfacePrivate</innerclass>
    <innerclass refid="struct_k_win_1_1_tablet_pad_strip_event" prot="public">KWin::TabletPadStripEvent</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_pad_strip_v2_interface" prot="public">KWin::TabletPadStripV2Interface</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_pad_strip_v2_interface_private" prot="public">KWin::TabletPadStripV2InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_pad_v2_interface" prot="public">KWin::TabletPadV2Interface</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_pad_v2_interface_private" prot="public">KWin::TabletPadV2InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_seat_v2_interface" prot="public">KWin::TabletSeatV2Interface</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_seat_v2_interface_private" prot="public">KWin::TabletSeatV2InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_surface_cursor_v2" prot="public">KWin::TabletSurfaceCursorV2</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_surface_cursor_v2_private" prot="public">KWin::TabletSurfaceCursorV2Private</innerclass>
    <innerclass refid="struct_k_win_1_1_tablet_tool_axis_event" prot="public">KWin::TabletToolAxisEvent</innerclass>
    <innerclass refid="struct_k_win_1_1_tablet_tool_button_event" prot="public">KWin::TabletToolButtonEvent</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_tool_event" prot="public">KWin::TabletToolEvent</innerclass>
    <innerclass refid="struct_k_win_1_1_tablet_tool_proximity_event" prot="public">KWin::TabletToolProximityEvent</innerclass>
    <innerclass refid="struct_k_win_1_1_tablet_tool_tip_event" prot="public">KWin::TabletToolTipEvent</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_tool_v2_interface" prot="public">KWin::TabletToolV2Interface</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_tool_v2_interface_private" prot="public">KWin::TabletToolV2InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_v2_interface" prot="public">KWin::TabletV2Interface</innerclass>
    <innerclass refid="class_k_win_1_1_tablet_v2_interface_private" prot="public">KWin::TabletV2InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_tearing_control_manager_v1_interface" prot="public">KWin::TearingControlManagerV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_tearing_control_manager_v1_interface_private" prot="public">KWin::TearingControlManagerV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_tearing_control_v1_interface" prot="public">KWin::TearingControlV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_text_input_manager_v1_interface" prot="public">KWin::TextInputManagerV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_text_input_manager_v1_interface_private" prot="public">KWin::TextInputManagerV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_text_input_manager_v2_interface" prot="public">KWin::TextInputManagerV2Interface</innerclass>
    <innerclass refid="class_k_win_1_1_text_input_manager_v2_interface_private" prot="public">KWin::TextInputManagerV2InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_text_input_manager_v3_interface" prot="public">KWin::TextInputManagerV3Interface</innerclass>
    <innerclass refid="class_k_win_1_1_text_input_manager_v3_interface_private" prot="public">KWin::TextInputManagerV3InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_text_input_v1_interface" prot="public">KWin::TextInputV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_text_input_v1_interface_private" prot="public">KWin::TextInputV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_text_input_v2_interface" prot="public">KWin::TextInputV2Interface</innerclass>
    <innerclass refid="class_k_win_1_1_text_input_v2_interface_private" prot="public">KWin::TextInputV2InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_text_input_v3_interface" prot="public">KWin::TextInputV3Interface</innerclass>
    <innerclass refid="class_k_win_1_1_text_input_v3_interface_private" prot="public">KWin::TextInputV3InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_thumbnail_aside_effect" prot="public">KWin::ThumbnailAsideEffect</innerclass>
    <innerclass refid="class_k_win_1_1_thumbnail_aside_effect_config" prot="public">KWin::ThumbnailAsideEffectConfig</innerclass>
    <innerclass refid="class_k_win_1_1_thumbnail_texture_provider" prot="public">KWin::ThumbnailTextureProvider</innerclass>
    <innerclass refid="class_k_win_1_1_thumbnail_texture_provider_cleanup_job" prot="public">KWin::ThumbnailTextureProviderCleanupJob</innerclass>
    <innerclass refid="class_k_win_1_1_tile" prot="public">KWin::Tile</innerclass>
    <innerclass refid="class_k_win_1_1_tile_manager" prot="public">KWin::TileManager</innerclass>
    <innerclass refid="class_k_win_1_1_tile_model" prot="public">KWin::TileModel</innerclass>
    <innerclass refid="class_k_win_1_1_tiles_editor_effect" prot="public">KWin::TilesEditorEffect</innerclass>
    <innerclass refid="class_k_win_1_1_tiles_editor_effect_config" prot="public">KWin::TilesEditorEffectConfig</innerclass>
    <innerclass refid="class_k_win_1_1_time_line" prot="public">KWin::TimeLine</innerclass>
    <innerclass refid="class_k_win_1_1_touch_callback" prot="public">KWin::TouchCallback</innerclass>
    <innerclass refid="class_k_win_1_1_touch_input_redirection" prot="public">KWin::TouchInputRedirection</innerclass>
    <innerclass refid="class_k_win_1_1_touch_interface" prot="public">KWin::TouchInterface</innerclass>
    <innerclass refid="class_k_win_1_1_touch_interface_private" prot="public">KWin::TouchInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_touchpad_shortcuts" prot="public">KWin::TouchpadShortcuts</innerclass>
    <innerclass refid="class_k_win_1_1_touch_point" prot="public">KWin::TouchPoint</innerclass>
    <innerclass refid="class_k_win_1_1_touch_points_effect" prot="public">KWin::TouchPointsEffect</innerclass>
    <innerclass refid="class_k_win_1_1_track_mouse_effect" prot="public">KWin::TrackMouseEffect</innerclass>
    <innerclass refid="class_k_win_1_1_track_mouse_effect_config" prot="public">KWin::TrackMouseEffectConfig</innerclass>
    <innerclass refid="class_k_win_1_1_transaction" prot="public">KWin::Transaction</innerclass>
    <innerclass refid="class_k_win_1_1_transaction_dma_buf_locker" prot="public">KWin::TransactionDmaBufLocker</innerclass>
    <innerclass refid="struct_k_win_1_1_transaction_entry" prot="public">KWin::TransactionEntry</innerclass>
    <innerclass refid="class_k_win_1_1_transaction_event_fd_locker" prot="public">KWin::TransactionEventFdLocker</innerclass>
    <innerclass refid="class_k_win_1_1_transfer_function" prot="public">KWin::TransferFunction</innerclass>
    <innerclass refid="struct_k_win_1_1_trans_key" prot="public">KWin::TransKey</innerclass>
    <innerclass refid="class_k_win_1_1_udev" prot="public">KWin::Udev</innerclass>
    <innerclass refid="class_k_win_1_1_udev_device" prot="public">KWin::UdevDevice</innerclass>
    <innerclass refid="class_k_win_1_1_udev_enumerate" prot="public">KWin::UdevEnumerate</innerclass>
    <innerclass refid="class_k_win_1_1_udev_monitor" prot="public">KWin::UdevMonitor</innerclass>
    <innerclass refid="class_k_win_1_1_unix_socket_address" prot="public">KWin::UnixSocketAddress</innerclass>
    <innerclass refid="class_k_win_1_1_user_actions_menu" prot="public">KWin::UserActionsMenu</innerclass>
    <innerclass refid="class_k_win_1_1_user_activity_spy" prot="public">KWin::UserActivitySpy</innerclass>
    <innerclass refid="class_k_win_1_1_value_range" prot="public">KWin::ValueRange</innerclass>
    <innerclass refid="class_k_win_1_1_version" prot="public">KWin::Version</innerclass>
    <innerclass refid="struct_k_win_1_1_vertex_attrib" prot="public">KWin::VertexAttrib</innerclass>
    <innerclass refid="class_k_win_1_1_viewporter_interface" prot="public">KWin::ViewporterInterface</innerclass>
    <innerclass refid="class_k_win_1_1_viewporter_interface_private" prot="public">KWin::ViewporterInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_viewport_interface" prot="public">KWin::ViewportInterface</innerclass>
    <innerclass refid="class_k_win_1_1_virtual_backend" prot="public">KWin::VirtualBackend</innerclass>
    <innerclass refid="class_k_win_1_1_virtual_desktop" prot="public">KWin::VirtualDesktop</innerclass>
    <innerclass refid="class_k_win_1_1_virtual_desktop_grid" prot="public">KWin::VirtualDesktopGrid</innerclass>
    <innerclass refid="class_k_win_1_1_virtual_desktop_manager" prot="public">KWin::VirtualDesktopManager</innerclass>
    <innerclass refid="class_k_win_1_1_virtual_desktop_manager_d_bus_interface" prot="public">KWin::VirtualDesktopManagerDBusInterface</innerclass>
    <innerclass refid="class_k_win_1_1_virtual_desktop_model" prot="public">KWin::VirtualDesktopModel</innerclass>
    <innerclass refid="class_k_win_1_1_virtual_desktops" prot="public">KWin::VirtualDesktops</innerclass>
    <innerclass refid="class_k_win_1_1_virtual_desktops_data" prot="public">KWin::VirtualDesktopsData</innerclass>
    <innerclass refid="class_k_win_1_1_virtual_egl_backend" prot="public">KWin::VirtualEglBackend</innerclass>
    <innerclass refid="class_k_win_1_1_virtual_egl_gbm_layer" prot="public">KWin::VirtualEglGbmLayer</innerclass>
    <innerclass refid="class_k_win_1_1_virtual_egl_layer" prot="public">KWin::VirtualEglLayer</innerclass>
    <innerclass refid="class_k_win_1_1_virtual_keyboard_d_bus" prot="public">KWin::VirtualKeyboardDBus</innerclass>
    <innerclass refid="class_k_win_1_1_virtual_output" prot="public">KWin::VirtualOutput</innerclass>
    <innerclass refid="class_k_win_1_1_virtual_q_painter_backend" prot="public">KWin::VirtualQPainterBackend</innerclass>
    <innerclass refid="class_k_win_1_1_virtual_q_painter_layer" prot="public">KWin::VirtualQPainterLayer</innerclass>
    <innerclass refid="class_k_win_1_1_virtual_terminal_filter" prot="public">KWin::VirtualTerminalFilter</innerclass>
    <innerclass refid="class_k_win_1_1_vsync_monitor" prot="public">KWin::VsyncMonitor</innerclass>
    <innerclass refid="class_k_win_1_1_wayland_cursor_image" prot="public">KWin::WaylandCursorImage</innerclass>
    <innerclass refid="class_k_win_1_1_wayland_server" prot="public">KWin::WaylandServer</innerclass>
    <innerclass refid="class_k_win_1_1_wayland_shell_integration" prot="public">KWin::WaylandShellIntegration</innerclass>
    <innerclass refid="class_k_win_1_1_wayland_window" prot="public">KWin::WaylandWindow</innerclass>
    <innerclass refid="class_k_win_1_1_window" prot="public">KWin::Window</innerclass>
    <innerclass refid="class_k_win_1_1_window_action_input_filter" prot="public">KWin::WindowActionInputFilter</innerclass>
    <innerclass refid="class_k_win_1_1_window_effects" prot="public">KWin::WindowEffects</innerclass>
    <innerclass refid="class_k_win_1_1_window_filter_model" prot="public">KWin::WindowFilterModel</innerclass>
    <innerclass refid="class_k_win_1_1_window_interacted_spy" prot="public">KWin::WindowInteractedSpy</innerclass>
    <innerclass refid="class_k_win_1_1_window_item" prot="public">KWin::WindowItem</innerclass>
    <innerclass refid="class_k_win_1_1_window_item_internal" prot="public">KWin::WindowItemInternal</innerclass>
    <innerclass refid="class_k_win_1_1_window_item_wayland" prot="public">KWin::WindowItemWayland</innerclass>
    <innerclass refid="class_k_win_1_1_window_model" prot="public">KWin::WindowModel</innerclass>
    <innerclass refid="class_k_win_1_1_window_motion_manager" prot="public">KWin::WindowMotionManager</innerclass>
    <innerclass refid="class_k_win_1_1_window_paint_data" prot="public">KWin::WindowPaintData</innerclass>
    <innerclass refid="class_k_win_1_1_window_paint_data_private" prot="public">KWin::WindowPaintDataPrivate</innerclass>
    <innerclass refid="class_k_win_1_1_window_pre_paint_data" prot="public">KWin::WindowPrePaintData</innerclass>
    <innerclass refid="class_k_win_1_1_window_property_notify_x11_filter" prot="public">KWin::WindowPropertyNotifyX11Filter</innerclass>
    <innerclass refid="class_k_win_1_1_window_quad" prot="public">KWin::WindowQuad</innerclass>
    <innerclass refid="class_k_win_1_1_window_quad_list" prot="public">KWin::WindowQuadList</innerclass>
    <innerclass refid="class_k_win_1_1_window_rules" prot="public">KWin::WindowRules</innerclass>
    <innerclass refid="class_k_win_1_1_window_screen_cast_source" prot="public">KWin::WindowScreenCastSource</innerclass>
    <innerclass refid="class_k_win_1_1_window_selector_filter" prot="public">KWin::WindowSelectorFilter</innerclass>
    <innerclass refid="class_k_win_1_1_window_shadow" prot="public">KWin::WindowShadow</innerclass>
    <innerclass refid="class_k_win_1_1_window_shadow_tile" prot="public">KWin::WindowShadowTile</innerclass>
    <innerclass refid="class_k_win_1_1_window_system" prot="public">KWin::WindowSystem</innerclass>
    <innerclass refid="class_k_win_1_1_window_thumbnail_item" prot="public">KWin::WindowThumbnailItem</innerclass>
    <innerclass refid="class_k_win_1_1_window_thumbnail_source" prot="public">KWin::WindowThumbnailSource</innerclass>
    <innerclass refid="class_k_win_1_1_window_vertex" prot="public">KWin::WindowVertex</innerclass>
    <innerclass refid="class_k_win_1_1_window_view_effect" prot="public">KWin::WindowViewEffect</innerclass>
    <innerclass refid="class_k_win_1_1_window_view_effect_config" prot="public">KWin::WindowViewEffectConfig</innerclass>
    <innerclass refid="class_k_win_1_1_win_info" prot="public">KWin::WinInfo</innerclass>
    <innerclass refid="class_k_win_1_1_wobbly_windows_effect" prot="public">KWin::WobblyWindowsEffect</innerclass>
    <innerclass refid="class_k_win_1_1_wobbly_windows_effect_config" prot="public">KWin::WobblyWindowsEffectConfig</innerclass>
    <innerclass refid="class_k_win_1_1_workspace" prot="public">KWin::Workspace</innerclass>
    <innerclass refid="class_k_win_1_1_workspace_scene" prot="public">KWin::WorkspaceScene</innerclass>
    <innerclass refid="class_k_win_1_1_workspace_scene_open_g_l" prot="public">KWin::WorkspaceSceneOpenGL</innerclass>
    <innerclass refid="class_k_win_1_1_workspace_scene_q_painter" prot="public">KWin::WorkspaceSceneQPainter</innerclass>
    <innerclass refid="class_k_win_1_1_workspace_wrapper" prot="public">KWin::WorkspaceWrapper</innerclass>
    <innerclass refid="class_k_win_1_1_x11_event_filter" prot="public">KWin::X11EventFilter</innerclass>
    <innerclass refid="class_k_win_1_1_x11_event_filter_container" prot="public">KWin::X11EventFilterContainer</innerclass>
    <innerclass refid="class_k_win_1_1_x11_geometry_updates_blocker" prot="public">KWin::X11GeometryUpdatesBlocker</innerclass>
    <innerclass refid="class_k_win_1_1_x11_window" prot="public">KWin::X11Window</innerclass>
    <innerclass refid="class_k_win_1_1_x11_windowed_backend" prot="public">KWin::X11WindowedBackend</innerclass>
    <innerclass refid="struct_k_win_1_1_x11_windowed_backend_options" prot="public">KWin::X11WindowedBackendOptions</innerclass>
    <innerclass refid="class_k_win_1_1_x11_windowed_buffer" prot="public">KWin::X11WindowedBuffer</innerclass>
    <innerclass refid="class_k_win_1_1_x11_windowed_cursor" prot="public">KWin::X11WindowedCursor</innerclass>
    <innerclass refid="class_k_win_1_1_x11_windowed_egl_backend" prot="public">KWin::X11WindowedEglBackend</innerclass>
    <innerclass refid="class_k_win_1_1_x11_windowed_egl_cursor_layer" prot="public">KWin::X11WindowedEglCursorLayer</innerclass>
    <innerclass refid="class_k_win_1_1_x11_windowed_egl_primary_layer" prot="public">KWin::X11WindowedEglPrimaryLayer</innerclass>
    <innerclass refid="class_k_win_1_1_x11_windowed_input_backend" prot="public">KWin::X11WindowedInputBackend</innerclass>
    <innerclass refid="class_k_win_1_1_x11_windowed_input_device" prot="public">KWin::X11WindowedInputDevice</innerclass>
    <innerclass refid="class_k_win_1_1_x11_windowed_output" prot="public">KWin::X11WindowedOutput</innerclass>
    <innerclass refid="class_k_win_1_1_x11_windowed_q_painter_backend" prot="public">KWin::X11WindowedQPainterBackend</innerclass>
    <innerclass refid="class_k_win_1_1_x11_windowed_q_painter_cursor_layer" prot="public">KWin::X11WindowedQPainterCursorLayer</innerclass>
    <innerclass refid="class_k_win_1_1_x11_windowed_q_painter_primary_layer" prot="public">KWin::X11WindowedQPainterPrimaryLayer</innerclass>
    <innerclass refid="class_k_win_1_1_xcb_event_filter" prot="public">KWin::XcbEventFilter</innerclass>
    <innerclass refid="class_k_win_1_1_x_cursor_reader" prot="public">KWin::XCursorReader</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_activation_token_v1_interface" prot="public">KWin::XdgActivationTokenV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_activation_v1_integration" prot="public">KWin::XdgActivationV1Integration</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_activation_v1_interface" prot="public">KWin::XdgActivationV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_activation_v1_interface_private" prot="public">KWin::XdgActivationV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_decoration_manager_v1_interface" prot="public">KWin::XdgDecorationManagerV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_decoration_manager_v1_interface_private" prot="public">KWin::XdgDecorationManagerV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_dialog_v1_interface" prot="public">KWin::XdgDialogV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_dialog_v1_interface_private" prot="public">KWin::XdgDialogV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_dialog_wm_v1_interface" prot="public">KWin::XdgDialogWmV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_dialog_wm_v1_interface_private" prot="public">KWin::XdgDialogWmV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_dummy_imported_v2_interface" prot="public">KWin::XdgDummyImportedV2Interface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_exported_surface" prot="public">KWin::XdgExportedSurface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_exported_v2_interface" prot="public">KWin::XdgExportedV2Interface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_exporter_v2_interface" prot="public">KWin::XdgExporterV2Interface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_foreign_v2_interface" prot="public">KWin::XdgForeignV2Interface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_foreign_v2_interface_private" prot="public">KWin::XdgForeignV2InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_imported_v2_interface" prot="public">KWin::XdgImportedV2Interface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_importer_v2_interface" prot="public">KWin::XdgImporterV2Interface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_output_manager_v1_interface" prot="public">KWin::XdgOutputManagerV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_output_manager_v1_interface_private" prot="public">KWin::XdgOutputManagerV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_output_v1_interface" prot="public">KWin::XdgOutputV1Interface</innerclass>
    <innerclass refid="struct_k_win_1_1_xdg_popup_commit" prot="public">KWin::XdgPopupCommit</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_popup_interface" prot="public">KWin::XdgPopupInterface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_popup_interface_private" prot="public">KWin::XdgPopupInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_popup_window" prot="public">KWin::XdgPopupWindow</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_positioner" prot="public">KWin::XdgPositioner</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_positioner_data" prot="public">KWin::XdgPositionerData</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_positioner_private" prot="public">KWin::XdgPositionerPrivate</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_shell_integration" prot="public">KWin::XdgShellIntegration</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_shell_interface" prot="public">KWin::XdgShellInterface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_shell_interface_private" prot="public">KWin::XdgShellInterfacePrivate</innerclass>
    <innerclass refid="struct_k_win_1_1_xdg_surface_commit" prot="public">KWin::XdgSurfaceCommit</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_surface_configure" prot="public">KWin::XdgSurfaceConfigure</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_surface_interface" prot="public">KWin::XdgSurfaceInterface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_surface_interface_private" prot="public">KWin::XdgSurfaceInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_surface_window" prot="public">KWin::XdgSurfaceWindow</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_system_bell_v1_interface" prot="public">KWin::XdgSystemBellV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_system_bell_v1_interface_private" prot="public">KWin::XdgSystemBellV1InterfacePrivate</innerclass>
    <innerclass refid="struct_k_win_1_1_xdg_toplevel_commit" prot="public">KWin::XdgToplevelCommit</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_toplevel_configure" prot="public">KWin::XdgToplevelConfigure</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_toplevel_decoration_v1_interface" prot="public">KWin::XdgToplevelDecorationV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_toplevel_decoration_v1_interface_private" prot="public">KWin::XdgToplevelDecorationV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_toplevel_drag_manager_v1_interface" prot="public">KWin::XdgToplevelDragManagerV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_toplevel_drag_manager_v1_interface_private" prot="public">KWin::XdgToplevelDragManagerV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_toplevel_drag_v1_interface" prot="public">KWin::XdgToplevelDragV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_toplevel_drag_v1_interface_private" prot="public">KWin::XdgToplevelDragV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_toplevel_icon_manager_v1_interface" prot="public">KWin::XdgToplevelIconManagerV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_toplevel_icon_manager_v1_interface_private" prot="public">KWin::XdgToplevelIconManagerV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_toplevel_icon_v1_interface" prot="public">KWin::XdgToplevelIconV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_toplevel_interface" prot="public">KWin::XdgToplevelInterface</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_toplevel_interface_private" prot="public">KWin::XdgToplevelInterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_xdg_toplevel_window" prot="public">KWin::XdgToplevelWindow</innerclass>
    <innerclass refid="class_k_win_1_1_xkb" prot="public">KWin::Xkb</innerclass>
    <innerclass refid="class_k_win_1_1_x_server_grabber" prot="public">KWin::XServerGrabber</innerclass>
    <innerclass refid="class_k_win_1_1_xwayland_interface" prot="public">KWin::XwaylandInterface</innerclass>
    <innerclass refid="class_k_win_1_1_x_wayland_keyboard_grab_manager_v1_interface" prot="public">KWin::XWaylandKeyboardGrabManagerV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_x_wayland_keyboard_grab_manager_v1_interface_private" prot="public">KWin::XWaylandKeyboardGrabManagerV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_x_wayland_keyboard_grab_v1_interface" prot="public">KWin::XWaylandKeyboardGrabV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_x_wayland_keyboard_grab_v1_interface_private" prot="public">KWin::XWaylandKeyboardGrabV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_xwayland_shell_v1_interface" prot="public">KWin::XwaylandShellV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_xwayland_shell_v1_interface_private" prot="public">KWin::XwaylandShellV1InterfacePrivate</innerclass>
    <innerclass refid="class_k_win_1_1_xwayland_socket" prot="public">KWin::XwaylandSocket</innerclass>
    <innerclass refid="struct_k_win_1_1_xwayland_surface_v1_commit" prot="public">KWin::XwaylandSurfaceV1Commit</innerclass>
    <innerclass refid="class_k_win_1_1_xwayland_surface_v1_interface" prot="public">KWin::XwaylandSurfaceV1Interface</innerclass>
    <innerclass refid="class_k_win_1_1_xwayland_surface_v1_interface_private" prot="public">KWin::XwaylandSurfaceV1InterfacePrivate</innerclass>
    <innerclass refid="struct_k_win_1_1xy" prot="public">KWin::xy</innerclass>
    <innerclass refid="struct_k_win_1_1xy_y" prot="public">KWin::xyY</innerclass>
    <innerclass refid="struct_k_win_1_1_x_y_z" prot="public">KWin::XYZ</innerclass>
    <innerclass refid="struct_k_win_1_1_yuv_conversion" prot="public">KWin::YuvConversion</innerclass>
    <innerclass refid="struct_k_win_1_1_yuv_format" prot="public">KWin::YuvFormat</innerclass>
    <innerclass refid="class_k_win_1_1_zoom_accessibility_integration" prot="public">KWin::ZoomAccessibilityIntegration</innerclass>
    <innerclass refid="class_k_win_1_1_zoom_effect" prot="public">KWin::ZoomEffect</innerclass>
    <innerclass refid="class_k_win_1_1_zoom_effect_config" prot="public">KWin::ZoomEffectConfig</innerclass>
    <innernamespace refid="namespace_k_win_1_1_decoration">KWin::Decoration</innernamespace>
    <innernamespace refid="namespace_k_win_1_1_extended_cursor">KWin::ExtendedCursor</innernamespace>
    <innernamespace refid="namespace_k_win_1_1_f_s_p">KWin::FSP</innernamespace>
    <innernamespace refid="namespace_k_win_1_1_input_filter_order">KWin::InputFilterOrder</innernamespace>
    <innernamespace refid="namespace_k_win_1_1_keyboard_layout_switching">KWin::KeyboardLayoutSwitching</innernamespace>
    <innernamespace refid="namespace_k_win_1_1_k_screen_integration">KWin::KScreenIntegration</innernamespace>
    <innernamespace refid="namespace_k_win_1_1_lib_input">KWin::LibInput</innernamespace>
    <innernamespace refid="namespace_k_win_1_1_o_s_d">KWin::OSD</innernamespace>
    <innernamespace refid="namespace_k_win_1_1_q_p_a">KWin::QPA</innernamespace>
    <innernamespace refid="namespace_k_win_1_1_tab_box">KWin::TabBox</innernamespace>
    <innernamespace refid="namespace_k_win_1_1_wayland">KWin::Wayland</innernamespace>
    <innernamespace refid="namespace_k_win_1_1_xcb">KWin::Xcb</innernamespace>
    <innernamespace refid="namespace_k_win_1_1_xwl">KWin::Xwl</innernamespace>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="namespace_k_win_1a72b8a93022757874f9e6f85fcf9bc4e9" prot="public" static="no" strong="yes">
        <type></type>
        <name>RenderingIntent</name>
        <qualifiedname>KWin::RenderingIntent</qualifiedname>
        <enumvalue id="namespace_k_win_1a72b8a93022757874f9e6f85fcf9bc4e9a09ab3095e9b2d0a7773cc3d2f0f879cd" prot="public">
          <name>Perceptual</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a72b8a93022757874f9e6f85fcf9bc4e9a9ed6621e7967fa194f71cdb7f7d48ca0" prot="public">
          <name>RelativeColorimetric</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a72b8a93022757874f9e6f85fcf9bc4e9af225099195868c86e68340788085dd9a" prot="public">
          <name>AbsoluteColorimetric</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a72b8a93022757874f9e6f85fcf9bc4e9a6ad9b8ddb1f094ecc6b4307086fc0e80" prot="public">
          <name>RelativeColorimetricWithBPC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>rendering intents describe how colors should be mapped between different color spaces </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="20" column="1" bodyfile="kwin/src/core/colorspace.h" bodystart="20" bodyend="31"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1aeedd73688ef359d71935cf7d75d516c9" prot="public" static="no" strong="yes">
        <type></type>
        <name>YUVMatrixCoefficients</name>
        <qualifiedname>KWin::YUVMatrixCoefficients</qualifiedname>
        <enumvalue id="namespace_k_win_1aeedd73688ef359d71935cf7d75d516c9ac9c5c65fb4af9cf90eb99b3b84424189" prot="public">
          <name>Identity</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aeedd73688ef359d71935cf7d75d516c9a8b844879ae7dc4d0447f1986a7432db9" prot="public">
          <name>BT601</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aeedd73688ef359d71935cf7d75d516c9a0b69475c5783f10c0be13d36825fc3b9" prot="public">
          <name>BT709</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aeedd73688ef359d71935cf7d75d516c9acede9bc5f1db241392356796faabf6e6" prot="public">
          <name>BT2020</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.h" line="195" column="1" bodyfile="kwin/src/core/colorspace.h" bodystart="195" bodyend="200"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1af04c7f9798b123fe6f74415788dd38d3" prot="public" static="no" strong="yes">
        <type></type>
        <name>PointerButtonState</name>
        <qualifiedname>KWin::PointerButtonState</qualifiedname>
        <enumvalue id="namespace_k_win_1af04c7f9798b123fe6f74415788dd38d3aea1e34304a5d8ffa7c9b0ed8ede4ef1a" prot="public">
          <name>Released</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1af04c7f9798b123fe6f74415788dd38d3ad78a68f6a85421ae121c2cb5b73a1040" prot="public">
          <name>Pressed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/inputdevice.h" line="18" column="1" bodyfile="kwin/src/core/inputdevice.h" bodystart="18" bodyend="21"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1aec4516626e95b6dc22c614c769a43590" prot="public" static="no" strong="yes">
        <type></type>
        <name>PointerAxis</name>
        <qualifiedname>KWin::PointerAxis</qualifiedname>
        <enumvalue id="namespace_k_win_1aec4516626e95b6dc22c614c769a43590a06ce2a25e5d12c166a36f654dbea6012" prot="public">
          <name>Vertical</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aec4516626e95b6dc22c614c769a43590ac1b5fa03ecdb95d4a45dd1c40b02527f" prot="public">
          <name>Horizontal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/inputdevice.h" line="23" column="1" bodyfile="kwin/src/core/inputdevice.h" bodystart="23" bodyend="26"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a143704533be3f7be8a43b2b962600248" prot="public" static="no" strong="yes">
        <type></type>
        <name>PointerAxisSource</name>
        <qualifiedname>KWin::PointerAxisSource</qualifiedname>
        <enumvalue id="namespace_k_win_1a143704533be3f7be8a43b2b962600248a88183b946cc5f0e8c96b2e66e1c74a7e" prot="public">
          <name>Unknown</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a143704533be3f7be8a43b2b962600248aa5df60ef4fc4447353769d66661d2229" prot="public">
          <name>Wheel</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a143704533be3f7be8a43b2b962600248a05d7a63454d2014f937df55fd0fb3a63" prot="public">
          <name>Finger</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a143704533be3f7be8a43b2b962600248a535863a82f163709557e59e2eb8139a7" prot="public">
          <name>Continuous</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a143704533be3f7be8a43b2b962600248a27d333dd47d06ab98ba388e9a2fc817c" prot="public">
          <name>WheelTilt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/inputdevice.h" line="28" column="1" bodyfile="kwin/src/core/inputdevice.h" bodystart="28" bodyend="34"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a01355afe201da93e2da84b64923a02f1" prot="public" static="no" strong="yes">
        <type></type>
        <name>KeyboardKeyState</name>
        <qualifiedname>KWin::KeyboardKeyState</qualifiedname>
        <enumvalue id="namespace_k_win_1a01355afe201da93e2da84b64923a02f1aea1e34304a5d8ffa7c9b0ed8ede4ef1a" prot="public">
          <name>Released</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a01355afe201da93e2da84b64923a02f1ad78a68f6a85421ae121c2cb5b73a1040" prot="public">
          <name>Pressed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a01355afe201da93e2da84b64923a02f1a7f7309d5a83099309ac04dcb795ad0ce" prot="public">
          <name>Repeated</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/inputdevice.h" line="36" column="1" bodyfile="kwin/src/core/inputdevice.h" bodystart="36" bodyend="40"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1abbce8a26ea93b91db7bbdceca2155130" prot="public" static="no" strong="yes">
        <type></type>
        <name>SwitchState</name>
        <qualifiedname>KWin::SwitchState</qualifiedname>
        <enumvalue id="namespace_k_win_1abbce8a26ea93b91db7bbdceca2155130ad15305d7a4e34e02489c74a5ef542f36" prot="public">
          <name>Off</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1abbce8a26ea93b91db7bbdceca2155130a521c36a31c2762741cf0f8890cbe05e3" prot="public">
          <name>On</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/inputdevice.h" line="42" column="1" bodyfile="kwin/src/core/inputdevice.h" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a92e14232c9fc6ccaccf6ba1db6cbc7a7" prot="public" static="no" strong="no">
        <type></type>
        <name>EffectFrameStyle</name>
        <qualifiedname>KWin::EffectFrameStyle</qualifiedname>
        <enumvalue id="namespace_k_win_1a92e14232c9fc6ccaccf6ba1db6cbc7a7a599bd693da314df47c43a2a7c373b1fa" prot="public">
          <name>EffectFrameNone</name>
          <briefdescription>
<para>Displays no frame around the contents. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a92e14232c9fc6ccaccf6ba1db6cbc7a7a52ec6ddf26c03beb59de4332117e0151" prot="public">
          <name>EffectFrameUnstyled</name>
          <briefdescription>
<para>Displays a basic box around the contents. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a92e14232c9fc6ccaccf6ba1db6cbc7a7a0831890d61e31cb64ae2640e9039b0bb" prot="public">
          <name>EffectFrameStyled</name>
          <briefdescription>
<para>Displays a Plasma-styled frame around the contents. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Style types used by <ref refid="class_k_win_1_1_effect_frame" kindref="compound">EffectFrame</ref>. <simplesect kind="since"><para>4.6 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectframe.h" line="26" column="1" bodyfile="kwin/src/effect/effectframe.h" bodystart="26" bodyend="30"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a18fd9ac5b065f286f5484b33f46cbda6" prot="public" static="no" strong="no">
        <type></type>
        <name>DataRole</name>
        <qualifiedname>KWin::DataRole</qualifiedname>
        <enumvalue id="namespace_k_win_1a18fd9ac5b065f286f5484b33f46cbda6a414a600bb8f3c2630ad05f13db849b42" prot="public">
          <name>WindowAddedGrabRole</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a18fd9ac5b065f286f5484b33f46cbda6aa952e874ad9d4625bd84d4de4f648471" prot="public">
          <name>WindowClosedGrabRole</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a18fd9ac5b065f286f5484b33f46cbda6ad52a690adbb3829c9fa543cc84fbac98" prot="public">
          <name>WindowMinimizedGrabRole</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a18fd9ac5b065f286f5484b33f46cbda6ac875eac9d38cba70985253a3085bb70f" prot="public">
          <name>WindowUnminimizedGrabRole</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a18fd9ac5b065f286f5484b33f46cbda6ab200085702f8619c5810dc1cb1576b2a" prot="public">
          <name>WindowForceBlurRole</name>
          <briefdescription>
<para>For fullscreen effects to enforce blurring of windows,. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a18fd9ac5b065f286f5484b33f46cbda6a78ab8b50a33987a88962bfe8ac6878c3" prot="public">
          <name>WindowForceBackgroundContrastRole</name>
          <briefdescription>
<para>For fullscreen effects to enforce the background contrast,. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_k_win_1_1_effect_window_1a69d83e8d2e0e9c5630c054ce31210ce8" kindref="member">EffectWindow::setData()</ref> and <ref refid="class_k_win_1_1_effect_window_1a6a82d876206aec3c767d8ea8ca1dc1fe" kindref="member">EffectWindow::data()</ref> global roles. All values between 0 and 999 are reserved for global roles. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="91" column="1" bodyfile="kwin/src/effect/effecthandler.h" bodystart="91" bodyend="100"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1ace775b5f863b8d7967a4f05ad23683ac" prot="public" static="no" strong="yes">
        <type></type>
        <name>LoadEffectFlag</name>
        <qualifiedname>KWin::LoadEffectFlag</qualifiedname>
        <enumvalue id="namespace_k_win_1ace775b5f863b8d7967a4f05ad23683acaf19dbf2edb3a0bd74b0524d960ff21eb" prot="public">
          <name>Load</name>
          <initializer>= 1 &lt;&lt; 0</initializer>
          <briefdescription>
<para><ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> should be loaded. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ace775b5f863b8d7967a4f05ad23683aca6c5599f5b4248e7206799dcac695e548" prot="public">
          <name>CheckDefaultFunction</name>
          <initializer>= 1 &lt;&lt; 2</initializer>
          <briefdescription>
<para>The Check Default Function needs to be invoked if the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> provides it. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Flags defining how a Loader should load an <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>These Flags are only used internally when querying the configuration on whether an <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> should be loaded.</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_abstract_effect_loader_1ac47832e9c8313b3c7fa6b1b5bda554e7" kindref="member">AbstractEffectLoader::readConfig()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.h" line="35" column="1" bodyfile="kwin/src/effect/effectloader.h" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1aa1e33474a7077a13169f350a5949a79a" prot="public" static="no" strong="no">
        <type></type>
        <name>CompositingType</name>
        <qualifiedname>KWin::CompositingType</qualifiedname>
        <enumvalue id="namespace_k_win_1aa1e33474a7077a13169f350a5949a79aa28e3e1a5f320d10fe0aeea04c5d3871f" prot="public">
          <name>NoCompositing</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aa1e33474a7077a13169f350a5949a79aa9d91b030a3a42dc544de4de6f0d46b1d" prot="public">
          <name>OpenGLCompositing</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Used as a flag whether OpenGL based compositing is used. The flag is or-ed to the enum values of the specific OpenGL types. The actual Compositors use the or <computeroutput>OpenGLCompositing</computeroutput> flags. If you need to know whether OpenGL is used, either and the flag or use <ref refid="class_k_win_1_1_effects_handler_1aa8a3368f17c08de910a182b1666bf610" kindref="member">EffectsHandler::isOpenGLCompositing()</ref>. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aa1e33474a7077a13169f350a5949a79aa07ed99a9a85ecf1289dbf0ba42b92ed1" prot="public">
          <name>QPainterCompositing</name>
          <initializer>= 1 &lt;&lt; 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="28" column="5" bodyfile="kwin/src/effect/globals.h" bodystart="28" bodyend="40"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a443ac4eb2683c028e5f174031c12ce22" prot="public" static="no" strong="no">
        <type></type>
        <name>clientAreaOption</name>
        <qualifiedname>KWin::clientAreaOption</qualifiedname>
        <enumvalue id="namespace_k_win_1a443ac4eb2683c028e5f174031c12ce22a8a4463af95e4961719929955d4eabd0d" prot="public">
          <name>PlacementArea</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a443ac4eb2683c028e5f174031c12ce22a32db5a3a4d06a7df1ae7832f5a14508a" prot="public">
          <name>MovementArea</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a443ac4eb2683c028e5f174031c12ce22a445c2e99842dbf1b3870807ebbd11f23" prot="public">
          <name>MaximizeArea</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a443ac4eb2683c028e5f174031c12ce22a4e4a283c0d5d2a6bd0eb285fd99b71a2" prot="public">
          <name>MaximizeFullArea</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a443ac4eb2683c028e5f174031c12ce22a2563a6e9cbb4da3bfb726a990f05895c" prot="public">
          <name>FullScreenArea</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a443ac4eb2683c028e5f174031c12ce22af0d9b81a7df9288de5507e7eb1651297" prot="public">
          <name>WorkArea</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a443ac4eb2683c028e5f174031c12ce22ae101469eee96aace48208a1b5902e380" prot="public">
          <name>FullArea</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a443ac4eb2683c028e5f174031c12ce22a55525774d8c6ed299ad03a68b84c70d6" prot="public">
          <name>ScreenArea</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="42" column="1" bodyfile="kwin/src/effect/globals.h" bodystart="42" bodyend="52"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9" prot="public" static="no" strong="no">
        <type></type>
        <name>MaximizeMode</name>
        <qualifiedname>KWin::MaximizeMode</qualifiedname>
        <enumvalue id="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a53d04d48a6022c3cdf27d735a3b1de29" prot="public">
          <name>MaximizeRestore</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>The window is not maximized in any direction. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9a21499d1263beb477425205b49fca8ef1" prot="public">
          <name>MaximizeVertical</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>The window is maximized vertically. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9aac06708e540fd3823add3d1fc048876d" prot="public">
          <name>MaximizeHorizontal</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The window is maximized horizontally. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9abc602b186700b8c6fb525fe2c828e910" prot="public">
          <name>MaximizeFull</name>
          <initializer>= MaximizeVertical | MaximizeHorizontal</initializer>
          <briefdescription>
<para>Equal to <computeroutput>MaximizeVertical</computeroutput> | <computeroutput>MaximizeHorizontal</computeroutput>. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximize mode. These values specify how a window is maximized.</para>
<para><simplesect kind="note"><para>these values are written to session files, don&apos;t change the order </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="59" column="1" bodyfile="kwin/src/effect/globals.h" bodystart="59" bodyend="65"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a7eda12963fb07e3df0c1f337e8526bc5" prot="public" static="no" strong="no">
        <type></type>
        <name>ElectricBorder</name>
        <qualifiedname>KWin::ElectricBorder</qualifiedname>
        <enumvalue id="namespace_k_win_1a7eda12963fb07e3df0c1f337e8526bc5a929278994e070e1f867508f07e3258b8" prot="public">
          <name>ElectricTop</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a7eda12963fb07e3df0c1f337e8526bc5a6d7ab73bac857b678bb92c281e2d3572" prot="public">
          <name>ElectricTopRight</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a7eda12963fb07e3df0c1f337e8526bc5a93cc1ac713156a4b4de68018f01f30cf" prot="public">
          <name>ElectricRight</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a7eda12963fb07e3df0c1f337e8526bc5acb8c8f58e5e51ecdebbcc5bb68c157b1" prot="public">
          <name>ElectricBottomRight</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a7eda12963fb07e3df0c1f337e8526bc5a370207e11a2d2e90ec64262effae4953" prot="public">
          <name>ElectricBottom</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a7eda12963fb07e3df0c1f337e8526bc5a201c4b00d53ee2f73816e59198df9c59" prot="public">
          <name>ElectricBottomLeft</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a7eda12963fb07e3df0c1f337e8526bc5ae5facf4c47b5ddcfc937c8f9974a2b30" prot="public">
          <name>ElectricLeft</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a7eda12963fb07e3df0c1f337e8526bc5a183f33faf88c2cfa027443ec7ba28823" prot="public">
          <name>ElectricTopLeft</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a7eda12963fb07e3df0c1f337e8526bc5aed0baa759adc26fb2041e3a60412bf17" prot="public">
          <name>ELECTRIC_COUNT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a7eda12963fb07e3df0c1f337e8526bc5a0400ba008d8d9f0d019ec7b76d6efb29" prot="public">
          <name>ElectricNone</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="73" column="1" bodyfile="kwin/src/effect/globals.h" bodystart="73" bodyend="84"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a984e1af1aa8924cdddeeba318fa7dd76" prot="public" static="no" strong="no">
        <type></type>
        <name>ElectricBorderAction</name>
        <qualifiedname>KWin::ElectricBorderAction</qualifiedname>
        <enumvalue id="namespace_k_win_1a984e1af1aa8924cdddeeba318fa7dd76a8b1375b3a5947053ee2a53f9b43e1a1d" prot="public">
          <name>ElectricActionNone</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a984e1af1aa8924cdddeeba318fa7dd76acf6c91bd8ff9dbcbf606a638cb61141f" prot="public">
          <name>ElectricActionShowDesktop</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a984e1af1aa8924cdddeeba318fa7dd76a610cbca22123e394166ede97791deb73" prot="public">
          <name>ElectricActionLockScreen</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a984e1af1aa8924cdddeeba318fa7dd76a98f429118a6cba6e2868b50e9479aa9b" prot="public">
          <name>ElectricActionKRunner</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a984e1af1aa8924cdddeeba318fa7dd76a022e62e38e54130416d580c55fe2cfa8" prot="public">
          <name>ElectricActionActivityManager</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a984e1af1aa8924cdddeeba318fa7dd76a8e75fdb5e627dc2740574e67ab51b5bc" prot="public">
          <name>ElectricActionApplicationLauncher</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a984e1af1aa8924cdddeeba318fa7dd76a8befc019abdeade14575638690afec3e" prot="public">
          <name>ELECTRIC_ACTION_COUNT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="91" column="1" bodyfile="kwin/src/effect/globals.h" bodystart="91" bodyend="99"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1aad393b058dfa58c0c3ca91c0c2b5f858" prot="public" static="no" strong="no">
        <type></type>
        <name>TabBoxMode</name>
        <qualifiedname>KWin::TabBoxMode</qualifiedname>
        <enumvalue id="namespace_k_win_1aad393b058dfa58c0c3ca91c0c2b5f858acc36245044facafcd616a8659016e4d0" prot="public">
          <name>TabBoxWindowsMode</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aad393b058dfa58c0c3ca91c0c2b5f858ac4233e12ac7bd155576133fa2a4d00fa" prot="public">
          <name>TabBoxWindowsAlternativeMode</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aad393b058dfa58c0c3ca91c0c2b5f858a319c0072d749d7cda8e38048bc1c8398" prot="public">
          <name>TabBoxCurrentAppWindowsMode</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aad393b058dfa58c0c3ca91c0c2b5f858a5b76f09beea407d1a3d21e6939c932c0" prot="public">
          <name>TabBoxCurrentAppWindowsAlternativeMode</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="101" column="1" bodyfile="kwin/src/effect/globals.h" bodystart="101" bodyend="106"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a54093b7df57905a541686cce26a8f67b" prot="public" static="no" strong="no">
        <type></type>
        <name>KWinOption</name>
        <qualifiedname>KWin::KWinOption</qualifiedname>
        <enumvalue id="namespace_k_win_1a54093b7df57905a541686cce26a8f67ba437c077256af1e1ca278828cdd0c526b" prot="public">
          <name>CloseButtonCorner</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a54093b7df57905a541686cce26a8f67bad7c0dd65bea1b777c31f3f10d967de0f" prot="public">
          <name>SwitchDesktopOnScreenEdge</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a54093b7df57905a541686cce26a8f67ba6f638683e5f42c73169b94006e8810a6" prot="public">
          <name>SwitchDesktopOnScreenEdgeMovingWindows</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="108" column="1" bodyfile="kwin/src/effect/globals.h" bodystart="108" bodyend="112"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a0b8440dc0ffe9aa219e0c0e5fa1137a0" prot="public" static="no" strong="no">
        <type></type>
        <name>PointerAxisDirection</name>
        <qualifiedname>KWin::PointerAxisDirection</qualifiedname>
        <enumvalue id="namespace_k_win_1a0b8440dc0ffe9aa219e0c0e5fa1137a0a2f9a4157919ddb043621f6f3990b5056" prot="public">
          <name>PointerAxisUp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a0b8440dc0ffe9aa219e0c0e5fa1137a0a9e2afc22dd1bb0575f7b1ba7282f8e52" prot="public">
          <name>PointerAxisDown</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a0b8440dc0ffe9aa219e0c0e5fa1137a0a3ae40aa91df397da9d9da3e81d859d4a" prot="public">
          <name>PointerAxisLeft</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a0b8440dc0ffe9aa219e0c0e5fa1137a0ac616521e01791532a8fb0e0cc2bd7836" prot="public">
          <name>PointerAxisRight</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The direction in which a pointer axis is moved. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="117" column="1" bodyfile="kwin/src/effect/globals.h" bodystart="117" bodyend="122"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1ab2206ebabcc9101a43b58473495efd03" prot="public" static="no" strong="yes">
        <type></type>
        <name>SwipeDirection</name>
        <qualifiedname>KWin::SwipeDirection</qualifiedname>
        <enumvalue id="namespace_k_win_1ab2206ebabcc9101a43b58473495efd03a4bbb8f967da6d1a610596d7257179c2b" prot="public">
          <name>Invalid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ab2206ebabcc9101a43b58473495efd03a08a38277b0309070706f6652eeae9a53" prot="public">
          <name>Down</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ab2206ebabcc9101a43b58473495efd03a945d5e233cf7d6240f6b783b36a374ff" prot="public">
          <name>Left</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ab2206ebabcc9101a43b58473495efd03a258f49887ef8d14ac268c92b02503aaa" prot="public">
          <name>Up</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ab2206ebabcc9101a43b58473495efd03a92b09c7c48c520c3c55e497875da437c" prot="public">
          <name>Right</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Directions for swipe gestures. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>5.10 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="128" column="1" bodyfile="kwin/src/effect/globals.h" bodystart="128" bodyend="134"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a8852f83038eda36bc255d8f5f3baae05" prot="public" static="no" strong="yes">
        <type></type>
        <name>PinchDirection</name>
        <qualifiedname>KWin::PinchDirection</qualifiedname>
        <enumvalue id="namespace_k_win_1a8852f83038eda36bc255d8f5f3baae05a1c9861d5cf1799b46578652b62ce1d49" prot="public">
          <name>Expanding</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a8852f83038eda36bc255d8f5f3baae05a9553d04b13de5c10f37bac13c96eea23" prot="public">
          <name>Contracting</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="136" column="1" bodyfile="kwin/src/effect/globals.h" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a416cef954a72080ddb0d040111f008dc" prot="public" static="no" strong="yes">
        <type></type>
        <name>SessionState</name>
        <qualifiedname>KWin::SessionState</qualifiedname>
        <enumvalue id="namespace_k_win_1a416cef954a72080ddb0d040111f008dca960b44c579bc2f6818d2daaf9e4c16f0" prot="public">
          <name>Normal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a416cef954a72080ddb0d040111f008dca4e11db406c6c9f234fe8579cc9bc5ef6" prot="public">
          <name>Saving</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a416cef954a72080ddb0d040111f008dca9ccfee4c47009600237ea2b0145db1ec" prot="public">
          <name>Quitting</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents the state of the session running outside kwin Under Plasma this is managed by ksmserver </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="145" column="1" bodyfile="kwin/src/effect/globals.h" bodystart="145" bodyend="149"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a3f02fe5c7167a1a46177d3e01f3c694e" prot="public" static="no" strong="yes">
        <type></type>
        <name>LED</name>
        <qualifiedname>KWin::LED</qualifiedname>
        <enumvalue id="namespace_k_win_1a3f02fe5c7167a1a46177d3e01f3c694eacf6cc0261135c6d163fd4305375773d2" prot="public">
          <name>NumLock</name>
          <initializer>= 1 &lt;&lt; 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a3f02fe5c7167a1a46177d3e01f3c694ea8d0f4171170104d094d8b6d4f8bf49e6" prot="public">
          <name>CapsLock</name>
          <initializer>= 1 &lt;&lt; 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a3f02fe5c7167a1a46177d3e01f3c694ea7d7902d5e2998e4fb2b8694a2de4ff65" prot="public">
          <name>ScrollLock</name>
          <initializer>= 1 &lt;&lt; 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a3f02fe5c7167a1a46177d3e01f3c694eaa0c29a6fe815b4e79cafb36a6714094c" prot="public">
          <name>Compose</name>
          <initializer>= 1 &lt;&lt; 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a3f02fe5c7167a1a46177d3e01f3c694ea3713cbc241fd95e9d579846d44774452" prot="public">
          <name>Kana</name>
          <initializer>= 1 &lt;&lt; 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="152" column="1" bodyfile="kwin/src/effect/globals.h" bodystart="152" bodyend="158"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a09aef7c112a8b0cdfb6e27a081d50dc8" prot="public" static="no" strong="yes">
        <type></type>
        <name>Gravity</name>
        <qualifiedname>KWin::Gravity</qualifiedname>
        <enumvalue id="namespace_k_win_1a09aef7c112a8b0cdfb6e27a081d50dc8a6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a09aef7c112a8b0cdfb6e27a081d50dc8a945d5e233cf7d6240f6b783b36a374ff" prot="public">
          <name>Left</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a09aef7c112a8b0cdfb6e27a081d50dc8a92b09c7c48c520c3c55e497875da437c" prot="public">
          <name>Right</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a09aef7c112a8b0cdfb6e27a081d50dc8aa4ffdcf0dc1f31b9acaf295d75b51d00" prot="public">
          <name>Top</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a09aef7c112a8b0cdfb6e27a081d50dc8a2ad9d63b69c4a10a5cc9cad923133bc4" prot="public">
          <name>Bottom</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a09aef7c112a8b0cdfb6e27a081d50dc8ab32beb056fbfe36afbabc6c88c81ab36" prot="public">
          <name>TopLeft</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a09aef7c112a8b0cdfb6e27a081d50dc8a1d85a557894c340c318493f33bfa8efb" prot="public">
          <name>TopRight</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a09aef7c112a8b0cdfb6e27a081d50dc8a98e5a1c44509157ebcaf46c515c78875" prot="public">
          <name>BottomLeft</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a09aef7c112a8b0cdfb6e27a081d50dc8a9146bfc669fddc88db2c4d89297d0e9a" prot="public">
          <name>BottomRight</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="namespace_k_win_1a09aef7c112a8b0cdfb6e27a081d50dc8" kindref="member">Gravity</ref> enum is used to specify the direction in which geometry changes during resize. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="165" column="1" bodyfile="kwin/src/effect/globals.h" bodystart="165" bodyend="175"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7b" prot="public" static="no" strong="no">
        <type></type>
        <name>Layer</name>
        <qualifiedname>KWin::Layer</qualifiedname>
        <enumvalue id="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7ba4b067423190552d3be96ede3c15d4ee6" prot="public">
          <name>UnknownLayer</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7baed8e60348172b2360aec8ad25dfb266d" prot="public">
          <name>FirstLayer</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7ba534c71a0f1f0b718c7ddbc29c315d8da" prot="public">
          <name>DesktopLayer</name>
          <initializer>= FirstLayer</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7ba22f3cfd26d795678908033781ffe1dbe" prot="public">
          <name>BelowLayer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7bae433b31a6f103cf33c75a7b84b999116" prot="public">
          <name>NormalLayer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7ba6eb1a800d3a1172e076a9dc9bc5cde53" prot="public">
          <name>AboveLayer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7bab6a7dfc1a6e18ae232be0ba8326b367f" prot="public">
          <name>NotificationLayer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7ba72d87368e7eece861abf32b4d9cd5db0" prot="public">
          <name>ActiveLayer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7baa7dc2307180e77f6e7c64362a792fa24" prot="public">
          <name>PopupLayer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7ba5da4e284e95e28b7ecd568e032926e77" prot="public">
          <name>CriticalNotificationLayer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7baff77ee9c6dab7920ff1bb88117b1b07f" prot="public">
          <name>OnScreenDisplayLayer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7ba7c552dbd329b41e8d3afbf1c9eca9e1f" prot="public">
          <name>OverlayLayer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7bac5eb89337bd5774f4083b2aa908d071f" prot="public">
          <name>NumLayers</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="177" column="1" bodyfile="kwin/src/effect/globals.h" bodystart="177" bodyend="191"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a7d8a57e0b5454d5598726350206b4fdf" prot="public" static="no" strong="yes">
        <type></type>
        <name>QuickTileFlag</name>
        <qualifiedname>KWin::QuickTileFlag</qualifiedname>
        <enumvalue id="namespace_k_win_1a7d8a57e0b5454d5598726350206b4fdfa6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a7d8a57e0b5454d5598726350206b4fdfa945d5e233cf7d6240f6b783b36a374ff" prot="public">
          <name>Left</name>
          <initializer>= 1 &lt;&lt; 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a7d8a57e0b5454d5598726350206b4fdfa92b09c7c48c520c3c55e497875da437c" prot="public">
          <name>Right</name>
          <initializer>= 1 &lt;&lt; 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a7d8a57e0b5454d5598726350206b4fdfaa4ffdcf0dc1f31b9acaf295d75b51d00" prot="public">
          <name>Top</name>
          <initializer>= 1 &lt;&lt; 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a7d8a57e0b5454d5598726350206b4fdfa2ad9d63b69c4a10a5cc9cad923133bc4" prot="public">
          <name>Bottom</name>
          <initializer>= 1 &lt;&lt; 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a7d8a57e0b5454d5598726350206b4fdfa90589c47f06eb971d548591f23c285af" prot="public">
          <name>Custom</name>
          <initializer>= 1 &lt;&lt; 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a7d8a57e0b5454d5598726350206b4fdfac1b5fa03ecdb95d4a45dd1c40b02527f" prot="public">
          <name>Horizontal</name>
          <initializer>= Left | Right</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a7d8a57e0b5454d5598726350206b4fdfa06ce2a25e5d12c166a36f654dbea6012" prot="public">
          <name>Vertical</name>
          <initializer>= Top | Bottom</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="195" column="1" bodyfile="kwin/src/effect/globals.h" bodystart="195" bodyend="204"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a5bac5dc1ad9b6deedfa5c46c4e432767" prot="public" static="no" strong="yes">
        <type></type>
        <name>PresentationMode</name>
        <qualifiedname>KWin::PresentationMode</qualifiedname>
        <enumvalue id="namespace_k_win_1a5bac5dc1ad9b6deedfa5c46c4e432767a98b06ef30caa386be0f897d0e5c5a135" prot="public">
          <name>VSync</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a5bac5dc1ad9b6deedfa5c46c4e432767a21ae134702d2a8b0953846e2e4ee9e95" prot="public">
          <name>AdaptiveSync</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a5bac5dc1ad9b6deedfa5c46c4e432767a24aa4117da86c41684ad25742832dfa6" prot="public">
          <name>Async</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a5bac5dc1ad9b6deedfa5c46c4e432767abe8b04736227cf3f2ab88320638e9505" prot="public">
          <name>AdaptiveAsync</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="295" column="1" bodyfile="kwin/src/effect/globals.h" bodystart="295" bodyend="300"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1ae822402a75b1dbd6c2afc72f87fa60a6" prot="public" static="no" strong="yes">
        <type></type>
        <name>ContentType</name>
        <qualifiedname>KWin::ContentType</qualifiedname>
        <enumvalue id="namespace_k_win_1ae822402a75b1dbd6c2afc72f87fa60a6a6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ae822402a75b1dbd6c2afc72f87fa60a6ac03d53b70feba4ea842510abecd6c45e" prot="public">
          <name>Photo</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ae822402a75b1dbd6c2afc72f87fa60a6a34e2d1989a1dbf75cd631596133ee5ee" prot="public">
          <name>Video</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ae822402a75b1dbd6c2afc72f87fa60a6a63d72051e901c069f8aa1b32aa0c43bb" prot="public">
          <name>Game</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="303" column="1" bodyfile="kwin/src/effect/globals.h" bodystart="303" bodyend="308"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a30ebd92a502242a9e136f070cbf9192b" prot="public" static="no" strong="yes">
        <type></type>
        <name>VrrPolicy</name>
        <qualifiedname>KWin::VrrPolicy</qualifiedname>
        <enumvalue id="namespace_k_win_1a30ebd92a502242a9e136f070cbf9192ba6e7b34fa59e1bd229b207892956dc41c" prot="public">
          <name>Never</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a30ebd92a502242a9e136f070cbf9192ba68eec46437c384d8dad18d5464ebc35c" prot="public">
          <name>Always</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a30ebd92a502242a9e136f070cbf9192ba086247a9b57fde6eefee2a0c4752242d" prot="public">
          <name>Automatic</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="311" column="1" bodyfile="kwin/src/effect/globals.h" bodystart="311" bodyend="315"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a9b2c7d76c9b9021af62d089e13e456d6" prot="public" static="no" strong="yes">
        <type></type>
        <name>PresentationModeHint</name>
        <qualifiedname>KWin::PresentationModeHint</qualifiedname>
        <enumvalue id="namespace_k_win_1a9b2c7d76c9b9021af62d089e13e456d6a98b06ef30caa386be0f897d0e5c5a135" prot="public">
          <name>VSync</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a9b2c7d76c9b9021af62d089e13e456d6a24aa4117da86c41684ad25742832dfa6" prot="public">
          <name>Async</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="318" column="1" bodyfile="kwin/src/effect/globals.h" bodystart="318" bodyend="321"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1ad892545facf36d334d4558298117fbc7" prot="public" static="no" strong="yes">
        <type></type>
        <name>WindowType</name>
        <qualifiedname>KWin::WindowType</qualifiedname>
        <enumvalue id="namespace_k_win_1ad892545facf36d334d4558298117fbc7aec0fc0100c4fc1ce4eea230c3dc10360" prot="public">
          <name>Undefined</name>
          <initializer>= -2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>intermediate value, do not use </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad892545facf36d334d4558298117fbc7a88183b946cc5f0e8c96b2e66e1c74a7e" prot="public">
          <name>Unknown</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>indicates that the window did not define a window type. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad892545facf36d334d4558298117fbc7a960b44c579bc2f6818d2daaf9e4c16f0" prot="public">
          <name>Normal</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>indicates that this is a normal, top-level window </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad892545facf36d334d4558298117fbc7a2310408a63388fe57e3a4177168a8798" prot="public">
          <name>Desktop</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>indicates a desktop feature. This can include a single window containing desktop icons with the same dimensions as the screen, allowing the desktop environment to have full control of the desktop, without the need for proxying root window clicks. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad892545facf36d334d4558298117fbc7a035213f319f5790129d55b4ee3561543" prot="public">
          <name>Dock</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>indicates a dock or panel feature </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad892545facf36d334d4558298117fbc7aef05c8098cdb2b34e39c80515fc037bd" prot="public">
          <name>Toolbar</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>indicates a toolbar window </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad892545facf36d334d4558298117fbc7ab61541208db7fa7dba42c85224405911" prot="public">
          <name>Menu</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>indicates a pinnable (torn-off) menu window </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad892545facf36d334d4558298117fbc7ad2ab42830caa7a02b36d96a46dd44b8d" prot="public">
          <name>Dialog</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>indicates that this is a dialog window </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad892545facf36d334d4558298117fbc7a6da8e67225fdcfa78c3ea5dc3154b849" prot="public">
          <name>Override</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>has unclear meaning and is KDE-only </para>
</xrefdescription></xrefsect></para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad892545facf36d334d4558298117fbc7a04501c36095cc454a235520a6ac650b4" prot="public">
          <name>TopMenu</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>indicates a toplevel menu (AKA macmenu). This is a KDE extension to the _NET_WM_WINDOW_TYPE mechanism. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad892545facf36d334d4558298117fbc7a94df2a6972ca1fa79411645fe9b42339" prot="public">
          <name>Utility</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>indicates a utility window </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad892545facf36d334d4558298117fbc7a26636c743cfadbf720cfc66222468198" prot="public">
          <name>Splash</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>indicates that this window is a splash screen window. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad892545facf36d334d4558298117fbc7af520a03af2d05e85732ceda7f8c728d4" prot="public">
          <name>DropdownMenu</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>indicates a dropdown menu (from a menubar typically) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad892545facf36d334d4558298117fbc7af1138320e0090b5080bfca3579b1c5c9" prot="public">
          <name>PopupMenu</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>indicates a popup menu (a context menu typically) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad892545facf36d334d4558298117fbc7ac983077ca27977bb5cb4b6398f144166" prot="public">
          <name>Tooltip</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>indicates a tooltip window </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad892545facf36d334d4558298117fbc7a96d008db67fc0b5551a926842bbb6a71" prot="public">
          <name>Notification</name>
          <initializer>= 13</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>indicates a notification window </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad892545facf36d334d4558298117fbc7afd249a0c28275ebf9d4c8464ca2225cf" prot="public">
          <name>ComboBox</name>
          <initializer>= 14</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>indicates that the window is a list for a combobox </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad892545facf36d334d4558298117fbc7a1a39a3de6e018151738f0a62b63dda37" prot="public">
          <name>DNDIcon</name>
          <initializer>= 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>indicates a window that represents the dragged object during DND operation </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad892545facf36d334d4558298117fbc7ad1163214ae0eb81427f7baf7e5cc7280" prot="public">
          <name>OnScreenDisplay</name>
          <initializer>= 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>indicates an On Screen <ref refid="class_k_win_1_1_display" kindref="compound">Display</ref> window (such as volume feedback) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad892545facf36d334d4558298117fbc7a83e0e7b9ab8e5f1ffe568072e16cf1d8" prot="public">
          <name>CriticalNotification</name>
          <initializer>= 17</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>indicates a critical notification (such as battery is running out) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad892545facf36d334d4558298117fbc7af61d3dfc51cf3fdd6d1d08bd6ccfad5c" prot="public">
          <name>AppletPopup</name>
          <initializer>= 18</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>indicates that this window is an applet. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="325" column="1" bodyfile="kwin/src/effect/globals.h" bodystart="325" bodyend="416"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a79d213c0147ac8e61983a68e25990e36" prot="public" static="no" strong="no">
        <type></type>
        <name>WindowTypeMask</name>
        <qualifiedname>KWin::WindowTypeMask</qualifiedname>
        <enumvalue id="namespace_k_win_1a79d213c0147ac8e61983a68e25990e36abcf7f309ab1b6fde97250c50268e4505" prot="public">
          <name>NormalMask</name>
          <initializer>= 1u &lt;&lt; 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespace_k_win_1a416cef954a72080ddb0d040111f008dca960b44c579bc2f6818d2daaf9e4c16f0" kindref="member">Normal</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a79d213c0147ac8e61983a68e25990e36a6996109264694f9ccce41d72f319c66c" prot="public">
          <name>DesktopMask</name>
          <initializer>= 1u &lt;&lt; 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7a2310408a63388fe57e3a4177168a8798" kindref="member">Desktop</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a79d213c0147ac8e61983a68e25990e36a504ae7d8c81958698176bb6381d1cc39" prot="public">
          <name>DockMask</name>
          <initializer>= 1u &lt;&lt; 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7a035213f319f5790129d55b4ee3561543" kindref="member">Dock</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a79d213c0147ac8e61983a68e25990e36a977ef4c11fff0148e4a2e6a1da7b8e62" prot="public">
          <name>ToolbarMask</name>
          <initializer>= 1u &lt;&lt; 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7aef05c8098cdb2b34e39c80515fc037bd" kindref="member">Toolbar</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a79d213c0147ac8e61983a68e25990e36afba65c3ad4a7d65353229356a9c0a717" prot="public">
          <name>MenuMask</name>
          <initializer>= 1u &lt;&lt; 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7ab61541208db7fa7dba42c85224405911" kindref="member">Menu</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a79d213c0147ac8e61983a68e25990e36abbf98238b99be351ea9e9cc5582b0d9b" prot="public">
          <name>DialogMask</name>
          <initializer>= 1u &lt;&lt; 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7ad2ab42830caa7a02b36d96a46dd44b8d" kindref="member">Dialog</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a79d213c0147ac8e61983a68e25990e36a6c09158277db4421165657cabf3c0bf3" prot="public">
          <name>OverrideMask</name>
          <initializer>= 1u &lt;&lt; 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7a6da8e67225fdcfa78c3ea5dc3154b849" kindref="member">Override</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a79d213c0147ac8e61983a68e25990e36aa54b7af1066d509fa4991b4e4ebfd02b" prot="public">
          <name>TopMenuMask</name>
          <initializer>= 1u &lt;&lt; 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7a04501c36095cc454a235520a6ac650b4" kindref="member">TopMenu</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a79d213c0147ac8e61983a68e25990e36aebae8039dc897c54590288aae8a28f1e" prot="public">
          <name>UtilityMask</name>
          <initializer>= 1u &lt;&lt; 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7a94df2a6972ca1fa79411645fe9b42339" kindref="member">Utility</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a79d213c0147ac8e61983a68e25990e36af101bfa87703a8883d6b34d01315ec9b" prot="public">
          <name>SplashMask</name>
          <initializer>= 1u &lt;&lt; 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7a26636c743cfadbf720cfc66222468198" kindref="member">Splash</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a79d213c0147ac8e61983a68e25990e36ad7376be18060b856c116446336c16fce" prot="public">
          <name>DropdownMenuMask</name>
          <initializer>= 1u &lt;&lt; 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7af520a03af2d05e85732ceda7f8c728d4" kindref="member">DropdownMenu</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a79d213c0147ac8e61983a68e25990e36a08d4f13ec85864006ebac3372e702e25" prot="public">
          <name>PopupMenuMask</name>
          <initializer>= 1u &lt;&lt; 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7af1138320e0090b5080bfca3579b1c5c9" kindref="member">PopupMenu</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a79d213c0147ac8e61983a68e25990e36a7c8df36d7e8c93ac2308ef22c2e464c8" prot="public">
          <name>TooltipMask</name>
          <initializer>= 1u &lt;&lt; 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7ac983077ca27977bb5cb4b6398f144166" kindref="member">Tooltip</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a79d213c0147ac8e61983a68e25990e36a1655f401f3a7a4d63b10d5266b5f8f13" prot="public">
          <name>NotificationMask</name>
          <initializer>= 1u &lt;&lt; 13</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7a96d008db67fc0b5551a926842bbb6a71" kindref="member">Notification</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a79d213c0147ac8e61983a68e25990e36af4d6300e3391e9a5041a2e85efe9091b" prot="public">
          <name>ComboBoxMask</name>
          <initializer>= 1u &lt;&lt; 14</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7afd249a0c28275ebf9d4c8464ca2225cf" kindref="member">ComboBox</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a79d213c0147ac8e61983a68e25990e36a207d69f6c523835e748514ce9e0fac7f" prot="public">
          <name>DNDIconMask</name>
          <initializer>= 1u &lt;&lt; 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7a1a39a3de6e018151738f0a62b63dda37" kindref="member">DNDIcon</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a79d213c0147ac8e61983a68e25990e36acfb4d4d80b1fe623fde9360848a7d4b6" prot="public">
          <name>OnScreenDisplayMask</name>
          <initializer>= 1u &lt;&lt; 16</initializer>
          <briefdescription>
<para>NON STANDARD. </para>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7ad1163214ae0eb81427f7baf7e5cc7280" kindref="member">OnScreenDisplay</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.6 </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a79d213c0147ac8e61983a68e25990e36a4d0032b35fa705a8f5069f52a6cd0a2c" prot="public">
          <name>CriticalNotificationMask</name>
          <initializer>= 1u &lt;&lt; 17</initializer>
          <briefdescription>
<para>NON STANDARD. </para>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7a83e0e7b9ab8e5f1ffe568072e16cf1d8" kindref="member">CriticalNotification</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.58 </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a79d213c0147ac8e61983a68e25990e36ac52bb89cc293056cbfadb4e34658a2fc" prot="public">
          <name>AppletPopupMask</name>
          <initializer>= 1u &lt;&lt; 18</initializer>
          <briefdescription>
<para>NON STANDARD. </para>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7af61d3dfc51cf3fdd6d1d08bd6ccfad5c" kindref="member">AppletPopup</ref> </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a79d213c0147ac8e61983a68e25990e36a3d8b6be3b0112b5ae05e2e81aebccb24" prot="public">
          <name>AllTypesMask</name>
          <initializer>= 0U - 1</initializer>
          <briefdescription>
<para>All window types. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Values for <ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7" kindref="member">WindowType</ref> when they should be OR&apos;ed together, e.g. for the properties argument of the NETRootInfo constructor. <simplesect kind="see"><para>WindowTypes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="424" column="1" bodyfile="kwin/src/effect/globals.h" bodystart="424" bodyend="445"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a2d21f95f143c2ccab4d2a9448e14d6ec" prot="public" static="no" strong="yes">
        <type></type>
        <name>OutputConfigurationError</name>
        <qualifiedname>KWin::OutputConfigurationError</qualifiedname>
        <enumvalue id="namespace_k_win_1a2d21f95f143c2ccab4d2a9448e14d6eca6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a2d21f95f143c2ccab4d2a9448e14d6eca88183b946cc5f0e8c96b2e66e1c74a7e" prot="public">
          <name>Unknown</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a2d21f95f143c2ccab4d2a9448e14d6eca07a7a49b18fa63bb22afb657926d170a" prot="public">
          <name>TooManyEnabledOutputs</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="448" column="1" bodyfile="kwin/src/effect/globals.h" bodystart="448" bodyend="452"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a68ed0f17440d1c1d38ac1ebcf5ad5361" prot="public" static="no" strong="yes">
        <type></type>
        <name>DeviceType</name>
        <qualifiedname>KWin::DeviceType</qualifiedname>
        <enumvalue id="namespace_k_win_1a68ed0f17440d1c1d38ac1ebcf5ad5361a8229bf08d472e129beff22e3984afdbd" prot="public">
          <name>Touchpad</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a68ed0f17440d1c1d38ac1ebcf5ad5361a588711541a203a16bbc517f3f73ef7c8" prot="public">
          <name>Touchscreen</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/globalshortcuts.h" line="29" column="1" bodyfile="kwin/src/globalshortcuts.h" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7a" prot="public" static="no" strong="no">
        <type></type>
        <name>Driver</name>
        <qualifiedname>KWin::Driver</qualifiedname>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aaa255bed986f10a4a10b905143746590b" prot="public">
          <name>Driver_R100</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aa93e06028bb6ce7d4d00d75c2d9531876" prot="public">
          <name>Driver_R200</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aab3bb76691f0b85b15c60380faee1dace" prot="public">
          <name>Driver_R300C</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aa03214e800ee196e697b0f7bf0d4dd06d" prot="public">
          <name>Driver_R300G</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aad949f02f16d93cf140e63ef993b18ea9" prot="public">
          <name>Driver_R600C</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aa56023ce1fd4d01fdbe8d52c7bbe82f31" prot="public">
          <name>Driver_R600G</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aad8257b0827faa4db65c2462441e01265" prot="public">
          <name>Driver_Nouveau</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aad2a88ce3577550be53e20b19b3a4c285" prot="public">
          <name>Driver_Intel</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aa53546b4dff63d25fdaf008c9208e0c8e" prot="public">
          <name>Driver_NVidia</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aaaf3d3b469ed7f5ee37f2fdcd3e12ebce" prot="public">
          <name>Driver_Catalyst</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aa214f2fa9e147b66124e21448e3455140" prot="public">
          <name>Driver_Swrast</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aaebed69ad5ea311f79ae0950c87080243" prot="public">
          <name>Driver_Softpipe</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aa53866ce28a02f33f76bff84a693acb7d" prot="public">
          <name>Driver_Llvmpipe</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aa4bd863528c0ed6c8f571d203ce1b070b" prot="public">
          <name>Driver_VirtualBox</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aa42b2bdf9c6c8e7c366503bd3a80a1395" prot="public">
          <name>Driver_VMware</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aa2eda789966808160d9bfd5e0879b5f64" prot="public">
          <name>Driver_Qualcomm</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aa742a5afc505b9a5e35fd3d0b4e04544c" prot="public">
          <name>Driver_RadeonSI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aaa9aa73751e2e08f4e37929cfd06c6674" prot="public">
          <name>Driver_Virgl</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aab83a35bc43703660ade4e3950b65e55c" prot="public">
          <name>Driver_Panfrost</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aaa02cf6f9c43ac6e9c9fccd65b2997d40" prot="public">
          <name>Driver_Lima</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aa341919f7989417520900b7f41ed22f41" prot="public">
          <name>Driver_VC4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aa02c2ebbd59a598c77ee1031a409d8222" prot="public">
          <name>Driver_V3D</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a250e5ebda324d6fe3bfadabf8a884d7aac93ac7169f05f39b89524c9911466c6b" prot="public">
          <name>Driver_Unknown</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="26" column="1" bodyfile="kwin/src/opengl/glplatform.h" bodystart="26" bodyend="50"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4" prot="public" static="no" strong="no">
        <type></type>
        <name>ChipClass</name>
        <qualifiedname>KWin::ChipClass</qualifiedname>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4ac0ca76672cbc8e250dc4f791eedbe824" prot="public">
          <name>R100</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4aec7afcc645c650500590f35acb0dae78" prot="public">
          <name>R200</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a3bb01df8cb08ef40dbad71bf9b4bb18c" prot="public">
          <name>R300</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4aaa40103ae2347111b04080a201e2cd26" prot="public">
          <name>R400</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4ad3c0e2df5bc5c25362c385e3ebdf9369" prot="public">
          <name>R500</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a642e67fe2149abfa10c995dccbcc57e1" prot="public">
          <name>R600</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a5fa83f28c055c38adc7c42d8a345dc35" prot="public">
          <name>R700</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a76a5bd70c2f7cec8d7459276d568149d" prot="public">
          <name>Evergreen</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4adb3b650b8cc5241ad450e47f32ea9224" prot="public">
          <name>NorthernIslands</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4adb62a2f1a8e319d5f3ef7d479502e56f" prot="public">
          <name>SouthernIslands</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a9c3ae9ac7f59c077317f19ac3db240ee" prot="public">
          <name>SeaIslands</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a41828f8d91a3eb421a7d09559a4c45b5" prot="public">
          <name>VolcanicIslands</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a7e4e405c9e392d13630b30ecd70307b7" prot="public">
          <name>ArcticIslands</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4addba1772f3515131870c666d8704dfcd" prot="public">
          <name>Vega</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4af5f97bfdb241297165ba1a73e66bc82e" prot="public">
          <name>Navi</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a1ff323c6624c089b9616046f9173e851" prot="public">
          <name>UnknownRadeon</name>
          <initializer>= 999</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a7fdc3046b25edabf7bd0817f92d91611" prot="public">
          <name>NV10</name>
          <initializer>= 1000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a35f027fc997fb4f80e25ab36e582daa2" prot="public">
          <name>NV20</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a13f45b330bb4b48135afaa365c0ec83b" prot="public">
          <name>NV30</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a0217a52459d9df5be8d74664a2437b57" prot="public">
          <name>NV40</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a882503200c09e2390bf9ab34303250a8" prot="public">
          <name>G80</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a9b57f1d996a66ac871cc1e6b2cd685b8" prot="public">
          <name>GF100</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4ad0beedec7faa49a8a474e5357ed9d737" prot="public">
          <name>UnknownNVidia</name>
          <initializer>= 1999</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4ae5bfcdb894f5c2ec335e5dde8c050e51" prot="public">
          <name>I8XX</name>
          <initializer>= 2000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a2a9addc41078395d41b8ee9f90f73328" prot="public">
          <name>I915</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a4a9b3f4979e3c1f74db4c54cbb9b3658" prot="public">
          <name>I965</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a850267cae4705b81c0f2f3e8a9561ed0" prot="public">
          <name>SandyBridge</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a4cb1ca4a493fdca3c1578fef3c9180f5" prot="public">
          <name>IvyBridge</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4abeb8fefa932e6cc1f740af367b44d9f9" prot="public">
          <name>Haswell</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a0c821216488142b1f0e1b59dd16e65a8" prot="public">
          <name>BayTrail</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4ae201337e6f69735f7d7f4359c6522a89" prot="public">
          <name>Cherryview</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4ac127642ac587b093d774a500fe3e50d3" prot="public">
          <name>Broadwell</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a59b2ae7a57f5fa3ec595963b9cdaa589" prot="public">
          <name>ApolloLake</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a955fa12e7224df4ef8ff7f689213761f" prot="public">
          <name>Skylake</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a8b760f61875d16ea4e9d310e0c5a4977" prot="public">
          <name>GeminiLake</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a3a4498a5130b301c546b0436456b5240" prot="public">
          <name>KabyLake</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a20ac6da87384046fe74ee95a7ebd3196" prot="public">
          <name>CoffeeLake</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a5a3d0f9462e1d32cd86dc10648ad97e0" prot="public">
          <name>WhiskeyLake</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a2047315ae5cb3922c9aee47f89028e68" prot="public">
          <name>CometLake</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a9f8b17de9c2a840abaa5bcd63f2b7739" prot="public">
          <name>CannonLake</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a16e4528448ea887717e17d108d9920c8" prot="public">
          <name>IceLake</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4af710cf86dede4149548cda98f9777116" prot="public">
          <name>TigerLake</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4aae97e3871603e0d155b4269e0275cf29" prot="public">
          <name>UnknownIntel</name>
          <initializer>= 2999</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4ac702f10f4c0b22044dc0c158981728be" prot="public">
          <name>Adreno1XX</name>
          <initializer>= 3000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a94da78568edbd54a7ee0ccea2cb6ee54" prot="public">
          <name>Adreno2XX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a60b7b181ef0bbe6ede98c47a84d428b2" prot="public">
          <name>Adreno3XX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a899d524cfb29b6df5128335868549e0c" prot="public">
          <name>Adreno4XX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a1c1a4744c736a5b93a60b8bb642a1e04" prot="public">
          <name>Adreno5XX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a8f93dd544a0720eb1b390d569e60b8b4" prot="public">
          <name>UnknownAdreno</name>
          <initializer>= 3999</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4aaac4d4223c55023481079fc80ca80ba4" prot="public">
          <name>MaliT7XX</name>
          <initializer>= 4000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a9e072829793851e46f0a33f253aa4a56" prot="public">
          <name>MaliT8XX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a4a1526e7f2503beea6e313e7cda37954" prot="public">
          <name>MaliGXX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a69f393a29299dde2a4f5b562574127fe" prot="public">
          <name>UnknownPanfrost</name>
          <initializer>= 4999</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4add6b27f7a1915f467ff32c3cfe66aae7" prot="public">
          <name>Mali400</name>
          <initializer>= 5000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a994caaa176b3f415e4a8a07a65266056" prot="public">
          <name>Mali450</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4adcff1eb99968a6568b709d6f82d6a9bb" prot="public">
          <name>Mali470</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4abf1cd6c6cafea90cbb779107abbc6326" prot="public">
          <name>UnknownLima</name>
          <initializer>= 5999</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a56e1387dcd17e47b3b2cc1d6173bc882" prot="public">
          <name>VC4_2_1</name>
          <initializer>= 6000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a76fdc99c065c29ee292c66475d76889a" prot="public">
          <name>UnknownVideoCore4</name>
          <initializer>= 6999</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4af22b4cefedc9837710b4cd2349b69e3c" prot="public">
          <name>V3D_4_2</name>
          <initializer>= 7000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a16471ffc849210b7adc95de71aeff6df" prot="public">
          <name>UnknownVideoCore3D</name>
          <initializer>= 7999</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4a47e9b326f8854de5d4e84f6c4eb3e098" prot="public">
          <name>UnknownChipClass</name>
          <initializer>= 99999</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.h" line="53" column="1" bodyfile="kwin/src/opengl/glplatform.h" bodystart="53" bodyend="135"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a5ea35b6d898ef92e1904522c66efa184" prot="public" static="no" strong="yes">
        <type></type>
        <name>ShaderTrait</name>
        <qualifiedname>KWin::ShaderTrait</qualifiedname>
        <enumvalue id="namespace_k_win_1a5ea35b6d898ef92e1904522c66efa184a85736ea5bc8da56c443818dfff6ef91f" prot="public">
          <name>MapTexture</name>
          <initializer>= (1 &lt;&lt; 0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a5ea35b6d898ef92e1904522c66efa184a7974630d5c51a3472fbe51739f285185" prot="public">
          <name>UniformColor</name>
          <initializer>= (1 &lt;&lt; 1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a5ea35b6d898ef92e1904522c66efa184ac870e2fca2609e8077de9470fbb9ab43" prot="public">
          <name>Modulate</name>
          <initializer>= (1 &lt;&lt; 2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a5ea35b6d898ef92e1904522c66efa184a21b19a78d7fe5620d542c70f4e1ad07e" prot="public">
          <name>AdjustSaturation</name>
          <initializer>= (1 &lt;&lt; 3)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a5ea35b6d898ef92e1904522c66efa184aa8f7aca3a49bf1645d089a470202154e" prot="public">
          <name>TransformColorspace</name>
          <initializer>= (1 &lt;&lt; 4)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a5ea35b6d898ef92e1904522c66efa184a32244a3f2f998a5293f1cec22d9db1c3" prot="public">
          <name>MapExternalTexture</name>
          <initializer>= (1 &lt;&lt; 5)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a5ea35b6d898ef92e1904522c66efa184af9e0b7b9fec8a9dbe6d772c78c95bda3" prot="public">
          <name>MapYUVTexture</name>
          <initializer>= (1 &lt;&lt; 6)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshadermanager.h" line="25" column="1" bodyfile="kwin/src/opengl/glshadermanager.h" bodystart="25" bodyend="33"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1ad6098fc293bb371948ad74f841c6a7b7" prot="public" static="no" strong="no">
        <type></type>
        <name>TextureCoordinateType</name>
        <qualifiedname>KWin::TextureCoordinateType</qualifiedname>
        <enumvalue id="namespace_k_win_1ad6098fc293bb371948ad74f841c6a7b7a1cef6155ea1454d32a602b5627a1bf2a" prot="public">
          <name>NormalizedCoordinates</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ad6098fc293bb371948ad74f841c6a7b7ab0045bc64918f53582f91b633b20aca5" prot="public">
          <name>UnnormalizedCoordinates</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.h" line="34" column="1" bodyfile="kwin/src/opengl/gltexture.h" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a4559cf19c26624e384566b9859843499" prot="public" static="no" strong="no">
        <type></type>
        <name>VertexAttributeType</name>
        <qualifiedname>KWin::VertexAttributeType</qualifiedname>
        <enumvalue id="namespace_k_win_1a4559cf19c26624e384566b9859843499a28ec5128ff65bc7e124bcea51873aa3a" prot="public">
          <name>VA_Position</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a4559cf19c26624e384566b9859843499acb8706a051627d593d64635f4f9487cd" prot="public">
          <name>VA_TexCoord</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a4559cf19c26624e384566b9859843499a37d64d713833c316fb5048336ac99dce" prot="public">
          <name>VertexAttributeCount</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glvertexbuffer.h" line="26" column="1" bodyfile="kwin/src/opengl/glvertexbuffer.h" bodystart="26" bodyend="30"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a254cd5c17a7c926651623f471e6906f6" prot="public" static="no" strong="no">
        <type></type>
        <name>XwaylandEavesdropsMode</name>
        <qualifiedname>KWin::XwaylandEavesdropsMode</qualifiedname>
        <enumvalue id="namespace_k_win_1a254cd5c17a7c926651623f471e6906f6ac4ecf42edf3ec35430405a17588ed7f8" prot="public">
          <name>None</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a254cd5c17a7c926651623f471e6906f6ad780ce4426498f510612d2c176b01e10" prot="public">
          <name>NonCharacterKeys</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a254cd5c17a7c926651623f471e6906f6a8971df063f3e3e1404f6cc101ce645eb" prot="public">
          <name>AllKeysWithModifier</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a254cd5c17a7c926651623f471e6906f6a3399351863470ca192583e47cec46977" prot="public">
          <name>All</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/options.h" line="24" column="1" bodyfile="kwin/src/options.h" bodystart="24" bodyend="29"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1aeee89c626725dcb9cadcad8528dabcc5" prot="public" static="no" strong="no">
        <type></type>
        <name>XwaylandCrashPolicy</name>
        <qualifiedname>KWin::XwaylandCrashPolicy</qualifiedname>
        <enumvalue id="namespace_k_win_1aeee89c626725dcb9cadcad8528dabcc5a05da56c5e01edb565ac0c1965f2a1c3d" prot="public">
          <name>Stop</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aeee89c626725dcb9cadcad8528dabcc5ad52b27e054aacfb32d4759ec232a9aa6" prot="public">
          <name>Restart</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enum type specifies whether the Xwayland server must be restarted after a crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/options.h" line="34" column="1" bodyfile="kwin/src/options.h" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fc" prot="public" static="no" strong="no">
        <type></type>
        <name>PlacementPolicy</name>
        <qualifiedname>KWin::PlacementPolicy</qualifiedname>
        <enumvalue id="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fcac3e336c083499582f61ec89be7ee347c" prot="public">
          <name>PlacementNone</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fcac25c720a4c42d61562a80e7bed7c4109" prot="public">
          <name>PlacementDefault</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fca901e6ed881f07dde85d66a0792321966" prot="public">
          <name>PlacementUnknown</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fca5ee3d2b00a47e69611f8037813a0edf2" prot="public">
          <name>PlacementRandom</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fca9369cb378f8caa525ed366758c3b62ba" prot="public">
          <name>PlacementSmart</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fca67a37c0bd651f0014a5e37b1b5e60449" prot="public">
          <name>PlacementCentered</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fca13f133ad6f8ab09558e8a48967b31615" prot="public">
          <name>PlacementZeroCornered</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fca2a75a6d98abba5dc71f7a61b2c76cb71" prot="public">
          <name>PlacementUnderMouse</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fca639dc70e4d8bc5f63286d2fd7bad20ba" prot="public">
          <name>PlacementOnMainWindow</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fca3b0bb9c26299f42f2413c00f7da0b3df" prot="public">
          <name>PlacementMaximizing</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_k_win_1_1_placement" kindref="compound">Placement</ref> policies. How workspace decides the way windows get positioned on the screen. The better the policy, the heavier the resource use. Normally you don&apos;t have to worry. What the WM adds to the startup time is nil compared to the creation of the window itself in the memory </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/options.h" line="45" column="1" bodyfile="kwin/src/options.h" bodystart="45" bodyend="56"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a69cc04b93ce22742c7032b5c5faf3334" prot="public" static="no" strong="no">
        <type></type>
        <name>NightLightMode</name>
        <qualifiedname>KWin::NightLightMode</qualifiedname>
        <enumvalue id="namespace_k_win_1a69cc04b93ce22742c7032b5c5faf3334a0c17304e816c442d4a1a8c59e63b5958" prot="public">
          <name>Automatic</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Color temperature is computed based on the current position of the Sun.</para>
<para>Location of the user is provided by Plasma. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a69cc04b93ce22742c7032b5c5faf3334a84eff8931e8bf8535d09d938c2a53c6b" prot="public">
          <name>Location</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Color temperature is computed based on the current position of the Sun.</para>
<para>Location of the user is provided by themselves. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a69cc04b93ce22742c7032b5c5faf3334a2975b26eb0d87f196ed31f8434b983d7" prot="public">
          <name>Timings</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Color temperature is computed based on the current time.</para>
<para>Sunrise and sunset times have to be specified by the user. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a69cc04b93ce22742c7032b5c5faf3334aae22f7bbd5a84c4c3c83abf57f00bedc" prot="public">
          <name>Constant</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Color temperature is constant thoughout the day. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enum type is used to specify operation mode of the night light manager. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/nightlight/nightlightmanager.h" line="35" column="1" bodyfile="kwin/src/plugins/nightlight/nightlightmanager.h" bodystart="35" bodyend="58"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1ab5dc04e1cac9f5478e610547be3b5633" prot="public" static="no" strong="no">
        <type></type>
        <name>ScreenShotFlag</name>
        <qualifiedname>KWin::ScreenShotFlag</qualifiedname>
        <enumvalue id="namespace_k_win_1ab5dc04e1cac9f5478e610547be3b5633af520366df7a4b1ad8a1e002727afe60b" prot="public">
          <name>ScreenShotIncludeDecoration</name>
          <initializer>= 0x1</initializer>
          <briefdescription>
<para>Include window titlebar and borders. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ab5dc04e1cac9f5478e610547be3b5633aefe4f3baa242dca5715e85755315978a" prot="public">
          <name>ScreenShotIncludeCursor</name>
          <initializer>= 0x2</initializer>
          <briefdescription>
<para>Include the cursor. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ab5dc04e1cac9f5478e610547be3b5633a446a183e67c60af12349796fbb9b2401" prot="public">
          <name>ScreenShotNativeResolution</name>
          <initializer>= 0x4</initializer>
          <briefdescription>
<para>Take the screenshot at the native resolution. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ab5dc04e1cac9f5478e610547be3b5633a27acf6bcea0a3933b12d9d79523ec0ec" prot="public">
          <name>ScreenShotIncludeShadow</name>
          <initializer>= 0x8</initializer>
          <briefdescription>
<para>Include the window shadow. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enum type is used to specify how a screenshot needs to be taken. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screenshot/screenshot.h" line="25" column="1" bodyfile="kwin/src/plugins/screenshot/screenshot.h" bodystart="25" bodyend="30"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a5e1f12b4f6fe1e98672dabf86c00fd1f" prot="public" static="no" strong="no">
        <type></type>
        <name>StrutArea</name>
        <qualifiedname>KWin::StrutArea</qualifiedname>
        <enumvalue id="namespace_k_win_1a5e1f12b4f6fe1e98672dabf86c00fd1fa136a5490d70cf6102dd8b9c120fea27d" prot="public">
          <name>StrutAreaInvalid</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a5e1f12b4f6fe1e98672dabf86c00fd1faaf851dfa7690117100f930e8976a2e39" prot="public">
          <name>StrutAreaTop</name>
          <initializer>= 1 &lt;&lt; 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a5e1f12b4f6fe1e98672dabf86c00fd1fa72eb7170aba4e9ea52c4f9ac5b2d353b" prot="public">
          <name>StrutAreaRight</name>
          <initializer>= 1 &lt;&lt; 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a5e1f12b4f6fe1e98672dabf86c00fd1fa8a19680a6a57ccd911f098df7ebc09ee" prot="public">
          <name>StrutAreaBottom</name>
          <initializer>= 1 &lt;&lt; 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a5e1f12b4f6fe1e98672dabf86c00fd1fae563c9d36d4b08112f58bb8374d1a12b" prot="public">
          <name>StrutAreaLeft</name>
          <initializer>= 1 &lt;&lt; 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a5e1f12b4f6fe1e98672dabf86c00fd1faeb2d1af5e7d3993721032b60c90ee565" prot="public">
          <name>StrutAreaAll</name>
          <initializer>= StrutAreaTop | StrutAreaRight | StrutAreaBottom | StrutAreaLeft</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/common.h" line="35" column="1" bodyfile="kwin/src/utils/common.h" bodystart="35" bodyend="42"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a14799797d985d6375dd7684fff01585f" prot="public" static="no" strong="no">
        <type></type>
        <name>ShadeMode</name>
        <qualifiedname>KWin::ShadeMode</qualifiedname>
        <enumvalue id="namespace_k_win_1a14799797d985d6375dd7684fff01585fa96968d2418f89776544aadc16404b6d4" prot="public">
          <name>ShadeNone</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a14799797d985d6375dd7684fff01585faf7edb6b11c2666b2ef0da40d95f12d39" prot="public">
          <name>ShadeNormal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a14799797d985d6375dd7684fff01585faec9cfe314b9bcc398475c383305a8174" prot="public">
          <name>ShadeHover</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a14799797d985d6375dd7684fff01585fa0efe8ab38e5c11c17415dffdf970bda6" prot="public">
          <name>ShadeActivated</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/common.h" line="62" column="1" bodyfile="kwin/src/utils/common.h" bodystart="62" bodyend="67"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a0b54d29cd5d4773605dbba26934d6197" prot="public" static="no" strong="yes">
        <type></type>
        <name>TextInputContentHint</name>
        <qualifiedname>KWin::TextInputContentHint</qualifiedname>
        <enumvalue id="namespace_k_win_1a0b54d29cd5d4773605dbba26934d6197a6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>no special behaviour </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a0b54d29cd5d4773605dbba26934d6197a7991bcab47afa821c52961c2d45cb7d1" prot="public">
          <name>AutoCompletion</name>
          <initializer>= 1 &lt;&lt; 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>suggest word completions </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a0b54d29cd5d4773605dbba26934d6197aab9be766d448bff1d447d1b486966d06" prot="public">
          <name>AutoCorrection</name>
          <initializer>= 1 &lt;&lt; 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>suggest word corrections </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a0b54d29cd5d4773605dbba26934d6197ac72dc83b1376e8d4a3f4ddf30a6bfe3b" prot="public">
          <name>AutoCapitalization</name>
          <initializer>= 1 &lt;&lt; 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>switch to uppercase letters at the start of a sentence </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a0b54d29cd5d4773605dbba26934d6197af3fa26b7f03932f588080f5b22d68908" prot="public">
          <name>LowerCase</name>
          <initializer>= 1 &lt;&lt; 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>prefer lowercase letters </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a0b54d29cd5d4773605dbba26934d6197a4dd5882de4f7bbcb748ff15bebf21ce0" prot="public">
          <name>UpperCase</name>
          <initializer>= 1 &lt;&lt; 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>prefer uppercase letters </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a0b54d29cd5d4773605dbba26934d6197a9d47f803fbe63c1d5ed84d5cf29d2fc3" prot="public">
          <name>TitleCase</name>
          <initializer>= 1 &lt;&lt; 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>prefer casing for titles and headings (can be language dependent) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a0b54d29cd5d4773605dbba26934d6197af932dc88161be8aa7d18b7c03aa9cd01" prot="public">
          <name>HiddenText</name>
          <initializer>= 1 &lt;&lt; 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>characters should be hidden </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a0b54d29cd5d4773605dbba26934d6197a7edd3b3ec9bba6551794953f86ff5f2a" prot="public">
          <name>SensitiveData</name>
          <initializer>= 1 &lt;&lt; 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>typed text should not be stored </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a0b54d29cd5d4773605dbba26934d6197a7280578e6a45fd916ed9431425289c9e" prot="public">
          <name>Latin</name>
          <initializer>= 1 &lt;&lt; 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>just latin characters should be entered </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a0b54d29cd5d4773605dbba26934d6197ad16a748b5543974384bc43d392f1e566" prot="public">
          <name>MultiLine</name>
          <initializer>= 1 &lt;&lt; 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>the text input is multi line </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ContentHint allows to modify the behavior of the text input. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/textinput.h" line="17" column="1" bodyfile="kwin/src/wayland/textinput.h" bodystart="17" bodyend="62"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1ab2addc3b8b9ec94f61414f824dd23c26" prot="public" static="no" strong="yes">
        <type></type>
        <name>TextInputContentPurpose</name>
        <qualifiedname>KWin::TextInputContentPurpose</qualifiedname>
        <enumvalue id="namespace_k_win_1ab2addc3b8b9ec94f61414f824dd23c26a960b44c579bc2f6818d2daaf9e4c16f0" prot="public">
          <name>Normal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>default input, allowing all characters </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ab2addc3b8b9ec94f61414f824dd23c26a6132295fcf5570fb8b0a944ef322a598" prot="public">
          <name>Alpha</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>allow only alphabetic characters </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ab2addc3b8b9ec94f61414f824dd23c26a1051b04f09c0cf06b4290d2caab0856f" prot="public">
          <name>Digits</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>allow only digits </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ab2addc3b8b9ec94f61414f824dd23c26ab2ee912b91d69b435159c7c3f6df7f5f" prot="public">
          <name>Number</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>input a number (including decimal separator and sign) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ab2addc3b8b9ec94f61414f824dd23c26abcc254b55c4a1babdf1dcb82c207506b" prot="public">
          <name>Phone</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>input a phone number </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ab2addc3b8b9ec94f61414f824dd23c26a02a3a357710cc2a5dfdfb74ed012fb59" prot="public">
          <name>Url</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>input an URL </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ab2addc3b8b9ec94f61414f824dd23c26ace8ae9da5b7cd6c3df2929543a9af92d" prot="public">
          <name>Email</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>input an email address </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ab2addc3b8b9ec94f61414f824dd23c26a49ee3087348e8d44e1feda1917443987" prot="public">
          <name>Name</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>input a name of a person </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ab2addc3b8b9ec94f61414f824dd23c26adc647eb65e6711e155375218212b3964" prot="public">
          <name>Password</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>input a password </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ab2addc3b8b9ec94f61414f824dd23c26a44749712dbec183e983dcd78a7736c41" prot="public">
          <name>Date</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>input a date </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ab2addc3b8b9ec94f61414f824dd23c26aa76d4ef5f3f6a672bbfab2865563e530" prot="public">
          <name>Time</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>input a time </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ab2addc3b8b9ec94f61414f824dd23c26a8cf10d2341ed01492506085688270c1e" prot="public">
          <name>DateTime</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>input a date and time </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ab2addc3b8b9ec94f61414f824dd23c26a514d8a494f087c0d549b9536c2ef3bd9" prot="public">
          <name>Terminal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>input for a terminal </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1ab2addc3b8b9ec94f61414f824dd23c26ae78e14c5f18f793bdcd4726766f0fa44" prot="public">
          <name>Pin</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>input is numeric password </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The ContentPurpose allows to specify the primary purpose of a text input.</para>
<para>This allows an input method to show special purpose input panels with extra characters or to disallow some characters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/textinput.h" line="72" column="1" bodyfile="kwin/src/wayland/textinput.h" bodystart="72" bodyend="129"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a79c0b50fcde5dfd404bf89c1f101237e" prot="public" static="no" strong="yes">
        <type></type>
        <name>TextInputChangeCause</name>
        <qualifiedname>KWin::TextInputChangeCause</qualifiedname>
        <enumvalue id="namespace_k_win_1a79c0b50fcde5dfd404bf89c1f101237eab3af76929ed9c0da766840c591aab4af" prot="public">
          <name>InputMethod</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Change caused by input method </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a79c0b50fcde5dfd404bf89c1f101237ea6311ae17c1ee52b36e68aaf4ad066387" prot="public">
          <name>Other</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Something else other than input method caused change </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/textinput.h" line="131" column="1" bodyfile="kwin/src/wayland/textinput.h" bodystart="131" bodyend="141"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1a0943084086a77c03e7b4b983d0340e7a" prot="public" static="no" strong="no">
        <type></type>
        <name>WaylandGeometryType</name>
        <qualifiedname>KWin::WaylandGeometryType</qualifiedname>
        <enumvalue id="namespace_k_win_1a0943084086a77c03e7b4b983d0340e7aafe95f054d9eeac74f531deda0c5b4cc8" prot="public">
          <name>WaylandGeometryClient</name>
          <initializer>= 0x1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a0943084086a77c03e7b4b983d0340e7aa692caf1eacb699e0695adfca629eddee" prot="public">
          <name>WaylandGeometryFrame</name>
          <initializer>= 0x2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1a0943084086a77c03e7b4b983d0340e7aab8e37b0df52d12bf96d86bda4dae7e59" prot="public">
          <name>WaylandGeometryBuffer</name>
          <initializer>= 0x4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/waylandwindow.cpp" line="28" column="1" bodyfile="kwin/src/waylandwindow.cpp" bodystart="28" bodyend="32"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_k_win_1aef6c3d1a0fcb5309953ca3229d42378d" prot="public" static="no" strong="yes">
        <type></type>
        <name>Predicate</name>
        <qualifiedname>KWin::Predicate</qualifiedname>
        <enumvalue id="namespace_k_win_1aef6c3d1a0fcb5309953ca3229d42378daeea59f1acf581bd67c4ce7b102f5b48d" prot="public">
          <name>WindowMatch</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aef6c3d1a0fcb5309953ca3229d42378da58853a001e76fea8ac0ab782c7047447" prot="public">
          <name>WrapperIdMatch</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_k_win_1aef6c3d1a0fcb5309953ca3229d42378da20f0b74794d8a856575dc208457ccbda" prot="public">
          <name>FrameIdMatch</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Defines Predicates on how to search for a <ref refid="class_client" kindref="compound">Client</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Used by Workspace::findClient. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="48" column="1" bodyfile="kwin/src/x11window.h" bodystart="48" bodyend="52"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespace_k_win_1a2d641a10a09d239f58c83b10c430f49f" prot="public" static="no">
        <type>std::chrono::steady_clock::time_point</type>
        <definition>using KWin::TimePoint =  std::chrono::steady_clock::time_point</definition>
        <argsstring></argsstring>
        <name>TimePoint</name>
        <qualifiedname>KWin::TimePoint</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_commit_thread.h" line="25" column="1" bodyfile="kwin/src/backends/drm/drm_commit_thread.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_k_win_1a3992f7fd81bca2bffb0f9c4d68d5eb01" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; T, <ref refid="struct_k_win_1_1_drm_deleter" kindref="compound">DrmDeleter</ref>&lt; T &gt; &gt;</type>
        <definition>using KWin::DrmUniquePtr =  std::unique_ptr&lt;T, DrmDeleter&lt;T&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>DrmUniquePtr</name>
        <qualifiedname>KWin::DrmUniquePtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_pointer.h" line="149" column="1" bodyfile="kwin/src/backends/drm/drm_pointer.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_k_win_1ace229504290a828dece325a748e290c9" prot="public" static="no">
        <type>QPair&lt; QString, <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> * &gt;</type>
        <definition>typedef QPair&lt;QString, Effect *&gt; KWin::EffectPair</definition>
        <argsstring></argsstring>
        <name>EffectPair</name>
        <qualifiedname>KWin::EffectPair</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.h" line="85" column="15" bodyfile="kwin/src/effect/effecthandler.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_k_win_1a011701c82e8ff839a436db15db058f8b" prot="public" static="no">
        <type>std::variant&lt; <ref refid="struct_k_win_1_1_keyboard_shortcut" kindref="compound">KeyboardShortcut</ref>, <ref refid="struct_k_win_1_1_pointer_button_shortcut" kindref="compound">PointerButtonShortcut</ref>, <ref refid="struct_k_win_1_1_pointer_axis_shortcut" kindref="compound">PointerAxisShortcut</ref>, <ref refid="struct_k_win_1_1_realtime_feedback_swipe_shortcut" kindref="compound">RealtimeFeedbackSwipeShortcut</ref>, <ref refid="struct_k_win_1_1_realtime_feedback_pinch_shortcut" kindref="compound">RealtimeFeedbackPinchShortcut</ref> &gt;</type>
        <definition>using KWin::Shortcut =  std::variant&lt;KeyboardShortcut, PointerButtonShortcut, PointerAxisShortcut, RealtimeFeedbackSwipeShortcut, RealtimeFeedbackPinchShortcut&gt;</definition>
        <argsstring></argsstring>
        <name>Shortcut</name>
        <qualifiedname>KWin::Shortcut</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/globalshortcuts.h" line="186" column="1" bodyfile="kwin/src/globalshortcuts.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_k_win_1a562c4f858823cac192b96aa2d532ead7" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* KWin::eglFuncPtr) ()</definition>
        <argsstring>)()</argsstring>
        <name>eglFuncPtr</name>
        <qualifiedname>KWin::eglFuncPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/eglcontext.cpp" line="101" column="9" bodyfile="kwin/src/opengl/eglcontext.cpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_k_win_1a96983a1363484f7c3c7ace31e7117ab5" prot="public" static="no">
        <type>GLenum(*)()</type>
        <definition>using KWin::glGetGraphicsResetStatus_func =  GLenum (*)()</definition>
        <argsstring></argsstring>
        <name>glGetGraphicsResetStatus_func</name>
        <qualifiedname>KWin::glGetGraphicsResetStatus_func</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/eglcontext.h" line="30" column="1" bodyfile="kwin/src/opengl/eglcontext.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_k_win_1ac9bf14ec3e67c272e2a440e60932d092" prot="public" static="no">
        <type>void(*)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum <ref refid="namespace_k_win_1a6ef3f38157c98f3fe83ae3ec855ee903" kindref="member">format</ref>, GLenum <ref refid="namespace_k_win_1a3223e96fea9ab917c25be94e2434013a" kindref="member">type</ref>, GLsizei bufSize, GLvoid *data)</type>
        <definition>using KWin::glReadnPixels_func =  void (*)(GLint x, GLint y, GLsizei width, GLsizei height,
                                    GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)</definition>
        <argsstring></argsstring>
        <name>glReadnPixels_func</name>
        <qualifiedname>KWin::glReadnPixels_func</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/eglcontext.h" line="31" column="1" bodyfile="kwin/src/opengl/eglcontext.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_k_win_1ac9da8d8f07166017c4c9a0c929013c59" prot="public" static="no">
        <type>void(*)(GLenum target, GLint level, GLenum <ref refid="namespace_k_win_1a6ef3f38157c98f3fe83ae3ec855ee903" kindref="member">format</ref>, GLenum <ref refid="namespace_k_win_1a3223e96fea9ab917c25be94e2434013a" kindref="member">type</ref>, GLsizei bufSize, void *pixels)</type>
        <definition>using KWin::glGetnTexImage_func =  void (*)(GLenum target, GLint level, GLenum format, GLenum type,
                                     GLsizei bufSize, void *pixels)</definition>
        <argsstring></argsstring>
        <name>glGetnTexImage_func</name>
        <qualifiedname>KWin::glGetnTexImage_func</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/eglcontext.h" line="33" column="1" bodyfile="kwin/src/opengl/eglcontext.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_k_win_1aa08777c66128776b8afa6c1df6790c59" prot="public" static="no">
        <type>void(*)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)</type>
        <definition>using KWin::glGetnUniformfv_func =  void (*)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)</definition>
        <argsstring></argsstring>
        <name>glGetnUniformfv_func</name>
        <qualifiedname>KWin::glGetnUniformfv_func</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/eglcontext.h" line="35" column="1" bodyfile="kwin/src/opengl/eglcontext.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_k_win_1aaaba2bdf110fc3e77668340b9e5a4ff4" prot="public" static="no">
        <type>QPair&lt; QDateTime, QDateTime &gt;</type>
        <definition>typedef QPair&lt;QDateTime, QDateTime&gt; KWin::DateTimes</definition>
        <argsstring></argsstring>
        <name>DateTimes</name>
        <qualifiedname>KWin::DateTimes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/nightlight/nightlightmanager.h" line="30" column="15" bodyfile="kwin/src/plugins/nightlight/nightlightmanager.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_k_win_1af8087ffc5ee2774d3ec42e3ff2ad9456" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; T, <ref refid="struct_k_win_1_1_c_deleter" kindref="compound">CDeleter</ref> &gt;</type>
        <definition>using KWin::UniqueCPtr =  std::unique_ptr&lt;T, CDeleter&gt;</definition>
        <argsstring></argsstring>
        <name>UniqueCPtr</name>
        <qualifiedname>KWin::UniqueCPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/c_ptr.h" line="28" column="1" bodyfile="kwin/src/utils/c_ptr.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_k_win_1a98fbb198fd4d068d56bb796e99bfe8c5" prot="public" static="no">
        <type>QList&lt; <ref refid="class_k_win_1_1_strut_rect" kindref="compound">StrutRect</ref> &gt;</type>
        <definition>typedef QList&lt;StrutRect&gt; KWin::StrutRects</definition>
        <argsstring></argsstring>
        <name>StrutRects</name>
        <qualifiedname>KWin::StrutRects</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/common.h" line="60" column="15" bodyfile="kwin/src/utils/common.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_k_win_1a744e4984950d2b4bcd270bd1a57df2f0" prot="public" static="no">
        <type>std::variant&lt; <ref refid="struct_k_win_1_1_cursor_theme_x_entry_info" kindref="compound">CursorThemeXEntryInfo</ref>, <ref refid="struct_k_win_1_1_cursor_theme_svg_entry_info" kindref="compound">CursorThemeSvgEntryInfo</ref> &gt;</type>
        <definition>using KWin::CursorThemeEntryInfo =  std::variant&lt;CursorThemeXEntryInfo,
                                          CursorThemeSvgEntryInfo&gt;</definition>
        <argsstring></argsstring>
        <name>CursorThemeEntryInfo</name>
        <qualifiedname>KWin::CursorThemeEntryInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/cursortheme.cpp" line="42" column="1" bodyfile="kwin/src/utils/cursortheme.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_k_win_1a462eec72df279c1e20733e203f83fdf4" prot="public" static="no">
        <type>QList&lt; <ref refid="struct_k_win_1_1_d_bus_desktop_data_struct" kindref="compound">DBusDesktopDataStruct</ref> &gt;</type>
        <definition>typedef QList&lt;DBusDesktopDataStruct&gt; KWin::DBusDesktopDataVector</definition>
        <argsstring></argsstring>
        <name>DBusDesktopDataVector</name>
        <qualifiedname>KWin::DBusDesktopDataVector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/virtualdesktopsdbustypes.h" line="23" column="15" bodyfile="kwin/src/virtualdesktopsdbustypes.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_k_win_1a1f59b09426418b14e99ede98c6a021f6" prot="public" static="no">
        <type>std::variant&lt; <ref refid="class_k_win_1_1_pointer_surface_cursor" kindref="compound">PointerSurfaceCursor</ref> *, QByteArray &gt;</type>
        <definition>using KWin::PointerCursor =  std::variant&lt;PointerSurfaceCursor *, QByteArray&gt;</definition>
        <argsstring></argsstring>
        <name>PointerCursor</name>
        <qualifiedname>KWin::PointerCursor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/pointer.h" line="26" column="1" bodyfile="kwin/src/wayland/pointer.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_k_win_1ae60af94c7039ac81625a07bdc93c9122" prot="public" static="no">
        <type>std::variant&lt; <ref refid="class_k_win_1_1_tablet_surface_cursor_v2" kindref="compound">TabletSurfaceCursorV2</ref> *, QByteArray &gt;</type>
        <definition>using KWin::TabletCursorSourceV2 =  std::variant&lt;TabletSurfaceCursorV2 *, QByteArray&gt;</definition>
        <argsstring></argsstring>
        <name>TabletCursorSourceV2</name>
        <qualifiedname>KWin::TabletCursorSourceV2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/tablet_v2.h" line="80" column="1" bodyfile="kwin/src/wayland/tablet_v2.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_k_win_1a43c059c9fd683dba8da0f59f90c934ee" prot="public" static="no">
        <type>std::variant&lt; QuickTileMode, <ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9" kindref="member">MaximizeMode</ref> &gt;</type>
        <definition>using KWin::ElectricBorderMode =  std::variant&lt;QuickTileMode, MaximizeMode&gt;</definition>
        <argsstring></argsstring>
        <name>ElectricBorderMode</name>
        <qualifiedname>KWin::ElectricBorderMode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="60" column="1" bodyfile="kwin/src/window.h" bodystart="60" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespace_k_win_1a4bf443c7ce7a34bbb3cf8db03f531d06" prot="public" static="yes" mutable="no">
        <type>const float</type>
        <definition>const float KWin::blackbodyColor[]</definition>
        <argsstring>[]</argsstring>
        <name>blackbodyColor</name>
        <qualifiedname>KWin::blackbodyColor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whitepoint values for temperatures at 100K intervals. These will be interpolated for the actual temperature. This table was provided by Ingo Thies, 2013. See the following file for more information: <ulink url="https://github.com/jonls/redshift/blob/master/README-colorramp">https://github.com/jonls/redshift/blob/master/README-colorramp</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/3rdparty/colortemperature.h" line="22" column="20" bodyfile="kwin/src/3rdparty/colortemperature.h" bodystart="22" bodyend="265"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a1d99bcde3a1a935984180c0f6a367886" prot="public" static="no" extern="yes" mutable="no">
        <type>KWIN_EXPORT <ref refid="class_k_win_1_1_atoms" kindref="compound">Atoms</ref> *</type>
        <definition>KWIN_EXPORT Atoms* KWin::atoms</definition>
        <argsstring></argsstring>
        <name>atoms</name>
        <qualifiedname>KWin::atoms</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/atoms.h" line="98" column="26" declfile="kwin/src/atoms.h" declline="98" declcolumn="26"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a878957e8ec3f267c68d0129667012702" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::s_dpmsTimeout</definition>
        <argsstring></argsstring>
        <name>s_dpmsTimeout</name>
        <qualifiedname>KWin::s_dpmsTimeout</qualifiedname>
        <initializer>= <ref refid="namespace_k_win_1aed283476085336e5df3546c99d94f6a7" kindref="member">environmentVariableIntValue</ref>(&quot;KWIN_DPMS_WORKAROUND_TIMEOUT&quot;).value_or(2000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_backend.cpp" line="271" column="18" bodyfile="kwin/src/backends/drm/drm_backend.cpp" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a689e697f30c2a88813a54467a43e816e" prot="public" static="yes" mutable="no">
        <type>std::optional&lt; bool &gt;</type>
        <definition>std::optional&lt;bool&gt; KWin::s_disableBufferWait</definition>
        <argsstring></argsstring>
        <name>s_disableBufferWait</name>
        <qualifiedname>KWin::s_disableBufferWait</qualifiedname>
        <initializer>= <ref refid="namespace_k_win_1a6e980f5969d41ce32e4130f95a0762dc" kindref="member">environmentVariableBoolValue</ref>(&quot;KWIN_DRM_DISABLE_BUFFER_READABILITY_CHECKS&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_buffer.cpp" line="35" column="22" bodyfile="kwin/src/backends/drm/drm_buffer.cpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a8aeb122fa0c513f80a521b18f43de8e0" prot="public" static="yes" mutable="no">
        <type>const std::chrono::microseconds</type>
        <definition>const std::chrono::microseconds KWin::s_safetyMarginMinimum</definition>
        <argsstring></argsstring>
        <name>s_safetyMarginMinimum</name>
        <qualifiedname>KWin::s_safetyMarginMinimum</qualifiedname>
        <initializer>{<ref refid="namespace_k_win_1aed283476085336e5df3546c99d94f6a7" kindref="member">environmentVariableIntValue</ref>(&quot;KWIN_DRM_OVERRIDE_SAFETY_MARGIN&quot;).value_or(1500)}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_commit_thread.cpp" line="339" column="40" bodyfile="kwin/src/backends/drm/drm_commit_thread.cpp" bodystart="339" bodyend="339"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a894f617c4313b8279ba40d60cc689ce1" prot="public" static="yes" mutable="no">
        <type>const QList&lt; QSize &gt;</type>
        <definition>const QList&lt;QSize&gt; KWin::s_commonModes</definition>
        <argsstring></argsstring>
        <name>s_commonModes</name>
        <qualifiedname>KWin::s_commonModes</qualifiedname>
        <initializer>= {
    
    QSize(1600, 1200),
    QSize(1280, 1024), 
    QSize(1024, 768),
    
    QSize(2560, 1600),
    QSize(1920, 1200),
    QSize(1280, 800),
    
    QSize(5120, 2880),
    QSize(3840, 2160),
    QSize(3200, 1800),
    QSize(2880, 1620),
    QSize(2560, 1440),
    QSize(1920, 1080),
    QSize(1600, 900),
    QSize(1368, 768),
    QSize(1280, 720),
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_connector.cpp" line="350" column="20" bodyfile="kwin/src/backends/drm/drm_connector.cpp" bodystart="350" bodyend="369"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a74b9bb30bf60c2fdc0d55692c773119b" prot="public" static="yes" mutable="no">
        <type>const QList&lt; uint64_t &gt;</type>
        <definition>const QList&lt;uint64_t&gt; KWin::linearModifier</definition>
        <argsstring></argsstring>
        <name>linearModifier</name>
        <qualifiedname>KWin::linearModifier</qualifiedname>
        <initializer>= {DRM_FORMAT_MOD_LINEAR}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_egl_layer_surface.cpp" line="35" column="20" bodyfile="kwin/src/backends/drm/drm_egl_layer_surface.cpp" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a34f07b00104cc2b0ebb46efa60676a78" prot="public" static="yes" mutable="no">
        <type>const QList&lt; uint64_t &gt;</type>
        <definition>const QList&lt;uint64_t&gt; KWin::implicitModifier</definition>
        <argsstring></argsstring>
        <name>implicitModifier</name>
        <qualifiedname>KWin::implicitModifier</qualifiedname>
        <initializer>= {DRM_FORMAT_MOD_INVALID}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_egl_layer_surface.cpp" line="36" column="20" bodyfile="kwin/src/backends/drm/drm_egl_layer_surface.cpp" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1af8b7772e7539103f675857c03dc3c605" prot="public" static="yes" mutable="no">
        <type>const QList&lt; uint32_t &gt;</type>
        <definition>const QList&lt;uint32_t&gt; KWin::cpuCopyFormats</definition>
        <argsstring></argsstring>
        <name>cpuCopyFormats</name>
        <qualifiedname>KWin::cpuCopyFormats</qualifiedname>
        <initializer>= {DRM_FORMAT_ARGB8888, DRM_FORMAT_XRGB8888}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_egl_layer_surface.cpp" line="37" column="20" bodyfile="kwin/src/backends/drm/drm_egl_layer_surface.cpp" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a264eef6d06a20ce59881e0f13b187f5a" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool KWin::bufferAgeEnabled</definition>
        <argsstring></argsstring>
        <name>bufferAgeEnabled</name>
        <qualifiedname>KWin::bufferAgeEnabled</qualifiedname>
        <initializer>= qEnvironmentVariable(&quot;KWIN_USE_BUFFER_AGE&quot;) != QStringLiteral(&quot;0&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_egl_layer_surface.cpp" line="39" column="19" bodyfile="kwin/src/backends/drm/drm_egl_layer_surface.cpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a61385935e323b39c89d84b3587fa663a" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool KWin::s_disableTripleBufferingSet</definition>
        <argsstring></argsstring>
        <name>s_disableTripleBufferingSet</name>
        <qualifiedname>KWin::s_disableTripleBufferingSet</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_output.cpp" line="41" column="13" bodyfile="kwin/src/backends/drm/drm_output.cpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ad9efd9e24a83107a0b3b5e7553ec31f2" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool KWin::s_disableTripleBuffering</definition>
        <argsstring></argsstring>
        <name>s_disableTripleBuffering</name>
        <qualifiedname>KWin::s_disableTripleBuffering</qualifiedname>
        <initializer>= qEnvironmentVariableIntValue(&quot;KWIN_DRM_DISABLE_TRIPLE_BUFFERING&quot;, &amp;s_disableTripleBufferingSet) == 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_output.cpp" line="42" column="19" bodyfile="kwin/src/backends/drm/drm_output.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ae45eb018824cbf3abe46af91a17d9a5c" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool KWin::s_allowColorspaceIntel</definition>
        <argsstring></argsstring>
        <name>s_allowColorspaceIntel</name>
        <qualifiedname>KWin::s_allowColorspaceIntel</qualifiedname>
        <initializer>= qEnvironmentVariableIntValue(&quot;KWIN_DRM_ALLOW_INTEL_COLORSPACE&quot;) == 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_output.cpp" line="246" column="19" bodyfile="kwin/src/backends/drm/drm_output.cpp" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a81d7d16136efd5528b17c79e78fa4c37" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool KWin::s_allowColorspaceNVidia</definition>
        <argsstring></argsstring>
        <name>s_allowColorspaceNVidia</name>
        <qualifiedname>KWin::s_allowColorspaceNVidia</qualifiedname>
        <initializer>= qEnvironmentVariableIntValue(&quot;KWIN_DRM_ALLOW_NVIDIA_COLORSPACE&quot;) == 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_output.cpp" line="247" column="19" bodyfile="kwin/src/backends/drm/drm_output.cpp" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a34f07b00104cc2b0ebb46efa60676a78" prot="public" static="yes" mutable="no">
        <type>const QList&lt; uint64_t &gt;</type>
        <definition>const QList&lt;uint64_t&gt; KWin::implicitModifier</definition>
        <argsstring></argsstring>
        <name>implicitModifier</name>
        <qualifiedname>KWin::implicitModifier</qualifiedname>
        <initializer>= {DRM_FORMAT_MOD_INVALID}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_pipeline.cpp" line="37" column="20" bodyfile="kwin/src/backends/drm/drm_pipeline.cpp" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a089f22c0fba0cb6eba185042e7e7385a" prot="public" static="yes" mutable="no">
        <type>const QHash&lt; uint32_t, QList&lt; uint64_t &gt; &gt;</type>
        <definition>const QHash&lt;uint32_t, QList&lt;uint64_t&gt; &gt; KWin::legacyFormats</definition>
        <argsstring></argsstring>
        <name>legacyFormats</name>
        <qualifiedname>KWin::legacyFormats</qualifiedname>
        <initializer>= {{DRM_FORMAT_XRGB8888, implicitModifier}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_pipeline.cpp" line="38" column="20" bodyfile="kwin/src/backends/drm/drm_pipeline.cpp" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1afaa83fe6f72a1b77949003ffb7a642c8" prot="public" static="yes" mutable="no">
        <type>const QHash&lt; uint32_t, QList&lt; uint64_t &gt; &gt;</type>
        <definition>const QHash&lt;uint32_t, QList&lt;uint64_t&gt; &gt; KWin::legacyCursorFormats</definition>
        <argsstring></argsstring>
        <name>legacyCursorFormats</name>
        <qualifiedname>KWin::legacyCursorFormats</qualifiedname>
        <initializer>= {{DRM_FORMAT_ARGB8888, implicitModifier}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_pipeline.cpp" line="39" column="20" bodyfile="kwin/src/backends/drm/drm_pipeline.cpp" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1af9d7c26ed81665a2f717a4959c703d3b" prot="public" static="yes" mutable="no">
        <type>const auto</type>
        <definition>const auto KWin::s_forceScalingMode</definition>
        <argsstring></argsstring>
        <name>s_forceScalingMode</name>
        <qualifiedname>KWin::s_forceScalingMode</qualifiedname>
        <initializer>= []() -&gt; std::optional&lt;<ref refid="class_k_win_1_1_drm_connector_1ad35442285b66b35fec93cea422b9564b" kindref="member">DrmConnector::ScalingMode</ref>&gt; {
    const auto env = qEnvironmentVariable(&quot;KWIN_DRM_FORCE_SCALING_MODE&quot;);
    if (env == &quot;NONE&quot;) {
        return <ref refid="class_k_win_1_1_drm_connector_1ad35442285b66b35fec93cea422b9564ba6adf97f83acf6453d4a6a4b1070f3754" kindref="member">DrmConnector::ScalingMode::None</ref>;
    } else if (env == &quot;FULL&quot;) {
        return <ref refid="class_k_win_1_1_drm_connector_1ad35442285b66b35fec93cea422b9564babbd47109890259c0127154db1af26c75" kindref="member">DrmConnector::ScalingMode::Full</ref>;
    } else if (env == &quot;CENTER&quot;) {
        return <ref refid="class_k_win_1_1_drm_connector_1ad35442285b66b35fec93cea422b9564ba4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member">DrmConnector::ScalingMode::Center</ref>;
    } else if (env == &quot;FULL_ASPECT&quot;) {
        return <ref refid="class_k_win_1_1_drm_connector_1ad35442285b66b35fec93cea422b9564bae3e49ef459a22fff631ffb399bdcba82" kindref="member">DrmConnector::ScalingMode::Full_Aspect</ref>;
    } else {
        return std::nullopt;
    }
}()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_pipeline.cpp" line="282" column="19" bodyfile="kwin/src/backends/drm/drm_pipeline.cpp" bodystart="282" bodyend="295"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/fakeinput/fakeinputbackend.cpp" line="16" column="22" bodyfile="kwin/src/backends/fakeinput/fakeinputbackend.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a4385ea6f4160f095630196c45f2f7b1d" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int KWin::s_lastDeviceId</definition>
        <argsstring></argsstring>
        <name>s_lastDeviceId</name>
        <qualifiedname>KWin::s_lastDeviceId</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/fakeinput/fakeinputdevice.cpp" line="11" column="12" bodyfile="kwin/src/backends/fakeinput/fakeinputdevice.cpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a044da3b0d4d86b52745553befc2a2337" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool KWin::s_disableTonemapping</definition>
        <argsstring></argsstring>
        <name>s_disableTonemapping</name>
        <qualifiedname>KWin::s_disableTonemapping</qualifiedname>
        <initializer>= qEnvironmentVariableIntValue(&quot;KWIN_DISABLE_TONEMAPPING&quot;) == 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.cpp" line="25" column="13" bodyfile="kwin/src/core/colorpipeline.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ab072d631275172b24302f1b35b425fcc" prot="public" static="yes" mutable="no">
        <type>const QMatrix4x4</type>
        <definition>const QMatrix4x4 KWin::s_toICtCp</definition>
        <argsstring></argsstring>
        <name>s_toICtCp</name>
        <qualifiedname>KWin::s_toICtCp</qualifiedname>
        <initializer>= QMatrix4x4(
    2048.0 / 4096.0, 2048.0 / 4096.0, 0.0, 0.0,
    6610.0 / 4096.0, -13613.0 / 4096.0, 7003.0 / 4096.0, 0.0,
    17933.0 / 4096.0, -17390.0 / 4096.0, -543.0 / 4096.0, 0.0,
    0.0, 0.0, 0.0, 1.0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.cpp" line="238" column="25" bodyfile="kwin/src/core/colorpipeline.cpp" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a867b1f72bcc6ecf6b768adc44fc7ef70" prot="public" static="yes" mutable="no">
        <type>const QMatrix4x4</type>
        <definition>const QMatrix4x4 KWin::s_fromICtCp</definition>
        <argsstring></argsstring>
        <name>s_fromICtCp</name>
        <qualifiedname>KWin::s_fromICtCp</qualifiedname>
        <initializer>= s_toICtCp.inverted()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.cpp" line="243" column="25" bodyfile="kwin/src/core/colorpipeline.cpp" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a7073e61b81f03d64a3337514402d67b2" prot="public" static="yes" mutable="no">
        <type>const QMatrix4x4</type>
        <definition>const QMatrix4x4 KWin::s_xyzToDolbyLMS</definition>
        <argsstring></argsstring>
        <name>s_xyzToDolbyLMS</name>
        <qualifiedname>KWin::s_xyzToDolbyLMS</qualifiedname>
        <initializer>= []() {
    QMatrix4x4 ret;
    ret(0, 0) = 0.3593;
    ret(0, 1) = 0.6976;
    ret(0, 2) = -0.0359;
    ret(1, 0) = -0.1921;
    ret(1, 1) = 1.1005;
    ret(1, 2) = 0.0754;
    ret(2, 0) = 0.0071;
    ret(2, 1) = 0.0748;
    ret(2, 2) = 0.8433;
    return ret;
}()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.cpp" line="299" column="25" bodyfile="kwin/src/core/colorspace.cpp" bodystart="299" bodyend="311"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1add65509a32235a9a91343940b397f832" prot="public" static="yes" mutable="no">
        <type>const QMatrix4x4</type>
        <definition>const QMatrix4x4 KWin::s_inverseDolbyLMS</definition>
        <argsstring></argsstring>
        <name>s_inverseDolbyLMS</name>
        <qualifiedname>KWin::s_inverseDolbyLMS</qualifiedname>
        <initializer>= s_xyzToDolbyLMS.inverted()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.cpp" line="312" column="25" bodyfile="kwin/src/core/colorspace.cpp" bodystart="312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a95b53478c3341d563867859109fba583" prot="public" static="yes" mutable="no">
        <type>const QMatrix4x4</type>
        <definition>const QMatrix4x4 KWin::s_limitedRangeBT601</definition>
        <argsstring></argsstring>
        <name>s_limitedRangeBT601</name>
        <qualifiedname>KWin::s_limitedRangeBT601</qualifiedname>
        <initializer>= calculateYuvToRgbMatrix(0.299, 0.587, 0.114, true)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.cpp" line="529" column="25" bodyfile="kwin/src/core/colorspace.cpp" bodystart="529" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ab21c15b149f1fe500ff544e6151133a1" prot="public" static="yes" mutable="no">
        <type>const QMatrix4x4</type>
        <definition>const QMatrix4x4 KWin::s_limitedRangeBT709</definition>
        <argsstring></argsstring>
        <name>s_limitedRangeBT709</name>
        <qualifiedname>KWin::s_limitedRangeBT709</qualifiedname>
        <initializer>= calculateYuvToRgbMatrix(0.2126, 0.7152, 0.0722, true)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.cpp" line="530" column="25" bodyfile="kwin/src/core/colorspace.cpp" bodystart="530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1af5cd62e12a2c98cbe3009b96ce62bf08" prot="public" static="yes" mutable="no">
        <type>const QMatrix4x4</type>
        <definition>const QMatrix4x4 KWin::s_limitedRangeBT2020</definition>
        <argsstring></argsstring>
        <name>s_limitedRangeBT2020</name>
        <qualifiedname>KWin::s_limitedRangeBT2020</qualifiedname>
        <initializer>= calculateYuvToRgbMatrix(0.2627, 0.6780, 0.0593, true)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.cpp" line="531" column="25" bodyfile="kwin/src/core/colorspace.cpp" bodystart="531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a32a3ef107e634f9903c6b1ff19e2838a" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref></type>
        <definition>const Colorimetry KWin::CIEXYZD50</definition>
        <argsstring></argsstring>
        <name>CIEXYZD50</name>
        <qualifiedname>KWin::CIEXYZD50</qualifiedname>
        <initializer>= <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref>{
    <ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref>{1.0, 0.0, 0.0},
    <ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref>{0.0, 1.0, 0.0},
    <ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref>{0.0, 0.0, 1.0},
    <ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref>(0.9642, 1.0, 0.8249),
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/iccprofile.cpp" line="21" column="26" bodyfile="kwin/src/core/iccprofile.cpp" bodystart="21" bodyend="26"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a07ea2827bbe32549712fc3f7f5bb9b18" prot="public" static="yes" constexpr="yes" mutable="no">
        <type><ref refid="struct_k_win_1_1_x_y_z" kindref="compound">XYZ</ref></type>
        <definition>XYZ KWin::D50</definition>
        <argsstring></argsstring>
        <name>D50</name>
        <qualifiedname>KWin::D50</qualifiedname>
        <initializer>{
    .X = 0.9642,
    .Y = 1.0,
    .Z = 0.8249,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/iccprofile.cpp" line="238" column="22" bodyfile="kwin/src/core/iccprofile.cpp" bodystart="238" bodyend="242"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a6fcf013e845f22a416c0784396655ebf" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool KWin::s_printDebugInfo</definition>
        <argsstring></argsstring>
        <name>s_printDebugInfo</name>
        <qualifiedname>KWin::s_printDebugInfo</qualifiedname>
        <initializer>= qEnvironmentVariableIntValue(&quot;KWIN_LOG_PERFORMANCE_DATA&quot;) != 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/renderloop.cpp" line="27" column="19" bodyfile="kwin/src/core/renderloop.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a3223e96fea9ab917c25be94e2434013a" prot="public" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_session_1ac65b810fca4a1ea95f3e88884f7a1f52" kindref="member">Session::Type</ref></type>
        <definition>GLenum KWin::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <qualifiedname>KWin::type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session.cpp" line="17" column="19" bodyfile="kwin/src/core/session.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1aa565670953926bf1b438dbeb79b0af9d" prot="public" static="no" mutable="no">
        <type>std::function&lt; std::unique_ptr&lt; <ref refid="class_k_win_1_1_session" kindref="compound">Session</ref> &gt;()&gt;</type>
        <definition>std::function&lt;std::unique_ptr&lt;Session&gt;()&gt; KWin::createFunc</definition>
        <argsstring></argsstring>
        <name>createFunc</name>
        <qualifiedname>KWin::createFunc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session.cpp" line="18" column="21" bodyfile="kwin/src/core/session.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1afb3c99e15625156df6f6defe0bf085e9" prot="public" static="yes" mutable="no">
        <type>const struct KWin</type>
        <definition>const struct KWin KWin::s_availableSessions[]</definition>
        <argsstring>[]</argsstring>
        <name>s_availableSessions</name>
        <qualifiedname>KWin::s_availableSessions</qualifiedname>
        <initializer>= {
    {<ref refid="class_k_win_1_1_session_1ac65b810fca4a1ea95f3e88884f7a1f52a0a0b1f8a2effec1e0c555bedef917287" kindref="member">Session::Type::Logind</ref>, &amp;<ref refid="class_k_win_1_1_logind_session_1ace4f987f4e4fb2e1c499eab547bccd30" kindref="member">LogindSession::create</ref>},
    {<ref refid="class_k_win_1_1_session_1ac65b810fca4a1ea95f3e88884f7a1f52a20d7640e91409583c286feb2ad265320" kindref="member">Session::Type::ConsoleKit</ref>, &amp;<ref refid="class_k_win_1_1_console_kit_session_1ad5230efab9da035e69308e5f4d3cc0d2" kindref="member">ConsoleKitSession::create</ref>},
    {<ref refid="class_k_win_1_1_session_1ac65b810fca4a1ea95f3e88884f7a1f52a35721c181ec6a9cca6cdb99dd844d07b" kindref="member">Session::Type::Noop</ref>, &amp;<ref refid="class_k_win_1_1_noop_session_1ae060d35674675c5f46f3a042287ead52" kindref="member">NoopSession::create</ref>},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session.cpp" line="23" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a4477668309036000ac2e15120c6183f8" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_serviceName</definition>
        <argsstring></argsstring>
        <name>s_serviceName</name>
        <qualifiedname>KWin::s_serviceName</qualifiedname>
        <initializer>= QStringLiteral(&quot;org.freedesktop.ConsoleKit&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session_consolekit.cpp" line="57" column="22" bodyfile="kwin/src/core/session_consolekit.cpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a9bab71cf5c983e96398aacbd0cc7d2b0" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_propertiesInterface</definition>
        <argsstring></argsstring>
        <name>s_propertiesInterface</name>
        <qualifiedname>KWin::s_propertiesInterface</qualifiedname>
        <initializer>= QStringLiteral(&quot;org.freedesktop.DBus.Properties&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session_consolekit.cpp" line="58" column="22" bodyfile="kwin/src/core/session_consolekit.cpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a50995db10195163d74e53aaf378ab6b2" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_sessionInterface</definition>
        <argsstring></argsstring>
        <name>s_sessionInterface</name>
        <qualifiedname>KWin::s_sessionInterface</qualifiedname>
        <initializer>= QStringLiteral(&quot;org.freedesktop.ConsoleKit.Session&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session_consolekit.cpp" line="59" column="22" bodyfile="kwin/src/core/session_consolekit.cpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1afe65336fc43df5efc0a1ab34d023934e" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_seatInterface</definition>
        <argsstring></argsstring>
        <name>s_seatInterface</name>
        <qualifiedname>KWin::s_seatInterface</qualifiedname>
        <initializer>= QStringLiteral(&quot;org.freedesktop.ConsoleKit.Seat&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session_consolekit.cpp" line="60" column="22" bodyfile="kwin/src/core/session_consolekit.cpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1aec75cde19055ed5d3ea5491ef9171f2d" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_managerInterface</definition>
        <argsstring></argsstring>
        <name>s_managerInterface</name>
        <qualifiedname>KWin::s_managerInterface</qualifiedname>
        <initializer>= QStringLiteral(&quot;org.freedesktop.ConsoleKit.Manager&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session_consolekit.cpp" line="61" column="22" bodyfile="kwin/src/core/session_consolekit.cpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac6135a55a93b4088ace9ae4bfbe5c5e7" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_managerPath</definition>
        <argsstring></argsstring>
        <name>s_managerPath</name>
        <qualifiedname>KWin::s_managerPath</qualifiedname>
        <initializer>= QStringLiteral(&quot;/org/freedesktop/ConsoleKit/Manager&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session_consolekit.cpp" line="62" column="22" bodyfile="kwin/src/core/session_consolekit.cpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a4477668309036000ac2e15120c6183f8" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_serviceName</definition>
        <argsstring></argsstring>
        <name>s_serviceName</name>
        <qualifiedname>KWin::s_serviceName</qualifiedname>
        <initializer>= QStringLiteral(&quot;org.freedesktop.login1&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session_logind.cpp" line="55" column="22" bodyfile="kwin/src/core/session_logind.cpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a9bab71cf5c983e96398aacbd0cc7d2b0" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_propertiesInterface</definition>
        <argsstring></argsstring>
        <name>s_propertiesInterface</name>
        <qualifiedname>KWin::s_propertiesInterface</qualifiedname>
        <initializer>= QStringLiteral(&quot;org.freedesktop.DBus.Properties&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session_logind.cpp" line="56" column="22" bodyfile="kwin/src/core/session_logind.cpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a50995db10195163d74e53aaf378ab6b2" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_sessionInterface</definition>
        <argsstring></argsstring>
        <name>s_sessionInterface</name>
        <qualifiedname>KWin::s_sessionInterface</qualifiedname>
        <initializer>= QStringLiteral(&quot;org.freedesktop.login1.Session&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session_logind.cpp" line="57" column="22" bodyfile="kwin/src/core/session_logind.cpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1afe65336fc43df5efc0a1ab34d023934e" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_seatInterface</definition>
        <argsstring></argsstring>
        <name>s_seatInterface</name>
        <qualifiedname>KWin::s_seatInterface</qualifiedname>
        <initializer>= QStringLiteral(&quot;org.freedesktop.login1.Seat&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session_logind.cpp" line="58" column="22" bodyfile="kwin/src/core/session_logind.cpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1aec75cde19055ed5d3ea5491ef9171f2d" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_managerInterface</definition>
        <argsstring></argsstring>
        <name>s_managerInterface</name>
        <qualifiedname>KWin::s_managerInterface</qualifiedname>
        <initializer>= QStringLiteral(&quot;org.freedesktop.login1.Manager&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session_logind.cpp" line="59" column="22" bodyfile="kwin/src/core/session_logind.cpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac6135a55a93b4088ace9ae4bfbe5c5e7" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_managerPath</definition>
        <argsstring></argsstring>
        <name>s_managerPath</name>
        <qualifiedname>KWin::s_managerPath</qualifiedname>
        <initializer>= QStringLiteral(&quot;/org/freedesktop/login1&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session_logind.cpp" line="60" column="22" bodyfile="kwin/src/core/session_logind.cpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a13fc51f1c6a1d8a7693eb06b8c275b35" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_hr</definition>
        <argsstring></argsstring>
        <name>s_hr</name>
        <qualifiedname>KWin::s_hr</qualifiedname>
        <initializer>= QStringLiteral(&quot;&lt;hr/&gt;&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/debug_console.cpp" line="170" column="22" bodyfile="kwin/src/debug_console.cpp" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ab0bae43e123fd578e8771e391a52a33c" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_tableStart</definition>
        <argsstring></argsstring>
        <name>s_tableStart</name>
        <qualifiedname>KWin::s_tableStart</qualifiedname>
        <initializer>= QStringLiteral(&quot;&lt;table&gt;&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/debug_console.cpp" line="171" column="22" bodyfile="kwin/src/debug_console.cpp" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a36d1a4026089e9cdcf4763fe29af6b60" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_tableEnd</definition>
        <argsstring></argsstring>
        <name>s_tableEnd</name>
        <qualifiedname>KWin::s_tableEnd</qualifiedname>
        <initializer>= QStringLiteral(&quot;&lt;/table&gt;&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/debug_console.cpp" line="172" column="22" bodyfile="kwin/src/debug_console.cpp" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a3f9294d28d916818261b86e1328d3ef1" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::s_x11WindowId</definition>
        <argsstring></argsstring>
        <name>s_x11WindowId</name>
        <qualifiedname>KWin::s_x11WindowId</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/debug_console.cpp" line="914" column="18" bodyfile="kwin/src/debug_console.cpp" bodystart="914" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a8c5d7f112cef198133e9295487f06ed2" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::s_x11UnmanagedId</definition>
        <argsstring></argsstring>
        <name>s_x11UnmanagedId</name>
        <qualifiedname>KWin::s_x11UnmanagedId</qualifiedname>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/debug_console.cpp" line="915" column="18" bodyfile="kwin/src/debug_console.cpp" bodystart="915" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a9b1bde2a69064a14966f220b1b832c15" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::s_waylandWindowId</definition>
        <argsstring></argsstring>
        <name>s_waylandWindowId</name>
        <qualifiedname>KWin::s_waylandWindowId</qualifiedname>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/debug_console.cpp" line="916" column="18" bodyfile="kwin/src/debug_console.cpp" bodystart="916" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a081c86a72431970651b817dae47748d0" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::s_workspaceInternalId</definition>
        <argsstring></argsstring>
        <name>s_workspaceInternalId</name>
        <qualifiedname>KWin::s_workspaceInternalId</qualifiedname>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/debug_console.cpp" line="917" column="18" bodyfile="kwin/src/debug_console.cpp" bodystart="917" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a2082a322cd90aa7a03c0f0377e4297bf" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_propertyBitMask</definition>
        <argsstring></argsstring>
        <name>s_propertyBitMask</name>
        <qualifiedname>KWin::s_propertyBitMask</qualifiedname>
        <initializer>= 0xFFFF0000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/debug_console.cpp" line="918" column="22" bodyfile="kwin/src/debug_console.cpp" bodystart="918" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a9db8758e0e69f4672f7206012a8bd9ee" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_windowBitMask</definition>
        <argsstring></argsstring>
        <name>s_windowBitMask</name>
        <qualifiedname>KWin::s_windowBitMask</qualifiedname>
        <initializer>= 0x0000FFFF</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/debug_console.cpp" line="919" column="22" bodyfile="kwin/src/debug_console.cpp" bodystart="919" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a60cb46fc57c4fb7429cf76be94e340f2" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_idDistance</definition>
        <argsstring></argsstring>
        <name>s_idDistance</name>
        <qualifiedname>KWin::s_idDistance</qualifiedname>
        <initializer>= 10000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/debug_console.cpp" line="920" column="22" bodyfile="kwin/src/debug_console.cpp" bodystart="920" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ad780e509c41727e08e1cc641d4cad7b5" prot="public" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_effects_handler" kindref="compound">EffectsHandler</ref> *</type>
        <definition>KWIN_EXPORT EffectsHandler * KWin::effects</definition>
        <argsstring></argsstring>
        <name>effects</name>
        <qualifiedname>KWin::effects</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to the global <ref refid="class_k_win_1_1_effects_handler" kindref="compound">EffectsHandler</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecthandler.cpp" line="1636" column="16" bodyfile="kwin/src/effect/effecthandler.cpp" bodystart="1636" bodyend="-1" declfile="kwin/src/effect/effecthandler.h" declline="1116" declcolumn="35"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a0549f55967a2a7f45a579a10b9c6ba80" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_serviceType</definition>
        <argsstring></argsstring>
        <name>s_serviceType</name>
        <qualifiedname>KWin::s_serviceType</qualifiedname>
        <initializer>= QStringLiteral(&quot;KWin/Effect&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectloader.cpp" line="72" column="22" bodyfile="kwin/src/effect/effectloader.cpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac49632c01b6a2b27c16ab8a1ddb4ff31" prot="public" static="yes" mutable="no">
        <type>QHash&lt; QQuickWindow *, <ref refid="class_k_win_1_1_quick_scene_view" kindref="compound">QuickSceneView</ref> * &gt;</type>
        <definition>QHash&lt;QQuickWindow *, QuickSceneView *&gt; KWin::s_views</definition>
        <argsstring></argsstring>
        <name>s_views</name>
        <qualifiedname>KWin::s_views</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.cpp" line="23" column="14" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ab1e9440c953f50857ec73069f72923bb" prot="public" static="yes" mutable="no">
        <type>const qreal</type>
        <definition>const qreal KWin::DEFAULT_UNIT_SCALE_DELTA</definition>
        <argsstring></argsstring>
        <name>DEFAULT_UNIT_SCALE_DELTA</name>
        <qualifiedname>KWin::DEFAULT_UNIT_SCALE_DELTA</qualifiedname>
        <initializer>= .2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/gestures.h" line="25" column="20" bodyfile="kwin/src/gestures.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a5df55df8efe3c5db80b9b74c7369f631" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_keyboardService</definition>
        <argsstring></argsstring>
        <name>s_keyboardService</name>
        <qualifiedname>KWin::s_keyboardService</qualifiedname>
        <initializer>= QStringLiteral(&quot;org.kde.keyboard&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/keyboard_layout.cpp" line="186" column="22" bodyfile="kwin/src/keyboard_layout.cpp" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ad96510e64562c9ae36dbf2f8d2e32547" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_keyboardObject</definition>
        <argsstring></argsstring>
        <name>s_keyboardObject</name>
        <qualifiedname>KWin::s_keyboardObject</qualifiedname>
        <initializer>= QStringLiteral(&quot;/Layouts&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/keyboard_layout.cpp" line="187" column="22" bodyfile="kwin/src/keyboard_layout.cpp" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a9f93158de68aba505c8f5d73c840d2d4" prot="public" static="yes" mutable="no">
        <type>const Qt::Edges</type>
        <definition>const Qt::Edges KWin::AnchorHorizontal</definition>
        <argsstring></argsstring>
        <name>AnchorHorizontal</name>
        <qualifiedname>KWin::AnchorHorizontal</qualifiedname>
        <initializer>= Qt::LeftEdge | Qt::RightEdge</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/layershellv1integration.cpp" line="19" column="24" bodyfile="kwin/src/layershellv1integration.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a8e735413b702fe7e7d952521f61eaeb0" prot="public" static="yes" mutable="no">
        <type>const Qt::Edges</type>
        <definition>const Qt::Edges KWin::AnchorVertical</definition>
        <argsstring></argsstring>
        <name>AnchorVertical</name>
        <qualifiedname>KWin::AnchorVertical</qualifiedname>
        <initializer>= Qt::TopEdge | Qt::BottomEdge</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/layershellv1integration.cpp" line="20" column="24" bodyfile="kwin/src/layershellv1integration.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1aacddce7916a99bb943d9071c40754c1c" prot="public" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_options" kindref="compound">Options</ref> *</type>
        <definition>KWIN_EXPORT Options * KWin::options</definition>
        <argsstring></argsstring>
        <name>options</name>
        <qualifiedname>KWin::options</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/main.cpp" line="82" column="9" bodyfile="kwin/src/main.cpp" bodystart="82" bodyend="-1" declfile="kwin/src/options.h" declline="924" declcolumn="28"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a428fbf8e47a414335bbbc39b00418e94" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_lockOption</definition>
        <argsstring></argsstring>
        <name>s_lockOption</name>
        <qualifiedname>KWin::s_lockOption</qualifiedname>
        <initializer>= QStringLiteral(&quot;lock&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/main.cpp" line="193" column="22" bodyfile="kwin/src/main.cpp" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1af8e3a50758ba8e76d975b2ebebeb0d77" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_crashesOption</definition>
        <argsstring></argsstring>
        <name>s_crashesOption</name>
        <qualifiedname>KWin::s_crashesOption</qualifiedname>
        <initializer>= QStringLiteral(&quot;crashes&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/main.cpp" line="194" column="22" bodyfile="kwin/src/main.cpp" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a50c10193a04bce46ba57b3ba2c3c9106" prot="public" static="yes" mutable="no">
        <type>rlimit</type>
        <definition>rlimit KWin::originalNofileLimit</definition>
        <argsstring></argsstring>
        <name>originalNofileLimit</name>
        <qualifiedname>KWin::originalNofileLimit</qualifiedname>
        <initializer>= {
    .rlim_cur = 0,
    .rlim_max = 0,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/main_wayland.cpp" line="67" column="15" bodyfile="kwin/src/main_wayland.cpp" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a27f344d6d8bca7abc8942a27b76b88da" prot="public" static="yes" mutable="no">
        <type>const QHash&lt; uint32_t, Qt::MouseButton &gt;</type>
        <definition>const QHash&lt;uint32_t, Qt::MouseButton&gt; KWin::s_buttonToQtMouseButton</definition>
        <argsstring></argsstring>
        <name>s_buttonToQtMouseButton</name>
        <qualifiedname>KWin::s_buttonToQtMouseButton</qualifiedname>
        <initializer>= {
    {BTN_LEFT, Qt::LeftButton},
    {BTN_MIDDLE, Qt::MiddleButton},
    {BTN_RIGHT, Qt::RightButton},
    
    {BTN_SIDE, Qt::ExtraButton1},
    {BTN_EXTRA, Qt::ExtraButton2},
    {BTN_FORWARD, Qt::ExtraButton3},
    {BTN_BACK, Qt::ExtraButton4},
    {BTN_TASK, Qt::ExtraButton5},
    {0x118, Qt::ExtraButton6},
    {0x119, Qt::ExtraButton7},
    {0x11a, Qt::ExtraButton8},
    {0x11b, Qt::ExtraButton9},
    {0x11c, Qt::ExtraButton10},
    {0x11d, Qt::ExtraButton11},
    {0x11e, Qt::ExtraButton12},
    {0x11f, Qt::ExtraButton13},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/mousebuttons.cpp" line="14" column="20" bodyfile="kwin/src/mousebuttons.cpp" bodystart="14" bodyend="32"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a044da3b0d4d86b52745553befc2a2337" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool KWin::s_disableTonemapping</definition>
        <argsstring></argsstring>
        <name>s_disableTonemapping</name>
        <qualifiedname>KWin::s_disableTonemapping</qualifiedname>
        <initializer>= qEnvironmentVariableIntValue(&quot;KWIN_DISABLE_TONEMAPPING&quot;) == 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshader.cpp" line="480" column="13" bodyfile="kwin/src/opengl/glshader.cpp" bodystart="480" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a659fc06b6bb39d272728e0317b7e5dac" prot="public" static="no" mutable="no">
        <type>GLenum</type>
        <definition>GLenum KWin::internalFormat</definition>
        <argsstring></argsstring>
        <name>internalFormat</name>
        <qualifiedname>KWin::internalFormat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.cpp" line="34" column="12" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a6ef3f38157c98f3fe83ae3ec855ee903" prot="public" static="no" mutable="no">
        <type>GLenum</type>
        <definition>GLenum KWin::format</definition>
        <argsstring></argsstring>
        <name>format</name>
        <qualifiedname>KWin::format</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.cpp" line="35" column="12" bodyfile="kwin/src/opengl/gltexture.cpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a671dc1dc484957a0cd4296e5d5593703" prot="public" static="no" mutable="no">
        <type>struct KWin</type>
        <definition>struct KWin KWin::formatTable[]</definition>
        <argsstring>[]</argsstring>
        <name>formatTable</name>
        <qualifiedname>KWin::formatTable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/gltexture.cpp" line="68" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a941e9fa75931c6a18bbb092c8afcda86" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t KWin::lutSize</definition>
        <argsstring></argsstring>
        <name>lutSize</name>
        <qualifiedname>KWin::lutSize</qualifiedname>
        <initializer>= 1 &lt;&lt; 12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/icc_shader.cpp" line="19" column="25" bodyfile="kwin/src/opengl/icc_shader.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1aaa4d4eb8a3de736b5c312ccb6844dd43" prot="public" static="yes" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_egl_context" kindref="compound">EglContext</ref> &gt;</type>
        <definition>std::unique_ptr&lt;EglContext&gt; KWin::s_globalShareContext</definition>
        <argsstring></argsstring>
        <name>s_globalShareContext</name>
        <qualifiedname>KWin::s_globalShareContext</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/platformsupport/scenes/opengl/abstract_egl_backend.cpp" line="37" column="24" bodyfile="kwin/src/platformsupport/scenes/opengl/abstract_egl_backend.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1abe25cc30a68bd7d69aff5882d9194804" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_pluginDirectory</definition>
        <argsstring></argsstring>
        <name>s_pluginDirectory</name>
        <qualifiedname>KWin::s_pluginDirectory</qualifiedname>
        <initializer>= QStringLiteral(&quot;kwin/plugins&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/pluginmanager.cpp" line="21" column="22" bodyfile="kwin/src/pluginmanager.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1aaa7c2ad3847980cfcc63a58beb1f7adb" prot="public" static="yes" mutable="no">
        <type>const QByteArray</type>
        <definition>const QByteArray KWin::s_contrastAtomName</definition>
        <argsstring></argsstring>
        <name>s_contrastAtomName</name>
        <qualifiedname>KWin::s_contrastAtomName</qualifiedname>
        <initializer>= QByteArrayLiteral(&quot;_KDE_NET_WM_BACKGROUND_CONTRAST_REGION&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/backgroundcontrast/contrast.cpp" line="35" column="25" bodyfile="kwin/src/plugins/backgroundcontrast/contrast.cpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a438f882b6b40d0a77dd107434a67206f" prot="public" static="yes" mutable="no">
        <type>const QByteArray</type>
        <definition>const QByteArray KWin::s_blurAtomName</definition>
        <argsstring></argsstring>
        <name>s_blurAtomName</name>
        <qualifiedname>KWin::s_blurAtomName</qualifiedname>
        <initializer>= QByteArrayLiteral(&quot;_KDE_NET_WM_BLUR_BEHIND_REGION&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/blur/blur.cpp" line="54" column="25" bodyfile="kwin/src/plugins/blur/blur.cpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a0c5aa021015fae5a9590fef459a5baaf" prot="public" static="no" constexpr="yes" mutable="no">
        <type>QKeyCombination</type>
        <definition>QKeyCombination KWin::defaultDisableKeys</definition>
        <argsstring></argsstring>
        <name>defaultDisableKeys</name>
        <qualifiedname>KWin::defaultDisableKeys</qualifiedname>
        <initializer>{Qt::META | Qt::SHIFT, Qt::Key_Escape}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/eis/eisinputcapturemanager.cpp" line="36" column="27" bodyfile="kwin/src/plugins/eis/eisinputcapturemanager.cpp" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a613a7a12d01f6c0df07812b99f48d88e" prot="public" static="yes" mutable="no">
        <type>const QSet&lt; QString &gt;</type>
        <definition>const QSet&lt;QString&gt; KWin::s_blacklist</definition>
        <argsstring></argsstring>
        <name>s_blacklist</name>
        <qualifiedname>KWin::s_blacklist</qualifiedname>
        <initializer>{
    QStringLiteral(&quot;ksmserver ksmserver&quot;),
    QStringLiteral(&quot;ksmserver-logout-greeter ksmserver-logout-greeter&quot;),
    QStringLiteral(&quot;ksplashqml ksplashqml&quot;),
    
    QStringLiteral(&quot;spectacle spectacle&quot;), 
    QStringLiteral(&quot;spectacle org.kde.spectacle&quot;), 
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/glide/glide.cpp" line="36" column="19" bodyfile="kwin/src/plugins/glide/glide.cpp" bodystart="36" bodyend="43"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1aa0568a0fd9474c8cf7a12ba63722240a" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int KWin::FRAME_WIDTH</definition>
        <argsstring></argsstring>
        <name>FRAME_WIDTH</name>
        <qualifiedname>KWin::FRAME_WIDTH</qualifiedname>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/magnifier/magnifier.cpp" line="31" column="11" bodyfile="kwin/src/plugins/magnifier/magnifier.cpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1aa07d7246cb419bbdf2ed134cc35957d8" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int KWin::width_2</definition>
        <argsstring></argsstring>
        <name>width_2</name>
        <qualifiedname>KWin::width_2</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/mousemark/mousemark.cpp" line="64" column="12" bodyfile="kwin/src/plugins/mousemark/mousemark.cpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a4395248e7a0498491952682da4e7f4a6" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::MSC_DAY</definition>
        <argsstring></argsstring>
        <name>MSC_DAY</name>
        <qualifiedname>KWin::MSC_DAY</qualifiedname>
        <initializer>= 86400000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/nightlight/constants.h" line="15" column="18" bodyfile="kwin/src/plugins/nightlight/constants.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a91f838b596770ec796e7e4abcbdcf5d6" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::MIN_TEMPERATURE</definition>
        <argsstring></argsstring>
        <name>MIN_TEMPERATURE</name>
        <qualifiedname>KWin::MIN_TEMPERATURE</qualifiedname>
        <initializer>= 1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/nightlight/constants.h" line="16" column="18" bodyfile="kwin/src/plugins/nightlight/constants.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a33af941eda42a9420b67a6e43632a657" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::DEFAULT_DAY_TEMPERATURE</definition>
        <argsstring></argsstring>
        <name>DEFAULT_DAY_TEMPERATURE</name>
        <qualifiedname>KWin::DEFAULT_DAY_TEMPERATURE</qualifiedname>
        <initializer>= 6500</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/nightlight/constants.h" line="17" column="18" bodyfile="kwin/src/plugins/nightlight/constants.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a6a23acac514c9b96a67f2daf33850e5a" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::DEFAULT_NIGHT_TEMPERATURE</definition>
        <argsstring></argsstring>
        <name>DEFAULT_NIGHT_TEMPERATURE</name>
        <qualifiedname>KWin::DEFAULT_NIGHT_TEMPERATURE</qualifiedname>
        <initializer>= 4500</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/nightlight/constants.h" line="18" column="18" bodyfile="kwin/src/plugins/nightlight/constants.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a76552ff25c579b0c0adbe86f9db9f930" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::DEFAULT_TRANSITION_DURATION</definition>
        <argsstring></argsstring>
        <name>DEFAULT_TRANSITION_DURATION</name>
        <qualifiedname>KWin::DEFAULT_TRANSITION_DURATION</qualifiedname>
        <initializer>= 1800000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/nightlight/constants.h" line="19" column="18" bodyfile="kwin/src/plugins/nightlight/constants.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a9907358a8c501906880bf1af9bbb24ed" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::MIN_TRANSITION_DURATION</definition>
        <argsstring></argsstring>
        <name>MIN_TRANSITION_DURATION</name>
        <qualifiedname>KWin::MIN_TRANSITION_DURATION</qualifiedname>
        <initializer>= 60000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/nightlight/constants.h" line="20" column="18" bodyfile="kwin/src/plugins/nightlight/constants.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a9d60e7cc6b337c56e331ffa476e473d9" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::QUICK_ADJUST_DURATION</definition>
        <argsstring></argsstring>
        <name>QUICK_ADJUST_DURATION</name>
        <qualifiedname>KWin::QUICK_ADJUST_DURATION</qualifiedname>
        <initializer>= 2000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/nightlight/nightlightmanager.cpp" line="35" column="18" bodyfile="kwin/src/plugins/nightlight/nightlightmanager.cpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a76a5c9e8bb37530c3704de4a1cad7ce8" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::TEMPERATURE_STEP</definition>
        <argsstring></argsstring>
        <name>TEMPERATURE_STEP</name>
        <qualifiedname>KWin::TEMPERATURE_STEP</qualifiedname>
        <initializer>= 50</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/nightlight/nightlightmanager.cpp" line="36" column="18" bodyfile="kwin/src/plugins/nightlight/nightlightmanager.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1aa8297de791eb0879ff22abaaff9920e5" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t KWin::drmFormat</definition>
        <argsstring></argsstring>
        <name>drmFormat</name>
        <qualifiedname>KWin::drmFormat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screencast/screencaststream.cpp" line="42" column="14" bodyfile="kwin/src/plugins/screencast/screencaststream.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1af68cbc2c95feb00769be36fb555250b4" prot="public" static="no" mutable="no">
        <type>spa_video_format</type>
        <definition>spa_video_format KWin::spaFormat</definition>
        <argsstring></argsstring>
        <name>spaFormat</name>
        <qualifiedname>KWin::spaFormat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screencast/screencaststream.cpp" line="43" column="22" bodyfile="kwin/src/plugins/screencast/screencaststream.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ae286ac4f9e844d10cfc555950e3a9f21" prot="public" static="yes" mutable="no">
        <type>const struct KWin</type>
        <definition>const struct KWin KWin::supportedFormats[]</definition>
        <argsstring>[]</argsstring>
        <name>supportedFormats</name>
        <qualifiedname>KWin::supportedFormats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screencast/screencaststream.cpp" line="89" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1abb1dff892fd27db383c4327ec589b210" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::videoDamageRegionCount</definition>
        <argsstring></argsstring>
        <name>videoDamageRegionCount</name>
        <qualifiedname>KWin::videoDamageRegionCount</qualifiedname>
        <initializer>= 16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screencast/screencaststream.cpp" line="150" column="18" bodyfile="kwin/src/plugins/screencast/screencaststream.cpp" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a665ec55fc4e55feaa9798b0328dcfd53" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_dbusServiceName</definition>
        <argsstring></argsstring>
        <name>s_dbusServiceName</name>
        <qualifiedname>KWin::s_dbusServiceName</qualifiedname>
        <initializer>= QStringLiteral(&quot;org.kde.KWin.ScreenShot2&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" line="130" column="22" bodyfile="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ad3be75674fe40d7aed19a445e84a33b8" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_dbusInterface</definition>
        <argsstring></argsstring>
        <name>s_dbusInterface</name>
        <qualifiedname>KWin::s_dbusInterface</qualifiedname>
        <initializer>= QStringLiteral(&quot;org.kde.KWin.ScreenShot2&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" line="131" column="22" bodyfile="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a5b547cfc634e782e7449e301c531af70" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_dbusObjectPath</definition>
        <argsstring></argsstring>
        <name>s_dbusObjectPath</name>
        <qualifiedname>KWin::s_dbusObjectPath</qualifiedname>
        <initializer>= QStringLiteral(&quot;/org/kde/KWin/ScreenShot2&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" line="132" column="22" bodyfile="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a551a608e4a154a640a2b0d0aa90dd52c" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_errorNotAuthorized</definition>
        <argsstring></argsstring>
        <name>s_errorNotAuthorized</name>
        <qualifiedname>KWin::s_errorNotAuthorized</qualifiedname>
        <initializer>= QStringLiteral(&quot;org.kde.KWin.ScreenShot2.Error.NoAuthorized&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" line="134" column="22" bodyfile="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a42d498e218985cbb26f0afb6c86cb9c5" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_errorNotAuthorizedMessage</definition>
        <argsstring></argsstring>
        <name>s_errorNotAuthorizedMessage</name>
        <qualifiedname>KWin::s_errorNotAuthorizedMessage</qualifiedname>
        <initializer>= QStringLiteral(&quot;The process is not authorized to take a screenshot&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" line="135" column="22" bodyfile="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a27f2b2479bbf774223d77a4a29af35fc" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_errorCancelled</definition>
        <argsstring></argsstring>
        <name>s_errorCancelled</name>
        <qualifiedname>KWin::s_errorCancelled</qualifiedname>
        <initializer>= QStringLiteral(&quot;org.kde.KWin.ScreenShot2.Error.Cancelled&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" line="136" column="22" bodyfile="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a01f6fdd9ccbe9ff9496b8101118e641a" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_errorCancelledMessage</definition>
        <argsstring></argsstring>
        <name>s_errorCancelledMessage</name>
        <qualifiedname>KWin::s_errorCancelledMessage</qualifiedname>
        <initializer>= QStringLiteral(&quot;Screenshot got cancelled&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" line="137" column="22" bodyfile="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1aa06586758fe296ce61a3434e09e61e01" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_errorInvalidWindow</definition>
        <argsstring></argsstring>
        <name>s_errorInvalidWindow</name>
        <qualifiedname>KWin::s_errorInvalidWindow</qualifiedname>
        <initializer>= QStringLiteral(&quot;org.kde.KWin.ScreenShot2.Error.InvalidWindow&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" line="138" column="22" bodyfile="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac247c3ce107ac2b191c18c5ca7e972f7" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_errorInvalidWindowMessage</definition>
        <argsstring></argsstring>
        <name>s_errorInvalidWindowMessage</name>
        <qualifiedname>KWin::s_errorInvalidWindowMessage</qualifiedname>
        <initializer>= QStringLiteral(&quot;Invalid window requested&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" line="139" column="22" bodyfile="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac5d9928b22721585857211abdd864a9d" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_errorInvalidArea</definition>
        <argsstring></argsstring>
        <name>s_errorInvalidArea</name>
        <qualifiedname>KWin::s_errorInvalidArea</qualifiedname>
        <initializer>= QStringLiteral(&quot;org.kde.KWin.ScreenShot2.Error.InvalidArea&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" line="140" column="22" bodyfile="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a312390face25d5e26ea5ce06986eb3e2" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_errorInvalidAreaMessage</definition>
        <argsstring></argsstring>
        <name>s_errorInvalidAreaMessage</name>
        <qualifiedname>KWin::s_errorInvalidAreaMessage</qualifiedname>
        <initializer>= QStringLiteral(&quot;Invalid area requested&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" line="141" column="22" bodyfile="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a3a0dbab3f75cf9425240b40734dbb552" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_errorInvalidScreen</definition>
        <argsstring></argsstring>
        <name>s_errorInvalidScreen</name>
        <qualifiedname>KWin::s_errorInvalidScreen</qualifiedname>
        <initializer>= QStringLiteral(&quot;org.kde.KWin.ScreenShot2.Error.InvalidScreen&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" line="142" column="22" bodyfile="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1af69bebe927384d1e89135a4db16d91b3" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_errorInvalidScreenMessage</definition>
        <argsstring></argsstring>
        <name>s_errorInvalidScreenMessage</name>
        <qualifiedname>KWin::s_errorInvalidScreenMessage</qualifiedname>
        <initializer>= QStringLiteral(&quot;Invalid screen requested&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" line="143" column="22" bodyfile="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a0c7895e252963d76eb688785fd4d5abf" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_errorFileDescriptor</definition>
        <argsstring></argsstring>
        <name>s_errorFileDescriptor</name>
        <qualifiedname>KWin::s_errorFileDescriptor</qualifiedname>
        <initializer>= QStringLiteral(&quot;org.kde.KWin.ScreenShot2.Error.FileDescriptor&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" line="144" column="22" bodyfile="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a7d26c362773063d2fa4bee644eb6c95c" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_errorFileDescriptorMessage</definition>
        <argsstring></argsstring>
        <name>s_errorFileDescriptorMessage</name>
        <qualifiedname>KWin::s_errorFileDescriptorMessage</qualifiedname>
        <initializer>= QStringLiteral(&quot;No valid file descriptor&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" line="145" column="22" bodyfile="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a1c5bff88b9de167b02dd44b03b9ccbaa" prot="public" static="yes" mutable="no">
        <type>const qreal</type>
        <definition>const qreal KWin::s_alpha</definition>
        <argsstring></argsstring>
        <name>s_alpha</name>
        <qualifiedname>KWin::s_alpha</qualifiedname>
        <initializer>= 0.2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/showpaint/showpaint.cpp" line="28" column="20" bodyfile="kwin/src/plugins/showpaint/showpaint.cpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a2007c03e8f838c4ed3f349a62ed3487f" prot="public" static="yes" mutable="no">
        <type>const QList&lt; QColor &gt;</type>
        <definition>const QList&lt;QColor&gt; KWin::s_colors</definition>
        <argsstring></argsstring>
        <name>s_colors</name>
        <qualifiedname>KWin::s_colors</qualifiedname>
        <initializer>{
    Qt::red,
    Qt::green,
    Qt::blue,
    Qt::cyan,
    Qt::magenta,
    Qt::yellow,
    Qt::gray}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/showpaint/showpaint.cpp" line="29" column="20" bodyfile="kwin/src/plugins/showpaint/showpaint.cpp" bodystart="29" bodyend="36"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1acfc8965d213337bd0bf0905554e0c8a5" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::s_lineWidth</definition>
        <argsstring></argsstring>
        <name>s_lineWidth</name>
        <qualifiedname>KWin::s_lineWidth</qualifiedname>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/snaphelper/snaphelper.cpp" line="25" column="18" bodyfile="kwin/src/plugins/snaphelper/snaphelper.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a40a7fd150e6e563f50515ec1d032b91f" prot="public" static="yes" mutable="no">
        <type>const QColor</type>
        <definition>const QColor KWin::s_lineColor</definition>
        <argsstring></argsstring>
        <name>s_lineColor</name>
        <qualifiedname>KWin::s_lineColor</qualifiedname>
        <initializer>= QColor(128, 128, 128, 128)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/snaphelper/snaphelper.cpp" line="26" column="21" bodyfile="kwin/src/plugins/snaphelper/snaphelper.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a2690944fd9e943c9f969001e0e39e244" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::BOUNCE_FRAMES</definition>
        <argsstring></argsstring>
        <name>BOUNCE_FRAMES</name>
        <qualifiedname>KWin::BOUNCE_FRAMES</qualifiedname>
        <initializer>= 20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.cpp" line="53" column="18" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ab46138678f3e1a41a902e5e1f92df930" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::BOUNCE_FRAME_DURATION</definition>
        <argsstring></argsstring>
        <name>BOUNCE_FRAME_DURATION</name>
        <qualifiedname>KWin::BOUNCE_FRAME_DURATION</qualifiedname>
        <initializer>= 30</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.cpp" line="55" column="18" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a6716f32feef14cae64c848ded522d965" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::BOUNCE_DURATION</definition>
        <argsstring></argsstring>
        <name>BOUNCE_DURATION</name>
        <qualifiedname>KWin::BOUNCE_DURATION</qualifiedname>
        <initializer>= BOUNCE_FRAME_DURATION * BOUNCE_FRAMES</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.cpp" line="57" column="18" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a4d302e084e959e5ae7bfcd25a4b3eb9e" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::BLINKING_FRAMES</definition>
        <argsstring></argsstring>
        <name>BLINKING_FRAMES</name>
        <qualifiedname>KWin::BLINKING_FRAMES</qualifiedname>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.cpp" line="59" column="18" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ab4cc3a49eae56346d74f5fbbde48ee15" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::BLINKING_FRAME_DURATION</definition>
        <argsstring></argsstring>
        <name>BLINKING_FRAME_DURATION</name>
        <qualifiedname>KWin::BLINKING_FRAME_DURATION</qualifiedname>
        <initializer>= 100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.cpp" line="61" column="18" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a2cb55eee0abe10e9cb7f46f9ecfad595" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::BLINKING_DURATION</definition>
        <argsstring></argsstring>
        <name>BLINKING_DURATION</name>
        <qualifiedname>KWin::BLINKING_DURATION</qualifiedname>
        <initializer>= BLINKING_FRAME_DURATION * BLINKING_FRAMES</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.cpp" line="63" column="18" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a3a332127c1f8ca1b9eb80a2de2039b6a" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::FRAME_TO_BOUNCE_YOFFSET[]</definition>
        <argsstring>[]</argsstring>
        <name>FRAME_TO_BOUNCE_YOFFSET</name>
        <qualifiedname>KWin::FRAME_TO_BOUNCE_YOFFSET</qualifiedname>
        <initializer>= {
    -5, -1, 2, 5, 8, 10, 12, 13, 15, 15, 15, 15, 14, 12, 10, 8, 5, 2, -1, -5}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.cpp" line="65" column="18" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="65" bodyend="66"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a43651060ee7224e7041a2685812cf476" prot="public" static="yes" mutable="no">
        <type>const QSize</type>
        <definition>const QSize KWin::BOUNCE_SIZES[]</definition>
        <argsstring>[]</argsstring>
        <name>BOUNCE_SIZES</name>
        <qualifiedname>KWin::BOUNCE_SIZES</qualifiedname>
        <initializer>= {
    QSize(16, 16), QSize(14, 18), QSize(12, 20), QSize(18, 14), QSize(20, 12)}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.cpp" line="67" column="20" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="67" bodyend="68"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1adb57a087f57a5b2aac8533fe3e017aa0" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::FRAME_TO_BOUNCE_TEXTURE[]</definition>
        <argsstring>[]</argsstring>
        <name>FRAME_TO_BOUNCE_TEXTURE</name>
        <qualifiedname>KWin::FRAME_TO_BOUNCE_TEXTURE</qualifiedname>
        <initializer>= {
    0, 0, 0, 1, 2, 2, 1, 0, 3, 4, 4, 3, 0, 1, 2, 2, 1, 0, 0, 0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.cpp" line="69" column="18" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="69" bodyend="70"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1aff4c7937079b7759454fd8f110b2ac23" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::FRAME_TO_BLINKING_COLOR[]</definition>
        <argsstring>[]</argsstring>
        <name>FRAME_TO_BLINKING_COLOR</name>
        <qualifiedname>KWin::FRAME_TO_BLINKING_COLOR</qualifiedname>
        <initializer>= {
    0, 1, 2, 3, 2, 1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.cpp" line="71" column="18" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="71" bodyend="72"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ad7c30923b9adf8fe09d945805638cf9c" prot="public" static="yes" mutable="no">
        <type>const QColor</type>
        <definition>const QColor KWin::BLINKING_COLORS[]</definition>
        <argsstring>[]</argsstring>
        <name>BLINKING_COLORS</name>
        <qualifiedname>KWin::BLINKING_COLORS</qualifiedname>
        <initializer>= {
    Qt::black, Qt::darkGray, Qt::lightGray, Qt::white, Qt::white}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.cpp" line="73" column="21" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="73" bodyend="74"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1adfd9200e36e2064ebadf0f01dae24766" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::s_startupDefaultTimeout</definition>
        <argsstring></argsstring>
        <name>s_startupDefaultTimeout</name>
        <qualifiedname>KWin::s_startupDefaultTimeout</qualifiedname>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.cpp" line="75" column="18" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a8c64d427f95c0ab429283fd2d00538fe" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_touchpadComponent</definition>
        <argsstring></argsstring>
        <name>s_touchpadComponent</name>
        <qualifiedname>KWin::s_touchpadComponent</qualifiedname>
        <initializer>= QStringLiteral(&quot;kcm_touchpad&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpadshortcuts/touchpadshortcuts.cpp" line="22" column="22" bodyfile="kwin/src/plugins/touchpadshortcuts/touchpadshortcuts.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1af86105bb11065018126c0f7d168564a9" prot="public" static="yes" mutable="no">
        <type>const Qt::GlobalColor</type>
        <definition>const Qt::GlobalColor KWin::s_colors[]</definition>
        <argsstring>[]</argsstring>
        <name>s_colors</name>
        <qualifiedname>KWin::s_colors</qualifiedname>
        <initializer>= {
    Qt::blue,
    Qt::red,
    Qt::green,
    Qt::cyan,
    Qt::magenta,
    Qt::yellow,
    Qt::gray,
    Qt::darkBlue,
    Qt::darkRed,
    Qt::darkGreen}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.cpp" line="36" column="30" bodyfile="kwin/src/plugins/touchpoints/touchpoints.cpp" bodystart="36" bodyend="46"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a1b2e62386f63087655f4cb2f437e6ba4" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_toggleTrackMouseActionName</definition>
        <argsstring></argsstring>
        <name>s_toggleTrackMouseActionName</name>
        <qualifiedname>KWin::s_toggleTrackMouseActionName</qualifiedname>
        <initializer>= QStringLiteral(&quot;TrackMouse&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/trackmouse/trackmouse_config.cpp" line="33" column="22" bodyfile="kwin/src/plugins/trackmouse/trackmouse_config.cpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a665ec55fc4e55feaa9798b0328dcfd53" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_dbusServiceName</definition>
        <argsstring></argsstring>
        <name>s_dbusServiceName</name>
        <qualifiedname>KWin::s_dbusServiceName</qualifiedname>
        <initializer>= QStringLiteral(&quot;org.kde.KWin.Effect.WindowView1&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/windowview/windowvieweffect.cpp" line="24" column="22" bodyfile="kwin/src/plugins/windowview/windowvieweffect.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a5b547cfc634e782e7449e301c531af70" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_dbusObjectPath</definition>
        <argsstring></argsstring>
        <name>s_dbusObjectPath</name>
        <qualifiedname>KWin::s_dbusObjectPath</qualifiedname>
        <initializer>= QStringLiteral(&quot;/org/kde/KWin/<ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref>/WindowView1&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/windowview/windowvieweffect.cpp" line="25" column="22" bodyfile="kwin/src/plugins/windowview/windowvieweffect.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a792fdce652e6de393f9d761e98519d78" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_k_win_1_1_parameter_set" kindref="compound">ParameterSet</ref></type>
        <definition>const ParameterSet KWin::set_0</definition>
        <argsstring></argsstring>
        <name>set_0</name>
        <qualifiedname>KWin::set_0</qualifiedname>
        <initializer>= {
    0.15,
    0.80,
    0.10,
    20.0,
    20.0,
    0.0,
    1000.0,
    0.5,
    0.0,
    1000.0,
    0.5,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/wobblywindows/wobblywindows.cpp" line="51" column="27" bodyfile="kwin/src/plugins/wobblywindows/wobblywindows.cpp" bodystart="51" bodyend="63"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a0cc3ac2f1c7f5d1e09a2639a7d2948b6" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_k_win_1_1_parameter_set" kindref="compound">ParameterSet</ref></type>
        <definition>const ParameterSet KWin::set_1</definition>
        <argsstring></argsstring>
        <name>set_1</name>
        <qualifiedname>KWin::set_1</qualifiedname>
        <initializer>= {
    0.10,
    0.85,
    0.10,
    20.0,
    20.0,
    0.0,
    1000.0,
    0.5,
    0.0,
    1000.0,
    0.5,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/wobblywindows/wobblywindows.cpp" line="65" column="27" bodyfile="kwin/src/plugins/wobblywindows/wobblywindows.cpp" bodystart="65" bodyend="77"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a1de664a8fe7f1e51c342b158be5f7739" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_k_win_1_1_parameter_set" kindref="compound">ParameterSet</ref></type>
        <definition>const ParameterSet KWin::set_2</definition>
        <argsstring></argsstring>
        <name>set_2</name>
        <qualifiedname>KWin::set_2</qualifiedname>
        <initializer>= {
    0.06,
    0.90,
    0.10,
    20.0,
    20.0,
    0.0,
    1000.0,
    0.5,
    0.0,
    1000.0,
    0.5,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/wobblywindows/wobblywindows.cpp" line="79" column="27" bodyfile="kwin/src/plugins/wobblywindows/wobblywindows.cpp" bodystart="79" bodyend="91"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a5ee2a2ff7a9fa08ec6de42fbef2c5698" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_k_win_1_1_parameter_set" kindref="compound">ParameterSet</ref></type>
        <definition>const ParameterSet KWin::set_3</definition>
        <argsstring></argsstring>
        <name>set_3</name>
        <qualifiedname>KWin::set_3</qualifiedname>
        <initializer>= {
    0.03,
    0.92,
    0.20,
    20.0,
    20.0,
    0.0,
    1000.0,
    0.5,
    0.0,
    1000.0,
    0.5,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/wobblywindows/wobblywindows.cpp" line="93" column="27" bodyfile="kwin/src/plugins/wobblywindows/wobblywindows.cpp" bodystart="93" bodyend="105"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a77a1ff14cf5b8ed5b27b3ce58bb24eef" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_k_win_1_1_parameter_set" kindref="compound">ParameterSet</ref></type>
        <definition>const ParameterSet KWin::set_4</definition>
        <argsstring></argsstring>
        <name>set_4</name>
        <qualifiedname>KWin::set_4</qualifiedname>
        <initializer>= {
    0.01,
    0.97,
    0.25,
    20.0,
    20.0,
    0.0,
    1000.0,
    0.5,
    0.0,
    1000.0,
    0.5,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/wobblywindows/wobblywindows.cpp" line="107" column="27" bodyfile="kwin/src/plugins/wobblywindows/wobblywindows.cpp" bodystart="107" bodyend="119"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a7c1ab4e2740f738d70c87dffa34cedb6" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_k_win_1_1_parameter_set" kindref="compound">ParameterSet</ref></type>
        <definition>ParameterSet KWin::pset</definition>
        <argsstring>[5]</argsstring>
        <name>pset</name>
        <qualifiedname>KWin::pset</qualifiedname>
        <initializer>= {set_0, set_1, set_2, set_3, set_4}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/wobblywindows/wobblywindows.cpp" line="121" column="27" bodyfile="kwin/src/plugins/wobblywindows/wobblywindows.cpp" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a792fdce652e6de393f9d761e98519d78" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_k_win_1_1_parameter_set" kindref="compound">ParameterSet</ref></type>
        <definition>const ParameterSet KWin::set_0</definition>
        <argsstring></argsstring>
        <name>set_0</name>
        <qualifiedname>KWin::set_0</qualifiedname>
        <initializer>= {
    15,
    80,
    10}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/wobblywindows/wobblywindows_config.cpp" line="37" column="27" bodyfile="kwin/src/plugins/wobblywindows/wobblywindows_config.cpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a0cc3ac2f1c7f5d1e09a2639a7d2948b6" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_k_win_1_1_parameter_set" kindref="compound">ParameterSet</ref></type>
        <definition>const ParameterSet KWin::set_1</definition>
        <argsstring></argsstring>
        <name>set_1</name>
        <qualifiedname>KWin::set_1</qualifiedname>
        <initializer>= {
    10,
    85,
    10}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/wobblywindows/wobblywindows_config.cpp" line="42" column="27" bodyfile="kwin/src/plugins/wobblywindows/wobblywindows_config.cpp" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a1de664a8fe7f1e51c342b158be5f7739" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_k_win_1_1_parameter_set" kindref="compound">ParameterSet</ref></type>
        <definition>const ParameterSet KWin::set_2</definition>
        <argsstring></argsstring>
        <name>set_2</name>
        <qualifiedname>KWin::set_2</qualifiedname>
        <initializer>= {
    6,
    90,
    10}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/wobblywindows/wobblywindows_config.cpp" line="47" column="27" bodyfile="kwin/src/plugins/wobblywindows/wobblywindows_config.cpp" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a5ee2a2ff7a9fa08ec6de42fbef2c5698" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_k_win_1_1_parameter_set" kindref="compound">ParameterSet</ref></type>
        <definition>const ParameterSet KWin::set_3</definition>
        <argsstring></argsstring>
        <name>set_3</name>
        <qualifiedname>KWin::set_3</qualifiedname>
        <initializer>= {
    3,
    92,
    20}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/wobblywindows/wobblywindows_config.cpp" line="52" column="27" bodyfile="kwin/src/plugins/wobblywindows/wobblywindows_config.cpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a77a1ff14cf5b8ed5b27b3ce58bb24eef" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_k_win_1_1_parameter_set" kindref="compound">ParameterSet</ref></type>
        <definition>const ParameterSet KWin::set_4</definition>
        <argsstring></argsstring>
        <name>set_4</name>
        <qualifiedname>KWin::set_4</qualifiedname>
        <initializer>= {
    1,
    97,
    25}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/wobblywindows/wobblywindows_config.cpp" line="57" column="27" bodyfile="kwin/src/plugins/wobblywindows/wobblywindows_config.cpp" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a473a176fc0d013a29c1d1fd134ae7b41" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::DISTANCE_RESET</definition>
        <argsstring></argsstring>
        <name>DISTANCE_RESET</name>
        <qualifiedname>KWin::DISTANCE_RESET</qualifiedname>
        <initializer>= 30</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/screenedge.cpp" line="62" column="18" bodyfile="kwin/src/screenedge.cpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a48b91a1b93eaf682d95d4a598fa7c54a" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::TOUCH_TARGET</definition>
        <argsstring></argsstring>
        <name>TOUCH_TARGET</name>
        <qualifiedname>KWin::TOUCH_TARGET</qualifiedname>
        <initializer>= 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/screenedge.cpp" line="65" column="18" bodyfile="kwin/src/screenedge.cpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a1a18362461a783f459e1d458d2187f31" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::MINIMUM_DELTA</definition>
        <argsstring></argsstring>
        <name>MINIMUM_DELTA</name>
        <qualifiedname>KWin::MINIMUM_DELTA</qualifiedname>
        <initializer>= 44</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/screenedge.cpp" line="68" column="18" bodyfile="kwin/src/screenedge.cpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a1fc1ed276132c0a78c9e2325d0305db0" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::SCREEN_LOCKER_SERVICE_NAME</definition>
        <argsstring></argsstring>
        <name>SCREEN_LOCKER_SERVICE_NAME</name>
        <qualifiedname>KWin::SCREEN_LOCKER_SERVICE_NAME</qualifiedname>
        <initializer>= QStringLiteral(&quot;org.freedesktop.ScreenSaver&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/screenlockerwatcher.cpp" line="18" column="22" bodyfile="kwin/src/screenlockerwatcher.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ada29570a3cce27d3bc2179c9694079b4" prot="public" static="yes" mutable="no">
        <type>const char *const</type>
        <definition>const char* const KWin::window_type_names[]</definition>
        <argsstring>[]</argsstring>
        <name>window_type_names</name>
        <qualifiedname>KWin::window_type_names</qualifiedname>
        <initializer>= {
    &quot;Unknown&quot;, &quot;Normal&quot;, &quot;Desktop&quot;, &quot;Dock&quot;, &quot;Toolbar&quot;, &quot;Menu&quot;, &quot;Dialog&quot;,
    &quot;Override&quot;, &quot;TopMenu&quot;, &quot;Utility&quot;, &quot;Splash&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/sm.cpp" line="59" column="25" bodyfile="kwin/src/sm.cpp" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac05cb01fd4b05ba7cb542e97fe195d07" prot="public" static="yes" mutable="no">
        <type>const QHash&lt; uint32_t, <ref refid="struct_k_win_1_1_yuv_conversion" kindref="compound">YuvConversion</ref> &gt;</type>
        <definition>const QHash&lt;uint32_t, YuvConversion&gt; KWin::s_drmConversions</definition>
        <argsstring></argsstring>
        <name>s_drmConversions</name>
        <qualifiedname>KWin::s_drmConversions</qualifiedname>
        <initializer>= {
    {DRM_FORMAT_NV12, <ref refid="struct_k_win_1_1_yuv_conversion" kindref="compound">YuvConversion</ref>{
                          {<ref refid="struct_k_win_1_1_yuv_format" kindref="compound">YuvFormat</ref>{DRM_FORMAT_R8, 1, 1}, <ref refid="struct_k_win_1_1_yuv_format" kindref="compound">YuvFormat</ref>{DRM_FORMAT_GR88, 2, 2}},
                      }},
    {DRM_FORMAT_P010, <ref refid="struct_k_win_1_1_yuv_conversion" kindref="compound">YuvConversion</ref>{
                          {<ref refid="struct_k_win_1_1_yuv_format" kindref="compound">YuvFormat</ref>{DRM_FORMAT_R16, 1, 1}, <ref refid="struct_k_win_1_1_yuv_format" kindref="compound">YuvFormat</ref>{DRM_FORMAT_GR1616, 2, 2}},
                      }},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/drm_format_helper.h" line="35" column="20" bodyfile="kwin/src/utils/drm_format_helper.h" bodystart="35" bodyend="42"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ab608cdadd99915a2d832d150715c88d9" prot="public" static="yes" mutable="no">
        <type>const std::optional&lt; bool &gt;</type>
        <definition>const std::optional&lt;bool&gt; KWin::s_forceHdrSupport</definition>
        <argsstring></argsstring>
        <name>s_forceHdrSupport</name>
        <qualifiedname>KWin::s_forceHdrSupport</qualifiedname>
        <initializer>= <ref refid="namespace_k_win_1a6e980f5969d41ce32e4130f95a0762dc" kindref="member">environmentVariableBoolValue</ref>(&quot;KWIN_FORCE_ASSUME_HDR_SUPPORT&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.cpp" line="143" column="28" bodyfile="kwin/src/utils/edid.cpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ada853cfc1b24bab36aa3741ae817a0cc" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>std::array</type>
        <definition>std::array KWin::s_mediaKeys</definition>
        <argsstring></argsstring>
        <name>s_mediaKeys</name>
        <qualifiedname>KWin::s_mediaKeys</qualifiedname>
        <initializer>= {
    Qt::Key::Key_MediaLast,
    Qt::Key::Key_MediaNext,
    Qt::Key::Key_MediaPause,
    Qt::Key::Key_MediaPlay,
    Qt::Key::Key_MediaPrevious,
    Qt::Key::Key_MediaRecord,
    Qt::Key::Key_MediaStop,
    Qt::Key::Key_MediaTogglePlayPause,
    Qt::Key::Key_VolumeUp,
    Qt::Key::Key_VolumeDown,
    Qt::Key::Key_VolumeMute,
    Qt::Key::Key_MicVolumeUp,
    Qt::Key::Key_MicVolumeDown,
    Qt::Key::Key_MicMute,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/keys.h" line="17" column="29" bodyfile="kwin/src/utils/keys.h" bodystart="17" bodyend="32"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a0b262263f1b8df6df17d807869d57eed" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_waylandInterfaceName</definition>
        <argsstring></argsstring>
        <name>s_waylandInterfaceName</name>
        <qualifiedname>KWin::s_waylandInterfaceName</qualifiedname>
        <initializer>= QStringLiteral(&quot;X-KDE-Wayland-Interfaces&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/serviceutils.h" line="24" column="22" bodyfile="kwin/src/utils/serviceutils.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a05270288d5c9ea8ed16a31369140fdef" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString KWin::s_dbusRestrictedInterfaceName</definition>
        <argsstring></argsstring>
        <name>s_dbusRestrictedInterfaceName</name>
        <qualifiedname>KWin::s_dbusRestrictedInterfaceName</qualifiedname>
        <initializer>= QStringLiteral(&quot;X-KDE-DBUS-Restricted-Interfaces&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/serviceutils.h" line="25" column="22" bodyfile="kwin/src/utils/serviceutils.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a365123ff468d0acaaf1cfc53a71cff40" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool KWin::s_loadingDesktopSettings</definition>
        <argsstring></argsstring>
        <name>s_loadingDesktopSettings</name>
        <qualifiedname>KWin::s_loadingDesktopSettings</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/virtualdesktops.cpp" line="31" column="13" bodyfile="kwin/src/virtualdesktops.cpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a8c231e7336a2e18a302b0f1b886e6d27" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double KWin::GESTURE_SWITCH_THRESHOLD</definition>
        <argsstring></argsstring>
        <name>GESTURE_SWITCH_THRESHOLD</name>
        <qualifiedname>KWin::GESTURE_SWITCH_THRESHOLD</qualifiedname>
        <initializer>= .25</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/virtualdesktops.cpp" line="32" column="21" bodyfile="kwin/src/virtualdesktops.cpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a7f24e07187e05d2b00e6b6f457a04cdc" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/alphamodifier_v1.cpp" line="15" column="27" bodyfile="kwin/src/wayland/alphamodifier_v1.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/appmenu.cpp" line="17" column="22" bodyfile="kwin/src/wayland/appmenu.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/blur.cpp" line="17" column="22" bodyfile="kwin/src/wayland/blur.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ad7d04eb0a9828452db0906b68e715abb" prot="public" static="no" constexpr="yes" mutable="no">
        <type>double</type>
        <definition>double KWin::s_primaryUnit</definition>
        <argsstring></argsstring>
        <name>s_primaryUnit</name>
        <qualifiedname>KWin::s_primaryUnit</qualifiedname>
        <initializer>= 1.0 / 1&apos;000&apos;000.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/colormanagement_v1.cpp" line="345" column="18" bodyfile="kwin/src/wayland/colormanagement_v1.cpp" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a8e72293e96dffd537c95b0714113b21e" prot="public" static="no" constexpr="yes" mutable="no">
        <type>double</type>
        <definition>double KWin::s_minLuminanceUnit</definition>
        <argsstring></argsstring>
        <name>s_minLuminanceUnit</name>
        <qualifiedname>KWin::s_minLuminanceUnit</qualifiedname>
        <initializer>= 1.0 / 10&apos;000.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/colormanagement_v1.cpp" line="361" column="18" bodyfile="kwin/src/wayland/colormanagement_v1.cpp" bodystart="361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1af5876035ac272e77d9547f683b9a3341" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/compositor.cpp" line="16" column="18" bodyfile="kwin/src/wayland/compositor.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a7f24e07187e05d2b00e6b6f457a04cdc" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/contenttype_v1.cpp" line="14" column="27" bodyfile="kwin/src/wayland/contenttype_v1.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/contrast.cpp" line="16" column="22" bodyfile="kwin/src/wayland/contrast.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a8f5859fb98b90dc777ad0ada92dc62ab" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>int</type>
        <definition>int KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/cursorshape_v1.cpp" line="21" column="22" bodyfile="kwin/src/wayland/cursorshape_v1.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/datadevicemanager.cpp" line="16" column="22" bodyfile="kwin/src/wayland/datadevicemanager.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/dpms.cpp" line="17" column="22" bodyfile="kwin/src/wayland/dpms.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a8f5859fb98b90dc777ad0ada92dc62ab" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>int</type>
        <definition>int KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/drmclientbuffer.cpp" line="16" column="22" bodyfile="kwin/src/wayland/drmclientbuffer.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/drmlease_v1.cpp" line="18" column="22" bodyfile="kwin/src/wayland/drmlease_v1.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a7f24e07187e05d2b00e6b6f457a04cdc" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/externalbrightness_v1.cpp" line="13" column="27" bodyfile="kwin/src/wayland/externalbrightness_v1.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a7f24e07187e05d2b00e6b6f457a04cdc" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/frog_colormanagement_v1.cpp" line="14" column="27" bodyfile="kwin/src/wayland/frog_colormanagement_v1.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/idle.cpp" line="16" column="22" bodyfile="kwin/src/wayland/idle.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/idleinhibit_v1.cpp" line="12" column="22" bodyfile="kwin/src/wayland/idleinhibit_v1.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/idlenotify_v1.cpp" line="17" column="22" bodyfile="kwin/src/wayland/idlenotify_v1.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a7c7fee47dcce983bd5dd16acda12d7e6" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/inputmethod_v1.cpp" line="27" column="12" bodyfile="kwin/src/wayland/inputmethod_v1.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/keystate.cpp" line="20" column="22" bodyfile="kwin/src/wayland/keystate.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1af5876035ac272e77d9547f683b9a3341" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/layershell_v1.cpp" line="21" column="18" bodyfile="kwin/src/wayland/layershell_v1.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a7f24e07187e05d2b00e6b6f457a04cdc" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/linux_drm_syncobj_v1.cpp" line="24" column="27" bodyfile="kwin/src/wayland/linux_drm_syncobj_v1.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1af5876035ac272e77d9547f683b9a3341" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/linuxdmabufv1clientbuffer.cpp" line="26" column="18" bodyfile="kwin/src/wayland/linuxdmabufv1clientbuffer.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a8f5859fb98b90dc777ad0ada92dc62ab" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>int</type>
        <definition>int KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/lockscreen_overlay_v1.cpp" line="16" column="22" bodyfile="kwin/src/wayland/lockscreen_overlay_v1.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1af5876035ac272e77d9547f683b9a3341" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/output.cpp" line="24" column="18" bodyfile="kwin/src/wayland/output.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a7f24e07187e05d2b00e6b6f457a04cdc" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/output_order_v1.cpp" line="15" column="27" bodyfile="kwin/src/wayland/output_order_v1.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/outputdevice_v2.cpp" line="26" column="22" bodyfile="kwin/src/wayland/outputdevice_v2.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/outputmanagement_v2.cpp" line="27" column="22" bodyfile="kwin/src/wayland/outputmanagement_v2.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmashell.cpp" line="18" column="22" bodyfile="kwin/src/wayland/plasmashell.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a472c9a576bfc846ccf2d676c06105713" prot="public" static="yes" mutable="no">
        <type>QList&lt; <ref refid="class_k_win_1_1_plasma_shell_surface_interface" kindref="compound">PlasmaShellSurfaceInterface</ref> * &gt;</type>
        <definition>QList&lt;PlasmaShellSurfaceInterface *&gt; KWin::s_shellSurfaces</definition>
        <argsstring></argsstring>
        <name>s_shellSurfaces</name>
        <qualifiedname>KWin::s_shellSurfaces</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmashell.cpp" line="19" column="14" bodyfile="kwin/src/wayland/plasmashell.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmavirtualdesktop.cpp" line="18" column="22" bodyfile="kwin/src/wayland/plasmavirtualdesktop.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 18</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.cpp" line="27" column="22" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1aab1eb88a7e36e763f7b01775f80a3e39" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_activationVersion</definition>
        <argsstring></argsstring>
        <name>s_activationVersion</name>
        <qualifiedname>KWin::s_activationVersion</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/plasmawindowmanagement.cpp" line="28" column="22" bodyfile="kwin/src/wayland/plasmawindowmanagement.cpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1af5876035ac272e77d9547f683b9a3341" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/pointerconstraints_v1.cpp" line="17" column="18" bodyfile="kwin/src/wayland/pointerconstraints_v1.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1af5876035ac272e77d9547f683b9a3341" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/pointergestures_v1.cpp" line="18" column="18" bodyfile="kwin/src/wayland/pointergestures_v1.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1af5876035ac272e77d9547f683b9a3341" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/relativepointer_v1.cpp" line="18" column="18" bodyfile="kwin/src/wayland/relativepointer_v1.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a7c7fee47dcce983bd5dd16acda12d7e6" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/screencast_v1.cpp" line="18" column="12" bodyfile="kwin/src/wayland/screencast_v1.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1af5876035ac272e77d9547f683b9a3341" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/screenedge_v1.cpp" line="18" column="18" bodyfile="kwin/src/wayland/screenedge_v1.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1af5876035ac272e77d9547f683b9a3341" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/seat.cpp" line="42" column="18" bodyfile="kwin/src/wayland/seat.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/securitycontext_v1.cpp" line="19" column="22" bodyfile="kwin/src/wayland/securitycontext_v1.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/server_decoration.cpp" line="19" column="22" bodyfile="kwin/src/wayland/server_decoration.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/server_decoration_palette.cpp" line="17" column="22" bodyfile="kwin/src/wayland/server_decoration_palette.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/shadow.cpp" line="15" column="22" bodyfile="kwin/src/wayland/shadow.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a8f5859fb98b90dc777ad0ada92dc62ab" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>int</type>
        <definition>int KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/shmclientbuffer.cpp" line="24" column="22" bodyfile="kwin/src/wayland/shmclientbuffer.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a4179c6b6cf752c7e3958a1a9aaccd07e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t KWin::s_formats[]</definition>
        <argsstring>[]</argsstring>
        <name>s_formats</name>
        <qualifiedname>KWin::s_formats</qualifiedname>
        <initializer>= {
    WL_SHM_FORMAT_ARGB8888,
    WL_SHM_FORMAT_XRGB8888,

    WL_SHM_FORMAT_ARGB2101010,
    WL_SHM_FORMAT_XRGB2101010,
    WL_SHM_FORMAT_ABGR2101010,
    WL_SHM_FORMAT_XBGR2101010,
    WL_SHM_FORMAT_ABGR16161616,
    WL_SHM_FORMAT_XBGR16161616,

    WL_SHM_FORMAT_BGR888,
    WL_SHM_FORMAT_RGB888,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/shmclientbuffer.cpp" line="26" column="27" bodyfile="kwin/src/wayland/shmclientbuffer.cpp" bodystart="26" bodyend="39"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ae09b291eff4c7dc8d1c585d7dd6d24b2" prot="public" static="yes" mutable="no">
        <type>std::atomic&lt; <ref refid="struct_k_win_1_1_shm_access" kindref="compound">ShmAccess</ref> * &gt;</type>
        <definition>std::atomic&lt;ShmAccess *&gt; KWin::s_accessedBuffers</definition>
        <argsstring></argsstring>
        <name>s_accessedBuffers</name>
        <qualifiedname>KWin::s_accessedBuffers</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/shmclientbuffer.cpp" line="41" column="20" bodyfile="kwin/src/wayland/shmclientbuffer.cpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac9931a00cae6c4511a27454880ca26a5" prot="public" static="yes" mutable="no">
        <type>struct sigaction</type>
        <definition>struct sigaction KWin::prevSigbusAction</definition>
        <argsstring></argsstring>
        <name>prevSigbusAction</name>
        <qualifiedname>KWin::prevSigbusAction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/shmclientbuffer.cpp" line="42" column="23" bodyfile="kwin/src/wayland/shmclientbuffer.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/slide.cpp" line="14" column="22" bodyfile="kwin/src/wayland/slide.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1af5876035ac272e77d9547f683b9a3341" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/subcompositor.cpp" line="15" column="18" bodyfile="kwin/src/wayland/subcompositor.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a7c7fee47dcce983bd5dd16acda12d7e6" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/tablet_v2.cpp" line="23" column="12" bodyfile="kwin/src/wayland/tablet_v2.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a7f24e07187e05d2b00e6b6f457a04cdc" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/tearingcontrol_v1.cpp" line="13" column="27" bodyfile="kwin/src/wayland/tearingcontrol_v1.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1af5876035ac272e77d9547f683b9a3341" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/xdgactivation_v1.cpp" line="19" column="18" bodyfile="kwin/src/wayland/xdgactivation_v1.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" prot="public" static="no" constexpr="yes" mutable="no">
        <type>int</type>
        <definition>static constexpr int KWin::version</definition>
        <argsstring></argsstring>
        <name>version</name>
        <qualifiedname>KWin::version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/xdgdialog_v1.cpp" line="19" column="15" bodyfile="kwin/src/wayland/xdgdialog_v1.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a8a9750f7987cae2e2cbd8826010fc6c9" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_exporterVersion</definition>
        <argsstring></argsstring>
        <name>s_exporterVersion</name>
        <qualifiedname>KWin::s_exporterVersion</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/xdgforeign_v2.cpp" line="16" column="22" bodyfile="kwin/src/wayland/xdgforeign_v2.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac438acbdedb5e1c900d8df72b8f35b4c" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_importerVersion</definition>
        <argsstring></argsstring>
        <name>s_importerVersion</name>
        <qualifiedname>KWin::s_importerVersion</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/xdgforeign_v2.cpp" line="17" column="22" bodyfile="kwin/src/wayland/xdgforeign_v2.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/xdgoutput_v1.cpp" line="23" column="22" bodyfile="kwin/src/wayland/xdgoutput_v1.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1af5876035ac272e77d9547f683b9a3341" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/xdgshell.cpp" line="19" column="18" bodyfile="kwin/src/wayland/xdgshell.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1ac50f9f50d1d6ecf183ae13d4d678428b" prot="public" static="yes" mutable="no">
        <type>const quint32</type>
        <definition>const quint32 KWin::s_version</definition>
        <argsstring></argsstring>
        <name>s_version</name>
        <qualifiedname>KWin::s_version</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/xwaylandshell_v1.cpp" line="18" column="22" bodyfile="kwin/src/wayland/xwaylandshell_v1.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a6bcc184215c97ac5d7d9496e32525b3a" prot="public" static="no" mutable="no">
        <type>const NET::WindowTypes</type>
        <definition>const NET::WindowTypes KWin::SUPPORTED_MANAGED_WINDOW_TYPES_MASK</definition>
        <argsstring></argsstring>
        <name>SUPPORTED_MANAGED_WINDOW_TYPES_MASK</name>
        <qualifiedname>KWin::SUPPORTED_MANAGED_WINDOW_TYPES_MASK</qualifiedname>
        <initializer>= NET::NormalMask
    | NET::DesktopMask
    | NET::DockMask
    | NET::ToolbarMask
    | NET::MenuMask
    | NET::DialogMask
    
    | NET::TopMenuMask
    | NET::UtilityMask
    | NET::SplashMask
    | NET::NotificationMask
    | NET::OnScreenDisplayMask
    | NET::CriticalNotificationMask
    | NET::AppletPopupMask</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.cpp" line="76" column="24" bodyfile="kwin/src/x11window.cpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a7f08dbda947a909a716bcbb664666da8" prot="public" static="no" mutable="no">
        <type>const NET::WindowTypes</type>
        <definition>const NET::WindowTypes KWin::SUPPORTED_UNMANAGED_WINDOW_TYPES_MASK</definition>
        <argsstring></argsstring>
        <name>SUPPORTED_UNMANAGED_WINDOW_TYPES_MASK</name>
        <qualifiedname>KWin::SUPPORTED_UNMANAGED_WINDOW_TYPES_MASK</qualifiedname>
        <initializer>= NET::NormalMask
    | NET::DesktopMask
    | NET::DockMask
    | NET::ToolbarMask
    | NET::MenuMask
    | NET::DialogMask
    
    | NET::TopMenuMask
    | NET::UtilityMask
    | NET::SplashMask
    | NET::DropdownMenuMask
    | NET::PopupMenuMask
    | NET::TooltipMask
    | NET::NotificationMask
    | NET::ComboBoxMask
    | NET::DNDIconMask
    | NET::OnScreenDisplayMask
    | NET::CriticalNotificationMask</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.cpp" line="92" column="24" bodyfile="kwin/src/x11window.cpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1aaaf08ec94be26e7402b4343777bbf299" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool KWin::changeMaximizeRecursion</definition>
        <argsstring></argsstring>
        <name>changeMaximizeRecursion</name>
        <qualifiedname>KWin::changeMaximizeRecursion</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.cpp" line="4077" column="13" bodyfile="kwin/src/x11window.cpp" bodystart="4077" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1aaaf08ec94be26e7402b4343777bbf299" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool KWin::changeMaximizeRecursion</definition>
        <argsstring></argsstring>
        <name>changeMaximizeRecursion</name>
        <qualifiedname>KWin::changeMaximizeRecursion</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/xdgshellwindow.cpp" line="1572" column="13" bodyfile="kwin/src/xdgshellwindow.cpp" bodystart="1572" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a8acfbe08df9889719e2311ccfe4d3b6c" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_k_win_1_1_trans_key" kindref="compound">TransKey</ref></type>
        <definition>const TransKey KWin::g_rgSymXToQT[]</definition>
        <argsstring>[]</argsstring>
        <name>g_rgSymXToQT</name>
        <qualifiedname>KWin::g_rgSymXToQT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/xkb.cpp" line="62" column="23" bodyfile="kwin/src/xkb.cpp" bodystart="62" bodyend="408"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_k_win_1a7ae1922c734d977e7f05aa4dffb84dbd" prot="public" static="no" constexpr="yes" mutable="no">
        <type>xkb_context_flags</type>
        <definition>xkb_context_flags KWin::KWIN_XKB_CONTEXT_FLAGS</definition>
        <argsstring></argsstring>
        <name>KWIN_XKB_CONTEXT_FLAGS</name>
        <qualifiedname>KWin::KWIN_XKB_CONTEXT_FLAGS</qualifiedname>
        <initializer>= XKB_CONTEXT_NO_FLAGS</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/xkb.cpp" line="442" column="29" bodyfile="kwin/src/xkb.cpp" bodystart="442" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespace_k_win_1a5210efe316cc8c3929bafaecafefdb90" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const QString</type>
        <definition>static const QString KWin::s_viewService</definition>
        <argsstring>(QStringLiteral(&quot;org.kde.kappmenuview&quot;))</argsstring>
        <name>s_viewService</name>
        <qualifiedname>KWin::s_viewService</qualifiedname>
        <param>
          <type>QStringLiteral(&quot;org.kde.kappmenuview&quot;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/appmenu.cpp" line="25" column="22" declfile="kwin/src/appmenu.cpp" declline="25" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a266f541a8d5ddec2827f38ae1ad050ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QStringList</type>
        <definition>static QStringList KWin::splitPathList</definition>
        <argsstring>(const QString &amp;input, const QChar delimiter)</argsstring>
        <name>splitPathList</name>
        <qualifiedname>KWin::splitPathList</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const QChar</type>
          <declname>delimiter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_backend.cpp" line="49" column="20" bodyfile="kwin/src/backends/drm/drm_backend.cpp" bodystart="49" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ac85839ad7ff7b8c64b6394d8b2064b17" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>static uint64_t KWin::doubleToFixed</definition>
        <argsstring>(double value)</argsstring>
        <name>doubleToFixed</name>
        <qualifiedname>KWin::doubleToFixed</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_colorop.cpp" line="204" column="17" bodyfile="kwin/src/backends/drm/drm_colorop.cpp" bodystart="204" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a7ad2fc8a3d29461058c0fd03ba35cf88" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_drm_atomic_commit" kindref="compound">DrmAtomicCommit</ref> &gt;</type>
        <definition>static std::unique_ptr&lt; DrmAtomicCommit &gt; KWin::mergeCommits</definition>
        <argsstring>(std::span&lt; const std::unique_ptr&lt; DrmAtomicCommit &gt; &gt; commits)</argsstring>
        <name>mergeCommits</name>
        <qualifiedname>KWin::mergeCommits</qualifiedname>
        <param>
          <type>std::span&lt; const std::unique_ptr&lt; <ref refid="class_k_win_1_1_drm_atomic_commit" kindref="compound">DrmAtomicCommit</ref> &gt; &gt;</type>
          <declname>commits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_commit_thread.cpp" line="176" column="24" bodyfile="kwin/src/backends/drm/drm_commit_thread.cpp" bodystart="176" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a24d588b58817dc0f694ec78c3f2cce37" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QSize</type>
        <definition>static QSize KWin::resolutionForMode</definition>
        <argsstring>(const drmModeModeInfo *info)</argsstring>
        <name>resolutionForMode</name>
        <qualifiedname>KWin::resolutionForMode</qualifiedname>
        <param>
          <type>const drmModeModeInfo *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_connector.cpp" line="26" column="14" bodyfile="kwin/src/backends/drm/drm_connector.cpp" bodystart="26" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ae3dbaa5fe9aacb4928d34f014084e58e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>quint64</type>
        <definition>static quint64 KWin::refreshRateForMode</definition>
        <argsstring>(_drmModeModeInfo *m)</argsstring>
        <name>refreshRateForMode</name>
        <qualifiedname>KWin::refreshRateForMode</qualifiedname>
        <param>
          <type>_drmModeModeInfo *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_connector.cpp" line="31" column="16" bodyfile="kwin/src/backends/drm/drm_connector.cpp" bodystart="31" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ac85231015b6a29f14b48d8d68b18219b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OutputMode::Flags</type>
        <definition>static OutputMode::Flags KWin::flagsForMode</definition>
        <argsstring>(const drmModeModeInfo *info, OutputMode::Flags additionalFlags)</argsstring>
        <name>flagsForMode</name>
        <qualifiedname>KWin::flagsForMode</qualifiedname>
        <param>
          <type>const drmModeModeInfo *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>OutputMode::Flags</type>
          <declname>additionalFlags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_connector.cpp" line="48" column="26" bodyfile="kwin/src/backends/drm/drm_connector.cpp" bodystart="48" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a5220a6da205fe5d81a24c1ab96d87084" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::checkIfEqual</definition>
        <argsstring>(const drmModeModeInfo *one, const drmModeModeInfo *two)</argsstring>
        <name>checkIfEqual</name>
        <qualifiedname>KWin::checkIfEqual</qualifiedname>
        <param>
          <type>const drmModeModeInfo *</type>
          <declname>one</declname>
        </param>
        <param>
          <type>const drmModeModeInfo *</type>
          <declname>two</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_connector.cpp" line="82" column="20" bodyfile="kwin/src/backends/drm/drm_connector.cpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a40cfe09792c9b4d026b82c833b6497fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QDebug &amp;</type>
        <definition>QDebug &amp; KWin::operator&lt;&lt;</definition>
        <argsstring>(QDebug &amp;s, const KWin::DrmConnector *obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>KWin::operator&lt;&lt;</qualifiedname>
        <param>
          <type>QDebug &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_drm_connector" kindref="compound">KWin::DrmConnector</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_connector.cpp" line="426" column="1" bodyfile="kwin/src/backends/drm/drm_connector.cpp" bodystart="426" bodyend="444" declfile="kwin/src/backends/drm/drm_connector.h" declline="159" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a76ef87f126a6ca50293508265a001aa0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_egl_gbm_layer_surface_1ab17635882d2915f6aa7fdcdca0c639c2" kindref="member">EglGbmLayerSurface::BufferTarget</ref></type>
        <definition>static EglGbmLayerSurface::BufferTarget KWin::targetFor</definition>
        <argsstring>(DrmPipeline *pipeline, DrmPlane::TypeIndex planeType)</argsstring>
        <name>targetFor</name>
        <qualifiedname>KWin::targetFor</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_drm_pipeline" kindref="compound">DrmPipeline</ref> *</type>
          <declname>pipeline</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_drm_plane_1a3cf72c069e4b10ac10646deba960d050" kindref="member">DrmPlane::TypeIndex</ref></type>
          <declname>planeType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_egl_layer.cpp" line="32" column="41" bodyfile="kwin/src/backends/drm/drm_egl_layer.cpp" bodystart="32" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1afb67babd6864307c41e802698358d5ad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>gbm_format_name_desc</type>
        <definition>static gbm_format_name_desc KWin::formatName</definition>
        <argsstring>(uint32_t format)</argsstring>
        <name>formatName</name>
        <qualifiedname>KWin::formatName</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_egl_layer_surface.cpp" line="41" column="29" bodyfile="kwin/src/backends/drm/drm_egl_layer_surface.cpp" bodystart="41" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ade645271b2ccbad16328f5ce64715d3c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="struct_k_win_1_1_format_info" kindref="compound">FormatInfo</ref> &gt;</type>
        <definition>static QList&lt; FormatInfo &gt; KWin::filterAndSortFormats</definition>
        <argsstring>(const QHash&lt; uint32_t, QList&lt; uint64_t &gt; &gt; &amp;formats, EglGbmLayerSurface::FormatOption option, Output::ColorPowerTradeoff tradeoff)</argsstring>
        <name>filterAndSortFormats</name>
        <qualifiedname>KWin::filterAndSortFormats</qualifiedname>
        <param>
          <type>const QHash&lt; uint32_t, QList&lt; uint64_t &gt; &gt; &amp;</type>
          <declname>formats</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_egl_gbm_layer_surface_1a37b5b81ab1dc7375fa786fee10448f94" kindref="member">EglGbmLayerSurface::FormatOption</ref></type>
          <declname>option</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_output_1a63a50e5f54e2c42409e8e275f673f198" kindref="member">Output::ColorPowerTradeoff</ref></type>
          <declname>tradeoff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_egl_layer_surface.cpp" line="77" column="14" bodyfile="kwin/src/backends/drm/drm_egl_layer_surface.cpp" bodystart="77" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a88b38bd02fb8585f1a8f3eea63ac4c21" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_g_l_vertex_buffer" kindref="compound">GLVertexBuffer</ref> *</type>
        <definition>static GLVertexBuffer * KWin::uploadGeometry</definition>
        <argsstring>(const QRegion &amp;devicePixels, const QSize &amp;fboSize)</argsstring>
        <name>uploadGeometry</name>
        <qualifiedname>KWin::uploadGeometry</qualifiedname>
        <param>
          <type>const QRegion &amp;</type>
          <declname>devicePixels</declname>
        </param>
        <param>
          <type>const QSize &amp;</type>
          <declname>fboSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_egl_layer_surface.cpp" line="196" column="23" bodyfile="kwin/src/backends/drm/drm_egl_layer_surface.cpp" bodystart="196" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aefcd19bacdc6104c03f59f2f0ef92a42" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; uint64_t &gt;</type>
        <definition>static QList&lt; uint64_t &gt; KWin::filterModifiers</definition>
        <argsstring>(const QList&lt; uint64_t &gt; &amp;one, const QList&lt; uint64_t &gt; &amp;two)</argsstring>
        <name>filterModifiers</name>
        <qualifiedname>KWin::filterModifiers</qualifiedname>
        <param>
          <type>const QList&lt; uint64_t &gt; &amp;</type>
          <declname>one</declname>
        </param>
        <param>
          <type>const QList&lt; uint64_t &gt; &amp;</type>
          <declname>two</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_egl_layer_surface.cpp" line="488" column="14" bodyfile="kwin/src/backends/drm/drm_egl_layer_surface.cpp" bodystart="488" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aeacc7b3f76c840fdb9bbc04066414b9b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::chrono::nanoseconds</type>
        <definition>static std::chrono::nanoseconds KWin::convertTimestamp</definition>
        <argsstring>(const timespec &amp;timestamp)</argsstring>
        <name>convertTimestamp</name>
        <qualifiedname>KWin::convertTimestamp</qualifiedname>
        <param>
          <type>const timespec &amp;</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_gpu.cpp" line="497" column="33" bodyfile="kwin/src/backends/drm/drm_gpu.cpp" bodystart="497" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ab94732dc4b77510fd1ac22fcf3261a70" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::chrono::nanoseconds</type>
        <definition>static std::chrono::nanoseconds KWin::convertTimestamp</definition>
        <argsstring>(clockid_t sourceClock, clockid_t targetClock, const timespec &amp;timestamp)</argsstring>
        <name>convertTimestamp</name>
        <qualifiedname>KWin::convertTimestamp</qualifiedname>
        <param>
          <type>clockid_t</type>
          <declname>sourceClock</declname>
        </param>
        <param>
          <type>clockid_t</type>
          <declname>targetClock</declname>
        </param>
        <param>
          <type>const timespec &amp;</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_gpu.cpp" line="502" column="33" bodyfile="kwin/src/backends/drm/drm_gpu.cpp" bodystart="502" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a6754d07a114cd8f364e86e4fe5ad53c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DrmPlane::Transformations</type>
        <definition>DrmPlane::Transformations KWin::outputToPlaneTransform</definition>
        <argsstring>(OutputTransform transform)</argsstring>
        <name>outputToPlaneTransform</name>
        <qualifiedname>KWin::outputToPlaneTransform</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output_transform" kindref="compound">OutputTransform</ref></type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_output.cpp" line="203" column="27" bodyfile="kwin/src/backends/drm/drm_output.cpp" bodystart="203" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a0dd08b62ac3ce5f9f677e14e97f7f32e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QVector3D</type>
        <definition>static QVector3D KWin::adaptChannelFactors</definition>
        <argsstring>(const ColorDescription &amp;originalColor, const QVector3D &amp;sRGBchannelFactors)</argsstring>
        <name>adaptChannelFactors</name>
        <qualifiedname>KWin::adaptChannelFactors</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_color_description" kindref="compound">ColorDescription</ref> &amp;</type>
          <declname>originalColor</declname>
        </param>
        <param>
          <type>const QVector3D &amp;</type>
          <declname>sRGBchannelFactors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_output.cpp" line="404" column="18" bodyfile="kwin/src/backends/drm/drm_output.cpp" bodystart="404" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a409f3b2d2fd1b91afd86095c3cc69bf9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_color_description" kindref="compound">ColorDescription</ref></type>
        <definition>static ColorDescription KWin::applyNightLight</definition>
        <argsstring>(const ColorDescription &amp;originalColor, const QVector3D &amp;sRGBchannelFactors)</argsstring>
        <name>applyNightLight</name>
        <qualifiedname>KWin::applyNightLight</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_color_description" kindref="compound">ColorDescription</ref> &amp;</type>
          <declname>originalColor</declname>
        </param>
        <param>
          <type>const QVector3D &amp;</type>
          <declname>sRGBchannelFactors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/drm/drm_output.cpp" line="415" column="25" bodyfile="kwin/src/backends/drm/drm_output.cpp" bodystart="415" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1acd4b2b39c426657074b4462c6d98d7c7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_drm_device" kindref="compound">DrmDevice</ref> &gt;</type>
        <definition>static std::unique_ptr&lt; DrmDevice &gt; KWin::findRenderDevice</definition>
        <argsstring>()</argsstring>
        <name>findRenderDevice</name>
        <qualifiedname>KWin::findRenderDevice</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/backends/virtual/virtual_backend.cpp" line="23" column="24" bodyfile="kwin/src/backends/virtual/virtual_backend.cpp" bodystart="23" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a21386b841093cdda9be5037a621ed4dd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::getHostName</definition>
        <argsstring>()</argsstring>
        <name>getHostName</name>
        <qualifiedname>KWin::getHostName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/client_machine.cpp" line="34" column="16" bodyfile="kwin/src/client_machine.cpp" bodystart="34" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a20d87d634f01075c0d6fdee597375f5f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>static qreal KWin::interpolate</definition>
        <argsstring>(qreal a, qreal b, qreal blendFactor)</argsstring>
        <name>interpolate</name>
        <qualifiedname>KWin::interpolate</qualifiedname>
        <param>
          <type>qreal</type>
          <declname>a</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>b</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>blendFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/colors/colordevice.cpp" line="34" column="14" bodyfile="kwin/src/colors/colordevice.cpp" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a4da82d1ee04d52350543671e2b99be5e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::isTearingRequested</definition>
        <argsstring>(const Item *item)</argsstring>
        <name>isTearingRequested</name>
        <qualifiedname>KWin::isTearingRequested</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_item" kindref="compound">Item</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/compositor.cpp" line="388" column="13" bodyfile="kwin/src/compositor.cpp" bodystart="388" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a54e3672cd08d108b0e59a3dc517618d1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QRect</type>
        <definition>static QRect KWin::centerBuffer</definition>
        <argsstring>(const QSizeF &amp;bufferSize, const QSize &amp;modeSize)</argsstring>
        <name>centerBuffer</name>
        <qualifiedname>KWin::centerBuffer</qualifiedname>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>bufferSize</declname>
        </param>
        <param>
          <type>const QSize &amp;</type>
          <declname>modeSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/compositor.cpp" line="400" column="14" bodyfile="kwin/src/compositor.cpp" bodystart="400" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ab40b5156b1d55192769559cd817b28c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::checkForBlackBackground</definition>
        <argsstring>(SurfaceItem *background)</argsstring>
        <name>checkForBlackBackground</name>
        <qualifiedname>KWin::checkForBlackBackground</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_surface_item" kindref="compound">SurfaceItem</ref> *</type>
          <declname>background</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/compositor.cpp" line="415" column="13" bodyfile="kwin/src/compositor.cpp" bodystart="415" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a41fc618c01055af18edba50a5fcf7635" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>KWIN_EXPORT bool KWin::isFuzzyIdentity</definition>
        <argsstring>(const QMatrix4x4 &amp;mat)</argsstring>
        <name>isFuzzyIdentity</name>
        <qualifiedname>KWin::isFuzzyIdentity</qualifiedname>
        <param>
          <type>const QMatrix4x4 &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.cpp" line="178" column="6" bodyfile="kwin/src/core/colorpipeline.cpp" bodystart="178" bodyend="189" declfile="kwin/src/core/colorpipeline.h" declline="133" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a4024681af06738678b577472bbdba4c4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::isFuzzyScalingOnly</definition>
        <argsstring>(const QMatrix4x4 &amp;mat)</argsstring>
        <name>isFuzzyScalingOnly</name>
        <qualifiedname>KWin::isFuzzyScalingOnly</qualifiedname>
        <param>
          <type>const QMatrix4x4 &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.cpp" line="191" column="13" bodyfile="kwin/src/core/colorpipeline.cpp" bodystart="191" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1af6b81099f777ce728a44e39f100f7258" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QMatrix4x4</type>
        <definition>static QMatrix4x4 KWin::matrixFromColumns</definition>
        <argsstring>(const QVector3D &amp;first, const QVector3D &amp;second, const QVector3D &amp;third)</argsstring>
        <name>matrixFromColumns</name>
        <qualifiedname>KWin::matrixFromColumns</qualifiedname>
        <param>
          <type>const QVector3D &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const QVector3D &amp;</type>
          <declname>second</declname>
        </param>
        <param>
          <type>const QVector3D &amp;</type>
          <declname>third</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.cpp" line="14" column="19" bodyfile="kwin/src/core/colorspace.cpp" bodystart="14" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a1e6f8013b8ff1cff314b744981ff2405" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double KWin::triangleArea</definition>
        <argsstring>(QVector2D p1, QVector2D p2, QVector2D p3)</argsstring>
        <name>triangleArea</name>
        <qualifiedname>KWin::triangleArea</qualifiedname>
        <param>
          <type>QVector2D</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>QVector2D</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>QVector2D</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.cpp" line="211" column="15" bodyfile="kwin/src/core/colorspace.cpp" bodystart="211" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1acc4d3c391c03af4828fd1c46d932a472" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QMatrix4x4</type>
        <definition>static QMatrix4x4 KWin::calculateYuvToRgbMatrix</definition>
        <argsstring>(double kr, double kg, double kb, bool limitedRange)</argsstring>
        <name>calculateYuvToRgbMatrix</name>
        <qualifiedname>KWin::calculateYuvToRgbMatrix</qualifiedname>
        <param>
          <type>double</type>
          <declname>kr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>kg</declname>
        </param>
        <param>
          <type>double</type>
          <declname>kb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>limitedRange</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorspace.cpp" line="512" column="19" bodyfile="kwin/src/core/colorspace.cpp" bodystart="512" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aefbff986cf1a0cedc4d43a8e17a5c9fd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; <ref refid="struct_k_win_1_1_dma_buf_attributes" kindref="compound">DmaBufAttributes</ref> &gt;</type>
        <definition>static std::optional&lt; DmaBufAttributes &gt; KWin::dmaBufAttributesForBo</definition>
        <argsstring>(gbm_bo *bo)</argsstring>
        <name>dmaBufAttributesForBo</name>
        <qualifiedname>KWin::dmaBufAttributesForBo</qualifiedname>
        <param>
          <type>gbm_bo *</type>
          <declname>bo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/gbmgraphicsbufferallocator.cpp" line="23" column="29" bodyfile="kwin/src/core/gbmgraphicsbufferallocator.cpp" bodystart="23" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a2a65248cadf567da57a7b102e1c4fd46" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_graphics_buffer" kindref="compound">GraphicsBuffer</ref> *</type>
        <definition>static GraphicsBuffer * KWin::allocateDumb</definition>
        <argsstring>(gbm_device *device, const GraphicsBufferOptions &amp;options)</argsstring>
        <name>allocateDumb</name>
        <qualifiedname>KWin::allocateDumb</qualifiedname>
        <param>
          <type>gbm_device *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const <ref refid="struct_k_win_1_1_graphics_buffer_options" kindref="compound">GraphicsBufferOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/gbmgraphicsbufferallocator.cpp" line="118" column="23" bodyfile="kwin/src/core/gbmgraphicsbufferallocator.cpp" bodystart="118" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a318111b24d8c5b68aa3ccb179eec1600" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_graphics_buffer" kindref="compound">GraphicsBuffer</ref> *</type>
        <definition>static GraphicsBuffer * KWin::allocateDmaBuf</definition>
        <argsstring>(gbm_device *device, const GraphicsBufferOptions &amp;options)</argsstring>
        <name>allocateDmaBuf</name>
        <qualifiedname>KWin::allocateDmaBuf</qualifiedname>
        <param>
          <type>gbm_device *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const <ref refid="struct_k_win_1_1_graphics_buffer_options" kindref="compound">GraphicsBufferOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/gbmgraphicsbufferallocator.cpp" line="156" column="23" bodyfile="kwin/src/core/gbmgraphicsbufferallocator.cpp" bodystart="156" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aa69c792f15f895cd8da4ba4ac9cad348" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QImage::Format</type>
        <definition>static QImage::Format KWin::drmFormatToQImageFormat</definition>
        <argsstring>(uint32_t drmFormat)</argsstring>
        <name>drmFormatToQImageFormat</name>
        <qualifiedname>KWin::drmFormatToQImageFormat</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>drmFormat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/graphicsbufferview.cpp" line="17" column="23" bodyfile="kwin/src/core/graphicsbufferview.cpp" bodystart="17" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ae8acf9f6f724c6d42da5e8d444a22438" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>static std::vector&lt; uint8_t &gt; KWin::readTagRaw</definition>
        <argsstring>(cmsHPROFILE profile, cmsTagSignature tag)</argsstring>
        <name>readTagRaw</name>
        <qualifiedname>KWin::readTagRaw</qualifiedname>
        <param>
          <type><ref refid="iccprofile_8h_1abea1909e7159ef8bdef5296a7da54948" kindref="member">cmsHPROFILE</ref></type>
          <declname>profile</declname>
        </param>
        <param>
          <type>cmsTagSignature</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/iccprofile.cpp" line="87" column="20" bodyfile="kwin/src/core/iccprofile.cpp" bodystart="87" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aa6e851c123ec9bcbc6e32d4a422fc7cf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T KWin::read</definition>
        <argsstring>(std::span&lt; const uint8_t &gt; data, size_t index)</argsstring>
        <name>read</name>
        <qualifiedname>KWin::read</qualifiedname>
        <param>
          <type>std::span&lt; const uint8_t &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/iccprofile.cpp" line="96" column="10" bodyfile="kwin/src/core/iccprofile.cpp" bodystart="96" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a3dddb0af34ea3ebcdc642ff489385744" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float KWin::readS15Fixed16</definition>
        <argsstring>(std::span&lt; const uint8_t &gt; data, size_t index)</argsstring>
        <name>readS15Fixed16</name>
        <qualifiedname>KWin::readS15Fixed16</qualifiedname>
        <param>
          <type>std::span&lt; const uint8_t &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/iccprofile.cpp" line="106" column="14" bodyfile="kwin/src/core/iccprofile.cpp" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a8b9b0430800579c196fd64c22c296e99" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::tuple&lt; size_t, size_t, size_t &gt; &gt;</type>
        <definition>static std::optional&lt; std::tuple&lt; size_t, size_t, size_t &gt; &gt; KWin::parseBToACLUTSize</definition>
        <argsstring>(std::span&lt; const uint8_t &gt; data)</argsstring>
        <name>parseBToACLUTSize</name>
        <qualifiedname>KWin::parseBToACLUTSize</qualifiedname>
        <param>
          <type>std::span&lt; const uint8_t &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/iccprofile.cpp" line="111" column="22" bodyfile="kwin/src/core/iccprofile.cpp" bodystart="111" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a32052d70108e8fa7120cb315ef533bc9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; QMatrix4x4 &gt;</type>
        <definition>static std::optional&lt; QMatrix4x4 &gt; KWin::parseMatrix</definition>
        <argsstring>(std::span&lt; const uint8_t &gt; data, bool hasOffset)</argsstring>
        <name>parseMatrix</name>
        <qualifiedname>KWin::parseMatrix</qualifiedname>
        <param>
          <type>std::span&lt; const uint8_t &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hasOffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/iccprofile.cpp" line="128" column="22" bodyfile="kwin/src/core/iccprofile.cpp" bodystart="128" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a22be889750faed7e3944aee4c5cbaaf9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="class_k_win_1_1_color_pipeline" kindref="compound">ColorPipeline</ref> &gt;</type>
        <definition>static std::optional&lt; ColorPipeline &gt; KWin::parseBToATag</definition>
        <argsstring>(cmsHPROFILE profile, cmsTagSignature tag)</argsstring>
        <name>parseBToATag</name>
        <qualifiedname>KWin::parseBToATag</qualifiedname>
        <param>
          <type><ref refid="iccprofile_8h_1abea1909e7159ef8bdef5296a7da54948" kindref="member">cmsHPROFILE</ref></type>
          <declname>profile</declname>
        </param>
        <param>
          <type>cmsTagSignature</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/iccprofile.cpp" line="154" column="22" bodyfile="kwin/src/core/iccprofile.cpp" bodystart="154" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a20cbb5afbd545b44cf8e77878eb9a4cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QDebug</type>
        <definition>KWIN_EXPORT QDebug KWin::operator&lt;&lt;</definition>
        <argsstring>(QDebug debug, const Output *output)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>KWin::operator&lt;&lt;</qualifiedname>
        <param>
          <type>QDebug</type>
          <declname>debug</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/output.cpp" line="24" column="1" bodyfile="kwin/src/core/output.cpp" bodystart="24" bodyend="43" declfile="kwin/src/core/output.h" declline="537" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a52d45dc1bc2f78cf1d4f9e9da52fbaa1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QUuid</type>
        <definition>static QUuid KWin::generateOutputId</definition>
        <argsstring>(const QString &amp;eisaId, const QString &amp;model, const QString &amp;serialNumber, const QString &amp;name)</argsstring>
        <name>generateOutputId</name>
        <qualifiedname>KWin::generateOutputId</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>eisaId</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>serialNumber</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/output.cpp" line="555" column="14" bodyfile="kwin/src/core/output.cpp" bodystart="555" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aa1b95aced41e7391cc9ef85da08a95ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KWIN_EXPORT QPoint</type>
        <definition>KWIN_EXPORT QPoint KWin::snapToPixelGrid</definition>
        <argsstring>(const QPointF &amp;point)</argsstring>
        <name>snapToPixelGrid</name>
        <qualifiedname>KWin::snapToPixelGrid</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/pixelgrid.h" line="17" column="27" bodyfile="kwin/src/core/pixelgrid.h" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a7138efbaedcea7ed56eb0adc36304c4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KWIN_EXPORT QPointF</type>
        <definition>KWIN_EXPORT QPointF KWin::snapToPixelGridF</definition>
        <argsstring>(const QPointF &amp;point)</argsstring>
        <name>snapToPixelGridF</name>
        <qualifiedname>KWin::snapToPixelGridF</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/pixelgrid.h" line="22" column="28" bodyfile="kwin/src/core/pixelgrid.h" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ac0eed46d0ceab4ed33400033e7064829" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KWIN_EXPORT QRect</type>
        <definition>KWIN_EXPORT QRect KWin::snapToPixelGrid</definition>
        <argsstring>(const QRectF &amp;rect)</argsstring>
        <name>snapToPixelGrid</name>
        <qualifiedname>KWin::snapToPixelGrid</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/pixelgrid.h" line="27" column="26" bodyfile="kwin/src/core/pixelgrid.h" bodystart="27" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a505e44c759ba45219ca629174be92c63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KWIN_EXPORT QRectF</type>
        <definition>KWIN_EXPORT QRectF KWin::snapToPixelGridF</definition>
        <argsstring>(const QRectF &amp;rect)</argsstring>
        <name>snapToPixelGridF</name>
        <qualifiedname>KWin::snapToPixelGridF</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/pixelgrid.h" line="34" column="27" bodyfile="kwin/src/core/pixelgrid.h" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ac5cdb84fe1860d1071de1403b965e667" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KWIN_EXPORT constexpr double</type>
        <definition>KWIN_EXPORT constexpr double KWin::snapToPixels</definition>
        <argsstring>(double logicalValue, double scale)</argsstring>
        <name>snapToPixels</name>
        <qualifiedname>KWin::snapToPixels</qualifiedname>
        <param>
          <type>double</type>
          <declname>logicalValue</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/pixelgrid.h" line="39" column="30" bodyfile="kwin/src/core/pixelgrid.h" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a4e16b7445d470fdfb508cb7604404802" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KWIN_EXPORT constexpr QPointF</type>
        <definition>KWIN_EXPORT constexpr QPointF KWin::snapToPixels</definition>
        <argsstring>(const QPointF &amp;logicalValue, double scale)</argsstring>
        <name>snapToPixels</name>
        <qualifiedname>KWin::snapToPixels</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>logicalValue</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/pixelgrid.h" line="44" column="31" bodyfile="kwin/src/core/pixelgrid.h" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a36ef26f3782fc41e9772d234427a4c25" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KWIN_EXPORT constexpr QSizeF</type>
        <definition>KWIN_EXPORT constexpr QSizeF KWin::snapToPixels</definition>
        <argsstring>(const QSizeF &amp;logicalValue, double scale)</argsstring>
        <name>snapToPixels</name>
        <qualifiedname>KWin::snapToPixels</qualifiedname>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>logicalValue</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/pixelgrid.h" line="49" column="30" bodyfile="kwin/src/core/pixelgrid.h" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a36ac67170b9dc4afb61795e9946b0891" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KWIN_EXPORT constexpr QRectF</type>
        <definition>KWIN_EXPORT constexpr QRectF KWin::snapToPixels</definition>
        <argsstring>(const QRectF &amp;logicalValue, double scale)</argsstring>
        <name>snapToPixels</name>
        <qualifiedname>KWin::snapToPixels</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>logicalValue</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/pixelgrid.h" line="54" column="30" bodyfile="kwin/src/core/pixelgrid.h" bodystart="54" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ab10d11efb0d2b5403e783c42bf0a6760" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::chrono::nanoseconds</type>
        <definition>static std::chrono::nanoseconds KWin::mix</definition>
        <argsstring>(std::chrono::nanoseconds duration1, std::chrono::nanoseconds duration2, double ratio)</argsstring>
        <name>mix</name>
        <qualifiedname>KWin::mix</qualifiedname>
        <param>
          <type>std::chrono::nanoseconds</type>
          <declname>duration1</declname>
        </param>
        <param>
          <type>std::chrono::nanoseconds</type>
          <declname>duration2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/renderjournal.cpp" line="21" column="33" bodyfile="kwin/src/core/renderjournal.cpp" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a2b281ce5ba1d288deb4893a8f4d01682" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QMatrix4x4</type>
        <definition>static QMatrix4x4 KWin::createProjectionMatrix</definition>
        <argsstring>(const RenderTarget &amp;renderTarget, const QRect &amp;rect)</argsstring>
        <name>createProjectionMatrix</name>
        <qualifiedname>KWin::createProjectionMatrix</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref> &amp;</type>
          <declname>renderTarget</declname>
        </param>
        <param>
          <type>const QRect &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/renderviewport.cpp" line="14" column="19" bodyfile="kwin/src/core/renderviewport.cpp" bodystart="14" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a1ce9a975ab67cb902a4249cd5b6cf535" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::findProcessSessionPath</definition>
        <argsstring>()</argsstring>
        <name>findProcessSessionPath</name>
        <qualifiedname>KWin::findProcessSessionPath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session_consolekit.cpp" line="64" column="16" bodyfile="kwin/src/core/session_consolekit.cpp" bodystart="64" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ab0bdc34b79c3706c03cf12c67814ddd4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::takeControl</definition>
        <argsstring>(const QString &amp;sessionPath)</argsstring>
        <name>takeControl</name>
        <qualifiedname>KWin::takeControl</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>sessionPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session_consolekit.cpp" line="79" column="13" bodyfile="kwin/src/core/session_consolekit.cpp" bodystart="79" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a9e60a07d2276d71885d27e4024458ce6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::releaseControl</definition>
        <argsstring>(const QString &amp;sessionPath)</argsstring>
        <name>releaseControl</name>
        <qualifiedname>KWin::releaseControl</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>sessionPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session_consolekit.cpp" line="91" column="13" bodyfile="kwin/src/core/session_consolekit.cpp" bodystart="91" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1af4096ce823468fb248d675b42d2fcbf8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::activate</definition>
        <argsstring>(const QString &amp;sessionPath)</argsstring>
        <name>activate</name>
        <qualifiedname>KWin::activate</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>sessionPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session_consolekit.cpp" line="100" column="13" bodyfile="kwin/src/core/session_consolekit.cpp" bodystart="100" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a1ce9a975ab67cb902a4249cd5b6cf535" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::findProcessSessionPath</definition>
        <argsstring>()</argsstring>
        <name>findProcessSessionPath</name>
        <qualifiedname>KWin::findProcessSessionPath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session_logind.cpp" line="62" column="16" bodyfile="kwin/src/core/session_logind.cpp" bodystart="62" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ab0bdc34b79c3706c03cf12c67814ddd4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::takeControl</definition>
        <argsstring>(const QString &amp;sessionPath)</argsstring>
        <name>takeControl</name>
        <qualifiedname>KWin::takeControl</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>sessionPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session_logind.cpp" line="77" column="13" bodyfile="kwin/src/core/session_logind.cpp" bodystart="77" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a9e60a07d2276d71885d27e4024458ce6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::releaseControl</definition>
        <argsstring>(const QString &amp;sessionPath)</argsstring>
        <name>releaseControl</name>
        <qualifiedname>KWin::releaseControl</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>sessionPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session_logind.cpp" line="89" column="13" bodyfile="kwin/src/core/session_logind.cpp" bodystart="89" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1af4096ce823468fb248d675b42d2fcbf8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::activate</definition>
        <argsstring>(const QString &amp;sessionPath)</argsstring>
        <name>activate</name>
        <qualifiedname>KWin::activate</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>sessionPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/session_logind.cpp" line="98" column="13" bodyfile="kwin/src/core/session_logind.cpp" bodystart="98" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ac5423f0b9c8d8fafaca02e752a6ffb63" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_file_descriptor" kindref="compound">FileDescriptor</ref></type>
        <definition>static FileDescriptor KWin::mergeSyncFds</definition>
        <argsstring>(const FileDescriptor &amp;fd1, const FileDescriptor &amp;fd2)</argsstring>
        <name>mergeSyncFds</name>
        <qualifiedname>KWin::mergeSyncFds</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_file_descriptor" kindref="compound">FileDescriptor</ref> &amp;</type>
          <declname>fd1</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_file_descriptor" kindref="compound">FileDescriptor</ref> &amp;</type>
          <declname>fd2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/syncobjtimeline.cpp" line="46" column="23" bodyfile="kwin/src/core/syncobjtimeline.cpp" bodystart="46" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ae75c022daa101e0da57f73771096e808" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::tableHeaderRow</definition>
        <argsstring>(const QString &amp;title)</argsstring>
        <name>tableHeaderRow</name>
        <qualifiedname>KWin::tableHeaderRow</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>title</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/debug_console.cpp" line="67" column="16" bodyfile="kwin/src/debug_console.cpp" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a4038c7ce8255582e3a4a2eadf4b930a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>QString</type>
        <definition>static QString KWin::tableRow</definition>
        <argsstring>(const QString &amp;title, const T &amp;argument)</argsstring>
        <name>tableRow</name>
        <qualifiedname>KWin::tableRow</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>title</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>argument</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/debug_console.cpp" line="73" column="16" bodyfile="kwin/src/debug_console.cpp" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a97f92a09572e09788d1ed412b632d2a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::timestampRow</definition>
        <argsstring>(std::chrono::microseconds timestamp)</argsstring>
        <name>timestampRow</name>
        <qualifiedname>KWin::timestampRow</qualifiedname>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/debug_console.cpp" line="78" column="16" bodyfile="kwin/src/debug_console.cpp" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aef319a978a0c8701188c7395cdcb5e9f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::timestampRowUsec</definition>
        <argsstring>(std::chrono::microseconds timestamp)</argsstring>
        <name>timestampRowUsec</name>
        <qualifiedname>KWin::timestampRowUsec</qualifiedname>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/debug_console.cpp" line="83" column="16" bodyfile="kwin/src/debug_console.cpp" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a4362771b7d2e6bfcb518595ff74dd840" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::buttonToString</definition>
        <argsstring>(Qt::MouseButton button)</argsstring>
        <name>buttonToString</name>
        <qualifiedname>KWin::buttonToString</qualifiedname>
        <param>
          <type>Qt::MouseButton</type>
          <declname>button</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/debug_console.cpp" line="88" column="16" bodyfile="kwin/src/debug_console.cpp" bodystart="88" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a8f8dd2515f95d4e0147cdf8dc12174bd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::deviceRow</definition>
        <argsstring>(InputDevice *device)</argsstring>
        <name>deviceRow</name>
        <qualifiedname>KWin::deviceRow</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_input_device" kindref="compound">InputDevice</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/debug_console.cpp" line="150" column="16" bodyfile="kwin/src/debug_console.cpp" bodystart="150" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a4711b3d10c1c5fdf8c4d7e6286b495a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::buttonsToString</definition>
        <argsstring>(Qt::MouseButtons buttons)</argsstring>
        <name>buttonsToString</name>
        <qualifiedname>KWin::buttonsToString</qualifiedname>
        <param>
          <type>Qt::MouseButtons</type>
          <declname>buttons</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/debug_console.cpp" line="158" column="16" bodyfile="kwin/src/debug_console.cpp" bodystart="158" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a14845e1bc302114d94bd34f523624ddb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::sourceString</definition>
        <argsstring>(const AbstractDataSource *const source)</argsstring>
        <name>sourceString</name>
        <qualifiedname>KWin::sourceString</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_abstract_data_source" kindref="compound">AbstractDataSource</ref> *const</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/debug_console.cpp" line="597" column="16" bodyfile="kwin/src/debug_console.cpp" bodystart="597" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a08a227cf8ed92c24a322628dd1b8ac18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>QString</type>
        <definition>QString KWin::keymapComponentToString</definition>
        <argsstring>(xkb_keymap *map, const T &amp;count, std::function&lt; const char *(xkb_keymap *, T)&gt; f)</argsstring>
        <name>keymapComponentToString</name>
        <qualifiedname>KWin::keymapComponentToString</qualifiedname>
        <param>
          <type>xkb_keymap *</type>
          <declname>map</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>count</declname>
        </param>
        <param>
          <type>std::function&lt; const char *(xkb_keymap *, T)&gt;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/debug_console.cpp" line="708" column="9" bodyfile="kwin/src/debug_console.cpp" bodystart="708" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1af6107c294e0c4c15a11473ce0ffc1a46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>QString</type>
        <definition>QString KWin::stateActiveComponents</definition>
        <argsstring>(xkb_state *state, const T &amp;count, std::function&lt; int(xkb_state *, T)&gt; f, std::function&lt; const char *(xkb_keymap *, T)&gt; name)</argsstring>
        <name>stateActiveComponents</name>
        <qualifiedname>KWin::stateActiveComponents</qualifiedname>
        <param>
          <type>xkb_state *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>count</declname>
        </param>
        <param>
          <type>std::function&lt; int(xkb_state *, T)&gt;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>std::function&lt; const char *(xkb_keymap *, T)&gt;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/debug_console.cpp" line="719" column="9" bodyfile="kwin/src/debug_console.cpp" bodystart="719" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ac3875f74d5075aed5660100b826bf610" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>static T * KWin::windowForIndex</definition>
        <argsstring>(const QModelIndex &amp;index, const QList&lt; T * &gt; &amp;windows, int id)</argsstring>
        <name>windowForIndex</name>
        <qualifiedname>KWin::windowForIndex</qualifiedname>
        <param>
          <type>const QModelIndex &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const QList&lt; T * &gt; &amp;</type>
          <declname>windows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/debug_console.cpp" line="1324" column="10" bodyfile="kwin/src/debug_console.cpp" bodystart="1324" bodyend="1331"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1affd2a4416b98d59a15f9e06ba537440a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArray</type>
        <definition>static QByteArray KWin::readData</definition>
        <argsstring>(int fd)</argsstring>
        <name>readData</name>
        <qualifiedname>KWin::readData</qualifiedname>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/debug_console.cpp" line="1529" column="19" bodyfile="kwin/src/debug_console.cpp" bodystart="1529" bodyend="1557"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a6b030ccc7747efce4f92af57ee9c878d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QDebug</type>
        <definition>QDebug KWin::operator&lt;&lt;</definition>
        <argsstring>(QDebug dbg, const KWin::AniData &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>KWin::operator&lt;&lt;</qualifiedname>
        <param>
          <type>QDebug</type>
          <declname>dbg</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_ani_data" kindref="compound">KWin::AniData</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/anidata.cpp" line="17" column="1" bodyfile="kwin/src/effect/anidata.cpp" bodystart="17" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aef52889cc282fe0df297c45e328dbfba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::attributeString</definition>
        <argsstring>(KWin::AnimationEffect::Attribute attribute)</argsstring>
        <name>attributeString</name>
        <qualifiedname>KWin::attributeString</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895" kindref="member">KWin::AnimationEffect::Attribute</ref></type>
          <declname>attribute</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/anidata.cpp" line="74" column="16" bodyfile="kwin/src/effect/anidata.cpp" bodystart="74" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a088541cde33782969c7e272397a1d3e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QDebug</type>
        <definition>QDebug KWin::operator&lt;&lt;</definition>
        <argsstring>(QDebug dbg, const KWin::FPx2 &amp;fpx2)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>KWin::operator&lt;&lt;</qualifiedname>
        <param>
          <type>QDebug</type>
          <declname>dbg</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">KWin::FPx2</ref> &amp;</type>
          <declname>fpx2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.cpp" line="26" column="1" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="26" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1adcab21644acee9df1dbc6d1323fdc77c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>static qreal KWin::xCoord</definition>
        <argsstring>(const QRectF &amp;r, int flag)</argsstring>
        <name>xCoord</name>
        <qualifiedname>KWin::xCoord</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.cpp" line="422" column="14" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="422" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a91f48d2d775aaa3a04a0b5b9f5e3386b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>static qreal KWin::yCoord</definition>
        <argsstring>(const QRectF &amp;r, int flag)</argsstring>
        <name>yCoord</name>
        <qualifiedname>KWin::yCoord</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.cpp" line="433" column="14" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="433" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a13ab82b2356715fdfc22d37dce3f34f3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>static float KWin::geometryCompensation</definition>
        <argsstring>(int flags, float v)</argsstring>
        <name>geometryCompensation</name>
        <qualifiedname>KWin::geometryCompensation</qualifiedname>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.cpp" line="490" column="21" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="490" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a64fc9b432b39cb94be5da97a2b935dfa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float KWin::fixOvershoot</definition>
        <argsstring>(float f, const AniData &amp;d, short int dir, float s=1.1)</argsstring>
        <name>fixOvershoot</name>
        <qualifiedname>KWin::fixOvershoot</qualifiedname>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_ani_data" kindref="compound">AniData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>short int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>s</declname>
          <defval>1.1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.cpp" line="797" column="14" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="797" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a935e705be6b8e73ffe7f2f8efd2e1504" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1a8852f83038eda36bc255d8f5f3baae05" kindref="member">PinchDirection</ref></type>
        <definition>static PinchDirection KWin::opposite</definition>
        <argsstring>(PinchDirection direction)</argsstring>
        <name>opposite</name>
        <qualifiedname>KWin::opposite</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a8852f83038eda36bc255d8f5f3baae05" kindref="member">PinchDirection</ref></type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecttogglablestate.cpp" line="163" column="23" bodyfile="kwin/src/effect/effecttogglablestate.cpp" bodystart="163" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a1667e3aa0021b4d4dcbeeb8ebb2bbabd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1ab2206ebabcc9101a43b58473495efd03" kindref="member">SwipeDirection</ref></type>
        <definition>static SwipeDirection KWin::opposite</definition>
        <argsstring>(SwipeDirection direction)</argsstring>
        <name>opposite</name>
        <qualifiedname>KWin::opposite</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1ab2206ebabcc9101a43b58473495efd03" kindref="member">SwipeDirection</ref></type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effecttogglablestate.cpp" line="174" column="23" bodyfile="kwin/src/effect/effecttogglablestate.cpp" bodystart="174" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a88e8cac103073220209a5538feb9eccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>QList&lt; <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> * &gt;</type>
        <definition>QList&lt; EffectWindow * &gt; KWin::getMainWindows</definition>
        <argsstring>(T *c)</argsstring>
        <name>getMainWindows</name>
        <qualifiedname>KWin::getMainWindows</qualifiedname>
        <param>
          <type>T *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.cpp" line="426" column="7" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="426" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a353a67da72ee8353efe57b5793110735" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9" kindref="member">MaximizeMode</ref></type>
        <definition>MaximizeMode KWin::operator^</definition>
        <argsstring>(MaximizeMode m1, MaximizeMode m2)</argsstring>
        <name>operator^</name>
        <qualifiedname>KWin::operator^</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9" kindref="member">MaximizeMode</ref></type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9" kindref="member">MaximizeMode</ref></type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="68" column="21" bodyfile="kwin/src/effect/globals.h" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a89871ff7847270ded230a4948818c2e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>QuickTileMode</type>
        <definition>QuickTileMode KWin::operator~</definition>
        <argsstring>(QuickTileFlag flag)</argsstring>
        <name>operator~</name>
        <qualifiedname>KWin::operator~</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a7d8a57e0b5454d5598726350206b4fdf" kindref="member">QuickTileFlag</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="208" column="22" bodyfile="kwin/src/effect/globals.h" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a0655524c1f1ba8dbb2cf16a1e4b9bb97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KWIN_EXPORT QRect</type>
        <definition>KWIN_EXPORT QRect KWin::infiniteRegion</definition>
        <argsstring>()</argsstring>
        <name>infiniteRegion</name>
        <qualifiedname>KWin::infiniteRegion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Infinite region (i.e. a special region type saying that everything needs to be painted). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="253" column="26" bodyfile="kwin/src/effect/globals.h" bodystart="253" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ad2cb4485a63133f92ea417a626f28b6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KWIN_EXPORT QRectF</type>
        <definition>KWIN_EXPORT QRectF KWin::scaledRect</definition>
        <argsstring>(const QRectF &amp;rect, qreal scale)</argsstring>
        <name>scaledRect</name>
        <qualifiedname>KWin::scaledRect</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scale a rect by a scalar. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="262" column="27" bodyfile="kwin/src/effect/globals.h" bodystart="262" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1add6f40cafe6fcf795dcbed41793036ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KWIN_EXPORT QVector2D</type>
        <definition>KWIN_EXPORT QVector2D KWin::roundVector</definition>
        <argsstring>(const QVector2D &amp;input)</argsstring>
        <name>roundVector</name>
        <qualifiedname>KWin::roundVector</qualifiedname>
        <param>
          <type>const QVector2D &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Round a vector to nearest integer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="270" column="30" bodyfile="kwin/src/effect/globals.h" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ac2130505c2734e5f398d4ad54d7b7558" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KWIN_EXPORT QPoint</type>
        <definition>KWIN_EXPORT QPoint KWin::flooredPoint</definition>
        <argsstring>(const QPointF &amp;point)</argsstring>
        <name>flooredPoint</name>
        <qualifiedname>KWin::flooredPoint</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a QPointF to a QPoint by flooring instead of rounding.</para>
<para>By default, QPointF::toPoint() rounds which can cause problems in certain cases. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="281" column="27" bodyfile="kwin/src/effect/globals.h" bodystart="281" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ab42eeffcae47c7b4ab19b2c93a0960c2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::exclusiveContains</definition>
        <argsstring>(const QRectF &amp;rect, const QPointF &amp;point)</argsstring>
        <name>exclusiveContains</name>
        <qualifiedname>KWin::exclusiveContains</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if <emphasis>point</emphasis> is contained in <emphasis>rect</emphasis>, including the left and top borders but excluding the right and bottom borders </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="290" column="20" bodyfile="kwin/src/effect/globals.h" bodystart="290" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a6700d0c2e3a9e127a5138e0c8a8f6fde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::Q_ENUM_NS</definition>
        <argsstring>(PresentationMode)</argsstring>
        <name>Q_ENUM_NS</name>
        <qualifiedname>KWin::Q_ENUM_NS</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a5bac5dc1ad9b6deedfa5c46c4e432767" kindref="member">PresentationMode</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="301" column="1" declfile="kwin/src/effect/globals.h" declline="301" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ada4fc1407fe462c182a1b806c611fe45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::Q_ENUM_NS</definition>
        <argsstring>(ContentType)</argsstring>
        <name>Q_ENUM_NS</name>
        <qualifiedname>KWin::Q_ENUM_NS</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1ae822402a75b1dbd6c2afc72f87fa60a6" kindref="member">ContentType</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="309" column="1" declfile="kwin/src/effect/globals.h" declline="309" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ab9ad370628c1aa6ad63c1168f0af96b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::Q_ENUM_NS</definition>
        <argsstring>(VrrPolicy)</argsstring>
        <name>Q_ENUM_NS</name>
        <qualifiedname>KWin::Q_ENUM_NS</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a30ebd92a502242a9e136f070cbf9192b" kindref="member">VrrPolicy</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="316" column="1" declfile="kwin/src/effect/globals.h" declline="316" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a74e1a93ca1cc94f345086377c515cca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::Q_ENUM_NS</definition>
        <argsstring>(PresentationModeHint)</argsstring>
        <name>Q_ENUM_NS</name>
        <qualifiedname>KWin::Q_ENUM_NS</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a9b2c7d76c9b9021af62d089e13e456d6" kindref="member">PresentationModeHint</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="322" column="1" declfile="kwin/src/effect/globals.h" declline="322" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a416d3c2704f28245ed3b0cc3e015c85b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::Q_ENUM_NS</definition>
        <argsstring>(WindowType)</argsstring>
        <name>Q_ENUM_NS</name>
        <qualifiedname>KWin::Q_ENUM_NS</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7" kindref="member">WindowType</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/globals.h" line="417" column="1" declfile="kwin/src/effect/globals.h" declline="417" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KWIN_EXPORT xcb_connection_t *</type>
        <definition>KWIN_EXPORT xcb_connection_t * KWin::connection</definition>
        <argsstring>()</argsstring>
        <name>connection</name>
        <qualifiedname>KWin::connection</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/xcb.h" line="24" column="37" bodyfile="kwin/src/effect/xcb.h" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a1c718478bc9788d32a9614c371aa754b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KWIN_EXPORT xcb_window_t</type>
        <definition>KWIN_EXPORT xcb_window_t KWin::rootWindow</definition>
        <argsstring>()</argsstring>
        <name>rootWindow</name>
        <qualifiedname>KWin::rootWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/xcb.h" line="29" column="33" bodyfile="kwin/src/effect/xcb.h" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a71cc78d22f170a8c6639a9d83694fb8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KWIN_EXPORT xcb_timestamp_t</type>
        <definition>KWIN_EXPORT xcb_timestamp_t KWin::xTime</definition>
        <argsstring>()</argsstring>
        <name>xTime</name>
        <qualifiedname>KWin::xTime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/xcb.h" line="34" column="36" bodyfile="kwin/src/effect/xcb.h" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a94fae045fbb1d09b05e20f988ed00f66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void KWIN_EXPORT</type>
        <definition>void KWIN_EXPORT KWin::grabXServer</definition>
        <argsstring>()</argsstring>
        <name>grabXServer</name>
        <qualifiedname>KWin::grabXServer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/xcb.h" line="39" column="18" declfile="kwin/src/effect/xcb.h" declline="39" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ae271886202de6f5e3a7330d039fa7b70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void KWIN_EXPORT</type>
        <definition>void KWIN_EXPORT KWin::ungrabXServer</definition>
        <argsstring>()</argsstring>
        <name>ungrabXServer</name>
        <qualifiedname>KWin::ungrabXServer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/xcb.h" line="40" column="18" declfile="kwin/src/effect/xcb.h" declline="40" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aa9408372d2985c2b928649d7c18eaf21" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>xcb_window_t</type>
        <definition>static xcb_window_t KWin::findEventWindow</definition>
        <argsstring>(xcb_generic_event_t *event)</argsstring>
        <name>findEventWindow</name>
        <qualifiedname>KWin::findEventWindow</qualifiedname>
        <param>
          <type>xcb_generic_event_t *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/events.cpp" line="45" column="21" bodyfile="kwin/src/events.cpp" bodystart="45" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ae9abc7fc48a7a591d73a6e6b7d5db4c1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Qt::MouseButton</type>
        <definition>static Qt::MouseButton KWin::x11ToQtMouseButton</definition>
        <argsstring>(int button)</argsstring>
        <name>x11ToQtMouseButton</name>
        <qualifiedname>KWin::x11ToQtMouseButton</qualifiedname>
        <param>
          <type>int</type>
          <declname>button</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/events.cpp" line="109" column="24" bodyfile="kwin/src/events.cpp" bodystart="109" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ab5d04701b3cf578f01676355f7e4671d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ShortcutKind</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool KWin::match</definition>
        <argsstring>(QList&lt; GlobalShortcut &gt; &amp;shortcuts, Args... args)</argsstring>
        <name>match</name>
        <qualifiedname>KWin::match</qualifiedname>
        <param>
          <type>QList&lt; <ref refid="class_k_win_1_1_global_shortcut" kindref="compound">GlobalShortcut</ref> &gt; &amp;</type>
          <declname>shortcuts</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/globalshortcuts.cpp" line="241" column="6" bodyfile="kwin/src/globalshortcuts.cpp" bodystart="241" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1abe3b7aff8429960f17d4fd0043dbcfd7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_abstract_drop_handler" kindref="compound">AbstractDropHandler</ref> *</type>
        <definition>static AbstractDropHandler * KWin::dropHandler</definition>
        <argsstring>(Window *window)</argsstring>
        <name>dropHandler</name>
        <qualifiedname>KWin::dropHandler</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input.cpp" line="2499" column="28" bodyfile="kwin/src/input.cpp" bodystart="2499" bodyend="2517"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_input_redirection" kindref="compound">InputRedirection</ref> *</type>
        <definition>InputRedirection * KWin::input</definition>
        <argsstring>()</argsstring>
        <name>input</name>
        <qualifiedname>KWin::input</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input.h" line="530" column="25" bodyfile="kwin/src/input.h" bodystart="530" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a7f15fc2a9766d6d683f89ede13cfc014" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; quint32 &gt;</type>
        <definition>static std::vector&lt; quint32 &gt; KWin::textToKey</definition>
        <argsstring>(const QString &amp;text)</argsstring>
        <name>textToKey</name>
        <qualifiedname>KWin::textToKey</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/inputmethod.cpp" line="57" column="20" bodyfile="kwin/src/inputmethod.cpp" bodystart="57" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a0b9ef47a6d1bbf97d8afa5211c0ee9d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>quint32</type>
        <definition>static quint32 KWin::keysymToKeycode</definition>
        <argsstring>(quint32 sym)</argsstring>
        <name>keysymToKeycode</name>
        <qualifiedname>KWin::keysymToKeycode</qualifiedname>
        <param>
          <type>quint32</type>
          <declname>sym</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/inputmethod.cpp" line="556" column="16" bodyfile="kwin/src/inputmethod.cpp" bodystart="556" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1abb827030097e0cca8b9528b36abd7ed7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::translatedCategory</definition>
        <argsstring>(const QString &amp;category)</argsstring>
        <name>translatedCategory</name>
        <qualifiedname>KWin::translatedCategory</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>category</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/kcms/common/effectsmodel.cpp" line="33" column="16" bodyfile="kwin/src/kcms/common/effectsmodel.cpp" bodystart="33" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a4f4b60fa99ff273bfa4c0eeeaa09aba9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_effects_model_1ac687c90f93d707d51a0af03a46017ad1" kindref="member">EffectsModel::Status</ref></type>
        <definition>static EffectsModel::Status KWin::effectStatus</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>effectStatus</name>
        <qualifiedname>KWin::effectStatus</qualifiedname>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/kcms/common/effectsmodel.cpp" line="64" column="29" bodyfile="kwin/src/kcms/common/effectsmodel.cpp" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aa646f944b69b48a3ceee3fff47f07fd8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const QString</type>
        <definition>static const QString KWin::s_serviceName</definition>
        <argsstring>(QStringLiteral(&quot;org.kde.KWin&quot;))</argsstring>
        <name>s_serviceName</name>
        <qualifiedname>KWin::s_serviceName</qualifiedname>
        <param>
          <type>QStringLiteral(&quot;org.kde.KWin&quot;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/kcms/desktop/desktopsmodel.cpp" line="30" column="22" declfile="kwin/src/kcms/desktop/desktopsmodel.cpp" declline="30" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a13f81ab078e6b1d2911b8173df78a827" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const QString</type>
        <definition>static const QString KWin::s_virtualDesktopsInterface</definition>
        <argsstring>(QStringLiteral(&quot;org.kde.KWin.VirtualDesktopManager&quot;))</argsstring>
        <name>s_virtualDesktopsInterface</name>
        <qualifiedname>KWin::s_virtualDesktopsInterface</qualifiedname>
        <param>
          <type>QStringLiteral(&quot;org.kde.KWin.VirtualDesktopManager&quot;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/kcms/desktop/desktopsmodel.cpp" line="31" column="22" declfile="kwin/src/kcms/desktop/desktopsmodel.cpp" declline="31" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a9af6acd22b86c2e45d0f81b7247b58d1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const QString</type>
        <definition>static const QString KWin::s_virtDesktopsPath</definition>
        <argsstring>(QStringLiteral(&quot;/VirtualDesktopManager&quot;))</argsstring>
        <name>s_virtDesktopsPath</name>
        <qualifiedname>KWin::s_virtDesktopsPath</qualifiedname>
        <param>
          <type>QStringLiteral(&quot;/VirtualDesktopManager&quot;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/kcms/desktop/desktopsmodel.cpp" line="32" column="22" declfile="kwin/src/kcms/desktop/desktopsmodel.cpp" declline="32" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a4907d8865661438a017e5ecdf5ff6b6d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const QString</type>
        <definition>static const QString KWin::s_fdoPropertiesInterface</definition>
        <argsstring>(QStringLiteral(&quot;org.freedesktop.DBus.Properties&quot;))</argsstring>
        <name>s_fdoPropertiesInterface</name>
        <qualifiedname>KWin::s_fdoPropertiesInterface</qualifiedname>
        <param>
          <type>QStringLiteral(&quot;org.freedesktop.DBus.Properties&quot;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/kcms/desktop/desktopsmodel.cpp" line="33" column="22" declfile="kwin/src/kcms/desktop/desktopsmodel.cpp" declline="33" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a8ce21b5b8a7b9d2915845efc717537d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::K_PLUGIN_CLASS_WITH_JSON</definition>
        <argsstring>(KCMKWinRules, &quot;kcm_kwinrules.json&quot;)</argsstring>
        <name>K_PLUGIN_CLASS_WITH_JSON</name>
        <qualifiedname>KWin::K_PLUGIN_CLASS_WITH_JSON</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_k_c_m_k_win_rules" kindref="compound">KCMKWinRules</ref></type>
        </param>
        <param>
          <type>&quot;kcm_kwinrules.json&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/kcms/rules/kcmrules.cpp" line="477" column="1" declfile="kwin/src/kcms/rules/kcmrules.cpp" declline="477" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a19eea826cb25dc135e61db39fd77d2f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QScreen *</type>
        <definition>static QScreen * KWin::screenFromWidget</definition>
        <argsstring>(const QWidget *widget)</argsstring>
        <name>screenFromWidget</name>
        <qualifiedname>KWin::screenFromWidget</qualifiedname>
        <param>
          <type>const QWidget *</type>
          <declname>widget</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/kcms/screenedges/monitor.cpp" line="28" column="16" bodyfile="kwin/src/kcms/screenedges/monitor.cpp" bodystart="28" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a6e51fc2775c095997a32c7d8c1d4f8dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::translatedLayout</definition>
        <argsstring>(const QString &amp;layout)</argsstring>
        <name>translatedLayout</name>
        <qualifiedname>KWin::translatedLayout</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>layout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/keyboard_layout.cpp" line="35" column="16" bodyfile="kwin/src/keyboard_layout.cpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a251a8e11b77dc50610ab11513d860603" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QDBusArgument &amp;</type>
        <definition>QDBusArgument &amp; KWin::operator&lt;&lt;</definition>
        <argsstring>(QDBusArgument &amp;argument, const KeyboardLayoutDBusInterface::LayoutNames &amp;layoutNames)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>KWin::operator&lt;&lt;</qualifiedname>
        <param>
          <type>QDBusArgument &amp;</type>
          <declname>argument</declname>
        </param>
        <param>
          <type>const <ref refid="struct_k_win_1_1_keyboard_layout_d_bus_interface_1_1_layout_names" kindref="compound">KeyboardLayoutDBusInterface::LayoutNames</ref> &amp;</type>
          <declname>layoutNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/keyboard_layout.cpp" line="247" column="1" bodyfile="kwin/src/keyboard_layout.cpp" bodystart="247" bodyend="253" declfile="kwin/src/keyboard_layout.h" declline="103" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ac07d9d5259de09bce1a018b53927814b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const QDBusArgument &amp;</type>
        <definition>const QDBusArgument &amp; KWin::operator&gt;&gt;</definition>
        <argsstring>(const QDBusArgument &amp;argument, KeyboardLayoutDBusInterface::LayoutNames &amp;layoutNames)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>KWin::operator&gt;&gt;</qualifiedname>
        <param>
          <type>const QDBusArgument &amp;</type>
          <declname>argument</declname>
        </param>
        <param>
          <type><ref refid="struct_k_win_1_1_keyboard_layout_d_bus_interface_1_1_layout_names" kindref="compound">KeyboardLayoutDBusInterface::LayoutNames</ref> &amp;</type>
          <declname>layoutNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/keyboard_layout.cpp" line="255" column="21" bodyfile="kwin/src/keyboard_layout.cpp" bodystart="255" bodyend="261" declfile="kwin/src/keyboard_layout.h" declline="104" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a3e68dfe743645e38618fd3a53b43432b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7b" kindref="member">Layer</ref></type>
        <definition>static Layer KWin::computeLayer</definition>
        <argsstring>(const Window *window)</argsstring>
        <name>computeLayer</name>
        <qualifiedname>KWin::computeLayer</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/layers.cpp" line="276" column="14" bodyfile="kwin/src/layers.cpp" bodystart="276" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a2244bb821fceb43427907897ef5d38d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::adjustWorkArea</definition>
        <argsstring>(const LayerSurfaceV1Interface *shellSurface, QRect *workArea)</argsstring>
        <name>adjustWorkArea</name>
        <qualifiedname>KWin::adjustWorkArea</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_layer_surface_v1_interface" kindref="compound">LayerSurfaceV1Interface</ref> *</type>
          <declname>shellSurface</declname>
        </param>
        <param>
          <type>QRect *</type>
          <declname>workArea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/layershellv1integration.cpp" line="66" column="13" bodyfile="kwin/src/layershellv1integration.cpp" bodystart="66" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a745731b60cd37ff4dd59b148fee4400a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::rearrangeLayer</definition>
        <argsstring>(const QList&lt; LayerShellV1Window * &gt; &amp;windows, QRect *workArea, LayerSurfaceV1Interface::Layer layer, bool exclusive)</argsstring>
        <name>rearrangeLayer</name>
        <qualifiedname>KWin::rearrangeLayer</qualifiedname>
        <param>
          <type>const QList&lt; <ref refid="class_k_win_1_1_layer_shell_v1_window" kindref="compound">LayerShellV1Window</ref> * &gt; &amp;</type>
          <declname>windows</declname>
        </param>
        <param>
          <type>QRect *</type>
          <declname>workArea</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_layer_surface_v1_interface_1a51877e52eb2c4ff1ad3400b5038a8a64" kindref="member">LayerSurfaceV1Interface::Layer</ref></type>
          <declname>layer</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>exclusive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/layershellv1integration.cpp" line="84" column="13" bodyfile="kwin/src/layershellv1integration.cpp" bodystart="84" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a48662ec8e72ff119105a57010154a9ef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_layer_shell_v1_window" kindref="compound">LayerShellV1Window</ref> * &gt;</type>
        <definition>static QList&lt; LayerShellV1Window * &gt; KWin::windowsForOutput</definition>
        <argsstring>(Output *output)</argsstring>
        <name>windowsForOutput</name>
        <qualifiedname>KWin::windowsForOutput</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/layershellv1integration.cpp" line="165" column="14" bodyfile="kwin/src/layershellv1integration.cpp" bodystart="165" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a0f80674f8272dabc583011ea7febaefc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::rearrangeOutput</definition>
        <argsstring>(Output *output)</argsstring>
        <name>rearrangeOutput</name>
        <qualifiedname>KWin::rearrangeOutput</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/layershellv1integration.cpp" line="181" column="13" bodyfile="kwin/src/layershellv1integration.cpp" bodystart="181" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a4450bde627371343fa0052a54e6bb818" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7" kindref="member">WindowType</ref></type>
        <definition>static WindowType KWin::scopeToType</definition>
        <argsstring>(const QString &amp;scope)</argsstring>
        <name>scopeToType</name>
        <qualifiedname>KWin::scopeToType</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>scope</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/layershellv1window.cpp" line="22" column="19" bodyfile="kwin/src/layershellv1window.cpp" bodystart="22" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ac07e852636a3e1271d947c8b36ebc816" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_platform_cursor_image" kindref="compound">PlatformCursorImage</ref></type>
        <definition>static PlatformCursorImage KWin::grabCursorOpenGL</definition>
        <argsstring>()</argsstring>
        <name>grabCursorOpenGL</name>
        <qualifiedname>KWin::grabCursorOpenGL</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/main.cpp" line="644" column="28" bodyfile="kwin/src/main.cpp" bodystart="644" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aee08856fcc7b856d99f3327eb16eafb3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_platform_cursor_image" kindref="compound">PlatformCursorImage</ref></type>
        <definition>static PlatformCursorImage KWin::grabCursorSoftware</definition>
        <argsstring>()</argsstring>
        <name>grabCursorSoftware</name>
        <qualifiedname>KWin::grabCursorSoftware</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/main.cpp" line="673" column="28" bodyfile="kwin/src/main.cpp" bodystart="673" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ac0a6db55c57fdaf0dbfe5ad5cac656c3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_application" kindref="compound">Application</ref> *</type>
        <definition>static Application * KWin::kwinApp</definition>
        <argsstring>()</argsstring>
        <name>kwinApp</name>
        <qualifiedname>KWin::kwinApp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/main.h" line="424" column="27" bodyfile="kwin/src/main.h" bodystart="424" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a09bc5fc7f605deb76d4b5d4cc5c10433" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::bumpNofileLimit</definition>
        <argsstring>()</argsstring>
        <name>bumpNofileLimit</name>
        <qualifiedname>KWin::bumpNofileLimit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/main_wayland.cpp" line="72" column="13" bodyfile="kwin/src/main_wayland.cpp" bodystart="72" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a82cbe4f7f4754c54597b4a63f65a8bed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::restoreNofileLimit</definition>
        <argsstring>()</argsstring>
        <name>restoreNofileLimit</name>
        <qualifiedname>KWin::restoreNofileLimit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/main_wayland.cpp" line="90" column="13" bodyfile="kwin/src/main_wayland.cpp" bodystart="90" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a5bd3095f8d463c5842a11bf3e70a344b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t KWin::qtMouseButtonToButton</definition>
        <argsstring>(Qt::MouseButton button)</argsstring>
        <name>qtMouseButtonToButton</name>
        <qualifiedname>KWin::qtMouseButtonToButton</qualifiedname>
        <param>
          <type>Qt::MouseButton</type>
          <declname>button</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/mousebuttons.cpp" line="34" column="10" bodyfile="kwin/src/mousebuttons.cpp" bodystart="34" bodyend="37" declfile="kwin/src/mousebuttons.h" declline="14" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1af6793b7f4fe2ec8bb24230b47c9dc66b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Qt::MouseButton</type>
        <definition>Qt::MouseButton KWin::buttonToQtMouseButton</definition>
        <argsstring>(uint32_t button)</argsstring>
        <name>buttonToQtMouseButton</name>
        <qualifiedname>KWin::buttonToQtMouseButton</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>button</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/mousebuttons.cpp" line="39" column="17" bodyfile="kwin/src/mousebuttons.cpp" bodystart="39" bodyend="48" declfile="kwin/src/mousebuttons.h" declline="15" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a00237bcdba9aaa1c88184bbf87712ae8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_root_info" kindref="compound">RootInfo</ref> *</type>
        <definition>RootInfo * KWin::rootInfo</definition>
        <argsstring>()</argsstring>
        <name>rootInfo</name>
        <qualifiedname>KWin::rootInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/netinfo.h" line="65" column="17" bodyfile="kwin/src/netinfo.h" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aacba2017a2e9636eed04c7de7417ae6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>QDebug</type>
        <definition>QDebug KWin::operator&lt;&lt;</definition>
        <argsstring>(QDebug dbg, const AbstractOpenGLContextAttributeBuilder *attribs)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>KWin::operator&lt;&lt;</qualifiedname>
        <param>
          <type>QDebug</type>
          <declname>dbg</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_abstract_open_g_l_context_attribute_builder" kindref="compound">AbstractOpenGLContextAttributeBuilder</ref> *</type>
          <declname>attribs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/abstract_opengl_context_attribute_builder.h" line="127" column="8" bodyfile="kwin/src/opengl/abstract_opengl_context_attribute_builder.h" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ac63abe409b446b47af25afbd307c156c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QSet&lt; QByteArray &gt;</type>
        <definition>static QSet&lt; QByteArray &gt; KWin::getExtensions</definition>
        <argsstring>(EglContext *context)</argsstring>
        <name>getExtensions</name>
        <qualifiedname>KWin::getExtensions</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_egl_context" kindref="compound">EglContext</ref> *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/eglcontext.cpp" line="51" column="13" bodyfile="kwin/src/opengl/eglcontext.cpp" bodystart="51" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a8299610161a7e37188ddc3e649e7b732" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::checkTextureSwizzleSupport</definition>
        <argsstring>(EglContext *context)</argsstring>
        <name>checkTextureSwizzleSupport</name>
        <qualifiedname>KWin::checkTextureSwizzleSupport</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_egl_context" kindref="compound">EglContext</ref> *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/eglcontext.cpp" line="70" column="13" bodyfile="kwin/src/opengl/eglcontext.cpp" bodystart="70" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a79f7884ec83a4e0abaf04a960b1d7c8f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::checkTextureStorageSupport</definition>
        <argsstring>(EglContext *context)</argsstring>
        <name>checkTextureStorageSupport</name>
        <qualifiedname>KWin::checkTextureStorageSupport</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_egl_context" kindref="compound">EglContext</ref> *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/eglcontext.cpp" line="79" column="13" bodyfile="kwin/src/opengl/eglcontext.cpp" bodystart="79" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a4f46bc333f07dba24f801a674451469d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::checkIndexedQuads</definition>
        <argsstring>(EglContext *context)</argsstring>
        <name>checkIndexedQuads</name>
        <qualifiedname>KWin::checkIndexedQuads</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_egl_context" kindref="compound">EglContext</ref> *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/eglcontext.cpp" line="88" column="13" bodyfile="kwin/src/opengl/eglcontext.cpp" bodystart="88" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1abf129498da65a8568c193d2e228ba153" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1a562c4f858823cac192b96aa2d532ead7" kindref="member">eglFuncPtr</ref></type>
        <definition>static eglFuncPtr KWin::getProcAddress</definition>
        <argsstring>(const char *name)</argsstring>
        <name>getProcAddress</name>
        <qualifiedname>KWin::getProcAddress</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/eglcontext.cpp" line="102" column="19" bodyfile="kwin/src/opengl/eglcontext.cpp" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a3793380b0db9b85accd6785038558e0c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::shouldUseOpenGLES</definition>
        <argsstring>()</argsstring>
        <name>shouldUseOpenGLES</name>
        <qualifiedname>KWin::shouldUseOpenGLES</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/eglcontext.cpp" line="210" column="20" bodyfile="kwin/src/opengl/eglcontext.cpp" bodystart="210" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a33aab62d7d89421a6c08188a9e7011e8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; dev_t &gt;</type>
        <definition>static std::optional&lt; dev_t &gt; KWin::devIdForFileName</definition>
        <argsstring>(const QString &amp;path)</argsstring>
        <name>devIdForFileName</name>
        <qualifiedname>KWin::devIdForFileName</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/egldisplay.cpp" line="77" column="22" bodyfile="kwin/src/opengl/egldisplay.cpp" bodystart="77" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a900cbefed303e8606ce894a07f62f33b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::checkExtension</definition>
        <argsstring>(const QByteArrayView extensions, const QByteArrayView extension)</argsstring>
        <name>checkExtension</name>
        <qualifiedname>KWin::checkExtension</qualifiedname>
        <param>
          <type>const QByteArrayView</type>
          <declname>extensions</declname>
        </param>
        <param>
          <type>const QByteArrayView</type>
          <declname>extension</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/egldisplay.cpp" line="128" column="13" bodyfile="kwin/src/opengl/egldisplay.cpp" bodystart="128" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1af08a3d967c24e82077fc0b989e153a62" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::formatFramebufferStatus</definition>
        <argsstring>(GLenum status)</argsstring>
        <name>formatFramebufferStatus</name>
        <qualifiedname>KWin::formatFramebufferStatus</qualifiedname>
        <param>
          <type>GLenum</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glframebuffer.cpp" line="42" column="16" bodyfile="kwin/src/opengl/glframebuffer.cpp" bodystart="42" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a922930bbce206049d07bfd00bb186f73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void KWIN_EXPORT</type>
        <definition>void KWin::cleanupGL</definition>
        <argsstring>()</argsstring>
        <name>cleanupGL</name>
        <qualifiedname>KWin::cleanupGL</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glframebuffer.h" line="26" column="18" declfile="kwin/src/opengl/glframebuffer.h" declline="26" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ad924d475eba98563a4e9b54cfd1a4e76" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::extract</definition>
        <argsstring>(const QString &amp;text, const QString &amp;pattern)</argsstring>
        <name>extract</name>
        <qualifiedname>KWin::extract</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>pattern</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.cpp" line="28" column="16" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="28" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a5483b4f1d2cdeaffc5cc3bfcfe4fac8d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4" kindref="member">ChipClass</ref></type>
        <definition>static ChipClass KWin::detectRadeonClass</definition>
        <argsstring>(QByteArrayView chipset)</argsstring>
        <name>detectRadeonClass</name>
        <qualifiedname>KWin::detectRadeonClass</qualifiedname>
        <param>
          <type>QByteArrayView</type>
          <declname>chipset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.cpp" line="38" column="18" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="38" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1af2866c4ab22510b7a5cabf29e5684720" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4" kindref="member">ChipClass</ref></type>
        <definition>static ChipClass KWin::detectNVidiaClass</definition>
        <argsstring>(const QString &amp;chipset)</argsstring>
        <name>detectNVidiaClass</name>
        <qualifiedname>KWin::detectNVidiaClass</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>chipset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.cpp" line="254" column="18" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="254" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a952ed5414fa536efd5db23efcad9c67d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4" kindref="member">ChipClass</ref></type>
        <definition>static ChipClass KWin::detectNVidiaClass</definition>
        <argsstring>(QByteArrayView chipset)</argsstring>
        <name>detectNVidiaClass</name>
        <qualifiedname>KWin::detectNVidiaClass</qualifiedname>
        <param>
          <type>QByteArrayView</type>
          <declname>chipset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.cpp" line="349" column="25" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="349" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aa81161ff902cc708e68906e7b5655b51" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4" kindref="member">ChipClass</ref></type>
        <definition>static ChipClass KWin::detectIntelClass</definition>
        <argsstring>(QByteArrayView chipset)</argsstring>
        <name>detectIntelClass</name>
        <qualifiedname>KWin::detectIntelClass</qualifiedname>
        <param>
          <type>QByteArrayView</type>
          <declname>chipset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.cpp" line="354" column="18" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="354" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a9fff61ec8ef83da88353315c40cf4e59" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4" kindref="member">ChipClass</ref></type>
        <definition>static ChipClass KWin::detectQualcommClass</definition>
        <argsstring>(QByteArrayView chipClass)</argsstring>
        <name>detectQualcommClass</name>
        <qualifiedname>KWin::detectQualcommClass</qualifiedname>
        <param>
          <type>QByteArrayView</type>
          <declname>chipClass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.cpp" line="448" column="18" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="448" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a3b831e18c62419cc8a98082c09117606" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4" kindref="member">ChipClass</ref></type>
        <definition>static ChipClass KWin::detectPanfrostClass</definition>
        <argsstring>(QByteArrayView chipClass)</argsstring>
        <name>detectPanfrostClass</name>
        <qualifiedname>KWin::detectPanfrostClass</qualifiedname>
        <param>
          <type>QByteArrayView</type>
          <declname>chipClass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.cpp" line="475" column="18" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="475" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a65e3f4b8010db6a19fd9483171fdc059" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4" kindref="member">ChipClass</ref></type>
        <definition>static ChipClass KWin::detectLimaClass</definition>
        <argsstring>(QByteArrayView chipClass)</argsstring>
        <name>detectLimaClass</name>
        <qualifiedname>KWin::detectLimaClass</qualifiedname>
        <param>
          <type>QByteArrayView</type>
          <declname>chipClass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.cpp" line="493" column="18" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="493" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1adbf637848c024d3a60a511983019e792" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4" kindref="member">ChipClass</ref></type>
        <definition>static ChipClass KWin::detectVC4Class</definition>
        <argsstring>(QByteArrayView chipClass)</argsstring>
        <name>detectVC4Class</name>
        <qualifiedname>KWin::detectVC4Class</qualifiedname>
        <param>
          <type>QByteArrayView</type>
          <declname>chipClass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.cpp" line="506" column="18" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="506" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a28ae1a1211674375e4e060a56b7ce980" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1aca7b32504df586657f103cf7fdab06a4" kindref="member">ChipClass</ref></type>
        <definition>static ChipClass KWin::detectV3DClass</definition>
        <argsstring>(QByteArrayView chipClass)</argsstring>
        <name>detectV3DClass</name>
        <qualifiedname>KWin::detectV3DClass</qualifiedname>
        <param>
          <type>QByteArrayView</type>
          <declname>chipClass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glplatform.cpp" line="515" column="18" bodyfile="kwin/src/opengl/glplatform.cpp" bodystart="515" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ae501f426178270ba72c7e178db8100ff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::resolveShaderFilePath</definition>
        <argsstring>(const QString &amp;filePath)</argsstring>
        <name>resolveShaderFilePath</name>
        <qualifiedname>KWin::resolveShaderFilePath</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>filePath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glshadermanager.cpp" line="243" column="16" bodyfile="kwin/src/opengl/glshadermanager.cpp" bodystart="243" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a46787cc17049b403956a276da1e7e5b2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::formatGLError</definition>
        <argsstring>(GLenum err)</argsstring>
        <name>formatGLError</name>
        <qualifiedname>KWin::formatGLError</qualifiedname>
        <param>
          <type>GLenum</type>
          <declname>err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glutils.cpp" line="19" column="16" bodyfile="kwin/src/opengl/glutils.cpp" bodystart="19" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a3116e9a54e9b33f8f0128d15920d6049" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWIN_EXPORT KWin::checkGLError</definition>
        <argsstring>(const char *txt)</argsstring>
        <name>checkGLError</name>
        <qualifiedname>KWin::checkGLError</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>txt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glutils.cpp" line="41" column="6" bodyfile="kwin/src/opengl/glutils.cpp" bodystart="41" bodyend="59" declfile="kwin/src/opengl/glutils.h" declline="29" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a589f408567ff14915728d5c320d281ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T KWin::align</definition>
        <argsstring>(T value, int bytes)</argsstring>
        <name>align</name>
        <qualifiedname>KWin::align</qualifiedname>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glvertexbuffer.cpp" line="31" column="3" bodyfile="kwin/src/opengl/glvertexbuffer.cpp" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a711d1a4e5b28041609c172713123dabc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::deleteAll</definition>
        <argsstring>(std::deque&lt; BufferFence &gt; &amp;fences)</argsstring>
        <name>deleteAll</name>
        <qualifiedname>KWin::deleteAll</qualifiedname>
        <param>
          <type>std::deque&lt; <ref refid="struct_k_win_1_1_buffer_fence" kindref="compound">BufferFence</ref> &gt; &amp;</type>
          <declname>fences</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/opengl/glvertexbuffer.cpp" line="105" column="13" bodyfile="kwin/src/opengl/glvertexbuffer.cpp" bodystart="105" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ae63a45161e094ac8db948df0eafcac3d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::isIrrelevant</definition>
        <argsstring>(const Window *window, const Window *regarding, VirtualDesktop *desktop)</argsstring>
        <name>isIrrelevant</name>
        <qualifiedname>KWin::isIrrelevant</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>regarding</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">VirtualDesktop</ref> *</type>
          <declname>desktop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.cpp" line="149" column="20" bodyfile="kwin/src/placement.cpp" bodystart="149" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ae3aeb7c970308379ca5d6123e2239c14" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QRegion</type>
        <definition>static QRegion KWin::simplifyDamage</definition>
        <argsstring>(const QRegion &amp;damage)</argsstring>
        <name>simplifyDamage</name>
        <qualifiedname>KWin::simplifyDamage</qualifiedname>
        <param>
          <type>const QRegion &amp;</type>
          <declname>damage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/platformsupport/scenes/opengl/openglsurfacetexture.cpp" line="94" column="16" bodyfile="kwin/src/platformsupport/scenes/opengl/openglsurfacetexture.cpp" bodystart="94" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a71f3a1d2609cda351d694a32bd924359" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QJsonValue</type>
        <definition>static QJsonValue KWin::readPluginInfo</definition>
        <argsstring>(const QJsonObject &amp;metadata, const QString &amp;key)</argsstring>
        <name>readPluginInfo</name>
        <qualifiedname>KWin::readPluginInfo</qualifiedname>
        <param>
          <type>const QJsonObject &amp;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/pluginmanager.cpp" line="23" column="19" bodyfile="kwin/src/pluginmanager.cpp" bodystart="23" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aa40732646283d14579ff1c935ceef813" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::belongToSameGroup</definition>
        <argsstring>(const EffectWindow *w1, const EffectWindow *w2)</argsstring>
        <name>belongToSameGroup</name>
        <qualifiedname>KWin::belongToSameGroup</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
          <declname>w2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if two windows belong to the same window group</para>
<para>One possible example of a window group is an app window and app preferences window(e.g. Dolphin window and Dolphin Preferences window).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first window </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second window </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if both windows belong to the same window group, <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/diminactive/diminactive.cpp" line="34" column="20" bodyfile="kwin/src/plugins/diminactive/diminactive.cpp" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a46d51565349ea4dd4c8793a1de86770a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>eis_device *</type>
        <definition>static eis_device * KWin::createDevice</definition>
        <argsstring>(eis_seat *seat, const QByteArray &amp;name)</argsstring>
        <name>createDevice</name>
        <qualifiedname>KWin::createDevice</qualifiedname>
        <param>
          <type>eis_seat *</type>
          <declname>seat</declname>
        </param>
        <param>
          <type>const QByteArray &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/eis/eisbackend.cpp" line="109" column="12" bodyfile="kwin/src/plugins/eis/eisbackend.cpp" bodystart="109" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a25f547c4f10fd5fbe7bb88c706231207" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::eis_log_handler</definition>
        <argsstring>(eis *eis, eis_log_priority priority, const char *message, eis_log_context *context)</argsstring>
        <name>eis_log_handler</name>
        <qualifiedname>KWin::eis_log_handler</qualifiedname>
        <param>
          <type>eis *</type>
          <declname>eis</declname>
        </param>
        <param>
          <type>eis_log_priority</type>
          <declname>priority</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>eis_log_context *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/eis/eiscontext.cpp" line="15" column="13" bodyfile="kwin/src/plugins/eis/eiscontext.cpp" bodystart="15" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ae1cf0e14b68593140b6dd51fc17f0629" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::chrono::microseconds</type>
        <definition>static std::chrono::microseconds KWin::currentTime</definition>
        <argsstring>()</argsstring>
        <name>currentTime</name>
        <qualifiedname>KWin::currentTime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/eis/eiscontext.cpp" line="109" column="34" bodyfile="kwin/src/plugins/eis/eiscontext.cpp" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ae1cf0e14b68593140b6dd51fc17f0629" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::chrono::microseconds</type>
        <definition>static std::chrono::microseconds KWin::currentTime</definition>
        <argsstring>()</argsstring>
        <name>currentTime</name>
        <qualifiedname>KWin::currentTime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/eis/eisdevice.cpp" line="14" column="34" bodyfile="kwin/src/plugins/eis/eisdevice.cpp" bodystart="14" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a25f547c4f10fd5fbe7bb88c706231207" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::eis_log_handler</definition>
        <argsstring>(eis *eis, eis_log_priority priority, const char *message, eis_log_context *context)</argsstring>
        <name>eis_log_handler</name>
        <qualifiedname>KWin::eis_log_handler</qualifiedname>
        <param>
          <type>eis *</type>
          <declname>eis</declname>
        </param>
        <param>
          <type>eis_log_priority</type>
          <declname>priority</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>eis_log_context *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/eis/eisinputcapture.cpp" line="25" column="13" bodyfile="kwin/src/plugins/eis/eisinputcapture.cpp" bodystart="25" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a48c3f08050ef73d02f1e28aa935357ca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>eis_device *</type>
        <definition>static eis_device * KWin::createPointer</definition>
        <argsstring>(eis_seat *seat)</argsstring>
        <name>createPointer</name>
        <qualifiedname>KWin::createPointer</qualifiedname>
        <param>
          <type>eis_seat *</type>
          <declname>seat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/eis/eisinputcapture.cpp" line="54" column="19" bodyfile="kwin/src/plugins/eis/eisinputcapture.cpp" bodystart="54" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1afe3d45cc783bda9815ad453dbcb06ad5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>eis_device *</type>
        <definition>static eis_device * KWin::createAbsoluteDevice</definition>
        <argsstring>(eis_seat *seat)</argsstring>
        <name>createAbsoluteDevice</name>
        <qualifiedname>KWin::createAbsoluteDevice</qualifiedname>
        <param>
          <type>eis_seat *</type>
          <declname>seat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/eis/eisinputcapture.cpp" line="65" column="19" bodyfile="kwin/src/plugins/eis/eisinputcapture.cpp" bodystart="65" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1abfe9cfc60ae1ad322c4c8e4df09ea532" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>eis_device *</type>
        <definition>static eis_device * KWin::createKeyboard</definition>
        <argsstring>(eis_seat *seat, const RamFile &amp;keymap)</argsstring>
        <name>createKeyboard</name>
        <qualifiedname>KWin::createKeyboard</qualifiedname>
        <param>
          <type>eis_seat *</type>
          <declname>seat</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_ram_file" kindref="compound">RamFile</ref> &amp;</type>
          <declname>keymap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/eis/eisinputcapture.cpp" line="89" column="19" bodyfile="kwin/src/plugins/eis/eisinputcapture.cpp" bodystart="89" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a4981c8c02e394c5e7fc667a3766731c0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::isInitiallyHidden</definition>
        <argsstring>(EffectWindow *w)</argsstring>
        <name>isInitiallyHidden</name>
        <qualifiedname>KWin::isInitiallyHidden</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/highlightwindow/highlightwindow.cpp" line="54" column="13" bodyfile="kwin/src/plugins/highlightwindow/highlightwindow.cpp" bodystart="54" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a7d0a1ad82e1866fb9031732dda0fe908" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::isHighlightWindow</definition>
        <argsstring>(EffectWindow *window)</argsstring>
        <name>isHighlightWindow</name>
        <qualifiedname>KWin::isHighlightWindow</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/highlightwindow/highlightwindow.cpp" line="60" column="13" bodyfile="kwin/src/plugins/highlightwindow/highlightwindow.cpp" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a1320025ed742a685adb2b9732b70439d" prot="public" static="yes" consteval="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QPoint</type>
        <definition>static consteval QPoint KWin::nullPoint</definition>
        <argsstring>()</argsstring>
        <name>nullPoint</name>
        <qualifiedname>KWin::nullPoint</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/mousemark/mousemark.cpp" line="33" column="25" bodyfile="kwin/src/plugins/mousemark/mousemark.cpp" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a1137eafed358e2f7cb718a2a9cc9872f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::announceChangedProperties</definition>
        <argsstring>(const QVariantMap &amp;properties)</argsstring>
        <name>announceChangedProperties</name>
        <qualifiedname>KWin::announceChangedProperties</qualifiedname>
        <param>
          <type>const QVariantMap &amp;</type>
          <declname>properties</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/nightlight/nightlightdbusinterface.cpp" line="20" column="13" bodyfile="kwin/src/plugins/nightlight/nightlightdbusinterface.cpp" bodystart="20" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a6d8703c75941b48ca9ec32143e8c8d2e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::checkLocation</definition>
        <argsstring>(double latitude, double longitude)</argsstring>
        <name>checkLocation</name>
        <qualifiedname>KWin::checkLocation</qualifiedname>
        <param>
          <type>double</type>
          <declname>latitude</declname>
        </param>
        <param>
          <type>double</type>
          <declname>longitude</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/nightlight/nightlightmanager.cpp" line="38" column="13" bodyfile="kwin/src/plugins/nightlight/nightlightmanager.cpp" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aa3aa5a5152d74b3e67e91a592354066d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QTime</type>
        <definition>static QTime KWin::convertToLocalTime</definition>
        <argsstring>(const QDateTime &amp;when, const QTime &amp;utcTime)</argsstring>
        <name>convertToLocalTime</name>
        <qualifiedname>KWin::convertToLocalTime</qualifiedname>
        <param>
          <type>const QDateTime &amp;</type>
          <declname>when</declname>
        </param>
        <param>
          <type>const QTime &amp;</type>
          <declname>utcTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/nightlight/suncalc.cpp" line="24" column="14" bodyfile="kwin/src/plugins/nightlight/suncalc.cpp" bodystart="24" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a1855974cca067254f2cc043f983e6f92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QPair&lt; QDateTime, QDateTime &gt;</type>
        <definition>QPair&lt; QDateTime, QDateTime &gt; KWin::calculateSunTimings</definition>
        <argsstring>(const QDateTime &amp;dateTime, double latitude, double longitude, bool morning)</argsstring>
        <name>calculateSunTimings</name>
        <qualifiedname>KWin::calculateSunTimings</qualifiedname>
        <param>
          <type>const QDateTime &amp;</type>
          <declname>dateTime</declname>
        </param>
        <param>
          <type>double</type>
          <declname>latitude</declname>
        </param>
        <param>
          <type>double</type>
          <declname>longitude</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>morning</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates for a given location and date two of the following sun timings in their temporal order:<itemizedlist>
<listitem><para>Nautical dawn and sunrise for the morning</para>
</listitem><listitem><para>Sunset and nautical dusk for the evening <simplesect kind="since"><para>5.12 </para>
</simplesect>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/nightlight/suncalc.cpp" line="31" column="7" bodyfile="kwin/src/plugins/nightlight/suncalc.cpp" bodystart="31" bodyend="160" declfile="kwin/src/plugins/nightlight/suncalc.h" declline="26" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ab95e2edd6aa25d81b4b49d2556e3c062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::KWIN_EFFECT_FACTORY</definition>
        <argsstring>(OutputLocatorEffect, &quot;metadata.json.stripped&quot;)</argsstring>
        <name>KWIN_EFFECT_FACTORY</name>
        <qualifiedname>KWin::KWIN_EFFECT_FACTORY</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output_locator_effect" kindref="compound">OutputLocatorEffect</ref></type>
        </param>
        <param>
          <type>&quot;metadata.json.stripped&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/outputlocator/main.cpp" line="11" column="1" declfile="kwin/src/plugins/outputlocator/main.cpp" declline="11" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1af4bc49e9843b19fa15cbd50aebc5acee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::outputName</definition>
        <argsstring>(const Output *screen)</argsstring>
        <name>outputName</name>
        <qualifiedname>KWin::outputName</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>screen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/outputlocator/outputlocator.cpp" line="22" column="16" bodyfile="kwin/src/plugins/outputlocator/outputlocator.cpp" bodystart="22" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a894a56c3123dd9bda42bc5a3cd9be0be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::rectToString</definition>
        <argsstring>(const QRect &amp;rect)</argsstring>
        <name>rectToString</name>
        <qualifiedname>KWin::rectToString</qualifiedname>
        <param>
          <type>const QRect &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screencast/screencastmanager.cpp" line="93" column="16" bodyfile="kwin/src/plugins/screencast/screencastmanager.cpp" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a130f01e9d3a77ddf31429f218e64671e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>static qreal KWin::devicePixelRatioForRegion</definition>
        <argsstring>(const QRect &amp;region)</argsstring>
        <name>devicePixelRatioForRegion</name>
        <qualifiedname>KWin::devicePixelRatioForRegion</qualifiedname>
        <param>
          <type>const QRect &amp;</type>
          <declname>region</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screencast/screencastmanager.cpp" line="98" column="14" bodyfile="kwin/src/plugins/screencast/screencastmanager.cpp" bodystart="98" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1afa0bfb23bf52d587f75135e758792709" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>spa_video_format</type>
        <definition>static spa_video_format KWin::drmFormatToSpaVideoFormat</definition>
        <argsstring>(quint32 drmFormat)</argsstring>
        <name>drmFormatToSpaVideoFormat</name>
        <qualifiedname>KWin::drmFormatToSpaVideoFormat</qualifiedname>
        <param>
          <type>quint32</type>
          <declname>drmFormat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screencast/screencaststream.cpp" line="91" column="25" bodyfile="kwin/src/plugins/screencast/screencaststream.cpp" bodystart="91" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a7e3ba7b7c1af816ad672b2e482600198" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t KWin::spaVideoFormatToDrmFormat</definition>
        <argsstring>(spa_video_format spaFormat)</argsstring>
        <name>spaVideoFormatToDrmFormat</name>
        <qualifiedname>KWin::spaVideoFormatToDrmFormat</qualifiedname>
        <param>
          <type>spa_video_format</type>
          <declname>spaFormat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screencast/screencaststream.cpp" line="103" column="17" bodyfile="kwin/src/plugins/screencast/screencaststream.cpp" bodystart="103" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a3f575823dadbf2b77673e8863d7ab89a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::mirrorVertically</definition>
        <argsstring>(uchar *data, int height, int stride)</argsstring>
        <name>mirrorVertically</name>
        <qualifiedname>KWin::mirrorVertically</qualifiedname>
        <param>
          <type>uchar *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screencast/screencastutils.h" line="17" column="13" bodyfile="kwin/src/plugins/screencast/screencastutils.h" bodystart="17" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aa39d2e37d328e13b5fa87fe016bb5143" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLenum</type>
        <definition>static GLenum KWin::closestGLType</definition>
        <argsstring>(QImage::Format format)</argsstring>
        <name>closestGLType</name>
        <qualifiedname>KWin::closestGLType</qualifiedname>
        <param>
          <type>QImage::Format</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screencast/screencastutils.h" line="29" column="15" bodyfile="kwin/src/plugins/screencast/screencastutils.h" bodystart="29" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a30518b664e34496cfde08a2630398fd0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::doGrabTexture</definition>
        <argsstring>(GLTexture *texture, QImage *target)</argsstring>
        <name>doGrabTexture</name>
        <qualifiedname>KWin::doGrabTexture</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_g_l_texture" kindref="compound">GLTexture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type>QImage *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screencast/screencastutils.h" line="42" column="13" bodyfile="kwin/src/plugins/screencast/screencastutils.h" bodystart="42" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a7b964c0250bb7b0f8a7dd79c9c72aa33" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::grabTexture</definition>
        <argsstring>(GLTexture *texture, QImage *target)</argsstring>
        <name>grabTexture</name>
        <qualifiedname>KWin::grabTexture</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_g_l_texture" kindref="compound">GLTexture</ref> *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type>QImage *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screencast/screencastutils.h" line="79" column="13" bodyfile="kwin/src/plugins/screencast/screencastutils.h" bodystart="79" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ab4500319bf6fefc356f30f0b65b5e7c9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>QRegion</type>
        <definition>static QRegion KWin::scaleRegion</definition>
        <argsstring>(const QRegion &amp;_region, qreal scale)</argsstring>
        <name>scaleRegion</name>
        <qualifiedname>KWin::scaleRegion</qualifiedname>
        <param>
          <type>const QRegion &amp;</type>
          <declname>_region</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screencast/screencastutils.h" line="106" column="23" bodyfile="kwin/src/plugins/screencast/screencastutils.h" bodystart="106" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a2da0be7f55ad05a2c434d858c6d0a0fc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::convertFromGLImage</definition>
        <argsstring>(QImage &amp;img, int w, int h, const OutputTransform &amp;renderTargetTransformation)</argsstring>
        <name>convertFromGLImage</name>
        <qualifiedname>KWin::convertFromGLImage</qualifiedname>
        <param>
          <type>QImage &amp;</type>
          <declname>img</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_output_transform" kindref="compound">OutputTransform</ref> &amp;</type>
          <declname>renderTargetTransformation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screenshot/screenshot.cpp" line="50" column="13" bodyfile="kwin/src/plugins/screenshot/screenshot.cpp" bodystart="50" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ac65b3d299822723f328b5a5eebf06802" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>static QRectF KWin::roundedRect</definition>
        <argsstring>(const QRect &amp;rect, qreal scale)</argsstring>
        <name>roundedRect</name>
        <qualifiedname>KWin::roundedRect</qualifiedname>
        <param>
          <type>const QRect &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screenshot/screenshot.cpp" line="86" column="15" bodyfile="kwin/src/plugins/screenshot/screenshot.cpp" bodystart="86" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a749a7131aee190975440ccfe11b153c9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ScreenShotFlags</type>
        <definition>static ScreenShotFlags KWin::screenShotFlagsFromOptions</definition>
        <argsstring>(const QVariantMap &amp;options)</argsstring>
        <name>screenShotFlagsFromOptions</name>
        <qualifiedname>KWin::screenShotFlagsFromOptions</qualifiedname>
        <param>
          <type>const QVariantMap &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" line="103" column="24" bodyfile="kwin/src/plugins/screenshot/screenshotdbusinterface2.cpp" bodystart="103" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1abd26f01e6c4fdab5f199c174b2247b64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>qreal KWin::transformAngle</definition>
        <argsstring>(OutputTransform current, OutputTransform old)</argsstring>
        <name>transformAngle</name>
        <qualifiedname>KWin::transformAngle</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output_transform" kindref="compound">OutputTransform</ref></type>
          <declname>current</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_output_transform" kindref="compound">OutputTransform</ref></type>
          <declname>old</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screentransform/screentransform.cpp" line="63" column="7" bodyfile="kwin/src/plugins/screentransform/screentransform.cpp" bodystart="63" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a2e59167409336233b73597805cf66a91" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_g_l_vertex_buffer" kindref="compound">GLVertexBuffer</ref> *</type>
        <definition>static GLVertexBuffer * KWin::texturedRectVbo</definition>
        <argsstring>(const QRectF &amp;geometry, qreal scale)</argsstring>
        <name>texturedRectVbo</name>
        <qualifiedname>KWin::texturedRectVbo</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screentransform/screentransform.cpp" line="137" column="23" bodyfile="kwin/src/plugins/screentransform/screentransform.cpp" bodystart="137" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a4c1805f0c7863a664019a0f5d62f2138" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>static qreal KWin::lerp</definition>
        <argsstring>(qreal a, qreal b, qreal t)</argsstring>
        <name>lerp</name>
        <qualifiedname>KWin::lerp</qualifiedname>
        <param>
          <type>qreal</type>
          <declname>a</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>b</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screentransform/screentransform.cpp" line="183" column="14" bodyfile="kwin/src/plugins/screentransform/screentransform.cpp" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1afd6265bf1f1eea2d293d4f483ad6404e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>static QRectF KWin::lerp</definition>
        <argsstring>(const QRectF &amp;a, const QRectF &amp;b, qreal t)</argsstring>
        <name>lerp</name>
        <qualifiedname>KWin::lerp</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/screentransform/screentransform.cpp" line="188" column="15" bodyfile="kwin/src/plugins/screentransform/screentransform.cpp" bodystart="188" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a0f4d1d02aa140fb6371ff4f20b921876" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::sameSign</definition>
        <argsstring>(qreal a, qreal b)</argsstring>
        <name>sameSign</name>
        <qualifiedname>KWin::sameSign</qualifiedname>
        <param>
          <type>qreal</type>
          <declname>a</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/shakecursor/shakedetector.cpp" line="39" column="20" bodyfile="kwin/src/plugins/shakecursor/shakedetector.cpp" bodystart="39" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a4271f809a6e557a35902544efc0befff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>QRegion</type>
        <definition>QRegion KWin::buildClipRegion</definition>
        <argsstring>(const QPoint &amp;pos, int w, int h)</argsstring>
        <name>buildClipRegion</name>
        <qualifiedname>KWin::buildClipRegion</qualifiedname>
        <param>
          <type>const QPoint &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/slide/slide.cpp" line="83" column="16" bodyfile="kwin/src/plugins/slide/slide.cpp" bodystart="83" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a4c1805f0c7863a664019a0f5d62f2138" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>static qreal KWin::lerp</definition>
        <argsstring>(qreal a, qreal b, qreal t)</argsstring>
        <name>lerp</name>
        <qualifiedname>KWin::lerp</qualifiedname>
        <param>
          <type>qreal</type>
          <declname>a</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>b</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/slide/springmotion.cpp" line="14" column="14" bodyfile="kwin/src/plugins/slide/springmotion.cpp" bodystart="14" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ad7b70ed82632a2dbf054bed84371625b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QRegion</type>
        <definition>static QRegion KWin::computeDirtyRegion</definition>
        <argsstring>(const QRectF &amp;windowRect)</argsstring>
        <name>computeDirtyRegion</name>
        <qualifiedname>KWin::computeDirtyRegion</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>windowRect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/snaphelper/snaphelper.cpp" line="28" column="16" bodyfile="kwin/src/plugins/snaphelper/snaphelper.cpp" bodystart="28" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a2f1bc2bcfeff19c38b634a0df7e4261b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::chrono::milliseconds</type>
        <definition>static const std::chrono::milliseconds KWin::integrationStep</definition>
        <argsstring>(10)</argsstring>
        <name>integrationStep</name>
        <qualifiedname>KWin::integrationStep</qualifiedname>
        <param>
          <type>10</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/wobblywindows/wobblywindows.cpp" line="236" column="40" declfile="kwin/src/plugins/wobblywindows/wobblywindows.cpp" declline="236" declcolumn="40"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a875dbca99271bdc6bcfd33e2df220e89" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Qt::KeyboardModifiers</type>
        <definition>static Qt::KeyboardModifiers KWin::stringToKeyboardModifiers</definition>
        <argsstring>(const QString &amp;string)</argsstring>
        <name>stringToKeyboardModifiers</name>
        <qualifiedname>KWin::stringToKeyboardModifiers</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/zoom/zoom.cpp" line="208" column="30" bodyfile="kwin/src/plugins/zoom/zoom.cpp" bodystart="208" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a5b8630c5cec734ef8688af5b6ac4b8fd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::encodeModifierOnlySequence</definition>
        <argsstring>(const QKeySequence &amp;sequence)</argsstring>
        <name>encodeModifierOnlySequence</name>
        <qualifiedname>KWin::encodeModifierOnlySequence</qualifiedname>
        <param>
          <type>const QKeySequence &amp;</type>
          <declname>sequence</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/zoom/zoom_config.cpp" line="33" column="16" bodyfile="kwin/src/plugins/zoom/zoom_config.cpp" bodystart="33" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a6a5c5a88b7cffae69be86b9ae58187bd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QKeySequence</type>
        <definition>static QKeySequence KWin::decodeModifierOnlySequence</definition>
        <argsstring>(const QString &amp;string)</argsstring>
        <name>decodeModifierOnlySequence</name>
        <qualifiedname>KWin::decodeModifierOnlySequence</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/zoom/zoom_config.cpp" line="77" column="21" bodyfile="kwin/src/plugins/zoom/zoom_config.cpp" bodystart="77" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a77e6977b39566d631e676546c9af40ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::screenContainsPos</definition>
        <argsstring>(const QPointF &amp;pos)</argsstring>
        <name>screenContainsPos</name>
        <qualifiedname>KWin::screenContainsPos</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/pointer_input.cpp" line="57" column="13" bodyfile="kwin/src/pointer_input.cpp" bodystart="57" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aa5bb746e3a664d50ec67d22ff8a08aba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QPointF</type>
        <definition>static QPointF KWin::confineToBoundingBox</definition>
        <argsstring>(const QPointF &amp;pos, const QRectF &amp;boundingBox)</argsstring>
        <name>confineToBoundingBox</name>
        <qualifiedname>KWin::confineToBoundingBox</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>boundingBox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/pointer_input.cpp" line="68" column="16" bodyfile="kwin/src/pointer_input.cpp" bodystart="68" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a0345e691c62018c7d9edbcf7036c0ba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::typeMatchesMask</definition>
        <argsstring>(WindowType type, WindowTypes mask)</argsstring>
        <name>typeMatchesMask</name>
        <qualifiedname>KWin::typeMatchesMask</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7" kindref="member">WindowType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>WindowTypes</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.cpp" line="320" column="6" bodyfile="kwin/src/rules.cpp" bodystart="320" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ab6b7efd32771fd99a74059efb0dcc6fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QDebug &amp;</type>
        <definition>QDebug &amp; KWin::operator&lt;&lt;</definition>
        <argsstring>(QDebug &amp;stream, const Rules *r)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>KWin::operator&lt;&lt;</qualifiedname>
        <param>
          <type>QDebug &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_rules" kindref="compound">Rules</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/rules.cpp" line="766" column="1" bodyfile="kwin/src/rules.cpp" bodystart="766" bodyend="769" declfile="kwin/src/rules.h" declline="385" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a0df7a3dbcfec9a734677be9e63ac4575" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::resetRepaintsHelper</definition>
        <argsstring>(Item *item, SceneDelegate *delegate)</argsstring>
        <name>resetRepaintsHelper</name>
        <qualifiedname>KWin::resetRepaintsHelper</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_item" kindref="compound">Item</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_scene_delegate" kindref="compound">SceneDelegate</ref> *</type>
          <declname>delegate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/cursorscene.cpp" line="37" column="13" bodyfile="kwin/src/scene/cursorscene.cpp" bodystart="37" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ae84b579d9ddcc6d47788d061c84c2ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_window_quad" kindref="compound">WindowQuad</ref></type>
        <definition>WindowQuad KWin::buildQuad</definition>
        <argsstring>(const QRectF &amp;partRect, const QPoint &amp;textureOffset, const qreal devicePixelRatio, bool rotated)</argsstring>
        <name>buildQuad</name>
        <qualifiedname>KWin::buildQuad</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>partRect</declname>
        </param>
        <param>
          <type>const QPoint &amp;</type>
          <declname>textureOffset</declname>
        </param>
        <param>
          <type>const qreal</type>
          <declname>devicePixelRatio</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>rotated</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/decorationitem.cpp" line="173" column="12" bodyfile="kwin/src/scene/decorationitem.cpp" bodystart="173" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1af998020795fa0a1c3b5af6e6c6e7b80c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::compareZ</definition>
        <argsstring>(const Item *a, const Item *b)</argsstring>
        <name>compareZ</name>
        <qualifiedname>KWin::compareZ</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_item" kindref="compound">Item</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_item" kindref="compound">Item</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/item.cpp" line="568" column="13" bodyfile="kwin/src/scene/item.cpp" bodystart="568" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aadb574d477b5a085dcceeddc26c4f969" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_render_geometry" kindref="compound">RenderGeometry</ref></type>
        <definition>static RenderGeometry KWin::clipQuads</definition>
        <argsstring>(const Item *item, const ItemRendererOpenGL::RenderContext *context)</argsstring>
        <name>clipQuads</name>
        <qualifiedname>KWin::clipQuads</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_item" kindref="compound">Item</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>const <ref refid="struct_k_win_1_1_item_renderer_open_g_l_1_1_render_context" kindref="compound">ItemRendererOpenGL::RenderContext</ref> *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/itemrenderer_opengl.cpp" line="85" column="23" bodyfile="kwin/src/scene/itemrenderer_opengl.cpp" bodystart="85" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a9f3524400306be27b644be3460865bfd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::distributeHorizontally</definition>
        <argsstring>(QRectF &amp;leftRect, QRectF &amp;rightRect)</argsstring>
        <name>distributeHorizontally</name>
        <qualifiedname>KWin::distributeHorizontally</qualifiedname>
        <param>
          <type>QRectF &amp;</type>
          <declname>leftRect</declname>
        </param>
        <param>
          <type>QRectF &amp;</type>
          <declname>rightRect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/shadowitem.cpp" line="69" column="20" bodyfile="kwin/src/scene/shadowitem.cpp" bodystart="69" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a32cea54b9758bfdd04ccc0c1b5bb0725" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::distributeVertically</definition>
        <argsstring>(QRectF &amp;topRect, QRectF &amp;bottomRect)</argsstring>
        <name>distributeVertically</name>
        <qualifiedname>KWin::distributeVertically</qualifiedname>
        <param>
          <type>QRectF &amp;</type>
          <declname>topRect</declname>
        </param>
        <param>
          <type>QRectF &amp;</type>
          <declname>bottomRect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/shadowitem.cpp" line="80" column="20" bodyfile="kwin/src/scene/shadowitem.cpp" bodystart="80" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a8a4d994a16a3cf735345ac273bafcf7b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QRegion</type>
        <definition>static QRegion KWin::expandRegion</definition>
        <argsstring>(const QRegion &amp;region, const QMargins &amp;padding)</argsstring>
        <name>expandRegion</name>
        <qualifiedname>KWin::expandRegion</qualifiedname>
        <param>
          <type>const QRegion &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>const QMargins &amp;</type>
          <declname>padding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/surfaceitem.cpp" line="107" column="16" bodyfile="kwin/src/scene/surfaceitem.cpp" bodystart="107" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a0a5382823e4a63b8951ad6ec8fe4da36" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::regionActuallyContains</definition>
        <argsstring>(const QRegion &amp;region, const QRect &amp;rect)</argsstring>
        <name>regionActuallyContains</name>
        <qualifiedname>KWin::regionActuallyContains</qualifiedname>
        <param>
          <type>const QRegion &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>const QRect &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/workspacescene.cpp" line="155" column="13" bodyfile="kwin/src/scene/workspacescene.cpp" bodystart="155" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aee31a75afbd150cfbae4a6a130c5cff3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::addCandidates</definition>
        <argsstring>(SurfaceItem *item, QList&lt; SurfaceItem * &gt; &amp;candidates, ssize_t maxCount, QRegion &amp;occluded)</argsstring>
        <name>addCandidates</name>
        <qualifiedname>KWin::addCandidates</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_surface_item" kindref="compound">SurfaceItem</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>QList&lt; <ref refid="class_k_win_1_1_surface_item" kindref="compound">SurfaceItem</ref> * &gt; &amp;</type>
          <declname>candidates</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>maxCount</declname>
        </param>
        <param>
          <type>QRegion &amp;</type>
          <declname>occluded</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/workspacescene.cpp" line="162" column="13" bodyfile="kwin/src/scene/workspacescene.cpp" bodystart="162" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a2da0b69a9106288368c103d407dbb8f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double KWin::getDesiredHdrHeadroom</definition>
        <argsstring>(Item *item)</argsstring>
        <name>getDesiredHdrHeadroom</name>
        <qualifiedname>KWin::getDesiredHdrHeadroom</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_item" kindref="compound">Item</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/workspacescene.cpp" line="229" column="15" bodyfile="kwin/src/scene/workspacescene.cpp" bodystart="229" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a0df7a3dbcfec9a734677be9e63ac4575" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::resetRepaintsHelper</definition>
        <argsstring>(Item *item, SceneDelegate *delegate)</argsstring>
        <name>resetRepaintsHelper</name>
        <qualifiedname>KWin::resetRepaintsHelper</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_item" kindref="compound">Item</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_scene_delegate" kindref="compound">SceneDelegate</ref> *</type>
          <declname>delegate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/workspacescene.cpp" line="337" column="13" bodyfile="kwin/src/scene/workspacescene.cpp" bodystart="337" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1abb31233f52661fff00d0e94ff378f94f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::accumulateRepaints</definition>
        <argsstring>(Item *item, SceneDelegate *delegate, QRegion *repaints)</argsstring>
        <name>accumulateRepaints</name>
        <qualifiedname>KWin::accumulateRepaints</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_item" kindref="compound">Item</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_scene_delegate" kindref="compound">SceneDelegate</ref> *</type>
          <declname>delegate</declname>
        </param>
        <param>
          <type>QRegion *</type>
          <declname>repaints</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/workspacescene.cpp" line="347" column="13" bodyfile="kwin/src/scene/workspacescene.cpp" bodystart="347" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a747291aade9ccc48983727eb871b3de9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::clamp_row</definition>
        <argsstring>(int left, int width, int right, const uint32_t *src, uint32_t *dest)</argsstring>
        <name>clamp_row</name>
        <qualifiedname>KWin::clamp_row</qualifiedname>
        <param>
          <type>int</type>
          <declname>left</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>right</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/workspacescene_opengl.cpp" line="287" column="13" bodyfile="kwin/src/scene/workspacescene_opengl.cpp" bodystart="287" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a9e9060b8214c124b10876e14fd67da1e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::clamp_sides</definition>
        <argsstring>(int left, int width, int right, const uint32_t *src, uint32_t *dest)</argsstring>
        <name>clamp_sides</name>
        <qualifiedname>KWin::clamp_sides</qualifiedname>
        <param>
          <type>int</type>
          <declname>left</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>right</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/workspacescene_opengl.cpp" line="294" column="13" bodyfile="kwin/src/scene/workspacescene_opengl.cpp" bodystart="294" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a785c4677791df94dad58d81185db8802" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::clamp</definition>
        <argsstring>(QImage &amp;image, const QRect &amp;viewport)</argsstring>
        <name>clamp</name>
        <qualifiedname>KWin::clamp</qualifiedname>
        <param>
          <type>QImage &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const QRect &amp;</type>
          <declname>viewport</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/workspacescene_opengl.cpp" line="300" column="13" bodyfile="kwin/src/scene/workspacescene_opengl.cpp" bodystart="300" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a93948b7f82b1e62cd9f8ed933839733f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int KWin::align</definition>
        <argsstring>(int value, int align)</argsstring>
        <name>align</name>
        <qualifiedname>KWin::align</qualifiedname>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>align</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scene/workspacescene_opengl.cpp" line="444" column="12" bodyfile="kwin/src/scene/workspacescene_opengl.cpp" bodystart="444" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a06040d163d174163a989a168f485d7e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1a984e1af1aa8924cdddeeba318fa7dd76" kindref="member">ElectricBorderAction</ref></type>
        <definition>static ElectricBorderAction KWin::electricBorderAction</definition>
        <argsstring>(const QString &amp;name)</argsstring>
        <name>electricBorderAction</name>
        <qualifiedname>KWin::electricBorderAction</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/screenedge.cpp" line="784" column="29" bodyfile="kwin/src/screenedge.cpp" bodystart="784" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ab78d9479f5c777e15f59f4ecc0691e94" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::isLeftScreen</definition>
        <argsstring>(const QRect &amp;screen, const QRect &amp;fullArea)</argsstring>
        <name>isLeftScreen</name>
        <qualifiedname>KWin::isLeftScreen</qualifiedname>
        <param>
          <type>const QRect &amp;</type>
          <declname>screen</declname>
        </param>
        <param>
          <type>const QRect &amp;</type>
          <declname>fullArea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/screenedge.cpp" line="942" column="13" bodyfile="kwin/src/screenedge.cpp" bodystart="942" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ab8e28ced8a44afed43d36a41f9d71756" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::isRightScreen</definition>
        <argsstring>(const QRect &amp;screen, const QRect &amp;fullArea)</argsstring>
        <name>isRightScreen</name>
        <qualifiedname>KWin::isRightScreen</qualifiedname>
        <param>
          <type>const QRect &amp;</type>
          <declname>screen</declname>
        </param>
        <param>
          <type>const QRect &amp;</type>
          <declname>fullArea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/screenedge.cpp" line="969" column="13" bodyfile="kwin/src/screenedge.cpp" bodystart="969" bodyend="994"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a1ea97b5456e3911fa51eb4f829e643e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::isTopScreen</definition>
        <argsstring>(const QRect &amp;screen, const QRect &amp;fullArea)</argsstring>
        <name>isTopScreen</name>
        <qualifiedname>KWin::isTopScreen</qualifiedname>
        <param>
          <type>const QRect &amp;</type>
          <declname>screen</declname>
        </param>
        <param>
          <type>const QRect &amp;</type>
          <declname>fullArea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/screenedge.cpp" line="996" column="13" bodyfile="kwin/src/screenedge.cpp" bodystart="996" bodyend="1021"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ab20114a2f345ac909c88480e283055c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::isBottomScreen</definition>
        <argsstring>(const QRect &amp;screen, const QRect &amp;fullArea)</argsstring>
        <name>isBottomScreen</name>
        <qualifiedname>KWin::isBottomScreen</qualifiedname>
        <param>
          <type>const QRect &amp;</type>
          <declname>screen</declname>
        </param>
        <param>
          <type>const QRect &amp;</type>
          <declname>fullArea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/screenedge.cpp" line="1023" column="13" bodyfile="kwin/src/screenedge.cpp" bodystart="1023" bodyend="1048"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ac1b595c1ea03881335d69d6e34a070bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_k_win_1_1_animation_settings" kindref="compound">AnimationSettings</ref></type>
        <definition>AnimationSettings KWin::animationSettingsFromObject</definition>
        <argsstring>(const QJSValue &amp;object)</argsstring>
        <name>animationSettingsFromObject</name>
        <qualifiedname>KWin::animationSettingsFromObject</qualifiedname>
        <param>
          <type>const QJSValue &amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scripting/scriptedeffect.cpp" line="66" column="19" bodyfile="kwin/src/scripting/scriptedeffect.cpp" bodystart="66" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a9160bac3e37dbff86c41a1ced1558b65" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_f_px2" kindref="compound">KWin::FPx2</ref></type>
        <definition>static KWin::FPx2 KWin::fpx2FromScriptValue</definition>
        <argsstring>(const QJSValue &amp;value)</argsstring>
        <name>fpx2FromScriptValue</name>
        <qualifiedname>KWin::fpx2FromScriptValue</qualifiedname>
        <param>
          <type>const QJSValue &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scripting/scriptedeffect.cpp" line="138" column="19" bodyfile="kwin/src/scripting/scriptedeffect.cpp" bodystart="138" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a19449039799dcafb994719a68964b51e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QVariant</type>
        <definition>QVariant KWin::dbusToVariant</definition>
        <argsstring>(const QVariant &amp;variant)</argsstring>
        <name>dbusToVariant</name>
        <qualifiedname>KWin::dbusToVariant</qualifiedname>
        <param>
          <type>const QVariant &amp;</type>
          <declname>variant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scripting/scriptingutils.cpp" line="19" column="10" bodyfile="kwin/src/scripting/scriptingutils.cpp" bodystart="19" bodyend="74" declfile="kwin/src/scripting/scriptingutils.h" declline="17" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aca90fa8630bdf5a871c8a1dfd3a9bb3e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::useGlThumbnails</definition>
        <argsstring>()</argsstring>
        <name>useGlThumbnails</name>
        <qualifiedname>KWin::useGlThumbnails</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/scripting/windowthumbnailitem.cpp" line="34" column="13" bodyfile="kwin/src/scripting/windowthumbnailitem.cpp" bodystart="34" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aa39457cb56060471a3387ca42fc4389d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QImage</type>
        <definition>static QImage KWin::shadowTileForBuffer</definition>
        <argsstring>(GraphicsBuffer *buffer)</argsstring>
        <name>shadowTileForBuffer</name>
        <qualifiedname>KWin::shadowTileForBuffer</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_graphics_buffer" kindref="compound">GraphicsBuffer</ref> *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/shadow.cpp" line="213" column="15" bodyfile="kwin/src/shadow.cpp" bodystart="213" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a2faca48ca4f38902e2a394473eca66e7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KConfig *</type>
        <definition>static KConfig * KWin::sessionConfig</definition>
        <argsstring>(QString id, QString key)</argsstring>
        <name>sessionConfig</name>
        <qualifiedname>KWin::sessionConfig</qualifiedname>
        <param>
          <type>QString</type>
          <declname>id</declname>
        </param>
        <param>
          <type>QString</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/sm.cpp" line="41" column="16" bodyfile="kwin/src/sm.cpp" bodystart="41" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aeecee73ea08c76167da6ef54bb84ac70" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * KWin::windowTypeToTxt</definition>
        <argsstring>(WindowType type)</argsstring>
        <name>windowTypeToTxt</name>
        <qualifiedname>KWin::windowTypeToTxt</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7" kindref="member">WindowType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/sm.cpp" line="64" column="19" bodyfile="kwin/src/sm.cpp" bodystart="64" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ae4505741ac3b04c8c5c0d701dbf4c84b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7" kindref="member">WindowType</ref></type>
        <definition>static WindowType KWin::txtToWindowType</definition>
        <argsstring>(const char *txt)</argsstring>
        <name>txtToWindowType</name>
        <qualifiedname>KWin::txtToWindowType</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>txt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/sm.cpp" line="76" column="19" bodyfile="kwin/src/sm.cpp" bodystart="76" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a73da9026afa76043096a74b4a622898e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_tablet_seat_v2_interface" kindref="compound">TabletSeatV2Interface</ref> *</type>
        <definition>static TabletSeatV2Interface * KWin::findTabletSeat</definition>
        <argsstring>()</argsstring>
        <name>findTabletSeat</name>
        <qualifiedname>KWin::findTabletSeat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tablet_input.cpp" line="110" column="30" bodyfile="kwin/src/tablet_input.cpp" bodystart="110" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1abc90b4c1f35f413f305bc47f7648d881" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::blocksTabletMode</definition>
        <argsstring>(InputDevice *device)</argsstring>
        <name>blocksTabletMode</name>
        <qualifiedname>KWin::blocksTabletMode</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_input_device" kindref="compound">InputDevice</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tabletmodemanager.cpp" line="24" column="13" bodyfile="kwin/src/tabletmodemanager.cpp" bodystart="24" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a7da271fd7a8e92bf1a7f32f46b410a0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QDebug</type>
        <definition>KWIN_EXPORT QDebug KWin::operator&lt;&lt;</definition>
        <argsstring>(QDebug debug, const CustomTile *tile)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>KWin::operator&lt;&lt;</qualifiedname>
        <param>
          <type>QDebug</type>
          <declname>debug</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_custom_tile" kindref="compound">CustomTile</ref> *</type>
          <declname>tile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tiles/customtile.cpp" line="19" column="1" bodyfile="kwin/src/tiles/customtile.cpp" bodystart="19" bodyend="31" declfile="kwin/src/tiles/customtile.h" declline="80" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a62bc3ae289367fe59d71173010603fa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QDebug</type>
        <definition>KWIN_EXPORT QDebug KWin::operator&lt;&lt;</definition>
        <argsstring>(QDebug debug, const TileManager *tileManager)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>KWin::operator&lt;&lt;</qualifiedname>
        <param>
          <type>QDebug</type>
          <declname>debug</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_tile_manager" kindref="compound">TileManager</ref> *</type>
          <declname>tileManager</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tiles/tilemanager.cpp" line="29" column="1" bodyfile="kwin/src/tiles/tilemanager.cpp" bodystart="29" bodyend="55" declfile="kwin/src/tiles/tilemanager.h" declline="86" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a3a358a286fe21db0a044090a8486082a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_tile_1a4bf9a2f94d7f7e0b0f81a15843ad325b" kindref="member">Tile::LayoutDirection</ref></type>
        <definition>Tile::LayoutDirection KWin::strToLayoutDirection</definition>
        <argsstring>(const QString &amp;dir)</argsstring>
        <name>strToLayoutDirection</name>
        <qualifiedname>KWin::strToLayoutDirection</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/tiles/tilemanager.cpp" line="183" column="23" bodyfile="kwin/src/tiles/tilemanager.cpp" bodystart="183" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1adce29a1cdc004414770198c2e2ab0048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::windowToDesktop</definition>
        <argsstring>(Window *window, VirtualDesktopManager::Direction direction)</argsstring>
        <name>windowToDesktop</name>
        <qualifiedname>KWin::windowToDesktop</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_virtual_desktop_manager_1ad1f5332604277a0529822e027e471f29" kindref="member">VirtualDesktopManager::Direction</ref></type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/useractions.cpp" line="1480" column="6" bodyfile="kwin/src/useractions.cpp" bodystart="1480" bodyend="1499"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a198548b94480474a59e7dc4ea119173c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::activeWindowToDesktop</definition>
        <argsstring>(VirtualDesktopManager::Direction direction)</argsstring>
        <name>activeWindowToDesktop</name>
        <qualifiedname>KWin::activeWindowToDesktop</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_virtual_desktop_manager_1ad1f5332604277a0529822e027e471f29" kindref="member">VirtualDesktopManager::Direction</ref></type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/useractions.cpp" line="1531" column="6" bodyfile="kwin/src/useractions.cpp" bodystart="1531" bodyend="1549"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a997c0a30a0d7231dc39abb3999180ca0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QPointF</type>
        <definition>static QPointF KWin::popupOffset</definition>
        <argsstring>(const QRectF &amp;anchorRect, const Qt::Edges anchorEdge, const Qt::Edges gravity, const QSizeF popupSize)</argsstring>
        <name>popupOffset</name>
        <qualifiedname>KWin::popupOffset</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>anchorRect</declname>
        </param>
        <param>
          <type>const Qt::Edges</type>
          <declname>anchorEdge</declname>
        </param>
        <param>
          <type>const Qt::Edges</type>
          <declname>gravity</declname>
        </param>
        <param>
          <type>const QSizeF</type>
          <declname>popupSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/common.cpp" line="87" column="9" bodyfile="kwin/src/utils/common.cpp" bodystart="87" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aa5e81341676a22ade1e12358fbdb6cce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>KWIN_EXPORT QRectF KWin::gravitateGeometry</definition>
        <argsstring>(const QRectF &amp;rect, const QRectF &amp;bounds, Gravity gravity)</argsstring>
        <name>gravitateGeometry</name>
        <qualifiedname>KWin::gravitateGeometry</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>bounds</declname>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1a09aef7c112a8b0cdfb6e27a081d50dc8" kindref="member">Gravity</ref></type>
          <declname>gravity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/common.cpp" line="139" column="8" bodyfile="kwin/src/utils/common.cpp" bodystart="139" bodyend="168" declfile="kwin/src/utils/common.h" declline="69" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a4a39ecf55d45321f21eedbcd045c2206" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const QPoint</type>
        <definition>const QPoint KWin::invalidPoint</definition>
        <argsstring>(INT_MIN, INT_MIN)</argsstring>
        <name>invalidPoint</name>
        <qualifiedname>KWin::invalidPoint</qualifiedname>
        <param>
          <type>INT_MIN</type>
        </param>
        <param>
          <type>INT_MIN</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/common.h" line="33" column="14" declfile="kwin/src/utils/common.h" declline="33" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a4b0fef0e1001dc369359a47abf4c9162" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QStringList</type>
        <definition>static QStringList KWin::defaultSearchPaths</definition>
        <argsstring>()</argsstring>
        <name>defaultSearchPaths</name>
        <qualifiedname>KWin::defaultSearchPaths</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/cursortheme.cpp" line="201" column="20" bodyfile="kwin/src/utils/cursortheme.cpp" bodystart="201" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ad0b950fde8daa0b05a3a3caf34cfe9dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArray</type>
        <definition>static QByteArray KWin::parsePnpId</definition>
        <argsstring>(const uint8_t *data)</argsstring>
        <name>parsePnpId</name>
        <qualifiedname>KWin::parsePnpId</qualifiedname>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.cpp" line="35" column="19" bodyfile="kwin/src/utils/edid.cpp" bodystart="35" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a287cecc7dcd958dd1acf4ac53b0befaf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArray</type>
        <definition>static QByteArray KWin::parseEisaId</definition>
        <argsstring>(const uint8_t *data)</argsstring>
        <name>parseEisaId</name>
        <qualifiedname>KWin::parseEisaId</qualifiedname>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.cpp" line="59" column="19" bodyfile="kwin/src/utils/edid.cpp" bodystart="59" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ad0a547fd48b0216b12a2a30ce5bb6e07" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArray</type>
        <definition>static QByteArray KWin::parseVendor</definition>
        <argsstring>(const uint8_t *data)</argsstring>
        <name>parseVendor</name>
        <qualifiedname>KWin::parseVendor</qualifiedname>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.cpp" line="80" column="19" bodyfile="kwin/src/utils/edid.cpp" bodystart="80" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ab920e571117ee1f794cb0bfe0b0d94e2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QSize</type>
        <definition>static QSize KWin::determineScreenPhysicalSizeMm</definition>
        <argsstring>(const di_edid *edid)</argsstring>
        <name>determineScreenPhysicalSizeMm</name>
        <qualifiedname>KWin::determineScreenPhysicalSizeMm</qualifiedname>
        <param>
          <type>const di_edid *</type>
          <declname>edid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/edid.cpp" line="98" column="14" bodyfile="kwin/src/utils/edid.cpp" bodystart="98" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aed283476085336e5df3546c99d94f6a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; int &gt;</type>
        <definition>std::optional&lt; int &gt; KWin::environmentVariableIntValue</definition>
        <argsstring>(const char *name)</argsstring>
        <name>environmentVariableIntValue</name>
        <qualifiedname>KWin::environmentVariableIntValue</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/envvar.h" line="17" column="22" bodyfile="kwin/src/utils/envvar.h" bodystart="17" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a6e980f5969d41ce32e4130f95a0762dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; bool &gt;</type>
        <definition>std::optional&lt; bool &gt; KWin::environmentVariableBoolValue</definition>
        <argsstring>(const char *name)</argsstring>
        <name>environmentVariableBoolValue</name>
        <qualifiedname>KWin::environmentVariableBoolValue</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/envvar.h" line="28" column="22" bodyfile="kwin/src/utils/envvar.h" bodystart="28" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a3cb891e34d7bf162143784d8a406d9d7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_version" kindref="compound">Version</ref></type>
        <definition>static Version KWin::linuxKernelVersion</definition>
        <argsstring>()</argsstring>
        <name>linuxKernelVersion</name>
        <qualifiedname>KWin::linuxKernelVersion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/kernel.h" line="17" column="23" bodyfile="kwin/src/utils/kernel.h" bodystart="17" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aa7609540029fd8b5f31774b6d1f37be3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::isMediaKey</definition>
        <argsstring>(int key)</argsstring>
        <name>isMediaKey</name>
        <qualifiedname>KWin::isMediaKey</qualifiedname>
        <param>
          <type>int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/keys.h" line="33" column="20" bodyfile="kwin/src/utils/keys.h" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a3c96964cf34724586115cccc09998fc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>KWIN_EXPORT void KWin::gainRealTime</definition>
        <argsstring>()</argsstring>
        <name>gainRealTime</name>
        <qualifiedname>KWin::gainRealTime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Makes the calling thread to use realtime scheduling. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/realtime.cpp" line="17" column="6" bodyfile="kwin/src/utils/realtime.cpp" bodystart="17" bodyend="25" declfile="kwin/src/utils/realtime.h" declline="17" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a8c77ef01a5298009b38f91650c249957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T KWin::resource_cast</definition>
        <argsstring>(::wl_resource *resource)</argsstring>
        <name>resource_cast</name>
        <qualifiedname>KWin::resource_cast</qualifiedname>
        <param>
          <type>::wl_resource *</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/resource.h" line="18" column="3" bodyfile="kwin/src/utils/resource.h" bodystart="18" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a76e172a053527e3c758adde1ec8dee55" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QStringList</type>
        <definition>static QStringList KWin::fetchProcessServiceField</definition>
        <argsstring>(const QString &amp;executablePath, const QString &amp;fieldName)</argsstring>
        <name>fetchProcessServiceField</name>
        <qualifiedname>KWin::fetchProcessServiceField</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>executablePath</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>fieldName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/serviceutils.h" line="27" column="20" bodyfile="kwin/src/utils/serviceutils.h" bodystart="27" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a16831ae9677d996ff9d943b89eedb181" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>QStringList</type>
        <definition>static QStringList KWin::fetchRequestedInterfacesForDesktopId</definition>
        <argsstring>(const QString &amp;desktopId)</argsstring>
        <name>fetchRequestedInterfacesForDesktopId</name>
        <qualifiedname>KWin::fetchRequestedInterfacesForDesktopId</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>desktopId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/serviceutils.h" line="51" column="27" bodyfile="kwin/src/utils/serviceutils.h" bodystart="51" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a6f2410d07982accf197aeb287faad3a8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>QStringList</type>
        <definition>static QStringList KWin::fetchRequestedInterfaces</definition>
        <argsstring>(const QString &amp;executablePath)</argsstring>
        <name>fetchRequestedInterfaces</name>
        <qualifiedname>KWin::fetchRequestedInterfaces</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>executablePath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/serviceutils.h" line="60" column="27" bodyfile="kwin/src/utils/serviceutils.h" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a7f17d7c4fb1866b9484fc3e62192eb86" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>QStringList</type>
        <definition>static QStringList KWin::fetchRestrictedDBusInterfacesFromPid</definition>
        <argsstring>(const uint pid)</argsstring>
        <name>fetchRestrictedDBusInterfacesFromPid</name>
        <qualifiedname>KWin::fetchRestrictedDBusInterfacesFromPid</qualifiedname>
        <param>
          <type>const uint</type>
          <declname>pid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/serviceutils.h" line="65" column="27" bodyfile="kwin/src/utils/serviceutils.h" bodystart="65" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ac26ab809b54c09b53ae17ad0f0825650" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T KWin::alignTimestamp</definition>
        <argsstring>(const T &amp;timestamp, const T &amp;alignment)</argsstring>
        <name>alignTimestamp</name>
        <qualifiedname>KWin::alignTimestamp</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/softwarevsyncmonitor.cpp" line="39" column="3" bodyfile="kwin/src/utils/softwarevsyncmonitor.cpp" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a90f58b3f56693909efaee74cb474d2bc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::generateDesktopId</definition>
        <argsstring>()</argsstring>
        <name>generateDesktopId</name>
        <qualifiedname>KWin::generateDesktopId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/virtualdesktops.cpp" line="34" column="16" bodyfile="kwin/src/virtualdesktops.cpp" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ae1a855c1a125b4e7033fcd849572bd76" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="namespace_k_win_1a72b8a93022757874f9e6f85fcf9bc4e9" kindref="member">RenderingIntent</ref> &gt;</type>
        <definition>static std::optional&lt; RenderingIntent &gt; KWin::waylandToKwinIntent</definition>
        <argsstring>(uint32_t intent)</argsstring>
        <name>waylandToKwinIntent</name>
        <qualifiedname>KWin::waylandToKwinIntent</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>intent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/colormanagement_v1.cpp" line="177" column="22" bodyfile="kwin/src/wayland/colormanagement_v1.cpp" bodystart="177" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a7ff6624a9c1bb8ebb8ecad17624354b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t KWin::kwinTFtoProtoTF</definition>
        <argsstring>(TransferFunction tf)</argsstring>
        <name>kwinTFtoProtoTF</name>
        <qualifiedname>KWin::kwinTFtoProtoTF</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_transfer_function" kindref="compound">TransferFunction</ref></type>
          <declname>tf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/colormanagement_v1.cpp" line="455" column="17" bodyfile="kwin/src/wayland/colormanagement_v1.cpp" bodystart="455" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a2a28bf0137970f0af2e26b0650e0fc82" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; uint32_t &gt;</type>
        <definition>static std::optional&lt; uint32_t &gt; KWin::kwinPrimariesToProtoPrimaires</definition>
        <argsstring>(const Colorimetry &amp;primaries)</argsstring>
        <name>kwinPrimariesToProtoPrimaires</name>
        <qualifiedname>KWin::kwinPrimariesToProtoPrimaires</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref> &amp;</type>
          <declname>primaries</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/colormanagement_v1.cpp" line="470" column="22" bodyfile="kwin/src/wayland/colormanagement_v1.cpp" bodystart="470" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ad1e969fc0a8b4904c8849fdb2c93c57d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1ae822402a75b1dbd6c2afc72f87fa60a6" kindref="member">ContentType</ref></type>
        <definition>static ContentType KWin::waylandToKwinContentType</definition>
        <argsstring>(uint32_t type)</argsstring>
        <name>waylandToKwinContentType</name>
        <qualifiedname>KWin::waylandToKwinContentType</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/contenttype_v1.cpp" line="16" column="20" bodyfile="kwin/src/wayland/contenttype_v1.cpp" bodystart="16" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a3d1726350d5098870147fc966ae094c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArray</type>
        <definition>static QByteArray KWin::shapeName</definition>
        <argsstring>(uint32_t shape)</argsstring>
        <name>shapeName</name>
        <qualifiedname>KWin::shapeName</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/cursorshape_v1.cpp" line="111" column="19" bodyfile="kwin/src/wayland/cursorshape_v1.cpp" bodystart="111" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ad82920a57344769a1df21c256fd44949" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_data_device_manager_interface_1a8aae415a2e33ca11c48d18e128f627b4" kindref="member">DataDeviceManagerInterface::DnDAction</ref></type>
        <definition>static DataDeviceManagerInterface::DnDAction KWin::chooseDndAction</definition>
        <argsstring>(AbstractDataSource *source, DataOfferInterface *offer, Qt::KeyboardModifiers keyboardModifiers)</argsstring>
        <name>chooseDndAction</name>
        <qualifiedname>KWin::chooseDndAction</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_abstract_data_source" kindref="compound">AbstractDataSource</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_data_offer_interface" kindref="compound">DataOfferInterface</ref> *</type>
          <declname>offer</declname>
        </param>
        <param>
          <type>Qt::KeyboardModifiers</type>
          <declname>keyboardModifiers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/datadevice.cpp" line="222" column="46" bodyfile="kwin/src/wayland/datadevice.cpp" bodystart="222" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a0879cd467f1a2bad99d03f8fe6faba49" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QtWaylandServer::frog_color_managed_surface::transfer_function</type>
        <definition>static QtWaylandServer::frog_color_managed_surface::transfer_function KWin::kwinToFrogTransferFunction</definition>
        <argsstring>(TransferFunction tf)</argsstring>
        <name>kwinToFrogTransferFunction</name>
        <qualifiedname>KWin::kwinToFrogTransferFunction</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_transfer_function" kindref="compound">TransferFunction</ref></type>
          <declname>tf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/frog_colormanagement_v1.cpp" line="53" column="71" bodyfile="kwin/src/wayland/frog_colormanagement_v1.cpp" bodystart="53" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a925328c316bf3db9b871b5a6f9d36eae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t KWin::encodePrimary</definition>
        <argsstring>(float primary)</argsstring>
        <name>encodePrimary</name>
        <qualifiedname>KWin::encodePrimary</qualifiedname>
        <param>
          <type>float</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/frog_colormanagement_v1.cpp" line="68" column="10" bodyfile="kwin/src/wayland/frog_colormanagement_v1.cpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aa6557b559c91a82807c9a641d9da57ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::operator==</definition>
        <argsstring>(const LinuxDmaBufV1Feedback::Tranche &amp;t1, const LinuxDmaBufV1Feedback::Tranche &amp;t2)</argsstring>
        <name>operator==</name>
        <qualifiedname>KWin::operator==</qualifiedname>
        <param>
          <type>const <ref refid="struct_k_win_1_1_linux_dma_buf_v1_feedback_1_1_tranche" kindref="compound">LinuxDmaBufV1Feedback::Tranche</ref> &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="struct_k_win_1_1_linux_dma_buf_v1_feedback_1_1_tranche" kindref="compound">LinuxDmaBufV1Feedback::Tranche</ref> &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/linuxdmabufv1clientbuffer.cpp" line="302" column="6" bodyfile="kwin/src/wayland/linuxdmabufv1clientbuffer.cpp" bodystart="302" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ad8d7353781ede12fc2ea521c8813d147" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>quint32</type>
        <definition>static quint32 KWin::kwaylandServerTransformToWaylandTransform</definition>
        <argsstring>(OutputTransform transform)</argsstring>
        <name>kwaylandServerTransformToWaylandTransform</name>
        <qualifiedname>KWin::kwaylandServerTransformToWaylandTransform</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output_transform" kindref="compound">OutputTransform</ref></type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/output.cpp" line="78" column="16" bodyfile="kwin/src/wayland/output.cpp" bodystart="78" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1afba97d78d095c61ddb9dd9df14eb0ceb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>quint32</type>
        <definition>static quint32 KWin::kwaylandServerSubPixelToWaylandSubPixel</definition>
        <argsstring>(Output::SubPixel subPixel)</argsstring>
        <name>kwaylandServerSubPixelToWaylandSubPixel</name>
        <qualifiedname>KWin::kwaylandServerSubPixelToWaylandSubPixel</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output_1ab37109b7ceca7fe10292bb19a3cbc925" kindref="member">Output::SubPixel</ref></type>
          <declname>subPixel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/output.cpp" line="102" column="16" bodyfile="kwin/src/wayland/output.cpp" bodystart="102" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a565ed7775fd31a9f9f48306e02862fb2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QtWaylandServer::kde_output_device_v2::transform</type>
        <definition>static QtWaylandServer::kde_output_device_v2::transform KWin::kwinTransformToOutputDeviceTransform</definition>
        <argsstring>(OutputTransform transform)</argsstring>
        <name>kwinTransformToOutputDeviceTransform</name>
        <qualifiedname>KWin::kwinTransformToOutputDeviceTransform</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output_transform" kindref="compound">OutputTransform</ref></type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/outputdevice_v2.cpp" line="28" column="57" bodyfile="kwin/src/wayland/outputdevice_v2.cpp" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a73a3cd4092c899303f3a73e981c463d6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QtWaylandServer::kde_output_device_v2::subpixel</type>
        <definition>static QtWaylandServer::kde_output_device_v2::subpixel KWin::kwinSubPixelToOutputDeviceSubPixel</definition>
        <argsstring>(Output::SubPixel subPixel)</argsstring>
        <name>kwinSubPixelToOutputDeviceSubPixel</name>
        <qualifiedname>KWin::kwinSubPixelToOutputDeviceSubPixel</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output_1ab37109b7ceca7fe10292bb19a3cbc925" kindref="member">Output::SubPixel</ref></type>
          <declname>subPixel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/outputdevice_v2.cpp" line="33" column="56" bodyfile="kwin/src/wayland/outputdevice_v2.cpp" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aa9f5d7363ba0afd03f056aff19c88a47" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t KWin::kwinCapabilitiesToOutputDeviceCapabilities</definition>
        <argsstring>(Output::Capabilities caps)</argsstring>
        <name>kwinCapabilitiesToOutputDeviceCapabilities</name>
        <qualifiedname>KWin::kwinCapabilitiesToOutputDeviceCapabilities</qualifiedname>
        <param>
          <type>Output::Capabilities</type>
          <declname>caps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/outputdevice_v2.cpp" line="38" column="17" bodyfile="kwin/src/wayland/outputdevice_v2.cpp" bodystart="38" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ac56b9981fe25c71de974f0d1da687a16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QtWaylandServer::kde_output_device_v2::vrr_policy</type>
        <definition>static QtWaylandServer::kde_output_device_v2::vrr_policy KWin::kwinVrrPolicyToOutputDeviceVrrPolicy</definition>
        <argsstring>(VrrPolicy policy)</argsstring>
        <name>kwinVrrPolicyToOutputDeviceVrrPolicy</name>
        <qualifiedname>KWin::kwinVrrPolicyToOutputDeviceVrrPolicy</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a30ebd92a502242a9e136f070cbf9192b" kindref="member">VrrPolicy</ref></type>
          <declname>policy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/outputdevice_v2.cpp" line="71" column="58" bodyfile="kwin/src/wayland/outputdevice_v2.cpp" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a310a6f41dfe4fb9417a72a9582e0754e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QtWaylandServer::kde_output_device_v2::rgb_range</type>
        <definition>static QtWaylandServer::kde_output_device_v2::rgb_range KWin::kwinRgbRangeToOutputDeviceRgbRange</definition>
        <argsstring>(Output::RgbRange range)</argsstring>
        <name>kwinRgbRangeToOutputDeviceRgbRange</name>
        <qualifiedname>KWin::kwinRgbRangeToOutputDeviceRgbRange</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output_1a091c0b392d5241b7208e2a63d0f89a83" kindref="member">Output::RgbRange</ref></type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/outputdevice_v2.cpp" line="76" column="57" bodyfile="kwin/src/wayland/outputdevice_v2.cpp" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a4137aea85da4bdcabd57969ce63dbc39" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QtWaylandServer::kde_output_device_v2::auto_rotate_policy</type>
        <definition>static QtWaylandServer::kde_output_device_v2::auto_rotate_policy KWin::kwinAutoRotationToOutputDeviceAutoRotation</definition>
        <argsstring>(Output::AutoRotationPolicy policy)</argsstring>
        <name>kwinAutoRotationToOutputDeviceAutoRotation</name>
        <qualifiedname>KWin::kwinAutoRotationToOutputDeviceAutoRotation</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output_1ac33fe80a4384201645790e9706b8582b" kindref="member">Output::AutoRotationPolicy</ref></type>
          <declname>policy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/outputdevice_v2.cpp" line="81" column="66" bodyfile="kwin/src/wayland/outputdevice_v2.cpp" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a261ee4e9db86a4eb8d355c0abd517a14" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>quint32</type>
        <definition>static quint32 KWin::pointerButtonStateToWaylandState</definition>
        <argsstring>(PointerButtonState state)</argsstring>
        <name>pointerButtonStateToWaylandState</name>
        <qualifiedname>KWin::pointerButtonStateToWaylandState</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1af04c7f9798b123fe6f74415788dd38d3" kindref="member">PointerButtonState</ref></type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/pointer.cpp" line="213" column="16" bodyfile="kwin/src/wayland/pointer.cpp" bodystart="213" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a242909989663ceee93268100ed706df3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::updateAccumulators</definition>
        <argsstring>(Qt::Orientation orientation, qreal delta, qint32 deltaV120, PointerInterfacePrivate *d, qint32 &amp;valueAxisLowRes, qint32 &amp;valueDiscrete)</argsstring>
        <name>updateAccumulators</name>
        <qualifiedname>KWin::updateAccumulators</qualifiedname>
        <param>
          <type>Qt::Orientation</type>
          <declname>orientation</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>qint32</type>
          <declname>deltaV120</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_pointer_interface_private" kindref="compound">PointerInterfacePrivate</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>qint32 &amp;</type>
          <declname>valueAxisLowRes</declname>
        </param>
        <param>
          <type>qint32 &amp;</type>
          <declname>valueDiscrete</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/pointer.cpp" line="248" column="13" bodyfile="kwin/src/wayland/pointer.cpp" bodystart="248" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1acba59d61961e5b55e29ca934345e89ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QRegion</type>
        <definition>static QRegion KWin::mapScaleOverride</definition>
        <argsstring>(const QRegion &amp;region, qreal scaleOverride)</argsstring>
        <name>mapScaleOverride</name>
        <qualifiedname>KWin::mapScaleOverride</qualifiedname>
        <param>
          <type>const QRegion &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>scaleOverride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/pointerconstraints_v1.cpp" line="19" column="16" bodyfile="kwin/src/wayland/pointerconstraints_v1.cpp" bodystart="19" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a0427e45a5b48fe91acce2284cf188438" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QRegion</type>
        <definition>static QRegion KWin::regionFromResource</definition>
        <argsstring>(::wl_resource *resource)</argsstring>
        <name>regionFromResource</name>
        <qualifiedname>KWin::regionFromResource</qualifiedname>
        <param>
          <type>::wl_resource *</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/pointerconstraints_v1.cpp" line="33" column="16" bodyfile="kwin/src/wayland/pointerconstraints_v1.cpp" bodystart="33" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a63603da13925775a2a7e237be18a0765" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::truncate</definition>
        <argsstring>(const QString &amp;stringIn)</argsstring>
        <name>truncate</name>
        <qualifiedname>KWin::truncate</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>stringIn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Any strings that come from user-defined sources that could exceed the maximum wayland length (e.g. xwayland clients) need to be truncated to the maximumWaylandBufferSize. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/quirks.h" line="17" column="23" bodyfile="kwin/src/wayland/quirks.h" bodystart="17" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a989e158d1ca09d9f6f6050d06852ccea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
        <definition>static SurfaceInterface * KWin::mapToSurfaceInPosition</definition>
        <argsstring>(SurfaceInterface *surface, QPointF &amp;pos)</argsstring>
        <name>mapToSurfaceInPosition</name>
        <qualifiedname>KWin::mapToSurfaceInPosition</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Maps surface to the surface at <computeroutput>pos</computeroutput>, be it <computeroutput>surface</computeroutput> or one of its subsurfaces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/seat.cpp" line="45" column="25" bodyfile="kwin/src/wayland/seat.cpp" bodystart="45" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a14a780253c9f08afa2c9a8c2a40e974f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>quint32</type>
        <definition>static quint32 KWin::qtToWaylandButton</definition>
        <argsstring>(Qt::MouseButton button)</argsstring>
        <name>qtToWaylandButton</name>
        <qualifiedname>KWin::qtToWaylandButton</qualifiedname>
        <param>
          <type>Qt::MouseButton</type>
          <declname>button</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/seat.cpp" line="629" column="16" bodyfile="kwin/src/wayland/seat.cpp" bodystart="629" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aff31be815c940c3b13a9b5c86ea627f5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t KWin::modeWayland</definition>
        <argsstring>(ServerSideDecorationManagerInterface::Mode mode)</argsstring>
        <name>modeWayland</name>
        <qualifiedname>KWin::modeWayland</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_server_side_decoration_manager_interface_1ae26c5e1140d632fc583126a157ba8947" kindref="member">ServerSideDecorationManagerInterface::Mode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/server_decoration.cpp" line="35" column="17" bodyfile="kwin/src/wayland/server_decoration.cpp" bodystart="35" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1af2fa6e3e695dc4fed6109ba2cef0a694" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t KWin::shmFormatToDrmFormat</definition>
        <argsstring>(uint32_t shmFormat)</argsstring>
        <name>shmFormatToDrmFormat</name>
        <qualifiedname>KWin::shmFormatToDrmFormat</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>shmFormat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/shmclientbuffer.cpp" line="44" column="17" bodyfile="kwin/src/wayland/shmclientbuffer.cpp" bodystart="44" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1aa65ece6652932a35e5576030e07e3f55" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::sigbusHandler</definition>
        <argsstring>(int signum, siginfo_t *info, void *context)</argsstring>
        <name>sigbusHandler</name>
        <qualifiedname>KWin::sigbusHandler</qualifiedname>
        <param>
          <type>int</type>
          <declname>signum</declname>
        </param>
        <param>
          <type>siginfo_t *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/shmclientbuffer.cpp" line="214" column="13" bodyfile="kwin/src/wayland/shmclientbuffer.cpp" bodystart="214" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a28c1640d80f2a9fa4e98b234f671d6a9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QRegion</type>
        <definition>static QRegion KWin::map_helper</definition>
        <argsstring>(const QMatrix4x4 &amp;matrix, const QRegion &amp;region)</argsstring>
        <name>map_helper</name>
        <qualifiedname>KWin::map_helper</qualifiedname>
        <param>
          <type>const QMatrix4x4 &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const QRegion &amp;</type>
          <declname>region</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.cpp" line="38" column="16" bodyfile="kwin/src/wayland/surface.cpp" bodystart="38" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a315e1f27785e38c254ecf6059e193b51" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::isAncestor</definition>
        <argsstring>(SurfaceInterface *surface, SurfaceInterface *ancestor)</argsstring>
        <name>isAncestor</name>
        <qualifiedname>KWin::isAncestor</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
          <declname>ancestor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/transaction.cpp" line="179" column="13" bodyfile="kwin/src/wayland/transaction.cpp" bodystart="179" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a9de6e1f75957bd9ec0e2b92584106136" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
        <definition>static SurfaceInterface * KWin::mainSurface</definition>
        <argsstring>(SurfaceInterface *surface)</argsstring>
        <name>mainSurface</name>
        <qualifiedname>KWin::mainSurface</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
          <declname>surface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/transaction.cpp" line="198" column="25" bodyfile="kwin/src/wayland/transaction.cpp" bodystart="198" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a59ac2271bfe24fd43acd09e0031f312c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t KWin::mibToBytes</definition>
        <argsstring>(size_t mib)</argsstring>
        <name>mibToBytes</name>
        <qualifiedname>KWin::mibToBytes</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>mib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland_server.cpp" line="196" column="15" bodyfile="kwin/src/wayland_server.cpp" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a8bc853ffa4e39275fd68d31fdaba5b4d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t KWin::defaultMaxBufferSize</definition>
        <argsstring>()</argsstring>
        <name>defaultMaxBufferSize</name>
        <qualifiedname>KWin::defaultMaxBufferSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland_server.cpp" line="201" column="15" bodyfile="kwin/src/wayland_server.cpp" bodystart="201" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ac3b8627e2158ecb1a88bbd755f9fa363" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
        <definition>static Window * KWin::findWindowInList</definition>
        <argsstring>(const QList&lt; Window * &gt; &amp;windows, const SurfaceInterface *surface)</argsstring>
        <name>findWindowInList</name>
        <qualifiedname>KWin::findWindowInList</qualifiedname>
        <param>
          <type>const QList&lt; <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> * &gt; &amp;</type>
          <declname>windows</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
          <declname>surface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland_server.cpp" line="744" column="15" bodyfile="kwin/src/wayland_server.cpp" bodystart="744" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a820772eeac71cfe988208d4b4e5764a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_wayland_server" kindref="compound">WaylandServer</ref> *</type>
        <definition>WaylandServer * KWin::waylandServer</definition>
        <argsstring>()</argsstring>
        <name>waylandServer</name>
        <qualifiedname>KWin::waylandServer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland_server.h" line="300" column="22" bodyfile="kwin/src/wayland_server.h" bodystart="300" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a20b010dc69290014265d53445321d6a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QDebug</type>
        <definition>KWIN_EXPORT QDebug KWin::operator&lt;&lt;</definition>
        <argsstring>(QDebug debug, const Window *window)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>KWin::operator&lt;&lt;</qualifiedname>
        <param>
          <type>QDebug</type>
          <declname>debug</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.cpp" line="122" column="1" bodyfile="kwin/src/window.cpp" bodystart="122" bodyend="149" declfile="kwin/src/window.h" declline="2130" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a85dcc70cb888195d503606b7aafef183" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QRegion</type>
        <definition>static QRegion KWin::interactiveMoveResizeVisibleSubrectRegion</definition>
        <argsstring>(const QRectF &amp;geometry, Gravity gravity, int minWidth, int minHeight)</argsstring>
        <name>interactiveMoveResizeVisibleSubrectRegion</name>
        <qualifiedname>KWin::interactiveMoveResizeVisibleSubrectRegion</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1a09aef7c112a8b0cdfb6e27a081d50dc8" kindref="member">Gravity</ref></type>
          <declname>gravity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minWidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minHeight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes possible locations for the visible titlebar subrect of height at least <computeroutput>minHeight</computeroutput> and width at least <computeroutput>minWidth</computeroutput>. <computeroutput>geometry</computeroutput> is the geometry of the window, and <computeroutput>gravity</computeroutput> specifies the move/resize mode.</para>
<para>When <computeroutput>gravity</computeroutput> is None, TopLeft, Left, BottomLeft, or Top, returns the <emphasis>top left corner</emphasis> of the visible subrect. When <computeroutput>gravity</computeroutput> is Right, TopRight, or BottomRight, returns the <emphasis>top right corner</emphasis> of the visible subrect. <computeroutput>gravity</computeroutput> being Bottom is not supported, since in this case the titlebar does not move</para>
<para>See doc/moveresizerestriction for more details on algorithm. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.cpp" line="1441" column="16" bodyfile="kwin/src/window.cpp" bodystart="1441" bodyend="1507"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a4c9b08efa558065bd1a772f6bf72d192" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; QPointF &gt;</type>
        <definition>static std::optional&lt; QPointF &gt; KWin::confineInteractiveMove</definition>
        <argsstring>(const QRectF &amp;geometry, int minVisibleWidth, int minVisibleHeight)</argsstring>
        <name>confineInteractiveMove</name>
        <qualifiedname>KWin::confineInteractiveMove</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minVisibleWidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minVisibleHeight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find closest point to move top left corner of window such that a titlebar subrect of size at least <computeroutput>minVisibleWidth</computeroutput> by <computeroutput>minVisibleHeight</computeroutput> is visible.</para>
<para>See doc/moveresizerestriction for more details on algorithm. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.cpp" line="1514" column="22" bodyfile="kwin/src/window.cpp" bodystart="1514" bodyend="1538"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a6e8915e3144b5d15b8fbf93df28e39ec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; QPointF &gt;</type>
        <definition>static std::optional&lt; QPointF &gt; KWin::confineInteractiveResize</definition>
        <argsstring>(const QRectF &amp;geometry, Gravity gravity, int minVisibleWidth, int minVisibleHeight)</argsstring>
        <name>confineInteractiveResize</name>
        <qualifiedname>KWin::confineInteractiveResize</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1a09aef7c112a8b0cdfb6e27a081d50dc8" kindref="member">Gravity</ref></type>
          <declname>gravity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minVisibleWidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minVisibleHeight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find closest point to move anchor corner of window such that a titlebar subrect of size at least <computeroutput>minVisibleWidth</computeroutput> by <computeroutput>minVisibleHeight</computeroutput> is visible.</para>
<para>When <computeroutput>gravity</computeroutput> is None, TopLeft, Left, BottomLeft, or Top, anchor is <emphasis>top left corner</emphasis> When <computeroutput>gravity</computeroutput> is Right, TopRight, or BottomRight, anchor is <emphasis>top right corner</emphasis> When <computeroutput>gravity</computeroutput> is Bottom, anchor is <emphasis>bottom left corner</emphasis></para>
<para>See doc/moveresizerestriction for more details on algorithm. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.cpp" line="1549" column="22" bodyfile="kwin/src/window.cpp" bodystart="1549" bodyend="1664"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a8a60ab425a80b456d190df0b30ac1c88" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::shouldKeepTransientAbove</definition>
        <argsstring>(const Window *parent, const Window *transient)</argsstring>
        <name>shouldKeepTransientAbove</name>
        <qualifiedname>KWin::shouldKeepTransientAbove</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>transient</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.cpp" line="2389" column="13" bodyfile="kwin/src/window.cpp" bodystart="2389" bodyend="2409"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a7b47f142a74fc23e83aba775bd0d335c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QuickTileMode</type>
        <definition>static QuickTileMode KWin::combineQuickTileMode</definition>
        <argsstring>(QuickTileMode mode, QuickTileMode other)</argsstring>
        <name>combineQuickTileMode</name>
        <qualifiedname>KWin::combineQuickTileMode</qualifiedname>
        <param>
          <type>QuickTileMode</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>QuickTileMode</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.cpp" line="3639" column="22" bodyfile="kwin/src/window.cpp" bodystart="3639" bodyend="3687"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ae46d0308da2cbe75a94f86523688d98e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::canSnap</definition>
        <argsstring>(const Window *window, const Window *other)</argsstring>
        <name>canSnap</name>
        <qualifiedname>KWin::canSnap</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/workspace.cpp" line="2557" column="13" bodyfile="kwin/src/workspace.cpp" bodystart="2557" bodyend="2572"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a8700e164bd811b5f862b944a87bb9b85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_workspace" kindref="compound">Workspace</ref> *</type>
        <definition>Workspace * KWin::workspace</definition>
        <argsstring>()</argsstring>
        <name>workspace</name>
        <qualifiedname>KWin::workspace</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/workspace.h" line="871" column="18" bodyfile="kwin/src/workspace.h" bodystart="871" bodyend="874"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1af873003d25e77648bf4c76eb7cf1479f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t KWin::frameEventMask</definition>
        <argsstring>()</argsstring>
        <name>frameEventMask</name>
        <qualifiedname>KWin::frameEventMask</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.cpp" line="53" column="17" bodyfile="kwin/src/x11window.cpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a23af8cfa06d1c626fd90257b05f5a41c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t KWin::wrapperEventMask</definition>
        <argsstring>()</argsstring>
        <name>wrapperEventMask</name>
        <qualifiedname>KWin::wrapperEventMask</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.cpp" line="61" column="17" bodyfile="kwin/src/x11window.cpp" bodystart="61" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a968dc430bef52b89c909e1e689338622" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t KWin::clientEventMask</definition>
        <argsstring>()</argsstring>
        <name>clientEventMask</name>
        <qualifiedname>KWin::clientEventMask</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.cpp" line="69" column="17" bodyfile="kwin/src/x11window.cpp" bodystart="69" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a6e2cc3f6bcfa013a7b1764c62b38262c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::readNameProperty</definition>
        <argsstring>(xcb_window_t w, xcb_atom_t atom)</argsstring>
        <name>readNameProperty</name>
        <qualifiedname>KWin::readNameProperty</qualifiedname>
        <param>
          <type>xcb_window_t</type>
          <declname>w</declname>
        </param>
        <param>
          <type>xcb_atom_t</type>
          <declname>atom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.cpp" line="1932" column="23" bodyfile="kwin/src/x11window.cpp" bodystart="1932" bodyend="1947"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a044a937392083c532d96c580d7e7a7ec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const QChar</type>
        <definition>static const QChar KWin::LRM</definition>
        <argsstring>(0x200E)</argsstring>
        <name>LRM</name>
        <qualifiedname>KWin::LRM</qualifiedname>
        <param>
          <type>0x200E</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.cpp" line="1959" column="20" declfile="kwin/src/x11window.cpp" declline="1959" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a3b118e7fa3dcb2ed1fbf0eecb6404882" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::isPrivilegedInWindowManagement</definition>
        <argsstring>(const ClientConnection *client)</argsstring>
        <name>isPrivilegedInWindowManagement</name>
        <qualifiedname>KWin::isPrivilegedInWindowManagement</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/xdgactivationv1.cpp" line="26" column="13" bodyfile="kwin/src/xdgactivationv1.cpp" bodystart="26" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ac3f92f6d70f40ad085bee1cf58b27ff8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KWin::xkbLogHandler</definition>
        <argsstring>(xkb_context *context, xkb_log_level priority, const char *format, va_list args)</argsstring>
        <name>xkbLogHandler</name>
        <qualifiedname>KWin::xkbLogHandler</qualifiedname>
        <param>
          <type>xkb_context *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>xkb_log_level</type>
          <declname>priority</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/xkb.cpp" line="411" column="13" bodyfile="kwin/src/xkb.cpp" bodystart="411" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1ab20af3fa2b3a16ef4e7bd1557acbb324" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::stringIsEmptyOrNull</definition>
        <argsstring>(const char *str)</argsstring>
        <name>stringIsEmptyOrNull</name>
        <qualifiedname>KWin::stringIsEmptyOrNull</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/xkb.cpp" line="547" column="13" bodyfile="kwin/src/xkb.cpp" bodystart="547" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a9cd58c9489f65ca5b01b17cce460b2a5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::lockFileNameForDisplay</definition>
        <argsstring>(int display)</argsstring>
        <name>lockFileNameForDisplay</name>
        <qualifiedname>KWin::lockFileNameForDisplay</qualifiedname>
        <param>
          <type>int</type>
          <declname>display</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/xwayland/lib/xwaylandsocket.cpp" line="71" column="16" bodyfile="kwin/src/xwayland/lib/xwaylandsocket.cpp" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a0b019e75a3a9e20fe91df5c03a1718a2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString KWin::socketFileNameForDisplay</definition>
        <argsstring>(int display)</argsstring>
        <name>socketFileNameForDisplay</name>
        <qualifiedname>KWin::socketFileNameForDisplay</qualifiedname>
        <param>
          <type>int</type>
          <declname>display</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/xwayland/lib/xwaylandsocket.cpp" line="76" column="16" bodyfile="kwin/src/xwayland/lib/xwaylandsocket.cpp" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a0a8c374f3e17c8b7b2d3d0aefeeb5418" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::tryLockFile</definition>
        <argsstring>(const QString &amp;lockFileName)</argsstring>
        <name>tryLockFile</name>
        <qualifiedname>KWin::tryLockFile</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>lockFileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/xwayland/lib/xwaylandsocket.cpp" line="81" column="13" bodyfile="kwin/src/xwayland/lib/xwaylandsocket.cpp" bodystart="81" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a2ed544a2baefd3c94f3c28e6e70216d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int KWin::listen_helper</definition>
        <argsstring>(const QString &amp;filePath, UnixSocketAddress::Type type, XwaylandSocket::OperationMode mode)</argsstring>
        <name>listen_helper</name>
        <qualifiedname>KWin::listen_helper</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>filePath</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_unix_socket_address_1acac2f5f2d29ecc52abab391893b8cff0" kindref="member">UnixSocketAddress::Type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_xwayland_socket_1a7407be30d4ed2675d42d7b0ee4838ce7" kindref="member">XwaylandSocket::OperationMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/xwayland/lib/xwaylandsocket.cpp" line="109" column="12" bodyfile="kwin/src/xwayland/lib/xwaylandsocket.cpp" bodystart="109" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespace_k_win_1a7d3d0f1b51f0805a86c91f4499ae55a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool KWin::checkSocketsDirectory</definition>
        <argsstring>()</argsstring>
        <name>checkSocketsDirectory</name>
        <qualifiedname>KWin::checkSocketsDirectory</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/xwayland/lib/xwaylandsocket.cpp" line="135" column="13" bodyfile="kwin/src/xwayland/lib/xwaylandsocket.cpp" bodystart="135" bodyend="164"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="kwin/src/3rdparty/colortemperature.h" line="12" column="1"/>
  </compounddef>
</doxygen>
