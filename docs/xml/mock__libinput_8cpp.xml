<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="mock__libinput_8cpp" kind="file" language="C++">
    <compoundname>mock_libinput.cpp</compoundname>
    <includes local="no">config-kwin.h</includes>
    <includes refid="mock__libinput_8h" local="yes">mock_libinput.h</includes>
    <includes local="no">linux/input.h</includes>
    <incdepgraph>
      <node id="1">
        <label>kwin/autotests/libinput/mock_libinput.cpp</label>
        <link refid="mock__libinput_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>mock_libinput.h</label>
        <link refid="mock__libinput_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>QByteArray</label>
      </node>
      <node id="6">
        <label>QList</label>
      </node>
      <node id="7">
        <label>QPointF</label>
      </node>
      <node id="8">
        <label>QSizeF</label>
      </node>
      <node id="9">
        <label>array</label>
      </node>
      <node id="10">
        <label>chrono</label>
      </node>
      <node id="2">
        <label>config-kwin.h</label>
      </node>
      <node id="4">
        <label>libinput.h</label>
      </node>
      <node id="11">
        <label>linux/input.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="mock__libinput_8cpp_1a80efc6bbab881c6785f0184ddc97c5ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_device_keyboard_has_key</definition>
        <argsstring>(struct libinput_device *device, uint32_t code)</argsstring>
        <name>libinput_device_keyboard_has_key</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="15" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="15" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1aa32d887454e8baf8aaeeb635329aef89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_device_has_capability</definition>
        <argsstring>(struct libinput_device *device, enum libinput_device_capability capability)</argsstring>
        <name>libinput_device_has_capability</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>enum libinput_device_capability</type>
          <declname>capability</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="20" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="20" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1af7ca4de946a756d22736e2f7c3f89777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * libinput_device_get_name</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_get_name</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="40" column="12" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a1bd0f134ee55db577b88aaceb4aafaa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * libinput_device_get_sysname</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_get_sysname</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="45" column="12" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ab86a05e7a220d6ccd0d45a79d85339dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * libinput_device_get_output_name</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_get_output_name</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="50" column="12" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ae011910b4a673f1293a20a84be4e52e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int libinput_device_get_id_product</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_get_id_product</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="55" column="14" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ad9e4c074b03da790de5e117c71ce8d50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int libinput_device_get_id_vendor</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_get_id_vendor</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="60" column="14" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a13973d6bd75a99708723e3c6684517c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_device_config_tap_get_finger_count</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_tap_get_finger_count</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="65" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a8bfe1d541dcadaedeedcd7a98d5b7e07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_tap_state</type>
        <definition>enum libinput_config_tap_state libinput_device_config_tap_get_enabled</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_tap_get_enabled</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="70" column="31" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="70" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a3caf860883d4e2e42b7842599da03e56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_status</type>
        <definition>enum libinput_config_status libinput_device_config_tap_set_enabled</definition>
        <argsstring>(struct libinput_device *device, enum libinput_config_tap_state enable)</argsstring>
        <name>libinput_device_config_tap_set_enabled</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>enum libinput_config_tap_state</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="79" column="28" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="79" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1af6906b7344ee8d446594de08b4d065be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_tap_state</type>
        <definition>enum libinput_config_tap_state libinput_device_config_tap_get_default_enabled</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_tap_get_default_enabled</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="88" column="31" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="88" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a1c67925fe57210fc34ee0fa07b8e051a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_drag_state</type>
        <definition>enum libinput_config_drag_state libinput_device_config_tap_get_default_drag_enabled</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_tap_get_default_drag_enabled</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="97" column="32" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="97" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ab75b1a0a6864c8916b13bfced9acc665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_drag_state</type>
        <definition>enum libinput_config_drag_state libinput_device_config_tap_get_drag_enabled</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_tap_get_drag_enabled</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="106" column="32" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="106" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ad4416f89e0a709005854826affd014d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_status</type>
        <definition>enum libinput_config_status libinput_device_config_tap_set_drag_enabled</definition>
        <argsstring>(struct libinput_device *device, enum libinput_config_drag_state enable)</argsstring>
        <name>libinput_device_config_tap_set_drag_enabled</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>enum libinput_config_drag_state</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="115" column="28" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="115" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1aa9ac23a944aa2232397bcd856cc55055" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_drag_lock_state</type>
        <definition>enum libinput_config_drag_lock_state libinput_device_config_tap_get_default_drag_lock_enabled</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_tap_get_default_drag_lock_enabled</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="124" column="37" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="124" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a096a8960db3d6e43c419180270755584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_drag_lock_state</type>
        <definition>enum libinput_config_drag_lock_state libinput_device_config_tap_get_drag_lock_enabled</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_tap_get_drag_lock_enabled</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="133" column="37" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="133" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a8b72d649a4e05a455c1d0ec4194cb755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_status</type>
        <definition>enum libinput_config_status libinput_device_config_tap_set_drag_lock_enabled</definition>
        <argsstring>(struct libinput_device *device, enum libinput_config_drag_lock_state enable)</argsstring>
        <name>libinput_device_config_tap_set_drag_lock_enabled</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>enum libinput_config_drag_lock_state</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="142" column="28" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="142" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a0d440dd9a15b10784d3a72fb8086fd32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_device_config_dwt_is_available</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_dwt_is_available</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="151" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a72b0c0385c5953f263514b95eecd3201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_status</type>
        <definition>enum libinput_config_status libinput_device_config_dwt_set_enabled</definition>
        <argsstring>(struct libinput_device *device, enum libinput_config_dwt_state state)</argsstring>
        <name>libinput_device_config_dwt_set_enabled</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>enum libinput_config_dwt_state</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="156" column="28" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="156" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1af350c6505b5736ec410878b5daf28142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_dwt_state</type>
        <definition>enum libinput_config_dwt_state libinput_device_config_dwt_get_enabled</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_dwt_get_enabled</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="168" column="31" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="168" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a4b386261e05d2a89973148e9ce56731e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_dwt_state</type>
        <definition>enum libinput_config_dwt_state libinput_device_config_dwt_get_default_enabled</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_dwt_get_default_enabled</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="173" column="31" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a77b20c16fe26f385936f1d8cb4a1a560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_device_config_accel_is_available</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_accel_is_available</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="178" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1add921b0caef6fcf05199a93e5ee0728b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_device_config_calibration_has_matrix</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_calibration_has_matrix</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="183" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a09a798f58cc601edd2797780096e9804" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_status</type>
        <definition>enum libinput_config_status libinput_device_config_calibration_set_matrix</definition>
        <argsstring>(struct libinput_device *device, const float matrix[6])</argsstring>
        <name>libinput_device_config_calibration_set_matrix</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>matrix</declname>
          <array>[6]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="188" column="28" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="188" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a3d9f1b9be10e804e170c4ea455bd1f1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_device_config_calibration_get_default_matrix</definition>
        <argsstring>(struct libinput_device *device, float matrix[6])</argsstring>
        <name>libinput_device_config_calibration_get_default_matrix</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>float</type>
          <declname>matrix</declname>
          <array>[6]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="196" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="196" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1aa16e8b272ce94f8037822dc8c89d84a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_device_config_calibration_get_matrix</definition>
        <argsstring>(struct libinput_device *device, float matrix[6])</argsstring>
        <name>libinput_device_config_calibration_get_matrix</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>float</type>
          <declname>matrix</declname>
          <array>[6]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="204" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="204" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a755352f2bbb869446aa591dd9d9c5eaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_device_config_left_handed_is_available</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_left_handed_is_available</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="212" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1aa03e5c609b0b199402048fcd2cf85b24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t libinput_device_config_send_events_get_modes</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_send_events_get_modes</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="217" column="10" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="217" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a998945b1c4f96a9abd3c3a26e5c4166c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_device_config_left_handed_get</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_left_handed_get</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="229" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="229" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a71fba19df9d2cb15904c6351cec1af35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_device_config_accel_get_default_speed</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_accel_get_default_speed</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="234" column="8" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="234" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1aa438a14e32894791e435cb43826ef3a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_device_config_left_handed_get_default</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_left_handed_get_default</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="239" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="239" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1aac7c1b31e0131154d31b9167c876cc3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_device_config_accel_get_speed</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_accel_get_speed</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="244" column="8" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="244" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ac2c57d3f082233b2cea696c8dbffee43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t libinput_device_config_accel_get_profiles</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_accel_get_profiles</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="249" column="10" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a288b904c2c0dcc188e3522291ab997c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_accel_profile</type>
        <definition>enum libinput_config_accel_profile libinput_device_config_accel_get_default_profile</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_accel_get_default_profile</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="254" column="35" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="254" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ac92eb3bcfb9a3e6f670c3ff18451be2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_status</type>
        <definition>enum libinput_config_status libinput_device_config_accel_set_profile</definition>
        <argsstring>(struct libinput_device *device, enum libinput_config_accel_profile profile)</argsstring>
        <name>libinput_device_config_accel_set_profile</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>enum libinput_config_accel_profile</type>
          <declname>profile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="259" column="28" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="259" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a7f61a24d32878b0e8124695c10adef8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_accel_profile</type>
        <definition>enum libinput_config_accel_profile libinput_device_config_accel_get_profile</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_accel_get_profile</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="271" column="35" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="271" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a30f433d7c21fc8e65dd218079ce1a2a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t libinput_device_config_click_get_methods</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_click_get_methods</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="276" column="10" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a574f5bce37a87b6e05a956481748e9b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_click_method</type>
        <definition>enum libinput_config_click_method libinput_device_config_click_get_default_method</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_click_get_default_method</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="281" column="34" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="281" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a6aa5fc908b050beb6c0346a09478cad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_click_method</type>
        <definition>enum libinput_config_click_method libinput_device_config_click_get_method</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_click_get_method</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="286" column="34" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="286" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1adfd0d6c30f8d87ae570c9159953de3c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_status</type>
        <definition>enum libinput_config_status libinput_device_config_click_set_method</definition>
        <argsstring>(struct libinput_device *device, enum libinput_config_click_method method)</argsstring>
        <name>libinput_device_config_click_set_method</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>enum libinput_config_click_method</type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="291" column="28" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="291" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ae945f2120764570f0b7c48b69a035543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t libinput_device_config_send_events_get_mode</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_send_events_get_mode</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="303" column="10" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="303" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1aef671857791fcc889f609f6db96f2fe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t libinput_device_config_send_events_get_default_mode</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_send_events_get_default_mode</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="310" column="10" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="310" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1af21b51406529ee8d39a5b13a9ad428c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
        <definition>struct libinput_device * libinput_device_ref</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_ref</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="315" column="22" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="315" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a17053a451e0e598f23d4d53540f20796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
        <definition>struct libinput_device * libinput_device_unref</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_unref</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="320" column="22" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="320" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ab91ae9014902fafe4f015e1f42233d27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_device_get_size</definition>
        <argsstring>(struct libinput_device *device, double *width, double *height)</argsstring>
        <name>libinput_device_get_size</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>width</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="325" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="325" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1aaf63f10e5120daf174bd7943169f45bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_device_pointer_has_button</definition>
        <argsstring>(struct libinput_device *device, uint32_t code)</argsstring>
        <name>libinput_device_pointer_has_button</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="339" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="339" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a9bbdef04c07804ce7c121133c04d4edf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_status</type>
        <definition>enum libinput_config_status libinput_device_config_left_handed_set</definition>
        <argsstring>(struct libinput_device *device, int left_handed)</argsstring>
        <name>libinput_device_config_left_handed_set</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>int</type>
          <declname>left_handed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="363" column="28" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="363" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a1d9761bb99b445524fb2ea801f946ef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_status</type>
        <definition>enum libinput_config_status libinput_device_config_accel_set_speed</definition>
        <argsstring>(struct libinput_device *device, double speed)</argsstring>
        <name>libinput_device_config_accel_set_speed</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>double</type>
          <declname>speed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="372" column="28" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="372" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1aacc79635146b888ddaf1cb35363b22ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_status</type>
        <definition>enum libinput_config_status libinput_device_config_send_events_set_mode</definition>
        <argsstring>(struct libinput_device *device, uint32_t mode)</argsstring>
        <name>libinput_device_config_send_events_set_mode</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="381" column="28" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="381" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a430a3a7369afd6c5ff722179327df79a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_event_type</type>
        <definition>enum libinput_event_type libinput_event_get_type</definition>
        <argsstring>(struct libinput_event *event)</argsstring>
        <name>libinput_event_get_type</name>
        <param>
          <type>struct <ref refid="structlibinput__event" kindref="compound">libinput_event</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="391" column="25" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="391" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1abf81219e6f456d6342efb7a673e25b28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
        <definition>struct libinput_device * libinput_event_get_device</definition>
        <argsstring>(struct libinput_event *event)</argsstring>
        <name>libinput_event_get_device</name>
        <param>
          <type>struct <ref refid="structlibinput__event" kindref="compound">libinput_event</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="396" column="22" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="396" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a1df956c16e26cbbd911e553ec081022a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libinput_event_destroy</definition>
        <argsstring>(struct libinput_event *event)</argsstring>
        <name>libinput_event_destroy</name>
        <param>
          <type>struct <ref refid="structlibinput__event" kindref="compound">libinput_event</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="401" column="6" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="401" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a0dae62cc4758e281747d6c1b94762f46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structlibinput__event__keyboard" kindref="compound">libinput_event_keyboard</ref> *</type>
        <definition>struct libinput_event_keyboard * libinput_event_get_keyboard_event</definition>
        <argsstring>(struct libinput_event *event)</argsstring>
        <name>libinput_event_get_keyboard_event</name>
        <param>
          <type>struct <ref refid="structlibinput__event" kindref="compound">libinput_event</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="406" column="30" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="406" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1aa70a7e304772d0fdb0e8040958754a21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref> *</type>
        <definition>struct libinput_event_pointer * libinput_event_get_pointer_event</definition>
        <argsstring>(struct libinput_event *event)</argsstring>
        <name>libinput_event_get_pointer_event</name>
        <param>
          <type>struct <ref refid="structlibinput__event" kindref="compound">libinput_event</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="414" column="29" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="414" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a9fbfed65c446d76c77c74f47fde7db72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structlibinput__event__touch" kindref="compound">libinput_event_touch</ref> *</type>
        <definition>struct libinput_event_touch * libinput_event_get_touch_event</definition>
        <argsstring>(struct libinput_event *event)</argsstring>
        <name>libinput_event_get_touch_event</name>
        <param>
          <type>struct <ref refid="structlibinput__event" kindref="compound">libinput_event</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="429" column="27" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="429" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a3a2c45b66575cfc38d4aa340624d9271" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structlibinput__event__gesture" kindref="compound">libinput_event_gesture</ref> *</type>
        <definition>struct libinput_event_gesture * libinput_event_get_gesture_event</definition>
        <argsstring>(struct libinput_event *event)</argsstring>
        <name>libinput_event_get_gesture_event</name>
        <param>
          <type>struct <ref refid="structlibinput__event" kindref="compound">libinput_event</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="443" column="29" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="443" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a797bdfac0367cea193fac960258bbcb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_event_gesture_get_cancelled</definition>
        <argsstring>(struct libinput_event_gesture *event)</argsstring>
        <name>libinput_event_gesture_get_cancelled</name>
        <param>
          <type>struct <ref refid="structlibinput__event__gesture" kindref="compound">libinput_event_gesture</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="458" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="458" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a0c281ad149d3f5e90e96c3073d82765a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t libinput_event_gesture_get_time_usec</definition>
        <argsstring>(struct libinput_event_gesture *event)</argsstring>
        <name>libinput_event_gesture_get_time_usec</name>
        <param>
          <type>struct <ref refid="structlibinput__event__gesture" kindref="compound">libinput_event_gesture</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="466" column="10" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="466" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1acc6909a8adb6992da9cf2638d332e009" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_event_gesture_get_finger_count</definition>
        <argsstring>(struct libinput_event_gesture *event)</argsstring>
        <name>libinput_event_gesture_get_finger_count</name>
        <param>
          <type>struct <ref refid="structlibinput__event__gesture" kindref="compound">libinput_event_gesture</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="471" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="471" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a3888052854155ad133fa837e4f28d771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_event_gesture_get_dx</definition>
        <argsstring>(struct libinput_event_gesture *event)</argsstring>
        <name>libinput_event_gesture_get_dx</name>
        <param>
          <type>struct <ref refid="structlibinput__event__gesture" kindref="compound">libinput_event_gesture</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="476" column="8" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="476" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1abcaa25a116f982acce8d98c0290ef6a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_event_gesture_get_dy</definition>
        <argsstring>(struct libinput_event_gesture *event)</argsstring>
        <name>libinput_event_gesture_get_dy</name>
        <param>
          <type>struct <ref refid="structlibinput__event__gesture" kindref="compound">libinput_event_gesture</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="484" column="8" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="484" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a9220d6e748fada925665cf9075e3812a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_event_gesture_get_dx_unaccelerated</definition>
        <argsstring>(struct libinput_event_gesture *event)</argsstring>
        <name>libinput_event_gesture_get_dx_unaccelerated</name>
        <param>
          <type>struct <ref refid="structlibinput__event__gesture" kindref="compound">libinput_event_gesture</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="492" column="8" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="492" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a52acb898a13ca5e638cd77cdf5983362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_event_gesture_get_dy_unaccelerated</definition>
        <argsstring>(struct libinput_event_gesture *event)</argsstring>
        <name>libinput_event_gesture_get_dy_unaccelerated</name>
        <param>
          <type>struct <ref refid="structlibinput__event__gesture" kindref="compound">libinput_event_gesture</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="497" column="8" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="497" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a946ad3a4d60e728e89e13a6066b59a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_event_gesture_get_scale</definition>
        <argsstring>(struct libinput_event_gesture *event)</argsstring>
        <name>libinput_event_gesture_get_scale</name>
        <param>
          <type>struct <ref refid="structlibinput__event__gesture" kindref="compound">libinput_event_gesture</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="502" column="8" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="502" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a53ed099f051922a765f8e614d96a0fea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_event_gesture_get_angle_delta</definition>
        <argsstring>(struct libinput_event_gesture *event)</argsstring>
        <name>libinput_event_gesture_get_angle_delta</name>
        <param>
          <type>struct <ref refid="structlibinput__event__gesture" kindref="compound">libinput_event_gesture</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="515" column="8" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="515" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ad29cc9f276d9468463d01f65ccf8deaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t libinput_event_keyboard_get_key</definition>
        <argsstring>(struct libinput_event_keyboard *event)</argsstring>
        <name>libinput_event_keyboard_get_key</name>
        <param>
          <type>struct <ref refid="structlibinput__event__keyboard" kindref="compound">libinput_event_keyboard</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="523" column="10" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="523" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1af7b018edbc264ba81a2d475d42ebbd98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_key_state</type>
        <definition>enum libinput_key_state libinput_event_keyboard_get_key_state</definition>
        <argsstring>(struct libinput_event_keyboard *event)</argsstring>
        <name>libinput_event_keyboard_get_key_state</name>
        <param>
          <type>struct <ref refid="structlibinput__event__keyboard" kindref="compound">libinput_event_keyboard</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="528" column="24" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="528" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a1403b8718219a759fdda0c3944fc9beb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t libinput_event_keyboard_get_time_usec</definition>
        <argsstring>(struct libinput_event_keyboard *event)</argsstring>
        <name>libinput_event_keyboard_get_time_usec</name>
        <param>
          <type>struct <ref refid="structlibinput__event__keyboard" kindref="compound">libinput_event_keyboard</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="533" column="10" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="533" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ac221536b90c7beb70b70b52e710291b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_event_pointer_get_absolute_x</definition>
        <argsstring>(struct libinput_event_pointer *event)</argsstring>
        <name>libinput_event_pointer_get_absolute_x</name>
        <param>
          <type>struct <ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="538" column="8" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="538" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a3e097a9bc6dbbb355fb1982912f72d4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_event_pointer_get_absolute_y</definition>
        <argsstring>(struct libinput_event_pointer *event)</argsstring>
        <name>libinput_event_pointer_get_absolute_y</name>
        <param>
          <type>struct <ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="543" column="8" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="543" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a26fa3d0b2bcc7f0a7939b84dc8207021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_event_pointer_get_absolute_x_transformed</definition>
        <argsstring>(struct libinput_event_pointer *event, uint32_t width)</argsstring>
        <name>libinput_event_pointer_get_absolute_x_transformed</name>
        <param>
          <type>struct <ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref> *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="548" column="8" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="548" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1aa48effb21f132f05f280859f3d2a9f23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_event_pointer_get_absolute_y_transformed</definition>
        <argsstring>(struct libinput_event_pointer *event, uint32_t height)</argsstring>
        <name>libinput_event_pointer_get_absolute_y_transformed</name>
        <param>
          <type>struct <ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref> *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="556" column="8" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="556" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a29aaf86185a4c9dfa38d98b1fd4dba53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_event_pointer_get_dx</definition>
        <argsstring>(struct libinput_event_pointer *event)</argsstring>
        <name>libinput_event_pointer_get_dx</name>
        <param>
          <type>struct <ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="564" column="8" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="564" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a8bb38bb120bbc0ad569c701a6e622612" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_event_pointer_get_dy</definition>
        <argsstring>(struct libinput_event_pointer *event)</argsstring>
        <name>libinput_event_pointer_get_dy</name>
        <param>
          <type>struct <ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="569" column="8" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="569" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ad517cc1adc1d43b216804af22499587e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_event_pointer_get_dx_unaccelerated</definition>
        <argsstring>(struct libinput_event_pointer *event)</argsstring>
        <name>libinput_event_pointer_get_dx_unaccelerated</name>
        <param>
          <type>struct <ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="574" column="8" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="574" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a2a9d66358432b4bee5f8c201f8dc8906" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_event_pointer_get_dy_unaccelerated</definition>
        <argsstring>(struct libinput_event_pointer *event)</argsstring>
        <name>libinput_event_pointer_get_dy_unaccelerated</name>
        <param>
          <type>struct <ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="579" column="8" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="579" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1af0997d730299f40dbe3efcfa06c429be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t libinput_event_pointer_get_time_usec</definition>
        <argsstring>(struct libinput_event_pointer *event)</argsstring>
        <name>libinput_event_pointer_get_time_usec</name>
        <param>
          <type>struct <ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="584" column="10" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="584" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a6dc942e706a29d342a2021afaa49548b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t libinput_event_pointer_get_button</definition>
        <argsstring>(struct libinput_event_pointer *event)</argsstring>
        <name>libinput_event_pointer_get_button</name>
        <param>
          <type>struct <ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="589" column="10" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="589" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a41e87521ab2a8b7783cb47a63d71da18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_button_state</type>
        <definition>enum libinput_button_state libinput_event_pointer_get_button_state</definition>
        <argsstring>(struct libinput_event_pointer *event)</argsstring>
        <name>libinput_event_pointer_get_button_state</name>
        <param>
          <type>struct <ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="594" column="27" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="594" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a1fdd37a49eae958aaf78a0596cd5cef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_event_pointer_has_axis</definition>
        <argsstring>(struct libinput_event_pointer *event, enum libinput_pointer_axis axis)</argsstring>
        <name>libinput_event_pointer_has_axis</name>
        <param>
          <type>struct <ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref> *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>enum libinput_pointer_axis</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="599" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="599" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a64ae33acadd4daf2144b906878f64882" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_event_pointer_get_scroll_value</definition>
        <argsstring>(struct libinput_event_pointer *event, enum libinput_pointer_axis axis)</argsstring>
        <name>libinput_event_pointer_get_scroll_value</name>
        <param>
          <type>struct <ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref> *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>enum libinput_pointer_axis</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="608" column="8" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="608" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a31d3c555e912f021d3880d1cd7eb8a49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_event_pointer_get_scroll_value_v120</definition>
        <argsstring>(struct libinput_event_pointer *event, enum libinput_pointer_axis axis)</argsstring>
        <name>libinput_event_pointer_get_scroll_value_v120</name>
        <param>
          <type>struct <ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref> *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>enum libinput_pointer_axis</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="617" column="8" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="617" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a83cc90b988d15037c438f5c457feab5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t libinput_event_touch_get_time_usec</definition>
        <argsstring>(struct libinput_event_touch *event)</argsstring>
        <name>libinput_event_touch_get_time_usec</name>
        <param>
          <type>struct <ref refid="structlibinput__event__touch" kindref="compound">libinput_event_touch</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="626" column="10" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="626" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ac42d0e070811c360cf8ec784349954ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_event_touch_get_x</definition>
        <argsstring>(struct libinput_event_touch *event)</argsstring>
        <name>libinput_event_touch_get_x</name>
        <param>
          <type>struct <ref refid="structlibinput__event__touch" kindref="compound">libinput_event_touch</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="631" column="8" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="631" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a30711113bcef4bc02eda7878a054351c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_event_touch_get_y</definition>
        <argsstring>(struct libinput_event_touch *event)</argsstring>
        <name>libinput_event_touch_get_y</name>
        <param>
          <type>struct <ref refid="structlibinput__event__touch" kindref="compound">libinput_event_touch</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="636" column="8" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="636" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1add04ccc3a7b4564e5aca3c8592f090fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_event_touch_get_x_transformed</definition>
        <argsstring>(struct libinput_event_touch *event, uint32_t width)</argsstring>
        <name>libinput_event_touch_get_x_transformed</name>
        <param>
          <type>struct <ref refid="structlibinput__event__touch" kindref="compound">libinput_event_touch</ref> *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="641" column="8" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="641" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a36af95f47b6d69b581eaeee69927af6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_event_touch_get_y_transformed</definition>
        <argsstring>(struct libinput_event_touch *event, uint32_t height)</argsstring>
        <name>libinput_event_touch_get_y_transformed</name>
        <param>
          <type>struct <ref refid="structlibinput__event__touch" kindref="compound">libinput_event_touch</ref> *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="649" column="8" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="649" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1abac75c78a0a360995e1a521edb38c4da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t libinput_event_touch_get_seat_slot</definition>
        <argsstring>(struct libinput_event_touch *event)</argsstring>
        <name>libinput_event_touch_get_seat_slot</name>
        <param>
          <type>struct <ref refid="structlibinput__event__touch" kindref="compound">libinput_event_touch</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="657" column="9" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="657" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a62a081e6ed8f4096cb9cfae4c00c7207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structlibinput" kindref="compound">libinput</ref> *</type>
        <definition>struct libinput * libinput_udev_create_context</definition>
        <argsstring>(const struct libinput_interface *interface, void *user_data, struct udev *udev)</argsstring>
        <name>libinput_udev_create_context</name>
        <param>
          <type>const struct libinput_interface *</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <param>
          <type>struct udev *</type>
          <declname>udev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="662" column="15" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="662" bodyend="668"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a75a500c54c61cfcecd4c76dbb8022933" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libinput_log_set_priority</definition>
        <argsstring>(struct libinput *libinput, enum libinput_log_priority priority)</argsstring>
        <name>libinput_log_set_priority</name>
        <param>
          <type>struct <ref refid="structlibinput" kindref="compound">libinput</ref> *</type>
          <declname>libinput</declname>
        </param>
        <param>
          <type>enum libinput_log_priority</type>
          <declname>priority</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="670" column="6" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="670" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a43b4e08f791aa4eb1eefa32f6fd7f810" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libinput_log_set_handler</definition>
        <argsstring>(struct libinput *libinput, libinput_log_handler log_handler)</argsstring>
        <name>libinput_log_set_handler</name>
        <param>
          <type>struct <ref refid="structlibinput" kindref="compound">libinput</ref> *</type>
          <declname>libinput</declname>
        </param>
        <param>
          <type>libinput_log_handler</type>
          <declname>log_handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="674" column="6" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="674" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ae129d96d2bd3ed197ad88df6b8175836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structlibinput" kindref="compound">libinput</ref> *</type>
        <definition>struct libinput * libinput_unref</definition>
        <argsstring>(struct libinput *libinput)</argsstring>
        <name>libinput_unref</name>
        <param>
          <type>struct <ref refid="structlibinput" kindref="compound">libinput</ref> *</type>
          <declname>libinput</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="678" column="15" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="678" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a71a60660b30cb476495e75766222d144" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_udev_assign_seat</definition>
        <argsstring>(struct libinput *libinput, const char *seat_id)</argsstring>
        <name>libinput_udev_assign_seat</name>
        <param>
          <type>struct <ref refid="structlibinput" kindref="compound">libinput</ref> *</type>
          <declname>libinput</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>seat_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="688" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="688" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a885a59371d4e8de0e18a2a2a66942e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_get_fd</definition>
        <argsstring>(struct libinput *libinput)</argsstring>
        <name>libinput_get_fd</name>
        <param>
          <type>struct <ref refid="structlibinput" kindref="compound">libinput</ref> *</type>
          <declname>libinput</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="696" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="696" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a271f910ed17461830e48d4cd20483a00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_dispatch</definition>
        <argsstring>(struct libinput *libinput)</argsstring>
        <name>libinput_dispatch</name>
        <param>
          <type>struct <ref refid="structlibinput" kindref="compound">libinput</ref> *</type>
          <declname>libinput</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="701" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="701" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a5dbfe8cfdc544ddf8057b542c2e83eb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structlibinput__event" kindref="compound">libinput_event</ref> *</type>
        <definition>struct libinput_event * libinput_get_event</definition>
        <argsstring>(struct libinput *libinput)</argsstring>
        <name>libinput_get_event</name>
        <param>
          <type>struct <ref refid="structlibinput" kindref="compound">libinput</ref> *</type>
          <declname>libinput</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="706" column="21" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="706" bodyend="709"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a60662dc666f6188dc207467c9d8e99ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libinput_suspend</definition>
        <argsstring>(struct libinput *libinput)</argsstring>
        <name>libinput_suspend</name>
        <param>
          <type>struct <ref refid="structlibinput" kindref="compound">libinput</ref> *</type>
          <declname>libinput</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="711" column="6" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="711" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a5a1ee92fa05df27e3c0f37d524cc17a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_resume</definition>
        <argsstring>(struct libinput *libinput)</argsstring>
        <name>libinput_resume</name>
        <param>
          <type>struct <ref refid="structlibinput" kindref="compound">libinput</ref> *</type>
          <declname>libinput</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="715" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="715" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ad9d32f1fd776fa112e5eaac6419de6b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_device_config_middle_emulation_is_available</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_middle_emulation_is_available</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="720" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="720" bodyend="723"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a584d862a116fb0a26cc95304f8c13eb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_status</type>
        <definition>enum libinput_config_status libinput_device_config_middle_emulation_set_enabled</definition>
        <argsstring>(struct libinput_device *device, enum libinput_config_middle_emulation_state enable)</argsstring>
        <name>libinput_device_config_middle_emulation_set_enabled</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>enum libinput_config_middle_emulation_state</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="725" column="28" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="725" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a4669a9e2eeda7ddd648d340935c40ada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_middle_emulation_state</type>
        <definition>enum libinput_config_middle_emulation_state libinput_device_config_middle_emulation_get_enabled</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_middle_emulation_get_enabled</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="737" column="44" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="737" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a602bf0edd3553972cd2d1f841401578b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_middle_emulation_state</type>
        <definition>enum libinput_config_middle_emulation_state libinput_device_config_middle_emulation_get_default_enabled</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_middle_emulation_get_default_enabled</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="746" column="44" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="746" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a82d1aa961d2bb2f0c72c22e2441a4fc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_device_config_scroll_has_natural_scroll</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_scroll_has_natural_scroll</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="755" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="755" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a958b67193c3948b59add719a68f1b948" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_status</type>
        <definition>enum libinput_config_status libinput_device_config_scroll_set_natural_scroll_enabled</definition>
        <argsstring>(struct libinput_device *device, int enable)</argsstring>
        <name>libinput_device_config_scroll_set_natural_scroll_enabled</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>int</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="760" column="28" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="760" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ab4074b193c4350597d2221c4c34c0d15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_device_config_scroll_get_natural_scroll_enabled</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_scroll_get_natural_scroll_enabled</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="772" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="772" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1aab8cf4106f5836bf92038414b33b3bc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_device_config_scroll_get_default_natural_scroll_enabled</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_scroll_get_default_natural_scroll_enabled</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="777" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="777" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a56125c1b0915ae78078968cdcf9775b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_tap_button_map</type>
        <definition>enum libinput_config_tap_button_map libinput_device_config_tap_get_default_button_map</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_tap_get_default_button_map</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="782" column="36" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="782" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1acc1e504af35eecc37e3381569ec9d2f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_status</type>
        <definition>enum libinput_config_status libinput_device_config_tap_set_button_map</definition>
        <argsstring>(struct libinput_device *device, enum libinput_config_tap_button_map map)</argsstring>
        <name>libinput_device_config_tap_set_button_map</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>enum libinput_config_tap_button_map</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="787" column="28" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="787" bodyend="797"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a51d41bd2b92e1151dab79fe436e9e7fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_tap_button_map</type>
        <definition>enum libinput_config_tap_button_map libinput_device_config_tap_get_button_map</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_tap_get_button_map</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="799" column="36" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="799" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1acaad48862a67ca61cb8e257a7e80ee8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t libinput_device_config_scroll_get_methods</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_scroll_get_methods</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="804" column="10" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="804" bodyend="807"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a844ea06b952aaee8e0643d85d351afb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_scroll_method</type>
        <definition>enum libinput_config_scroll_method libinput_device_config_scroll_get_default_method</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_scroll_get_default_method</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="809" column="35" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="809" bodyend="812"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a482951a2b1faf837e43d30d9c92dc9d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_status</type>
        <definition>enum libinput_config_status libinput_device_config_scroll_set_method</definition>
        <argsstring>(struct libinput_device *device, enum libinput_config_scroll_method method)</argsstring>
        <name>libinput_device_config_scroll_set_method</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>enum libinput_config_scroll_method</type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="814" column="28" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="814" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a4bc3cc3822eea632a9a6cf3760ea1fd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_scroll_method</type>
        <definition>enum libinput_config_scroll_method libinput_device_config_scroll_get_method</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_scroll_get_method</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="826" column="35" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="826" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ac95a25055b22c3631e3c10c0463ca332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_config_status</type>
        <definition>enum libinput_config_status libinput_device_config_scroll_set_button</definition>
        <argsstring>(struct libinput_device *device, uint32_t button)</argsstring>
        <name>libinput_device_config_scroll_set_button</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>button</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="831" column="28" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="831" bodyend="841"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a83623da437d0114b8e3ac29ab771d799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t libinput_device_config_scroll_get_button</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_scroll_get_button</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="843" column="10" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="843" bodyend="846"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ad4aacefb10fab1e401e211ee9ce0c1e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t libinput_device_config_scroll_get_default_button</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_config_scroll_get_default_button</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="848" column="10" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="848" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1acb0d0108ae2360ee3f085a31d5c59ef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_device_switch_has_switch</definition>
        <argsstring>(struct libinput_device *device, enum libinput_switch sw)</argsstring>
        <name>libinput_device_switch_has_switch</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>enum libinput_switch</type>
          <declname>sw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="853" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="853" bodyend="864"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ad0380c81d1259355e1918bc9ac0a9e4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structlibinput__event__switch" kindref="compound">libinput_event_switch</ref> *</type>
        <definition>struct libinput_event_switch * libinput_event_get_switch_event</definition>
        <argsstring>(struct libinput_event *event)</argsstring>
        <name>libinput_event_get_switch_event</name>
        <param>
          <type>struct <ref refid="structlibinput__event" kindref="compound">libinput_event</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="866" column="28" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="866" bodyend="873"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1aef38412db2c718b32b4ec71661b8464c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_switch_state</type>
        <definition>enum libinput_switch_state libinput_event_switch_get_switch_state</definition>
        <argsstring>(struct libinput_event_switch *event)</argsstring>
        <name>libinput_event_switch_get_switch_state</name>
        <param>
          <type>struct <ref refid="structlibinput__event__switch" kindref="compound">libinput_event_switch</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="875" column="27" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="875" bodyend="885"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a7e08e4e4ac10092e2f4d6540394b9c8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t libinput_event_switch_get_time_usec</definition>
        <argsstring>(struct libinput_event_switch *event)</argsstring>
        <name>libinput_event_switch_get_time_usec</name>
        <param>
          <type>struct <ref refid="structlibinput__event__switch" kindref="compound">libinput_event_switch</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="887" column="10" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="887" bodyend="890"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1af05a3c3eb0af48a461240daae498149a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct libinput_event_tablet_pad *</type>
        <definition>struct libinput_event_tablet_pad * libinput_event_get_tablet_pad_event</definition>
        <argsstring>(struct libinput_event *event)</argsstring>
        <name>libinput_event_get_tablet_pad_event</name>
        <param>
          <type>struct <ref refid="structlibinput__event" kindref="compound">libinput_event</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="892" column="32" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="892" bodyend="898"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a59736e418388d40aae80e0b018544efe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct libinput_event_tablet_tool *</type>
        <definition>struct libinput_event_tablet_tool * libinput_event_get_tablet_tool_event</definition>
        <argsstring>(struct libinput_event *event)</argsstring>
        <name>libinput_event_get_tablet_tool_event</name>
        <param>
          <type>struct <ref refid="structlibinput__event" kindref="compound">libinput_event</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="901" column="1" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="901" bodyend="911"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1aa0696b32b500ccc0876396a184e22c01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_device_tablet_pad_get_num_strips</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_tablet_pad_get_num_strips</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="913" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="913" bodyend="916"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a624cd4cb5fcd049fe88b2ab5f0a649cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_device_tablet_pad_get_num_rings</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_tablet_pad_get_num_rings</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="918" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="918" bodyend="921"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a2c5a5703982bcedc71a0470278258710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_device_tablet_pad_get_num_buttons</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_tablet_pad_get_num_buttons</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="923" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="923" bodyend="926"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a4d246393e68fd7c415a6936c92a23643" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_device_tablet_pad_get_num_mode_groups</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_tablet_pad_get_num_mode_groups</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="928" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="928" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a3f3cd853bb8ec0557350b95df6122b7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct libinput_tablet_pad_mode_group *</type>
        <definition>struct libinput_tablet_pad_mode_group * libinput_device_tablet_pad_get_mode_group</definition>
        <argsstring>(struct libinput_device *device, unsigned int index)</argsstring>
        <name>libinput_device_tablet_pad_get_mode_group</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="934" column="1" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="934" bodyend="937"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a6665cafeed47b6b061c702760e7654a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int libinput_tablet_pad_mode_group_get_mode</definition>
        <argsstring>(struct libinput_tablet_pad_mode_group *group)</argsstring>
        <name>libinput_tablet_pad_mode_group_get_mode</name>
        <param>
          <type>struct libinput_tablet_pad_mode_group *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="940" column="1" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="940" bodyend="943"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a63f52e1cdcde522fe6990e4407782d4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int libinput_tablet_pad_mode_group_get_num_modes</definition>
        <argsstring>(struct libinput_tablet_pad_mode_group *group)</argsstring>
        <name>libinput_tablet_pad_mode_group_get_num_modes</name>
        <param>
          <type>struct libinput_tablet_pad_mode_group *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="946" column="1" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="946" bodyend="949"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a6e6efcb715243ec826023071a9271c81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_tablet_pad_mode_group_has_button</definition>
        <argsstring>(struct libinput_tablet_pad_mode_group *group, unsigned int button)</argsstring>
        <name>libinput_tablet_pad_mode_group_has_button</name>
        <param>
          <type>struct libinput_tablet_pad_mode_group *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>button</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="951" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="951" bodyend="955"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a22a228d4e60c38c5d57578291f0947aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_tablet_pad_mode_group_has_ring</definition>
        <argsstring>(struct libinput_tablet_pad_mode_group *group, unsigned int ring)</argsstring>
        <name>libinput_tablet_pad_mode_group_has_ring</name>
        <param>
          <type>struct libinput_tablet_pad_mode_group *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>ring</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="957" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="957" bodyend="961"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a54c2c799139404a00a18d1dda1c7d3c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_tablet_pad_mode_group_has_strip</definition>
        <argsstring>(struct libinput_tablet_pad_mode_group *group, unsigned int strip)</argsstring>
        <name>libinput_tablet_pad_mode_group_has_strip</name>
        <param>
          <type>struct libinput_tablet_pad_mode_group *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>strip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="963" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="963" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a7f9053d7eecf46645cd2de32514c2908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct libinput_device_group *</type>
        <definition>struct libinput_device_group * libinput_device_get_device_group</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_get_device_group</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="970" column="1" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="970" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a5d4e2e015ee99e24ea9ae6c96316d0b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * libinput_device_group_get_user_data</definition>
        <argsstring>(struct libinput_device_group *group)</argsstring>
        <name>libinput_device_group_get_user_data</name>
        <param>
          <type>struct libinput_device_group *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="976" column="1" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="976" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1afdb3ddfb91e6bd38b6356a5bb51547ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libinput_device_led_update</definition>
        <argsstring>(struct libinput_device *device, enum libinput_led leds)</argsstring>
        <name>libinput_device_led_update</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>enum libinput_led</type>
          <declname>leds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="981" column="6" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="981" bodyend="984"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a6243ad6005b2ce2a5ecfd1b04787fe93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libinput_device_set_user_data</definition>
        <argsstring>(struct libinput_device *device, void *user_data)</argsstring>
        <name>libinput_device_set_user_data</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="986" column="6" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="986" bodyend="989"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a2d3032cb39c375a8f3ca94fbbead55c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * libinput_device_get_user_data</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_get_user_data</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="992" column="1" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="992" bodyend="995"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a6f44a77cea0e1695073fa6bd925daf62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>udev_device *</type>
        <definition>udev_device * libinput_device_get_udev_device</definition>
        <argsstring>(struct libinput_device *device)</argsstring>
        <name>libinput_device_get_udev_device</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="997" column="13" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="997" bodyend="1000"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a3b128b24b9fe19a98cb0aaf3624c5ab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_event_tablet_tool_get_x_transformed</definition>
        <argsstring>(struct libinput_event_tablet_tool *event, uint32_t width)</argsstring>
        <name>libinput_event_tablet_tool_get_x_transformed</name>
        <param>
          <type>struct libinput_event_tablet_tool *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="1003" column="1" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="1003" bodyend="1008"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a6c19f3b3679c24f26a46192066f64805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double libinput_event_tablet_tool_get_y_transformed</definition>
        <argsstring>(struct libinput_event_tablet_tool *event, uint32_t height)</argsstring>
        <name>libinput_event_tablet_tool_get_y_transformed</name>
        <param>
          <type>struct libinput_event_tablet_tool *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="1011" column="1" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="1011" bodyend="1015"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a2055fbbf4ce36751d19026a21a907e9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * udev_device_get_syspath</definition>
        <argsstring>(struct udev_device *device)</argsstring>
        <name>udev_device_get_syspath</name>
        <param>
          <type>struct udev_device *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="1017" column="12" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="1017" bodyend="1020"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a17199edc84a9e87093c93ca689f2a218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct libinput_tablet_tool *</type>
        <definition>struct libinput_tablet_tool * libinput_tablet_tool_ref</definition>
        <argsstring>(struct libinput_tablet_tool *tool)</argsstring>
        <name>libinput_tablet_tool_ref</name>
        <param>
          <type>struct libinput_tablet_tool *</type>
          <declname>tool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="1023" column="1" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="1023" bodyend="1026"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a9f646e02abc912d4afa120aaa6c447da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct libinput_tablet_tool *</type>
        <definition>struct libinput_tablet_tool * libinput_tablet_tool_unref</definition>
        <argsstring>(struct libinput_tablet_tool *tool)</argsstring>
        <name>libinput_tablet_tool_unref</name>
        <param>
          <type>struct libinput_tablet_tool *</type>
          <declname>tool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="1029" column="1" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="1029" bodyend="1032"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ac8084f1e2891ccaa9be5faedf4310f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t libinput_tablet_tool_get_serial</definition>
        <argsstring>(struct libinput_tablet_tool *tool)</argsstring>
        <name>libinput_tablet_tool_get_serial</name>
        <param>
          <type>struct libinput_tablet_tool *</type>
          <declname>tool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="1035" column="1" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="1035" bodyend="1038"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a5ba26a193ce809fab9234b2253bcfff8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t libinput_tablet_tool_get_tool_id</definition>
        <argsstring>(struct libinput_tablet_tool *tool)</argsstring>
        <name>libinput_tablet_tool_get_tool_id</name>
        <param>
          <type>struct libinput_tablet_tool *</type>
          <declname>tool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="1041" column="1" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="1041" bodyend="1044"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a879d814a10261d8f379dc26d2789bfa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum libinput_tablet_tool_type</type>
        <definition>enum libinput_tablet_tool_type libinput_tablet_tool_get_type</definition>
        <argsstring>(struct libinput_tablet_tool *tool)</argsstring>
        <name>libinput_tablet_tool_get_type</name>
        <param>
          <type>struct libinput_tablet_tool *</type>
          <declname>tool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="1047" column="1" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="1047" bodyend="1050"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1aa4fa6ae9a0c4f9212a28dbd50ee54af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_tablet_tool_has_pressure</definition>
        <argsstring>(struct libinput_tablet_tool *tool)</argsstring>
        <name>libinput_tablet_tool_has_pressure</name>
        <param>
          <type>struct libinput_tablet_tool *</type>
          <declname>tool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="1052" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="1052" bodyend="1055"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1a6e20b30e6e6cbddbf2cc159b5d6b7046" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_tablet_tool_has_distance</definition>
        <argsstring>(struct libinput_tablet_tool *tool)</argsstring>
        <name>libinput_tablet_tool_has_distance</name>
        <param>
          <type>struct libinput_tablet_tool *</type>
          <declname>tool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="1057" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="1057" bodyend="1060"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ac5470ae95d36cc733f5a9167c087f8d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_tablet_tool_has_tilt</definition>
        <argsstring>(struct libinput_tablet_tool *tool)</argsstring>
        <name>libinput_tablet_tool_has_tilt</name>
        <param>
          <type>struct libinput_tablet_tool *</type>
          <declname>tool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="1062" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="1062" bodyend="1065"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1aab7bcd835ac261f8baace7a1f2f3b26d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_tablet_tool_has_rotation</definition>
        <argsstring>(struct libinput_tablet_tool *tool)</argsstring>
        <name>libinput_tablet_tool_has_rotation</name>
        <param>
          <type>struct libinput_tablet_tool *</type>
          <declname>tool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="1067" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="1067" bodyend="1070"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ae004c5b3a2553ea58673871f69d46a36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_tablet_tool_has_slider</definition>
        <argsstring>(struct libinput_tablet_tool *tool)</argsstring>
        <name>libinput_tablet_tool_has_slider</name>
        <param>
          <type>struct libinput_tablet_tool *</type>
          <declname>tool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="1072" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="1072" bodyend="1075"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1aca9317e6ba30236004b183922270cf67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int libinput_tablet_tool_has_wheel</definition>
        <argsstring>(struct libinput_tablet_tool *tool)</argsstring>
        <name>libinput_tablet_tool_has_wheel</name>
        <param>
          <type>struct libinput_tablet_tool *</type>
          <declname>tool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="1077" column="5" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="1077" bodyend="1080"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ae8559303954fb153f0736a73d96d2aee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * udev_device_get_property_value</definition>
        <argsstring>(struct udev_device *udev_device, const char *key)</argsstring>
        <name>udev_device_get_property_value</name>
        <param>
          <type>struct udev_device *</type>
          <declname>udev_device</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="1082" column="12" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="1082" bodyend="1086"/>
      </memberdef>
      <memberdef kind="function" id="mock__libinput_8cpp_1ae00b8983eaede07d5464a1f99190c436" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>libinput_config_status</type>
        <definition>libinput_config_status libinput_device_config_area_set_rectangle</definition>
        <argsstring>(struct libinput_device *device, const struct libinput_config_area_rectangle *rect)</argsstring>
        <name>libinput_device_config_area_set_rectangle</name>
        <param>
          <type>struct <ref refid="structlibinput__device" kindref="compound">libinput_device</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const struct libinput_config_area_rectangle *</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/libinput/mock_libinput.cpp" line="1089" column="1" bodyfile="kwin/autotests/libinput/mock_libinput.cpp" bodystart="1089" bodyend="1093"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>KWin<sp/>-<sp/>the<sp/>KDE<sp/>window<sp/>manager</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>KDE<sp/>project.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2016<sp/>Martin<sp/>Gräßlin<sp/>&lt;mgraesslin@kde.org&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config-kwin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mock__libinput_8h" kindref="compound">mock_libinput.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;linux/input.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="mock__libinput_8cpp_1a80efc6bbab881c6785f0184ddc97c5ce" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a80efc6bbab881c6785f0184ddc97c5ce" kindref="member">libinput_device_keyboard_has_key</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device,<sp/>uint32_t<sp/>code)</highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1a4cd9c60067cb736c72871be99533e859" kindref="member">keys</ref>.contains(code);</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="mock__libinput_8cpp_1aa32d887454e8baf8aaeeb635329aef89" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1aa32d887454e8baf8aaeeb635329aef89" kindref="member">libinput_device_has_capability</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_device_capability<sp/>capability)</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(capability)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_DEVICE_CAP_KEYBOARD:</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1a4fd96063f8e89634134b0c557f580e35" kindref="member">keyboard</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_DEVICE_CAP_POINTER:</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1ada23f7b711039e078a4c06542f66df4e" kindref="member">pointer</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_DEVICE_CAP_TOUCH:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1a72efbd424f0f5c44a7cae9e59a89d0d0" kindref="member">touch</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_DEVICE_CAP_GESTURE:</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1ae6309dcce9c1b7f90588cf39e704873a" kindref="member">gestureSupported</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_DEVICE_CAP_TABLET_TOOL:</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1a1113858cd508b0889ef9158f254015bc" kindref="member">tabletTool</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_DEVICE_CAP_SWITCH:</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1a1d05ca59d3df076b4ffccda3b08afb8e" kindref="member">switchDevice</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="mock__libinput_8cpp_1af7ca4de946a756d22736e2f7c3f89777" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="mock__libinput_8cpp_1af7ca4de946a756d22736e2f7c3f89777" kindref="member">libinput_device_get_name</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1ab83e5162357f0da62c52d1d6c778283c" kindref="member">name</ref>.constData();</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="mock__libinput_8cpp_1a1bd0f134ee55db577b88aaceb4aafaa7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="mock__libinput_8cpp_1a1bd0f134ee55db577b88aaceb4aafaa7" kindref="member">libinput_device_get_sysname</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1ad97607dd2a577a81dfc1200acd3b426a" kindref="member">sysName</ref>.constData();</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="mock__libinput_8cpp_1ab86a05e7a220d6ccd0d45a79d85339dd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="mock__libinput_8cpp_1ab86a05e7a220d6ccd0d45a79d85339dd" kindref="member">libinput_device_get_output_name</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1a4089d505fcda169b330e11c1da02f79b" kindref="member">outputName</ref>.constData();</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="mock__libinput_8cpp_1ae011910b4a673f1293a20a84be4e52e2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1ae011910b4a673f1293a20a84be4e52e2" kindref="member">libinput_device_get_id_product</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1af20fcbe52efa2aec4257402dda54b790" kindref="member">product</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="mock__libinput_8cpp_1ad9e4c074b03da790de5e117c71ce8d50" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1ad9e4c074b03da790de5e117c71ce8d50" kindref="member">libinput_device_get_id_vendor</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1a0a001fc270a4350f86ac32d6063aab38" kindref="member">vendor</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="mock__libinput_8cpp_1a13973d6bd75a99708723e3c6684517c1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a13973d6bd75a99708723e3c6684517c1" kindref="member">libinput_device_config_tap_get_finger_count</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1aec89d1ec0c69553d39e0dbf2c3857b9d" kindref="member">tapFingerCount</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="mock__libinput_8cpp_1a8bfe1d541dcadaedeedcd7a98d5b7e07" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_tap_state<sp/><ref refid="mock__libinput_8cpp_1a8bfe1d541dcadaedeedcd7a98d5b7e07" kindref="member">libinput_device_config_tap_get_enabled</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;<ref refid="structlibinput__device_1ae61e3cfd05819168fe78706e9c8f657f" kindref="member">tapToClick</ref>)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_TAP_ENABLED;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_TAP_DISABLED;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="mock__libinput_8cpp_1a3caf860883d4e2e42b7842599da03e56" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_status<sp/><ref refid="mock__libinput_8cpp_1a3caf860883d4e2e42b7842599da03e56" kindref="member">libinput_device_config_tap_set_enabled</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_tap_state<sp/>enable)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;<ref refid="structlibinput__device_1ad6e00a3d3703c01da1d71e49f2502398" kindref="member">setTapToClickReturnValue</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device-&gt;<ref refid="structlibinput__device_1ae61e3cfd05819168fe78706e9c8f657f" kindref="member">tapToClick</ref><sp/>=<sp/>(enable<sp/>==<sp/>LIBINPUT_CONFIG_TAP_ENABLED);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_INVALID;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="mock__libinput_8cpp_1af6906b7344ee8d446594de08b4d065be" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_tap_state<sp/><ref refid="mock__libinput_8cpp_1af6906b7344ee8d446594de08b4d065be" kindref="member">libinput_device_config_tap_get_default_enabled</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;<ref refid="structlibinput__device_1aff21296824cba152e4ada24e863f58f6" kindref="member">tapEnabledByDefault</ref>)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_TAP_ENABLED;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_TAP_DISABLED;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="mock__libinput_8cpp_1a1c67925fe57210fc34ee0fa07b8e051a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_drag_state<sp/><ref refid="mock__libinput_8cpp_1a1c67925fe57210fc34ee0fa07b8e051a" kindref="member">libinput_device_config_tap_get_default_drag_enabled</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;<ref refid="structlibinput__device_1ac368501f3db277884699d6e56a9ddac8" kindref="member">tapAndDragEnabledByDefault</ref>)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_DRAG_ENABLED;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_DRAG_DISABLED;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="mock__libinput_8cpp_1ab75b1a0a6864c8916b13bfced9acc665" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_drag_state<sp/><ref refid="mock__libinput_8cpp_1ab75b1a0a6864c8916b13bfced9acc665" kindref="member">libinput_device_config_tap_get_drag_enabled</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;<ref refid="structlibinput__device_1a9fa5aff2c39618894920afc7fb1eab69" kindref="member">tapAndDrag</ref>)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_DRAG_ENABLED;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_DRAG_DISABLED;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="mock__libinput_8cpp_1ad4416f89e0a709005854826affd014d9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_status<sp/><ref refid="mock__libinput_8cpp_1ad4416f89e0a709005854826affd014d9" kindref="member">libinput_device_config_tap_set_drag_enabled</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_drag_state<sp/>enable)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;<ref refid="structlibinput__device_1a36756cbe3aa0b6cc4086384b8cf26cc6" kindref="member">setTapAndDragReturnValue</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device-&gt;<ref refid="structlibinput__device_1a9fa5aff2c39618894920afc7fb1eab69" kindref="member">tapAndDrag</ref><sp/>=<sp/>(enable<sp/>==<sp/>LIBINPUT_CONFIG_DRAG_ENABLED);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_INVALID;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="mock__libinput_8cpp_1aa9ac23a944aa2232397bcd856cc55055" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_drag_lock_state<sp/><ref refid="mock__libinput_8cpp_1aa9ac23a944aa2232397bcd856cc55055" kindref="member">libinput_device_config_tap_get_default_drag_lock_enabled</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;<ref refid="structlibinput__device_1a0cf70c440193906358ea1c6d6e7e395f" kindref="member">tapDragLockEnabledByDefault</ref>)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_DRAG_LOCK_ENABLED;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_DRAG_LOCK_DISABLED;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="mock__libinput_8cpp_1a096a8960db3d6e43c419180270755584" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_drag_lock_state<sp/><ref refid="mock__libinput_8cpp_1a096a8960db3d6e43c419180270755584" kindref="member">libinput_device_config_tap_get_drag_lock_enabled</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;<ref refid="structlibinput__device_1a04163dc3b827d208e0ed2c07dcee783a" kindref="member">tapDragLock</ref>)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_DRAG_LOCK_ENABLED;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_DRAG_LOCK_DISABLED;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="mock__libinput_8cpp_1a8b72d649a4e05a455c1d0ec4194cb755" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_status<sp/><ref refid="mock__libinput_8cpp_1a8b72d649a4e05a455c1d0ec4194cb755" kindref="member">libinput_device_config_tap_set_drag_lock_enabled</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_drag_lock_state<sp/>enable)</highlight></codeline>
<codeline lineno="143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;<ref refid="structlibinput__device_1ae46b3dacdfcce77cc6fb202d3537191b" kindref="member">setTapDragLockReturnValue</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device-&gt;<ref refid="structlibinput__device_1a04163dc3b827d208e0ed2c07dcee783a" kindref="member">tapDragLock</ref><sp/>=<sp/>(enable<sp/>==<sp/>LIBINPUT_CONFIG_DRAG_LOCK_ENABLED);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_INVALID;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="mock__libinput_8cpp_1a0d440dd9a15b10784d3a72fb8086fd32" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a0d440dd9a15b10784d3a72fb8086fd32" kindref="member">libinput_device_config_dwt_is_available</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1a5ec5899579831f454d3b376c0d6eb300" kindref="member">supportsDisableWhileTyping</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="mock__libinput_8cpp_1a72b0c0385c5953f263514b95eecd3201" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_status<sp/><ref refid="mock__libinput_8cpp_1a72b0c0385c5953f263514b95eecd3201" kindref="member">libinput_device_config_dwt_set_enabled</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_dwt_state<sp/><ref refid="x11keyread_8cpp_1a0db44bec6a2ebf1a0cc819b5c9191cee" kindref="member">state</ref>)</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;<ref refid="structlibinput__device_1ad7c17c3a5b1706e02a23b36e47640647" kindref="member">setDisableWhileTypingReturnValue</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device-&gt;<ref refid="structlibinput__device_1a5ec5899579831f454d3b376c0d6eb300" kindref="member">supportsDisableWhileTyping</ref>)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_INVALID;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device-&gt;<ref refid="structlibinput__device_1a7f0e30a57bbda0e187831664ee8e35c0" kindref="member">disableWhileTyping</ref><sp/>=<sp/><ref refid="x11keyread_8cpp_1a0db44bec6a2ebf1a0cc819b5c9191cee" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_INVALID;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="mock__libinput_8cpp_1af350c6505b5736ec410878b5daf28142" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_dwt_state<sp/><ref refid="mock__libinput_8cpp_1af350c6505b5736ec410878b5daf28142" kindref="member">libinput_device_config_dwt_get_enabled</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1a7f0e30a57bbda0e187831664ee8e35c0" kindref="member">disableWhileTyping</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="mock__libinput_8cpp_1a4b386261e05d2a89973148e9ce56731e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_dwt_state<sp/><ref refid="mock__libinput_8cpp_1a4b386261e05d2a89973148e9ce56731e" kindref="member">libinput_device_config_dwt_get_default_enabled</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1a41aba32393f00224ca5d3057a82c7b09" kindref="member">disableWhileTypingEnabledByDefault</ref>;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="mock__libinput_8cpp_1a77b20c16fe26f385936f1d8cb4a1a560" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a77b20c16fe26f385936f1d8cb4a1a560" kindref="member">libinput_device_config_accel_is_available</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1abe3ddee92e48025e6431e3a7aa45d49a" kindref="member">supportsPointerAcceleration</ref>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="mock__libinput_8cpp_1add921b0caef6fcf05199a93e5ee0728b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1add921b0caef6fcf05199a93e5ee0728b" kindref="member">libinput_device_config_calibration_has_matrix</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1a58b9847727fadbf3fa91636334b09d95" kindref="member">supportsCalibrationMatrix</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="mock__libinput_8cpp_1a09a798f58cc601edd2797780096e9804" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_status<sp/><ref refid="mock__libinput_8cpp_1a09a798f58cc601edd2797780096e9804" kindref="member">libinput_device_config_calibration_set_matrix</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>matrix[6])</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device-&gt;<ref refid="structlibinput__device_1aac1bbc1982ad25f429af4f02cb7aecf3" kindref="member">calibrationMatrix</ref>[i]<sp/>=<sp/>matrix[i];</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="mock__libinput_8cpp_1a3d9f1b9be10e804e170c4ea455bd1f1b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a3d9f1b9be10e804e170c4ea455bd1f1b" kindref="member">libinput_device_config_calibration_get_default_matrix</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>matrix[6])</highlight></codeline>
<codeline lineno="197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix[i]<sp/>=<sp/>device-&gt;<ref refid="structlibinput__device_1a3e7d3e588c49c12aebb08974b171feee" kindref="member">defaultCalibrationMatrix</ref>[i];</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1ad6e4df319d7450acde9ea173336ca387" kindref="member">defaultCalibrationMatrixIsIdentity</ref><sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="mock__libinput_8cpp_1aa16e8b272ce94f8037822dc8c89d84a5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1aa16e8b272ce94f8037822dc8c89d84a5" kindref="member">libinput_device_config_calibration_get_matrix</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>matrix[6])</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix[i]<sp/>=<sp/>device-&gt;<ref refid="structlibinput__device_1aac1bbc1982ad25f429af4f02cb7aecf3" kindref="member">calibrationMatrix</ref>[i];</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1a9e04a11171472b788691bbe1f4871d4d" kindref="member">calibrationMatrixIsIdentity</ref><sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="mock__libinput_8cpp_1a755352f2bbb869446aa591dd9d9c5eaf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a755352f2bbb869446aa591dd9d9c5eaf" kindref="member">libinput_device_config_left_handed_is_available</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1a1e35c325d7dc3d909a539dfec478f5b2" kindref="member">supportsLeftHanded</ref>;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="mock__libinput_8cpp_1aa03e5c609b0b199402048fcd2cf85b24" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="mock__libinput_8cpp_1aa03e5c609b0b199402048fcd2cf85b24" kindref="member">libinput_device_config_send_events_get_modes</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>modes<sp/>=<sp/>LIBINPUT_CONFIG_SEND_EVENTS_ENABLED;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;<ref refid="structlibinput__device_1a2bcf4f4ac5b09f680d75912043bd7cdb" kindref="member">supportsDisableEvents</ref>)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modes<sp/>|=<sp/>LIBINPUT_CONFIG_SEND_EVENTS_DISABLED;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;<ref refid="structlibinput__device_1ad27e8ead07a822fade528e2806f84121" kindref="member">supportsDisableEventsOnExternalMouse</ref>)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modes<sp/>|=<sp/>LIBINPUT_CONFIG_SEND_EVENTS_DISABLED_ON_EXTERNAL_MOUSE;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>modes;</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="mock__libinput_8cpp_1a998945b1c4f96a9abd3c3a26e5c4166c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a998945b1c4f96a9abd3c3a26e5c4166c" kindref="member">libinput_device_config_left_handed_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1a909f60737f14d9532cbaa8fcbda99b37" kindref="member">leftHanded</ref>;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="mock__libinput_8cpp_1a71fba19df9d2cb15904c6351cec1af35" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a71fba19df9d2cb15904c6351cec1af35" kindref="member">libinput_device_config_accel_get_default_speed</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1ab2f079ee3e411b00c50e688f75540cc4" kindref="member">defaultPointerAcceleration</ref>;</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="mock__libinput_8cpp_1aa438a14e32894791e435cb43826ef3a9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1aa438a14e32894791e435cb43826ef3a9" kindref="member">libinput_device_config_left_handed_get_default</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1aa7ff6977b9ee94eb8165ba6cfca78fa0" kindref="member">leftHandedEnabledByDefault</ref>;</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="mock__libinput_8cpp_1aac7c1b31e0131154d31b9167c876cc3b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1aac7c1b31e0131154d31b9167c876cc3b" kindref="member">libinput_device_config_accel_get_speed</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1a730b0b3be992fb15ac957bd8979d7b60" kindref="member">pointerAcceleration</ref>;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249" refid="mock__libinput_8cpp_1ac2c57d3f082233b2cea696c8dbffee43" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="mock__libinput_8cpp_1ac2c57d3f082233b2cea696c8dbffee43" kindref="member">libinput_device_config_accel_get_profiles</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="250"><highlight class="normal">{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1ae7602da7ca26ce6e2f44956c4b92676d" kindref="member">supportedPointerAccelerationProfiles</ref>;</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="mock__libinput_8cpp_1a288b904c2c0dcc188e3522291ab997c9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_accel_profile<sp/><ref refid="mock__libinput_8cpp_1a288b904c2c0dcc188e3522291ab997c9" kindref="member">libinput_device_config_accel_get_default_profile</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1a8fb48ad9b1cecc06e5c02b2bc42cfd4a" kindref="member">defaultPointerAccelerationProfile</ref>;</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259" refid="mock__libinput_8cpp_1ac92eb3bcfb9a3e6f670c3ff18451be2f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_status<sp/><ref refid="mock__libinput_8cpp_1ac92eb3bcfb9a3e6f670c3ff18451be2f" kindref="member">libinput_device_config_accel_set_profile</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_accel_profile<sp/>profile)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;<ref refid="structlibinput__device_1a680175d38dabe800c2bb28ed9dc125ea" kindref="member">setPointerAccelerationProfileReturnValue</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(device-&gt;<ref refid="structlibinput__device_1ae7602da7ca26ce6e2f44956c4b92676d" kindref="member">supportedPointerAccelerationProfiles</ref><sp/>&amp;<sp/>profile)<sp/>&amp;&amp;<sp/>profile<sp/>!=<sp/>LIBINPUT_CONFIG_ACCEL_PROFILE_NONE)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_INVALID;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device-&gt;<ref refid="structlibinput__device_1a7b003c8a64e08c14f256484aafb14d9f" kindref="member">pointerAccelerationProfile</ref><sp/>=<sp/>profile;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_INVALID;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="mock__libinput_8cpp_1a7f61a24d32878b0e8124695c10adef8f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_accel_profile<sp/><ref refid="mock__libinput_8cpp_1a7f61a24d32878b0e8124695c10adef8f" kindref="member">libinput_device_config_accel_get_profile</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1a7b003c8a64e08c14f256484aafb14d9f" kindref="member">pointerAccelerationProfile</ref>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276" refid="mock__libinput_8cpp_1a30f433d7c21fc8e65dd218079ce1a2a9" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="mock__libinput_8cpp_1a30f433d7c21fc8e65dd218079ce1a2a9" kindref="member">libinput_device_config_click_get_methods</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1a49e6c8fcde34330a56e4d19d193d1cb9" kindref="member">supportedClickMethods</ref>;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="mock__libinput_8cpp_1a574f5bce37a87b6e05a956481748e9b4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_click_method<sp/><ref refid="mock__libinput_8cpp_1a574f5bce37a87b6e05a956481748e9b4" kindref="member">libinput_device_config_click_get_default_method</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="282"><highlight class="normal">{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1adfdce7a18ffb42889f4473d7b5045603" kindref="member">defaultClickMethod</ref>;</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="mock__libinput_8cpp_1a6aa5fc908b050beb6c0346a09478cad4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_click_method<sp/><ref refid="mock__libinput_8cpp_1a6aa5fc908b050beb6c0346a09478cad4" kindref="member">libinput_device_config_click_get_method</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1abd34442515d55e7054c71179d6ff74ae" kindref="member">clickMethod</ref>;</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="mock__libinput_8cpp_1adfd0d6c30f8d87ae570c9159953de3c9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_status<sp/><ref refid="mock__libinput_8cpp_1adfd0d6c30f8d87ae570c9159953de3c9" kindref="member">libinput_device_config_click_set_method</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_click_method<sp/>method)</highlight></codeline>
<codeline lineno="292"><highlight class="normal">{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;<ref refid="structlibinput__device_1a398d0827c5c9c1f92cb31fe6c8675247" kindref="member">setClickMethodReturnValue</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(device-&gt;<ref refid="structlibinput__device_1a49e6c8fcde34330a56e4d19d193d1cb9" kindref="member">supportedClickMethods</ref><sp/>&amp;<sp/>method)<sp/>&amp;&amp;<sp/>method<sp/>!=<sp/>LIBINPUT_CONFIG_CLICK_METHOD_NONE)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_INVALID;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device-&gt;<ref refid="structlibinput__device_1abd34442515d55e7054c71179d6ff74ae" kindref="member">clickMethod</ref><sp/>=<sp/>method;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_INVALID;</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303" refid="mock__libinput_8cpp_1ae945f2120764570f0b7c48b69a035543" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="mock__libinput_8cpp_1ae945f2120764570f0b7c48b69a035543" kindref="member">libinput_device_config_send_events_get_mode</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="304"><highlight class="normal">{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>enabledBits<sp/>=<sp/>device-&gt;<ref refid="structlibinput__device_1a9a52319cd0c4703a39597e1d5faa2721" kindref="member">enabled</ref><sp/>?<sp/>LIBINPUT_CONFIG_SEND_EVENTS_ENABLED<sp/>:<sp/>LIBINPUT_CONFIG_SEND_EVENTS_DISABLED;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>externalMouseBits<sp/>=<sp/>device-&gt;<ref refid="structlibinput__device_1a8003a8fa9572a004c038a4a367db4f65" kindref="member">disableEventsOnExternalMouse</ref><sp/>?<sp/>LIBINPUT_CONFIG_SEND_EVENTS_DISABLED_ON_EXTERNAL_MOUSE<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>enabledBits<sp/>|<sp/>externalMouseBits;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="mock__libinput_8cpp_1aef671857791fcc889f609f6db96f2fe6" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="mock__libinput_8cpp_1aef671857791fcc889f609f6db96f2fe6" kindref="member">libinput_device_config_send_events_get_default_mode</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_SEND_EVENTS_ENABLED;</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315" refid="mock__libinput_8cpp_1af21b51406529ee8d39a5b13a9ad428c0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*<ref refid="mock__libinput_8cpp_1af21b51406529ee8d39a5b13a9ad428c0" kindref="member">libinput_device_ref</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="316"><highlight class="normal">{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device;</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="mock__libinput_8cpp_1a17053a451e0e598f23d4d53540f20796" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*<ref refid="mock__libinput_8cpp_1a17053a451e0e598f23d4d53540f20796" kindref="member">libinput_device_unref</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device;</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325" refid="mock__libinput_8cpp_1ab91ae9014902fafe4f015e1f42233d27" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1ab91ae9014902fafe4f015e1f42233d27" kindref="member">libinput_device_get_size</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*width,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*height)</highlight></codeline>
<codeline lineno="326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;<ref refid="structlibinput__device_1aa25d85ec2cf0ce22f05709afcb928527" kindref="member">deviceSizeReturnValue</ref>)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1aa25d85ec2cf0ce22f05709afcb928527" kindref="member">deviceSizeReturnValue</ref>;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*width<sp/>=<sp/>device-&gt;<ref refid="structlibinput__device_1ab258e327e63fd657dce457f31dbe5414" kindref="member">deviceSize</ref>.width();</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(height)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*height<sp/>=<sp/>device-&gt;<ref refid="structlibinput__device_1ab258e327e63fd657dce457f31dbe5414" kindref="member">deviceSize</ref>.height();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1aa25d85ec2cf0ce22f05709afcb928527" kindref="member">deviceSizeReturnValue</ref>;</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="mock__libinput_8cpp_1aaf63f10e5120daf174bd7943169f45bf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1aaf63f10e5120daf174bd7943169f45bf" kindref="member">libinput_device_pointer_has_button</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device,<sp/>uint32_t<sp/>code)</highlight></codeline>
<codeline lineno="340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(code)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BTN_LEFT:</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1afcc0ce381dac73e020a3d212ccf8fda8" kindref="member">supportedButtons</ref>.testFlag(Qt::LeftButton);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BTN_MIDDLE:</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1afcc0ce381dac73e020a3d212ccf8fda8" kindref="member">supportedButtons</ref>.testFlag(Qt::MiddleButton);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BTN_RIGHT:</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1afcc0ce381dac73e020a3d212ccf8fda8" kindref="member">supportedButtons</ref>.testFlag(Qt::RightButton);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BTN_SIDE:</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1afcc0ce381dac73e020a3d212ccf8fda8" kindref="member">supportedButtons</ref>.testFlag(Qt::ExtraButton1);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BTN_EXTRA:</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1afcc0ce381dac73e020a3d212ccf8fda8" kindref="member">supportedButtons</ref>.testFlag(Qt::ExtraButton2);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BTN_FORWARD:</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1afcc0ce381dac73e020a3d212ccf8fda8" kindref="member">supportedButtons</ref>.testFlag(Qt::ExtraButton3);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BTN_BACK:</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1afcc0ce381dac73e020a3d212ccf8fda8" kindref="member">supportedButtons</ref>.testFlag(Qt::ExtraButton4);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BTN_TASK:</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1afcc0ce381dac73e020a3d212ccf8fda8" kindref="member">supportedButtons</ref>.testFlag(Qt::ExtraButton5);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363" refid="mock__libinput_8cpp_1a9bbdef04c07804ce7c121133c04d4edf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_status<sp/><ref refid="mock__libinput_8cpp_1a9bbdef04c07804ce7c121133c04d4edf" kindref="member">libinput_device_config_left_handed_set</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left_handed)</highlight></codeline>
<codeline lineno="364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;<ref refid="structlibinput__device_1a5a034a8884ccac1eef0ddaa0e46d55a3" kindref="member">setLeftHandedReturnValue</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device-&gt;<ref refid="structlibinput__device_1a909f60737f14d9532cbaa8fcbda99b37" kindref="member">leftHanded</ref><sp/>=<sp/>left_handed;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_INVALID;</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372" refid="mock__libinput_8cpp_1a1d9761bb99b445524fb2ea801f946ef1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_status<sp/><ref refid="mock__libinput_8cpp_1a1d9761bb99b445524fb2ea801f946ef1" kindref="member">libinput_device_config_accel_set_speed</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>speed)</highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;<ref refid="structlibinput__device_1a5cc800aed9b662df8e0eb9bb4d6d21b3" kindref="member">setPointerAccelerationReturnValue</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device-&gt;<ref refid="structlibinput__device_1a730b0b3be992fb15ac957bd8979d7b60" kindref="member">pointerAcceleration</ref><sp/>=<sp/>speed;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_INVALID;</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381" refid="mock__libinput_8cpp_1aacc79635146b888ddaf1cb35363b22ce" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_status<sp/><ref refid="mock__libinput_8cpp_1aacc79635146b888ddaf1cb35363b22ce" kindref="member">libinput_device_config_send_events_set_mode</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device,<sp/>uint32_t<sp/>mode)</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;<ref refid="structlibinput__device_1a8e6e2b108be5e178feff11cbf85d2d56" kindref="member">setEnableModeReturnValue</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device-&gt;<ref refid="structlibinput__device_1a9a52319cd0c4703a39597e1d5faa2721" kindref="member">enabled</ref><sp/>=<sp/>(mode<sp/>&amp;<sp/>LIBINPUT_CONFIG_SEND_EVENTS_DISABLED)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device-&gt;<ref refid="structlibinput__device_1a8003a8fa9572a004c038a4a367db4f65" kindref="member">disableEventsOnExternalMouse</ref><sp/>=<sp/>mode<sp/>&amp;<sp/>LIBINPUT_CONFIG_SEND_EVENTS_DISABLED_ON_EXTERNAL_MOUSE;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_INVALID;</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391" refid="mock__libinput_8cpp_1a430a3a7369afd6c5ff722179327df79a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_event_type<sp/><ref refid="mock__libinput_8cpp_1a430a3a7369afd6c5ff722179327df79a" kindref="member">libinput_event_get_type</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event" kindref="compound">libinput_event</ref><sp/>*event)</highlight></codeline>
<codeline lineno="392"><highlight class="normal">{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;type;</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396" refid="mock__libinput_8cpp_1abf81219e6f456d6342efb7a673e25b28" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*<ref refid="mock__libinput_8cpp_1abf81219e6f456d6342efb7a673e25b28" kindref="member">libinput_event_get_device</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event" kindref="compound">libinput_event</ref><sp/>*event)</highlight></codeline>
<codeline lineno="397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;device;</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401" refid="mock__libinput_8cpp_1a1df956c16e26cbbd911e553ec081022a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a1df956c16e26cbbd911e553ec081022a" kindref="member">libinput_event_destroy</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event" kindref="compound">libinput_event</ref><sp/>*event)</highlight></codeline>
<codeline lineno="402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>event;</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406" refid="mock__libinput_8cpp_1a0dae62cc4758e281747d6c1b94762f46" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlibinput__event__keyboard" kindref="compound">libinput_event_keyboard</ref><sp/>*<ref refid="mock__libinput_8cpp_1a0dae62cc4758e281747d6c1b94762f46" kindref="member">libinput_event_get_keyboard_event</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event" kindref="compound">libinput_event</ref><sp/>*event)</highlight></codeline>
<codeline lineno="407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event-&gt;<ref refid="structlibinput__event_1a7fdcbb0bac521cd033ea91dda5cc2949" kindref="member">type</ref><sp/>==<sp/>LIBINPUT_EVENT_KEYBOARD_KEY)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="structlibinput__event__keyboard" kindref="compound">libinput_event_keyboard</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(event);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414" refid="mock__libinput_8cpp_1aa70a7e304772d0fdb0e8040958754a21" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref><sp/>*<ref refid="mock__libinput_8cpp_1aa70a7e304772d0fdb0e8040958754a21" kindref="member">libinput_event_get_pointer_event</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event" kindref="compound">libinput_event</ref><sp/>*event)</highlight></codeline>
<codeline lineno="415"><highlight class="normal">{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(event-&gt;<ref refid="structlibinput__event_1a7fdcbb0bac521cd033ea91dda5cc2949" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_POINTER_MOTION:</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_POINTER_MOTION_ABSOLUTE:</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_POINTER_BUTTON:</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_POINTER_SCROLL_WHEEL:</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_POINTER_SCROLL_FINGER:</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS:</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(event);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="mock__libinput_8cpp_1a9fbfed65c446d76c77c74f47fde7db72" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlibinput__event__touch" kindref="compound">libinput_event_touch</ref><sp/>*<ref refid="mock__libinput_8cpp_1a9fbfed65c446d76c77c74f47fde7db72" kindref="member">libinput_event_get_touch_event</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event" kindref="compound">libinput_event</ref><sp/>*event)</highlight></codeline>
<codeline lineno="430"><highlight class="normal">{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(event-&gt;<ref refid="structlibinput__event_1a7fdcbb0bac521cd033ea91dda5cc2949" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_TOUCH_DOWN:</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_TOUCH_UP:</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_TOUCH_MOTION:</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_TOUCH_CANCEL:</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_TOUCH_FRAME:</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="structlibinput__event__touch" kindref="compound">libinput_event_touch</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(event);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443" refid="mock__libinput_8cpp_1a3a2c45b66575cfc38d4aa340624d9271" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlibinput__event__gesture" kindref="compound">libinput_event_gesture</ref><sp/>*<ref refid="mock__libinput_8cpp_1a3a2c45b66575cfc38d4aa340624d9271" kindref="member">libinput_event_get_gesture_event</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event" kindref="compound">libinput_event</ref><sp/>*event)</highlight></codeline>
<codeline lineno="444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(event-&gt;<ref refid="structlibinput__event_1a7fdcbb0bac521cd033ea91dda5cc2949" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_GESTURE_PINCH_BEGIN:</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_GESTURE_PINCH_UPDATE:</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_GESTURE_PINCH_END:</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN:</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE:</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_GESTURE_SWIPE_END:</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="structlibinput__event__gesture" kindref="compound">libinput_event_gesture</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(event);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458" refid="mock__libinput_8cpp_1a797bdfac0367cea193fac960258bbcb8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a797bdfac0367cea193fac960258bbcb8" kindref="member">libinput_event_gesture_get_cancelled</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__gesture" kindref="compound">libinput_event_gesture</ref><sp/>*event)</highlight></codeline>
<codeline lineno="459"><highlight class="normal">{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event-&gt;<ref refid="structlibinput__event_1a7fdcbb0bac521cd033ea91dda5cc2949" kindref="member">type</ref><sp/>==<sp/>LIBINPUT_EVENT_GESTURE_PINCH_END<sp/>||<sp/>event-&gt;<ref refid="structlibinput__event_1a7fdcbb0bac521cd033ea91dda5cc2949" kindref="member">type</ref><sp/>==<sp/>LIBINPUT_EVENT_GESTURE_SWIPE_END)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;cancelled;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466" refid="mock__libinput_8cpp_1a0c281ad149d3f5e90e96c3073d82765a" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="mock__libinput_8cpp_1a0c281ad149d3f5e90e96c3073d82765a" kindref="member">libinput_event_gesture_get_time_usec</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__gesture" kindref="compound">libinput_event_gesture</ref><sp/>*event)</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;<ref refid="structlibinput__event_1a6a1efbba137200361aca11a8909813f9" kindref="member">time</ref>.count();</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471" refid="mock__libinput_8cpp_1acc6909a8adb6992da9cf2638d332e009" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1acc6909a8adb6992da9cf2638d332e009" kindref="member">libinput_event_gesture_get_finger_count</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__gesture" kindref="compound">libinput_event_gesture</ref><sp/>*event)</highlight></codeline>
<codeline lineno="472"><highlight class="normal">{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;fingerCount;</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="mock__libinput_8cpp_1a3888052854155ad133fa837e4f28d771" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a3888052854155ad133fa837e4f28d771" kindref="member">libinput_event_gesture_get_dx</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__gesture" kindref="compound">libinput_event_gesture</ref><sp/>*event)</highlight></codeline>
<codeline lineno="477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event-&gt;<ref refid="structlibinput__event_1a7fdcbb0bac521cd033ea91dda5cc2949" kindref="member">type</ref><sp/>==<sp/>LIBINPUT_EVENT_GESTURE_PINCH_UPDATE<sp/>||<sp/>event-&gt;<ref refid="structlibinput__event_1a7fdcbb0bac521cd033ea91dda5cc2949" kindref="member">type</ref><sp/>==<sp/>LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;delta.x();</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484" refid="mock__libinput_8cpp_1abcaa25a116f982acce8d98c0290ef6a2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1abcaa25a116f982acce8d98c0290ef6a2" kindref="member">libinput_event_gesture_get_dy</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__gesture" kindref="compound">libinput_event_gesture</ref><sp/>*event)</highlight></codeline>
<codeline lineno="485"><highlight class="normal">{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event-&gt;<ref refid="structlibinput__event_1a7fdcbb0bac521cd033ea91dda5cc2949" kindref="member">type</ref><sp/>==<sp/>LIBINPUT_EVENT_GESTURE_PINCH_UPDATE<sp/>||<sp/>event-&gt;<ref refid="structlibinput__event_1a7fdcbb0bac521cd033ea91dda5cc2949" kindref="member">type</ref><sp/>==<sp/>LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE)<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;delta.y();</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492" refid="mock__libinput_8cpp_1a9220d6e748fada925665cf9075e3812a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a9220d6e748fada925665cf9075e3812a" kindref="member">libinput_event_gesture_get_dx_unaccelerated</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__gesture" kindref="compound">libinput_event_gesture</ref><sp/>*event)</highlight></codeline>
<codeline lineno="493"><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a3888052854155ad133fa837e4f28d771" kindref="member">libinput_event_gesture_get_dx</ref>(event);</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497" refid="mock__libinput_8cpp_1a52acb898a13ca5e638cd77cdf5983362" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a52acb898a13ca5e638cd77cdf5983362" kindref="member">libinput_event_gesture_get_dy_unaccelerated</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__gesture" kindref="compound">libinput_event_gesture</ref><sp/>*event)</highlight></codeline>
<codeline lineno="498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1abcaa25a116f982acce8d98c0290ef6a2" kindref="member">libinput_event_gesture_get_dy</ref>(event);</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502" refid="mock__libinput_8cpp_1a946ad3a4d60e728e89e13a6066b59a20" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a946ad3a4d60e728e89e13a6066b59a20" kindref="member">libinput_event_gesture_get_scale</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__gesture" kindref="compound">libinput_event_gesture</ref><sp/>*event)</highlight></codeline>
<codeline lineno="503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(event-&gt;<ref refid="structlibinput__event_1a7fdcbb0bac521cd033ea91dda5cc2949" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_GESTURE_PINCH_BEGIN:</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1.0;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_GESTURE_PINCH_UPDATE:</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_GESTURE_PINCH_END:</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;scale;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515" refid="mock__libinput_8cpp_1a53ed099f051922a765f8e614d96a0fea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a53ed099f051922a765f8e614d96a0fea" kindref="member">libinput_event_gesture_get_angle_delta</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__gesture" kindref="compound">libinput_event_gesture</ref><sp/>*event)</highlight></codeline>
<codeline lineno="516"><highlight class="normal">{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event-&gt;<ref refid="structlibinput__event_1a7fdcbb0bac521cd033ea91dda5cc2949" kindref="member">type</ref><sp/>==<sp/>LIBINPUT_EVENT_GESTURE_PINCH_UPDATE)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;angleDelta;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523" refid="mock__libinput_8cpp_1ad29cc9f276d9468463d01f65ccf8deaf" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="mock__libinput_8cpp_1ad29cc9f276d9468463d01f65ccf8deaf" kindref="member">libinput_event_keyboard_get_key</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__keyboard" kindref="compound">libinput_event_keyboard</ref><sp/>*event)</highlight></codeline>
<codeline lineno="524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;key;</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528" refid="mock__libinput_8cpp_1af7b018edbc264ba81a2d475d42ebbd98" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_key_state<sp/><ref refid="mock__libinput_8cpp_1af7b018edbc264ba81a2d475d42ebbd98" kindref="member">libinput_event_keyboard_get_key_state</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__keyboard" kindref="compound">libinput_event_keyboard</ref><sp/>*event)</highlight></codeline>
<codeline lineno="529"><highlight class="normal">{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;state;</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533" refid="mock__libinput_8cpp_1a1403b8718219a759fdda0c3944fc9beb" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="mock__libinput_8cpp_1a1403b8718219a759fdda0c3944fc9beb" kindref="member">libinput_event_keyboard_get_time_usec</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__keyboard" kindref="compound">libinput_event_keyboard</ref><sp/>*event)</highlight></codeline>
<codeline lineno="534"><highlight class="normal">{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;time.count();</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538" refid="mock__libinput_8cpp_1ac221536b90c7beb70b70b52e710291b5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1ac221536b90c7beb70b70b52e710291b5" kindref="member">libinput_event_pointer_get_absolute_x</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref><sp/>*event)</highlight></codeline>
<codeline lineno="539"><highlight class="normal">{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;absolutePos.x();</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543" refid="mock__libinput_8cpp_1a3e097a9bc6dbbb355fb1982912f72d4c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a3e097a9bc6dbbb355fb1982912f72d4c" kindref="member">libinput_event_pointer_get_absolute_y</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref><sp/>*event)</highlight></codeline>
<codeline lineno="544"><highlight class="normal">{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;absolutePos.y();</highlight></codeline>
<codeline lineno="546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548" refid="mock__libinput_8cpp_1a26fa3d0b2bcc7f0a7939b84dc8207021" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a26fa3d0b2bcc7f0a7939b84dc8207021" kindref="member">libinput_event_pointer_get_absolute_x_transformed</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref><sp/>*event,<sp/>uint32_t<sp/>width)</highlight></codeline>
<codeline lineno="549"><highlight class="normal">{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deviceWidth<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deviceHeight<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__libinput_8cpp_1ab91ae9014902fafe4f015e1f42233d27" kindref="member">libinput_device_get_size</ref>(event-&gt;<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>,<sp/>&amp;deviceWidth,<sp/>&amp;deviceHeight);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;absolutePos.x()<sp/>/<sp/>deviceWidth<sp/>*<sp/>width;</highlight></codeline>
<codeline lineno="554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556" refid="mock__libinput_8cpp_1aa48effb21f132f05f280859f3d2a9f23" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1aa48effb21f132f05f280859f3d2a9f23" kindref="member">libinput_event_pointer_get_absolute_y_transformed</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref><sp/>*event,<sp/>uint32_t<sp/>height)</highlight></codeline>
<codeline lineno="557"><highlight class="normal">{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deviceWidth<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deviceHeight<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__libinput_8cpp_1ab91ae9014902fafe4f015e1f42233d27" kindref="member">libinput_device_get_size</ref>(event-&gt;<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>,<sp/>&amp;deviceWidth,<sp/>&amp;deviceHeight);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;absolutePos.y()<sp/>/<sp/>deviceHeight<sp/>*<sp/>height;</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564" refid="mock__libinput_8cpp_1a29aaf86185a4c9dfa38d98b1fd4dba53" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a29aaf86185a4c9dfa38d98b1fd4dba53" kindref="member">libinput_event_pointer_get_dx</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref><sp/>*event)</highlight></codeline>
<codeline lineno="565"><highlight class="normal">{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;delta.x();</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569" refid="mock__libinput_8cpp_1a8bb38bb120bbc0ad569c701a6e622612" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a8bb38bb120bbc0ad569c701a6e622612" kindref="member">libinput_event_pointer_get_dy</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref><sp/>*event)</highlight></codeline>
<codeline lineno="570"><highlight class="normal">{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;delta.y();</highlight></codeline>
<codeline lineno="572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574" refid="mock__libinput_8cpp_1ad517cc1adc1d43b216804af22499587e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1ad517cc1adc1d43b216804af22499587e" kindref="member">libinput_event_pointer_get_dx_unaccelerated</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref><sp/>*event)</highlight></codeline>
<codeline lineno="575"><highlight class="normal">{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;delta.x();</highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579" refid="mock__libinput_8cpp_1a2a9d66358432b4bee5f8c201f8dc8906" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a2a9d66358432b4bee5f8c201f8dc8906" kindref="member">libinput_event_pointer_get_dy_unaccelerated</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref><sp/>*event)</highlight></codeline>
<codeline lineno="580"><highlight class="normal">{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;delta.y();</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584" refid="mock__libinput_8cpp_1af0997d730299f40dbe3efcfa06c429be" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="mock__libinput_8cpp_1af0997d730299f40dbe3efcfa06c429be" kindref="member">libinput_event_pointer_get_time_usec</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref><sp/>*event)</highlight></codeline>
<codeline lineno="585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;time.count();</highlight></codeline>
<codeline lineno="587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589" refid="mock__libinput_8cpp_1a6dc942e706a29d342a2021afaa49548b" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="mock__libinput_8cpp_1a6dc942e706a29d342a2021afaa49548b" kindref="member">libinput_event_pointer_get_button</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref><sp/>*event)</highlight></codeline>
<codeline lineno="590"><highlight class="normal">{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;button;</highlight></codeline>
<codeline lineno="592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594" refid="mock__libinput_8cpp_1a41e87521ab2a8b7783cb47a63d71da18" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_button_state<sp/><ref refid="mock__libinput_8cpp_1a41e87521ab2a8b7783cb47a63d71da18" kindref="member">libinput_event_pointer_get_button_state</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref><sp/>*event)</highlight></codeline>
<codeline lineno="595"><highlight class="normal">{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;buttonState;</highlight></codeline>
<codeline lineno="597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599" refid="mock__libinput_8cpp_1a1fdd37a49eae958aaf78a0596cd5cef5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a1fdd37a49eae958aaf78a0596cd5cef5" kindref="member">libinput_event_pointer_has_axis</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref><sp/>*event,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_pointer_axis<sp/>axis)</highlight></codeline>
<codeline lineno="600"><highlight class="normal">{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(axis<sp/>==<sp/>LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;verticalAxis;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;horizontalAxis;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608" refid="mock__libinput_8cpp_1a64ae33acadd4daf2144b906878f64882" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a64ae33acadd4daf2144b906878f64882" kindref="member">libinput_event_pointer_get_scroll_value</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref><sp/>*event,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_pointer_axis<sp/>axis)</highlight></codeline>
<codeline lineno="609"><highlight class="normal">{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(axis<sp/>==<sp/>LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;verticalScrollValue;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;horizontalScrollValue;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617" refid="mock__libinput_8cpp_1a31d3c555e912f021d3880d1cd7eb8a49" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a31d3c555e912f021d3880d1cd7eb8a49" kindref="member">libinput_event_pointer_get_scroll_value_v120</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__pointer" kindref="compound">libinput_event_pointer</ref><sp/>*event,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_pointer_axis<sp/>axis)</highlight></codeline>
<codeline lineno="618"><highlight class="normal">{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(axis<sp/>==<sp/>LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;verticalScrollValueV120;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;horizontalScrollValueV120;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626" refid="mock__libinput_8cpp_1a83cc90b988d15037c438f5c457feab5e" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="mock__libinput_8cpp_1a83cc90b988d15037c438f5c457feab5e" kindref="member">libinput_event_touch_get_time_usec</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__touch" kindref="compound">libinput_event_touch</ref><sp/>*event)</highlight></codeline>
<codeline lineno="627"><highlight class="normal">{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;time.count();</highlight></codeline>
<codeline lineno="629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631" refid="mock__libinput_8cpp_1ac42d0e070811c360cf8ec784349954ba" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1ac42d0e070811c360cf8ec784349954ba" kindref="member">libinput_event_touch_get_x</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__touch" kindref="compound">libinput_event_touch</ref><sp/>*event)</highlight></codeline>
<codeline lineno="632"><highlight class="normal">{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;absolutePos.x();</highlight></codeline>
<codeline lineno="634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636" refid="mock__libinput_8cpp_1a30711113bcef4bc02eda7878a054351c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a30711113bcef4bc02eda7878a054351c" kindref="member">libinput_event_touch_get_y</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__touch" kindref="compound">libinput_event_touch</ref><sp/>*event)</highlight></codeline>
<codeline lineno="637"><highlight class="normal">{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;absolutePos.y();</highlight></codeline>
<codeline lineno="639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641" refid="mock__libinput_8cpp_1add04ccc3a7b4564e5aca3c8592f090fe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1add04ccc3a7b4564e5aca3c8592f090fe" kindref="member">libinput_event_touch_get_x_transformed</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__touch" kindref="compound">libinput_event_touch</ref><sp/>*event,<sp/>uint32_t<sp/>width)</highlight></codeline>
<codeline lineno="642"><highlight class="normal">{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deviceWidth<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deviceHeight<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__libinput_8cpp_1ab91ae9014902fafe4f015e1f42233d27" kindref="member">libinput_device_get_size</ref>(event-&gt;<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>,<sp/>&amp;deviceWidth,<sp/>&amp;deviceHeight);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;absolutePos.x()<sp/>/<sp/>deviceWidth<sp/>*<sp/>width;</highlight></codeline>
<codeline lineno="647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649" refid="mock__libinput_8cpp_1a36af95f47b6d69b581eaeee69927af6f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a36af95f47b6d69b581eaeee69927af6f" kindref="member">libinput_event_touch_get_y_transformed</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__touch" kindref="compound">libinput_event_touch</ref><sp/>*event,<sp/>uint32_t<sp/>height)</highlight></codeline>
<codeline lineno="650"><highlight class="normal">{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deviceWidth<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deviceHeight<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mock__libinput_8cpp_1ab91ae9014902fafe4f015e1f42233d27" kindref="member">libinput_device_get_size</ref>(event-&gt;<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>,<sp/>&amp;deviceWidth,<sp/>&amp;deviceHeight);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;absolutePos.y()<sp/>/<sp/>deviceHeight<sp/>*<sp/>height;</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657" refid="mock__libinput_8cpp_1abac75c78a0a360995e1a521edb38c4da" refkind="member"><highlight class="normal">int32_t<sp/><ref refid="mock__libinput_8cpp_1abac75c78a0a360995e1a521edb38c4da" kindref="member">libinput_event_touch_get_seat_slot</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__touch" kindref="compound">libinput_event_touch</ref><sp/>*event)</highlight></codeline>
<codeline lineno="658"><highlight class="normal">{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;slot;</highlight></codeline>
<codeline lineno="660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662" refid="mock__libinput_8cpp_1a62a081e6ed8f4096cb9cfae4c00c7207" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlibinput" kindref="compound">libinput</ref><sp/>*<ref refid="mock__libinput_8cpp_1a62a081e6ed8f4096cb9cfae4c00c7207" kindref="member">libinput_udev_create_context</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>libinput_interface<sp/>*interface,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user_data,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>udev<sp/>*udev)</highlight></codeline>
<codeline lineno="663"><highlight class="normal">{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!udev)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structlibinput" kindref="compound">libinput</ref>;</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670" refid="mock__libinput_8cpp_1a75a500c54c61cfcecd4c76dbb8022933" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a75a500c54c61cfcecd4c76dbb8022933" kindref="member">libinput_log_set_priority</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput" kindref="compound">libinput</ref><sp/>*<ref refid="structlibinput" kindref="compound">libinput</ref>,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_log_priority<sp/>priority)</highlight></codeline>
<codeline lineno="671"><highlight class="normal">{</highlight></codeline>
<codeline lineno="672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674" refid="mock__libinput_8cpp_1a43b4e08f791aa4eb1eefa32f6fd7f810" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a43b4e08f791aa4eb1eefa32f6fd7f810" kindref="member">libinput_log_set_handler</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput" kindref="compound">libinput</ref><sp/>*<ref refid="structlibinput" kindref="compound">libinput</ref>,<sp/>libinput_log_handler<sp/>log_handler)</highlight></codeline>
<codeline lineno="675"><highlight class="normal">{</highlight></codeline>
<codeline lineno="676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678" refid="mock__libinput_8cpp_1ae129d96d2bd3ed197ad88df6b8175836" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlibinput" kindref="compound">libinput</ref><sp/>*<ref refid="mock__libinput_8cpp_1ae129d96d2bd3ed197ad88df6b8175836" kindref="member">libinput_unref</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput" kindref="compound">libinput</ref><sp/>*<ref refid="structlibinput" kindref="compound">libinput</ref>)</highlight></codeline>
<codeline lineno="679"><highlight class="normal">{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlibinput" kindref="compound">libinput</ref>-&gt;<ref refid="structlibinput_1a095a586538c64e4fee469d6c88069b58" kindref="member">refCount</ref>--;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structlibinput" kindref="compound">libinput</ref>-&gt;<ref refid="structlibinput_1a095a586538c64e4fee469d6c88069b58" kindref="member">refCount</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="structlibinput" kindref="compound">libinput</ref>;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structlibinput" kindref="compound">libinput</ref>;</highlight></codeline>
<codeline lineno="686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688" refid="mock__libinput_8cpp_1a71a60660b30cb476495e75766222d144" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a71a60660b30cb476495e75766222d144" kindref="member">libinput_udev_assign_seat</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput" kindref="compound">libinput</ref><sp/>*<ref refid="structlibinput" kindref="compound">libinput</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*seat_id)</highlight></codeline>
<codeline lineno="689"><highlight class="normal">{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structlibinput" kindref="compound">libinput</ref>-&gt;<ref refid="structlibinput_1a67ee8049c798acb4a125ee424eb64f5a" kindref="member">assignSeatRetVal</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlibinput" kindref="compound">libinput</ref>-&gt;<ref refid="structlibinput_1ab2a1a9d53695291ddf13494cc21d470b" kindref="member">seat</ref><sp/>=<sp/>QByteArray(seat_id);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structlibinput" kindref="compound">libinput</ref>-&gt;<ref refid="structlibinput_1a67ee8049c798acb4a125ee424eb64f5a" kindref="member">assignSeatRetVal</ref>;</highlight></codeline>
<codeline lineno="694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696" refid="mock__libinput_8cpp_1a885a59371d4e8de0e18a2a2a66942e11" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a885a59371d4e8de0e18a2a2a66942e11" kindref="member">libinput_get_fd</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput" kindref="compound">libinput</ref><sp/>*<ref refid="structlibinput" kindref="compound">libinput</ref>)</highlight></codeline>
<codeline lineno="697"><highlight class="normal">{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701" refid="mock__libinput_8cpp_1a271f910ed17461830e48d4cd20483a00" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a271f910ed17461830e48d4cd20483a00" kindref="member">libinput_dispatch</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput" kindref="compound">libinput</ref><sp/>*<ref refid="structlibinput" kindref="compound">libinput</ref>)</highlight></codeline>
<codeline lineno="702"><highlight class="normal">{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706" refid="mock__libinput_8cpp_1a5dbfe8cfdc544ddf8057b542c2e83eb8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlibinput__event" kindref="compound">libinput_event</ref><sp/>*<ref refid="mock__libinput_8cpp_1a5dbfe8cfdc544ddf8057b542c2e83eb8" kindref="member">libinput_get_event</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput" kindref="compound">libinput</ref><sp/>*<ref refid="structlibinput" kindref="compound">libinput</ref>)</highlight></codeline>
<codeline lineno="707"><highlight class="normal">{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711" refid="mock__libinput_8cpp_1a60662dc666f6188dc207467c9d8e99ab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a60662dc666f6188dc207467c9d8e99ab" kindref="member">libinput_suspend</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput" kindref="compound">libinput</ref><sp/>*<ref refid="structlibinput" kindref="compound">libinput</ref>)</highlight></codeline>
<codeline lineno="712"><highlight class="normal">{</highlight></codeline>
<codeline lineno="713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715" refid="mock__libinput_8cpp_1a5a1ee92fa05df27e3c0f37d524cc17a6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a5a1ee92fa05df27e3c0f37d524cc17a6" kindref="member">libinput_resume</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput" kindref="compound">libinput</ref><sp/>*<ref refid="structlibinput" kindref="compound">libinput</ref>)</highlight></codeline>
<codeline lineno="716"><highlight class="normal">{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720" refid="mock__libinput_8cpp_1ad9d32f1fd776fa112e5eaac6419de6b7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1ad9d32f1fd776fa112e5eaac6419de6b7" kindref="member">libinput_device_config_middle_emulation_is_available</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>)</highlight></codeline>
<codeline lineno="721"><highlight class="normal">{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1ade78bb6d6cb8c51b3ebe025bc5c1d777" kindref="member">supportsMiddleEmulation</ref>;</highlight></codeline>
<codeline lineno="723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725" refid="mock__libinput_8cpp_1a584d862a116fb0a26cc95304f8c13eb1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_status<sp/><ref refid="mock__libinput_8cpp_1a584d862a116fb0a26cc95304f8c13eb1" kindref="member">libinput_device_config_middle_emulation_set_enabled</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_middle_emulation_state<sp/>enable)</highlight></codeline>
<codeline lineno="726"><highlight class="normal">{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1a5ec3699d7580859d1cb4ee86b1fdf231" kindref="member">setMiddleEmulationReturnValue</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1ade78bb6d6cb8c51b3ebe025bc5c1d777" kindref="member">supportsMiddleEmulation</ref>)<sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_INVALID;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1a38cc31dc3ae9e2bc11f2c2537c35aa90" kindref="member">middleEmulation</ref><sp/>=<sp/>(enable<sp/>==<sp/>LIBINPUT_CONFIG_MIDDLE_EMULATION_ENABLED);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_INVALID;</highlight></codeline>
<codeline lineno="735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737" refid="mock__libinput_8cpp_1a4669a9e2eeda7ddd648d340935c40ada" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_middle_emulation_state<sp/><ref refid="mock__libinput_8cpp_1a4669a9e2eeda7ddd648d340935c40ada" kindref="member">libinput_device_config_middle_emulation_get_enabled</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>)</highlight></codeline>
<codeline lineno="738"><highlight class="normal">{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1a38cc31dc3ae9e2bc11f2c2537c35aa90" kindref="member">middleEmulation</ref>)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_MIDDLE_EMULATION_ENABLED;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_MIDDLE_EMULATION_DISABLED;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746" refid="mock__libinput_8cpp_1a602bf0edd3553972cd2d1f841401578b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_middle_emulation_state<sp/><ref refid="mock__libinput_8cpp_1a602bf0edd3553972cd2d1f841401578b" kindref="member">libinput_device_config_middle_emulation_get_default_enabled</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>)</highlight></codeline>
<codeline lineno="747"><highlight class="normal">{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1ad56f2ef83209c9705d6f909f5b5d2998" kindref="member">middleEmulationEnabledByDefault</ref>)<sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_MIDDLE_EMULATION_ENABLED;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_MIDDLE_EMULATION_DISABLED;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755" refid="mock__libinput_8cpp_1a82d1aa961d2bb2f0c72c22e2441a4fc3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a82d1aa961d2bb2f0c72c22e2441a4fc3" kindref="member">libinput_device_config_scroll_has_natural_scroll</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>)</highlight></codeline>
<codeline lineno="756"><highlight class="normal">{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1af3342d9cb2a5e6e305e3e64ebcdd2827" kindref="member">supportsNaturalScroll</ref>;</highlight></codeline>
<codeline lineno="758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760" refid="mock__libinput_8cpp_1a958b67193c3948b59add719a68f1b948" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_status<sp/><ref refid="mock__libinput_8cpp_1a958b67193c3948b59add719a68f1b948" kindref="member">libinput_device_config_scroll_set_natural_scroll_enabled</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="761"><highlight class="normal">{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1a11f5390153807d9a4922365f89e4d0bd" kindref="member">setNaturalScrollReturnValue</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1af3342d9cb2a5e6e305e3e64ebcdd2827" kindref="member">supportsNaturalScroll</ref>)<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_INVALID;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1ab5c260b790dd9b7d68b47a3951ac5838" kindref="member">naturalScroll</ref><sp/>=<sp/>enable;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_INVALID;</highlight></codeline>
<codeline lineno="770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772" refid="mock__libinput_8cpp_1ab4074b193c4350597d2221c4c34c0d15" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1ab4074b193c4350597d2221c4c34c0d15" kindref="member">libinput_device_config_scroll_get_natural_scroll_enabled</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>)</highlight></codeline>
<codeline lineno="773"><highlight class="normal">{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1ab5c260b790dd9b7d68b47a3951ac5838" kindref="member">naturalScroll</ref>;</highlight></codeline>
<codeline lineno="775"><highlight class="normal">}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777" refid="mock__libinput_8cpp_1aab8cf4106f5836bf92038414b33b3bc3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1aab8cf4106f5836bf92038414b33b3bc3" kindref="member">libinput_device_config_scroll_get_default_natural_scroll_enabled</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>)</highlight></codeline>
<codeline lineno="778"><highlight class="normal">{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1acd983a2927387d4e1306025f4c49e267" kindref="member">naturalScrollEnabledByDefault</ref>;</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782" refid="mock__libinput_8cpp_1a56125c1b0915ae78078968cdcf9775b3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_tap_button_map<sp/><ref refid="mock__libinput_8cpp_1a56125c1b0915ae78078968cdcf9775b3" kindref="member">libinput_device_config_tap_get_default_button_map</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>)</highlight></codeline>
<codeline lineno="783"><highlight class="normal">{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1ac968350a91ff8f77fa7dd03dfc63724b" kindref="member">defaultTapButtonMap</ref>;</highlight></codeline>
<codeline lineno="785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787" refid="mock__libinput_8cpp_1acc1e504af35eecc37e3381569ec9d2f8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_status<sp/><ref refid="mock__libinput_8cpp_1acc1e504af35eecc37e3381569ec9d2f8" kindref="member">libinput_device_config_tap_set_button_map</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_tap_button_map<sp/>map)</highlight></codeline>
<codeline lineno="788"><highlight class="normal">{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1a7579d57a161bfe51460fb30f577e206f" kindref="member">setTapButtonMapReturnValue</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1aec89d1ec0c69553d39e0dbf2c3857b9d" kindref="member">tapFingerCount</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_INVALID;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1abac8042f0358024b94033a561bbd69c0" kindref="member">tapButtonMap</ref><sp/>=<sp/>map;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_INVALID;</highlight></codeline>
<codeline lineno="797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799" refid="mock__libinput_8cpp_1a51d41bd2b92e1151dab79fe436e9e7fc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_tap_button_map<sp/><ref refid="mock__libinput_8cpp_1a51d41bd2b92e1151dab79fe436e9e7fc" kindref="member">libinput_device_config_tap_get_button_map</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>)</highlight></codeline>
<codeline lineno="800"><highlight class="normal">{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1abac8042f0358024b94033a561bbd69c0" kindref="member">tapButtonMap</ref>;</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804" refid="mock__libinput_8cpp_1acaad48862a67ca61cb8e257a7e80ee8c" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="mock__libinput_8cpp_1acaad48862a67ca61cb8e257a7e80ee8c" kindref="member">libinput_device_config_scroll_get_methods</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>)</highlight></codeline>
<codeline lineno="805"><highlight class="normal">{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1a0a3b9a4a588e1c17ce6b3f3ceb808756" kindref="member">supportedScrollMethods</ref>;</highlight></codeline>
<codeline lineno="807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809" refid="mock__libinput_8cpp_1a844ea06b952aaee8e0643d85d351afb6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_scroll_method<sp/><ref refid="mock__libinput_8cpp_1a844ea06b952aaee8e0643d85d351afb6" kindref="member">libinput_device_config_scroll_get_default_method</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>)</highlight></codeline>
<codeline lineno="810"><highlight class="normal">{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1a59c4f927875be7507a12eb159efbdcda" kindref="member">defaultScrollMethod</ref>;</highlight></codeline>
<codeline lineno="812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814" refid="mock__libinput_8cpp_1a482951a2b1faf837e43d30d9c92dc9d3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_status<sp/><ref refid="mock__libinput_8cpp_1a482951a2b1faf837e43d30d9c92dc9d3" kindref="member">libinput_device_config_scroll_set_method</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_scroll_method<sp/>method)</highlight></codeline>
<codeline lineno="815"><highlight class="normal">{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1a07a305f0cef7e10f86a7347d8d499b96" kindref="member">setScrollMethodReturnValue</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1a0a3b9a4a588e1c17ce6b3f3ceb808756" kindref="member">supportedScrollMethods</ref><sp/>&amp;<sp/>method)<sp/>&amp;&amp;<sp/>method<sp/>!=<sp/>LIBINPUT_CONFIG_SCROLL_NO_SCROLL)<sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_INVALID;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1a618ebda6f1de44624e2874243a4f4d39" kindref="member">scrollMethod</ref><sp/>=<sp/>method;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_INVALID;</highlight></codeline>
<codeline lineno="824"><highlight class="normal">}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826" refid="mock__libinput_8cpp_1a4bc3cc3822eea632a9a6cf3760ea1fd0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_scroll_method<sp/><ref refid="mock__libinput_8cpp_1a4bc3cc3822eea632a9a6cf3760ea1fd0" kindref="member">libinput_device_config_scroll_get_method</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>)</highlight></codeline>
<codeline lineno="827"><highlight class="normal">{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1a618ebda6f1de44624e2874243a4f4d39" kindref="member">scrollMethod</ref>;</highlight></codeline>
<codeline lineno="829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831" refid="mock__libinput_8cpp_1ac95a25055b22c3631e3c10c0463ca332" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_config_status<sp/><ref refid="mock__libinput_8cpp_1ac95a25055b22c3631e3c10c0463ca332" kindref="member">libinput_device_config_scroll_set_button</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>,<sp/>uint32_t<sp/>button)</highlight></codeline>
<codeline lineno="832"><highlight class="normal">{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1a2d4acbab3e296c969933e758909b54f3" kindref="member">setScrollButtonReturnValue</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1a0a3b9a4a588e1c17ce6b3f3ceb808756" kindref="member">supportedScrollMethods</ref><sp/>&amp;<sp/>LIBINPUT_CONFIG_SCROLL_ON_BUTTON_DOWN))<sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_UNSUPPORTED;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1aaa3354dc1045d25fd5e9c806d191ce85" kindref="member">scrollButton</ref><sp/>=<sp/>button;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_SUCCESS;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_INVALID;</highlight></codeline>
<codeline lineno="841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843" refid="mock__libinput_8cpp_1a83623da437d0114b8e3ac29ab771d799" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="mock__libinput_8cpp_1a83623da437d0114b8e3ac29ab771d799" kindref="member">libinput_device_config_scroll_get_button</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>)</highlight></codeline>
<codeline lineno="844"><highlight class="normal">{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1aaa3354dc1045d25fd5e9c806d191ce85" kindref="member">scrollButton</ref>;</highlight></codeline>
<codeline lineno="846"><highlight class="normal">}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848" refid="mock__libinput_8cpp_1ad4aacefb10fab1e401e211ee9ce0c1e6" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="mock__libinput_8cpp_1ad4aacefb10fab1e401e211ee9ce0c1e6" kindref="member">libinput_device_config_scroll_get_default_button</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>)</highlight></codeline>
<codeline lineno="849"><highlight class="normal">{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1aaf0dc6b349ebd24f5588b02735dc9e09" kindref="member">defaultScrollButton</ref>;</highlight></codeline>
<codeline lineno="851"><highlight class="normal">}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853" refid="mock__libinput_8cpp_1acb0d0108ae2360ee3f085a31d5c59ef0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1acb0d0108ae2360ee3f085a31d5c59ef0" kindref="member">libinput_device_switch_has_switch</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*<ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_switch<sp/>sw)</highlight></codeline>
<codeline lineno="854"><highlight class="normal">{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(sw)<sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_SWITCH_LID:</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1abdaaeb4dd060a2a1d3f5765d2bd8a689" kindref="member">lidSwitch</ref>;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_SWITCH_TABLET_MODE:</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event_1a392bb7be02226b50c3700e732daf8814" kindref="member">device</ref>-&gt;<ref refid="structlibinput__device_1af931284e2b741dd538a01f4fd6b633c8" kindref="member">tabletModeSwitch</ref>;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q_UNREACHABLE();</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="864"><highlight class="normal">}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866" refid="mock__libinput_8cpp_1ad0380c81d1259355e1918bc9ac0a9e4b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlibinput__event__switch" kindref="compound">libinput_event_switch</ref><sp/>*<ref refid="mock__libinput_8cpp_1ad0380c81d1259355e1918bc9ac0a9e4b" kindref="member">libinput_event_get_switch_event</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event" kindref="compound">libinput_event</ref><sp/>*event)</highlight></codeline>
<codeline lineno="867"><highlight class="normal">{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event-&gt;<ref refid="structlibinput__event_1a7fdcbb0bac521cd033ea91dda5cc2949" kindref="member">type</ref><sp/>==<sp/>LIBINPUT_EVENT_SWITCH_TOGGLE)<sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="structlibinput__event__switch" kindref="compound">libinput_event_switch</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(event);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875" refid="mock__libinput_8cpp_1aef38412db2c718b32b4ec71661b8464c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_switch_state<sp/><ref refid="mock__libinput_8cpp_1aef38412db2c718b32b4ec71661b8464c" kindref="member">libinput_event_switch_get_switch_state</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__switch" kindref="compound">libinput_event_switch</ref><sp/>*event)</highlight></codeline>
<codeline lineno="876"><highlight class="normal">{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(event-&gt;<ref refid="structlibinput__event__switch_1af38a55f980ace5bb8a70e4b29d86b512" kindref="member">state</ref>)<sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__switch_1a23407fa2fd148fd41f7399578661c075a521c36a31c2762741cf0f8890cbe05e3" kindref="member">libinput_event_switch::State::On</ref>:</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_SWITCH_STATE_ON;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__switch_1a23407fa2fd148fd41f7399578661c075ad15305d7a4e34e02489c74a5ef542f36" kindref="member">libinput_event_switch::State::Off</ref>:</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_SWITCH_STATE_OFF;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q_UNREACHABLE();</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887" refid="mock__libinput_8cpp_1a7e08e4e4ac10092e2f4d6540394b9c8b" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="mock__libinput_8cpp_1a7e08e4e4ac10092e2f4d6540394b9c8b" kindref="member">libinput_event_switch_get_time_usec</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event__switch" kindref="compound">libinput_event_switch</ref><sp/>*event)</highlight></codeline>
<codeline lineno="888"><highlight class="normal">{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;<ref refid="structlibinput__event_1a6a1efbba137200361aca11a8909813f9" kindref="member">time</ref>.count();</highlight></codeline>
<codeline lineno="890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892" refid="mock__libinput_8cpp_1af05a3c3eb0af48a461240daae498149a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">libinput_event_tablet_pad<sp/>*<ref refid="mock__libinput_8cpp_1af05a3c3eb0af48a461240daae498149a" kindref="member">libinput_event_get_tablet_pad_event</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event" kindref="compound">libinput_event</ref><sp/>*event)</highlight></codeline>
<codeline lineno="893"><highlight class="normal">{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event-&gt;<ref refid="structlibinput__event_1a7fdcbb0bac521cd033ea91dda5cc2949" kindref="member">type</ref><sp/>==<sp/>LIBINPUT_EVENT_TABLET_PAD_BUTTON)<sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">libinput_event_tablet_pad<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(event);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">libinput_event_tablet_tool<sp/>*</highlight></codeline>
<codeline lineno="901" refid="mock__libinput_8cpp_1a59736e418388d40aae80e0b018544efe" refkind="member"><highlight class="normal"><ref refid="mock__libinput_8cpp_1a59736e418388d40aae80e0b018544efe" kindref="member">libinput_event_get_tablet_tool_event</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__event" kindref="compound">libinput_event</ref><sp/>*event)</highlight></codeline>
<codeline lineno="902"><highlight class="normal">{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(event-&gt;<ref refid="structlibinput__event_1a7fdcbb0bac521cd033ea91dda5cc2949" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_TABLET_TOOL_AXIS:</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_TABLET_TOOL_PROXIMITY:</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LIBINPUT_EVENT_TABLET_TOOL_TIP:</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">libinput_event_tablet_tool<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(event);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="911"><highlight class="normal">}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913" refid="mock__libinput_8cpp_1aa0696b32b500ccc0876396a184e22c01" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1aa0696b32b500ccc0876396a184e22c01" kindref="member">libinput_device_tablet_pad_get_num_strips</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="914"><highlight class="normal">{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1a0fc8d0c17573fd033a5ba2c38c90ed47" kindref="member">stripCount</ref>;</highlight></codeline>
<codeline lineno="916"><highlight class="normal">}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918" refid="mock__libinput_8cpp_1a624cd4cb5fcd049fe88b2ab5f0a649cb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a624cd4cb5fcd049fe88b2ab5f0a649cb" kindref="member">libinput_device_tablet_pad_get_num_rings</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="919"><highlight class="normal">{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1af536e719bb8e75da57b389a714fcaa11" kindref="member">ringCount</ref>;</highlight></codeline>
<codeline lineno="921"><highlight class="normal">}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923" refid="mock__libinput_8cpp_1a2c5a5703982bcedc71a0470278258710" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a2c5a5703982bcedc71a0470278258710" kindref="member">libinput_device_tablet_pad_get_num_buttons</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="924"><highlight class="normal">{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1a91de43c979333d12a134d964d26287b8" kindref="member">buttonCount</ref>;</highlight></codeline>
<codeline lineno="926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928" refid="mock__libinput_8cpp_1a4d246393e68fd7c415a6936c92a23643" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a4d246393e68fd7c415a6936c92a23643" kindref="member">libinput_device_tablet_pad_get_num_mode_groups</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="929"><highlight class="normal">{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">libinput_tablet_pad_mode_group<sp/>*</highlight></codeline>
<codeline lineno="934" refid="mock__libinput_8cpp_1a3f3cd853bb8ec0557350b95df6122b7b" refkind="member"><highlight class="normal"><ref refid="mock__libinput_8cpp_1a3f3cd853bb8ec0557350b95df6122b7b" kindref="member">libinput_device_tablet_pad_get_mode_group</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="935"><highlight class="normal">{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="937"><highlight class="normal">}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940" refid="mock__libinput_8cpp_1a6665cafeed47b6b061c702760e7654a5" refkind="member"><highlight class="normal"><ref refid="mock__libinput_8cpp_1a6665cafeed47b6b061c702760e7654a5" kindref="member">libinput_tablet_pad_mode_group_get_mode</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>libinput_tablet_pad_mode_group<sp/>*group)</highlight></codeline>
<codeline lineno="941"><highlight class="normal">{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946" refid="mock__libinput_8cpp_1a63f52e1cdcde522fe6990e4407782d4b" refkind="member"><highlight class="normal"><ref refid="mock__libinput_8cpp_1a63f52e1cdcde522fe6990e4407782d4b" kindref="member">libinput_tablet_pad_mode_group_get_num_modes</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>libinput_tablet_pad_mode_group<sp/>*group)</highlight></codeline>
<codeline lineno="947"><highlight class="normal">{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951" refid="mock__libinput_8cpp_1a6e6efcb715243ec826023071a9271c81" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a6e6efcb715243ec826023071a9271c81" kindref="member">libinput_tablet_pad_mode_group_has_button</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>libinput_tablet_pad_mode_group<sp/>*group,</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>button)</highlight></codeline>
<codeline lineno="953"><highlight class="normal">{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="955"><highlight class="normal">}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957" refid="mock__libinput_8cpp_1a22a228d4e60c38c5d57578291f0947aa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a22a228d4e60c38c5d57578291f0947aa" kindref="member">libinput_tablet_pad_mode_group_has_ring</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>libinput_tablet_pad_mode_group<sp/>*group,</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ring)</highlight></codeline>
<codeline lineno="959"><highlight class="normal">{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963" refid="mock__libinput_8cpp_1a54c2c799139404a00a18d1dda1c7d3c9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a54c2c799139404a00a18d1dda1c7d3c9" kindref="member">libinput_tablet_pad_mode_group_has_strip</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>libinput_tablet_pad_mode_group<sp/>*group,</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strip)</highlight></codeline>
<codeline lineno="965"><highlight class="normal">{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="967"><highlight class="normal">}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">libinput_device_group<sp/>*</highlight></codeline>
<codeline lineno="970" refid="mock__libinput_8cpp_1a7f9053d7eecf46645cd2de32514c2908" refkind="member"><highlight class="normal"><ref refid="mock__libinput_8cpp_1a7f9053d7eecf46645cd2de32514c2908" kindref="member">libinput_device_get_device_group</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="971"><highlight class="normal">{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="973"><highlight class="normal">}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="976" refid="mock__libinput_8cpp_1a5d4e2e015ee99e24ea9ae6c96316d0b2" refkind="member"><highlight class="normal"><ref refid="mock__libinput_8cpp_1a5d4e2e015ee99e24ea9ae6c96316d0b2" kindref="member">libinput_device_group_get_user_data</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>libinput_device_group<sp/>*group)</highlight></codeline>
<codeline lineno="977"><highlight class="normal">{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="979"><highlight class="normal">}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981" refid="mock__libinput_8cpp_1afdb3ddfb91e6bd38b6356a5bb51547ad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1afdb3ddfb91e6bd38b6356a5bb51547ad" kindref="member">libinput_device_led_update</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device,</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_led<sp/>leds)</highlight></codeline>
<codeline lineno="983"><highlight class="normal">{</highlight></codeline>
<codeline lineno="984"><highlight class="normal">}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986" refid="mock__libinput_8cpp_1a6243ad6005b2ce2a5ecfd1b04787fe93" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a6243ad6005b2ce2a5ecfd1b04787fe93" kindref="member">libinput_device_set_user_data</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user_data)</highlight></codeline>
<codeline lineno="987"><highlight class="normal">{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>device-&gt;<ref refid="structlibinput__device_1a87389644b4e55ac884d4a6ed37bb5603" kindref="member">userData</ref><sp/>=<sp/>user_data;</highlight></codeline>
<codeline lineno="989"><highlight class="normal">}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="992" refid="mock__libinput_8cpp_1a2d3032cb39c375a8f3ca94fbbead55c4" refkind="member"><highlight class="normal"><ref refid="mock__libinput_8cpp_1a2d3032cb39c375a8f3ca94fbbead55c4" kindref="member">libinput_device_get_user_data</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="993"><highlight class="normal">{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device-&gt;<ref refid="structlibinput__device_1a87389644b4e55ac884d4a6ed37bb5603" kindref="member">userData</ref>;</highlight></codeline>
<codeline lineno="995"><highlight class="normal">}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997" refid="mock__libinput_8cpp_1a6f44a77cea0e1695073fa6bd925daf62" refkind="member"><highlight class="normal">udev_device<sp/>*<ref refid="mock__libinput_8cpp_1a6f44a77cea0e1695073fa6bd925daf62" kindref="member">libinput_device_get_udev_device</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device)</highlight></codeline>
<codeline lineno="998"><highlight class="normal">{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003" refid="mock__libinput_8cpp_1a3b128b24b9fe19a98cb0aaf3624c5ab7" refkind="member"><highlight class="normal"><ref refid="mock__libinput_8cpp_1a3b128b24b9fe19a98cb0aaf3624c5ab7" kindref="member">libinput_event_tablet_tool_get_x_transformed</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>libinput_event_tablet_tool<sp/>*event,</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>width)</highlight></codeline>
<codeline lineno="1005"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>unused<sp/>at<sp/>the<sp/>moment,<sp/>it<sp/>doesn&apos;t<sp/>really<sp/>matter<sp/>what<sp/>we<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011" refid="mock__libinput_8cpp_1a6c19f3b3679c24f26a46192066f64805" refkind="member"><highlight class="normal"><ref refid="mock__libinput_8cpp_1a6c19f3b3679c24f26a46192066f64805" kindref="member">libinput_event_tablet_tool_get_y_transformed</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>libinput_event_tablet_tool<sp/>*event,</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>height)</highlight></codeline>
<codeline lineno="1013"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017" refid="mock__libinput_8cpp_1a2055fbbf4ce36751d19026a21a907e9d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="mock__libinput_8cpp_1a2055fbbf4ce36751d19026a21a907e9d" kindref="member">udev_device_get_syspath</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>udev_device<sp/>*device)</highlight></codeline>
<codeline lineno="1018"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">libinput_tablet_tool<sp/>*</highlight></codeline>
<codeline lineno="1023" refid="mock__libinput_8cpp_1a17199edc84a9e87093c93ca689f2a218" refkind="member"><highlight class="normal"><ref refid="mock__libinput_8cpp_1a17199edc84a9e87093c93ca689f2a218" kindref="member">libinput_tablet_tool_ref</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>libinput_tablet_tool<sp/>*tool)</highlight></codeline>
<codeline lineno="1024"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tool;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">libinput_tablet_tool<sp/>*</highlight></codeline>
<codeline lineno="1029" refid="mock__libinput_8cpp_1a9f646e02abc912d4afa120aaa6c447da" refkind="member"><highlight class="normal"><ref refid="mock__libinput_8cpp_1a9f646e02abc912d4afa120aaa6c447da" kindref="member">libinput_tablet_tool_unref</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>libinput_tablet_tool<sp/>*tool)</highlight></codeline>
<codeline lineno="1030"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tool;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal">uint64_t</highlight></codeline>
<codeline lineno="1035" refid="mock__libinput_8cpp_1ac8084f1e2891ccaa9be5faedf4310f78" refkind="member"><highlight class="normal"><ref refid="mock__libinput_8cpp_1ac8084f1e2891ccaa9be5faedf4310f78" kindref="member">libinput_tablet_tool_get_serial</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>libinput_tablet_tool<sp/>*tool)</highlight></codeline>
<codeline lineno="1036"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal">uint64_t</highlight></codeline>
<codeline lineno="1041" refid="mock__libinput_8cpp_1a5ba26a193ce809fab9234b2253bcfff8" refkind="member"><highlight class="normal"><ref refid="mock__libinput_8cpp_1a5ba26a193ce809fab9234b2253bcfff8" kindref="member">libinput_tablet_tool_get_tool_id</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>libinput_tablet_tool<sp/>*tool)</highlight></codeline>
<codeline lineno="1042"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>libinput_tablet_tool_type</highlight></codeline>
<codeline lineno="1047" refid="mock__libinput_8cpp_1a879d814a10261d8f379dc26d2789bfa8" refkind="member"><highlight class="normal"><ref refid="mock__libinput_8cpp_1a879d814a10261d8f379dc26d2789bfa8" kindref="member">libinput_tablet_tool_get_type</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>libinput_tablet_tool<sp/>*tool)</highlight></codeline>
<codeline lineno="1048"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_TABLET_TOOL_TYPE_PEN;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052" refid="mock__libinput_8cpp_1aa4fa6ae9a0c4f9212a28dbd50ee54af3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1aa4fa6ae9a0c4f9212a28dbd50ee54af3" kindref="member">libinput_tablet_tool_has_pressure</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>libinput_tablet_tool<sp/>*tool)</highlight></codeline>
<codeline lineno="1053"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057" refid="mock__libinput_8cpp_1a6e20b30e6e6cbddbf2cc159b5d6b7046" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1a6e20b30e6e6cbddbf2cc159b5d6b7046" kindref="member">libinput_tablet_tool_has_distance</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>libinput_tablet_tool<sp/>*tool)</highlight></codeline>
<codeline lineno="1058"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062" refid="mock__libinput_8cpp_1ac5470ae95d36cc733f5a9167c087f8d1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1ac5470ae95d36cc733f5a9167c087f8d1" kindref="member">libinput_tablet_tool_has_tilt</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>libinput_tablet_tool<sp/>*tool)</highlight></codeline>
<codeline lineno="1063"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067" refid="mock__libinput_8cpp_1aab7bcd835ac261f8baace7a1f2f3b26d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1aab7bcd835ac261f8baace7a1f2f3b26d" kindref="member">libinput_tablet_tool_has_rotation</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>libinput_tablet_tool<sp/>*tool)</highlight></codeline>
<codeline lineno="1068"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072" refid="mock__libinput_8cpp_1ae004c5b3a2553ea58673871f69d46a36" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1ae004c5b3a2553ea58673871f69d46a36" kindref="member">libinput_tablet_tool_has_slider</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>libinput_tablet_tool<sp/>*tool)</highlight></codeline>
<codeline lineno="1073"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077" refid="mock__libinput_8cpp_1aca9317e6ba30236004b183922270cf67" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mock__libinput_8cpp_1aca9317e6ba30236004b183922270cf67" kindref="member">libinput_tablet_tool_has_wheel</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>libinput_tablet_tool<sp/>*tool)</highlight></codeline>
<codeline lineno="1078"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082" refid="mock__libinput_8cpp_1ae8559303954fb153f0736a73d96d2aee" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="mock__libinput_8cpp_1ae8559303954fb153f0736a73d96d2aee" kindref="member">udev_device_get_property_value</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>udev_device<sp/>*udev_device,</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)</highlight></codeline>
<codeline lineno="1084"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal">libinput_config_status</highlight></codeline>
<codeline lineno="1089" refid="mock__libinput_8cpp_1ae00b8983eaede07d5464a1f99190c436" refkind="member"><highlight class="normal"><ref refid="mock__libinput_8cpp_1ae00b8983eaede07d5464a1f99190c436" kindref="member">libinput_device_config_area_set_rectangle</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlibinput__device" kindref="compound">libinput_device</ref><sp/>*device,</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>libinput_config_area_rectangle<sp/>*rect)</highlight></codeline>
<codeline lineno="1091"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LIBINPUT_CONFIG_STATUS_UNSUPPORTED;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="kwin/autotests/libinput/mock_libinput.cpp"/>
  </compounddef>
</doxygen>
