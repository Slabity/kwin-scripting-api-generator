<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_color_pipeline" kind="class" language="C++" prot="public">
    <compoundname>KWin::ColorPipeline</compoundname>
    <includes refid="colorpipeline_8h" local="no">colorpipeline.h</includes>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_color_pipeline_1a4c736fae0c1a4bf9e204b0a44efbd396" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>float</type>
        <definition>float KWin::ColorPipeline::s_maxResolution</definition>
        <argsstring></argsstring>
        <name>s_maxResolution</name>
        <qualifiedname>KWin::ColorPipeline::s_maxResolution</qualifiedname>
        <initializer>= 0.00001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>matrix calculations with floating point numbers can result in very small errors this value is the minimum difference we actually care about; everything below can and should be optimized out </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="105" column="28" bodyfile="kwin/src/core/colorpipeline.h" bodystart="105" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_color_pipeline_1a44789e08dce965c9351e9d04d1073074" prot="public" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref></type>
        <definition>ValueRange KWin::ColorPipeline::inputRange</definition>
        <argsstring></argsstring>
        <name>inputRange</name>
        <qualifiedname>KWin::ColorPipeline::inputRange</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="129" column="16" bodyfile="kwin/src/core/colorpipeline.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_k_win_1_1_color_op" kindref="compound">ColorOp</ref> &gt;</type>
        <definition>std::vector&lt;ColorOp&gt; KWin::ColorPipeline::ops</definition>
        <argsstring></argsstring>
        <name>ops</name>
        <qualifiedname>KWin::ColorPipeline::ops</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="130" column="17" bodyfile="kwin/src/core/colorpipeline.h" bodystart="130" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_color_pipeline_1adc324592f8f50b7126ebd3b2dfb9da27" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::ColorPipeline::ColorPipeline</definition>
        <argsstring>()</argsstring>
        <name>ColorPipeline</name>
        <qualifiedname>KWin::ColorPipeline::ColorPipeline</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="107" column="14" bodyfile="kwin/src/core/colorpipeline.cpp" bodystart="48" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_color_pipeline_1afcae09a7dea6b070331c515a7982c7b8" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::ColorPipeline::ColorPipeline</definition>
        <argsstring>(const ValueRange &amp;inputRange)</argsstring>
        <name>ColorPipeline</name>
        <qualifiedname>KWin::ColorPipeline::ColorPipeline</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref> &amp;</type>
          <declname>inputRange</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="108" column="14" bodyfile="kwin/src/core/colorpipeline.cpp" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_color_pipeline_1a5777bff889b79c54c61f14cd5015b3d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_color_pipeline" kindref="compound">ColorPipeline</ref></type>
        <definition>ColorPipeline KWin::ColorPipeline::merged</definition>
        <argsstring>(const ColorPipeline &amp;onTop) const</argsstring>
        <name>merged</name>
        <qualifiedname>KWin::ColorPipeline::merged</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_color_pipeline" kindref="compound">ColorPipeline</ref> &amp;</type>
          <declname>onTop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="112" column="19" bodyfile="kwin/src/core/colorpipeline.cpp" bodystart="308" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_color_pipeline_1a8cbbe19361783f5809ea8a6511a1ed18" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::ColorPipeline::isIdentity</definition>
        <argsstring>() const</argsstring>
        <name>isIdentity</name>
        <qualifiedname>KWin::ColorPipeline::isIdentity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="114" column="10" bodyfile="kwin/src/core/colorpipeline.cpp" bodystart="281" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_color_pipeline_1a0e5ddf18e9d2dfd8022896693975ac0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::ColorPipeline::operator==</definition>
        <argsstring>(const ColorPipeline &amp;other) const =default</argsstring>
        <name>operator==</name>
        <qualifiedname>KWin::ColorPipeline::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_color_pipeline" kindref="compound">ColorPipeline</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="115" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref> &amp;</type>
        <definition>const ValueRange &amp; KWin::ColorPipeline::currentOutputRange</definition>
        <argsstring>() const</argsstring>
        <name>currentOutputRange</name>
        <qualifiedname>KWin::ColorPipeline::currentOutputRange</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="116" column="22" bodyfile="kwin/src/core/colorpipeline.cpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_color_pipeline_1a382839d2ce1a87b70a1a93d23799384d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QVector3D</type>
        <definition>QVector3D KWin::ColorPipeline::evaluate</definition>
        <argsstring>(const QVector3D &amp;input) const</argsstring>
        <name>evaluate</name>
        <qualifiedname>KWin::ColorPipeline::evaluate</qualifiedname>
        <param>
          <type>const QVector3D &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="117" column="15" bodyfile="kwin/src/core/colorpipeline.cpp" bodystart="318" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_color_pipeline_1af2cf9448e1f66763a20ef4feadae8d76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ColorPipeline::addMultiplier</definition>
        <argsstring>(double factor)</argsstring>
        <name>addMultiplier</name>
        <qualifiedname>KWin::ColorPipeline::addMultiplier</qualifiedname>
        <param>
          <type>double</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="119" column="10" bodyfile="kwin/src/core/colorpipeline.cpp" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_color_pipeline_1ad778125cf759a9eedcfbe29278d5b892" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ColorPipeline::addMultiplier</definition>
        <argsstring>(const QVector3D &amp;factors)</argsstring>
        <name>addMultiplier</name>
        <qualifiedname>KWin::ColorPipeline::addMultiplier</qualifiedname>
        <param>
          <type>const QVector3D &amp;</type>
          <declname>factors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="120" column="10" bodyfile="kwin/src/core/colorpipeline.cpp" bodystart="71" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_color_pipeline_1a19886bf5733f4b91578fc0a9adea657d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ColorPipeline::addTransferFunction</definition>
        <argsstring>(TransferFunction tf)</argsstring>
        <name>addTransferFunction</name>
        <qualifiedname>KWin::ColorPipeline::addTransferFunction</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_transfer_function" kindref="compound">TransferFunction</ref></type>
          <declname>tf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="121" column="10" bodyfile="kwin/src/core/colorpipeline.cpp" bodystart="118" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_color_pipeline_1a1c7c2fdde86e5f2880cd79f3360aa74a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ColorPipeline::addInverseTransferFunction</definition>
        <argsstring>(TransferFunction tf)</argsstring>
        <name>addInverseTransferFunction</name>
        <qualifiedname>KWin::ColorPipeline::addInverseTransferFunction</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_transfer_function" kindref="compound">TransferFunction</ref></type>
          <declname>tf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="122" column="10" bodyfile="kwin/src/core/colorpipeline.cpp" bodystart="148" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_color_pipeline_1a1a13808050915cb631114e3a8da47bed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ColorPipeline::addMatrix</definition>
        <argsstring>(const QMatrix4x4 &amp;mat, const ValueRange &amp;output)</argsstring>
        <name>addMatrix</name>
        <qualifiedname>KWin::ColorPipeline::addMatrix</qualifiedname>
        <param>
          <type>const QMatrix4x4 &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="123" column="10" bodyfile="kwin/src/core/colorpipeline.cpp" bodystart="206" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_color_pipeline_1a1e02f2e9770f16f0ce5c038afaced8ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ColorPipeline::addTonemapper</definition>
        <argsstring>(const Colorimetry &amp;containerColorimetry, double referenceLuminance, double maxInputLuminance, double maxOutputLuminance)</argsstring>
        <name>addTonemapper</name>
        <qualifiedname>KWin::ColorPipeline::addTonemapper</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_colorimetry" kindref="compound">Colorimetry</ref> &amp;</type>
          <declname>containerColorimetry</declname>
        </param>
        <param>
          <type>double</type>
          <declname>referenceLuminance</declname>
        </param>
        <param>
          <type>double</type>
          <declname>maxInputLuminance</declname>
        </param>
        <param>
          <type>double</type>
          <declname>maxOutputLuminance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="124" column="10" bodyfile="kwin/src/core/colorpipeline.cpp" bodystart="245" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_color_pipeline_1a403fcdd3276b94a1daa752933fdf0beb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ColorPipeline::add</definition>
        <argsstring>(const ColorOp &amp;op)</argsstring>
        <name>add</name>
        <qualifiedname>KWin::ColorPipeline::add</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_color_op" kindref="compound">ColorOp</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="125" column="10" bodyfile="kwin/src/core/colorpipeline.cpp" bodystart="286" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_color_pipeline_1a59ad6d64f40c1bdcdd927dc78f329903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ColorPipeline::add</definition>
        <argsstring>(const ColorPipeline &amp;pipeline)</argsstring>
        <name>add</name>
        <qualifiedname>KWin::ColorPipeline::add</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_color_pipeline" kindref="compound">ColorPipeline</ref> &amp;</type>
          <declname>pipeline</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="126" column="10" bodyfile="kwin/src/core/colorpipeline.cpp" bodystart="301" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_color_pipeline_1a71f3dacf8c3534d493eae8adbec15cf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ColorPipeline::add1DLUT</definition>
        <argsstring>(const std::shared_ptr&lt; ColorTransformation &gt; &amp;transform)</argsstring>
        <name>add1DLUT</name>
        <qualifiedname>KWin::ColorPipeline::add1DLUT</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="class_k_win_1_1_color_transformation" kindref="compound">ColorTransformation</ref> &gt; &amp;</type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="127" column="10" bodyfile="kwin/src/core/colorpipeline.cpp" bodystart="267" bodyend="279"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_k_win_1_1_color_pipeline_1aa4347025990236c558ca27733ca10fa9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_color_pipeline" kindref="compound">ColorPipeline</ref></type>
        <definition>ColorPipeline KWin::ColorPipeline::create</definition>
        <argsstring>(const ColorDescription &amp;from, const ColorDescription &amp;to, RenderingIntent intent)</argsstring>
        <name>create</name>
        <qualifiedname>KWin::ColorPipeline::create</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_color_description" kindref="compound">ColorDescription</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_color_description" kindref="compound">ColorDescription</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1a72b8a93022757874f9e6f85fcf9bc4e9" kindref="member">RenderingIntent</ref></type>
          <declname>intent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/core/colorpipeline.h" line="110" column="26" bodyfile="kwin/src/core/colorpipeline.cpp" bodystart="27" bodyend="46"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>KWin::ColorPipeline</label>
        <link refid="class_k_win_1_1_color_pipeline"/>
        <childnode refid="2" relation="usage">
          <edgelabel>inputRange</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>KWin::ValueRange</label>
        <link refid="class_k_win_1_1_value_range"/>
      </node>
    </collaborationgraph>
    <location file="kwin/src/core/colorpipeline.h" line="97" column="1" bodyfile="kwin/src/core/colorpipeline.h" bodystart="98" bodyend="131"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_color_pipeline_1a403fcdd3276b94a1daa752933fdf0beb" prot="public" virt="non-virtual"><scope>KWin::ColorPipeline</scope><name>add</name></member>
      <member refid="class_k_win_1_1_color_pipeline_1a59ad6d64f40c1bdcdd927dc78f329903" prot="public" virt="non-virtual"><scope>KWin::ColorPipeline</scope><name>add</name></member>
      <member refid="class_k_win_1_1_color_pipeline_1a71f3dacf8c3534d493eae8adbec15cf4" prot="public" virt="non-virtual"><scope>KWin::ColorPipeline</scope><name>add1DLUT</name></member>
      <member refid="class_k_win_1_1_color_pipeline_1a1c7c2fdde86e5f2880cd79f3360aa74a" prot="public" virt="non-virtual"><scope>KWin::ColorPipeline</scope><name>addInverseTransferFunction</name></member>
      <member refid="class_k_win_1_1_color_pipeline_1a1a13808050915cb631114e3a8da47bed" prot="public" virt="non-virtual"><scope>KWin::ColorPipeline</scope><name>addMatrix</name></member>
      <member refid="class_k_win_1_1_color_pipeline_1af2cf9448e1f66763a20ef4feadae8d76" prot="public" virt="non-virtual"><scope>KWin::ColorPipeline</scope><name>addMultiplier</name></member>
      <member refid="class_k_win_1_1_color_pipeline_1ad778125cf759a9eedcfbe29278d5b892" prot="public" virt="non-virtual"><scope>KWin::ColorPipeline</scope><name>addMultiplier</name></member>
      <member refid="class_k_win_1_1_color_pipeline_1a1e02f2e9770f16f0ce5c038afaced8ca" prot="public" virt="non-virtual"><scope>KWin::ColorPipeline</scope><name>addTonemapper</name></member>
      <member refid="class_k_win_1_1_color_pipeline_1a19886bf5733f4b91578fc0a9adea657d" prot="public" virt="non-virtual"><scope>KWin::ColorPipeline</scope><name>addTransferFunction</name></member>
      <member refid="class_k_win_1_1_color_pipeline_1adc324592f8f50b7126ebd3b2dfb9da27" prot="public" virt="non-virtual"><scope>KWin::ColorPipeline</scope><name>ColorPipeline</name></member>
      <member refid="class_k_win_1_1_color_pipeline_1afcae09a7dea6b070331c515a7982c7b8" prot="public" virt="non-virtual"><scope>KWin::ColorPipeline</scope><name>ColorPipeline</name></member>
      <member refid="class_k_win_1_1_color_pipeline_1aa4347025990236c558ca27733ca10fa9" prot="public" virt="non-virtual"><scope>KWin::ColorPipeline</scope><name>create</name></member>
      <member refid="class_k_win_1_1_color_pipeline_1a9ada03775ee6379cdfea60744e1bfb85" prot="public" virt="non-virtual"><scope>KWin::ColorPipeline</scope><name>currentOutputRange</name></member>
      <member refid="class_k_win_1_1_color_pipeline_1a382839d2ce1a87b70a1a93d23799384d" prot="public" virt="non-virtual"><scope>KWin::ColorPipeline</scope><name>evaluate</name></member>
      <member refid="class_k_win_1_1_color_pipeline_1a44789e08dce965c9351e9d04d1073074" prot="public" virt="non-virtual"><scope>KWin::ColorPipeline</scope><name>inputRange</name></member>
      <member refid="class_k_win_1_1_color_pipeline_1a8cbbe19361783f5809ea8a6511a1ed18" prot="public" virt="non-virtual"><scope>KWin::ColorPipeline</scope><name>isIdentity</name></member>
      <member refid="class_k_win_1_1_color_pipeline_1a5777bff889b79c54c61f14cd5015b3d9" prot="public" virt="non-virtual"><scope>KWin::ColorPipeline</scope><name>merged</name></member>
      <member refid="class_k_win_1_1_color_pipeline_1a0e5ddf18e9d2dfd8022896693975ac0d" prot="public" virt="non-virtual"><scope>KWin::ColorPipeline</scope><name>operator==</name></member>
      <member refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" prot="public" virt="non-virtual"><scope>KWin::ColorPipeline</scope><name>ops</name></member>
      <member refid="class_k_win_1_1_color_pipeline_1a4c736fae0c1a4bf9e204b0a44efbd396" prot="public" virt="non-virtual"><scope>KWin::ColorPipeline</scope><name>s_maxResolution</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
