<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_placement" kind="class" language="C++" prot="public">
    <compoundname>KWin::Placement</compoundname>
    <includes refid="placement_8h" local="no">placement.h</includes>
    <innerclass refid="struct_k_win_1_1_placement_1_1_desktop_cascading_info" prot="private">KWin::Placement::DesktopCascadingInfo</innerclass>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_placement_1a1a4e90387cbe772c7a58672352b5c2b7" prot="private" static="no" mutable="no">
        <type>QHash&lt; <ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">VirtualDesktop</ref> *, DesktopCascadingInfo &gt;</type>
        <definition>QHash&lt;VirtualDesktop *, DesktopCascadingInfo&gt; KWin::Placement::cci</definition>
        <argsstring></argsstring>
        <name>cci</name>
        <qualifiedname>KWin::Placement::cci</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.h" line="73" column="11" bodyfile="kwin/src/placement.h" bodystart="73" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_placement_1a2980c07c06864f39d2f72cf073385be8" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::Placement::Placement</definition>
        <argsstring>()</argsstring>
        <name>Placement</name>
        <qualifiedname>KWin::Placement::Placement</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.h" line="29" column="14" bodyfile="kwin/src/placement.cpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_placement_1a88d130d08a017b3d1dae128f8a1e359b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Placement::place</definition>
        <argsstring>(Window *c, const QRectF &amp;area)</argsstring>
        <name>place</name>
        <qualifiedname>KWin::Placement::place</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>area</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Places the client <emphasis>c</emphasis> according to the workspace&apos;s layout policy </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.h" line="31" column="10" bodyfile="kwin/src/placement.cpp" bodystart="43" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_placement_1a5adbde71fec9322d9399a078c29d6bf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Placement::placeSmart</definition>
        <argsstring>(Window *c, const QRectF &amp;area, PlacementPolicy next=PlacementUnknown)</argsstring>
        <name>placeSmart</name>
        <qualifiedname>KWin::Placement::placeSmart</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
          <defname>window</defname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fc" kindref="member">PlacementPolicy</ref></type>
          <declname>next</declname>
          <defval><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fca901e6ed881f07dde85d66a0792321966" kindref="member">PlacementUnknown</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Place the client <emphasis>c</emphasis> according to a really smart placement algorithm :-) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.h" line="32" column="10" bodyfile="kwin/src/placement.cpp" bodystart="163" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_placement_1a52b31d41788f5619dbcee8faffcf6292" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Placement::placeCentered</definition>
        <argsstring>(Window *c, const QRectF &amp;area, PlacementPolicy next=PlacementUnknown)</argsstring>
        <name>placeCentered</name>
        <qualifiedname>KWin::Placement::placeCentered</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fc" kindref="member">PlacementPolicy</ref></type>
          <declname>next</declname>
          <defval><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fca901e6ed881f07dde85d66a0792321966" kindref="member">PlacementUnknown</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Place windows centered, on top of all others </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.h" line="34" column="10" bodyfile="kwin/src/placement.cpp" bodystart="445" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_placement_1a23b693921c76aac85778baf453e31568" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Placement::reinitCascading</definition>
        <argsstring>()</argsstring>
        <name>reinitCascading</name>
        <qualifiedname>KWin::Placement::reinitCascading</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.h" line="36" column="10" bodyfile="kwin/src/placement.cpp" bodystart="350" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_placement_1af57af3b4824f90ba501e95ad7bb1181f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Placement::reinitCascading</definition>
        <argsstring>(VirtualDesktop *desktop)</argsstring>
        <name>reinitCascading</name>
        <qualifiedname>KWin::Placement::reinitCascading</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">VirtualDesktop</ref> *</type>
          <declname>desktop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.h" line="37" column="10" bodyfile="kwin/src/placement.cpp" bodystart="359" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_placement_1aa45c2aacee17a115dc229f9f0fc16dab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Placement::cascadeIfCovering</definition>
        <argsstring>(Window *c, const QRectF &amp;geometry, const QRectF &amp;area) const</argsstring>
        <name>cascadeIfCovering</name>
        <qualifiedname>KWin::Placement::cascadeIfCovering</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
          <defname>window</defname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>area</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cascade the window until it no longer fully overlaps any other window </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.h" line="39" column="12" bodyfile="kwin/src/placement.cpp" bodystart="622" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_placement_1a521a9c8daaaadfd4e3ac4ff403a35057" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Placement::cascadeDesktop</definition>
        <argsstring>()</argsstring>
        <name>cascadeDesktop</name>
        <qualifiedname>KWin::Placement::cascadeDesktop</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cascades all clients on the current desktop </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.h" line="44" column="10" bodyfile="kwin/src/placement.cpp" bodystart="669" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_placement_1a60ea4a8b585fa2d79ec0ba763b1fada4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Placement::unclutterDesktop</definition>
        <argsstring>()</argsstring>
        <name>unclutterDesktop</name>
        <qualifiedname>KWin::Placement::unclutterDesktop</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unclutters the current desktop by smart-placing all clients again. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.h" line="48" column="10" bodyfile="kwin/src/placement.cpp" bodystart="683" bodyend="697"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_k_win_1_1_placement_1a8922bd6f0560c2c29af4c932772876e5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * KWin::Placement::policyToString</definition>
        <argsstring>(PlacementPolicy policy)</argsstring>
        <name>policyToString</name>
        <qualifiedname>KWin::Placement::policyToString</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fc" kindref="member">PlacementPolicy</ref></type>
          <declname>policy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.h" line="50" column="23" bodyfile="kwin/src/placement.cpp" bodystart="701" bodyend="708"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_k_win_1_1_placement_1a4557326d8a74ba99804a2302ba208d5d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Placement::place</definition>
        <argsstring>(Window *c, const QRectF &amp;area, PlacementPolicy policy, PlacementPolicy nextPlacement=PlacementUnknown)</argsstring>
        <name>place</name>
        <qualifiedname>KWin::Placement::place</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fc" kindref="member">PlacementPolicy</ref></type>
          <declname>policy</declname>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fc" kindref="member">PlacementPolicy</ref></type>
          <declname>nextPlacement</declname>
          <defval><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fca901e6ed881f07dde85d66a0792321966" kindref="member">PlacementUnknown</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.h" line="53" column="10" bodyfile="kwin/src/placement.cpp" bodystart="67" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_placement_1adb34b1c6e736ff1bd817cc3c72f4f019" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Placement::placeUnderMouse</definition>
        <argsstring>(Window *c, const QRect &amp;area, PlacementPolicy next=PlacementUnknown)</argsstring>
        <name>placeUnderMouse</name>
        <qualifiedname>KWin::Placement::placeUnderMouse</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const QRect &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fc" kindref="member">PlacementPolicy</ref></type>
          <declname>next</declname>
          <defval><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fca901e6ed881f07dde85d66a0792321966" kindref="member">PlacementUnknown</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.h" line="54" column="10" bodyfile="kwin/src/placement.cpp" bodystart="521" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_placement_1a4428cdc4f7992b4e25dd1f97d77f67f6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Placement::placeOnMainWindow</definition>
        <argsstring>(Window *c, const QRect &amp;area, PlacementPolicy next=PlacementUnknown)</argsstring>
        <name>placeOnMainWindow</name>
        <qualifiedname>KWin::Placement::placeOnMainWindow</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const QRect &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fc" kindref="member">PlacementPolicy</ref></type>
          <declname>next</declname>
          <defval><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fca901e6ed881f07dde85d66a0792321966" kindref="member">PlacementUnknown</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.h" line="55" column="10" bodyfile="kwin/src/placement.cpp" bodystart="541" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_placement_1ad8b65e81e62874838b39684b4785ce2b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Placement::placeTransient</definition>
        <argsstring>(Window *c)</argsstring>
        <name>placeTransient</name>
        <qualifiedname>KWin::Placement::placeTransient</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.h" line="56" column="10" bodyfile="kwin/src/placement.cpp" bodystart="510" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_placement_1a16d49c06410ab70f62ed9bd40096d18f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Placement::placeAtRandom</definition>
        <argsstring>(Window *c, const QRect &amp;area, PlacementPolicy next=PlacementUnknown)</argsstring>
        <name>placeAtRandom</name>
        <qualifiedname>KWin::Placement::placeAtRandom</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const QRect &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fc" kindref="member">PlacementPolicy</ref></type>
          <declname>next</declname>
          <defval><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fca901e6ed881f07dde85d66a0792321966" kindref="member">PlacementUnknown</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Place the client <emphasis>c</emphasis> according to a simply &quot;random&quot; placement algorithm. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.h" line="57" column="10" bodyfile="kwin/src/placement.cpp" bodystart="96" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_placement_1a5f3ce9f39d740e0845c6fe231c537977" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Placement::placeCascaded</definition>
        <argsstring>(Window *c, const QRect &amp;area, PlacementPolicy next=PlacementUnknown)</argsstring>
        <name>placeCascaded</name>
        <qualifiedname>KWin::Placement::placeCascaded</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const QRect &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fc" kindref="member">PlacementPolicy</ref></type>
          <declname>next</declname>
          <defname>nextPlacement</defname>
          <defval><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fca901e6ed881f07dde85d66a0792321966" kindref="member">PlacementUnknown</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Place windows in a cascading order, remembering positions for each desktop </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.h" line="58" column="10" bodyfile="kwin/src/placement.cpp" bodystart="376" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_placement_1a5e097fe5cc114aa4d20d92b6773093b5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Placement::placeMaximizing</definition>
        <argsstring>(Window *c, const QRect &amp;area, PlacementPolicy next=PlacementUnknown)</argsstring>
        <name>placeMaximizing</name>
        <qualifiedname>KWin::Placement::placeMaximizing</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const QRect &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fc" kindref="member">PlacementPolicy</ref></type>
          <declname>next</declname>
          <defval><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fca901e6ed881f07dde85d66a0792321966" kindref="member">PlacementUnknown</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.h" line="59" column="10" bodyfile="kwin/src/placement.cpp" bodystart="604" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_placement_1ab5b759dd623d863abb2fee1abddbb240" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Placement::placeZeroCornered</definition>
        <argsstring>(Window *c, const QRect &amp;area, PlacementPolicy next=PlacementUnknown)</argsstring>
        <name>placeZeroCornered</name>
        <qualifiedname>KWin::Placement::placeZeroCornered</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const QRect &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fc" kindref="member">PlacementPolicy</ref></type>
          <declname>next</declname>
          <defval><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fca901e6ed881f07dde85d66a0792321966" kindref="member">PlacementUnknown</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Place windows in the (0,0) corner, on top of all others </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.h" line="60" column="10" bodyfile="kwin/src/placement.cpp" bodystart="466" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_placement_1af472ecf90821db0ed5beb7462ef5e610" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Placement::placeDialog</definition>
        <argsstring>(Window *c, const QRect &amp;area, PlacementPolicy next=PlacementUnknown)</argsstring>
        <name>placeDialog</name>
        <qualifiedname>KWin::Placement::placeDialog</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const QRect &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fc" kindref="member">PlacementPolicy</ref></type>
          <declname>next</declname>
          <defval><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fca901e6ed881f07dde85d66a0792321966" kindref="member">PlacementUnknown</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.h" line="61" column="10" bodyfile="kwin/src/placement.cpp" bodystart="516" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_placement_1aad282ff1250a69653c9ba1ce275294ee" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Placement::placeUtility</definition>
        <argsstring>(Window *c, const QRect &amp;area, PlacementPolicy next=PlacementUnknown)</argsstring>
        <name>placeUtility</name>
        <qualifiedname>KWin::Placement::placeUtility</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const QRect &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fc" kindref="member">PlacementPolicy</ref></type>
          <declname>next</declname>
          <defval><ref refid="namespace_k_win_1a69974eb9a12efe6c7ee471da23d023fca901e6ed881f07dde85d66a0792321966" kindref="member">PlacementUnknown</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.h" line="62" column="10" bodyfile="kwin/src/placement.cpp" bodystart="482" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_placement_1a0b0c8d3e7440f62c423c7cc9db1637f0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Placement::placeOnScreenDisplay</definition>
        <argsstring>(Window *c, const QRect &amp;area)</argsstring>
        <name>placeOnScreenDisplay</name>
        <qualifiedname>KWin::Placement::placeOnScreenDisplay</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const QRect &amp;</type>
          <declname>area</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/placement.h" line="63" column="10" bodyfile="kwin/src/placement.cpp" bodystart="492" bodyend="508"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="kwin/src/placement.h" line="26" column="1" bodyfile="kwin/src/placement.h" bodystart="27" bodyend="74"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_placement_1a521a9c8daaaadfd4e3ac4ff403a35057" prot="public" virt="non-virtual"><scope>KWin::Placement</scope><name>cascadeDesktop</name></member>
      <member refid="class_k_win_1_1_placement_1aa45c2aacee17a115dc229f9f0fc16dab" prot="public" virt="non-virtual"><scope>KWin::Placement</scope><name>cascadeIfCovering</name></member>
      <member refid="class_k_win_1_1_placement_1a1a4e90387cbe772c7a58672352b5c2b7" prot="private" virt="non-virtual"><scope>KWin::Placement</scope><name>cci</name></member>
      <member refid="class_k_win_1_1_placement_1a88d130d08a017b3d1dae128f8a1e359b" prot="public" virt="non-virtual"><scope>KWin::Placement</scope><name>place</name></member>
      <member refid="class_k_win_1_1_placement_1a4557326d8a74ba99804a2302ba208d5d" prot="private" virt="non-virtual"><scope>KWin::Placement</scope><name>place</name></member>
      <member refid="class_k_win_1_1_placement_1a16d49c06410ab70f62ed9bd40096d18f" prot="private" virt="non-virtual"><scope>KWin::Placement</scope><name>placeAtRandom</name></member>
      <member refid="class_k_win_1_1_placement_1a5f3ce9f39d740e0845c6fe231c537977" prot="private" virt="non-virtual"><scope>KWin::Placement</scope><name>placeCascaded</name></member>
      <member refid="class_k_win_1_1_placement_1a52b31d41788f5619dbcee8faffcf6292" prot="public" virt="non-virtual"><scope>KWin::Placement</scope><name>placeCentered</name></member>
      <member refid="class_k_win_1_1_placement_1af472ecf90821db0ed5beb7462ef5e610" prot="private" virt="non-virtual"><scope>KWin::Placement</scope><name>placeDialog</name></member>
      <member refid="class_k_win_1_1_placement_1a5e097fe5cc114aa4d20d92b6773093b5" prot="private" virt="non-virtual"><scope>KWin::Placement</scope><name>placeMaximizing</name></member>
      <member refid="class_k_win_1_1_placement_1a2980c07c06864f39d2f72cf073385be8" prot="public" virt="non-virtual"><scope>KWin::Placement</scope><name>Placement</name></member>
      <member refid="class_k_win_1_1_placement_1a4428cdc4f7992b4e25dd1f97d77f67f6" prot="private" virt="non-virtual"><scope>KWin::Placement</scope><name>placeOnMainWindow</name></member>
      <member refid="class_k_win_1_1_placement_1a0b0c8d3e7440f62c423c7cc9db1637f0" prot="private" virt="non-virtual"><scope>KWin::Placement</scope><name>placeOnScreenDisplay</name></member>
      <member refid="class_k_win_1_1_placement_1a5adbde71fec9322d9399a078c29d6bf3" prot="public" virt="non-virtual"><scope>KWin::Placement</scope><name>placeSmart</name></member>
      <member refid="class_k_win_1_1_placement_1ad8b65e81e62874838b39684b4785ce2b" prot="private" virt="non-virtual"><scope>KWin::Placement</scope><name>placeTransient</name></member>
      <member refid="class_k_win_1_1_placement_1adb34b1c6e736ff1bd817cc3c72f4f019" prot="private" virt="non-virtual"><scope>KWin::Placement</scope><name>placeUnderMouse</name></member>
      <member refid="class_k_win_1_1_placement_1aad282ff1250a69653c9ba1ce275294ee" prot="private" virt="non-virtual"><scope>KWin::Placement</scope><name>placeUtility</name></member>
      <member refid="class_k_win_1_1_placement_1ab5b759dd623d863abb2fee1abddbb240" prot="private" virt="non-virtual"><scope>KWin::Placement</scope><name>placeZeroCornered</name></member>
      <member refid="class_k_win_1_1_placement_1a8922bd6f0560c2c29af4c932772876e5" prot="public" virt="non-virtual"><scope>KWin::Placement</scope><name>policyToString</name></member>
      <member refid="class_k_win_1_1_placement_1a23b693921c76aac85778baf453e31568" prot="public" virt="non-virtual"><scope>KWin::Placement</scope><name>reinitCascading</name></member>
      <member refid="class_k_win_1_1_placement_1af57af3b4824f90ba501e95ad7bb1181f" prot="public" virt="non-virtual"><scope>KWin::Placement</scope><name>reinitCascading</name></member>
      <member refid="class_k_win_1_1_placement_1a60ea4a8b585fa2d79ec0ba763b1fada4" prot="public" virt="non-virtual"><scope>KWin::Placement</scope><name>unclutterDesktop</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
