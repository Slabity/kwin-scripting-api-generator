<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_quick_scene_effect" kind="class" language="C++" prot="public">
    <compoundname>KWin::QuickSceneEffect</compoundname>
    <basecompoundref refid="class_k_win_1_1_effect" prot="public" virt="non-virtual">KWin::Effect</basecompoundref>
    <derivedcompoundref refid="class_k_win_1_1_overview_effect" prot="public" virt="non-virtual">KWin::OverviewEffect</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_scripted_quick_scene_effect" prot="public" virt="non-virtual">KWin::ScriptedQuickSceneEffect</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_tiles_editor_effect" prot="public" virt="non-virtual">KWin::TilesEditorEffect</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_window_view_effect" prot="public" virt="non-virtual">KWin::WindowViewEffect</derivedcompoundref>
    <includes refid="quickeffect_8h" local="no">quickeffect.h</includes>
    <sectiondef kind="property">
      <memberdef kind="property" id="class_k_win_1_1_quick_scene_effect_1a31abb5a4e58a1482023e366b0ec73556" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_k_win_1_1_quick_scene_view" kindref="compound">QuickSceneView</ref> *</type>
        <definition>QuickSceneView * KWin::QuickSceneEffect::activeView</definition>
        <argsstring></argsstring>
        <name>activeView</name>
        <qualifiedname>KWin::QuickSceneEffect::activeView</qualifiedname>
        <read>activeView</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="78" column="5" bodyfile="kwin/src/effect/quickeffect.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_quick_scene_effect_1a2cf83e8059767eecfb02956d351bd023" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QQmlComponent *</type>
        <definition>QQmlComponent * KWin::QuickSceneEffect::delegate</definition>
        <argsstring></argsstring>
        <name>delegate</name>
        <qualifiedname>KWin::QuickSceneEffect::delegate</qualifiedname>
        <read>delegate</read>
        <write>setDelegate</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="79" column="5" bodyfile="kwin/src/effect/quickeffect.h" bodystart="79" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_quick_scene_effect_1a0d0d16a5cff179119af02c37df47b22e" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_quick_scene_effect_private" kindref="compound">QuickSceneEffectPrivate</ref> &gt;</type>
        <definition>std::unique_ptr&lt;QuickSceneEffectPrivate&gt; KWin::QuickSceneEffect::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <qualifiedname>KWin::QuickSceneEffect::d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="183" column="21" bodyfile="kwin/src/effect/quickeffect.h" bodystart="183" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_k_win_1_1_quick_scene_effect_1a762b06d6e39043ecae24b67fb4156edf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QuickSceneEffectPrivate</definition>
        <argsstring></argsstring>
        <name>QuickSceneEffectPrivate</name>
        <qualifiedname>KWin::QuickSceneEffect::QuickSceneEffectPrivate</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_quick_scene_effect_private" kindref="compound">QuickSceneEffectPrivate</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="184" column="18" bodyfile="kwin/src/effect/quickeffect.h" bodystart="184" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1a23542947d54a16d6b2e4f88d1e3ced43" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::QuickSceneEffect::QuickSceneEffect</definition>
        <argsstring>(QObject *parent=nullptr)</argsstring>
        <name>QuickSceneEffect</name>
        <qualifiedname>KWin::QuickSceneEffect::QuickSceneEffect</qualifiedname>
        <param>
          <type>QObject *</type>
          <declname>parent</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="82" column="14" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="173" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1a60bc5ae713e152040ee1cd02a852beae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::QuickSceneEffect::~QuickSceneEffect</definition>
        <argsstring>() override</argsstring>
        <name>~QuickSceneEffect</name>
        <qualifiedname>KWin::QuickSceneEffect::~QuickSceneEffect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="83" column="5" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1a6eb287966b542fa3ec513c3cf1f191f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::QuickSceneEffect::isRunning</definition>
        <argsstring>() const</argsstring>
        <name>isRunning</name>
        <qualifiedname>KWin::QuickSceneEffect::isRunning</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the effect is running; otherwise returns <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="88" column="10" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="223" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1af0eee38afb2e9122b5ff8af73ee78f0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::QuickSceneEffect::setRunning</definition>
        <argsstring>(bool running)</argsstring>
        <name>setRunning</name>
        <qualifiedname>KWin::QuickSceneEffect::setRunning</qualifiedname>
        <param>
          <type>bool</type>
          <declname>running</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Starts or stops the effect depending on <emphasis>running</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="93" column="10" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="228" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1a03e1ff8c669ce6b8be8d6902a86941ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_quick_scene_view" kindref="compound">QuickSceneView</ref> *</type>
        <definition>QuickSceneView * KWin::QuickSceneEffect::activeView</definition>
        <argsstring>() const</argsstring>
        <name>activeView</name>
        <qualifiedname>KWin::QuickSceneEffect::activeView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="95" column="20" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="297" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1aabe6de2b1804ef91ba1cee4a705daca3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Q_INVOKABLE <ref refid="class_k_win_1_1_quick_scene_view" kindref="compound">QuickSceneView</ref> *</type>
        <definition>QuickSceneView * KWin::QuickSceneEffect::viewForScreen</definition>
        <argsstring>(Output *screen) const</argsstring>
        <name>viewForScreen</name>
        <qualifiedname>KWin::QuickSceneEffect::viewForScreen</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>screen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the scene view on the specified screen </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="100" column="32" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="283" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1a5bb242b95993ce25bbfd03020d413a9b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Q_INVOKABLE <ref refid="class_k_win_1_1_quick_scene_view" kindref="compound">QuickSceneView</ref> *</type>
        <definition>QuickSceneView * KWin::QuickSceneEffect::viewAt</definition>
        <argsstring>(const QPoint &amp;pos) const</argsstring>
        <name>viewAt</name>
        <qualifiedname>KWin::QuickSceneEffect::viewAt</qualifiedname>
        <param>
          <type>const QPoint &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the view at the specified <emphasis>pos</emphasis> in the global screen coordinates. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="105" column="32" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="289" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1a43566a32130eef5df3b66659d58ea4ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_INVOKABLE <ref refid="class_k_win_1_1_quick_scene_view" kindref="compound">KWin::QuickSceneView</ref> *</type>
        <definition>KWin::QuickSceneView * KWin::QuickSceneEffect::getView</definition>
        <argsstring>(Qt::Edge edge)</argsstring>
        <name>getView</name>
        <qualifiedname>KWin::QuickSceneEffect::getView</qualifiedname>
        <param>
          <type>Qt::Edge</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a view at the given direction from the active view Returns null if no other views exist in the given direction </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="111" column="38" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="308" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1a4474bf63b84ac3ef2069cd5cb998f300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_INVOKABLE void</type>
        <definition>void KWin::QuickSceneEffect::activateView</definition>
        <argsstring>(QuickSceneView *view)</argsstring>
        <name>activateView</name>
        <qualifiedname>KWin::QuickSceneEffect::activateView</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_quick_scene_view" kindref="compound">QuickSceneView</ref> *</type>
          <declname>view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the given <emphasis>view</emphasis> as active. It will get a focusin event and all the other views will be set as inactive </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="116" column="22" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="351" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1af7a6504827caeb1226f8546acb92a72d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QQmlComponent *</type>
        <definition>QQmlComponent * KWin::QuickSceneEffect::delegate</definition>
        <argsstring>() const</argsstring>
        <name>delegate</name>
        <qualifiedname>KWin::QuickSceneEffect::delegate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The delegate provides a template defining the contents of each instantiated screen view. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="121" column="19" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="256" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1a56801ce7c51620b04cd8eaea9e31bd09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::QuickSceneEffect::setDelegate</definition>
        <argsstring>(QQmlComponent *delegate)</argsstring>
        <name>setDelegate</name>
        <qualifiedname>KWin::QuickSceneEffect::setDelegate</qualifiedname>
        <param>
          <type>QQmlComponent *</type>
          <declname>delegate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="122" column="10" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="261" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1a481cacdd528738b8befc1b5c3f98ddcc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QUrl</type>
        <definition>QUrl KWin::QuickSceneEffect::source</definition>
        <argsstring>() const</argsstring>
        <name>source</name>
        <qualifiedname>KWin::QuickSceneEffect::source</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the source URL. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="127" column="10" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="239" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1acf724e7fa4e5cfc3dc8298c51169e7b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::QuickSceneEffect::setSource</definition>
        <argsstring>(const QUrl &amp;url)</argsstring>
        <name>setSource</name>
        <qualifiedname>KWin::QuickSceneEffect::setSource</qualifiedname>
        <param>
          <type>const QUrl &amp;</type>
          <declname>url</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the source url to <emphasis>url</emphasis>. Note that the QML component will be loaded the next time the effect is started.</para>
<para>While the effect is running, the source url cannot be changed.</para>
<para>In order to provide your custom initial properties, you need to override the <ref refid="class_k_win_1_1_quick_scene_effect_1a9f96aa653198e555afe84f2ea938af94" kindref="member">initialProperties()</ref> function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="138" column="10" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="244" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1a3ae4100fa9c5f41a1da5c5c7414ebcbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::QuickSceneEffect::eventFilter</definition>
        <argsstring>(QObject *watched, QEvent *event) override</argsstring>
        <name>eventFilter</name>
        <qualifiedname>KWin::QuickSceneEffect::eventFilter</qualifiedname>
        <param>
          <type>QObject *</type>
          <declname>watched</declname>
        </param>
        <param>
          <type>QEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="140" column="10" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="213" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1a0d7d939598d998e5a722a7afb4ffa74d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::QuickSceneEffect::prePaintScreen</definition>
        <argsstring>(ScreenPrePaintData &amp;data, std::chrono::milliseconds presentTime) override</argsstring>
        <name>prePaintScreen</name>
        <qualifiedname>KWin::QuickSceneEffect::prePaintScreen</qualifiedname>
        <reimplements refid="group__kwineffects_1ga2edc1b757e36bb6bcbbacde454dfc05c">prePaintScreen</reimplements>
        <param>
          <type><ref refid="class_k_win_1_1_screen_pre_paint_data" kindref="compound">ScreenPrePaintData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::chrono::milliseconds</type>
          <declname>presentTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called before starting to paint the screen. In this method you can: <itemizedlist>
<listitem><para>set whether the windows or the entire screen will be transformed </para>
</listitem>
<listitem><para>change the region of the screen that will be painted </para>
</listitem>
<listitem><para>do various housekeeping tasks such as initing your effect&apos;s variables for the upcoming paint pass or updating animation&apos;s progress</para>
</listitem>
</itemizedlist>
<emphasis>presentTime</emphasis> specifies the expected monotonic time when the rendered frame will be displayed on the screen. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="142" column="10" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1a0736963c0152e2068e26f639cdfa950c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::QuickSceneEffect::paintScreen</definition>
        <argsstring>(const RenderTarget &amp;renderTarget, const RenderViewport &amp;viewport, int mask, const QRegion &amp;region, Output *screen) override</argsstring>
        <name>paintScreen</name>
        <qualifiedname>KWin::QuickSceneEffect::paintScreen</qualifiedname>
        <reimplements refid="group__kwineffects_1ga44ee94161446ce6fb2502376af6515a8">paintScreen</reimplements>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref> &amp;</type>
          <declname>renderTarget</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_viewport" kindref="compound">RenderViewport</ref> &amp;</type>
          <declname>viewport</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const QRegion &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>screen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>In this method you can: <itemizedlist>
<listitem><para>paint something on top of the windows (by painting after calling effects-&gt;<ref refid="class_k_win_1_1_quick_scene_effect_1a0736963c0152e2068e26f639cdfa950c" kindref="member">paintScreen()</ref>) </para>
</listitem>
<listitem><para>paint multiple desktops and/or multiple copies of the same desktop by calling effects-&gt;<ref refid="class_k_win_1_1_quick_scene_effect_1a0736963c0152e2068e26f639cdfa950c" kindref="member">paintScreen()</ref> multiple times</para>
</listitem>
</itemizedlist>
In OpenGL based compositing, the frameworks ensures that the context is current when this method is invoked. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="143" column="10" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="377" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1a6a675af8b47f99d140fe248641755440" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::QuickSceneEffect::isActive</definition>
        <argsstring>() const override</argsstring>
        <name>isActive</name>
        <qualifiedname>KWin::QuickSceneEffect::isActive</qualifiedname>
        <reimplements refid="group__kwineffects_1ga596b6c0ed146b97b293f5db5f27fc40f">isActive</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overwrite this method to indicate whether your effect will be doing something in the next frame to be rendered. If the method returns <computeroutput>false</computeroutput> the effect will be excluded from the chained methods in the next rendered frame.</para>
<para>This method is called always directly before the paint loop begins. So it is totally fine to e.g. react on a window event, issue a repaint to trigger an animation and change a flag to indicate that this method returns <computeroutput>true</computeroutput>.</para>
<para>As the method is called each frame, you should not perform complex calculations. Best use just a boolean flag.</para>
<para>The default implementation of this method returns <computeroutput>true</computeroutput>. <simplesect kind="since"><para>4.8 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="144" column="10" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="390" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1a35e3d1c44216d995e5909607c9c1df52" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::QuickSceneEffect::windowInputMouseEvent</definition>
        <argsstring>(QEvent *event) override</argsstring>
        <name>windowInputMouseEvent</name>
        <qualifiedname>KWin::QuickSceneEffect::windowInputMouseEvent</qualifiedname>
        <reimplements refid="group__kwineffects_1ga7b142933c38cb9b4a433b768b266e7cb">windowInputMouseEvent</reimplements>
        <param>
          <type>QEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="146" column="10" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="524" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1aa82a50b9a15168bbc3416744d746f103" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::QuickSceneEffect::grabbedKeyboardEvent</definition>
        <argsstring>(QKeyEvent *keyEvent) override</argsstring>
        <name>grabbedKeyboardEvent</name>
        <qualifiedname>KWin::QuickSceneEffect::grabbedKeyboardEvent</qualifiedname>
        <reimplements refid="group__kwineffects_1gab5e0581ae4b2dffe8014ff5cf6c21158">grabbedKeyboardEvent</reimplements>
        <reimplementedby refid="class_k_win_1_1_tiles_editor_effect_1a4a5f810a51a3c3bfc87df7a79919e8e1">grabbedKeyboardEvent</reimplementedby>
        <param>
          <type>QKeyEvent *</type>
          <declname>keyEvent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="147" column="10" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="561" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1ac651b98599c748937a04e4932ec3da0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::QuickSceneEffect::touchDown</definition>
        <argsstring>(qint32 id, const QPointF &amp;pos, std::chrono::microseconds time) override</argsstring>
        <name>touchDown</name>
        <qualifiedname>KWin::QuickSceneEffect::touchDown</qualifiedname>
        <reimplements refid="group__kwineffects_1ga315fd305e7570f41e7bce7db6812381f">touchDown</reimplements>
        <param>
          <type>qint32</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A touch point was pressed.</para>
<para>If the effect wants to exclusively use the touch event it should return <computeroutput>true</computeroutput>. If <computeroutput>false</computeroutput> is returned the touch event is passed to further effects.</para>
<para>In general an <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> should only return <computeroutput>true</computeroutput> if it is the exclusive effect getting input events. E.g. has grabbed mouse events.</para>
<para>Default implementation returns <computeroutput>false</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique id of the touch point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The position of the touch point in global coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_quick_scene_effect_1a4da9d3ed861829bb7abcbb4113c2079a" kindref="member">touchMotion</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_quick_scene_effect_1ad5d08b788a7b90ddaa3acd7f06f7720f" kindref="member">touchUp</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.8 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="149" column="10" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="572" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1a4da9d3ed861829bb7abcbb4113c2079a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::QuickSceneEffect::touchMotion</definition>
        <argsstring>(qint32 id, const QPointF &amp;pos, std::chrono::microseconds time) override</argsstring>
        <name>touchMotion</name>
        <qualifiedname>KWin::QuickSceneEffect::touchMotion</qualifiedname>
        <reimplements refid="group__kwineffects_1ga54d00a9e05b5d4597db40c2f5b1d36de">touchMotion</reimplements>
        <param>
          <type>qint32</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A touch point moved.</para>
<para>If the effect wants to exclusively use the touch event it should return <computeroutput>true</computeroutput>. If <computeroutput>false</computeroutput> is returned the touch event is passed to further effects.</para>
<para>In general an <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> should only return <computeroutput>true</computeroutput> if it is the exclusive effect getting input events. E.g. has grabbed mouse events.</para>
<para>Default implementation returns <computeroutput>false</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique id of the touch point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The position of the touch point in global coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_quick_scene_effect_1ac651b98599c748937a04e4932ec3da0e" kindref="member">touchDown</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_quick_scene_effect_1ad5d08b788a7b90ddaa3acd7f06f7720f" kindref="member">touchUp</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.8 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="150" column="10" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="583" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1ad5d08b788a7b90ddaa3acd7f06f7720f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::QuickSceneEffect::touchUp</definition>
        <argsstring>(qint32 id, std::chrono::microseconds time) override</argsstring>
        <name>touchUp</name>
        <qualifiedname>KWin::QuickSceneEffect::touchUp</qualifiedname>
        <reimplements refid="group__kwineffects_1gaf3871967d6199eb7c87621bc75b925bb">touchUp</reimplements>
        <param>
          <type>qint32</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A touch point was released.</para>
<para>If the effect wants to exclusively use the touch event it should return <computeroutput>true</computeroutput>. If <computeroutput>false</computeroutput> is returned the touch event is passed to further effects.</para>
<para>In general an <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> should only return <computeroutput>true</computeroutput> if it is the exclusive effect getting input events. E.g. has grabbed mouse events.</para>
<para>Default implementation returns <computeroutput>false</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique id of the touch point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_quick_scene_effect_1ac651b98599c748937a04e4932ec3da0e" kindref="member">touchDown</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_quick_scene_effect_1a4da9d3ed861829bb7abcbb4113c2079a" kindref="member">touchMotion</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.8 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="151" column="10" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="593" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1a025cb10749bb171c06e1d32c190f1663" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::QuickSceneEffect::touchCancel</definition>
        <argsstring>() override</argsstring>
        <name>touchCancel</name>
        <qualifiedname>KWin::QuickSceneEffect::touchCancel</qualifiedname>
        <reimplements refid="group__kwineffects_1gaa31554949bc00085e6380b50be16138e">touchCancel</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All touch points were canceled <simplesect kind="since"><para>6.3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="152" column="10" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="603" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1a6dd7abedad532011fb3c5b5d1cffc54a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_INVOKABLE void</type>
        <definition>void KWin::QuickSceneEffect::checkItemDraggedOutOfScreen</definition>
        <argsstring>(QQuickItem *item)</argsstring>
        <name>checkItemDraggedOutOfScreen</name>
        <qualifiedname>KWin::QuickSceneEffect::checkItemDraggedOutOfScreen</qualifiedname>
        <param>
          <type>QQuickItem *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="156" column="22" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="188" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1ac479febcc86676a4aaf9a6cc72196f73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_INVOKABLE void</type>
        <definition>void KWin::QuickSceneEffect::checkItemDroppedOutOfScreen</definition>
        <argsstring>(const QPointF &amp;globalPos, QQuickItem *item)</argsstring>
        <name>checkItemDroppedOutOfScreen</name>
        <qualifiedname>KWin::QuickSceneEffect::checkItemDroppedOutOfScreen</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>globalPos</declname>
        </param>
        <param>
          <type>QQuickItem *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="157" column="22" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="202" bodyend="211"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1ae83ffa8fa8000ba14d4a756812eef89c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::QuickSceneEffect::supported</definition>
        <argsstring>()</argsstring>
        <name>supported</name>
        <qualifiedname>KWin::QuickSceneEffect::supported</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="154" column="17" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="183" bodyend="186"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="signal">
      <memberdef kind="signal" id="class_k_win_1_1_quick_scene_effect_1a84d98fa9c21429b985b60340cd51bdad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::QuickSceneEffect::itemDraggedOutOfScreen</definition>
        <argsstring>(QQuickItem *item, QList&lt; Output * &gt; screens)</argsstring>
        <name>itemDraggedOutOfScreen</name>
        <qualifiedname>KWin::QuickSceneEffect::itemDraggedOutOfScreen</qualifiedname>
        <param>
          <type>QQuickItem *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>QList&lt; <ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> * &gt;</type>
          <declname>screens</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="160" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_quick_scene_effect_1a9bb46a2b1fd281d46cd29641fe9fceea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::QuickSceneEffect::itemDroppedOutOfScreen</definition>
        <argsstring>(const QPointF &amp;globalPos, QQuickItem *item, Output *screen)</argsstring>
        <name>itemDroppedOutOfScreen</name>
        <qualifiedname>KWin::QuickSceneEffect::itemDroppedOutOfScreen</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>globalPos</declname>
        </param>
        <param>
          <type>QQuickItem *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>screen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="161" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_quick_scene_effect_1a9e56b39f5b52feaedcd430266cda7822" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::QuickSceneEffect::activeViewChanged</definition>
        <argsstring>(KWin::QuickSceneView *view)</argsstring>
        <name>activeViewChanged</name>
        <qualifiedname>KWin::QuickSceneEffect::activeViewChanged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_quick_scene_view" kindref="compound">KWin::QuickSceneView</ref> *</type>
          <declname>view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="162" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_quick_scene_effect_1ab11e15c43c9b7ec5951135d12257fea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::QuickSceneEffect::delegateChanged</definition>
        <argsstring>()</argsstring>
        <name>delegateChanged</name>
        <qualifiedname>KWin::QuickSceneEffect::delegateChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="163" column="10"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1a9f96aa653198e555afe84f2ea938af94" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>QVariantMap</type>
        <definition>QVariantMap KWin::QuickSceneEffect::initialProperties</definition>
        <argsstring>(Output *screen)</argsstring>
        <name>initialProperties</name>
        <qualifiedname>KWin::QuickSceneEffect::initialProperties</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_tiles_editor_effect_1ae7a574a9000342e998649b73cec13a8a">initialProperties</reimplementedby>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>screen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reimplement this function to provide your initial properties for the scene view on the specified <emphasis>screen</emphasis>.</para>
<para><simplesect kind="see"><para>QQmlComponent::createWithInitialProperties() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="172" column="25" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="395" bodyend="398"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1a7178745fcdc5a8d84e021cb88299ba1f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::QuickSceneEffect::handleScreenAdded</definition>
        <argsstring>(Output *screen)</argsstring>
        <name>handleScreenAdded</name>
        <qualifiedname>KWin::QuickSceneEffect::handleScreenAdded</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>screen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="175" column="10" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="400" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1a6a3c90b6b38342bcc78a8eff24e6ff9d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::QuickSceneEffect::handleScreenRemoved</definition>
        <argsstring>(Output *screen)</argsstring>
        <name>handleScreenRemoved</name>
        <qualifiedname>KWin::QuickSceneEffect::handleScreenRemoved</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>screen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="176" column="10" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="405" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1afd131e581bd2f45f6f3c84c4035690bf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::QuickSceneEffect::addScreen</definition>
        <argsstring>(Output *screen)</argsstring>
        <name>addScreen</name>
        <qualifiedname>KWin::QuickSceneEffect::addScreen</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>screen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="178" column="10" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="410" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1a156f35e8953d58d3e910a999e288a7fc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::QuickSceneEffect::removeScreen</definition>
        <argsstring>(Output *screen)</argsstring>
        <name>removeScreen</name>
        <qualifiedname>KWin::QuickSceneEffect::removeScreen</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>screen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="179" column="10" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="450" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1a132a59b5063f320eb252badd0b2dc43f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::QuickSceneEffect::startInternal</definition>
        <argsstring>()</argsstring>
        <name>startInternal</name>
        <qualifiedname>KWin::QuickSceneEffect::startInternal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="180" column="10" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="457" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_quick_scene_effect_1ac870419c45638455fa920abf014a7012" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::QuickSceneEffect::stopInternal</definition>
        <argsstring>()</argsstring>
        <name>stopInternal</name>
        <qualifiedname>KWin::QuickSceneEffect::stopInternal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/quickeffect.h" line="181" column="10" bodyfile="kwin/src/effect/quickeffect.cpp" bodystart="508" bodyend="522"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="class_k_win_1_1_quick_scene_effect" kindref="compound">QuickSceneEffect</ref> class provides a convenient way to write fullscreen QtQuick-based effects.</para>
<para><ref refid="class_k_win_1_1_quick_scene_view" kindref="compound">QuickSceneView</ref> objects are managed internally.</para>
<para>The <ref refid="class_k_win_1_1_quick_scene_effect" kindref="compound">QuickSceneEffect</ref> takes care of forwarding input events to <ref refid="class_k_win_1_1_quick_scene_view" kindref="compound">QuickSceneView</ref> and rendering. You can override relevant hooks from the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> class to customize input handling or rendering, although it&apos;s highly recommended that you avoid doing that.</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_quick_scene_view" kindref="compound">QuickSceneView</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>KWin::Effect</label>
        <link refid="class_k_win_1_1_effect"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>KWin::OverviewEffect</label>
        <link refid="class_k_win_1_1_overview_effect"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::QuickSceneEffect</label>
        <link refid="class_k_win_1_1_quick_scene_effect"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>KWin::ScriptedQuickSceneEffect</label>
        <link refid="class_k_win_1_1_scripted_quick_scene_effect"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>KWin::TilesEditorEffect</label>
        <link refid="class_k_win_1_1_tiles_editor_effect"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>KWin::WindowViewEffect</label>
        <link refid="class_k_win_1_1_window_view_effect"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>KWin::Effect</label>
        <link refid="class_k_win_1_1_effect"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::QuickSceneEffect</label>
        <link refid="class_k_win_1_1_quick_scene_effect"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/effect/quickeffect.h" line="75" column="1" bodyfile="kwin/src/effect/quickeffect.h" bodystart="76" bodyend="185"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_quick_scene_effect_1a4474bf63b84ac3ef2069cd5cb998f300" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>activateView</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a31abb5a4e58a1482023e366b0ec73556" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>activeView</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a03e1ff8c669ce6b8be8d6902a86941ef" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>activeView</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a9e56b39f5b52feaedcd430266cda7822" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>activeViewChanged</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1afd131e581bd2f45f6f3c84c4035690bf" prot="private" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>addScreen</name></member>
      <member refid="group__kwineffects_1gab9bcf52072fe74567496b0a894d1d873" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>animationTime</name></member>
      <member refid="group__kwineffects_1ga3a167fe6d9c46376ed46db13caf2d135" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>animationTime</name></member>
      <member refid="group__kwineffects_1ga0ba05f1463195d0f92ea1dd3396a5d16" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>animationTime</name></member>
      <member refid="group__kwineffects_1ga7cf8035c970fcde177e3038d79015289" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>blocksDirectScanout</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aea67d120ab5ce1dc424476e63c132af6c1" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>Blur</name></member>
      <member refid="group__kwineffects_1gab8a94f591b743b59b7285911e641e7d5" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>borderActivated</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a6dd7abedad532011fb3c5b5d1cffc54a" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>checkItemDraggedOutOfScreen</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1ac479febcc86676a4aaf9a6cc72196f73" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>checkItemDroppedOutOfScreen</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aead805f717a48c23959a1e9ecd7722d15d" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>Contrast</name></member>
      <member refid="group__kwineffects_1ga4da344d8b8f2cb9eecd6e64a9b758740" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>cursorPos</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a0d0d16a5cff179119af02c37df47b22e" prot="private" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>d</name></member>
      <member refid="group__kwineffects_1ga0c159e00c3a51ca733bea49cf8d52691" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>debug</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a2cf83e8059767eecfb02956d351bd023" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>delegate</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1af7a6504827caeb1226f8546acb92a72d" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>delegate</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1ab11e15c43c9b7ec5951135d12257fea3" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>delegateChanged</name></member>
      <member refid="group__kwineffects_1ga254b1a3e8bb8b9b671e9b000ca027b7c" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>drawWindow</name></member>
      <member refid="group__kwineffects_1ga7bd8262f4cb2c5c3090c748eb388ad7e" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>Effect</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a3ae4100fa9c5f41a1da5c5c7414ebcbd" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>eventFilter</name></member>
      <member refid="group__kwineffects_1ga6337b2a9b5aadfbb6b696119144b56ae" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>Feature</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a43566a32130eef5df3b66659d58ea4ee" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>getView</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1aa82a50b9a15168bbc3416744d746f103" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>grabbedKeyboardEvent</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a7178745fcdc5a8d84e021cb88299ba1f" prot="private" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>handleScreenAdded</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a6a3c90b6b38342bcc78a8eff24e6ff9d" prot="private" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>handleScreenRemoved</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aeaecbb77ad241419970ece3d45296c4838" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>HighlightWindows</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a9f96aa653198e555afe84f2ea938af94" prot="protected" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>initialProperties</name></member>
      <member refid="group__kwineffects_1ga7b0ecb57667179e95c188f0ee7416d00" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>interpolate</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a6a675af8b47f99d140fe248641755440" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>isActive</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a6eb287966b542fa3ec513c3cf1f191f8" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>isRunning</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a84d98fa9c21429b985b60340cd51bdad" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>itemDraggedOutOfScreen</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a9bb46a2b1fd281d46cd29641fe9fceea" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>itemDroppedOutOfScreen</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aea170229312ed2ec0e446ee89ba7f6b6ca" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>Nothing</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378dab0de2932c45bde6df3de10d00dbd6fcd" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>PAINT_SCREEN_BACKGROUND_FIRST</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378da43acbfc913cae9eb3c363aeb0524f18f" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>PAINT_SCREEN_REGION</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378da3e731594d83c3e92742bff7c420fb7f8" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>PAINT_SCREEN_TRANSFORMED</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378da124dd798e5f793087e81da77e11a9b1e" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>PAINT_SCREEN_WITH_TRANSFORMED_WINDOWS</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378dac606d3dcf2dd150234f71c4c39083c7d" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>PAINT_WINDOW_OPAQUE</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378da684bb6c6c278b900b6d0c889e79233b8" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>PAINT_WINDOW_TRANSFORMED</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378dac7237bf4bb4d6ea6d6fb1215db19b45e" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>PAINT_WINDOW_TRANSLUCENT</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a0736963c0152e2068e26f639cdfa950c" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>paintScreen</name></member>
      <member refid="group__kwineffects_1ga0f0292db2bf016a0843ef7cc06219378" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>paintWindow</name></member>
      <member refid="group__kwineffects_1ga5fb1bc87ff54dcc2cfe87b070816ab00" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>perform</name></member>
      <member refid="group__kwineffects_1ga10021cf9704c00d60beae284d53846e2" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>postPaintScreen</name></member>
      <member refid="group__kwineffects_1ga9b7cf82c6f74331cffabb06c63ef914c" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>postPaintWindow</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a0d7d939598d998e5a722a7afb4ffa74d" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>prePaintScreen</name></member>
      <member refid="group__kwineffects_1ga2832c7831c0f49f9f5cf0267ffc53672" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>prePaintWindow</name></member>
      <member refid="group__kwineffects_1ga30fc2cbbdd90f95568a9e350f34bf2b7" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>provides</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a23542947d54a16d6b2e4f88d1e3ced43" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>QuickSceneEffect</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a762b06d6e39043ecae24b67fb4156edf" prot="private" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>QuickSceneEffectPrivate</name></member>
      <member refid="group__kwineffects_1ga737c6d80eb8f8b24fdc6398209c38e3d" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>reconfigure</name></member>
      <member refid="group__kwineffects_1gga4aebd7d0f695e37678debaa118fa92dca19d3e23e53788c8d9cc9c18fbf75fc7d" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>ReconfigureAll</name></member>
      <member refid="group__kwineffects_1ga4aebd7d0f695e37678debaa118fa92dc" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>ReconfigureFlag</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a156f35e8953d58d3e910a999e288a7fc" prot="private" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>removeScreen</name></member>
      <member refid="group__kwineffects_1ga120531588e58691a5a18028158d2947a" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>requestedEffectChainPosition</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aea592ea0de7a4d658a1ef9bbb48b18e15a" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>ScreenInversion</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a56801ce7c51620b04cd8eaea9e31bd09" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>setDelegate</name></member>
      <member refid="group__kwineffects_1ga1efc42cd9be15e8200c6e55f6bf47cb8" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>setPositionTransformations</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1af0eee38afb2e9122b5ff8af73ee78f0d" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>setRunning</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1acf724e7fa4e5cfc3dc8298c51169e7b8" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>setSource</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a481cacdd528738b8befc1b5c3f98ddcc" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>source</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a132a59b5063f320eb252badd0b2dc43f" prot="private" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>startInternal</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1ac870419c45638455fa920abf014a7012" prot="private" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>stopInternal</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1ae83ffa8fa8000ba14d4a756812eef89c" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>supported</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aea19036d413806c53978a3234e7eb197c4" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>SystemBell</name></member>
      <member refid="group__kwineffects_1ga2d22a8f0b8a4d81615dff67dc1ef970f" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>tabletPadButtonEvent</name></member>
      <member refid="group__kwineffects_1gaa084e5a45597f5775213715eb5506f63" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>tabletPadRingEvent</name></member>
      <member refid="group__kwineffects_1ga4998fb0983bd97163935cad2c4dedd76" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>tabletPadStripEvent</name></member>
      <member refid="group__kwineffects_1ga1d4ae01f5935ea887a12018d59191cbf" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>tabletToolAxis</name></member>
      <member refid="group__kwineffects_1ga7a984d7d83dfa97962b8404301c6aba9" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>tabletToolButtonEvent</name></member>
      <member refid="group__kwineffects_1ga4ed77506be381680bf664dbc8c20e036" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>tabletToolProximity</name></member>
      <member refid="group__kwineffects_1gaf16e9ca42cceb738fb859d1a1a462548" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>tabletToolTip</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a025cb10749bb171c06e1d32c190f1663" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>touchCancel</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1ac651b98599c748937a04e4932ec3da0e" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>touchDown</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a4da9d3ed861829bb7abcbb4113c2079a" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>touchMotion</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1ad5d08b788a7b90ddaa3acd7f06f7720f" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>touchUp</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a5bb242b95993ce25bbfd03020d413a9b" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>viewAt</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1aabe6de2b1804ef91ba1cee4a705daca3" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>viewForScreen</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a35e3d1c44216d995e5909607c9c1df52" prot="public" virt="virtual"><scope>KWin::QuickSceneEffect</scope><name>windowInputMouseEvent</name></member>
      <member refid="group__kwineffects_1ga50174eb0169aebceb78ebd5aff71c481" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>~Effect</name></member>
      <member refid="class_k_win_1_1_quick_scene_effect_1a60bc5ae713e152040ee1cd02a852beae" prot="public" virt="non-virtual"><scope>KWin::QuickSceneEffect</scope><name>~QuickSceneEffect</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
