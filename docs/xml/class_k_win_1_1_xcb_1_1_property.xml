<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_xcb_1_1_property" kind="class" language="C++" prot="public">
    <compoundname>KWin::Xcb::Property</compoundname>
    <basecompoundref refid="class_k_win_1_1_xcb_1_1_wrapper" prot="public" virt="non-virtual">KWin::Xcb::Wrapper&lt; PropertyData, uint8_t, xcb_window_t, xcb_atom_t, xcb_atom_t, uint32_t, uint32_t &gt;</basecompoundref>
    <derivedcompoundref refid="class_k_win_1_1_xcb_1_1_string_property" prot="public" virt="non-virtual">KWin::Xcb::StringProperty</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_xcb_1_1_transient_for" prot="public" virt="non-virtual">KWin::Xcb::TransientFor</derivedcompoundref>
    <includes refid="xcbutils_8h" local="no">xcbutils.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_xcb_1_1_property_1a8d0f7a89ad2db50b6d324b8dafe08cc8" prot="private" static="no" mutable="no">
        <type>xcb_atom_t</type>
        <definition>xcb_atom_t KWin::Xcb::Property::m_type</definition>
        <argsstring></argsstring>
        <name>m_type</name>
        <qualifiedname>KWin::Xcb::Property::m_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/xcbutils.h" line="914" column="16" bodyfile="kwin/src/utils/xcbutils.h" bodystart="914" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_xcb_1_1_property_1a14a7c784af6a8f87e32719020733ca5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KWin::Xcb::Property::Property</definition>
        <argsstring>()</argsstring>
        <name>Property</name>
        <qualifiedname>KWin::Xcb::Property::Property</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/xcbutils.h" line="725" column="5" bodyfile="kwin/src/utils/xcbutils.h" bodystart="725" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_xcb_1_1_property_1a64b443844b55db1315c9840419df06b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KWin::Xcb::Property::Property</definition>
        <argsstring>(const Property &amp;other)</argsstring>
        <name>Property</name>
        <qualifiedname>KWin::Xcb::Property::Property</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_xcb_1_1_property" kindref="compound">Property</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/xcbutils.h" line="730" column="5" bodyfile="kwin/src/utils/xcbutils.h" bodystart="730" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_xcb_1_1_property_1a241fd98ea152918850c5abaa0ee47c37" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KWin::Xcb::Property::Property</definition>
        <argsstring>(uint8_t _delete, xcb_window_t window, xcb_atom_t property, xcb_atom_t type, uint32_t long_offset, uint32_t long_length)</argsstring>
        <name>Property</name>
        <qualifiedname>KWin::Xcb::Property::Property</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>_delete</declname>
        </param>
        <param>
          <type>xcb_window_t</type>
          <declname>window</declname>
        </param>
        <param>
          <type>xcb_atom_t</type>
          <declname>property</declname>
        </param>
        <param>
          <type>xcb_atom_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>long_offset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>long_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/xcbutils.h" line="735" column="14" bodyfile="kwin/src/utils/xcbutils.h" bodystart="735" bodyend="739"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_xcb_1_1_property_1ad5dd32d2218c6a7adb194955e2980c5c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_xcb_1_1_property" kindref="compound">Property</ref> &amp;</type>
        <definition>Property &amp; KWin::Xcb::Property::operator=</definition>
        <argsstring>(const Property &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>KWin::Xcb::Property::operator=</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_xcb_1_1_property" kindref="compound">Property</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/xcbutils.h" line="740" column="14" bodyfile="kwin/src/utils/xcbutils.h" bodystart="740" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_xcb_1_1_property_1a9631bd15933a37502f47f5811578d97e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!std::is_pointer&lt; T &gt;::value, T &gt;<ref refid="namespace_k_win_1a3223e96fea9ab917c25be94e2434013a" kindref="member">::type</ref></type>
        <definition>std::enable_if&lt;!std::is_pointer&lt; T &gt;::value, T &gt;::type KWin::Xcb::Property::value</definition>
        <argsstring>(T defaultValue=T(), bool *ok=nullptr)</argsstring>
        <name>value</name>
        <qualifiedname>KWin::Xcb::Property::value</qualifiedname>
        <param>
          <type>T</type>
          <declname>defaultValue</declname>
          <defval>T()</defval>
        </param>
        <param>
          <type>bool *</type>
          <declname>ok</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Overloaded method for convenience. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses the type which got passed into the ctor and derives the format from the sizeof(T). Note: for the automatic format detection the size of the type T may not vary between architectures. Thus one needs to use e.g. uint32_t instead of long. In general all xcb data types can be used, all Xlib data types can not be used.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The default value to return in case of error </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ok</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to <computeroutput>false</computeroutput> in case of error, <computeroutput>true</computeroutput> in case of success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The read value or <computeroutput>defaultValue</computeroutput> in error case </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/xcbutils.h" line="760" column="44" bodyfile="kwin/src/utils/xcbutils.h" bodystart="760" bodyend="763"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_xcb_1_1_property_1a6d8edc5f5d80c771ded745127552f85e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!std::is_pointer&lt; T &gt;::value, T &gt;<ref refid="namespace_k_win_1a3223e96fea9ab917c25be94e2434013a" kindref="member">::type</ref></type>
        <definition>std::enable_if&lt;!std::is_pointer&lt; T &gt;::value, T &gt;::type KWin::Xcb::Property::value</definition>
        <argsstring>(uint8_t format, xcb_atom_t type, T defaultValue=T(), bool *ok=nullptr)</argsstring>
        <name>value</name>
        <qualifiedname>KWin::Xcb::Property::value</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>format</declname>
        </param>
        <param>
          <type>xcb_atom_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type>T</type>
          <declname>defaultValue</declname>
          <defval>T()</defval>
        </param>
        <param>
          <type>bool *</type>
          <declname>ok</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Reads the property as a POD type. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the first value of the property data. In case of <computeroutput>format</computeroutput> or <computeroutput>type</computeroutput> mismatch the <computeroutput>defaultValue</computeroutput> is returned. The optional argument <computeroutput>ok</computeroutput> is set to <computeroutput>false</computeroutput> in case of error and to <computeroutput>true</computeroutput> in case of successful reading of the property.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected format of the property value, e.g. 32 for XCB_ATOM_CARDINAL </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected type of the property value, e.g. XCB_ATOM_CARDINAL </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The default value to return in case of error </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ok</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to <computeroutput>false</computeroutput> in case of error, <computeroutput>true</computeroutput> in case of success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The read value or <computeroutput>defaultValue</computeroutput> in error case </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/xcbutils.h" line="779" column="44" bodyfile="kwin/src/utils/xcbutils.h" bodystart="779" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_xcb_1_1_property_1aee1e0eace8738c35b18a84728ee8f22b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_pointer&lt; T &gt;::value, T &gt;<ref refid="namespace_k_win_1a3223e96fea9ab917c25be94e2434013a" kindref="member">::type</ref></type>
        <definition>std::enable_if&lt; std::is_pointer&lt; T &gt;::value, T &gt;::type KWin::Xcb::Property::value</definition>
        <argsstring>(T defaultValue=nullptr, bool *ok=nullptr)</argsstring>
        <name>value</name>
        <qualifiedname>KWin::Xcb::Property::value</qualifiedname>
        <param>
          <type>T</type>
          <declname>defaultValue</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool *</type>
          <declname>ok</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Overloaded method for convenience. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses the type which got passed into the ctor and derives the format from the sizeof(T). Note: for the automatic format detection the size of the type T may not vary between architectures. Thus one needs to use e.g. uint32_t instead of long. In general all xcb data types can be used, all Xlib data types can not be used.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The default value to return in case of error </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ok</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to <computeroutput>false</computeroutput> in case of error, <computeroutput>true</computeroutput> in case of success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The read value or <computeroutput>defaultValue</computeroutput> in error case </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/xcbutils.h" line="800" column="44" bodyfile="kwin/src/utils/xcbutils.h" bodystart="800" bodyend="803"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_xcb_1_1_property_1a675c766dfba87289637fe32196758cee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_pointer&lt; T &gt;::value, T &gt;<ref refid="namespace_k_win_1a3223e96fea9ab917c25be94e2434013a" kindref="member">::type</ref></type>
        <definition>std::enable_if&lt; std::is_pointer&lt; T &gt;::value, T &gt;::type KWin::Xcb::Property::value</definition>
        <argsstring>(uint8_t format, xcb_atom_t type, T defaultValue=nullptr, bool *ok=nullptr)</argsstring>
        <name>value</name>
        <qualifiedname>KWin::Xcb::Property::value</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>format</declname>
        </param>
        <param>
          <type>xcb_atom_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type>T</type>
          <declname>defaultValue</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool *</type>
          <declname>ok</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Reads the property as an array of T. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overload for the case that T is a pointer type.</para>
<para>Return the property value casted to the pointer type T. In case of <computeroutput>format</computeroutput> or <computeroutput>type</computeroutput> mismatch the <computeroutput>defaultValue</computeroutput> is returned. Also if the value length is <computeroutput>0</computeroutput> the <computeroutput>defaultValue</computeroutput> is returned. The optional argument <computeroutput>ok</computeroutput> is set to <computeroutput>false</computeroutput> in case of error and to <computeroutput>true</computeroutput> in case of successful reading of the property. Ok will always be true if the property exists and has been successfully read, even in the case the property is empty and its length is 0</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected format of the property value, e.g. 32 for XCB_ATOM_CARDINAL </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected type of the property value, e.g. XCB_ATOM_CARDINAL </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The default value to return in case of error </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ok</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to <computeroutput>false</computeroutput> in case of error, <computeroutput>true</computeroutput> in case of success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The read value or <computeroutput>defaultValue</computeroutput> in error case </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/xcbutils.h" line="823" column="44" bodyfile="kwin/src/utils/xcbutils.h" bodystart="823" bodyend="847"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_xcb_1_1_property_1a107bc59532fcf86aebeb7b6fd4774db7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>QByteArray</type>
        <definition>QByteArray KWin::Xcb::Property::toByteArray</definition>
        <argsstring>(uint8_t format=8, xcb_atom_t type=XCB_ATOM_STRING, bool *ok=nullptr)</argsstring>
        <name>toByteArray</name>
        <qualifiedname>KWin::Xcb::Property::toByteArray</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>format</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>xcb_atom_t</type>
          <declname>type</declname>
          <defval>XCB_ATOM_STRING</defval>
        </param>
        <param>
          <type>bool *</type>
          <declname>ok</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Reads the property as string and returns a QByteArray. </para>
        </briefdescription>
        <detaileddescription>
<para>In case of error this method returns a null QByteArray. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/xcbutils.h" line="853" column="23" bodyfile="kwin/src/utils/xcbutils.h" bodystart="853" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_xcb_1_1_property_1a5a6d0470de6da4c7dcb1d95dcbbf8d4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>QByteArray</type>
        <definition>QByteArray KWin::Xcb::Property::toByteArray</definition>
        <argsstring>(bool *ok)</argsstring>
        <name>toByteArray</name>
        <qualifiedname>KWin::Xcb::Property::toByteArray</qualifiedname>
        <param>
          <type>bool *</type>
          <declname>ok</declname>
        </param>
        <briefdescription>
<para>Overloaded method for convenience. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/xcbutils.h" line="871" column="23" bodyfile="kwin/src/utils/xcbutils.h" bodystart="871" bodyend="874"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_xcb_1_1_property_1a98b97e3e6807647418b240eadbe55438" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Xcb::Property::toBool</definition>
        <argsstring>(uint8_t format=32, xcb_atom_t type=XCB_ATOM_CARDINAL, bool *ok=nullptr)</argsstring>
        <name>toBool</name>
        <qualifiedname>KWin::Xcb::Property::toBool</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>format</declname>
          <defval>32</defval>
        </param>
        <param>
          <type>xcb_atom_t</type>
          <declname>type</declname>
          <defval>XCB_ATOM_CARDINAL</defval>
        </param>
        <param>
          <type>bool *</type>
          <declname>ok</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Reads the property as a boolean value. </para>
        </briefdescription>
        <detaileddescription>
<para>If the property reply length is <computeroutput>1</computeroutput> the first element is interpreted as a boolean value returning <computeroutput>true</computeroutput> for any value unequal to <computeroutput>0</computeroutput> and <computeroutput>false</computeroutput> otherwise.</para>
<para>In case of error this method returns <computeroutput>false</computeroutput>. Thus it is not possible to distinguish between error case and a read <computeroutput>false</computeroutput> value. Use the optional argument <computeroutput>ok</computeroutput> to distinguish the error case.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Expected format. Defaults to 32. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Expected type Defaults to XCB_ATOM_CARDINAL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ok</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to <computeroutput>false</computeroutput> in case of error, <computeroutput>true</computeroutput> in case of success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool The first element interpreted as a boolean value or <computeroutput>false</computeroutput> in error case </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_xcb_1_1_property_1a9631bd15933a37502f47f5811578d97e" kindref="member">value</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/xcbutils.h" line="891" column="17" bodyfile="kwin/src/utils/xcbutils.h" bodystart="891" bodyend="904"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_xcb_1_1_property_1a8acd5ad9b63813e532e0c0ae963df65a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Xcb::Property::toBool</definition>
        <argsstring>(bool *ok)</argsstring>
        <name>toBool</name>
        <qualifiedname>KWin::Xcb::Property::toBool</qualifiedname>
        <param>
          <type>bool *</type>
          <declname>ok</declname>
        </param>
        <briefdescription>
<para>Overloaded method for convenience. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/xcbutils.h" line="908" column="17" bodyfile="kwin/src/utils/xcbutils.h" bodystart="908" bodyend="911"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>KWin::Xcb::AbstractWrapper&lt; PropertyData &gt;</label>
        <link refid="class_k_win_1_1_xcb_1_1_abstract_wrapper"/>
      </node>
      <node id="1">
        <label>KWin::Xcb::Property</label>
        <link refid="class_k_win_1_1_xcb_1_1_property"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>KWin::Xcb::StringProperty</label>
        <link refid="class_k_win_1_1_xcb_1_1_string_property"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>KWin::Xcb::TransientFor</label>
        <link refid="class_k_win_1_1_xcb_1_1_transient_for"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>KWin::Xcb::Wrapper&lt; PropertyData, uint8_t, xcb_window_t, xcb_atom_t, xcb_atom_t, uint32_t, uint32_t &gt;</label>
        <link refid="class_k_win_1_1_xcb_1_1_wrapper"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>KWin::Xcb::AbstractWrapper&lt; PropertyData &gt;</label>
        <link refid="class_k_win_1_1_xcb_1_1_abstract_wrapper"/>
      </node>
      <node id="1">
        <label>KWin::Xcb::Property</label>
        <link refid="class_k_win_1_1_xcb_1_1_property"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>KWin::Xcb::Wrapper&lt; PropertyData, uint8_t, xcb_window_t, xcb_atom_t, xcb_atom_t, uint32_t, uint32_t &gt;</label>
        <link refid="class_k_win_1_1_xcb_1_1_wrapper"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="kwin/src/utils/xcbutils.h" line="722" column="1" bodyfile="kwin/src/utils/xcbutils.h" bodystart="723" bodyend="915"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_xcb_1_1_abstract_wrapper_1abb699a4e3ea3f173e60d85ac002437b3" prot="protected" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>AbstractWrapper</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_abstract_wrapper_1a1f46aa9adb3a717c43737fc7fe7daab9" prot="protected" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>AbstractWrapper</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_abstract_wrapper_1adfff363339b29090b2feef4879114d9f" prot="protected" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>AbstractWrapper</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_abstract_wrapper_1ac521b3501b8dcfdbff4fb3298fcadb68" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>Cookie</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_abstract_wrapper_1a6ba5713772402a437ad15f732268222c" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>data</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_abstract_wrapper_1a3b2354e94544c999c88bf7b0be7954c8" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>data</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_abstract_wrapper_1a5339f5d731224a1857bd61d8f5eb84ac" prot="protected" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>getReply</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_abstract_wrapper_1a3a63032c158d81c214e7d09aa72a2e0f" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>isNull</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_abstract_wrapper_1ab2609efa22c0c5a1b46b2b0c015ed72c" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>isNull</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_abstract_wrapper_1abb8e0fe1808222260170b82f9830ac3f" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>isRetrieved</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_property_1a8d0f7a89ad2db50b6d324b8dafe08cc8" prot="private" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>m_type</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_abstract_wrapper_1acdb2ca786bff8a6b505e13e8b9975da5" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>operator bool</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_abstract_wrapper_1a06a902b1ed009cf660351010813e1c38" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>operator bool</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_abstract_wrapper_1ad7b95ba92c89a4d20ec287e63ff3c2f3" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>operator-&gt;</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_property_1ad5dd32d2218c6a7adb194955e2980c5c" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>operator=</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_abstract_wrapper_1aeff97879572d0ab9e7248d28eb39c348" prot="public" virt="non-virtual" ambiguityscope="KWin::Xcb::Wrapper&lt; PropertyData, uint8_t, xcb_window_t, xcb_atom_t, xcb_atom_t, uint32_t, uint32_t &gt;::"><scope>KWin::Xcb::Property</scope><name>operator=</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_property_1a14a7c784af6a8f87e32719020733ca5d" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>Property</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_property_1a64b443844b55db1315c9840419df06b0" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>Property</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_property_1a241fd98ea152918850c5abaa0ee47c37" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>Property</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_abstract_wrapper_1afe263ed2fd2c80a29998e22d97b7b3fe" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>Reply</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_abstract_wrapper_1a004fd9f828b0e012a779415670b1f40c" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>take</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_property_1a98b97e3e6807647418b240eadbe55438" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>toBool</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_property_1a8acd5ad9b63813e532e0c0ae963df65a" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>toBool</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_property_1a107bc59532fcf86aebeb7b6fd4774db7" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>toByteArray</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_property_1a5a6d0470de6da4c7dcb1d95dcbbf8d4c" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>toByteArray</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_property_1a9631bd15933a37502f47f5811578d97e" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>value</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_property_1a6d8edc5f5d80c771ded745127552f85e" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>value</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_property_1aee1e0eace8738c35b18a84728ee8f22b" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>value</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_property_1a675c766dfba87289637fe32196758cee" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>value</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_abstract_wrapper_1aca5457de5f179ab7622756932df06f9a" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>window</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_wrapper_1a74d896264b1a1ae4bd6fe939a680357e" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>Wrapper</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_wrapper_1a555f0bc8579000384237373469e688fd" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>Wrapper</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_wrapper_1a78b0e612a535d3056272284e5503ca22" prot="public" virt="non-virtual"><scope>KWin::Xcb::Property</scope><name>Wrapper</name></member>
      <member refid="class_k_win_1_1_xcb_1_1_abstract_wrapper_1a9e7f67bc9b3fa6ce68217b17f910846e" prot="public" virt="virtual"><scope>KWin::Xcb::Property</scope><name>~AbstractWrapper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
