<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_window" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>KWin::Window</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QObject</basecompoundref>
    <derivedcompoundref refid="class_k_win_1_1_internal_window" prot="public" virt="non-virtual">KWin::InternalWindow</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_wayland_window" prot="public" virt="non-virtual">KWin::WaylandWindow</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_x11_window" prot="public" virt="non-virtual">KWin::X11Window</derivedcompoundref>
    <includes refid="window_8h" local="no">window.h</includes>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_k_win_1_1_window_1a96727035a8ba0a709cc464483d1d7b3e" prot="public" static="no" strong="no">
        <type></type>
        <name>SizeMode</name>
        <qualifiedname>KWin::Window::SizeMode</qualifiedname>
        <enumvalue id="class_k_win_1_1_window_1a96727035a8ba0a709cc464483d1d7b3eac26ddc87899c79d31f6f90bcd11b85ba" prot="public">
          <name>SizeModeAny</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_window_1a96727035a8ba0a709cc464483d1d7b3eaa2888bb87f22c92391588c28ec2a5f18" prot="public">
          <name>SizeModeFixedW</name>
          <briefdescription>
<para>Try not to affect width. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_window_1a96727035a8ba0a709cc464483d1d7b3eaac1c9b8c41a4ac9f828a6506ca5c0772" prot="public">
          <name>SizeModeFixedH</name>
          <briefdescription>
<para>Try not to affect height. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_window_1a96727035a8ba0a709cc464483d1d7b3ea7e60bdb999d87d3a0596e4e8bfdb415b" prot="public">
          <name>SizeModeMax</name>
          <briefdescription>
<para>Try not to make it larger in either direction. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>How to resize the window in order to obey constraints (mainly aspect ratios). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="689" column="5" bodyfile="kwin/src/window.h" bodystart="689" bodyend="694"/>
      </memberdef>
      <memberdef kind="enum" id="class_k_win_1_1_window_1a70e1b60416c67a488268d17dba135eca" prot="public" static="no" strong="yes">
        <type></type>
        <name>SameApplicationCheck</name>
        <qualifiedname>KWin::Window::SameApplicationCheck</qualifiedname>
        <enumvalue id="class_k_win_1_1_window_1a70e1b60416c67a488268d17dba135ecaa3852083c5b74bec23d5e3ff0964693be" prot="public">
          <name>RelaxedForActive</name>
          <initializer>= 1 &lt;&lt; 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_window_1a70e1b60416c67a488268d17dba135ecaa6f4457bf1caf8f10b38c5d575603e22e" prot="public">
          <name>AllowCrossProcesses</name>
          <initializer>= 1 &lt;&lt; 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1280" column="5" bodyfile="kwin/src/window.h" bodystart="1280" bodyend="1283"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-type">
      <memberdef kind="enum" id="class_k_win_1_1_window_1a412b316294522eb307c31fb2155e82e9" prot="protected" static="no" strong="yes">
        <type>uint</type>
        <name>MoveResizeMode</name>
        <qualifiedname>KWin::Window::MoveResizeMode</qualifiedname>
        <enumvalue id="class_k_win_1_1_window_1a412b316294522eb307c31fb2155e82e9a6adf97f83acf6453d4a6a4b1070f3754" prot="protected">
          <name>None</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_window_1a412b316294522eb307c31fb2155e82e9a6bc362dbf494c61ea117fe3c71ca48a5" prot="protected">
          <name>Move</name>
          <initializer>= 0x1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_window_1a412b316294522eb307c31fb2155e82e9a9d723d04c40bfd81835c0766a698cf63" prot="protected">
          <name>Resize</name>
          <initializer>= 0x2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_window_1a412b316294522eb307c31fb2155e82e9a947af1b31ca1ff7d7668777c04c8b03d" prot="protected">
          <name>MoveResize</name>
          <initializer>= Move | Resize</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1605" column="5" bodyfile="kwin/src/window.h" bodystart="1605" bodyend="1610"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="property">
      <memberdef kind="property" id="class_k_win_1_1_window_1a205c4e3d11f4c4cd184e767829e2afc0" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::bufferGeometry</definition>
        <argsstring></argsstring>
        <name>bufferGeometry</name>
        <qualifiedname>KWin::Window::bufferGeometry</qualifiedname>
        <read>bufferGeometry</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This property holds rectangle that the pixmap or buffer of this <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> occupies on the screen. This rectangle includes invisible portions of the window, e.g. client-side drop shadows, etc. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="71" column="5" bodyfile="kwin/src/window.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1ae65385d8659203d561a91aa7c0af9d8b" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::clientGeometry</definition>
        <argsstring></argsstring>
        <name>clientGeometry</name>
        <qualifiedname>KWin::Window::clientGeometry</qualifiedname>
        <read>clientGeometry</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The geometry of the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> without frame borders. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="76" column="5" bodyfile="kwin/src/window.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a090c42b4c18c700d15ff1822a2044c0f" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QPointF</type>
        <definition>QPointF KWin::Window::pos</definition>
        <argsstring></argsstring>
        <name>pos</name>
        <qualifiedname>KWin::Window::pos</qualifiedname>
        <read>pos</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This property holds the position of the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>&apos;s frame geometry. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="81" column="5" bodyfile="kwin/src/window.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a3d66832f7a462d332759451c3633851d" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QSizeF</type>
        <definition>QSizeF KWin::Window::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <qualifiedname>KWin::Window::size</qualifiedname>
        <read>size</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This property holds the size of the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>&apos;s frame geometry. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="86" column="5" bodyfile="kwin/src/window.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a8ca7699b2ae5cef0dcf3755f55f68fb7" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>qreal</type>
        <definition>qreal KWin::Window::x</definition>
        <argsstring></argsstring>
        <name>x</name>
        <qualifiedname>KWin::Window::x</qualifiedname>
        <read>x</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This property holds the x position of the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>&apos;s frame geometry. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="91" column="5" bodyfile="kwin/src/window.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a82df990348a6c4a0696ef5e1f8aea78d" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>qreal</type>
        <definition>qreal KWin::Window::y</definition>
        <argsstring></argsstring>
        <name>y</name>
        <qualifiedname>KWin::Window::y</qualifiedname>
        <read>y</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This property holds the y position of the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>&apos;s frame geometry. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="96" column="5" bodyfile="kwin/src/window.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a2cd647ee6dfed59b1dc820162e4acd9f" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>qreal</type>
        <definition>qreal KWin::Window::width</definition>
        <argsstring></argsstring>
        <name>width</name>
        <qualifiedname>KWin::Window::width</qualifiedname>
        <read>width</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This property holds the width of the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>&apos;s frame geometry. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="101" column="5" bodyfile="kwin/src/window.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1ab18c68ce7b55201a2c3052994f80362b" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>qreal</type>
        <definition>qreal KWin::Window::height</definition>
        <argsstring></argsstring>
        <name>height</name>
        <qualifiedname>KWin::Window::height</qualifiedname>
        <read>height</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This property holds the height of the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>&apos;s frame geometry. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="106" column="5" bodyfile="kwin/src/window.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1abb0f10e1968953e89829431415fa803e" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>qreal</type>
        <definition>qreal KWin::Window::opacity</definition>
        <argsstring></argsstring>
        <name>opacity</name>
        <qualifiedname>KWin::Window::opacity</qualifiedname>
        <read>opacity</read>
        <write>setOpacity</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="108" column="5" bodyfile="kwin/src/window.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1ae01b40bf580c920be022d66080e0685c" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_k_win_1_1_output" kindref="compound">KWin::Output</ref> *</type>
        <definition>KWin::Output * KWin::Window::output</definition>
        <argsstring></argsstring>
        <name>output</name>
        <qualifiedname>KWin::Window::output</qualifiedname>
        <read>output</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The output where the window center is on </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="113" column="5" bodyfile="kwin/src/window.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1aa9a98858e1f184f24e2bfa6cf9362b5f" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::rect</definition>
        <argsstring></argsstring>
        <name>rect</name>
        <qualifiedname>KWin::Window::rect</qualifiedname>
        <read>rect</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="115" column="5" bodyfile="kwin/src/window.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a927f981105a03011681b42d6644834f0" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QString</type>
        <definition>QString KWin::Window::resourceName</definition>
        <argsstring></argsstring>
        <name>resourceName</name>
        <qualifiedname>KWin::Window::resourceName</qualifiedname>
        <read>resourceName</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="116" column="5" bodyfile="kwin/src/window.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a825429c1c8c6f5b6721752eac7da370d" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QString</type>
        <definition>QString KWin::Window::resourceClass</definition>
        <argsstring></argsstring>
        <name>resourceClass</name>
        <qualifiedname>KWin::Window::resourceClass</qualifiedname>
        <read>resourceClass</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="117" column="5" bodyfile="kwin/src/window.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1af885f634335d8664537c240afe0fff3e" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QString</type>
        <definition>QString KWin::Window::windowRole</definition>
        <argsstring></argsstring>
        <name>windowRole</name>
        <qualifiedname>KWin::Window::windowRole</qualifiedname>
        <read>windowRole</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="118" column="5" bodyfile="kwin/src/window.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1af05b60db12e48cdcb1a231113bb97dce" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::desktopWindow</definition>
        <argsstring></argsstring>
        <name>desktopWindow</name>
        <qualifiedname>KWin::Window::desktopWindow</qualifiedname>
        <read>isDesktop</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a desktop background window (the one with wallpaper). See _NET_WM_WINDOW_TYPE_DESKTOP at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="124" column="5" bodyfile="kwin/src/window.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1af6d487a18868cedad24433083d73161a" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::dock</definition>
        <argsstring></argsstring>
        <name>dock</name>
        <qualifiedname>KWin::Window::dock</qualifiedname>
        <read>isDock</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a dock (i.e. a panel). See _NET_WM_WINDOW_TYPE_DOCK at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="130" column="5" bodyfile="kwin/src/window.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a2d3df03917bf4e17bd6d0d51a33e4338" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::toolbar</definition>
        <argsstring></argsstring>
        <name>toolbar</name>
        <qualifiedname>KWin::Window::toolbar</qualifiedname>
        <read>isToolbar</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a standalone (detached) toolbar window. See _NET_WM_WINDOW_TYPE_TOOLBAR at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="136" column="5" bodyfile="kwin/src/window.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1ae666f42ac59d5e3dcad179184eaa1986" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::menu</definition>
        <argsstring></argsstring>
        <name>menu</name>
        <qualifiedname>KWin::Window::menu</qualifiedname>
        <read>isMenu</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a torn-off menu. See _NET_WM_WINDOW_TYPE_MENU at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="142" column="5" bodyfile="kwin/src/window.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a4a12209a68d7a695cb8fb9a1ebb27b5b" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::normalWindow</definition>
        <argsstring></argsstring>
        <name>normalWindow</name>
        <qualifiedname>KWin::Window::normalWindow</qualifiedname>
        <read>isNormalWindow</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a &quot;normal&quot; window, i.e. an application or any other window for which none of the specialized window types fit. See _NET_WM_WINDOW_TYPE_NORMAL at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="149" column="5" bodyfile="kwin/src/window.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a6a8237a0038173d42be364989ec33623" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::dialog</definition>
        <argsstring></argsstring>
        <name>dialog</name>
        <qualifiedname>KWin::Window::dialog</qualifiedname>
        <read>isDialog</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a dialog window. See _NET_WM_WINDOW_TYPE_DIALOG at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="155" column="5" bodyfile="kwin/src/window.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a6032c3ed54f27c89bb5c871ab695223b" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::splash</definition>
        <argsstring></argsstring>
        <name>splash</name>
        <qualifiedname>KWin::Window::splash</qualifiedname>
        <read>isSplash</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a splashscreen. Note that many (especially older) applications do not support marking their splash windows with this type. See _NET_WM_WINDOW_TYPE_SPLASH at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="162" column="5" bodyfile="kwin/src/window.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a1af192c036d02e92a9884395b2a94f0e" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::utility</definition>
        <argsstring></argsstring>
        <name>utility</name>
        <qualifiedname>KWin::Window::utility</qualifiedname>
        <read>isUtility</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a utility window, such as a tool window. See _NET_WM_WINDOW_TYPE_UTILITY at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="168" column="5" bodyfile="kwin/src/window.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a607b0fe387b98563447c1399a40adb2e" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::dropdownMenu</definition>
        <argsstring></argsstring>
        <name>dropdownMenu</name>
        <qualifiedname>KWin::Window::dropdownMenu</qualifiedname>
        <read>isDropdownMenu</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a dropdown menu (i.e. a popup directly or indirectly open from the applications menubar). See _NET_WM_WINDOW_TYPE_DROPDOWN_MENU at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="175" column="5" bodyfile="kwin/src/window.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a92b7c2c501362d45205d4859aea145e8" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::popupMenu</definition>
        <argsstring></argsstring>
        <name>popupMenu</name>
        <qualifiedname>KWin::Window::popupMenu</qualifiedname>
        <read>isPopupMenu</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a popup menu (that is not a torn-off or dropdown menu). See _NET_WM_WINDOW_TYPE_POPUP_MENU at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="181" column="5" bodyfile="kwin/src/window.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a64ebcb72533d0d0d18cff279600b59f8" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::tooltip</definition>
        <argsstring></argsstring>
        <name>tooltip</name>
        <qualifiedname>KWin::Window::tooltip</qualifiedname>
        <read>isTooltip</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a tooltip. See _NET_WM_WINDOW_TYPE_TOOLTIP at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="187" column="5" bodyfile="kwin/src/window.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a544f23643bc4509d24855f10d716387f" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::notification</definition>
        <argsstring></argsstring>
        <name>notification</name>
        <qualifiedname>KWin::Window::notification</qualifiedname>
        <read>isNotification</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a window with a notification. See _NET_WM_WINDOW_TYPE_NOTIFICATION at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="193" column="5" bodyfile="kwin/src/window.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1aab5aba9b1ffa9d7f2413b9a1b8f41df9" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::criticalNotification</definition>
        <argsstring></argsstring>
        <name>criticalNotification</name>
        <qualifiedname>KWin::Window::criticalNotification</qualifiedname>
        <read>isCriticalNotification</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a window with a critical notification. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="198" column="5" bodyfile="kwin/src/window.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a584420a5827d6b82674359784a3f1ff3" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::appletPopup</definition>
        <argsstring></argsstring>
        <name>appletPopup</name>
        <qualifiedname>KWin::Window::appletPopup</qualifiedname>
        <read>isAppletPopup</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is an applet popup. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="203" column="5" bodyfile="kwin/src/window.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a1eda1e68950fd02ab06c22ec96643ce1" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::onScreenDisplay</definition>
        <argsstring></argsstring>
        <name>onScreenDisplay</name>
        <qualifiedname>KWin::Window::onScreenDisplay</qualifiedname>
        <read>isOnScreenDisplay</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is an On Screen <ref refid="class_k_win_1_1_display" kindref="compound">Display</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="208" column="5" bodyfile="kwin/src/window.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a0e084dac0bbab6de21ed779cfc909793" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::comboBox</definition>
        <argsstring></argsstring>
        <name>comboBox</name>
        <qualifiedname>KWin::Window::comboBox</qualifiedname>
        <read>isComboBox</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a combobox popup. See _NET_WM_WINDOW_TYPE_COMBO at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="214" column="5" bodyfile="kwin/src/window.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1adaddb6c74ea973a4cde4409691ccef97" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::dndIcon</definition>
        <argsstring></argsstring>
        <name>dndIcon</name>
        <qualifiedname>KWin::Window::dndIcon</qualifiedname>
        <read>isDNDIcon</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a Drag&amp;Drop icon. See _NET_WM_WINDOW_TYPE_DND at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="220" column="5" bodyfile="kwin/src/window.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a1f3c44eb1c5c7348d9bffd7f845108f2" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7" kindref="member">WindowType</ref></type>
        <definition>WindowType KWin::Window::windowType</definition>
        <argsstring></argsstring>
        <name>windowType</name>
        <qualifiedname>KWin::Window::windowType</qualifiedname>
        <read>windowType</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the NETWM window type See <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="226" column="5" bodyfile="kwin/src/window.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1ab7146e790ca7820c18f7a23b6b2bc7ab" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::managed</definition>
        <argsstring></argsstring>
        <name>managed</name>
        <qualifiedname>KWin::Window::managed</qualifiedname>
        <read>isClient</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> is managed by <ref refid="namespace_k_win" kindref="compound">KWin</ref> (it has control over its placement and other aspects, as opposed to override-redirect windows that are entirely handled by the application). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="232" column="5" bodyfile="kwin/src/window.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1aa16634b94b70b24daab1fa9df35c0f31" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::deleted</definition>
        <argsstring></argsstring>
        <name>deleted</name>
        <qualifiedname>KWin::Window::deleted</qualifiedname>
        <read>isDeleted</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> represents an already deleted window and only kept for the compositor for animations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="237" column="5" bodyfile="kwin/src/window.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a435b14844e4ed3e2ad1a2b95b7a75b73" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::skipsCloseAnimation</definition>
        <argsstring></argsstring>
        <name>skipsCloseAnimation</name>
        <qualifiedname>KWin::Window::skipsCloseAnimation</qualifiedname>
        <read>skipsCloseAnimation</read>
        <write>setSkipCloseAnimation</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the window does not want to be animated on window close. There are legit reasons for this like a screenshot application which does not want it&apos;s window being captured. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="244" column="5" bodyfile="kwin/src/window.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a3423010aedb939fad955032d40f64fcb" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::popupWindow</definition>
        <argsstring></argsstring>
        <name>popupWindow</name>
        <qualifiedname>KWin::Window::popupWindow</qualifiedname>
        <read>isPopupWindow</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the window is a popup. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="249" column="5" bodyfile="kwin/src/window.h" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a80c872dfd7f84fdcb120dbdcefd28e72" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::outline</definition>
        <argsstring></argsstring>
        <name>outline</name>
        <qualifiedname>KWin::Window::outline</qualifiedname>
        <read>isOutline</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> represents the outline.</para>
<para><simplesect kind="note"><para>It&apos;s always <computeroutput>false</computeroutput> if compositing is turned off. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="256" column="5" bodyfile="kwin/src/window.h" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a6cf4afcfaaf0179f72d4fe968510f427" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QUuid</type>
        <definition>QUuid KWin::Window::internalId</definition>
        <argsstring></argsstring>
        <name>internalId</name>
        <qualifiedname>KWin::Window::internalId</qualifiedname>
        <read>internalId</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This property holds a UUID to uniquely identify this <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="261" column="5" bodyfile="kwin/src/window.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a085bf52e9cddc60b0b3d4a4550a60dfd" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>int</type>
        <definition>int KWin::Window::pid</definition>
        <argsstring></argsstring>
        <name>pid</name>
        <qualifiedname>KWin::Window::pid</qualifiedname>
        <read>pid</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The pid of the process owning this window.</para>
<para><simplesect kind="since"><para>5.20 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="268" column="5" bodyfile="kwin/src/window.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1ab6e14702ae2257cc27f72a8ad1e6f881" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>int</type>
        <definition>int KWin::Window::stackingOrder</definition>
        <argsstring></argsstring>
        <name>stackingOrder</name>
        <qualifiedname>KWin::Window::stackingOrder</qualifiedname>
        <read>stackingOrder</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The position of this window within <ref refid="class_k_win_1_1_workspace" kindref="compound">Workspace</ref>&apos;s window stack. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="273" column="5" bodyfile="kwin/src/window.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a197e218d29e40b39c56eee4eed4aa454" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::fullScreen</definition>
        <argsstring></argsstring>
        <name>fullScreen</name>
        <qualifiedname>KWin::Window::fullScreen</qualifiedname>
        <read>isFullScreen</read>
        <write>setFullScreen</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> is fullScreen. A <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> might either be fullScreen due to the _NET_WM property or through a legacy support hack. The fullScreen state can only be changed if the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> does not use the legacy hack. To be sure whether the state changed, connect to the notify signal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="280" column="5" bodyfile="kwin/src/window.h" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1abf412f7b864b281ccc78a13b71359e94" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::fullScreenable</definition>
        <argsstring></argsstring>
        <name>fullScreenable</name>
        <qualifiedname>KWin::Window::fullScreenable</qualifiedname>
        <read>isFullScreenable</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> can be set to fullScreen. The property is evaluated each time it is invoked. Because of that there is no notify signal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="286" column="5" bodyfile="kwin/src/window.h" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1acac15cb52cc30597cd970a45958ba827" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::active</definition>
        <argsstring></argsstring>
        <name>active</name>
        <qualifiedname>KWin::Window::active</qualifiedname>
        <read>isActive</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> is active or not. Use <ref refid="class_k_win_1_1_workspace_1a310f6402f9da20ba7b69c2327680b43e" kindref="member">Workspace::activateWindow()</ref> to activate a <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>. <simplesect kind="see"><para><ref refid="class_k_win_1_1_workspace_1a310f6402f9da20ba7b69c2327680b43e" kindref="member">Workspace::activateWindow</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="292" column="5" bodyfile="kwin/src/window.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a8da79be4e140390a3b61957f927f5210" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QList&lt; <ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">KWin::VirtualDesktop</ref> * &gt;</type>
        <definition>QList&lt;KWin::VirtualDesktop *&gt; KWin::Window::desktops</definition>
        <argsstring></argsstring>
        <name>desktops</name>
        <qualifiedname>KWin::Window::desktops</qualifiedname>
        <read>desktops</read>
        <write>setDesktops</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The virtual desktops this client is on. If it&apos;s on all desktops, the list is empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="297" column="5" bodyfile="kwin/src/window.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1ac093de4d3c723b295f1ff93b5aa05393" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::onAllDesktops</definition>
        <argsstring></argsstring>
        <name>onAllDesktops</name>
        <qualifiedname>KWin::Window::onAllDesktops</qualifiedname>
        <read>isOnAllDesktops</read>
        <write>setOnAllDesktops</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> is on all desktops. That is desktop is -1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="302" column="5" bodyfile="kwin/src/window.h" bodystart="302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1aa71dc40a7137f7d9295a5ad7a635b0c7" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QStringList</type>
        <definition>QStringList KWin::Window::activities</definition>
        <argsstring></argsstring>
        <name>activities</name>
        <qualifiedname>KWin::Window::activities</qualifiedname>
        <read>activities</read>
        <write>setOnActivities</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The activities this client is on. If it&apos;s on all activities the property is empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="307" column="5" bodyfile="kwin/src/window.h" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1aff0dcb9257a7c18c075605858ef64ad6" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::skipTaskbar</definition>
        <argsstring></argsstring>
        <name>skipTaskbar</name>
        <qualifiedname>KWin::Window::skipTaskbar</qualifiedname>
        <read>skipTaskbar</read>
        <write>setSkipTaskbar</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicates that the window should not be included on a taskbar. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="312" column="5" bodyfile="kwin/src/window.h" bodystart="312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1acab70f6f5c4c1fb524f1616f9cb13e03" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::skipPager</definition>
        <argsstring></argsstring>
        <name>skipPager</name>
        <qualifiedname>KWin::Window::skipPager</qualifiedname>
        <read>skipPager</read>
        <write>setSkipPager</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicates that the window should not be included on a Pager. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="317" column="5" bodyfile="kwin/src/window.h" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a09ff41ece0cac78c632f0a3218c2602d" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::skipSwitcher</definition>
        <argsstring></argsstring>
        <name>skipSwitcher</name>
        <qualifiedname>KWin::Window::skipSwitcher</qualifiedname>
        <read>skipSwitcher</read>
        <write>setSkipSwitcher</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> should be excluded from window switching effects. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="322" column="5" bodyfile="kwin/src/window.h" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a4bb9758a6b7087650bbe60d376ad0650" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::closeable</definition>
        <argsstring></argsstring>
        <name>closeable</name>
        <qualifiedname>KWin::Window::closeable</qualifiedname>
        <read>isCloseable</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the window can be closed by the user. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="327" column="5" bodyfile="kwin/src/window.h" bodystart="327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a7b0ffef1838f708ffc5c83b5244712f4" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QIcon</type>
        <definition>QIcon KWin::Window::icon</definition>
        <argsstring></argsstring>
        <name>icon</name>
        <qualifiedname>KWin::Window::icon</qualifiedname>
        <read>icon</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="329" column="5" bodyfile="kwin/src/window.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1ade1d7dfe29d1f709eca65af12b076d2b" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::keepAbove</definition>
        <argsstring></argsstring>
        <name>keepAbove</name>
        <qualifiedname>KWin::Window::keepAbove</qualifiedname>
        <read>keepAbove</read>
        <write>setKeepAbove</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> is set to be kept above other windows. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="334" column="5" bodyfile="kwin/src/window.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a47ab87d36dc289a8f636f78b048a5b36" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::keepBelow</definition>
        <argsstring></argsstring>
        <name>keepBelow</name>
        <qualifiedname>KWin::Window::keepBelow</qualifiedname>
        <read>keepBelow</read>
        <write>setKeepBelow</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> is set to be kept below other windows. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="339" column="5" bodyfile="kwin/src/window.h" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1ac19536a1e7936f2c46fab47c8562184b" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::shadeable</definition>
        <argsstring></argsstring>
        <name>shadeable</name>
        <qualifiedname>KWin::Window::shadeable</qualifiedname>
        <read>isShadeable</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> can be shaded. The property is evaluated each time it is invoked. Because of that there is no notify signal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="345" column="5" bodyfile="kwin/src/window.h" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a406585fb5b2d7fa1421fb0c56be550a2" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::shade</definition>
        <argsstring></argsstring>
        <name>shade</name>
        <qualifiedname>KWin::Window::shade</qualifiedname>
        <read>isShade</read>
        <write>setShade</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> is shaded. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="350" column="5" bodyfile="kwin/src/window.h" bodystart="350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a7c4b95b673e249d7efba8e5af1bfb971" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::minimizable</definition>
        <argsstring></argsstring>
        <name>minimizable</name>
        <qualifiedname>KWin::Window::minimizable</qualifiedname>
        <read>isMinimizable</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> can be minimized. The property is evaluated each time it is invoked. Because of that there is no notify signal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="356" column="5" bodyfile="kwin/src/window.h" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1aece20b77969aee41eb51a679cfdce582" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::minimized</definition>
        <argsstring></argsstring>
        <name>minimized</name>
        <qualifiedname>KWin::Window::minimized</qualifiedname>
        <read>isMinimized</read>
        <write>setMinimized</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> is minimized. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="361" column="5" bodyfile="kwin/src/window.h" bodystart="361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a2e72ccaab8958830979e76f8e36564f7" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::iconGeometry</definition>
        <argsstring></argsstring>
        <name>iconGeometry</name>
        <qualifiedname>KWin::Window::iconGeometry</qualifiedname>
        <read>iconGeometry</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The optional geometry representing the minimized <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> in e.g a taskbar. See _NET_WM_ICON_GEOMETRY at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . The value is evaluated each time the getter is called. Because of that no changed signal is provided. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="369" column="5" bodyfile="kwin/src/window.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a3c22405167cf2926964f9336752971a3" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::specialWindow</definition>
        <argsstring></argsstring>
        <name>specialWindow</name>
        <qualifiedname>KWin::Window::specialWindow</qualifiedname>
        <read>isSpecialWindow</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is any of special windows types (desktop, dock, splash, ...), i.e. window types that usually don&apos;t have a window frame and the user does not use window management (moving, raising,...) on them. The value is evaluated each time the getter is called. Because of that no changed signal is provided. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="378" column="5" bodyfile="kwin/src/window.h" bodystart="378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1ac42b9fc9ba486aa2daf3cf1054e9afa5" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::demandsAttention</definition>
        <argsstring></argsstring>
        <name>demandsAttention</name>
        <qualifiedname>KWin::Window::demandsAttention</qualifiedname>
        <read>isDemandingAttention</read>
        <write>demandAttention</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether window state _NET_WM_STATE_DEMANDS_ATTENTION is set. This state indicates that some action in or with the window happened. For example, it may be set by the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> Manager if the window requested activation but the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> Manager refused it, or the application may set it if it finished some work. This state may be set by both the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> and the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> Manager. It should be unset by the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> Manager when it decides the window got the required attention (usually, that it got activated). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="388" column="5" bodyfile="kwin/src/window.h" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a9a91fff09e5795dce9c1732082ff09b4" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QString</type>
        <definition>QString KWin::Window::caption</definition>
        <argsstring></argsstring>
        <name>caption</name>
        <qualifiedname>KWin::Window::caption</qualifiedname>
        <read>caption</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The Caption of the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>. Read from WM_NAME property together with a suffix for hostname and shortcut. To read only the caption as provided by WM_NAME, use <computeroutput>captionNormal</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="394" column="5" bodyfile="kwin/src/window.h" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1af3efc82546fdf210e4136a4e0d7b1a46" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QString</type>
        <definition>QString KWin::Window::captionNormal</definition>
        <argsstring></argsstring>
        <name>captionNormal</name>
        <qualifiedname>KWin::Window::captionNormal</qualifiedname>
        <read>captionNormal</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The Caption of the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>. Read from WM_NAME property. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="399" column="5" bodyfile="kwin/src/window.h" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1acf74967cccfc708ba0dd82dce391d77f" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QSizeF</type>
        <definition>QSizeF KWin::Window::minSize</definition>
        <argsstring></argsstring>
        <name>minSize</name>
        <qualifiedname>KWin::Window::minSize</qualifiedname>
        <read>minSize</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Minimum size as specified in WM_NORMAL_HINTS </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="404" column="5" bodyfile="kwin/src/window.h" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1aed76f5fbe38ae0051ad9587c7e47bcd8" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QSizeF</type>
        <definition>QSizeF KWin::Window::maxSize</definition>
        <argsstring></argsstring>
        <name>maxSize</name>
        <qualifiedname>KWin::Window::maxSize</qualifiedname>
        <read>maxSize</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum size as specified in WM_NORMAL_HINTS </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="409" column="5" bodyfile="kwin/src/window.h" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a7a9c5f2a5a2a21002dfc4632c67280bf" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::wantsInput</definition>
        <argsstring></argsstring>
        <name>wantsInput</name>
        <qualifiedname>KWin::Window::wantsInput</qualifiedname>
        <read>wantsInput</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> can accept keyboard focus. The value is evaluated each time the getter is called. Because of that no changed signal is provided. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="416" column="5" bodyfile="kwin/src/window.h" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a3d9ecdab0b00ae1a91a8adc152e51d14" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::transient</definition>
        <argsstring></argsstring>
        <name>transient</name>
        <qualifiedname>KWin::Window::transient</qualifiedname>
        <read>isTransient</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> is a transient <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> to another <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>. <simplesect kind="see"><para><ref refid="class_k_win_1_1_window_1a74ba8e8138736add81114a69c064170a" kindref="member">transientFor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="422" column="5" bodyfile="kwin/src/window.h" bodystart="422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a74ba8e8138736add81114a69c064170a" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_k_win_1_1_window" kindref="compound">KWin::Window</ref> *</type>
        <definition>Window * KWin::Window::transientFor</definition>
        <argsstring></argsstring>
        <name>transientFor</name>
        <qualifiedname>KWin::Window::transientFor</qualifiedname>
        <read>transientFor</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> to which this <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> is a transient if any. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="427" column="5" bodyfile="kwin/src/window.h" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a4e462795255c904774aa629a6163f391" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::modal</definition>
        <argsstring></argsstring>
        <name>modal</name>
        <qualifiedname>KWin::Window::modal</qualifiedname>
        <read>isModal</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> represents a modal window. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="432" column="5" bodyfile="kwin/src/window.h" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a0cd1f979061accdf5d743f3089360132" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::frameGeometry</definition>
        <argsstring></argsstring>
        <name>frameGeometry</name>
        <qualifiedname>KWin::Window::frameGeometry</qualifiedname>
        <read>frameGeometry</read>
        <write>moveResize</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The geometry of this <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>. Be aware that depending on resize mode the frameGeometryChanged signal might be emitted at each resize step or only at the end of the resize operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="438" column="5" bodyfile="kwin/src/window.h" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a6dc0bc3b6fedf55e01d0db0ee508b320" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::move</definition>
        <argsstring></argsstring>
        <name>move</name>
        <qualifiedname>KWin::Window::move</qualifiedname>
        <read>isInteractiveMove</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> is currently being moved by the user. Notify signal is emitted when the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> starts or ends move/resize mode. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="444" column="5" bodyfile="kwin/src/window.h" bodystart="444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a4f9ff78c2b5b8fb2c900869968a9df63" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::resize</definition>
        <argsstring></argsstring>
        <name>resize</name>
        <qualifiedname>KWin::Window::resize</qualifiedname>
        <read>isInteractiveResize</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> is currently being resized by the user. Notify signal is emitted when the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> starts or ends move/resize mode. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="450" column="5" bodyfile="kwin/src/window.h" bodystart="450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a4ca7398a5e80f2ed8d5eec3ed382f235" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::decorationHasAlpha</definition>
        <argsstring></argsstring>
        <name>decorationHasAlpha</name>
        <qualifiedname>KWin::Window::decorationHasAlpha</qualifiedname>
        <read>decorationHasAlpha</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the decoration is currently using an alpha channel. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="455" column="5" bodyfile="kwin/src/window.h" bodystart="455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a522f27150d53cdf33f9ff69940763621" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::noBorder</definition>
        <argsstring></argsstring>
        <name>noBorder</name>
        <qualifiedname>KWin::Window::noBorder</qualifiedname>
        <read>noBorder</read>
        <write>setNoBorder</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the window has a decoration or not. This property is not allowed to be set by applications themselves. The decision whether a window has a border or not belongs to the window manager. If this property gets abused by application developers, it will be removed again. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="463" column="5" bodyfile="kwin/src/window.h" bodystart="463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1af3de3b41671127884529d47ba9e96fc0" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::providesContextHelp</definition>
        <argsstring></argsstring>
        <name>providesContextHelp</name>
        <qualifiedname>KWin::Window::providesContextHelp</qualifiedname>
        <read>providesContextHelp</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> provides context help. Mostly needed by decorations to decide whether to show the help button or not. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="469" column="5" bodyfile="kwin/src/window.h" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1afcdf5efc106e90c4bf388e9abffffda6" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::maximizable</definition>
        <argsstring></argsstring>
        <name>maximizable</name>
        <qualifiedname>KWin::Window::maximizable</qualifiedname>
        <read>isMaximizable</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> can be maximized both horizontally and vertically. The property is evaluated each time it is invoked. Because of that there is no notify signal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="476" column="5" bodyfile="kwin/src/window.h" bodystart="476" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1aacb57e092c7155d3745e3964c7745ba3" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9" kindref="member">KWin::MaximizeMode</ref></type>
        <definition>KWin::MaximizeMode KWin::Window::maximizeMode</definition>
        <argsstring></argsstring>
        <name>maximizeMode</name>
        <qualifiedname>KWin::Window::maximizeMode</qualifiedname>
        <read>maximizeMode</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the window is maximized horizontally, vertically or fully. This is read only, in order to maximize from a script use the setMaximize function <simplesect kind="see"><para><ref refid="class_k_win_1_1_window_1a0c0c85ab71928ebce12edcfd33c64b0d" kindref="member">setMaximize</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="484" column="5" bodyfile="kwin/src/window.h" bodystart="484" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a6481df4b0d499d0b97ba0cef43d959c1" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::moveable</definition>
        <argsstring></argsstring>
        <name>moveable</name>
        <qualifiedname>KWin::Window::moveable</qualifiedname>
        <read>isMovable</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> is moveable. Even if it is not moveable, it might be possible to move it to another screen. The property is evaluated each time it is invoked. Because of that there is no notify signal. <simplesect kind="see"><para><ref refid="class_k_win_1_1_window_1a945946c3799baf32ae8dc6e71a95410e" kindref="member">moveableAcrossScreens</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="492" column="5" bodyfile="kwin/src/window.h" bodystart="492" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a945946c3799baf32ae8dc6e71a95410e" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::moveableAcrossScreens</definition>
        <argsstring></argsstring>
        <name>moveableAcrossScreens</name>
        <qualifiedname>KWin::Window::moveableAcrossScreens</qualifiedname>
        <read>isMovableAcrossScreens</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> can be moved to another screen. The property is evaluated each time it is invoked. Because of that there is no notify signal. <simplesect kind="see"><para><ref refid="class_k_win_1_1_window_1a6481df4b0d499d0b97ba0cef43d959c1" kindref="member">moveable</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="499" column="5" bodyfile="kwin/src/window.h" bodystart="499" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a208becdee75c1e38ea619880b1b50bbc" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::resizeable</definition>
        <argsstring></argsstring>
        <name>resizeable</name>
        <qualifiedname>KWin::Window::resizeable</qualifiedname>
        <read>isResizable</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> can be resized. The property is evaluated each time it is invoked. Because of that there is no notify signal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="505" column="5" bodyfile="kwin/src/window.h" bodystart="505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a405edf05a731189064fbd7298d06996e" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QString</type>
        <definition>QString KWin::Window::desktopFileName</definition>
        <argsstring></argsstring>
        <name>desktopFileName</name>
        <qualifiedname>KWin::Window::desktopFileName</qualifiedname>
        <read>desktopFileName</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The desktop file name of the application this <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> belongs to.</para>
<para>This is either the base name without full path and without file extension of the desktop file for the window&apos;s application (e.g. &quot;org.kde.foo&quot;).</para>
<para>The application&apos;s desktop file name can also be the full path to the desktop file (e.g. &quot;/opt/kde/share/org.kde.foo.desktop&quot;) in case it&apos;s not in a standard location. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="516" column="5" bodyfile="kwin/src/window.h" bodystart="516" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1ae023877c81ca2684d535e7d7f89e4ce7" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::hasApplicationMenu</definition>
        <argsstring></argsstring>
        <name>hasApplicationMenu</name>
        <qualifiedname>KWin::Window::hasApplicationMenu</qualifiedname>
        <read>hasApplicationMenu</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether an application menu is available for this <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="521" column="5" bodyfile="kwin/src/window.h" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a64b3e78c92b9566c25f826c9269b9d7d" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::applicationMenuActive</definition>
        <argsstring></argsstring>
        <name>applicationMenuActive</name>
        <qualifiedname>KWin::Window::applicationMenuActive</qualifiedname>
        <read>applicationMenuActive</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the application menu for this <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> is currently opened </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="526" column="5" bodyfile="kwin/src/window.h" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a706a06ca23af2665a7f386dc72a870e6" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::unresponsive</definition>
        <argsstring></argsstring>
        <name>unresponsive</name>
        <qualifiedname>KWin::Window::unresponsive</qualifiedname>
        <read>unresponsive</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this window is unresponsive.</para>
<para>When an application failed to react on a ping request in time, it is considered unresponsive. This usually indicates that the application froze or crashed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="534" column="5" bodyfile="kwin/src/window.h" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1af4e79ae255fc04953422db277a441fcf" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QString</type>
        <definition>QString KWin::Window::colorScheme</definition>
        <argsstring></argsstring>
        <name>colorScheme</name>
        <qualifiedname>KWin::Window::colorScheme</qualifiedname>
        <read>colorScheme</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The color scheme set on this window Absolute file path, or name of palette in the user&apos;s config directory following KColorSchemes format. An empty string indicates the default palette from kdeglobals is used. <simplesect kind="note"><para>this indicates the colour scheme requested, which might differ from the theme applied if the colorScheme cannot be found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="542" column="5" bodyfile="kwin/src/window.h" bodystart="542" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1adcb254bbc52101784ed82685e69c97b5" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7b" kindref="member">KWin::Layer</ref></type>
        <definition>KWin::Layer KWin::Window::layer</definition>
        <argsstring></argsstring>
        <name>layer</name>
        <qualifiedname>KWin::Window::layer</qualifiedname>
        <read>layer</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="544" column="5" bodyfile="kwin/src/window.h" bodystart="544" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1ab2e0f83863b9a8fc1ac12744fc8299c8" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::hidden</definition>
        <argsstring></argsstring>
        <name>hidden</name>
        <qualifiedname>KWin::Window::hidden</qualifiedname>
        <read>isHidden</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this window is hidden. It&apos;s usually the case with auto-hide panels. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="549" column="5" bodyfile="kwin/src/window.h" bodystart="549" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1a69d854b1314004bad99f5e93c3ff7a1f" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_k_win_1_1_tile" kindref="compound">KWin::Tile</ref> *</type>
        <definition>KWin::Tile * KWin::Window::tile</definition>
        <argsstring></argsstring>
        <name>tile</name>
        <qualifiedname>KWin::Window::tile</qualifiedname>
        <read>requestedTile</read>
        <write>setTileCompatibility</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="class_k_win_1_1_tile" kindref="compound">Tile</ref> this window is associated to, if any </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="554" column="5" bodyfile="kwin/src/window.h" bodystart="554" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_window_1aee14acc6594d272e230e75dc36dadab0" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Window::inputMethod</definition>
        <argsstring></argsstring>
        <name>inputMethod</name>
        <qualifiedname>KWin::Window::inputMethod</qualifiedname>
        <read>isInputMethod</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether this window is a input method window. This is only used for <ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="560" column="5" bodyfile="kwin/src/window.h" bodystart="560" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_window_1a87aebec66b33eebf680520b5eb66fbd4" prot="protected" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
        <definition>Output* KWin::Window::m_output</definition>
        <argsstring></argsstring>
        <name>m_output</name>
        <qualifiedname>KWin::Window::m_output</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1779" column="12" bodyfile="kwin/src/window.h" bodystart="1779" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a59df30651b9d39dc3ee42d5d3b63b400" prot="protected" static="no" mutable="no">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::m_frameGeometry</definition>
        <argsstring></argsstring>
        <name>m_frameGeometry</name>
        <qualifiedname>KWin::Window::m_frameGeometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1780" column="12" bodyfile="kwin/src/window.h" bodystart="1780" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1ade714a7cf13d4ef4d770b5763919e5fa" prot="protected" static="no" mutable="no">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::m_clientGeometry</definition>
        <argsstring></argsstring>
        <name>m_clientGeometry</name>
        <qualifiedname>KWin::Window::m_clientGeometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1781" column="12" bodyfile="kwin/src/window.h" bodystart="1781" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a1359c9bf73f8b28bdfe9d5aa19aea1ab" prot="protected" static="no" mutable="no">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::m_bufferGeometry</definition>
        <argsstring></argsstring>
        <name>m_bufferGeometry</name>
        <qualifiedname>KWin::Window::m_bufferGeometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1782" column="12" bodyfile="kwin/src/window.h" bodystart="1782" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1aa8d74436db9dba2de3f297c459c62ca4" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::ready_for_painting</definition>
        <argsstring></argsstring>
        <name>ready_for_painting</name>
        <qualifiedname>KWin::Window::ready_for_painting</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1783" column="10" bodyfile="kwin/src/window.h" bodystart="1783" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a0ca7c21092d548fdf56b613e7a2ef757" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::m_hidden</definition>
        <argsstring></argsstring>
        <name>m_hidden</name>
        <qualifiedname>KWin::Window::m_hidden</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1784" column="10" bodyfile="kwin/src/window.h" bodystart="1784" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1ae180802be2d4f58f05d01eb88a1dd4eb" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::m_hiddenByShowDesktop</definition>
        <argsstring></argsstring>
        <name>m_hiddenByShowDesktop</name>
        <qualifiedname>KWin::Window::m_hiddenByShowDesktop</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1785" column="10" bodyfile="kwin/src/window.h" bodystart="1785" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a7ebdca86b3c0761c70c933c2218600cb" prot="protected" static="no" mutable="no">
        <type>qreal</type>
        <definition>qreal KWin::Window::m_nextTargetScale</definition>
        <argsstring></argsstring>
        <name>m_nextTargetScale</name>
        <qualifiedname>KWin::Window::m_nextTargetScale</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1787" column="11" bodyfile="kwin/src/window.h" bodystart="1787" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a2c70041797ff18d5c1a135feabbd8861" prot="protected" static="no" mutable="no">
        <type>qreal</type>
        <definition>qreal KWin::Window::m_targetScale</definition>
        <argsstring></argsstring>
        <name>m_targetScale</name>
        <qualifiedname>KWin::Window::m_targetScale</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1788" column="11" bodyfile="kwin/src/window.h" bodystart="1788" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a0084134b116f3a3a3b8890a50e967207" prot="protected" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_output_transform" kindref="compound">OutputTransform</ref></type>
        <definition>OutputTransform KWin::Window::m_preferredBufferTransform</definition>
        <argsstring></argsstring>
        <name>m_preferredBufferTransform</name>
        <qualifiedname>KWin::Window::m_preferredBufferTransform</qualifiedname>
        <initializer>= <ref refid="class_k_win_1_1_output_transform_1af879a0d47e8ecd9c35f994252a7e7fd7a3973587033abbbbbaaddeb37d12f6700" kindref="member">OutputTransform::Normal</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1789" column="21" bodyfile="kwin/src/window.h" bodystart="1789" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a598d3d131ab6df350faf1e0d8e48c129" prot="protected" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_color_description" kindref="compound">ColorDescription</ref></type>
        <definition>ColorDescription KWin::Window::m_preferredColorDescription</definition>
        <argsstring></argsstring>
        <name>m_preferredColorDescription</name>
        <qualifiedname>KWin::Window::m_preferredColorDescription</qualifiedname>
        <initializer>= <ref refid="class_k_win_1_1_color_description_1a329e58d9b909836414261f4f1857ccf6" kindref="member">ColorDescription::sRGB</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1790" column="22" bodyfile="kwin/src/window.h" bodystart="1790" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1afdc3cc5183afb301b1beb45eef23b018" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int KWin::Window::m_refCount</definition>
        <argsstring></argsstring>
        <name>m_refCount</name>
        <qualifiedname>KWin::Window::m_refCount</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1792" column="9" bodyfile="kwin/src/window.h" bodystart="1792" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a5371907d36cfc708d29493db67dc55b8" prot="protected" static="no" mutable="no">
        <type>QUuid</type>
        <definition>QUuid KWin::Window::m_internalId</definition>
        <argsstring></argsstring>
        <name>m_internalId</name>
        <qualifiedname>KWin::Window::m_internalId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1793" column="11" bodyfile="kwin/src/window.h" bodystart="1793" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a42e178e26b4f5ac7ffd415293b9b9e5a" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_window_item" kindref="compound">WindowItem</ref> &gt;</type>
        <definition>std::unique_ptr&lt;WindowItem&gt; KWin::Window::m_windowItem</definition>
        <argsstring></argsstring>
        <name>m_windowItem</name>
        <qualifiedname>KWin::Window::m_windowItem</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1794" column="21" bodyfile="kwin/src/window.h" bodystart="1794" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a00a0d46c1f63c72d6905cfcea6cb7e90" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_shadow" kindref="compound">Shadow</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Shadow&gt; KWin::Window::m_shadow</definition>
        <argsstring></argsstring>
        <name>m_shadow</name>
        <qualifiedname>KWin::Window::m_shadow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1795" column="21" bodyfile="kwin/src/window.h" bodystart="1795" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1ab2c297c768db712d6bf9961ac1fabb04" prot="protected" static="no" mutable="no">
        <type>QString</type>
        <definition>QString KWin::Window::resource_name</definition>
        <argsstring></argsstring>
        <name>resource_name</name>
        <qualifiedname>KWin::Window::resource_name</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1796" column="13" bodyfile="kwin/src/window.h" bodystart="1796" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a9425218f438709c0bf0dac60fb7e2786" prot="protected" static="no" mutable="no">
        <type>QString</type>
        <definition>QString KWin::Window::resource_class</definition>
        <argsstring></argsstring>
        <name>resource_class</name>
        <qualifiedname>KWin::Window::resource_class</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1797" column="13" bodyfile="kwin/src/window.h" bodystart="1797" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1ae54e6b7244395a9a4a9c7bb9ab0cf939" prot="protected" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_client_machine" kindref="compound">ClientMachine</ref> *</type>
        <definition>ClientMachine* KWin::Window::m_clientMachine</definition>
        <argsstring></argsstring>
        <name>m_clientMachine</name>
        <qualifiedname>KWin::Window::m_clientMachine</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1798" column="19" bodyfile="kwin/src/window.h" bodystart="1798" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a3d1d1e31100e981a40ed4d01467c9b01" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::m_skipCloseAnimation</definition>
        <argsstring></argsstring>
        <name>m_skipCloseAnimation</name>
        <qualifiedname>KWin::Window::m_skipCloseAnimation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1799" column="10" bodyfile="kwin/src/window.h" bodystart="1799" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a7fb37fb07218feaab2454465fbed6864" prot="protected" static="no" mutable="no">
        <type>QPointer&lt; <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> &gt;</type>
        <definition>QPointer&lt;SurfaceInterface&gt; KWin::Window::m_surface</definition>
        <argsstring></argsstring>
        <name>m_surface</name>
        <qualifiedname>KWin::Window::m_surface</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1800" column="14" bodyfile="kwin/src/window.h" bodystart="1800" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1abb36a6011f877745c67c573119c6a5c6" prot="protected" static="no" mutable="no">
        <type>qreal</type>
        <definition>qreal KWin::Window::m_opacity</definition>
        <argsstring></argsstring>
        <name>m_opacity</name>
        <qualifiedname>KWin::Window::m_opacity</qualifiedname>
        <initializer>= 1.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1801" column="11" bodyfile="kwin/src/window.h" bodystart="1801" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a7ab75d4f6088d9ee485731cc567f294e" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int KWin::Window::m_stackingOrder</definition>
        <argsstring></argsstring>
        <name>m_stackingOrder</name>
        <qualifiedname>KWin::Window::m_stackingOrder</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1802" column="9" bodyfile="kwin/src/window.h" bodystart="1802" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a056f5f78bc6d3cb6d6cf48ab73fd9ce2" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::m_skipTaskbar</definition>
        <argsstring></argsstring>
        <name>m_skipTaskbar</name>
        <qualifiedname>KWin::Window::m_skipTaskbar</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1804" column="10" bodyfile="kwin/src/window.h" bodystart="1804" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a0dcaab2dcb54c92ce99429a62f2bc3e5" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::m_originalSkipTaskbar</definition>
        <argsstring></argsstring>
        <name>m_originalSkipTaskbar</name>
        <qualifiedname>KWin::Window::m_originalSkipTaskbar</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unaffected by <ref refid="namespace_k_win" kindref="compound">KWin</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1808" column="10" bodyfile="kwin/src/window.h" bodystart="1808" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1ac4054bc17a49a5ec8b5705ed929a3eb3" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::m_skipPager</definition>
        <argsstring></argsstring>
        <name>m_skipPager</name>
        <qualifiedname>KWin::Window::m_skipPager</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1809" column="10" bodyfile="kwin/src/window.h" bodystart="1809" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a8329114171869e9d8f47985eb2ce5a0b" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::m_skipSwitcher</definition>
        <argsstring></argsstring>
        <name>m_skipSwitcher</name>
        <qualifiedname>KWin::Window::m_skipSwitcher</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1810" column="10" bodyfile="kwin/src/window.h" bodystart="1810" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1ae6c87b2230a834ac55ec726fd3bc2573" prot="protected" static="no" mutable="no">
        <type>QIcon</type>
        <definition>QIcon KWin::Window::m_icon</definition>
        <argsstring></argsstring>
        <name>m_icon</name>
        <qualifiedname>KWin::Window::m_icon</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1811" column="11" bodyfile="kwin/src/window.h" bodystart="1811" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a01d9ea2184e2db1093c64e503054e44c" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::m_active</definition>
        <argsstring></argsstring>
        <name>m_active</name>
        <qualifiedname>KWin::Window::m_active</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1812" column="10" bodyfile="kwin/src/window.h" bodystart="1812" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a8f95d5441e07c467333307a930979994" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::m_deleted</definition>
        <argsstring></argsstring>
        <name>m_deleted</name>
        <qualifiedname>KWin::Window::m_deleted</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1813" column="10" bodyfile="kwin/src/window.h" bodystart="1813" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a1ae892b14cdf6d7565154061a6c4910a" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::m_keepAbove</definition>
        <argsstring></argsstring>
        <name>m_keepAbove</name>
        <qualifiedname>KWin::Window::m_keepAbove</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1814" column="10" bodyfile="kwin/src/window.h" bodystart="1814" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1addd6305ffba6280bc90767705a77caef" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::m_keepBelow</definition>
        <argsstring></argsstring>
        <name>m_keepBelow</name>
        <qualifiedname>KWin::Window::m_keepBelow</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1815" column="10" bodyfile="kwin/src/window.h" bodystart="1815" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1ad92bcaae3a24dae71b6311ea65100a19" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::m_demandsAttention</definition>
        <argsstring></argsstring>
        <name>m_demandsAttention</name>
        <qualifiedname>KWin::Window::m_demandsAttention</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1816" column="10" bodyfile="kwin/src/window.h" bodystart="1816" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1ac8984210c5c8842735c5632a8c634095" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::m_minimized</definition>
        <argsstring></argsstring>
        <name>m_minimized</name>
        <qualifiedname>KWin::Window::m_minimized</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1817" column="10" bodyfile="kwin/src/window.h" bodystart="1817" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a265fba838812db557b4dc8d9c7ba4dba" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::m_suspended</definition>
        <argsstring></argsstring>
        <name>m_suspended</name>
        <qualifiedname>KWin::Window::m_suspended</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1818" column="10" bodyfile="kwin/src/window.h" bodystart="1818" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1af9123bdb0820a24c5f49b78f3a9a5f2c" prot="protected" static="no" mutable="no">
        <type>QTimer *</type>
        <definition>QTimer* KWin::Window::m_autoRaiseTimer</definition>
        <argsstring></argsstring>
        <name>m_autoRaiseTimer</name>
        <qualifiedname>KWin::Window::m_autoRaiseTimer</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1819" column="12" bodyfile="kwin/src/window.h" bodystart="1819" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a751e7058dae4fd04e4da899b2860cd0c" prot="protected" static="no" mutable="no">
        <type>QTimer *</type>
        <definition>QTimer* KWin::Window::m_shadeHoverTimer</definition>
        <argsstring></argsstring>
        <name>m_shadeHoverTimer</name>
        <qualifiedname>KWin::Window::m_shadeHoverTimer</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1820" column="12" bodyfile="kwin/src/window.h" bodystart="1820" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1ae6f4b0155777b5852e8c6e7a3e8bb704" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_k_win_1a14799797d985d6375dd7684fff01585f" kindref="member">ShadeMode</ref></type>
        <definition>ShadeMode KWin::Window::m_shadeMode</definition>
        <argsstring></argsstring>
        <name>m_shadeMode</name>
        <qualifiedname>KWin::Window::m_shadeMode</qualifiedname>
        <initializer>= <ref refid="namespace_k_win_1a14799797d985d6375dd7684fff01585fa96968d2418f89776544aadc16404b6d4" kindref="member">ShadeNone</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1821" column="15" bodyfile="kwin/src/window.h" bodystart="1821" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a11f83e606efc5d90143b2d396e39e3ec" prot="protected" static="no" mutable="no">
        <type>QList&lt; <ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">VirtualDesktop</ref> * &gt;</type>
        <definition>QList&lt;VirtualDesktop *&gt; KWin::Window::m_desktops</definition>
        <argsstring></argsstring>
        <name>m_desktops</name>
        <qualifiedname>KWin::Window::m_desktops</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1822" column="11" bodyfile="kwin/src/window.h" bodystart="1822" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1af5906859fd02b57258bcd8bc581d1c79" prot="protected" static="no" mutable="no">
        <type>QStringList</type>
        <definition>QStringList KWin::Window::m_activityList</definition>
        <argsstring></argsstring>
        <name>m_activityList</name>
        <qualifiedname>KWin::Window::m_activityList</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1824" column="17" bodyfile="kwin/src/window.h" bodystart="1824" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1ae71abb379513c957189b9b5bc50be96b" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int KWin::Window::m_activityUpdatesBlocked</definition>
        <argsstring></argsstring>
        <name>m_activityUpdatesBlocked</name>
        <qualifiedname>KWin::Window::m_activityUpdatesBlocked</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1825" column="9" bodyfile="kwin/src/window.h" bodystart="1825" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1ac2a9b46eff2a2b64330634e98bed862a" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::m_blockedActivityUpdatesRequireTransients</definition>
        <argsstring></argsstring>
        <name>m_blockedActivityUpdatesRequireTransients</name>
        <qualifiedname>KWin::Window::m_blockedActivityUpdatesRequireTransients</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1826" column="10" bodyfile="kwin/src/window.h" bodystart="1826" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a9e81ea2b202e22419de25715d6d9d995" prot="protected" static="no" mutable="no">
        <type>QString</type>
        <definition>QString KWin::Window::m_colorScheme</definition>
        <argsstring></argsstring>
        <name>m_colorScheme</name>
        <qualifiedname>KWin::Window::m_colorScheme</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1828" column="13" bodyfile="kwin/src/window.h" bodystart="1828" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a9c732f4f49c5d539aad82c43b7901a7f" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="class_k_win_1_1_decoration_1_1_decoration_palette" kindref="compound">Decoration::DecorationPalette</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Decoration::DecorationPalette&gt; KWin::Window::m_palette</definition>
        <argsstring></argsstring>
        <name>m_palette</name>
        <qualifiedname>KWin::Window::m_palette</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1829" column="21" bodyfile="kwin/src/window.h" bodystart="1829" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a4400f22402e2098aa69a9cc119d3119f" prot="protected" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_plasma_window_interface" kindref="compound">PlasmaWindowInterface</ref> *</type>
        <definition>PlasmaWindowInterface* KWin::Window::m_windowManagementInterface</definition>
        <argsstring></argsstring>
        <name>m_windowManagementInterface</name>
        <qualifiedname>KWin::Window::m_windowManagementInterface</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1833" column="27" bodyfile="kwin/src/window.h" bodystart="1833" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a4f120e060e7e5296686849275e6ba0b2" prot="protected" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
        <definition>Window* KWin::Window::m_transientFor</definition>
        <argsstring></argsstring>
        <name>m_transientFor</name>
        <qualifiedname>KWin::Window::m_transientFor</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1835" column="12" bodyfile="kwin/src/window.h" bodystart="1835" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a4b477f51ea1fb84ee84bd6fa0f0b4658" prot="protected" static="no" mutable="no">
        <type>QList&lt; <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> * &gt;</type>
        <definition>QList&lt;Window *&gt; KWin::Window::m_transients</definition>
        <argsstring></argsstring>
        <name>m_transients</name>
        <qualifiedname>KWin::Window::m_transients</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1836" column="11" bodyfile="kwin/src/window.h" bodystart="1836" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1add656ef4838e72d612c6b50db024088c" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::m_modal</definition>
        <argsstring></argsstring>
        <name>m_modal</name>
        <qualifiedname>KWin::Window::m_modal</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1837" column="10" bodyfile="kwin/src/window.h" bodystart="1837" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a7cebc18154bbbc82550e807cb97548bc" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7b" kindref="member">Layer</ref></type>
        <definition>Layer KWin::Window::m_layer</definition>
        <argsstring></argsstring>
        <name>m_layer</name>
        <qualifiedname>KWin::Window::m_layer</qualifiedname>
        <initializer>= <ref refid="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7ba4b067423190552d3be96ede3c15d4ee6" kindref="member">UnknownLayer</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1838" column="11" bodyfile="kwin/src/window.h" bodystart="1838" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1ad11fd4fa0886c3235d511ca20c92cdd3" prot="protected" static="no" mutable="no">
        <type>QPointer&lt; <ref refid="class_k_win_1_1_tile" kindref="compound">Tile</ref> &gt;</type>
        <definition>QPointer&lt;Tile&gt; KWin::Window::m_requestedTile</definition>
        <argsstring></argsstring>
        <name>m_requestedTile</name>
        <qualifiedname>KWin::Window::m_requestedTile</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1839" column="14" bodyfile="kwin/src/window.h" bodystart="1839" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a19c97e72ee45549f09b9b6fd62c97e73" prot="protected" static="no" mutable="no">
        <type>QPointer&lt; <ref refid="class_k_win_1_1_tile" kindref="compound">Tile</ref> &gt;</type>
        <definition>QPointer&lt;Tile&gt; KWin::Window::m_tile</definition>
        <argsstring></argsstring>
        <name>m_tile</name>
        <qualifiedname>KWin::Window::m_tile</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1840" column="14" bodyfile="kwin/src/window.h" bodystart="1840" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a85e581a5d27c42ac61ba665b48b6ccd8" prot="protected" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="namespace_k_win_1a43c059c9fd683dba8da0f59f90c934ee" kindref="member">ElectricBorderMode</ref> &gt;</type>
        <definition>std::optional&lt;ElectricBorderMode&gt; KWin::Window::m_electricMode</definition>
        <argsstring></argsstring>
        <name>m_electricMode</name>
        <qualifiedname>KWin::Window::m_electricMode</qualifiedname>
        <initializer>= std::nullopt</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1843" column="19" bodyfile="kwin/src/window.h" bodystart="1843" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a30324ba0bf9c10338dd809187d7ab87e" prot="protected" static="no" mutable="no">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::m_electricGeometryRestore</definition>
        <argsstring></argsstring>
        <name>m_electricGeometryRestore</name>
        <qualifiedname>KWin::Window::m_electricGeometryRestore</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1844" column="12" bodyfile="kwin/src/window.h" bodystart="1844" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a12c2b2f6f08bc682b5709b0b31835af2" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::m_electricMaximizing</definition>
        <argsstring></argsstring>
        <name>m_electricMaximizing</name>
        <qualifiedname>KWin::Window::m_electricMaximizing</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1845" column="10" bodyfile="kwin/src/window.h" bodystart="1845" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a8ac86198b154d673d3f95e53f8e22bbc" prot="protected" static="no" mutable="no">
        <type>QTimer *</type>
        <definition>QTimer* KWin::Window::m_electricMaximizingDelay</definition>
        <argsstring></argsstring>
        <name>m_electricMaximizingDelay</name>
        <qualifiedname>KWin::Window::m_electricMaximizingDelay</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1846" column="12" bodyfile="kwin/src/window.h" bodystart="1846" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a0cf00bc60958289e00e98f54c5cd5efc" prot="protected" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
        <definition>Output* KWin::Window::m_moveResizeOutput</definition>
        <argsstring></argsstring>
        <name>m_moveResizeOutput</name>
        <qualifiedname>KWin::Window::m_moveResizeOutput</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1849" column="12" bodyfile="kwin/src/window.h" bodystart="1849" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1af7e5c26ceb8213166436ae5cb33b3868" prot="protected" static="no" mutable="no">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::m_moveResizeGeometry</definition>
        <argsstring></argsstring>
        <name>m_moveResizeGeometry</name>
        <qualifiedname>KWin::Window::m_moveResizeGeometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1850" column="12" bodyfile="kwin/src/window.h" bodystart="1850" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1af0d59bddcb003671edd6c8c5918ca9bb" prot="protected" static="no" mutable="no">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::m_keyboardGeometryRestore</definition>
        <argsstring></argsstring>
        <name>m_keyboardGeometryRestore</name>
        <qualifiedname>KWin::Window::m_keyboardGeometryRestore</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1851" column="12" bodyfile="kwin/src/window.h" bodystart="1851" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a3c7d9d00fef91f9caea2200864b6fa11" prot="protected" static="no" mutable="no">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::m_maximizeGeometryRestore</definition>
        <argsstring></argsstring>
        <name>m_maximizeGeometryRestore</name>
        <qualifiedname>KWin::Window::m_maximizeGeometryRestore</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1852" column="12" bodyfile="kwin/src/window.h" bodystart="1852" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a7c7d55137ebad9559a28f1c0f142d7e3" prot="protected" static="no" mutable="no">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::m_fullscreenGeometryRestore</definition>
        <argsstring></argsstring>
        <name>m_fullscreenGeometryRestore</name>
        <qualifiedname>KWin::Window::m_fullscreenGeometryRestore</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1853" column="12" bodyfile="kwin/src/window.h" bodystart="1853" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1aa21b3b775184dac69e633ff5429fadc4" prot="protected" static="no" mutable="no">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::m_virtualKeyboardGeometry</definition>
        <argsstring></argsstring>
        <name>m_virtualKeyboardGeometry</name>
        <qualifiedname>KWin::Window::m_virtualKeyboardGeometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1854" column="12" bodyfile="kwin/src/window.h" bodystart="1854" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1ae18f2e2076546040be29be581bceb33a" prot="protected" static="no" mutable="no">
        <type>struct <ref refid="class_k_win_1_1_window" kindref="compound">KWin::Window</ref></type>
        <definition>struct KWin::Window KWin::Window::m_interactiveMoveResize</definition>
        <argsstring></argsstring>
        <name>m_interactiveMoveResize</name>
        <qualifiedname>KWin::Window::m_interactiveMoveResize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1873" column="29"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a1f4d0f011a8c41e357782a318cd0078d" prot="protected" static="no" mutable="no">
        <type>struct <ref refid="class_k_win_1_1_window" kindref="compound">KWin::Window</ref></type>
        <definition>struct KWin::Window KWin::Window::m_decoration</definition>
        <argsstring></argsstring>
        <name>m_decoration</name>
        <qualifiedname>KWin::Window::m_decoration</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1881" column="18"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a09fb67780141bb5039d70ec04e2c8d09" prot="protected" static="no" mutable="no">
        <type>QString</type>
        <definition>QString KWin::Window::m_desktopFileName</definition>
        <argsstring></argsstring>
        <name>m_desktopFileName</name>
        <qualifiedname>KWin::Window::m_desktopFileName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1882" column="13" bodyfile="kwin/src/window.h" bodystart="1882" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a34d2bc7be777b7e73a80e0e9f0e11dee" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::m_applicationMenuActive</definition>
        <argsstring></argsstring>
        <name>m_applicationMenuActive</name>
        <qualifiedname>KWin::Window::m_applicationMenuActive</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1884" column="10" bodyfile="kwin/src/window.h" bodystart="1884" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a0fc590d232b8a473c027c123d765351a" prot="protected" static="no" mutable="no">
        <type>QString</type>
        <definition>QString KWin::Window::m_applicationMenuServiceName</definition>
        <argsstring></argsstring>
        <name>m_applicationMenuServiceName</name>
        <qualifiedname>KWin::Window::m_applicationMenuServiceName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1885" column="13" bodyfile="kwin/src/window.h" bodystart="1885" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1afb4dae41e63bf8253fc18fb0592fb896" prot="protected" static="no" mutable="no">
        <type>QString</type>
        <definition>QString KWin::Window::m_applicationMenuObjectPath</definition>
        <argsstring></argsstring>
        <name>m_applicationMenuObjectPath</name>
        <qualifiedname>KWin::Window::m_applicationMenuObjectPath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1886" column="13" bodyfile="kwin/src/window.h" bodystart="1886" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a2e2dbdceda6f42b30b91e6f9949cdef1" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::m_unresponsive</definition>
        <argsstring></argsstring>
        <name>m_unresponsive</name>
        <qualifiedname>KWin::Window::m_unresponsive</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1888" column="10" bodyfile="kwin/src/window.h" bodystart="1888" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a630842ac4cfe9ba9390eac5ffc8a9a7c" prot="protected" static="no" mutable="no">
        <type>QKeySequence</type>
        <definition>QKeySequence KWin::Window::_shortcut</definition>
        <argsstring></argsstring>
        <name>_shortcut</name>
        <qualifiedname>KWin::Window::_shortcut</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1890" column="18" bodyfile="kwin/src/window.h" bodystart="1890" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a7b0073ffa42fe46eec1c800a0ce2fe93" prot="protected" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_window_rules" kindref="compound">WindowRules</ref></type>
        <definition>WindowRules KWin::Window::m_rules</definition>
        <argsstring></argsstring>
        <name>m_rules</name>
        <qualifiedname>KWin::Window::m_rules</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1892" column="17" bodyfile="kwin/src/window.h" bodystart="1892" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1aeac686d7fa3178f4f8c48cad30fe64ae" prot="protected" static="no" mutable="no">
        <type>quint32</type>
        <definition>quint32 KWin::Window::m_lastUsageSerial</definition>
        <argsstring></argsstring>
        <name>m_lastUsageSerial</name>
        <qualifiedname>KWin::Window::m_lastUsageSerial</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1893" column="13" bodyfile="kwin/src/window.h" bodystart="1893" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a974b55853ed7502a0d360dce8202ecf7" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::m_lockScreenOverlay</definition>
        <argsstring></argsstring>
        <name>m_lockScreenOverlay</name>
        <qualifiedname>KWin::Window::m_lockScreenOverlay</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1894" column="10" bodyfile="kwin/src/window.h" bodystart="1894" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1ae8ba437342c4f6dc46da0fbe50a09e0f" prot="protected" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t KWin::Window::m_offscreenRenderCount</definition>
        <argsstring></argsstring>
        <name>m_offscreenRenderCount</name>
        <qualifiedname>KWin::Window::m_offscreenRenderCount</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1895" column="14" bodyfile="kwin/src/window.h" bodystart="1895" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a082147340c5e5bad774726702cc59d69" prot="protected" static="no" mutable="no">
        <type>QTimer</type>
        <definition>QTimer KWin::Window::m_offscreenFramecallbackTimer</definition>
        <argsstring></argsstring>
        <name>m_offscreenFramecallbackTimer</name>
        <qualifiedname>KWin::Window::m_offscreenFramecallbackTimer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1896" column="12" bodyfile="kwin/src/window.h" bodystart="1896" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_window_1a9fda98051b25624be54619573b64ffb4" prot="protected" static="yes" mutable="no">
        <type>QHash&lt; QString, std::weak_ptr&lt; <ref refid="class_k_win_1_1_decoration_1_1_decoration_palette" kindref="compound">Decoration::DecorationPalette</ref> &gt; &gt;</type>
        <definition>QHash&lt; QString, std::weak_ptr&lt; Decoration::DecorationPalette &gt; &gt; KWin::Window::s_palettes</definition>
        <argsstring></argsstring>
        <name>s_palettes</name>
        <qualifiedname>KWin::Window::s_palettes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1830" column="18" bodyfile="kwin/src/window.h" bodystart="1830" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1aed6539e49519ddd40f9c45665ae9cf58" prot="protected" static="yes" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="class_k_win_1_1_decoration_1_1_decoration_palette" kindref="compound">Decoration::DecorationPalette</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Decoration::DecorationPalette &gt; KWin::Window::s_defaultPalette</definition>
        <argsstring></argsstring>
        <name>s_defaultPalette</name>
        <qualifiedname>KWin::Window::s_defaultPalette</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1831" column="28" bodyfile="kwin/src/window.h" bodystart="1831" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_window_1ac6647aba8e91643714f82ff1fdc1d09c" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::enabled</definition>
        <argsstring></argsstring>
        <name>enabled</name>
        <qualifiedname>KWin::Window::enabled</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1858" column="14" bodyfile="kwin/src/window.h" bodystart="1858" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1ae587eea806a869c36dc2b8718e65dee6" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::unrestricted</definition>
        <argsstring></argsstring>
        <name>unrestricted</name>
        <qualifiedname>KWin::Window::unrestricted</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1859" column="14" bodyfile="kwin/src/window.h" bodystart="1859" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a59bcf5b3c635478120afa53945ee8b75" prot="public" static="no" mutable="no">
        <type>QPointF</type>
        <definition>QPointF KWin::Window::anchor</definition>
        <argsstring></argsstring>
        <name>anchor</name>
        <qualifiedname>KWin::Window::anchor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1860" column="17" bodyfile="kwin/src/window.h" bodystart="1860" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1ac363a722e88080cf4a00495866de7f4d" prot="public" static="no" mutable="no">
        <type>Qt::KeyboardModifiers</type>
        <definition>Qt::KeyboardModifiers KWin::Window::modifiers</definition>
        <argsstring></argsstring>
        <name>modifiers</name>
        <qualifiedname>KWin::Window::modifiers</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1861" column="31" bodyfile="kwin/src/window.h" bodystart="1861" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a140e419a5274b750fd8a6b3789c8f6af" prot="public" static="no" mutable="no">
        <type>QPointF</type>
        <definition>QPointF KWin::Window::offset</definition>
        <argsstring></argsstring>
        <name>offset</name>
        <qualifiedname>KWin::Window::offset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1862" column="17" bodyfile="kwin/src/window.h" bodystart="1862" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1aa2da7f0cb27d3b0c3f597b21ac115d78" prot="public" static="no" mutable="no">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::initialGeometry</definition>
        <argsstring></argsstring>
        <name>initialGeometry</name>
        <qualifiedname>KWin::Window::initialGeometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1863" column="16" bodyfile="kwin/src/window.h" bodystart="1863" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a5d65f964d1a3dc5893b561429840639d" prot="public" static="no" mutable="no">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::initialGeometryRestore</definition>
        <argsstring></argsstring>
        <name>initialGeometryRestore</name>
        <qualifiedname>KWin::Window::initialGeometryRestore</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1864" column="16" bodyfile="kwin/src/window.h" bodystart="1864" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1abb26f86fb723e81f43e0a27e8ffa0aa8" prot="public" static="no" mutable="no">
        <type><ref refid="namespace_k_win_1a09aef7c112a8b0cdfb6e27a081d50dc8" kindref="member">Gravity</ref></type>
        <definition>Gravity KWin::Window::gravity</definition>
        <argsstring></argsstring>
        <name>gravity</name>
        <qualifiedname>KWin::Window::gravity</qualifiedname>
        <initializer>= <ref refid="namespace_k_win_1a09aef7c112a8b0cdfb6e27a081d50dc8a6adf97f83acf6453d4a6a4b1070f3754" kindref="member">Gravity::None</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1865" column="17" bodyfile="kwin/src/window.h" bodystart="1865" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a40f33a8d09fddef56ce9b15ff98a1ea6" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::Window::buttonDown</definition>
        <argsstring></argsstring>
        <name>buttonDown</name>
        <qualifiedname>KWin::Window::buttonDown</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1866" column="14" bodyfile="kwin/src/window.h" bodystart="1866" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a90e105403fbfe6e2efd150fc49ca2c2f" prot="public" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_cursor_shape" kindref="compound">CursorShape</ref></type>
        <definition>CursorShape KWin::Window::cursor</definition>
        <argsstring></argsstring>
        <name>cursor</name>
        <qualifiedname>KWin::Window::cursor</qualifiedname>
        <initializer>= Qt::ArrowCursor</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1867" column="21" bodyfile="kwin/src/window.h" bodystart="1867" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a365dbfdb8799e048a323b0782d8f0837" prot="public" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
        <definition>Output* KWin::Window::startOutput</definition>
        <argsstring></argsstring>
        <name>startOutput</name>
        <qualifiedname>KWin::Window::startOutput</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1868" column="16" bodyfile="kwin/src/window.h" bodystart="1868" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a5a14f052819dee2470858f59e9d2218c" prot="public" static="no" mutable="no">
        <type>QTimer *</type>
        <definition>QTimer* KWin::Window::delayedTimer</definition>
        <argsstring></argsstring>
        <name>delayedTimer</name>
        <qualifiedname>KWin::Window::delayedTimer</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1869" column="16" bodyfile="kwin/src/window.h" bodystart="1869" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a8e20b44c82b270d86739445572bc8b27" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t KWin::Window::counter</definition>
        <argsstring></argsstring>
        <name>counter</name>
        <qualifiedname>KWin::Window::counter</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1870" column="18" bodyfile="kwin/src/window.h" bodystart="1870" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1add628ad2a7308fadfed4c43146813b1c" prot="public" static="no" mutable="no">
        <type><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9" kindref="member">MaximizeMode</ref></type>
        <definition>MaximizeMode KWin::Window::initialMaximizeMode</definition>
        <argsstring></argsstring>
        <name>initialMaximizeMode</name>
        <qualifiedname>KWin::Window::initialMaximizeMode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1871" column="22" bodyfile="kwin/src/window.h" bodystart="1871" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1aa61d53fcea4373c904e60093289795f6" prot="public" static="no" mutable="no">
        <type>QuickTileMode</type>
        <definition>QuickTileMode KWin::Window::initialQuickTileMode</definition>
        <argsstring></argsstring>
        <name>initialQuickTileMode</name>
        <qualifiedname>KWin::Window::initialQuickTileMode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1872" column="23" bodyfile="kwin/src/window.h" bodystart="1872" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1aeb9f103fab307fd78c92cef1f14275b2" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; KDecoration3::Decoration &gt;</type>
        <definition>std::shared_ptr&lt;KDecoration3::Decoration&gt; KWin::Window::decoration</definition>
        <argsstring></argsstring>
        <name>decoration</name>
        <qualifiedname>KWin::Window::decoration</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1877" column="25" bodyfile="kwin/src/window.h" bodystart="1877" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1abe19bb40b369f778012075b9752d84eb" prot="public" static="no" mutable="no">
        <type>QPointer&lt; <ref refid="class_k_win_1_1_decoration_1_1_decorated_window_impl" kindref="compound">Decoration::DecoratedWindowImpl</ref> &gt;</type>
        <definition>QPointer&lt;Decoration::DecoratedWindowImpl&gt; KWin::Window::client</definition>
        <argsstring></argsstring>
        <name>client</name>
        <qualifiedname>KWin::Window::client</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1878" column="18" bodyfile="kwin/src/window.h" bodystart="1878" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1a8392b5437fd670ddcf478833696571c0" prot="public" static="no" mutable="no">
        <type>QElapsedTimer</type>
        <definition>QElapsedTimer KWin::Window::doubleClickTimer</definition>
        <argsstring></argsstring>
        <name>doubleClickTimer</name>
        <qualifiedname>KWin::Window::doubleClickTimer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1879" column="23" bodyfile="kwin/src/window.h" bodystart="1879" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_window_1ac6d2550e02b58a4b9b3c818a4841d602" prot="public" static="no" mutable="no">
        <type>QRegion</type>
        <definition>QRegion KWin::Window::inputRegion</definition>
        <argsstring></argsstring>
        <name>inputRegion</name>
        <qualifiedname>KWin::Window::inputRegion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1880" column="17" bodyfile="kwin/src/window.h" bodystart="1880" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_window_1adb30fbdfb7094449cb1f97e177a22432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::Window::~Window</definition>
        <argsstring>() override</argsstring>
        <name>~Window</name>
        <qualifiedname>KWin::Window::~Window</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="563" column="5" bodyfile="kwin/src/window.cpp" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ad9117ba1a2dcfae844dfb15f3beb5ae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::ref</definition>
        <argsstring>()</argsstring>
        <name>ref</name>
        <qualifiedname>KWin::Window::ref</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="565" column="10" bodyfile="kwin/src/window.cpp" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a212fbc7e400c510205ba9fd3611968d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::unref</definition>
        <argsstring>()</argsstring>
        <name>unref</name>
        <qualifiedname>KWin::Window::unref</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="566" column="10" bodyfile="kwin/src/window.cpp" bodystart="109" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a5bd40e38d16c8453af9226579d1865ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::moveResizeGeometry</definition>
        <argsstring>() const</argsstring>
        <name>moveResizeGeometry</name>
        <qualifiedname>KWin::Window::moveResizeGeometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the last requested geometry. The returned value indicates the bounding geometry, meaning that the client can commit smaller window geometry if the window is resized.</para>
<para>The main difference between the frame geometry and the move-resize geometry is that the former specifies the current geometry while the latter specifies the next geometry. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="577" column="12" bodyfile="kwin/src/window.cpp" bodystart="3491" bodyend="3494"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ad20775a66b1c93ffb3cd0a8e917cc92b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
        <definition>Output * KWin::Window::moveResizeOutput</definition>
        <argsstring>() const</argsstring>
        <name>moveResizeOutput</name>
        <qualifiedname>KWin::Window::moveResizeOutput</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the output where the last move or resize operation has occurred. The window is expected to land on this output after the move/resize operation completes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="583" column="12" bodyfile="kwin/src/window.cpp" bodystart="3502" bodyend="3505"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1adbbbb9c3b063b36a448825bc710cb4a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setMoveResizeOutput</definition>
        <argsstring>(Output *output)</argsstring>
        <name>setMoveResizeOutput</name>
        <qualifiedname>KWin::Window::setMoveResizeOutput</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="584" column="10" bodyfile="kwin/src/window.cpp" bodystart="3507" bodyend="3529"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a023b03368916b91c59535d5843f6c75d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::bufferGeometry</definition>
        <argsstring>() const</argsstring>
        <name>bufferGeometry</name>
        <qualifiedname>KWin::Window::bufferGeometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the geometry of the pixmap or buffer attached to this <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>.</para>
<para>For X11 windows, this method returns server-side geometry of the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>.</para>
<para>For <ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref> windows, this method returns rectangle that the main surface occupies on the screen, in global screen coordinates. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="594" column="12" bodyfile="kwin/src/window.h" bodystart="1899" bodyend="1902"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a7617d3fa0acf53549af7d54e558881ad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::frameGeometry</definition>
        <argsstring>() const</argsstring>
        <name>frameGeometry</name>
        <qualifiedname>KWin::Window::frameGeometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the geometry of the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>, excluding invisible portions, e.g. server-side and client-side drop shadows, etc. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="599" column="12" bodyfile="kwin/src/window.h" bodystart="1914" bodyend="1917"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a76606965aab8b25facbd673c634c6ab4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::clientGeometry</definition>
        <argsstring>() const</argsstring>
        <name>clientGeometry</name>
        <qualifiedname>KWin::Window::clientGeometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the geometry of the client window, in global screen coordinates. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="603" column="12" bodyfile="kwin/src/window.h" bodystart="1904" bodyend="1907"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af8a628049f3374489651d8db883febd2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QMargins</type>
        <definition>QMargins KWin::Window::frameMargins</definition>
        <argsstring>() const</argsstring>
        <name>frameMargins</name>
        <qualifiedname>KWin::Window::frameMargins</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the extents of the server-side decoration.</para>
<para>Note that the returned margins object will have all margins set to 0 if the window doesn&apos;t have a server-side decoration. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="610" column="14" bodyfile="kwin/src/window.cpp" bodystart="408" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1abb7a478a68c076a93fe1e205b161c4b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::Window::minSize</definition>
        <argsstring>() const</argsstring>
        <name>minSize</name>
        <qualifiedname>KWin::Window::minSize</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a9cfb71ddb76bd69e6623592f6b1fcf5b">minSize</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a789e45e8dda7a6db82df10a93024772a">minSize</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a84a0768a0714207a1aa8175f5d6a58c6">minSize</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the minimum client size, not the minimum frame size. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="612" column="20" bodyfile="kwin/src/window.cpp" bodystart="1116" bodyend="1119"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aabe6333ee36076f053b1356e4217cb8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::Window::maxSize</definition>
        <argsstring>() const</argsstring>
        <name>maxSize</name>
        <qualifiedname>KWin::Window::maxSize</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1ab2df01fedecf9020d027748a28745f86">maxSize</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a3693e777b97ae236b95db854e3257078">maxSize</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a68732d25c61bbf0013eadf4d23cae34d">maxSize</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the maximum client size, not the maximum frame size. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="613" column="20" bodyfile="kwin/src/window.cpp" bodystart="1108" bodyend="1111"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1abdcd7b301e22e9442661118f2a169635" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::Window::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>KWin::Window::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="614" column="12" bodyfile="kwin/src/window.h" bodystart="1919" bodyend="1922"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aa42e778009d34e419aee0651f727ba30" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::Window::pos</definition>
        <argsstring>() const</argsstring>
        <name>pos</name>
        <qualifiedname>KWin::Window::pos</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="615" column="13" bodyfile="kwin/src/window.h" bodystart="1924" bodyend="1927"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a392792ca7e4158c176f4fa32c42ae528" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::rect</definition>
        <argsstring>() const</argsstring>
        <name>rect</name>
        <qualifiedname>KWin::Window::rect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="616" column="12" bodyfile="kwin/src/window.h" bodystart="1949" bodyend="1952"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a5cb43b5eeee4248ce9d046be48ae6ef0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>qreal</type>
        <definition>qreal KWin::Window::x</definition>
        <argsstring>() const</argsstring>
        <name>x</name>
        <qualifiedname>KWin::Window::x</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="617" column="11" bodyfile="kwin/src/window.h" bodystart="1929" bodyend="1932"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ab8d602594babf2cfdd82463169fb8605" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>qreal</type>
        <definition>qreal KWin::Window::y</definition>
        <argsstring>() const</argsstring>
        <name>y</name>
        <qualifiedname>KWin::Window::y</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="618" column="11" bodyfile="kwin/src/window.h" bodystart="1934" bodyend="1937"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a181ef9a610beb622b8b9c3d2f32be868" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>qreal</type>
        <definition>qreal KWin::Window::width</definition>
        <argsstring>() const</argsstring>
        <name>width</name>
        <qualifiedname>KWin::Window::width</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="619" column="11" bodyfile="kwin/src/window.h" bodystart="1939" bodyend="1942"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ad9487bb4e3271b05e351100e5f9092a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>qreal</type>
        <definition>qreal KWin::Window::height</definition>
        <argsstring>() const</argsstring>
        <name>height</name>
        <qualifiedname>KWin::Window::height</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="620" column="11" bodyfile="kwin/src/window.h" bodystart="1944" bodyend="1947"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a0a700ea4c908f6907d172e7754c38db7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isOnOutput</definition>
        <argsstring>(Output *output) const</argsstring>
        <name>isOnOutput</name>
        <qualifiedname>KWin::Window::isOnOutput</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="621" column="10" bodyfile="kwin/src/window.cpp" bodystart="245" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a7511675b840c00baeccfaa211fa39ff6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isOnActiveOutput</definition>
        <argsstring>() const</argsstring>
        <name>isOnActiveOutput</name>
        <qualifiedname>KWin::Window::isOnActiveOutput</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="622" column="10" bodyfile="kwin/src/window.cpp" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a61b3745b4ffca0d122acc9fc0c8e0c4f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
        <definition>Output * KWin::Window::output</definition>
        <argsstring>() const</argsstring>
        <name>output</name>
        <qualifiedname>KWin::Window::output</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="623" column="12" bodyfile="kwin/src/window.cpp" bodystart="227" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a8018decfe708255ffd09b957dc2d14b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setOutput</definition>
        <argsstring>(Output *output)</argsstring>
        <name>setOutput</name>
        <qualifiedname>KWin::Window::setOutput</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="624" column="10" bodyfile="kwin/src/window.cpp" bodystart="232" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ae5046998639848857380670149aa13d5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::Window::clientSize</definition>
        <argsstring>() const</argsstring>
        <name>clientSize</name>
        <qualifiedname>KWin::Window::clientSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="625" column="12" bodyfile="kwin/src/window.h" bodystart="1909" bodyend="1912"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ab2223644425271a233b5deb303fb8e59" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::visibleGeometry</definition>
        <argsstring>() const</argsstring>
        <name>visibleGeometry</name>
        <qualifiedname>KWin::Window::visibleGeometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a rectangle that the window occupies on the screen, including drop-shadows. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="629" column="12" bodyfile="kwin/src/window.cpp" bodystart="151" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a9424a239d38ac1d23a06c2db0567d04d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::Window::mapToFrame</definition>
        <argsstring>(const QPointF &amp;point) const</argsstring>
        <name>mapToFrame</name>
        <qualifiedname>KWin::Window::mapToFrame</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maps the specified <emphasis>point</emphasis> from the global screen coordinates to the frame coordinates. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="634" column="13" bodyfile="kwin/src/window.cpp" bodystart="385" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a9f3e6314899a3ace5b8df65704a41529" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::Window::mapToLocal</definition>
        <argsstring>(const QPointF &amp;point) const</argsstring>
        <name>mapToLocal</name>
        <qualifiedname>KWin::Window::mapToLocal</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maps the specified <emphasis>point</emphasis> from the global screen coordinates to the surface-local coordinates of the main surface. For X11 windows, this function maps the specified point from the global screen coordinates to the buffer-local coordinates. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="640" column="13" bodyfile="kwin/src/window.cpp" bodystart="390" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a7f753460e69ae5649245beb0dd1abd90" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::Window::mapFromLocal</definition>
        <argsstring>(const QPointF &amp;point) const</argsstring>
        <name>mapFromLocal</name>
        <qualifiedname>KWin::Window::mapFromLocal</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="641" column="13" bodyfile="kwin/src/window.cpp" bodystart="395" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a739d097e02c1cfa5162510a20c6114d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::Window::framePosToClientPos</definition>
        <argsstring>(const QPointF &amp;point) const</argsstring>
        <name>framePosToClientPos</name>
        <qualifiedname>KWin::Window::framePosToClientPos</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a05c453a3fcf05dad3f5b834a417dd93e">framePosToClientPos</reimplementedby>
        <param>
          <type>const QPointF &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the matching client position for the given frame position <computeroutput>point</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="646" column="21" bodyfile="kwin/src/window.cpp" bodystart="3395" bodyend="3402"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a5bbc27846d8e4d03bb44061b15609f50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::Window::nextFramePosToClientPos</definition>
        <argsstring>(const QPointF &amp;point) const</argsstring>
        <name>nextFramePosToClientPos</name>
        <qualifiedname>KWin::Window::nextFramePosToClientPos</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1ad04667c236f30d2b04226fb479e54c8b">nextFramePosToClientPos</reimplementedby>
        <param>
          <type>const QPointF &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="647" column="21" bodyfile="kwin/src/window.cpp" bodystart="3404" bodyend="3411"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a817b5734d5c89784f28c1bef955a6485" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::Window::clientPosToFramePos</definition>
        <argsstring>(const QPointF &amp;point) const</argsstring>
        <name>clientPosToFramePos</name>
        <qualifiedname>KWin::Window::clientPosToFramePos</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a54fae364d539ef6501ae44c2a3a57d55">clientPosToFramePos</reimplementedby>
        <param>
          <type>const QPointF &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the matching frame position for the given client position <computeroutput>point</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="651" column="21" bodyfile="kwin/src/window.cpp" bodystart="3413" bodyend="3420"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a2ec8e47f4272f0e80bec5033f5cac31e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::Window::nextClientPosToFramePos</definition>
        <argsstring>(const QPointF &amp;point) const</argsstring>
        <name>nextClientPosToFramePos</name>
        <qualifiedname>KWin::Window::nextClientPosToFramePos</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1ad58f460d101533c87526ed2ccf3fa1bc">nextClientPosToFramePos</reimplementedby>
        <param>
          <type>const QPointF &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="652" column="21" bodyfile="kwin/src/window.cpp" bodystart="3422" bodyend="3429"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ae09928747c6104d9520e519176f0f618" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::Window::frameSizeToClientSize</definition>
        <argsstring>(const QSizeF &amp;size) const</argsstring>
        <name>frameSizeToClientSize</name>
        <qualifiedname>KWin::Window::frameSizeToClientSize</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1ad52b2f9c90fe952787fdce1107f66024">frameSizeToClientSize</reimplementedby>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the matching client size for the given frame size <computeroutput>size</computeroutput>.</para>
<para>Notice that size constraints won&apos;t be applied.</para>
<para>Default implementation returns the frame size with frame margins being excluded. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="660" column="20" bodyfile="kwin/src/window.cpp" bodystart="3431" bodyend="3438"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1abc82318fb715dcc5a0a3b98515897e92" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::Window::nextFrameSizeToClientSize</definition>
        <argsstring>(const QSizeF &amp;size) const</argsstring>
        <name>nextFrameSizeToClientSize</name>
        <qualifiedname>KWin::Window::nextFrameSizeToClientSize</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a647f36c69b53bde05593b6ab25d728cf">nextFrameSizeToClientSize</reimplementedby>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="661" column="20" bodyfile="kwin/src/window.cpp" bodystart="3440" bodyend="3447"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aec00cdb081b9048bde71fa2844cee001" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::Window::clientSizeToFrameSize</definition>
        <argsstring>(const QSizeF &amp;size) const</argsstring>
        <name>clientSizeToFrameSize</name>
        <qualifiedname>KWin::Window::clientSizeToFrameSize</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a00a45287c67f885c7ca53be41eb9344e">clientSizeToFrameSize</reimplementedby>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the matching frame size for the given client size <computeroutput>size</computeroutput>.</para>
<para>Notice that size constraints won&apos;t be applied.</para>
<para>Default implementation returns the client size with frame margins being included. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="669" column="20" bodyfile="kwin/src/window.cpp" bodystart="3449" bodyend="3456"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af4f582315c040559fde4abcadf727776" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::Window::nextClientSizeToFrameSize</definition>
        <argsstring>(const QSizeF &amp;size) const</argsstring>
        <name>nextClientSizeToFrameSize</name>
        <qualifiedname>KWin::Window::nextClientSizeToFrameSize</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a983d242e42480e725fe01005f240d0a2">nextClientSizeToFrameSize</reimplementedby>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="670" column="20" bodyfile="kwin/src/window.cpp" bodystart="3458" bodyend="3465"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a31d53d6011e247371ee9316d6be2ba81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::frameRectToClientRect</definition>
        <argsstring>(const QRectF &amp;rect) const</argsstring>
        <name>frameRectToClientRect</name>
        <qualifiedname>KWin::Window::frameRectToClientRect</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the matching client rect for the given frame rect <computeroutput>rect</computeroutput>.</para>
<para>Notice that size constraints won&apos;t be applied. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="676" column="12" bodyfile="kwin/src/window.cpp" bodystart="3467" bodyend="3471"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a609229e1420ffc3f9d584ea7834fdb73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::nextFrameRectToClientRect</definition>
        <argsstring>(const QRectF &amp;rect) const</argsstring>
        <name>nextFrameRectToClientRect</name>
        <qualifiedname>KWin::Window::nextFrameRectToClientRect</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="677" column="12" bodyfile="kwin/src/window.cpp" bodystart="3473" bodyend="3477"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a94200d7cbb5dc1e378197dbde9b22c38" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::clientRectToFrameRect</definition>
        <argsstring>(const QRectF &amp;rect) const</argsstring>
        <name>clientRectToFrameRect</name>
        <qualifiedname>KWin::Window::clientRectToFrameRect</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the matching frame rect for the given client rect <computeroutput>rect</computeroutput>.</para>
<para>Notice that size constraints won&apos;t be applied. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="683" column="12" bodyfile="kwin/src/window.cpp" bodystart="3479" bodyend="3483"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a295cbed96fc3d79023a1820b26c2af53" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::nextClientRectToFrameRect</definition>
        <argsstring>(const QRectF &amp;rect) const</argsstring>
        <name>nextClientRectToFrameRect</name>
        <qualifiedname>KWin::Window::nextClientRectToFrameRect</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="684" column="12" bodyfile="kwin/src/window.cpp" bodystart="3485" bodyend="3489"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1abaf5c29b43c3bdd7415d4db7f3c441b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::Window::constrainClientSize</definition>
        <argsstring>(const QSizeF &amp;size, SizeMode mode=SizeModeAny) const</argsstring>
        <name>constrainClientSize</name>
        <qualifiedname>KWin::Window::constrainClientSize</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1ad86f89d181510912a5d22dd8809232f8">constrainClientSize</reimplementedby>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_window_1a96727035a8ba0a709cc464483d1d7b3e" kindref="member">SizeMode</ref></type>
          <declname>mode</declname>
          <defval><ref refid="class_k_win_1_1_window_1a96727035a8ba0a709cc464483d1d7b3eac26ddc87899c79d31f6f90bcd11b85ba" kindref="member">SizeModeAny</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constrains the client size <computeroutput>size</computeroutput> according to a set of the window&apos;s size hints.</para>
<para>Default implementation applies only minimum and maximum size constraints. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="696" column="20" bodyfile="kwin/src/window.cpp" bodystart="4247" bodyend="4268"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aba7fd5b92a9da565aecf8ae559f4af69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::Window::constrainFrameSize</definition>
        <argsstring>(const QSizeF &amp;size, SizeMode mode=SizeModeAny) const</argsstring>
        <name>constrainFrameSize</name>
        <qualifiedname>KWin::Window::constrainFrameSize</qualifiedname>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_window_1a96727035a8ba0a709cc464483d1d7b3e" kindref="member">SizeMode</ref></type>
          <declname>mode</declname>
          <defval><ref refid="class_k_win_1_1_window_1a96727035a8ba0a709cc464483d1d7b3eac26ddc87899c79d31f6f90bcd11b85ba" kindref="member">SizeModeAny</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constrains the frame size <computeroutput>size</computeroutput> according to a set of the window&apos;s size hints. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="697" column="12" bodyfile="kwin/src/window.cpp" bodystart="4273" bodyend="4278"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ae6dc01373356e8b623e67a3d36ded9ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::move</definition>
        <argsstring>(const QPointF &amp;topLeft)</argsstring>
        <name>move</name>
        <qualifiedname>KWin::Window::move</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>topLeft</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Moves the window so that the new topLeft corner of the frame is <computeroutput>topLeft</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="702" column="10" bodyfile="kwin/src/window.cpp" bodystart="3531" bodyend="3541"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1acbdb2c16d25e7aa8842c04a0d51fe61e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::resize</definition>
        <argsstring>(const QSizeF &amp;size)</argsstring>
        <name>resize</name>
        <qualifiedname>KWin::Window::resize</qualifiedname>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resizes the window to have a new <computeroutput>size</computeroutput> but stay with the top-left corner in the same position. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="707" column="10" bodyfile="kwin/src/window.cpp" bodystart="3543" bodyend="3553"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aca6e1f1d8772897c5efbfb3c17fa436e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::moveResize</definition>
        <argsstring>(const QRectF &amp;geometry)</argsstring>
        <name>moveResize</name>
        <qualifiedname>KWin::Window::moveResize</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Requests a new <computeroutput>geometry</computeroutput> for the window that the implementation will need to adopt within its possibilities. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="713" column="10" bodyfile="kwin/src/window.cpp" bodystart="3555" bodyend="3563"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a658b4ab528b8142078ffa190a75f88dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::growHorizontal</definition>
        <argsstring>()</argsstring>
        <name>growHorizontal</name>
        <qualifiedname>KWin::Window::growHorizontal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="715" column="10" bodyfile="kwin/src/placement.cpp" bodystart="787" bodyend="811"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a8114e3a5eda24d8d1b745c9ab046d628" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::shrinkHorizontal</definition>
        <argsstring>()</argsstring>
        <name>shrinkHorizontal</name>
        <qualifiedname>KWin::Window::shrinkHorizontal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="716" column="10" bodyfile="kwin/src/placement.cpp" bodystart="820" bodyend="835"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a2af22a940dbc4ae7506131b6ba64d80a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::growVertical</definition>
        <argsstring>()</argsstring>
        <name>growVertical</name>
        <qualifiedname>KWin::Window::growVertical</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="717" column="10" bodyfile="kwin/src/placement.cpp" bodystart="844" bodyend="866"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a6faea699a6465e2eab512f6f27f7ac4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::shrinkVertical</definition>
        <argsstring>()</argsstring>
        <name>shrinkVertical</name>
        <qualifiedname>KWin::Window::shrinkVertical</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="718" column="10" bodyfile="kwin/src/placement.cpp" bodystart="875" bodyend="890"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a06e0e35e4fd13abedca3ed0f9eb65f56" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>QRectF</type>
        <definition>virtual QRectF KWin::Window::resizeWithChecks</definition>
        <argsstring>(const QRectF &amp;geometry, const QSizeF &amp;s)=0</argsstring>
        <name>resizeWithChecks</name>
        <qualifiedname>KWin::Window::resizeWithChecks</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a72264962a03eec8863c83c79fba3fa31">resizeWithChecks</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_wayland_window_1add0e85e5bbcd1990c9a22cc2e40222d1">resizeWithChecks</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a6c03fc2e4e471167af05d58866f4ab23">resizeWithChecks</reimplementedby>
        <param>
          <type>const QRectF &amp;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="720" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a2bc639db4c4a762bc0d58a715136a0ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::keepInArea</definition>
        <argsstring>(QRectF geometry, QRectF area, bool partial=false)</argsstring>
        <name>keepInArea</name>
        <qualifiedname>KWin::Window::keepInArea</qualifiedname>
        <param>
          <type>QRectF</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type>QRectF</type>
          <declname>area</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>partial</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="721" column="12" bodyfile="kwin/src/window.cpp" bodystart="1072" bodyend="1103"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aad3924cca3304323399da26ad99fa29c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7" kindref="member">WindowType</ref></type>
        <definition>virtual WindowType KWin::Window::windowType</definition>
        <argsstring>() const =0</argsstring>
        <name>windowType</name>
        <qualifiedname>KWin::Window::windowType</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_input_panel_v1_window_1af7af9df88e763dc7ab810d530a5ca954">windowType</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_internal_window_1ab79ce1d22e310182939e64c2adf91372">windowType</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_layer_shell_v1_window_1a464366b8e768b7d2ec5de1d400132a77">windowType</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a0ab369f3c39bf8f53453ed0345c3d75d">windowType</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_surface_window_1a0b513ce1416a4eb5e9f3eee7c0014496">windowType</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="724" column="24"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a6033808bddd2e7374784f870c67c6f8a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::hasNETSupport</definition>
        <argsstring>() const</argsstring>
        <name>hasNETSupport</name>
        <qualifiedname>KWin::Window::hasNETSupport</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="725" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ab56044e6eff0cd7e2a144756834c0751" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isDesktop</definition>
        <argsstring>() const</argsstring>
        <name>isDesktop</name>
        <qualifiedname>KWin::Window::isDesktop</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="726" column="10" bodyfile="kwin/src/window.h" bodystart="1959" bodyend="1962"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a3b2b28edaa7b699d1407322fd11ec1cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isDock</definition>
        <argsstring>() const</argsstring>
        <name>isDock</name>
        <qualifiedname>KWin::Window::isDock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="727" column="10" bodyfile="kwin/src/window.h" bodystart="1964" bodyend="1967"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a5fa248e56c9434f4d7002528b360a092" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isToolbar</definition>
        <argsstring>() const</argsstring>
        <name>isToolbar</name>
        <qualifiedname>KWin::Window::isToolbar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="728" column="10" bodyfile="kwin/src/window.h" bodystart="1974" bodyend="1977"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a80fbfd7990c3c58f2b61a00e0f94b87d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isMenu</definition>
        <argsstring>() const</argsstring>
        <name>isMenu</name>
        <qualifiedname>KWin::Window::isMenu</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="729" column="10" bodyfile="kwin/src/window.h" bodystart="1969" bodyend="1972"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a03433bdc26094171788332e5edfe66e3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isNormalWindow</definition>
        <argsstring>() const</argsstring>
        <name>isNormalWindow</name>
        <qualifiedname>KWin::Window::isNormalWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="730" column="10" bodyfile="kwin/src/window.h" bodystart="1994" bodyend="1997"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a7dd959da7a7a8d50a959684a92d55d65" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isDialog</definition>
        <argsstring>() const</argsstring>
        <name>isDialog</name>
        <qualifiedname>KWin::Window::isDialog</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="731" column="10" bodyfile="kwin/src/window.h" bodystart="1989" bodyend="1992"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aa0179fdd1c6fee664b5401f61f35e493" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isSplash</definition>
        <argsstring>() const</argsstring>
        <name>isSplash</name>
        <qualifiedname>KWin::Window::isSplash</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="732" column="10" bodyfile="kwin/src/window.h" bodystart="1979" bodyend="1982"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af7a970e5b2da43bc372f9fa79daec492" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isUtility</definition>
        <argsstring>() const</argsstring>
        <name>isUtility</name>
        <qualifiedname>KWin::Window::isUtility</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="733" column="10" bodyfile="kwin/src/window.h" bodystart="1984" bodyend="1987"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a25dac8536448a3d7dfae04663ac29d53" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isDropdownMenu</definition>
        <argsstring>() const</argsstring>
        <name>isDropdownMenu</name>
        <qualifiedname>KWin::Window::isDropdownMenu</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="734" column="10" bodyfile="kwin/src/window.h" bodystart="1999" bodyend="2002"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aa442208612eb92068a69c7e1b7a205ef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isPopupMenu</definition>
        <argsstring>() const</argsstring>
        <name>isPopupMenu</name>
        <qualifiedname>KWin::Window::isPopupMenu</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="735" column="10" bodyfile="kwin/src/window.h" bodystart="2004" bodyend="2007"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a4240959ea5b4e75eed1a8f29b6055397" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isTooltip</definition>
        <argsstring>() const</argsstring>
        <name>isTooltip</name>
        <qualifiedname>KWin::Window::isTooltip</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="736" column="10" bodyfile="kwin/src/window.h" bodystart="2009" bodyend="2012"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a0ac6d06256d8b4ff4f83089f1a1c6151" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isNotification</definition>
        <argsstring>() const</argsstring>
        <name>isNotification</name>
        <qualifiedname>KWin::Window::isNotification</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="737" column="10" bodyfile="kwin/src/window.h" bodystart="2014" bodyend="2017"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a477e0788aeabac703b672cc772a70398" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isCriticalNotification</definition>
        <argsstring>() const</argsstring>
        <name>isCriticalNotification</name>
        <qualifiedname>KWin::Window::isCriticalNotification</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="738" column="10" bodyfile="kwin/src/window.h" bodystart="2019" bodyend="2022"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a37f5a22919d5ee6f6404ce789c0a71f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isAppletPopup</definition>
        <argsstring>() const</argsstring>
        <name>isAppletPopup</name>
        <qualifiedname>KWin::Window::isAppletPopup</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="739" column="10" bodyfile="kwin/src/window.h" bodystart="2024" bodyend="2027"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a3081e1e30178d43b6e73b42e383191bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isOnScreenDisplay</definition>
        <argsstring>() const</argsstring>
        <name>isOnScreenDisplay</name>
        <qualifiedname>KWin::Window::isOnScreenDisplay</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="740" column="10" bodyfile="kwin/src/window.h" bodystart="2029" bodyend="2032"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a244536a5e022586293ec1fb0f31f5431" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isComboBox</definition>
        <argsstring>() const</argsstring>
        <name>isComboBox</name>
        <qualifiedname>KWin::Window::isComboBox</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="741" column="10" bodyfile="kwin/src/window.h" bodystart="2034" bodyend="2037"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a51642b7e40fd798861daeadb5e689e27" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isDNDIcon</definition>
        <argsstring>() const</argsstring>
        <name>isDNDIcon</name>
        <qualifiedname>KWin::Window::isDNDIcon</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="742" column="10" bodyfile="kwin/src/window.h" bodystart="2039" bodyend="2042"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ac53e1dd7ab4f57c3e323ac3d675b5cac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isLockScreen</definition>
        <argsstring>() const</argsstring>
        <name>isLockScreen</name>
        <qualifiedname>KWin::Window::isLockScreen</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a0006456e9cd34a3952b09c1e9915fdce">isLockScreen</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_wayland_window_1ae579b0325e0d14051b18f3895caee5c2">isLockScreen</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="744" column="18" bodyfile="kwin/src/window.h" bodystart="2044" bodyend="2047"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a901d9f764423ff5f2498705fa038d224" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isInputMethod</definition>
        <argsstring>() const</argsstring>
        <name>isInputMethod</name>
        <qualifiedname>KWin::Window::isInputMethod</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_input_panel_v1_window_1a40bdc962919c337a89fcda918ae2ceb9">isInputMethod</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="745" column="18" bodyfile="kwin/src/window.h" bodystart="2049" bodyend="2052"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a66101776c8b365f52d966288d39dbeec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isOutline</definition>
        <argsstring>() const</argsstring>
        <name>isOutline</name>
        <qualifiedname>KWin::Window::isOutline</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a4590958fefcd783a1f41934c1767b1f7">isOutline</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a6c61081edb155d2aa8672e2ee6a94708">isOutline</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="746" column="18" bodyfile="kwin/src/window.h" bodystart="2054" bodyend="2057"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a25245fd93c82135a2f197a63a7c21154" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isInternal</definition>
        <argsstring>() const</argsstring>
        <name>isInternal</name>
        <qualifiedname>KWin::Window::isInternal</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1ac4b733e333a4e7f30dc457e87decf182">isInternal</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="747" column="18" bodyfile="kwin/src/window.h" bodystart="2059" bodyend="2062"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1abc2ff83881725b11c8d72178012a2a88" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isPopupWindow</definition>
        <argsstring>() const</argsstring>
        <name>isPopupWindow</name>
        <qualifiedname>KWin::Window::isPopupWindow</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1acfd22f1af4d716b105cc001d0bd2907a">isPopupWindow</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_popup_window_1a632594ff4e8fe5be79d244a23ba12713">isPopupWindow</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="748" column="18" bodyfile="kwin/src/window.h" bodystart="2111" bodyend="2123"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a5f50be966c1885fe61b8a54e2dd584d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isClient</definition>
        <argsstring>() const</argsstring>
        <name>isClient</name>
        <qualifiedname>KWin::Window::isClient</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a2daf16e2105dbf869946ca4058d74ffd">isClient</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_wayland_window_1a4cbee5783a4c092460730aa8c286ae58">isClient</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a852aa374f815f9b1b3ac774dd4ac6d84">isClient</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="750" column="18" bodyfile="kwin/src/window.cpp" bodystart="293" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a3eb5ffa931e4a6f5b817084cf0cc9b71" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isDeleted</definition>
        <argsstring>() const</argsstring>
        <name>isDeleted</name>
        <qualifiedname>KWin::Window::isDeleted</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="751" column="10" bodyfile="kwin/src/window.cpp" bodystart="522" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a96111c26765b1c276dc41df14aa1a5af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isUnmanaged</definition>
        <argsstring>() const</argsstring>
        <name>isUnmanaged</name>
        <qualifiedname>KWin::Window::isUnmanaged</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a96c7a60b05aadbc537329ae7f90c817a">isUnmanaged</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="752" column="18" bodyfile="kwin/src/window.cpp" bodystart="298" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ab7937ac44130efc04c6bc24f65f71958" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isLockScreenOverlay</definition>
        <argsstring>() const</argsstring>
        <name>isLockScreenOverlay</name>
        <qualifiedname>KWin::Window::isLockScreenOverlay</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="754" column="10" bodyfile="kwin/src/window.cpp" bodystart="4564" bodyend="4567"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a1e3e27bf725caadcf2484557afe24921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setLockScreenOverlay</definition>
        <argsstring>(bool allowed)</argsstring>
        <name>setLockScreenOverlay</name>
        <qualifiedname>KWin::Window::setLockScreenOverlay</qualifiedname>
        <param>
          <type>bool</type>
          <declname>allowed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="755" column="10" bodyfile="kwin/src/window.cpp" bodystart="4555" bodyend="4562"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af8434bc6d80800dccc7700d26fd3594f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringList</type>
        <definition>QStringList KWin::Window::desktopIds</definition>
        <argsstring>() const</argsstring>
        <name>desktopIds</name>
        <qualifiedname>KWin::Window::desktopIds</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="757" column="17" bodyfile="kwin/src/window.cpp" bodystart="807" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ab3149c28ec7dd1daf9af75a3c10cd35e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">VirtualDesktop</ref> * &gt;</type>
        <definition>QList&lt; VirtualDesktop * &gt; KWin::Window::desktops</definition>
        <argsstring>() const</argsstring>
        <name>desktops</name>
        <qualifiedname>KWin::Window::desktops</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="758" column="11" bodyfile="kwin/src/window.cpp" bodystart="802" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a017d0afde06ff1fac03f4c4ef7cfb6d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setDesktops</definition>
        <argsstring>(QList&lt; VirtualDesktop * &gt; desktops)</argsstring>
        <name>setDesktops</name>
        <qualifiedname>KWin::Window::setDesktops</qualifiedname>
        <param>
          <type>QList&lt; <ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">VirtualDesktop</ref> * &gt;</type>
          <declname>desktops</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="759" column="10" bodyfile="kwin/src/window.cpp" bodystart="708" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aae3fab1428c67e6a2c925f765070dd84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::enterDesktop</definition>
        <argsstring>(VirtualDesktop *desktop)</argsstring>
        <name>enterDesktop</name>
        <qualifiedname>KWin::Window::enterDesktop</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">VirtualDesktop</ref> *</type>
          <declname>desktop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="760" column="10" bodyfile="kwin/src/window.cpp" bodystart="763" bodyend="771"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a7c8bdc25faf71283cc2d836016fa6113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::leaveDesktop</definition>
        <argsstring>(VirtualDesktop *desktop)</argsstring>
        <name>leaveDesktop</name>
        <qualifiedname>KWin::Window::leaveDesktop</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">VirtualDesktop</ref> *</type>
          <declname>desktop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="761" column="10" bodyfile="kwin/src/window.cpp" bodystart="773" bodyend="788"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a0e153ca25af4de7deaebbfc31c917560" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isOnDesktop</definition>
        <argsstring>(VirtualDesktop *desktop) const</argsstring>
        <name>isOnDesktop</name>
        <qualifiedname>KWin::Window::isOnDesktop</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">VirtualDesktop</ref> *</type>
          <declname>desktop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="762" column="10" bodyfile="kwin/src/window.cpp" bodystart="820" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aa975d4f4a79a999c827e0a4d7bb5c1dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isOnCurrentDesktop</definition>
        <argsstring>() const</argsstring>
        <name>isOnCurrentDesktop</name>
        <qualifiedname>KWin::Window::isOnCurrentDesktop</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="763" column="10" bodyfile="kwin/src/window.cpp" bodystart="825" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ab12c1237a71a1f353898742b3d85e793" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isOnAllDesktops</definition>
        <argsstring>() const</argsstring>
        <name>isOnAllDesktops</name>
        <qualifiedname>KWin::Window::isOnAllDesktops</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="764" column="10" bodyfile="kwin/src/window.h" bodystart="2069" bodyend="2072"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a6d170ffa2b85f130fdd02ca8be09d611" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setOnAllDesktops</definition>
        <argsstring>(bool set)</argsstring>
        <name>setOnAllDesktops</name>
        <qualifiedname>KWin::Window::setOnAllDesktops</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="765" column="10" bodyfile="kwin/src/window.cpp" bodystart="790" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ae70865a6d475746978ca119ac336092e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QStringList</type>
        <definition>QStringList KWin::Window::activities</definition>
        <argsstring>() const</argsstring>
        <name>activities</name>
        <qualifiedname>KWin::Window::activities</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a171645c92c0b24978f9a48630957f791">activities</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the list of activities the window window is on. if it&apos;s on all activities, the list will be empty. Don&apos;t use this, use <ref refid="class_k_win_1_1_window_1af30982dccaf9fcab4a7da3dd7053fc8b" kindref="member">isOnActivity()</ref> and friends (from class <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="767" column="25" bodyfile="kwin/src/window.cpp" bodystart="3239" bodyend="3242"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af30982dccaf9fcab4a7da3dd7053fc8b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isOnActivity</definition>
        <argsstring>(const QString &amp;activity) const</argsstring>
        <name>isOnActivity</name>
        <qualifiedname>KWin::Window::isOnActivity</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>activity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="768" column="10" bodyfile="kwin/src/window.h" bodystart="2079" bodyend="2082"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a6214074a0338d546c1c97c736f1b1fe6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isOnCurrentActivity</definition>
        <argsstring>() const</argsstring>
        <name>isOnCurrentActivity</name>
        <qualifiedname>KWin::Window::isOnCurrentActivity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="769" column="10" bodyfile="kwin/src/window.cpp" bodystart="3244" bodyend="3254"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a20a2cd33c04529fd4e5115e272ffaaf8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isOnAllActivities</definition>
        <argsstring>() const</argsstring>
        <name>isOnAllActivities</name>
        <qualifiedname>KWin::Window::isOnAllActivities</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="770" column="10" bodyfile="kwin/src/window.h" bodystart="2074" bodyend="2077"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a545f116b85dc0d6e66045171aa18fe53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setOnActivity</definition>
        <argsstring>(const QString &amp;activity, bool enable)</argsstring>
        <name>setOnActivity</name>
        <qualifiedname>KWin::Window::setOnActivity</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>activity</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether the window is on <computeroutput>activity</computeroutput>. If you remove it from its last activity, then it&apos;s on all activities.</para>
<para>Note: If it was on all activities and you try to remove it from one, nothing will happen; I don&apos;t think that&apos;s an important enough use case to handle here. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="771" column="10" bodyfile="kwin/src/window.cpp" bodystart="3263" bodyend="3286"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a7e638bc0587a8f3df06238420f94962f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setOnActivities</definition>
        <argsstring>(const QStringList &amp;newActivitiesList)</argsstring>
        <name>setOnActivities</name>
        <qualifiedname>KWin::Window::setOnActivities</qualifiedname>
        <param>
          <type>const QStringList &amp;</type>
          <declname>newActivitiesList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set exactly which activities this window is on </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="772" column="10" bodyfile="kwin/src/window.cpp" bodystart="3291" bodyend="3328"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a4fd6928be07d09893f0ee9df9e015fc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setOnAllActivities</definition>
        <argsstring>(bool all)</argsstring>
        <name>setOnAllActivities</name>
        <qualifiedname>KWin::Window::setOnAllActivities</qualifiedname>
        <param>
          <type>bool</type>
          <declname>all</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>if <computeroutput>all</computeroutput> is true, sets on all activities. if it&apos;s false, sets it to only be on the current activity </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="773" column="10" bodyfile="kwin/src/window.cpp" bodystart="3338" bodyend="3350"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a819092f9968d638a17b8e857e092d0f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::updateActivities</definition>
        <argsstring>(bool includeTransients)</argsstring>
        <name>updateActivities</name>
        <qualifiedname>KWin::Window::updateActivities</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a1446cfc31ada2f5e9ea3f0fca4f41084">updateActivities</reimplementedby>
        <param>
          <type>bool</type>
          <declname>includeTransients</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>update after activities changed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="774" column="18" bodyfile="kwin/src/window.cpp" bodystart="3355" bodyend="3365"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a940ee491c5f1fe9fdb660110ad491804" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::blockActivityUpdates</definition>
        <argsstring>(bool b=true)</argsstring>
        <name>blockActivityUpdates</name>
        <qualifiedname>KWin::Window::blockActivityUpdates</qualifiedname>
        <param>
          <type>bool</type>
          <declname>b</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="775" column="10" bodyfile="kwin/src/window.cpp" bodystart="3367" bodyend="3378"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af4760996e58d03d3cf08cb9a91f06ba6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void KWin::Window::checkActivities</definition>
        <argsstring>()</argsstring>
        <name>checkActivities</name>
        <qualifiedname>KWin::Window::checkActivities</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a11a31f06dd221d1bb1e4c6166ffbeb52">checkActivities</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Refresh <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>&apos;s cache of activites Called when activity daemon status changes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="781" column="18" bodyfile="kwin/src/window.h" bodystart="781" bodyend="781"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a6fb0135b41d4cd0334e127adaa674a81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QString</type>
        <definition>QString KWin::Window::windowRole</definition>
        <argsstring>() const</argsstring>
        <name>windowRole</name>
        <qualifiedname>KWin::Window::windowRole</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a72606d4123b87ef125e96f3f66d11148">windowRole</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_wayland_window_1a8bb289a2b90a2c34a425d013986dd737">windowRole</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1ae2e6e971b045b7eb896cd0e037ccdf3d">windowRole</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="783" column="21" bodyfile="kwin/src/window.cpp" bodystart="360" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ac06a67c2039af8a40589846ae2eb7c9a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::Window::resourceName</definition>
        <argsstring>() const</argsstring>
        <name>resourceName</name>
        <qualifiedname>KWin::Window::resourceName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="784" column="13" bodyfile="kwin/src/window.h" bodystart="2084" bodyend="2087"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a97af0bd7201928fd19d12a0ccbaa9914" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::Window::resourceClass</definition>
        <argsstring>() const</argsstring>
        <name>resourceClass</name>
        <qualifiedname>KWin::Window::resourceClass</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="785" column="13" bodyfile="kwin/src/window.h" bodystart="2089" bodyend="2092"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a65fa8eaf5936ace6355431d739438a3e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::Window::wmClientMachine</definition>
        <argsstring>(bool use_localhost) const</argsstring>
        <name>wmClientMachine</name>
        <qualifiedname>KWin::Window::wmClientMachine</qualifiedname>
        <param>
          <type>bool</type>
          <declname>use_localhost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns client machine for this window, taken either from its window or from the leader window. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="786" column="13" bodyfile="kwin/src/window.cpp" bodystart="163" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a595f871763d11ef27b99d4327d5669fd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_client_machine" kindref="compound">ClientMachine</ref> *</type>
        <definition>ClientMachine * KWin::Window::clientMachine</definition>
        <argsstring>() const</argsstring>
        <name>clientMachine</name>
        <qualifiedname>KWin::Window::clientMachine</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="787" column="19" bodyfile="kwin/src/window.h" bodystart="2094" bodyend="2097"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1abb9526fedfc012f6ad629e79e126af91" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isLocalhost</definition>
        <argsstring>() const</argsstring>
        <name>isLocalhost</name>
        <qualifiedname>KWin::Window::isLocalhost</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_wayland_window_1a3b3ab7da2b888e9c3c29e22f34e7dadf">isLocalhost</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="788" column="18" bodyfile="kwin/src/window.cpp" bodystart="400" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ac21f9e46d7fcddc2b1196ccc928bb763" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>pid_t</type>
        <definition>pid_t KWin::Window::pid</definition>
        <argsstring>() const</argsstring>
        <name>pid</name>
        <qualifiedname>KWin::Window::pid</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_wayland_window_1abbd02c167777070323a87cd19a4da822">pid</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a974270608d37bc8817c9421d7ca8e60e">pid</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="789" column="19" bodyfile="kwin/src/window.cpp" bodystart="314" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af15bc927a7938e696dfcaf8e5ddb20c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::readyForPainting</definition>
        <argsstring>() const</argsstring>
        <name>readyForPainting</name>
        <qualifiedname>KWin::Window::readyForPainting</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="791" column="10" bodyfile="kwin/src/window.h" bodystart="1954" bodyend="1957"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a294f762b7e595263d56cb155330f19fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setOpacity</definition>
        <argsstring>(qreal opacity)</argsstring>
        <name>setOpacity</name>
        <qualifiedname>KWin::Window::setOpacity</qualifiedname>
        <param>
          <type>qreal</type>
          <declname>opacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="792" column="10" bodyfile="kwin/src/window.cpp" bodystart="188" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a41cf2858ec31edde92b788747ddf1177" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>qreal KWin::Window::opacity</definition>
        <argsstring>() const</argsstring>
        <name>opacity</name>
        <qualifiedname>KWin::Window::opacity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="793" column="11" bodyfile="kwin/src/window.cpp" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a39805264749f963ab793849f002df2cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::setupCompositing</definition>
        <argsstring>()</argsstring>
        <name>setupCompositing</name>
        <qualifiedname>KWin::Window::setupCompositing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="794" column="10" bodyfile="kwin/src/window.cpp" bodystart="199" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a7eae1931b3b428d2d59ff49ab95d010c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::finishCompositing</definition>
        <argsstring>()</argsstring>
        <name>finishCompositing</name>
        <qualifiedname>KWin::Window::finishCompositing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="795" column="10" bodyfile="kwin/src/window.cpp" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a680b520607df91ff2ee91be0c33c8736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
        <definition>EffectWindow * KWin::Window::effectWindow</definition>
        <argsstring>()</argsstring>
        <name>effectWindow</name>
        <qualifiedname>KWin::Window::effectWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="796" column="18" bodyfile="kwin/src/window.cpp" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a54880942e05b529132409817d74a84c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
        <definition>const EffectWindow * KWin::Window::effectWindow</definition>
        <argsstring>() const</argsstring>
        <name>effectWindow</name>
        <qualifiedname>KWin::Window::effectWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="797" column="24" bodyfile="kwin/src/window.cpp" bodystart="275" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aa3e58eb3c6ecd544440b973f68921322" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_surface_item" kindref="compound">SurfaceItem</ref> *</type>
        <definition>SurfaceItem * KWin::Window::surfaceItem</definition>
        <argsstring>() const</argsstring>
        <name>surfaceItem</name>
        <qualifiedname>KWin::Window::surfaceItem</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="798" column="17" bodyfile="kwin/src/window.cpp" bodystart="280" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a0094149b3a29d3b0240918e695fdb3fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_window_item" kindref="compound">WindowItem</ref> *</type>
        <definition>WindowItem * KWin::Window::windowItem</definition>
        <argsstring>() const</argsstring>
        <name>windowItem</name>
        <qualifiedname>KWin::Window::windowItem</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="799" column="16" bodyfile="kwin/src/window.h" bodystart="2064" bodyend="2067"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af78348da5a0ad82e99e06f1ca9e64ab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::elevate</definition>
        <argsstring>(bool elevate)</argsstring>
        <name>elevate</name>
        <qualifiedname>KWin::Window::elevate</qualifiedname>
        <param>
          <type>bool</type>
          <declname>elevate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> will be temporarily painted as if being at the top of the stack. Only available if <ref refid="class_k_win_1_1_compositor" kindref="compound">Compositor</ref> is active, if not active, this method is a no-op. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="804" column="10" bodyfile="kwin/src/window.cpp" bodystart="303" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a5fc203455636e9bd840465b05c8905e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_shadow" kindref="compound">Shadow</ref> *</type>
        <definition>Shadow * KWin::Window::shadow</definition>
        <argsstring>() const</argsstring>
        <name>shadow</name>
        <qualifiedname>KWin::Window::shadow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <ref refid="class_k_win_1_1_shadow" kindref="compound">Shadow</ref> associated with this <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> or <computeroutput>null</computeroutput> if it has no shadow. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="809" column="12" bodyfile="kwin/src/window.cpp" bodystart="250" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a5d25daf1a543308b42b9c90d98d7f213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::updateShadow</definition>
        <argsstring>()</argsstring>
        <name>updateShadow</name>
        <qualifiedname>KWin::Window::updateShadow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Updates the <ref refid="class_k_win_1_1_shadow" kindref="compound">Shadow</ref> associated with this <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> from X11 Property. Call this method when the Property changes or Compositing is started. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="814" column="10" bodyfile="kwin/src/window.cpp" bodystart="255" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af71103e065455ef561cc28fdfb23062b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::wantsShadowToBeRendered</definition>
        <argsstring>() const</argsstring>
        <name>wantsShadowToBeRendered</name>
        <qualifiedname>KWin::Window::wantsShadowToBeRendered</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> currently wants the shadow to be rendered. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="818" column="10" bodyfile="kwin/src/window.cpp" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af690c3506cbea89838a3561d78fc028f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::skipsCloseAnimation</definition>
        <argsstring>() const</argsstring>
        <name>skipsCloseAnimation</name>
        <qualifiedname>KWin::Window::skipsCloseAnimation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="820" column="10" bodyfile="kwin/src/window.cpp" bodystart="319" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a67a344bd50e2d01ad45bf9ecc4ddd6e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setSkipCloseAnimation</definition>
        <argsstring>(bool set)</argsstring>
        <name>setSkipCloseAnimation</name>
        <qualifiedname>KWin::Window::setSkipCloseAnimation</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="821" column="10" bodyfile="kwin/src/window.cpp" bodystart="324" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a379c25dec85d7b0aee3b79676327b9b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
        <definition>SurfaceInterface * KWin::Window::surface</definition>
        <argsstring>() const</argsstring>
        <name>surface</name>
        <qualifiedname>KWin::Window::surface</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="823" column="22" bodyfile="kwin/src/window.cpp" bodystart="333" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aa1fb45941f94961dd825e503ace0b7d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setSurface</definition>
        <argsstring>(SurfaceInterface *surface)</argsstring>
        <name>setSurface</name>
        <qualifiedname>KWin::Window::setSurface</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
          <declname>surface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="824" column="10" bodyfile="kwin/src/window.cpp" bodystart="338" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af0d6ef568b401a7e593c0652c66b31b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QMatrix4x4</type>
        <definition>QMatrix4x4 KWin::Window::inputTransformation</definition>
        <argsstring>() const</argsstring>
        <name>inputTransformation</name>
        <qualifiedname>KWin::Window::inputTransformation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Transformation to map from global to window coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="829" column="16" bodyfile="kwin/src/window.cpp" bodystart="365" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aaed4b5db1f86e8e62e77a13197ed987f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::hitTest</definition>
        <argsstring>(const QPointF &amp;point) const</argsstring>
        <name>hitTest</name>
        <qualifiedname>KWin::Window::hitTest</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1af615f793bf3efaeea5ab5f27b9062313">hitTest</reimplementedby>
        <param>
          <type>const QPointF &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the window can accept input at the specified position <emphasis>point</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="834" column="18" bodyfile="kwin/src/window.cpp" bodystart="372" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a09d95d476bf97f7e8913a851c17c88eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool KWin::Window::hasPopupGrab</definition>
        <argsstring>() const</argsstring>
        <name>hasPopupGrab</name>
        <qualifiedname>KWin::Window::hasPopupGrab</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a37d44a5a13bf015bc3f1e60c72685b13">hasPopupGrab</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_popup_window_1a47c869828345964ff15a09eb3a0f73b8">hasPopupGrab</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The window has a popup grab. This means that when it got mapped the parent window had an implicit (pointer) grab.</para>
<para>Normally this is only relevant for transient windows.</para>
<para>Once the popup grab ends (e.g. pointer press outside of any <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> of the client), the method popupDone should be invoked.</para>
<para>The default implementation returns <computeroutput>false</computeroutput>. <simplesect kind="see"><para><ref refid="class_k_win_1_1_window_1ab6bf1e4ac19677d618e6a6c392bb27a1" kindref="member">popupDone</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.10 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="849" column="18" bodyfile="kwin/src/window.h" bodystart="849" bodyend="852"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ab6bf1e4ac19677d618e6a6c392bb27a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void KWin::Window::popupDone</definition>
        <argsstring>()</argsstring>
        <name>popupDone</name>
        <qualifiedname>KWin::Window::popupDone</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a147c0efb19d8587d4caa9a8d94998995">popupDone</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_popup_window_1ad581836ccd6984a226c28abff693c01c">popupDone</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method should be invoked for windows with a popup grab when the grab ends.</para>
<para>The default implementation does nothing. <simplesect kind="see"><para><ref refid="class_k_win_1_1_window_1a09d95d476bf97f7e8913a851c17c88eb" kindref="member">hasPopupGrab</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.10 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="861" column="18" bodyfile="kwin/src/window.h" bodystart="861" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1adade434fb1c46bc5680b97af0b160e4c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QUuid</type>
        <definition>QUuid KWin::Window::internalId</definition>
        <argsstring>() const</argsstring>
        <name>internalId</name>
        <qualifiedname>KWin::Window::internalId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A UUID to uniquely identify this <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> independent of windowing system. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="878" column="11" bodyfile="kwin/src/window.h" bodystart="878" bodyend="881"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af53fc33cb2e1aa0dd500376191484d1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::Window::stackingOrder</definition>
        <argsstring>() const</argsstring>
        <name>stackingOrder</name>
        <qualifiedname>KWin::Window::stackingOrder</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="883" column="9" bodyfile="kwin/src/window.cpp" bodystart="347" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aa4540f347a37695c94ad9264bccb108f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setStackingOrder</definition>
        <argsstring>(int order)</argsstring>
        <name>setStackingOrder</name>
        <qualifiedname>KWin::Window::setStackingOrder</qualifiedname>
        <param>
          <type>int</type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="884" column="10" bodyfile="kwin/src/window.cpp" bodystart="352" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a7a2eadd344658e6ae2ae2ff1d24195fd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::skipSwitcher</definition>
        <argsstring>() const</argsstring>
        <name>skipSwitcher</name>
        <qualifiedname>KWin::Window::skipSwitcher</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="886" column="10" bodyfile="kwin/src/window.h" bodystart="886" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ae740a221f99373e76b5ed57a6edfb5a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setSkipSwitcher</definition>
        <argsstring>(bool set)</argsstring>
        <name>setSkipSwitcher</name>
        <qualifiedname>KWin::Window::setSkipSwitcher</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="890" column="10" bodyfile="kwin/src/window.cpp" bodystart="423" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1afac45df3fbba7e895e8378d325274394" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::skipTaskbar</definition>
        <argsstring>() const</argsstring>
        <name>skipTaskbar</name>
        <qualifiedname>KWin::Window::skipTaskbar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="892" column="10" bodyfile="kwin/src/window.h" bodystart="892" bodyend="895"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a02ce5273a16265b92513c1d6f5ca16ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setSkipTaskbar</definition>
        <argsstring>(bool set)</argsstring>
        <name>setSkipTaskbar</name>
        <qualifiedname>KWin::Window::setSkipTaskbar</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="896" column="10" bodyfile="kwin/src/window.cpp" bodystart="451" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a42e28c55648d7fbd21d164b14d889dea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setOriginalSkipTaskbar</definition>
        <argsstring>(bool set)</argsstring>
        <name>setOriginalSkipTaskbar</name>
        <qualifiedname>KWin::Window::setOriginalSkipTaskbar</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="897" column="10" bodyfile="kwin/src/window.cpp" bodystart="462" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a05dee36ed06739092162ef6425fe0d84" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::originalSkipTaskbar</definition>
        <argsstring>() const</argsstring>
        <name>originalSkipTaskbar</name>
        <qualifiedname>KWin::Window::originalSkipTaskbar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="898" column="10" bodyfile="kwin/src/window.h" bodystart="898" bodyend="901"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1acd9a44ca4a51baec98cd28279f2c8aa4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::skipPager</definition>
        <argsstring>() const</argsstring>
        <name>skipPager</name>
        <qualifiedname>KWin::Window::skipPager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="903" column="10" bodyfile="kwin/src/window.h" bodystart="903" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a9511f02ec7549d4520c56cc8e71341ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setSkipPager</definition>
        <argsstring>(bool set)</argsstring>
        <name>setSkipPager</name>
        <qualifiedname>KWin::Window::setSkipPager</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="907" column="10" bodyfile="kwin/src/window.cpp" bodystart="435" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ad72a56a6d75f77ed9bfc074b8d575e0d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const QIcon &amp;</type>
        <definition>const QIcon &amp; KWin::Window::icon</definition>
        <argsstring>() const</argsstring>
        <name>icon</name>
        <qualifiedname>KWin::Window::icon</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="909" column="17" bodyfile="kwin/src/window.h" bodystart="909" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a8466be38391212ef29a4c880506eb069" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isActive</definition>
        <argsstring>() const</argsstring>
        <name>isActive</name>
        <qualifiedname>KWin::Window::isActive</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="914" column="10" bodyfile="kwin/src/window.h" bodystart="914" bodyend="917"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1afc8d12b9a719a163f5f862a79e515465" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setActive</definition>
        <argsstring>(bool)</argsstring>
        <name>setActive</name>
        <qualifiedname>KWin::Window::setActive</qualifiedname>
        <param>
          <type>bool</type>
          <defname>act</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the window&apos;s active state to <emphasis>act</emphasis>.</para>
<para>This function does only change the visual appearance of the window, it does not change the focus setting. Use Workspace::activateClient() or <ref refid="class_k_win_1_1_workspace_1abb14aa92b6473b4e8e06388d34460b90" kindref="member">Workspace::requestFocus()</ref> instead.</para>
<para>If a window receives or looses the focus, it calls <ref refid="class_k_win_1_1_window_1afc8d12b9a719a163f5f862a79e515465" kindref="member">setActive()</ref> on its own. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="928" column="10" bodyfile="kwin/src/window.cpp" bodystart="482" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a6155a361d4ffdb58f5e2a006354b46a2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::keepAbove</definition>
        <argsstring>() const</argsstring>
        <name>keepAbove</name>
        <qualifiedname>KWin::Window::keepAbove</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="930" column="10" bodyfile="kwin/src/window.h" bodystart="930" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1afc24b8209fd3821a0b706667d7b97847" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setKeepAbove</definition>
        <argsstring>(bool)</argsstring>
        <name>setKeepAbove</name>
        <qualifiedname>KWin::Window::setKeepAbove</qualifiedname>
        <param>
          <type>bool</type>
          <defname>b</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="934" column="10" bodyfile="kwin/src/window.cpp" bodystart="610" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aceec67e914c48c0dd7e678db07907a59" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::keepBelow</definition>
        <argsstring>() const</argsstring>
        <name>keepBelow</name>
        <qualifiedname>KWin::Window::keepBelow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="935" column="10" bodyfile="kwin/src/window.h" bodystart="935" bodyend="938"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a10220e62a04571d571a0950fb657b2d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setKeepBelow</definition>
        <argsstring>(bool)</argsstring>
        <name>setKeepBelow</name>
        <qualifiedname>KWin::Window::setKeepBelow</qualifiedname>
        <param>
          <type>bool</type>
          <defname>b</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="939" column="10" bodyfile="kwin/src/window.cpp" bodystart="631" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a2d638a5cbb6a91a00b5a5c14c9694888" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::demandAttention</definition>
        <argsstring>(bool set=true)</argsstring>
        <name>demandAttention</name>
        <qualifiedname>KWin::Window::demandAttention</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="941" column="10" bodyfile="kwin/src/window.cpp" bodystart="690" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a3d04ecc04772333222a02d8ac41856f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isDemandingAttention</definition>
        <argsstring>() const</argsstring>
        <name>isDemandingAttention</name>
        <qualifiedname>KWin::Window::isDemandingAttention</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="942" column="10" bodyfile="kwin/src/window.h" bodystart="942" bodyend="945"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aae37a8d1ea78997edb9c87bb12e44401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::cancelAutoRaise</definition>
        <argsstring>()</argsstring>
        <name>cancelAutoRaise</name>
        <qualifiedname>KWin::Window::cancelAutoRaise</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="947" column="10" bodyfile="kwin/src/window.cpp" bodystart="661" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a29aa4e9445d651a8ad460def78d9a9eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::Window::caption</definition>
        <argsstring>() const</argsstring>
        <name>caption</name>
        <qualifiedname>KWin::Window::caption</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The caption consisting of captionNormal and captionSuffix </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_window_1af3efc82546fdf210e4136a4e0d7b1a46" kindref="member">captionNormal</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_window_1a5f87d4992170acf48102a02db67279f0" kindref="member">captionSuffix</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="954" column="13" bodyfile="kwin/src/window.cpp" bodystart="3224" bodyend="3232"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a92233974ab2cf30d74e585daabcc3782" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>QString</type>
        <definition>virtual QString KWin::Window::captionNormal</definition>
        <argsstring>() const =0</argsstring>
        <name>captionNormal</name>
        <qualifiedname>KWin::Window::captionNormal</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1acf534a981c57fc7d69b58d342e6da8b3">captionNormal</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_wayland_window_1a90a49348e71ee0c15beca11ab355fabd">captionNormal</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a7e486d52b96037445ac64672e741b0da">captionNormal</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The caption as set by the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> without any suffix. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_window_1a9a91fff09e5795dce9c1732082ff09b4" kindref="member">caption</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_window_1a5f87d4992170acf48102a02db67279f0" kindref="member">captionSuffix</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="960" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a5f87d4992170acf48102a02db67279f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>QString</type>
        <definition>virtual QString KWin::Window::captionSuffix</definition>
        <argsstring>() const =0</argsstring>
        <name>captionSuffix</name>
        <qualifiedname>KWin::Window::captionSuffix</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1abc21acaf87a1a076fa700c15eaecdd89">captionSuffix</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_wayland_window_1a359132af6ae75b55d766656fa10911b3">captionSuffix</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1aab38daa11733395704738f79e0b7b60d">captionSuffix</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The suffix added to the caption (e.g. shortcut, machine name, etc.) </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_window_1a9a91fff09e5795dce9c1732082ff09b4" kindref="member">caption</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_window_1af3efc82546fdf210e4136a4e0d7b1a46" kindref="member">captionNormal</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="966" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a1aae947c69f1f83740db61c11d5524c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isPlaceable</definition>
        <argsstring>() const</argsstring>
        <name>isPlaceable</name>
        <qualifiedname>KWin::Window::isPlaceable</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_input_panel_v1_window_1af8d62e3fd997ce0a28ed229c37ea73b0">isPlaceable</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a19b9ddb003b875d5ce3e3c51ea7e98f3">isPlaceable</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_layer_shell_v1_window_1a4a0523ff4b8b3c0a1ce4ae0855cafc05">isPlaceable</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a8b2b0d4041419272e9cf2cd960836a55">isPlaceable</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="967" column="18" bodyfile="kwin/src/window.cpp" bodystart="4432" bodyend="4435"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a968b72b00f5b592dc1c61359a760ddf9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool KWin::Window::isCloseable</definition>
        <argsstring>() const =0</argsstring>
        <name>isCloseable</name>
        <qualifiedname>KWin::Window::isCloseable</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_input_panel_v1_window_1a23f48e3beed7287ae7677179a9d2816a">isCloseable</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a3ce1cc4d926cd552a5f7d4bc4855835f">isCloseable</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_layer_shell_v1_window_1a636dc776af292b79d2504bb2fcf98a8e">isCloseable</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a5f7b5e65052844f25f1efcc0ebf150d4">isCloseable</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_popup_window_1a6f72d9421a31db014b7944a5dc9769d8">isCloseable</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a2fd124a718e1bda180f22f96d1271b37">isCloseable</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="968" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aed48d73c0d33bd1134f6c0b48104030d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isShown</definition>
        <argsstring>() const</argsstring>
        <name>isShown</name>
        <qualifiedname>KWin::Window::isShown</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="969" column="10" bodyfile="kwin/src/window.cpp" bodystart="4614" bodyend="4617"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a4eb66b6e398d1fecaf5a18adfcd5d621" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isHidden</definition>
        <argsstring>() const</argsstring>
        <name>isHidden</name>
        <qualifiedname>KWin::Window::isHidden</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="970" column="10" bodyfile="kwin/src/window.cpp" bodystart="4619" bodyend="4622"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a5af4007f99eb32f7091d32d3331b0e7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setHidden</definition>
        <argsstring>(bool hidden)</argsstring>
        <name>setHidden</name>
        <qualifiedname>KWin::Window::setHidden</qualifiedname>
        <param>
          <type>bool</type>
          <declname>hidden</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="971" column="10" bodyfile="kwin/src/window.cpp" bodystart="4624" bodyend="4635"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ac07f6126d0cbaa1688090ceadefe5ded" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isHiddenByShowDesktop</definition>
        <argsstring>() const</argsstring>
        <name>isHiddenByShowDesktop</name>
        <qualifiedname>KWin::Window::isHiddenByShowDesktop</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="972" column="10" bodyfile="kwin/src/window.cpp" bodystart="4637" bodyend="4640"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a4c76c5f07d75a4f427466a9a6db35ef9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setHiddenByShowDesktop</definition>
        <argsstring>(bool hidden)</argsstring>
        <name>setHiddenByShowDesktop</name>
        <qualifiedname>KWin::Window::setHiddenByShowDesktop</qualifiedname>
        <param>
          <type>bool</type>
          <declname>hidden</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="973" column="10" bodyfile="kwin/src/window.cpp" bodystart="4642" bodyend="4649"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ac49252173ad8460fec752ffb4f74824d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
        <definition>Window * KWin::Window::findModal</definition>
        <argsstring>() const</argsstring>
        <name>findModal</name>
        <qualifiedname>KWin::Window::findModal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="974" column="12" bodyfile="kwin/src/window.cpp" bodystart="2366" bodyend="2380"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a9c9cc0a66b183a2777a997e351a4c7cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isTransient</definition>
        <argsstring>() const</argsstring>
        <name>isTransient</name>
        <qualifiedname>KWin::Window::isTransient</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a30e74c044caf63f869473d6b8648f506">isTransient</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_popup_window_1a9afcb47c107a9b3a405850d9461f3fee">isTransient</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a8119bd542bdaeb2f0b3a7b18c053a02b">isTransient</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="975" column="18" bodyfile="kwin/src/window.cpp" bodystart="2382" bodyend="2385"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a5423508a43c9fbdadadb2a7a168a35b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::hasTransientPlacementHint</definition>
        <argsstring>() const</argsstring>
        <name>hasTransientPlacementHint</name>
        <qualifiedname>KWin::Window::hasTransientPlacementHint</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_xdg_popup_window_1ac9a7227a30008c373a0ad4f18728393f">hasTransientPlacementHint</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether there is a hint available to place the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> on it&apos;s parent, default <computeroutput>false</computeroutput>. </para>
</simplesect>
<simplesect kind="see"><para>transientPlacementHint </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="980" column="18" bodyfile="kwin/src/window.cpp" bodystart="2315" bodyend="2318"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aca310d8070ce3c28a5bac7694fb2cecb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::transientPlacement</definition>
        <argsstring>() const</argsstring>
        <name>transientPlacement</name>
        <qualifiedname>KWin::Window::transientPlacement</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_xdg_popup_window_1a021614098508de61987b74afd84a71fe">transientPlacement</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Only valid id hasTransientPlacementHint is true <simplesect kind="return"><para>The position the transient wishes to position itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="985" column="20" bodyfile="kwin/src/window.cpp" bodystart="2320" bodyend="2324"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a5cc3ca21e54ffca6d3749abf53b1f800" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
        <definition>const Window * KWin::Window::transientFor</definition>
        <argsstring>() const</argsstring>
        <name>transientFor</name>
        <qualifiedname>KWin::Window::transientFor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="986" column="18" bodyfile="kwin/src/window.cpp" bodystart="2305" bodyend="2308"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a190d7fcd03d1b3c3b3133f9560acfa01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
        <definition>Window * KWin::Window::transientFor</definition>
        <argsstring>()</argsstring>
        <name>transientFor</name>
        <qualifiedname>KWin::Window::transientFor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="987" column="12"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a3e742583c3124dbcc14d7f1ca800fe29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setTransientFor</definition>
        <argsstring>(Window *transientFor)</argsstring>
        <name>setTransientFor</name>
        <qualifiedname>KWin::Window::setTransientFor</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>transientFor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="988" column="10" bodyfile="kwin/src/window.cpp" bodystart="2292" bodyend="2303"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a982612832a19feb2f1d3d2e354a42fd8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::hasTransient</definition>
        <argsstring>(const Window *transient, bool indirect) const</argsstring>
        <name>hasTransient</name>
        <qualifiedname>KWin::Window::hasTransient</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a07961b2f4f6ecf9840d8d748b5cfa120">hasTransient</reimplementedby>
        <param>
          <type>const <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>transient</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>indirect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if transient is the transient_for window for this window, or recursively the transient_for window </para>
</simplesect>
<xrefsect id="todo_1_todo000009"><xreftitle>Todo</xreftitle><xrefdescription><para>: remove boolean trap </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="994" column="18" bodyfile="kwin/src/window.cpp" bodystart="2326" bodyend="2329"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1afb0480dda58c4c07e6bf7d2100b7b29e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const QList&lt; <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> * &gt; &amp;</type>
        <definition>const QList&lt; Window * &gt; &amp; KWin::Window::transients</definition>
        <argsstring>() const</argsstring>
        <name>transients</name>
        <qualifiedname>KWin::Window::transients</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="995" column="17" bodyfile="kwin/src/window.h" bodystart="2125" bodyend="2128"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af1548a0423bb576776f96aee0d3847fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::addTransient</definition>
        <argsstring>(Window *transient)</argsstring>
        <name>addTransient</name>
        <qualifiedname>KWin::Window::addTransient</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a1dd1bd6243e8e9c5463903193049c086">addTransient</reimplementedby>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>transient</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="996" column="18" bodyfile="kwin/src/window.cpp" bodystart="2411" bodyend="2419"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a660daf739fe1a2d1a2280599f526635c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::removeTransient</definition>
        <argsstring>(Window *transient)</argsstring>
        <name>removeTransient</name>
        <qualifiedname>KWin::Window::removeTransient</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>transient</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="997" column="18" bodyfile="kwin/src/window.cpp" bodystart="2421" bodyend="2428"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a35e79a166a5640473b24800e1a7e13cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::removeTransientFromList</definition>
        <argsstring>(Window *cl)</argsstring>
        <name>removeTransientFromList</name>
        <qualifiedname>KWin::Window::removeTransientFromList</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>cl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="998" column="10" bodyfile="kwin/src/window.cpp" bodystart="2430" bodyend="2433"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1afaea2549a9bde1616f1c0491a340ad64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> * &gt;</type>
        <definition>QList&lt; Window * &gt; KWin::Window::mainWindows</definition>
        <argsstring>() const</argsstring>
        <name>mainWindows</name>
        <qualifiedname>KWin::Window::mainWindows</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a0b9273d4b5cbb939568096e8a73db60e">mainWindows</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="999" column="19" bodyfile="kwin/src/window.cpp" bodystart="2331" bodyend="2337"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a631797f76ba2b3af0cbcbc74b060e8ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> * &gt;</type>
        <definition>QList&lt; Window * &gt; KWin::Window::allMainWindows</definition>
        <argsstring>() const</argsstring>
        <name>allMainWindows</name>
        <qualifiedname>KWin::Window::allMainWindows</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1000" column="11" bodyfile="kwin/src/window.cpp" bodystart="2339" bodyend="2346"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a26bdcce1a00f8b7a1c1401b5bf132874" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isSpecialWindow</definition>
        <argsstring>() const</argsstring>
        <name>isSpecialWindow</name>
        <qualifiedname>KWin::Window::isSpecialWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true for &quot;special&quot; windows and false for windows which are &quot;normal&quot; (normal=window which has a border, can be moved by the user, can be closed, etc.) true for Desktop, Dock, Splash, Override and TopMenu (and Toolbar??? - for now) false for Normal, Dialog, Utility and Menu (and Toolbar??? - not yet) TODO </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1007" column="10" bodyfile="kwin/src/window.cpp" bodystart="684" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a43d064a134863a34bfe5956f21a35641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::sendToOutput</definition>
        <argsstring>(Output *output)</argsstring>
        <name>sendToOutput</name>
        <qualifiedname>KWin::Window::sendToOutput</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1008" column="10" bodyfile="kwin/src/window.cpp" bodystart="3981" bodyend="4023"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1adf86e393b2358d840cbe8d4b6870193b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const QKeySequence &amp;</type>
        <definition>const QKeySequence &amp; KWin::Window::shortcut</definition>
        <argsstring>() const</argsstring>
        <name>shortcut</name>
        <qualifiedname>KWin::Window::shortcut</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1009" column="24" bodyfile="kwin/src/window.h" bodystart="1009" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ae45b3db3780c6b8ed8eab2b87a1031aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setShortcut</definition>
        <argsstring>(const QString &amp;cut)</argsstring>
        <name>setShortcut</name>
        <qualifiedname>KWin::Window::setShortcut</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>cut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1013" column="10" bodyfile="kwin/src/useractions.cpp" bodystart="1738" bodyend="1800"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ad97233455cde3594215a551becc5fb00" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::iconGeometry</definition>
        <argsstring>() const</argsstring>
        <name>iconGeometry</name>
        <qualifiedname>KWin::Window::iconGeometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1015" column="12" bodyfile="kwin/src/window.cpp" bodystart="2998" bodyend="3033"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a2020d42e4c3f51da3bcec8cfdc632f86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setMinimized</definition>
        <argsstring>(bool set)</argsstring>
        <name>setMinimized</name>
        <qualifiedname>KWin::Window::setMinimized</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1017" column="10" bodyfile="kwin/src/window.cpp" bodystart="960" bodyend="976"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a7ee9515027aa5076af42776c20b3a4a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isMinimized</definition>
        <argsstring>() const</argsstring>
        <name>isMinimized</name>
        <qualifiedname>KWin::Window::isMinimized</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1018" column="10" bodyfile="kwin/src/window.h" bodystart="1018" bodyend="1021"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a0265481eb235342664f27f47dafbc2d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isMinimizable</definition>
        <argsstring>() const</argsstring>
        <name>isMinimizable</name>
        <qualifiedname>KWin::Window::isMinimizable</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a7dafba5edb390a4ff2f8ef2eca77df42">isMinimizable</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1ae80466b250ae7b03971b0622088ce3c2">isMinimizable</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> can be minimized; otherwise <computeroutput>false</computeroutput>.</para>
<para>Default implementation returns <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1022" column="18" bodyfile="kwin/src/window.cpp" bodystart="4347" bodyend="4350"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1afc0da6efe05a813f7c8e5e4fdded0824" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isSuspended</definition>
        <argsstring>() const</argsstring>
        <name>isSuspended</name>
        <qualifiedname>KWin::Window::isSuspended</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1024" column="10" bodyfile="kwin/src/window.cpp" bodystart="4651" bodyend="4654"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a6e70d5ab3f900d20cc2bf67fa3b0c7ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setSuspended</definition>
        <argsstring>(bool suspended)</argsstring>
        <name>setSuspended</name>
        <qualifiedname>KWin::Window::setSuspended</qualifiedname>
        <param>
          <type>bool</type>
          <declname>suspended</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1025" column="10" bodyfile="kwin/src/window.cpp" bodystart="4656" bodyend="4665"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aafa6825cf1306da791fa827c4ba98006" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::fullscreenGeometryRestore</definition>
        <argsstring>() const</argsstring>
        <name>fullscreenGeometryRestore</name>
        <qualifiedname>KWin::Window::fullscreenGeometryRestore</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1027" column="12" bodyfile="kwin/src/window.cpp" bodystart="4280" bodyend="4283"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aa475aaf802327aabba57f3c9404a34d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setFullscreenGeometryRestore</definition>
        <argsstring>(const QRectF &amp;geom)</argsstring>
        <name>setFullscreenGeometryRestore</name>
        <qualifiedname>KWin::Window::setFullscreenGeometryRestore</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1028" column="10" bodyfile="kwin/src/window.cpp" bodystart="4285" bodyend="4291"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a4f27ecb2b1e34b8c0d188b2a677b4d04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isFullScreenable</definition>
        <argsstring>() const</argsstring>
        <name>isFullScreenable</name>
        <qualifiedname>KWin::Window::isFullScreenable</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a031295bc7fb1dd7e6752b29cec3c9472">isFullScreenable</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a6d5d130abb6759559ee33800395c3b31">isFullScreenable</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> can be shown in full screen mode; otherwise <computeroutput>false</computeroutput>.</para>
<para>Default implementation returns <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1029" column="18" bodyfile="kwin/src/window.cpp" bodystart="4298" bodyend="4301"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af68e2698e10f68963734220af029279f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isFullScreen</definition>
        <argsstring>() const</argsstring>
        <name>isFullScreen</name>
        <qualifiedname>KWin::Window::isFullScreen</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1ae5b462a986c3efa84fa3c566cc9b985e">isFullScreen</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a9ac4f408275feb88a36741d4e1991d65">isFullScreen</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> is currently being shown in full screen mode; otherwise <computeroutput>false</computeroutput>.</para>
<para>A window in full screen mode occupies the entire screen with no window frame around it.</para>
<para>Default implementation returns <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1030" column="18" bodyfile="kwin/src/window.cpp" bodystart="4310" bodyend="4313"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a4b695bf258e4c855a72d9c832e0ae4b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isRequestedFullScreen</definition>
        <argsstring>() const</argsstring>
        <name>isRequestedFullScreen</name>
        <qualifiedname>KWin::Window::isRequestedFullScreen</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a3d6f1296d8a2df671527e8e45f6726f9">isRequestedFullScreen</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1031" column="18" bodyfile="kwin/src/window.cpp" bodystart="4315" bodyend="4318"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a5f16d2ea8d86a8b9e94c2461d4dbb9c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::setFullScreen</definition>
        <argsstring>(bool set)</argsstring>
        <name>setFullScreen</name>
        <qualifiedname>KWin::Window::setFullScreen</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a2f48fc29406a12f659c62e25709e81a9">setFullScreen</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1aa193ff8c7b388d3701d644e471b598de">setFullScreen</reimplementedby>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Asks the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> to enter or leave full screen mode.</para>
<para>Default implementation does nothing.</para>
<para><computeroutput>set</computeroutput> <computeroutput>true</computeroutput> if the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> has to be shown in full screen mode, otherwise <computeroutput>false</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1032" column="18" bodyfile="kwin/src/window.cpp" bodystart="4327" bodyend="4330"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a477d5b4eb6907302d98c654bb940c9ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::wantsAdaptiveSync</definition>
        <argsstring>() const</argsstring>
        <name>wantsAdaptiveSync</name>
        <qualifiedname>KWin::Window::wantsAdaptiveSync</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1034" column="10" bodyfile="kwin/src/window.cpp" bodystart="4332" bodyend="4335"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a0f44df53bb213a357ea967843c94db67" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::wantsTearing</definition>
        <argsstring>(bool tearingRequested) const</argsstring>
        <name>wantsTearing</name>
        <qualifiedname>KWin::Window::wantsTearing</qualifiedname>
        <param>
          <type>bool</type>
          <declname>tearingRequested</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1035" column="10" bodyfile="kwin/src/window.cpp" bodystart="4337" bodyend="4340"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a5f94086b4bce785556425c530c59dbaf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::geometryRestore</definition>
        <argsstring>() const</argsstring>
        <name>geometryRestore</name>
        <qualifiedname>KWin::Window::geometryRestore</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the geometry of the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> before it was maximized or quick tiled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1037" column="12" bodyfile="kwin/src/window.cpp" bodystart="4387" bodyend="4390"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a9372354c3330f992f28ca6e6fb22d700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setGeometryRestore</definition>
        <argsstring>(const QRectF &amp;rect)</argsstring>
        <name>setGeometryRestore</name>
        <qualifiedname>KWin::Window::setGeometryRestore</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the geometry of the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> before it was maximized or quick tiled to <computeroutput>rect</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1038" column="10" bodyfile="kwin/src/window.cpp" bodystart="4395" bodyend="4401"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aa63a6139d1d83641d1e6d1617da0406d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isMaximizable</definition>
        <argsstring>() const</argsstring>
        <name>isMaximizable</name>
        <qualifiedname>KWin::Window::isMaximizable</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a1ef7085c0c0cf02938b8bbc1dedb3866">isMaximizable</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1aa688daa749151be8daefe9bac43211a6">isMaximizable</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> can be maximized; otherwise <computeroutput>false</computeroutput>.</para>
<para>Default implementation returns <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1039" column="18" bodyfile="kwin/src/window.cpp" bodystart="4357" bodyend="4360"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a1ca68b36bcceffd514324fe97b3bab11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9" kindref="member">MaximizeMode</ref></type>
        <definition>MaximizeMode KWin::Window::maximizeMode</definition>
        <argsstring>() const</argsstring>
        <name>maximizeMode</name>
        <qualifiedname>KWin::Window::maximizeMode</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1ac6190e05ee7c40de52a3a853f4df410a">maximizeMode</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1ab752658ba7c4b5031bf9615f8a0e538e">maximizeMode</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the currently applied maximize mode.</para>
<para>Default implementation returns MaximizeRestore. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1040" column="26" bodyfile="kwin/src/window.cpp" bodystart="4367" bodyend="4370"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1acf3e2b244a1f328009073204ff50f5ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9" kindref="member">MaximizeMode</ref></type>
        <definition>MaximizeMode KWin::Window::requestedMaximizeMode</definition>
        <argsstring>() const</argsstring>
        <name>requestedMaximizeMode</name>
        <qualifiedname>KWin::Window::requestedMaximizeMode</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a3a1be822961ddfb7007459cec2795852">requestedMaximizeMode</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the last requested maximize mode.</para>
<para>On X11, this method always matches <ref refid="class_k_win_1_1_window_1aacb57e092c7155d3745e3964c7745ba3" kindref="member">maximizeMode()</ref>. On <ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref>, it is asynchronous.</para>
<para>Default implementation matches <ref refid="class_k_win_1_1_window_1aacb57e092c7155d3745e3964c7745ba3" kindref="member">maximizeMode()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1041" column="26" bodyfile="kwin/src/window.cpp" bodystart="4379" bodyend="4382"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a513849e778f44172f57dceebf94cadd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::maximize</definition>
        <argsstring>(MaximizeMode mode, const QRectF &amp;restore=QRectF())</argsstring>
        <name>maximize</name>
        <qualifiedname>KWin::Window::maximize</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a4e215498a2a89848ba5b6aa7e4fd56db">maximize</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1ae6be400e16c9cb8d5d1070e4494068c1">maximize</reimplementedby>
        <param>
          <type><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9" kindref="member">MaximizeMode</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>restore</declname>
          <defval>QRectF()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1042" column="18" bodyfile="kwin/src/window.cpp" bodystart="1121" bodyend="1124"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a0c0c85ab71928ebce12edcfd33c64b0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_INVOKABLE void</type>
        <definition>void KWin::Window::setMaximize</definition>
        <argsstring>(bool vertically, bool horizontally, const QRectF &amp;restore=QRectF())</argsstring>
        <name>setMaximize</name>
        <qualifiedname>KWin::Window::setMaximize</qualifiedname>
        <param>
          <type>bool</type>
          <declname>vertically</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>horizontally</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>restore</declname>
          <defval>QRectF()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the maximization according to <computeroutput>vertically</computeroutput> and <computeroutput>horizontally</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1046" column="22" bodyfile="kwin/src/window.cpp" bodystart="1126" bodyend="1137"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ac10c709b4624c0aef3b4f2f8cc57427b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QPalette</type>
        <definition>QPalette KWin::Window::palette</definition>
        <argsstring>()</argsstring>
        <name>palette</name>
        <qualifiedname>KWin::Window::palette</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1048" column="14" bodyfile="kwin/src/window.cpp" bodystart="982" bodyend="986"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a9821bc14a848cb3f210c43c160fe8e80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_k_win_1_1_decoration_1_1_decoration_palette" kindref="compound">Decoration::DecorationPalette</ref> *</type>
        <definition>const Decoration::DecorationPalette * KWin::Window::decorationPalette</definition>
        <argsstring>()</argsstring>
        <name>decorationPalette</name>
        <qualifiedname>KWin::Window::decorationPalette</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1049" column="41" bodyfile="kwin/src/window.cpp" bodystart="988" bodyend="992"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aca7dbc7f62bb563afea5583e128a4afb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool KWin::Window::isResizable</definition>
        <argsstring>() const =0</argsstring>
        <name>isResizable</name>
        <qualifiedname>KWin::Window::isResizable</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_input_panel_v1_window_1aa76c205f2c7b3d95bb18f401e16fa45d">isResizable</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a003b452ff2fcb614ef9862d2bb95a004">isResizable</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_layer_shell_v1_window_1a73f4b6e488724a96dc8470fdb75aabf5">isResizable</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1ad26ea1c81f61a38f6652edc5212f32e5">isResizable</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_popup_window_1a8b75223fe132feed5ae03fcfd077fd76">isResizable</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1ab9b0f188687d1082fa92977ded69a459">isResizable</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is resizable or has a fixed size. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1054" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a8ebfa3b947306e5cdd3b1db42a1dc601" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool KWin::Window::isMovable</definition>
        <argsstring>() const =0</argsstring>
        <name>isMovable</name>
        <qualifiedname>KWin::Window::isMovable</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_input_panel_v1_window_1a3d0f788cba123e8010294c0b6b60d89b">isMovable</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a9ad9f9d92b7bc5b15d8449bace0a6700">isMovable</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_layer_shell_v1_window_1acf45c816e3c5bde804af01930a9e4081">isMovable</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1af6f8e4a552926fe7968147d02b5ba732">isMovable</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_popup_window_1a2dce4564375df62284cd1bdad0491f13">isMovable</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a4806f7d9dccc9ec56eaa773eb303fbf7">isMovable</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is moveable or has a fixed position. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1058" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a61015d9b343ba6b5a7107caa4169bb51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool KWin::Window::isMovableAcrossScreens</definition>
        <argsstring>() const =0</argsstring>
        <name>isMovableAcrossScreens</name>
        <qualifiedname>KWin::Window::isMovableAcrossScreens</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_input_panel_v1_window_1a3c37741a52c8e4f973fc14266db1632b">isMovableAcrossScreens</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a339329dc1bc74ab7c557dc851c1d83b6">isMovableAcrossScreens</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_layer_shell_v1_window_1abea47b99b0b71d3ebf961a0b667e45c1">isMovableAcrossScreens</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a01dc71b0fcf03387727e17aa70fbed15">isMovableAcrossScreens</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_popup_window_1a9d68d7bc4c9b031c85447f676de0c184">isMovableAcrossScreens</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1accef91c25c26300e3329721074779717">isMovableAcrossScreens</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window can be moved to another screen. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1062" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a3dfd89167d57f28ebedf72ffddd33191" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isShade</definition>
        <argsstring>() const</argsstring>
        <name>isShade</name>
        <qualifiedname>KWin::Window::isShade</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the window is shaded and shadeMode is <computeroutput>ShadeNormal</computeroutput>; otherwise returns <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1067" column="10" bodyfile="kwin/src/window.h" bodystart="1067" bodyend="1070"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1abfa6caaf2d5624a4cdd2b49d20ed228c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1a14799797d985d6375dd7684fff01585f" kindref="member">ShadeMode</ref></type>
        <definition>ShadeMode KWin::Window::shadeMode</definition>
        <argsstring>() const</argsstring>
        <name>shadeMode</name>
        <qualifiedname>KWin::Window::shadeMode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1071" column="15" bodyfile="kwin/src/window.cpp" bodystart="830" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a14232d4a0703db154fc0f506be5a675a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setShade</definition>
        <argsstring>(bool set)</argsstring>
        <name>setShade</name>
        <qualifiedname>KWin::Window::setShade</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1072" column="10" bodyfile="kwin/src/window.cpp" bodystart="840" bodyend="843"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a9c807f93f16ca3869027ea6cc511c5e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setShade</definition>
        <argsstring>(ShadeMode mode)</argsstring>
        <name>setShade</name>
        <qualifiedname>KWin::Window::setShade</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a14799797d985d6375dd7684fff01585f" kindref="member">ShadeMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1073" column="10" bodyfile="kwin/src/window.cpp" bodystart="845" bodyend="878"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a2728eed3519284ca4c11ceeb944033bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::toggleShade</definition>
        <argsstring>()</argsstring>
        <name>toggleShade</name>
        <qualifiedname>KWin::Window::toggleShade</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1074" column="10" bodyfile="kwin/src/window.cpp" bodystart="923" bodyend="927"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a58c27d98b0edb3a6d0afb7fdf3882c39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::cancelShadeHoverTimer</definition>
        <argsstring>()</argsstring>
        <name>cancelShadeHoverTimer</name>
        <qualifiedname>KWin::Window::cancelShadeHoverTimer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1075" column="10" bodyfile="kwin/src/window.cpp" bodystart="917" bodyend="921"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1abf1e1de77c7a5e7707f1fcc2ed13db58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isShadeable</definition>
        <argsstring>() const</argsstring>
        <name>isShadeable</name>
        <qualifiedname>KWin::Window::isShadeable</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a44a0e3ebe485da6063063850e55127c0">isShadeable</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> can be shaded. Default implementation returns <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1079" column="18" bodyfile="kwin/src/window.cpp" bodystart="835" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aab8020efbe1a1ddc2934570b9701d0c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_k_win_1_1_window_rules" kindref="compound">WindowRules</ref> *</type>
        <definition>const WindowRules * KWin::Window::rules</definition>
        <argsstring>() const</argsstring>
        <name>rules</name>
        <qualifiedname>KWin::Window::rules</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1081" column="23" bodyfile="kwin/src/window.h" bodystart="1081" bodyend="1084"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af8b11c559566d839b7665662b6d561a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::removeRule</definition>
        <argsstring>(Rules *r)</argsstring>
        <name>removeRule</name>
        <qualifiedname>KWin::Window::removeRule</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_rules" kindref="compound">Rules</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1085" column="10" bodyfile="kwin/src/window.cpp" bodystart="4452" bodyend="4455"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a91b2a6bd8ffbc9b12bf7e0dd7e93b4dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setupWindowRules</definition>
        <argsstring>()</argsstring>
        <name>setupWindowRules</name>
        <qualifiedname>KWin::Window::setupWindowRules</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1086" column="10" bodyfile="kwin/src/window.cpp" bodystart="4463" bodyend="4468"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1afc19a299627232cd2f497ff1c91772b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::finishWindowRules</definition>
        <argsstring>()</argsstring>
        <name>finishWindowRules</name>
        <qualifiedname>KWin::Window::finishWindowRules</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1087" column="10" bodyfile="kwin/src/window.cpp" bodystart="4478" bodyend="4483"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a5cab226e8c1d5f137f85aa3135e959cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::evaluateWindowRules</definition>
        <argsstring>()</argsstring>
        <name>evaluateWindowRules</name>
        <qualifiedname>KWin::Window::evaluateWindowRules</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1088" column="10" bodyfile="kwin/src/window.cpp" bodystart="4457" bodyend="4461"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a6ee345225d453923e318c8344b86217f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::updateWindowRules</definition>
        <argsstring>(Rules::Types selection)</argsstring>
        <name>updateWindowRules</name>
        <qualifiedname>KWin::Window::updateWindowRules</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a596570835e18830ab4d15180190debc5">updateWindowRules</reimplementedby>
        <param>
          <type>Rules::Types</type>
          <declname>selection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1089" column="18" bodyfile="kwin/src/window.cpp" bodystart="4470" bodyend="4476"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a6ef20caeaf3db7a7bfc594b2b59e5797" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::applyWindowRules</definition>
        <argsstring>()</argsstring>
        <name>applyWindowRules</name>
        <qualifiedname>KWin::Window::applyWindowRules</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1abf855a28da219dbab00882f1bf790f99">applyWindowRules</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a8d592c7527925e132a63a142fe5c9c51">applyWindowRules</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1090" column="18" bodyfile="kwin/src/window.cpp" bodystart="4487" bodyend="4536"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a708d561f000dfe2d058b6017db96a684" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::supportsWindowRules</definition>
        <argsstring>() const</argsstring>
        <name>supportsWindowRules</name>
        <qualifiedname>KWin::Window::supportsWindowRules</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1aa5523cb6190e79111935d776fa833f38">supportsWindowRules</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a9db3dc9dad2edcafaac4e8dfc19f2268">supportsWindowRules</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1091" column="18" bodyfile="kwin/src/window.cpp" bodystart="4447" bodyend="4450"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ac69f930533a8e570ccc0e002dc077fcb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::wantsTabFocus</definition>
        <argsstring>() const</argsstring>
        <name>wantsTabFocus</name>
        <qualifiedname>KWin::Window::wantsTabFocus</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1093" column="10" bodyfile="kwin/src/window.cpp" bodystart="679" bodyend="682"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a6e2457230d295588778fdda994896e29" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool KWin::Window::takeFocus</definition>
        <argsstring>()=0</argsstring>
        <name>takeFocus</name>
        <qualifiedname>KWin::Window::takeFocus</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_input_panel_v1_window_1a3e09cc13178c30eac7d89e61a2d78e4d">takeFocus</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a52248d2d2b9246c09c292f0b5008df51">takeFocus</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_layer_shell_v1_window_1adc1106043823077a8e2df7e668dbc83e">takeFocus</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a704bb98c8ea8645169ca5d9b2588abea">takeFocus</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_popup_window_1a38ad49e1935cac75df31e57e245392c0">takeFocus</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1ae6fc6b1018e5d05693c9ec4aed0f7466">takeFocus</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1094" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aeb8663fe55e7f87c928c0d89f74a9f9f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool KWin::Window::wantsInput</definition>
        <argsstring>() const =0</argsstring>
        <name>wantsInput</name>
        <qualifiedname>KWin::Window::wantsInput</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_input_panel_v1_window_1a3cf75ee4d3b8dd1c28a58118b1b6ed29">wantsInput</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_internal_window_1ac2caa2737924da2f61aadfdbb4ff0e5a">wantsInput</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_layer_shell_v1_window_1a0b0c0a22e194f5d95b64eb8092ce8e89">wantsInput</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a1614734f8b904d3507c3e2e746948aca">wantsInput</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_popup_window_1ad16733248c947f5b6656f406332eb586">wantsInput</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1af157811905ff31be941d485a60535476">wantsInput</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1095" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ad70cb80f746c7f97cb0e55d53a9869a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::dockWantsInput</definition>
        <argsstring>() const</argsstring>
        <name>dockWantsInput</name>
        <qualifiedname>KWin::Window::dockWantsInput</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_layer_shell_v1_window_1a39a89a1793bc4dd956a8ad35dc20bd85">dockWantsInput</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a2ee014389fd0825a69954db4b1a48de4">dockWantsInput</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether a dock window wants input.</para>
<para>By default <ref refid="namespace_k_win" kindref="compound">KWin</ref> doesn&apos;t pass focus to a dock window unless a force activate request is provided.</para>
<para>This method allows to have dock windows take focus also through flags set on the window.</para>
<para>The default implementation returns <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1107" column="18" bodyfile="kwin/src/window.cpp" bodystart="3084" bodyend="3087"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a39bbb6d7fea7175cb9d9956bb0218064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::checkWorkspacePosition</definition>
        <argsstring>(QRectF oldGeometry=QRectF(), const VirtualDesktop *oldDesktop=nullptr)</argsstring>
        <name>checkWorkspacePosition</name>
        <qualifiedname>KWin::Window::checkWorkspacePosition</qualifiedname>
        <param>
          <type>QRectF</type>
          <declname>oldGeometry</declname>
          <defval>QRectF()</defval>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">VirtualDesktop</ref> *</type>
          <declname>oldDesktop</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1108" column="10" bodyfile="kwin/src/window.cpp" bodystart="4025" bodyend="4226"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a24616d29b6a97cb4b9146cd8dac3f5f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>xcb_timestamp_t</type>
        <definition>xcb_timestamp_t KWin::Window::userTime</definition>
        <argsstring>() const</argsstring>
        <name>userTime</name>
        <qualifiedname>KWin::Window::userTime</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1ada9945f8884ca782481cb3fbfb8f33ea">userTime</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1109" column="29" bodyfile="kwin/src/window.cpp" bodystart="418" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aeb1157e5384db85990b6c16659bc7ab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::keyPressEvent</definition>
        <argsstring>(QKeyCombination key_code)</argsstring>
        <name>keyPressEvent</name>
        <qualifiedname>KWin::Window::keyPressEvent</qualifiedname>
        <param>
          <type>QKeyCombination</type>
          <declname>key_code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1111" column="10" bodyfile="kwin/src/window.cpp" bodystart="2627" bodyend="2666"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aeb2a5b22cd9d9d72646b739689c9e6e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::pointerEnterEvent</definition>
        <argsstring>(const QPointF &amp;globalPos)</argsstring>
        <name>pointerEnterEvent</name>
        <qualifiedname>KWin::Window::pointerEnterEvent</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1aaa9aac252beeb542df60b2da54f247f4">pointerEnterEvent</reimplementedby>
        <param>
          <type>const QPointF &amp;</type>
          <declname>globalPos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1113" column="18" bodyfile="kwin/src/window.cpp" bodystart="2962" bodyend="2986"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a94aff261a7be7524f316a35b8fe4190f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::pointerLeaveEvent</definition>
        <argsstring>()</argsstring>
        <name>pointerLeaveEvent</name>
        <qualifiedname>KWin::Window::pointerLeaveEvent</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a137fcddbdae02d5dea1d87b168099258">pointerLeaveEvent</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1114" column="18" bodyfile="kwin/src/window.cpp" bodystart="2988" bodyend="2996"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af9f291eba5887f2df4f6586c4a6b8903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::packTo</definition>
        <argsstring>(qreal left, qreal top)</argsstring>
        <name>packTo</name>
        <qualifiedname>KWin::Window::packTo</qualifiedname>
        <param>
          <type>qreal</type>
          <declname>left</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>top</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1117" column="10" bodyfile="kwin/src/placement.cpp" bodystart="716" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a09799395c3f6800a6d39e39695fed8b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_tile" kindref="compound">Tile</ref> *</type>
        <definition>Tile * KWin::Window::tile</definition>
        <argsstring>() const</argsstring>
        <name>tile</name>
        <qualifiedname>KWin::Window::tile</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1119" column="10" bodyfile="kwin/src/window.cpp" bodystart="3847" bodyend="3850"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a02d9a70e899649f5bf05e182c54d9120" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::commitTile</definition>
        <argsstring>(Tile *tile)</argsstring>
        <name>commitTile</name>
        <qualifiedname>KWin::Window::commitTile</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_tile" kindref="compound">Tile</ref> *</type>
          <declname>tile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1120" column="10" bodyfile="kwin/src/window.cpp" bodystart="3830" bodyend="3845"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a935782e2939b237ea347b393d34ca27b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_tile" kindref="compound">Tile</ref> *</type>
        <definition>Tile * KWin::Window::requestedTile</definition>
        <argsstring>() const</argsstring>
        <name>requestedTile</name>
        <qualifiedname>KWin::Window::requestedTile</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1121" column="10" bodyfile="kwin/src/window.cpp" bodystart="3852" bodyend="3855"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a45f340de71d3dbb253c978d091d39d07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::requestTile</definition>
        <argsstring>(Tile *tile)</argsstring>
        <name>requestTile</name>
        <qualifiedname>KWin::Window::requestTile</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_tile" kindref="compound">Tile</ref> *</type>
          <declname>tile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1122" column="10" bodyfile="kwin/src/window.cpp" bodystart="3857" bodyend="3897"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a1e17df8a7fdcbbde5cfe8ab92e7e6421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::forgetTile</definition>
        <argsstring>(Tile *tile)</argsstring>
        <name>forgetTile</name>
        <qualifiedname>KWin::Window::forgetTile</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_tile" kindref="compound">Tile</ref> *</type>
          <declname>tile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1123" column="10" bodyfile="kwin/src/window.cpp" bodystart="3899" bodyend="3908"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a71c83108b40bc535e453981b1958db08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setTileCompatibility</definition>
        <argsstring>(Tile *tile)</argsstring>
        <name>setTileCompatibility</name>
        <qualifiedname>KWin::Window::setTileCompatibility</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_tile" kindref="compound">Tile</ref> *</type>
          <declname>tile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1124" column="10" bodyfile="kwin/src/window.cpp" bodystart="3910" bodyend="3926"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ae6731dcfd435bc27d7bbee375b152835" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::handleQuickTileShortcut</definition>
        <argsstring>(QuickTileMode mode)</argsstring>
        <name>handleQuickTileShortcut</name>
        <qualifiedname>KWin::Window::handleQuickTileShortcut</qualifiedname>
        <param>
          <type>QuickTileMode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1126" column="10" bodyfile="kwin/src/window.cpp" bodystart="3689" bodyend="3739"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aa0a1368e7290795e7c7ed6d32c97d0de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setQuickTileModeAtCurrentPosition</definition>
        <argsstring>(QuickTileMode mode)</argsstring>
        <name>setQuickTileModeAtCurrentPosition</name>
        <qualifiedname>KWin::Window::setQuickTileModeAtCurrentPosition</qualifiedname>
        <param>
          <type>QuickTileMode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1127" column="10" bodyfile="kwin/src/window.cpp" bodystart="3779" bodyend="3782"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ac21b2eb64cb5abacbe9015e592c6c935" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setQuickTileMode</definition>
        <argsstring>(QuickTileMode mode, const QPointF &amp;tileAtPoint)</argsstring>
        <name>setQuickTileMode</name>
        <qualifiedname>KWin::Window::setQuickTileMode</qualifiedname>
        <param>
          <type>QuickTileMode</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>tileAtPoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1128" column="10" bodyfile="kwin/src/window.cpp" bodystart="3784" bodyend="3810"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a771c32db912a7dca82da5fd3f9fe5fa8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QuickTileMode</type>
        <definition>QuickTileMode KWin::Window::quickTileMode</definition>
        <argsstring>() const</argsstring>
        <name>quickTileMode</name>
        <qualifiedname>KWin::Window::quickTileMode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1129" column="19" bodyfile="kwin/src/window.cpp" bodystart="3812" bodyend="3819"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a1ffaa1f6015de331667110a987922089" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QuickTileMode</type>
        <definition>QuickTileMode KWin::Window::requestedQuickTileMode</definition>
        <argsstring>() const</argsstring>
        <name>requestedQuickTileMode</name>
        <qualifiedname>KWin::Window::requestedQuickTileMode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1130" column="19" bodyfile="kwin/src/window.cpp" bodystart="3821" bodyend="3828"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a90b69dcdcb07786cd185f895a73649e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::handleCustomQuickTileShortcut</definition>
        <argsstring>(QuickTileMode mode)</argsstring>
        <name>handleCustomQuickTileShortcut</name>
        <qualifiedname>KWin::Window::handleCustomQuickTileShortcut</qualifiedname>
        <param>
          <type>QuickTileMode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1132" column="10" bodyfile="kwin/src/window.cpp" bodystart="3741" bodyend="3777"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af8445d7e9f3a61fb1d02ef84220332ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7b" kindref="member">Layer</ref></type>
        <definition>Layer KWin::Window::layer</definition>
        <argsstring>() const</argsstring>
        <name>layer</name>
        <qualifiedname>KWin::Window::layer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1134" column="11" bodyfile="kwin/src/window.cpp" bodystart="534" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a566fd5756c0cce34ab4f6ac8ba8dd96b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::updateLayer</definition>
        <argsstring>()</argsstring>
        <name>updateLayer</name>
        <qualifiedname>KWin::Window::updateLayer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1135" column="10" bodyfile="kwin/src/window.cpp" bodystart="542" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a1b63155365b80df09ad34dc75f15102d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isInteractiveMove</definition>
        <argsstring>() const</argsstring>
        <name>isInteractiveMove</name>
        <qualifiedname>KWin::Window::isInteractiveMove</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the <ref refid="class_client" kindref="compound">Client</ref> is being interactively moved; otherwise <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1140" column="10" bodyfile="kwin/src/window.h" bodystart="1140" bodyend="1143"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a6994e3aab2074f1b07c15c2f51629363" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isInteractiveResize</definition>
        <argsstring>() const</argsstring>
        <name>isInteractiveResize</name>
        <qualifiedname>KWin::Window::isInteractiveResize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the <ref refid="class_client" kindref="compound">Client</ref> is being interactively resized; otherwise <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1147" column="10" bodyfile="kwin/src/window.h" bodystart="1147" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aeb3ff3e9e2c5fe0b4816948a52cb58a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_k_win_1a09aef7c112a8b0cdfb6e27a081d50dc8" kindref="member">Gravity</ref></type>
        <definition>Gravity KWin::Window::interactiveMoveResizeGravity</definition>
        <argsstring>() const</argsstring>
        <name>interactiveMoveResizeGravity</name>
        <qualifiedname>KWin::Window::interactiveMoveResizeGravity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1151" column="13" bodyfile="kwin/src/window.h" bodystart="1151" bodyend="1154"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a028d288109b39cb174d34fb8b2b44345" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::Window::interactiveMoveResizeAnchor</definition>
        <argsstring>() const</argsstring>
        <name>interactiveMoveResizeAnchor</name>
        <qualifiedname>KWin::Window::interactiveMoveResizeAnchor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1155" column="13" bodyfile="kwin/src/window.h" bodystart="1155" bodyend="1158"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a4a4611b4334bd5ef2b224e0bed4d2afa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_cursor_shape" kindref="compound">CursorShape</ref></type>
        <definition>CursorShape KWin::Window::cursor</definition>
        <argsstring>() const</argsstring>
        <name>cursor</name>
        <qualifiedname>KWin::Window::cursor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_k_win_1_1_cursor" kindref="compound">Cursor</ref> shape for move/resize mode. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1162" column="17" bodyfile="kwin/src/window.h" bodystart="1162" bodyend="1165"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a7a0feefba9bd002fb35060568a605af3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t KWin::Window::interactiveMoveResizeCount</definition>
        <argsstring>() const</argsstring>
        <name>interactiveMoveResizeCount</name>
        <qualifiedname>KWin::Window::interactiveMoveResizeCount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1166" column="14" bodyfile="kwin/src/window.cpp" bodystart="4550" bodyend="4553"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aa144f13367344f7c18bb8cd178464763" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::updateInteractiveMoveResize</definition>
        <argsstring>(const QPointF &amp;global, Qt::KeyboardModifiers modifiers)</argsstring>
        <name>updateInteractiveMoveResize</name>
        <qualifiedname>KWin::Window::updateInteractiveMoveResize</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>global</declname>
        </param>
        <param>
          <type>Qt::KeyboardModifiers</type>
          <declname>modifiers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1168" column="10" bodyfile="kwin/src/window.cpp" bodystart="1287" bodyend="1413"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a3bb6bb26cb4a8e13525c376ac9bbd3b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::endInteractiveMoveResize</definition>
        <argsstring>()</argsstring>
        <name>endInteractiveMoveResize</name>
        <qualifiedname>KWin::Window::endInteractiveMoveResize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ends move resize when all pointer buttons are up again. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1172" column="10" bodyfile="kwin/src/window.cpp" bodystart="2709" bodyend="2718"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aaae917a76558b06792ac435c316cf705" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::cancelInteractiveMoveResize</definition>
        <argsstring>()</argsstring>
        <name>cancelInteractiveMoveResize</name>
        <qualifiedname>KWin::Window::cancelInteractiveMoveResize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1173" column="10" bodyfile="kwin/src/window.cpp" bodystart="2720" bodyend="2729"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aba525ab96946e97c8a9508223b32aa7a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_k_win_1_1_strut_rect" kindref="compound">StrutRect</ref></type>
        <definition>StrutRect KWin::Window::strutRect</definition>
        <argsstring>(StrutArea area) const</argsstring>
        <name>strutRect</name>
        <qualifiedname>KWin::Window::strutRect</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_layer_shell_v1_window_1a6cf26043bd2a32477c70d59f82f89c38">strutRect</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1ab99047488d85c85c666ddb2ecab244ac">strutRect</reimplementedby>
        <param>
          <type><ref refid="namespace_k_win_1a5e1f12b4f6fe1e98672dabf86c00fd1f" kindref="member">StrutArea</ref></type>
          <declname>area</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1175" column="23" bodyfile="kwin/src/window.cpp" bodystart="1799" bodyend="1802"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a8e3324842c2afcc9f5bb836e63ecf839" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1a98fbb198fd4d068d56bb796e99bfe8c5" kindref="member">StrutRects</ref></type>
        <definition>StrutRects KWin::Window::strutRects</definition>
        <argsstring>() const</argsstring>
        <name>strutRects</name>
        <qualifiedname>KWin::Window::strutRects</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1176" column="16" bodyfile="kwin/src/window.cpp" bodystart="1804" bodyend="1820"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ada41aaefb2c2e4b7f03039ff971c1211" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::hasStrut</definition>
        <argsstring>() const</argsstring>
        <name>hasStrut</name>
        <qualifiedname>KWin::Window::hasStrut</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_layer_shell_v1_window_1afc8c3afdfaf17e9e4217b51963db568d">hasStrut</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a0705718e853e8dc77e99fcf3a7e446e0">hasStrut</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1177" column="18" bodyfile="kwin/src/window.cpp" bodystart="1822" bodyend="1825"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a52d0efcfe93dcc8813fddcb813e9120e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setModal</definition>
        <argsstring>(bool modal)</argsstring>
        <name>setModal</name>
        <qualifiedname>KWin::Window::setModal</qualifiedname>
        <param>
          <type>bool</type>
          <declname>modal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1179" column="10" bodyfile="kwin/src/window.cpp" bodystart="2348" bodyend="2359"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ab9a3cecb663e5b45353d210ff5de1195" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isModal</definition>
        <argsstring>() const</argsstring>
        <name>isModal</name>
        <qualifiedname>KWin::Window::isModal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1180" column="10" bodyfile="kwin/src/window.cpp" bodystart="2361" bodyend="2364"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ac90d9d4441fbcadcc29e53b26d4e20f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="class_k_win_1_1_options_1a3ea5092c5fafec92b108838f1cecedcd" kindref="member">Options::MouseCommand</ref> &gt;</type>
        <definition>std::optional&lt; Options::MouseCommand &gt; KWin::Window::getMousePressCommand</definition>
        <argsstring>(Qt::MouseButton button) const</argsstring>
        <name>getMousePressCommand</name>
        <qualifiedname>KWin::Window::getMousePressCommand</qualifiedname>
        <param>
          <type>Qt::MouseButton</type>
          <declname>button</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determines the mouse command for the given <computeroutput>button</computeroutput> in the current state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1185" column="19" bodyfile="kwin/src/window.cpp" bodystart="2029" bodyend="2052"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a3d2bdcd5bd8d81287be54e5184a61f01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="class_k_win_1_1_options_1a3ea5092c5fafec92b108838f1cecedcd" kindref="member">Options::MouseCommand</ref> &gt;</type>
        <definition>std::optional&lt; Options::MouseCommand &gt; KWin::Window::getMouseReleaseCommand</definition>
        <argsstring>(Qt::MouseButton button) const</argsstring>
        <name>getMouseReleaseCommand</name>
        <qualifiedname>KWin::Window::getMouseReleaseCommand</qualifiedname>
        <param>
          <type>Qt::MouseButton</type>
          <declname>button</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1186" column="19" bodyfile="kwin/src/window.cpp" bodystart="2054" bodyend="2066"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aa1872f2aa9de9e8689d1fdee95c863a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="class_k_win_1_1_options_1a3ea5092c5fafec92b108838f1cecedcd" kindref="member">Options::MouseCommand</ref> &gt;</type>
        <definition>std::optional&lt; Options::MouseCommand &gt; KWin::Window::getWheelCommand</definition>
        <argsstring>(Qt::Orientation orientation) const</argsstring>
        <name>getWheelCommand</name>
        <qualifiedname>KWin::Window::getWheelCommand</qualifiedname>
        <param>
          <type>Qt::Orientation</type>
          <declname>orientation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1187" column="19" bodyfile="kwin/src/window.cpp" bodystart="2068" bodyend="2074"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1adc4cfddd14db72a5b6337bf3b0f8c639" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::performMousePressCommand</definition>
        <argsstring>(Options::MouseCommand, const QPointF &amp;globalPos)</argsstring>
        <name>performMousePressCommand</name>
        <qualifiedname>KWin::Window::performMousePressCommand</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_options_1a3ea5092c5fafec92b108838f1cecedcd" kindref="member">Options::MouseCommand</ref></type>
          <defname>cmd</defname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>globalPos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1188" column="10" bodyfile="kwin/src/window.cpp" bodystart="2076" bodyend="2276"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a0a5e4a76a206143596023e553abedfd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::performMouseReleaseCommand</definition>
        <argsstring>(Options::MouseCommand, const QPointF &amp;globalPos)</argsstring>
        <name>performMouseReleaseCommand</name>
        <qualifiedname>KWin::Window::performMouseReleaseCommand</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_options_1a3ea5092c5fafec92b108838f1cecedcd" kindref="member">Options::MouseCommand</ref></type>
          <defname>command</defname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>globalPos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1189" column="10" bodyfile="kwin/src/window.cpp" bodystart="2278" bodyend="2290"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af44c993eea122ea90d4b1aa4cd8de38c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Qt::Edge</type>
        <definition>Qt::Edge KWin::Window::titlebarPosition</definition>
        <argsstring>() const</argsstring>
        <name>titlebarPosition</name>
        <qualifiedname>KWin::Window::titlebarPosition</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1192" column="14" bodyfile="kwin/src/window.cpp" bodystart="929" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a69f30f2a3a35a61e4e690519ff58abf3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::titlebarPositionUnderMouse</definition>
        <argsstring>() const</argsstring>
        <name>titlebarPositionUnderMouse</name>
        <qualifiedname>KWin::Window::titlebarPositionUnderMouse</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1193" column="10" bodyfile="kwin/src/window.cpp" bodystart="935" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ab05570ab597e429201ea5b47b35e5094" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KDecoration3::Decoration *</type>
        <definition>KDecoration3::Decoration * KWin::Window::decoration</definition>
        <argsstring>() const</argsstring>
        <name>decoration</name>
        <qualifiedname>KWin::Window::decoration</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1194" column="30" bodyfile="kwin/src/window.h" bodystart="1194" bodyend="1197"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ae186402da754d5946bcfeab855f6096e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>KDecoration3::Decoration *</type>
        <definition>KDecoration3::Decoration * KWin::Window::nextDecoration</definition>
        <argsstring>() const</argsstring>
        <name>nextDecoration</name>
        <qualifiedname>KWin::Window::nextDecoration</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1add91537605435ceaa2195afc0518f013">nextDecoration</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1198" column="38" bodyfile="kwin/src/window.cpp" bodystart="2947" bodyend="2950"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a85199ff20c051bd2738f150f96875b7f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isDecorated</definition>
        <argsstring>() const</argsstring>
        <name>isDecorated</name>
        <qualifiedname>KWin::Window::isDecorated</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1199" column="10" bodyfile="kwin/src/window.h" bodystart="1199" bodyend="1202"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aeebcd9865806bb3e4b74d13b4ed91ded" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_decoration_1_1_decorated_window_impl" kindref="compound">Decoration::DecoratedWindowImpl</ref> *</type>
        <definition>Decoration::DecoratedWindowImpl * KWin::Window::decoratedWindow</definition>
        <argsstring>() const</argsstring>
        <name>decoratedWindow</name>
        <qualifiedname>KWin::Window::decoratedWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1203" column="37" bodyfile="kwin/src/window.cpp" bodystart="2952" bodyend="2955"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ad11b98291d4eddcbcc38e614d416f499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setDecoratedWindow</definition>
        <argsstring>(Decoration::DecoratedWindowImpl *client)</argsstring>
        <name>setDecoratedWindow</name>
        <qualifiedname>KWin::Window::setDecoratedWindow</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_decoration_1_1_decorated_window_impl" kindref="compound">Decoration::DecoratedWindowImpl</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1204" column="10" bodyfile="kwin/src/window.cpp" bodystart="2957" bodyend="2960"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ab1e2bd22ec836e8cada97462d90badf2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::decorationHasAlpha</definition>
        <argsstring>() const</argsstring>
        <name>decorationHasAlpha</name>
        <qualifiedname>KWin::Window::decorationHasAlpha</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1205" column="10" bodyfile="kwin/src/window.cpp" bodystart="2780" bodyend="2787"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a2aa1fc2ef7187d8f8ed3f3bb60e1df9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::triggerDecorationRepaint</definition>
        <argsstring>()</argsstring>
        <name>triggerDecorationRepaint</name>
        <qualifiedname>KWin::Window::triggerDecorationRepaint</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1206" column="10" bodyfile="kwin/src/window.cpp" bodystart="2789" bodyend="2794"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ac76883ec1ae279e0453ad6ea21a6a441" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::layoutDecorationRects</definition>
        <argsstring>(QRectF &amp;left, QRectF &amp;top, QRectF &amp;right, QRectF &amp;bottom) const</argsstring>
        <name>layoutDecorationRects</name>
        <qualifiedname>KWin::Window::layoutDecorationRects</qualifiedname>
        <param>
          <type>QRectF &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>QRectF &amp;</type>
          <declname>top</declname>
        </param>
        <param>
          <type>QRectF &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>QRectF &amp;</type>
          <declname>bottom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1207" column="10" bodyfile="kwin/src/window.cpp" bodystart="2796" bodyend="2810"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a192d2d38ea0f55ec06c164838fac36ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::processDecorationMove</definition>
        <argsstring>(const QPointF &amp;localPos, const QPointF &amp;globalPos)</argsstring>
        <name>processDecorationMove</name>
        <qualifiedname>KWin::Window::processDecorationMove</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>localPos</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>globalPos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1208" column="10" bodyfile="kwin/src/window.cpp" bodystart="2812" bodyend="2836"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a3c741dfbd6ca6136eb56b6e57054b8d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::processDecorationButtonPress</definition>
        <argsstring>(const QPointF &amp;localPos, const QPointF &amp;globalPos, Qt::MouseButton button, bool ignoreMenu=false)</argsstring>
        <name>processDecorationButtonPress</name>
        <qualifiedname>KWin::Window::processDecorationButtonPress</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>localPos</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>globalPos</declname>
        </param>
        <param>
          <type>Qt::MouseButton</type>
          <declname>button</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignoreMenu</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1209" column="10" bodyfile="kwin/src/window.cpp" bodystart="2838" bodyend="2913"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a2299969b07dae95abd1896a63d24f147" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::processDecorationButtonRelease</definition>
        <argsstring>(Qt::MouseButton button)</argsstring>
        <name>processDecorationButtonRelease</name>
        <qualifiedname>KWin::Window::processDecorationButtonRelease</qualifiedname>
        <param>
          <type>Qt::MouseButton</type>
          <declname>button</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1210" column="10" bodyfile="kwin/src/window.cpp" bodystart="2915" bodyend="2926"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a584f743781c6709049fa7fe25fa3c88b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::invalidateDecoration</definition>
        <argsstring>()</argsstring>
        <name>invalidateDecoration</name>
        <qualifiedname>KWin::Window::invalidateDecoration</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a15961ed732cec7ea768dc44b1617eb2a">invalidateDecoration</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a9ef0042230e05f0829491bbf6f3dd091">invalidateDecoration</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1ac5fd271f5572426d3b8ddacdc6d84270">invalidateDecoration</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1212" column="18" bodyfile="kwin/src/window.cpp" bodystart="4403" bodyend="4405"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a728e6755d954d62acad193681d709610" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::noBorder</definition>
        <argsstring>() const</argsstring>
        <name>noBorder</name>
        <qualifiedname>KWin::Window::noBorder</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a9e1b67400bf4f6532a21e3f2cf0fe68d">noBorder</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a41bb8138b2bf7ce1cd9f62f2d839dce3">noBorder</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a3521729197c74662335504e2aac48433">noBorder</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1214" column="18" bodyfile="kwin/src/window.cpp" bodystart="4407" bodyend="4410"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ab2de2bd6a4bf0fabdf41c5cac3e595f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::setNoBorder</definition>
        <argsstring>(bool set)</argsstring>
        <name>setNoBorder</name>
        <qualifiedname>KWin::Window::setNoBorder</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a437ba21fcae6797bfd9d7fe0a4992880">setNoBorder</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a4e73f983d63129203de7cdf7cb915826">setNoBorder</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1ab7d175bd2f95fa211b68229c1faa092c">setNoBorder</reimplementedby>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1215" column="18" bodyfile="kwin/src/window.cpp" bodystart="4417" bodyend="4420"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a0078f08c782843fcb88397dff0ad6232" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::userCanSetNoBorder</definition>
        <argsstring>() const</argsstring>
        <name>userCanSetNoBorder</name>
        <qualifiedname>KWin::Window::userCanSetNoBorder</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1aba89b5f95cc3841e0dcd89aea1706664">userCanSetNoBorder</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a4a2834b58aae2c4a90b9730f99eb1e31">userCanSetNoBorder</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a746d08edebce331fe62a45bb2850d1a1">userCanSetNoBorder</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1216" column="18" bodyfile="kwin/src/window.cpp" bodystart="4412" bodyend="4415"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a848c62c85204f55706acf4ea61a08d56" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::checkNoBorder</definition>
        <argsstring>()</argsstring>
        <name>checkNoBorder</name>
        <qualifiedname>KWin::Window::checkNoBorder</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a188bf6c90ae46ccd1dcba279fc494bb0">checkNoBorder</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1217" column="18" bodyfile="kwin/src/window.cpp" bodystart="4422" bodyend="4425"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a4eb8c1b2c6df25f85d091afeeebb66ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::providesContextHelp</definition>
        <argsstring>() const</argsstring>
        <name>providesContextHelp</name>
        <qualifiedname>KWin::Window::providesContextHelp</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a0534b03d57a37b287fd85abe101a300d">providesContextHelp</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window provides context help or not. If it does, you should show a help menu item or a help button like &apos;?&apos; and call contextHelp() if this is invoked.</para>
<para>Default implementation returns <computeroutput>false</computeroutput>. <simplesect kind="see"><para><ref refid="class_k_win_1_1_window_1ab6ab84f217f36414e4089b4b7b34f069" kindref="member">showContextHelp</ref>; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1227" column="18" bodyfile="kwin/src/window.cpp" bodystart="2938" bodyend="2941"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ab6ab84f217f36414e4089b4b7b34f069" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::showContextHelp</definition>
        <argsstring>()</argsstring>
        <name>showContextHelp</name>
        <qualifiedname>KWin::Window::showContextHelp</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a7de22915b48c0b82741aed9ecce4286c">showContextHelp</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invokes context help on the window. Only works if the window actually provides context help.</para>
<para>Default implementation does nothing.</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_window_1af3de3b41671127884529d47ba9e96fc0" kindref="member">providesContextHelp()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1237" column="18" bodyfile="kwin/src/window.cpp" bodystart="2943" bodyend="2945"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a0d654ed94cbf37efd319bc78522523da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::virtualKeyboardGeometry</definition>
        <argsstring>() const</argsstring>
        <name>virtualKeyboardGeometry</name>
        <qualifiedname>KWin::Window::virtualKeyboardGeometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the geometry of the virtual keyboard This geometry is in global coordinates </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1243" column="12" bodyfile="kwin/src/window.cpp" bodystart="3035" bodyend="3038"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a064dec4659e7831fe425f689ad0312c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::setVirtualKeyboardGeometry</definition>
        <argsstring>(const QRectF &amp;geo)</argsstring>
        <name>setVirtualKeyboardGeometry</name>
        <qualifiedname>KWin::Window::setVirtualKeyboardGeometry</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_layer_shell_v1_window_1a56b1c20d903c5b08026b77479f304a0a">setVirtualKeyboardGeometry</reimplementedby>
        <param>
          <type>const QRectF &amp;</type>
          <declname>geo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the geometry of the virtual keyboard, The window may resize itself in order to make space for the keybaord This geometry is in global coordinates </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1249" column="18" bodyfile="kwin/src/window.cpp" bodystart="3040" bodyend="3072"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a1a0b0f83a533b8b689dd8bd35c318b8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::showOnScreenEdge</definition>
        <argsstring>()</argsstring>
        <name>showOnScreenEdge</name>
        <qualifiedname>KWin::Window::showOnScreenEdge</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_layer_shell_v1_window_1ac14fcf27c3efa21f697243dbd4f4334d">showOnScreenEdge</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a014911fefc34d2f424b4438e130b5aad">showOnScreenEdge</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Restores the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> after it had been hidden due to show on screen edge functionality. The <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> also gets raised (e.g. Panel mode windows can cover) and the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> gets informed in a window specific way that it is shown and raised again. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1256" column="18" bodyfile="kwin/src/window.cpp" bodystart="4427" bodyend="4430"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a384f3da43bb8399dc94c43f5032155c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::Window::desktopFileName</definition>
        <argsstring>() const</argsstring>
        <name>desktopFileName</name>
        <qualifiedname>KWin::Window::desktopFileName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1258" column="13" bodyfile="kwin/src/window.h" bodystart="1258" bodyend="1261"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a5498d4b8f227afb803b7c09c4ad53160" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void KWin::Window::killWindow</definition>
        <argsstring>()=0</argsstring>
        <name>killWindow</name>
        <qualifiedname>KWin::Window::killWindow</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a0c08f446e29f708b0943c44e42ce3c05">killWindow</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_wayland_window_1aae95d937728c073fb16aa9357d1957d2">killWindow</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1aa4171b66aad9facad7cd60937f8be3d1">killWindow</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tries to terminate the process of this <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>.</para>
<para>Implementing subclasses can perform a windowing system solution for terminating. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1277" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a47e37aadf699a7684655e3f482f40c02" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void KWin::Window::destroyWindow</definition>
        <argsstring>()=0</argsstring>
        <name>destroyWindow</name>
        <qualifiedname>KWin::Window::destroyWindow</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_input_panel_v1_window_1ad6868b5ab4227ab8e8c305592420ad67">destroyWindow</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a2a22379a5e32790f3dd1e7a56affe2d3">destroyWindow</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_layer_shell_v1_window_1aa65d623d96e317736ac3c027844bba71">destroyWindow</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a7c848abfd1542214c0d8f289d8c76fcb">destroyWindow</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_surface_window_1a442a325aa69efb138bb6fdde1a6da741">destroyWindow</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1278" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a462b5bb23c7028fddfe3a3fc7a3ba038" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::belongsToDesktop</definition>
        <argsstring>() const</argsstring>
        <name>belongsToDesktop</name>
        <qualifiedname>KWin::Window::belongsToDesktop</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_wayland_window_1abe8acc31b24cc93dc435f22ef5c7b204">belongsToDesktop</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a8720a4715ab6ba47d1e1b1269990353c">belongsToDesktop</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1286" column="18" bodyfile="kwin/src/window.cpp" bodystart="605" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a6718fa91ff19f314d85678e091b8340c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::hasApplicationMenu</definition>
        <argsstring>() const</argsstring>
        <name>hasApplicationMenu</name>
        <qualifiedname>KWin::Window::hasApplicationMenu</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1288" column="10" bodyfile="kwin/src/window.cpp" bodystart="3151" bodyend="3154"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a3980f243d8a936be0e117c6976823aba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::applicationMenuActive</definition>
        <argsstring>() const</argsstring>
        <name>applicationMenuActive</name>
        <qualifiedname>KWin::Window::applicationMenuActive</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1289" column="10" bodyfile="kwin/src/window.h" bodystart="1289" bodyend="1292"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a82738dff3fdc591b41d16aafef113e01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setApplicationMenuActive</definition>
        <argsstring>(bool applicationMenuActive)</argsstring>
        <name>setApplicationMenuActive</name>
        <qualifiedname>KWin::Window::setApplicationMenuActive</qualifiedname>
        <param>
          <type>bool</type>
          <declname>applicationMenuActive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1293" column="10" bodyfile="kwin/src/window.cpp" bodystart="3184" bodyend="3190"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1abeeea83c2e285a6e2648594080be2913" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::Window::applicationMenuServiceName</definition>
        <argsstring>() const</argsstring>
        <name>applicationMenuServiceName</name>
        <qualifiedname>KWin::Window::applicationMenuServiceName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1295" column="13" bodyfile="kwin/src/window.h" bodystart="1295" bodyend="1298"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a55a5a924afbbff8839a2328555cccbb6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::Window::applicationMenuObjectPath</definition>
        <argsstring>() const</argsstring>
        <name>applicationMenuObjectPath</name>
        <qualifiedname>KWin::Window::applicationMenuObjectPath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1299" column="13" bodyfile="kwin/src/window.h" bodystart="1299" bodyend="1302"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a04cfd63418e8fc4dc8c3cb3565a613a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::showApplicationMenu</definition>
        <argsstring>(int actionId)</argsstring>
        <name>showApplicationMenu</name>
        <qualifiedname>KWin::Window::showApplicationMenu</qualifiedname>
        <param>
          <type>int</type>
          <declname>actionId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Request showing the application menu bar <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>actionId</parametername>
</parameternamelist>
<parameterdescription>
<para>The DBus menu ID of the action that should be highlighted, 0 for the root menu </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1308" column="10" bodyfile="kwin/src/window.cpp" bodystart="3192" bodyend="3200"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a8351dc98d7b4e8388c20c1f75d45b53b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QString</type>
        <definition>QString KWin::Window::preferredColorScheme</definition>
        <argsstring>() const</argsstring>
        <name>preferredColorScheme</name>
        <qualifiedname>KWin::Window::preferredColorScheme</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a756913ae234b4f7441c9986ca98205b4">preferredColorScheme</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a0a8bd2ae0940a18e03b5b0e0f2e43ec0">preferredColorScheme</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1310" column="21" bodyfile="kwin/src/window.cpp" bodystart="994" bodyend="997"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1add4fdac83406710541f46a27ee0e0170" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::Window::colorScheme</definition>
        <argsstring>() const</argsstring>
        <name>colorScheme</name>
        <qualifiedname>KWin::Window::colorScheme</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1311" column="13" bodyfile="kwin/src/window.cpp" bodystart="999" bodyend="1002"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a2867cf88dbab9e9101452ff49a44790e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setColorScheme</definition>
        <argsstring>(const QString &amp;colorScheme)</argsstring>
        <name>setColorScheme</name>
        <qualifiedname>KWin::Window::setColorScheme</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>colorScheme</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1312" column="10" bodyfile="kwin/src/window.cpp" bodystart="1004" bodyend="1027"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a06fa16385e03864699000a61f6a1933b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::unresponsive</definition>
        <argsstring>() const</argsstring>
        <name>unresponsive</name>
        <qualifiedname>KWin::Window::unresponsive</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1314" column="10" bodyfile="kwin/src/window.cpp" bodystart="3202" bodyend="3205"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a4d1c2d0e1fde826cd0f99ec00ed93de6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::groupTransient</definition>
        <argsstring>() const</argsstring>
        <name>groupTransient</name>
        <qualifiedname>KWin::Window::groupTransient</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1afe2f971d0d4593a63edb75220cf48c02">groupTransient</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default implementation returns <computeroutput>null</computeroutput>. Mostly intended for X11 clients, from EWMH: <verbatim>* If the WM_TRANSIENT_FOR property is set to None or Root window, the window should be
* treated as a transient for all other windows in the same group. It has been noted that this
* is a slight ICCCM violation, but as this behavior is pretty standard for many toolkits and
* window managers, and is extremely unlikely to break anything, it seems reasonable to document
* it as standard.
* </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1327" column="18" bodyfile="kwin/src/window.cpp" bodystart="3380" bodyend="3383"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af60e148f9cc7e10a15e07d21b4481a34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="class_k_win_1_1_group" kindref="compound">Group</ref> *</type>
        <definition>const Group * KWin::Window::group</definition>
        <argsstring>() const</argsstring>
        <name>group</name>
        <qualifiedname>KWin::Window::group</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1ad00fe111dfb7ae782ad657eb684e8633">group</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default implementation returns <computeroutput>null</computeroutput>.</para>
<para>Mostly for X11 clients, holds the client group </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1333" column="25" bodyfile="kwin/src/window.cpp" bodystart="3385" bodyend="3388"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a0e7daafcd723a739be737dab9a66f22d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_k_win_1_1_group" kindref="compound">Group</ref> *</type>
        <definition>Group * KWin::Window::group</definition>
        <argsstring>()</argsstring>
        <name>group</name>
        <qualifiedname>KWin::Window::group</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a3e337f96d26bf6151d2ee8f6c150f1a9">group</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default implementation returns <computeroutput>null</computeroutput>.</para>
<para>Mostly for X11 clients, holds the client group </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1339" column="19" bodyfile="kwin/src/window.cpp" bodystart="3390" bodyend="3393"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a566b2f1b031cd7f536104017d3e157de" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_plasma_window_interface" kindref="compound">PlasmaWindowInterface</ref> *</type>
        <definition>PlasmaWindowInterface * KWin::Window::windowManagementInterface</definition>
        <argsstring>() const</argsstring>
        <name>windowManagementInterface</name>
        <qualifiedname>KWin::Window::windowManagementInterface</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return window management interface </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1344" column="27" bodyfile="kwin/src/window.h" bodystart="1344" bodyend="1347"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ab80ea35c277e387008a043b40ed19c3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setLastUsageSerial</definition>
        <argsstring>(quint32 serial)</argsstring>
        <name>setLastUsageSerial</name>
        <qualifiedname>KWin::Window::setLastUsageSerial</qualifiedname>
        <param>
          <type>quint32</type>
          <declname>serial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the last user usage serial of the surface as <computeroutput>serial</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1352" column="10" bodyfile="kwin/src/window.cpp" bodystart="4538" bodyend="4543"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a2c7d45f16d453f275e7ef16d8ec2118f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>quint32</type>
        <definition>quint32 KWin::Window::lastUsageSerial</definition>
        <argsstring>() const</argsstring>
        <name>lastUsageSerial</name>
        <qualifiedname>KWin::Window::lastUsageSerial</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1353" column="13" bodyfile="kwin/src/window.cpp" bodystart="4545" bodyend="4548"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a4d84c00bbc011d8a4b3b4a17b8851d15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::refOffscreenRendering</definition>
        <argsstring>()</argsstring>
        <name>refOffscreenRendering</name>
        <qualifiedname>KWin::Window::refOffscreenRendering</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1355" column="10" bodyfile="kwin/src/window.cpp" bodystart="4569" bodyend="4576"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a5298a339cf68f39640772342ab018e28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::unrefOffscreenRendering</definition>
        <argsstring>()</argsstring>
        <name>unrefOffscreenRendering</name>
        <qualifiedname>KWin::Window::unrefOffscreenRendering</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1356" column="10" bodyfile="kwin/src/window.cpp" bodystart="4578" bodyend="4586"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a445d701c22287899adf39b5a34313628" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isOffscreenRendering</definition>
        <argsstring>() const</argsstring>
        <name>isOffscreenRendering</name>
        <qualifiedname>KWin::Window::isOffscreenRendering</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1357" column="10" bodyfile="kwin/src/window.cpp" bodystart="4588" bodyend="4591"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a81faef3b8b494d474c8acb202f9e8ddd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>qreal KWin::Window::targetScale</definition>
        <argsstring>() const</argsstring>
        <name>targetScale</name>
        <qualifiedname>KWin::Window::targetScale</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1359" column="11" bodyfile="kwin/src/window.cpp" bodystart="4609" bodyend="4612"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aa37ac55bb7dc545e7109d022b02202a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>qreal KWin::Window::nextTargetScale</definition>
        <argsstring>() const</argsstring>
        <name>nextTargetScale</name>
        <qualifiedname>KWin::Window::nextTargetScale</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1360" column="11" bodyfile="kwin/src/window.cpp" bodystart="4675" bodyend="4678"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a6757eacee3e64bdbcd4ad4583859846d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setNextTargetScale</definition>
        <argsstring>(qreal scale)</argsstring>
        <name>setNextTargetScale</name>
        <qualifiedname>KWin::Window::setNextTargetScale</qualifiedname>
        <param>
          <type>qreal</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1361" column="10" bodyfile="kwin/src/window.cpp" bodystart="4680" bodyend="4687"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aa6519c0e1267b9d6a4bfb925652d5ddb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_output_transform" kindref="compound">OutputTransform</ref></type>
        <definition>OutputTransform KWin::Window::preferredBufferTransform</definition>
        <argsstring>() const</argsstring>
        <name>preferredBufferTransform</name>
        <qualifiedname>KWin::Window::preferredBufferTransform</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1363" column="21" bodyfile="kwin/src/window.cpp" bodystart="4706" bodyend="4709"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a83c14ba0b0896374d05e78bc19f878b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setPreferredBufferTransform</definition>
        <argsstring>(OutputTransform transform)</argsstring>
        <name>setPreferredBufferTransform</name>
        <qualifiedname>KWin::Window::setPreferredBufferTransform</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output_transform" kindref="compound">OutputTransform</ref></type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1364" column="10" bodyfile="kwin/src/window.cpp" bodystart="4711" bodyend="4717"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a4720452272fcfef7fb9e1c4fdf1d3c84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_k_win_1_1_color_description" kindref="compound">ColorDescription</ref> &amp;</type>
        <definition>const ColorDescription &amp; KWin::Window::preferredColorDescription</definition>
        <argsstring>() const</argsstring>
        <name>preferredColorDescription</name>
        <qualifiedname>KWin::Window::preferredColorDescription</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1366" column="28" bodyfile="kwin/src/window.cpp" bodystart="4728" bodyend="4731"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a0ba265750a8310c6566addce02164027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setPreferredColorDescription</definition>
        <argsstring>(const ColorDescription &amp;description)</argsstring>
        <name>setPreferredColorDescription</name>
        <qualifiedname>KWin::Window::setPreferredColorDescription</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_color_description" kindref="compound">ColorDescription</ref> &amp;</type>
          <declname>description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1367" column="10" bodyfile="kwin/src/window.cpp" bodystart="4733" bodyend="4739"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_k_win_1_1_window_1aa6d169611e85de5c016f53a1ff30f558" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * KWin::Window::findInList</definition>
        <argsstring>(const QList&lt; T * &gt; &amp;list, std::function&lt; bool(const U *)&gt; func)</argsstring>
        <name>findInList</name>
        <qualifiedname>KWin::Window::findInList</qualifiedname>
        <param>
          <type>const QList&lt; T * &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>std::function&lt; bool(const U *)&gt;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Finds the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> matching the condition expressed in <computeroutput>func</computeroutput> in <computeroutput>list</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The method is templated to operate on either a list of windows or on a list of a subclass type of <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>The list to search in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>The condition function (compare std::find_if) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T* The found <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> or <computeroutput>null</computeroutput> if there is no matching <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="873" column="14" bodyfile="kwin/src/window.h" bodystart="2100" bodyend="2109"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a3e8d94d178149efd393f5f944366dae5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::Window::iconFromDesktopFile</definition>
        <argsstring>(const QString &amp;fileName)</argsstring>
        <name>iconFromDesktopFile</name>
        <qualifiedname>KWin::Window::iconFromDesktopFile</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper function to compute the icon out of an application id defined by <computeroutput>fileName</computeroutput> </para>
<para><simplesect kind="return"><para>an icon name that can be used with QIcon::fromTheme() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1268" column="20" bodyfile="kwin/src/window.cpp" bodystart="3100" bodyend="3109"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a936c783bfd766648824d4d7990c0bb2f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::Window::findDesktopFile</definition>
        <argsstring>(const QString &amp;fileName)</argsstring>
        <name>findDesktopFile</name>
        <qualifiedname>KWin::Window::findDesktopFile</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1270" column="20" bodyfile="kwin/src/window.cpp" bodystart="3116" bodyend="3149"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af6b077eadf47fd68373d43f94eef23ad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::belongToSameApplication</definition>
        <argsstring>(const Window *c1, const Window *c2, SameApplicationChecks checks=SameApplicationChecks())</argsstring>
        <name>belongToSameApplication</name>
        <qualifiedname>KWin::Window::belongToSameApplication</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>c2</declname>
        </param>
        <param>
          <type>SameApplicationChecks</type>
          <declname>checks</declname>
          <defval>SameApplicationChecks()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1285" column="17" bodyfile="kwin/src/window.cpp" bodystart="413" bodyend="416"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-slot">
      <memberdef kind="slot" id="class_k_win_1_1_window_1a7b4df09999849da92ca4ef4b9b244337" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void KWin::Window::closeWindow</definition>
        <argsstring>()=0</argsstring>
        <name>closeWindow</name>
        <qualifiedname>KWin::Window::closeWindow</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_input_panel_v1_window_1add26bbfa799eeeec34f04fe3109095c5">closeWindow</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_internal_window_1afd30be92f568f0478cb0b54485f4d4b8">closeWindow</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_layer_shell_v1_window_1a30caec377a0fa69874443653173233ff">closeWindow</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_popup_window_1aab8d3b0f84ffe0787d0be021e2046259">closeWindow</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a88b890e9c80339392080ff7117ab313e">closeWindow</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1370" column="18"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-slot">
      <memberdef kind="slot" id="class_k_win_1_1_window_1a595f38fca83c2083b11039c4679983c5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setReadyForPainting</definition>
        <argsstring>()</argsstring>
        <name>setReadyForPainting</name>
        <qualifiedname>KWin::Window::setReadyForPainting</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1373" column="10" bodyfile="kwin/src/window.cpp" bodystart="219" bodyend="225"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="signal">
      <memberdef kind="signal" id="class_k_win_1_1_window_1a0c8cc94fcc6cfdee73187c18b6208045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::stackingOrderChanged</definition>
        <argsstring>()</argsstring>
        <name>stackingOrderChanged</name>
        <qualifiedname>KWin::Window::stackingOrderChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1376" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a65a50831398387c79231316c21be1abc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::shadeChanged</definition>
        <argsstring>()</argsstring>
        <name>shadeChanged</name>
        <qualifiedname>KWin::Window::shadeChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1377" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a5c56ad8046349bf9a87a26d73fd17c37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::opacityChanged</definition>
        <argsstring>(KWin::Window *window, qreal oldOpacity)</argsstring>
        <name>opacityChanged</name>
        <qualifiedname>KWin::Window::opacityChanged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">KWin::Window</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>oldOpacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1378" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1ad783ee7d4155cdd17ee6ca4138038b87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::damaged</definition>
        <argsstring>(KWin::Window *window)</argsstring>
        <name>damaged</name>
        <qualifiedname>KWin::Window::damaged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">KWin::Window</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1379" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a0fcac52cd277eab8f40d1c5172a4b5b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::inputTransformationChanged</definition>
        <argsstring>()</argsstring>
        <name>inputTransformationChanged</name>
        <qualifiedname>KWin::Window::inputTransformationChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1380" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a75b348e50a34a4881ce281e40d1e8f02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::closed</definition>
        <argsstring>()</argsstring>
        <name>closed</name>
        <qualifiedname>KWin::Window::closed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1381" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a7dbccaac47d2333da22ab4acb4897381" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::outputChanged</definition>
        <argsstring>()</argsstring>
        <name>outputChanged</name>
        <qualifiedname>KWin::Window::outputChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted whenever the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>&apos;s screen changes. This can happen either in consequence to a screen being removed/added or if the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>&apos;s geometry changes. <simplesect kind="since"><para>4.11 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1387" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a1cb22e123b2f9b94c562e6aa19d0557d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::skipCloseAnimationChanged</definition>
        <argsstring>()</argsstring>
        <name>skipCloseAnimationChanged</name>
        <qualifiedname>KWin::Window::skipCloseAnimationChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1388" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a73961c045eb1609f01e611f928af0c4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::windowRoleChanged</definition>
        <argsstring>()</argsstring>
        <name>windowRoleChanged</name>
        <qualifiedname>KWin::Window::windowRoleChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted whenever the window role of the window changes. <simplesect kind="since"><para>5.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1393" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1ada6d2b84af63fc37f49fd43da8d8592d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::windowClassChanged</definition>
        <argsstring>()</argsstring>
        <name>windowClassChanged</name>
        <qualifiedname>KWin::Window::windowClassChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted whenever the window class name or resource name of the window changes. <simplesect kind="since"><para>5.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1398" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a5ab5cf58669820a49608cb46f3ea3e5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::surfaceChanged</definition>
        <argsstring>()</argsstring>
        <name>surfaceChanged</name>
        <qualifiedname>KWin::Window::surfaceChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted whenever the Surface for this <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1403" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1aced9f90cb668b5491267d3bc0ab9a530" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::shadowChanged</definition>
        <argsstring>()</argsstring>
        <name>shadowChanged</name>
        <qualifiedname>KWin::Window::shadowChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted whenever the window&apos;s shadow changes. <simplesect kind="since"><para>5.15 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1409" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1aaa748e21e5fd562e204c3ce1e7410e4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::bufferGeometryChanged</definition>
        <argsstring>(const QRectF &amp;oldGeometry)</argsstring>
        <name>bufferGeometryChanged</name>
        <qualifiedname>KWin::Window::bufferGeometryChanged</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>oldGeometry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>&apos;s buffer geometry changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1414" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1ac20682dc9062e09db6ed01b2cf7c6097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::frameGeometryChanged</definition>
        <argsstring>(const QRectF &amp;oldGeometry)</argsstring>
        <name>frameGeometryChanged</name>
        <qualifiedname>KWin::Window::frameGeometryChanged</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>oldGeometry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>&apos;s frame geometry changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1418" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a5fad289b49f846a6fc1c0cb72e91ec78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::clientGeometryChanged</definition>
        <argsstring>(const QRectF &amp;oldGeometry)</argsstring>
        <name>clientGeometryChanged</name>
        <qualifiedname>KWin::Window::clientGeometryChanged</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>oldGeometry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>&apos;s client geometry has changed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1422" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a0dac69707ab89d7d943100312fbec7c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::frameGeometryAboutToChange</definition>
        <argsstring>()</argsstring>
        <name>frameGeometryAboutToChange</name>
        <qualifiedname>KWin::Window::frameGeometryAboutToChange</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the frame geometry is about to change. the new geometry is not known yet </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1427" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1ad79ce26eab7a39f0c38b62cdf22f4698" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::visibleGeometryChanged</definition>
        <argsstring>()</argsstring>
        <name>visibleGeometryChanged</name>
        <qualifiedname>KWin::Window::visibleGeometryChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the visible geometry has changed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1432" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a69b6dd1515f1491903ce82938e7973e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::tileChanged</definition>
        <argsstring>(KWin::Tile *tile)</argsstring>
        <name>tileChanged</name>
        <qualifiedname>KWin::Window::tileChanged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_tile" kindref="compound">KWin::Tile</ref> *</type>
          <declname>tile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when associated tile has changed, including from and to none </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1437" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a1fdebcd600a74ba4e3ceef2dc4e01da4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::requestedTileChanged</definition>
        <argsstring>()</argsstring>
        <name>requestedTileChanged</name>
        <qualifiedname>KWin::Window::requestedTileChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1438" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a469e95b9f51c551643a0e4bdf46e0203" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::fullScreenChanged</definition>
        <argsstring>()</argsstring>
        <name>fullScreenChanged</name>
        <qualifiedname>KWin::Window::fullScreenChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1440" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a926d32fb86d967e63036b5b4afb0eb65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::skipTaskbarChanged</definition>
        <argsstring>()</argsstring>
        <name>skipTaskbarChanged</name>
        <qualifiedname>KWin::Window::skipTaskbarChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1441" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a39a00387940d0f051deff0a6589c5c98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::skipPagerChanged</definition>
        <argsstring>()</argsstring>
        <name>skipPagerChanged</name>
        <qualifiedname>KWin::Window::skipPagerChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1442" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a097084f43aa41eaa4b55c174712ed556" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::skipSwitcherChanged</definition>
        <argsstring>()</argsstring>
        <name>skipSwitcherChanged</name>
        <qualifiedname>KWin::Window::skipSwitcherChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1443" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a1d74b16abee154db8a79c363051e9c67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::iconChanged</definition>
        <argsstring>()</argsstring>
        <name>iconChanged</name>
        <qualifiedname>KWin::Window::iconChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1444" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1acce3d6f41f268ae1cff8183476ee6646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::activeChanged</definition>
        <argsstring>()</argsstring>
        <name>activeChanged</name>
        <qualifiedname>KWin::Window::activeChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1445" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a794a364234bf2bbcf77034e6061bf7af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::keepAboveChanged</definition>
        <argsstring>(bool)</argsstring>
        <name>keepAboveChanged</name>
        <qualifiedname>KWin::Window::keepAboveChanged</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1446" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1aceedecf8e018f3aede6fa947ea214d9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::keepBelowChanged</definition>
        <argsstring>(bool)</argsstring>
        <name>keepBelowChanged</name>
        <qualifiedname>KWin::Window::keepBelowChanged</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1447" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a48804c4aff5e086bf1af7651009d59ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::demandsAttentionChanged</definition>
        <argsstring>()</argsstring>
        <name>demandsAttentionChanged</name>
        <qualifiedname>KWin::Window::demandsAttentionChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted whenever the demands attention state changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1451" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a81dba7cdd2be7538645ff1a0718b6c7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::desktopsChanged</definition>
        <argsstring>()</argsstring>
        <name>desktopsChanged</name>
        <qualifiedname>KWin::Window::desktopsChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1452" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1ac86328eec92ac6f01ab3293a3d72064e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::activitiesChanged</definition>
        <argsstring>()</argsstring>
        <name>activitiesChanged</name>
        <qualifiedname>KWin::Window::activitiesChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1453" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1ab2768713cab0bc9b18ff28b39d3170ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::minimizedChanged</definition>
        <argsstring>()</argsstring>
        <name>minimizedChanged</name>
        <qualifiedname>KWin::Window::minimizedChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1454" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a9507fbaee33b1a8e28fbd6bf78779891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::paletteChanged</definition>
        <argsstring>(const QPalette &amp;p)</argsstring>
        <name>paletteChanged</name>
        <qualifiedname>KWin::Window::paletteChanged</qualifiedname>
        <param>
          <type>const QPalette &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1455" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a738cb732d11d98b2e6149400e134df11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::colorSchemeChanged</definition>
        <argsstring>()</argsstring>
        <name>colorSchemeChanged</name>
        <qualifiedname>KWin::Window::colorSchemeChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1456" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1aed9d3f3c470d1fa02c8cce52dbffa050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::captionChanged</definition>
        <argsstring>()</argsstring>
        <name>captionChanged</name>
        <qualifiedname>KWin::Window::captionChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1457" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1ac61e96f4f734de1446c475cfebb0cf0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::captionNormalChanged</definition>
        <argsstring>()</argsstring>
        <name>captionNormalChanged</name>
        <qualifiedname>KWin::Window::captionNormalChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1458" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1aab14ea30d0ecc3db40ba4abe981defc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::maximizedAboutToChange</definition>
        <argsstring>(MaximizeMode mode)</argsstring>
        <name>maximizedAboutToChange</name>
        <qualifiedname>KWin::Window::maximizedAboutToChange</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9" kindref="member">MaximizeMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1459" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a08cad7d21d3195ccc0829c2c0f1f9c95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::maximizedChanged</definition>
        <argsstring>()</argsstring>
        <name>maximizedChanged</name>
        <qualifiedname>KWin::Window::maximizedChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1460" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1af3e806181c0aa22d655b2396d6e0e05e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::transientChanged</definition>
        <argsstring>()</argsstring>
        <name>transientChanged</name>
        <qualifiedname>KWin::Window::transientChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1461" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a6a98d80986255b4543ca25ddc07e9ff2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::modalChanged</definition>
        <argsstring>()</argsstring>
        <name>modalChanged</name>
        <qualifiedname>KWin::Window::modalChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1462" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a8b05c56b34e456d2ffeec10eaef8fa5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::quickTileModeChanged</definition>
        <argsstring>()</argsstring>
        <name>quickTileModeChanged</name>
        <qualifiedname>KWin::Window::quickTileModeChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1463" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a9356b0ac19763187d49f27e195ad4c5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::moveResizedChanged</definition>
        <argsstring>()</argsstring>
        <name>moveResizedChanged</name>
        <qualifiedname>KWin::Window::moveResizedChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1464" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1afd3ab3a04af8f8ee6569e6389b1a7ac2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::moveResizeCursorChanged</definition>
        <argsstring>(CursorShape)</argsstring>
        <name>moveResizeCursorChanged</name>
        <qualifiedname>KWin::Window::moveResizeCursorChanged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_cursor_shape" kindref="compound">CursorShape</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1465" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a010201206994e942640621e136fb90c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::interactiveMoveResizeStarted</definition>
        <argsstring>()</argsstring>
        <name>interactiveMoveResizeStarted</name>
        <qualifiedname>KWin::Window::interactiveMoveResizeStarted</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1466" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a230ebb5d4b374435787377b7cb97ce4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::interactiveMoveResizeStepped</definition>
        <argsstring>(const QRectF &amp;geometry)</argsstring>
        <name>interactiveMoveResizeStepped</name>
        <qualifiedname>KWin::Window::interactiveMoveResizeStepped</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1467" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a6e7ab55b455103df20931b548729169a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::interactiveMoveResizeFinished</definition>
        <argsstring>()</argsstring>
        <name>interactiveMoveResizeFinished</name>
        <qualifiedname>KWin::Window::interactiveMoveResizeFinished</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1468" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1aab5733f9b923a691e38e6c06808a8ae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::closeableChanged</definition>
        <argsstring>(bool)</argsstring>
        <name>closeableChanged</name>
        <qualifiedname>KWin::Window::closeableChanged</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1469" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a7c419713c2fc34dfe096ae7dbde13e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::minimizeableChanged</definition>
        <argsstring>(bool)</argsstring>
        <name>minimizeableChanged</name>
        <qualifiedname>KWin::Window::minimizeableChanged</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1470" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a2021479eb63a57741fcbd1ff860bf3a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::shadeableChanged</definition>
        <argsstring>(bool)</argsstring>
        <name>shadeableChanged</name>
        <qualifiedname>KWin::Window::shadeableChanged</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1471" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a045c3913e8716caabc318263c012e073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::maximizeableChanged</definition>
        <argsstring>(bool)</argsstring>
        <name>maximizeableChanged</name>
        <qualifiedname>KWin::Window::maximizeableChanged</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1472" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1aa7c85eca2cfa19d7ea698cd46396c6dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::desktopFileNameChanged</definition>
        <argsstring>()</argsstring>
        <name>desktopFileNameChanged</name>
        <qualifiedname>KWin::Window::desktopFileNameChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1473" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a61be5e5de3298a63108f511acb5b3583" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::applicationMenuChanged</definition>
        <argsstring>()</argsstring>
        <name>applicationMenuChanged</name>
        <qualifiedname>KWin::Window::applicationMenuChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1474" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a71e3866d32586ef81815db5d089295f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::hasApplicationMenuChanged</definition>
        <argsstring>(bool)</argsstring>
        <name>hasApplicationMenuChanged</name>
        <qualifiedname>KWin::Window::hasApplicationMenuChanged</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1475" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a8160969459097d515917fcc1e5ec1ee3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::applicationMenuActiveChanged</definition>
        <argsstring>(bool)</argsstring>
        <name>applicationMenuActiveChanged</name>
        <qualifiedname>KWin::Window::applicationMenuActiveChanged</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1476" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1ad6fb29161438612c7904e7c1f1311e2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::unresponsiveChanged</definition>
        <argsstring>(bool)</argsstring>
        <name>unresponsiveChanged</name>
        <qualifiedname>KWin::Window::unresponsiveChanged</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1477" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a443109a5be24247d1ca26508fec82adc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::decorationChanged</definition>
        <argsstring>()</argsstring>
        <name>decorationChanged</name>
        <qualifiedname>KWin::Window::decorationChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1478" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1ade5c0d18d4d6deae42a63d61e54d5cdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::hiddenChanged</definition>
        <argsstring>()</argsstring>
        <name>hiddenChanged</name>
        <qualifiedname>KWin::Window::hiddenChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1479" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1aa42a6f9a69ad698d2f8709b6d831c4c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::hiddenByShowDesktopChanged</definition>
        <argsstring>()</argsstring>
        <name>hiddenByShowDesktopChanged</name>
        <qualifiedname>KWin::Window::hiddenByShowDesktopChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1480" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a43e6e0af4a0864ecfad30c5eda29c2d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::lockScreenOverlayChanged</definition>
        <argsstring>()</argsstring>
        <name>lockScreenOverlayChanged</name>
        <qualifiedname>KWin::Window::lockScreenOverlayChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1481" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a4890a0258935c363bad64f8681c3af11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::readyForPaintingChanged</definition>
        <argsstring>()</argsstring>
        <name>readyForPaintingChanged</name>
        <qualifiedname>KWin::Window::readyForPaintingChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1482" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a93879a21c2f72b3e4bb1e5eace66a2f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::maximizeGeometryRestoreChanged</definition>
        <argsstring>()</argsstring>
        <name>maximizeGeometryRestoreChanged</name>
        <qualifiedname>KWin::Window::maximizeGeometryRestoreChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1483" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a2887b7589490c544849ac1ecc9c9a48c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::fullscreenGeometryRestoreChanged</definition>
        <argsstring>()</argsstring>
        <name>fullscreenGeometryRestoreChanged</name>
        <qualifiedname>KWin::Window::fullscreenGeometryRestoreChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1484" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1a045818526d97d3965985db1204036bd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::offscreenRenderingChanged</definition>
        <argsstring>()</argsstring>
        <name>offscreenRenderingChanged</name>
        <qualifiedname>KWin::Window::offscreenRenderingChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1485" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1ab43215452b63309c9442dafde7f3f2c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::targetScaleChanged</definition>
        <argsstring>()</argsstring>
        <name>targetScaleChanged</name>
        <qualifiedname>KWin::Window::targetScaleChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1486" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1ad7f7aca73ef4e87e1626a377f2cd168c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::nextTargetScaleChanged</definition>
        <argsstring>()</argsstring>
        <name>nextTargetScaleChanged</name>
        <qualifiedname>KWin::Window::nextTargetScaleChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1487" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_window_1ad800920f411886a60d8a154c1bbb4e1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::noBorderChanged</definition>
        <argsstring>()</argsstring>
        <name>noBorderChanged</name>
        <qualifiedname>KWin::Window::noBorderChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1488" column="10"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_k_win_1_1_window_1a1f57b5fc7e5ebf9060435cacce04349d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::Window::Window</definition>
        <argsstring>()</argsstring>
        <name>Window</name>
        <qualifiedname>KWin::Window::Window</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1491" column="5" bodyfile="kwin/src/window.cpp" bodystart="60" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a3794a446f3a4460ef3417eefc3ef0ba6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_window_item" kindref="compound">WindowItem</ref> &gt;</type>
        <definition>virtual std::unique_ptr&lt; WindowItem &gt; KWin::Window::createItem</definition>
        <argsstring>(Item *parentItem)=0</argsstring>
        <name>createItem</name>
        <qualifiedname>KWin::Window::createItem</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1ab939587af1548d4a11f249af23314d96">createItem</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_wayland_window_1aa04e0815ef4142fb4a392d44c8ce570a">createItem</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1ab93c4bce424fac00751dc610977c09ac">createItem</reimplementedby>
        <param>
          <type><ref refid="class_k_win_1_1_item" kindref="compound">Item</ref> *</type>
          <declname>parentItem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1493" column="29"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a38800a8310bd13d63a6a3e18a50028d4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setResourceClass</definition>
        <argsstring>(const QString &amp;name, const QString &amp;className=QString())</argsstring>
        <name>setResourceClass</name>
        <qualifiedname>KWin::Window::setResourceClass</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>className</declname>
          <defval>QString()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1495" column="10" bodyfile="kwin/src/window.cpp" bodystart="176" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a8711a1631fd015356de884e9ced52c8d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setIcon</definition>
        <argsstring>(const QIcon &amp;icon)</argsstring>
        <name>setIcon</name>
        <qualifiedname>KWin::Window::setIcon</qualifiedname>
        <param>
          <type>const QIcon &amp;</type>
          <declname>icon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1496" column="10" bodyfile="kwin/src/window.cpp" bodystart="476" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a8e53686fbdb1f4670854388a074a6119" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::startAutoRaise</definition>
        <argsstring>()</argsstring>
        <name>startAutoRaise</name>
        <qualifiedname>KWin::Window::startAutoRaise</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1497" column="10" bodyfile="kwin/src/window.cpp" bodystart="652" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a05a5e1439ce60beaa523291624da5588" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::autoRaise</definition>
        <argsstring>()</argsstring>
        <name>autoRaise</name>
        <qualifiedname>KWin::Window::autoRaise</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1498" column="10" bodyfile="kwin/src/window.cpp" bodystart="667" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a9886564c812681bf934e6e9d8242a01e" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isMostRecentlyRaised</definition>
        <argsstring>() const</argsstring>
        <name>isMostRecentlyRaised</name>
        <qualifiedname>KWin::Window::isMostRecentlyRaised</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1499" column="10" bodyfile="kwin/src/window.cpp" bodystart="673" bodyend="677"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a159ea1bd3bc5d490f99c9b158fbf8fcf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::markAsDeleted</definition>
        <argsstring>()</argsstring>
        <name>markAsDeleted</name>
        <qualifiedname>KWin::Window::markAsDeleted</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1500" column="10" bodyfile="kwin/src/window.cpp" bodystart="527" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a23bedb297b84a5d7e0590617375fcce3" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool KWin::Window::acceptsFocus</definition>
        <argsstring>() const =0</argsstring>
        <name>acceptsFocus</name>
        <qualifiedname>KWin::Window::acceptsFocus</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_input_panel_v1_window_1a1a327bf23abe545fb3a4fb16fbf7595d">acceptsFocus</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a67431ae8b4d4a1675ca5e78b5970ab52">acceptsFocus</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_layer_shell_v1_window_1a001526ce4c4ddb3ef09b162d44918b99">acceptsFocus</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1ab4476c8a103a3e93bc655994eece0a4e">acceptsFocus</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_popup_window_1ac906e62e4c82207b07e2d5ae8b57f114">acceptsFocus</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1ad5b768fc384f6ac418be6c57c083c2d3">acceptsFocus</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the window accepts focus. The difference to wantsInput is that the implementation should not check rules and return what the window effectively supports. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1506" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a1e64a5d22f780662ce2b05c5fca3aac1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::doSetActive</definition>
        <argsstring>()</argsstring>
        <name>doSetActive</name>
        <qualifiedname>KWin::Window::doSetActive</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_wayland_window_1a350999494330463e195c6a7fe062dc16">doSetActive</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a4fa8ec1c4db212569b556385ecb1ee01">doSetActive</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1ab339117d334586f9df78bccd60e8927b">doSetActive</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called from setActive once the active value got updated, but before the changed signal is emitted.</para>
<para>Default implementation does nothing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1513" column="18" bodyfile="kwin/src/window.cpp" bodystart="518" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a8d860fefa08b9a1edaa6d78140e02570" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::doSetKeepAbove</definition>
        <argsstring>()</argsstring>
        <name>doSetKeepAbove</name>
        <qualifiedname>KWin::Window::doSetKeepAbove</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1ae94b05487c33de67d84da9933dea483d">doSetKeepAbove</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called from setKeepAbove once the keepBelow value got updated, but before the changed signal is emitted.</para>
<para>Default implementation does nothing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1520" column="18" bodyfile="kwin/src/window.cpp" bodystart="627" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ab1a3b85114d894d0615e94869e3ced47" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::doSetKeepBelow</definition>
        <argsstring>()</argsstring>
        <name>doSetKeepBelow</name>
        <qualifiedname>KWin::Window::doSetKeepBelow</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a447de9e09e0220d08054450e1246cd0b">doSetKeepBelow</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called from setKeepBelow once the keepBelow value got updated, but before the changed signal is emitted.</para>
<para>Default implementation does nothing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1527" column="18" bodyfile="kwin/src/window.cpp" bodystart="648" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ad6b5cfb1fda2ae3be8157024383d4f31" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::doSetShade</definition>
        <argsstring>(ShadeMode previousShadeMode)</argsstring>
        <name>doSetShade</name>
        <qualifiedname>KWin::Window::doSetShade</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a11e2054319bd2f62b5bc58f487c4ce1f">doSetShade</reimplementedby>
        <param>
          <type><ref refid="namespace_k_win_1a14799797d985d6375dd7684fff01585f" kindref="member">ShadeMode</ref></type>
          <declname>previousShadeMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called from <ref refid="class_k_win_1_1_window_1a14232d4a0703db154fc0f506be5a675a" kindref="member">setShade()</ref> once the shadeMode value got updated, but before the changed signal is emitted.</para>
<para>Default implementation does nothing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1534" column="18" bodyfile="kwin/src/window.cpp" bodystart="880" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a53cf8bb1eaf10d2331ee121651054327" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::doSetDesktop</definition>
        <argsstring>()</argsstring>
        <name>doSetDesktop</name>
        <qualifiedname>KWin::Window::doSetDesktop</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a89be160951e8e68c8586d664dfc6b8d8">doSetDesktop</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called from setDeskop once the desktop value got updated, but before the changed signal is emitted.</para>
<para>Default implementation does nothing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1541" column="18" bodyfile="kwin/src/window.cpp" bodystart="759" bodyend="761"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ac7fddb149ff502da3b73ba871ab63dc5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::doSetOnActivities</definition>
        <argsstring>(const QStringList &amp;activityList)</argsstring>
        <name>doSetOnActivities</name>
        <qualifiedname>KWin::Window::doSetOnActivities</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a10036002d7b8d3da31ad81aa0d00cea3">doSetOnActivities</reimplementedby>
        <param>
          <type>const QStringList &amp;</type>
          <declname>activityList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called from <ref refid="class_k_win_1_1_window_1a7e638bc0587a8f3df06238420f94962f" kindref="member">setOnActivities</ref> just after the activity list member has been updated, but before <ref refid="class_k_win_1_1_window_1a819092f9968d638a17b8e857e092d0f1" kindref="member">updateActivities</ref> is called.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>activityList</parametername>
</parameternamelist>
<parameterdescription>
<para>the new list of activities set on that window</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Default implementation does nothing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1550" column="18" bodyfile="kwin/src/window.cpp" bodystart="3330" bodyend="3332"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a169597f62ca6a017611d4e45a0ee3f51" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::doMinimize</definition>
        <argsstring>()</argsstring>
        <name>doMinimize</name>
        <qualifiedname>KWin::Window::doMinimize</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a3c09d6423fde800b97331f19ce1b41d1">doMinimize</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a79361f75ac807a4ae6a3816a0514105d">doMinimize</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called from minimize and unminimize once the minimized value got updated, but before the changed signal is emitted.</para>
<para>Default implementation does nothig. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1557" column="18" bodyfile="kwin/src/window.cpp" bodystart="978" bodyend="980"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a81a6373276b07edb20b368f23754b287" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool KWin::Window::belongsToSameApplication</definition>
        <argsstring>(const Window *other, SameApplicationChecks checks) const =0</argsstring>
        <name>belongsToSameApplication</name>
        <qualifiedname>KWin::Window::belongsToSameApplication</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a45d01fbcbd7512b9fb0ec8d5561fdb05">belongsToSameApplication</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_wayland_window_1a4b9953d1901af40b3ea9568eebdd76f5">belongsToSameApplication</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a7edf1d1b28b1cc4671453865e584838e">belongsToSameApplication</reimplementedby>
        <param>
          <type>const <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>other</declname>
        </param>
        <param>
          <type>SameApplicationChecks</type>
          <declname>checks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1558" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a06f9cf76ca564c6f316aee843a737947" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::doSetSkipTaskbar</definition>
        <argsstring>()</argsstring>
        <name>doSetSkipTaskbar</name>
        <qualifiedname>KWin::Window::doSetSkipTaskbar</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a5c78c11f4dd95862340687f15c814811">doSetSkipTaskbar</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1560" column="18" bodyfile="kwin/src/window.cpp" bodystart="468" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ae149e3bb83a2a8dd3b8873365ff9c92a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::doSetSkipPager</definition>
        <argsstring>()</argsstring>
        <name>doSetSkipPager</name>
        <qualifiedname>KWin::Window::doSetSkipPager</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a4ad23dbc6476b4f95483c5f0ad860106">doSetSkipPager</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1561" column="18" bodyfile="kwin/src/window.cpp" bodystart="447" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a81def43f2990e5a40812c0e076c04565" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::doSetSkipSwitcher</definition>
        <argsstring>()</argsstring>
        <name>doSetSkipSwitcher</name>
        <qualifiedname>KWin::Window::doSetSkipSwitcher</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a3aca1f96ad4178f21a8810796590277a">doSetSkipSwitcher</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1562" column="18" bodyfile="kwin/src/window.cpp" bodystart="472" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ad144363e2fe2d6713183d99099928687" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::doSetDemandsAttention</definition>
        <argsstring>()</argsstring>
        <name>doSetDemandsAttention</name>
        <qualifiedname>KWin::Window::doSetDemandsAttention</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a3bdcc0a857c8fda2ee05bbc5c47c96c0">doSetDemandsAttention</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1563" column="18" bodyfile="kwin/src/window.cpp" bodystart="704" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1afed2df13c860037d7c04502b2b681c90" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::doSetQuickTileMode</definition>
        <argsstring>()</argsstring>
        <name>doSetQuickTileMode</name>
        <qualifiedname>KWin::Window::doSetQuickTileMode</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1ad843fc6a8f011780582ce42211b46050">doSetQuickTileMode</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a6face565c30b8b90caa83c7ed5dbe0d2">doSetQuickTileMode</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1564" column="18" bodyfile="kwin/src/window.cpp" bodystart="3928" bodyend="3930"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1acfcb309859b64b65e4f9bfdd3593e831" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::doSetHidden</definition>
        <argsstring>()</argsstring>
        <name>doSetHidden</name>
        <qualifiedname>KWin::Window::doSetHidden</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a124e9b6187a7437ba1793d49fc930bdd">doSetHidden</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1565" column="18" bodyfile="kwin/src/window.cpp" bodystart="3932" bodyend="3934"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a9a8e4718ca55a6dbbd4a510b1f6dd7c0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::doSetHiddenByShowDesktop</definition>
        <argsstring>()</argsstring>
        <name>doSetHiddenByShowDesktop</name>
        <qualifiedname>KWin::Window::doSetHiddenByShowDesktop</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a8deba3f1d527b47bcb3d515454489c36">doSetHiddenByShowDesktop</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1566" column="18" bodyfile="kwin/src/window.cpp" bodystart="3936" bodyend="3938"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ac16917dcfe5318a0e971eea28044dfda" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::doSetSuspended</definition>
        <argsstring>()</argsstring>
        <name>doSetSuspended</name>
        <qualifiedname>KWin::Window::doSetSuspended</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1adaf123ee7b121562e868b675d529742c">doSetSuspended</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1567" column="18" bodyfile="kwin/src/window.cpp" bodystart="4667" bodyend="4669"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a7a1e7cdb03f5e88cbda4cd80dc1e91c0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::doSetModal</definition>
        <argsstring>()</argsstring>
        <name>doSetModal</name>
        <qualifiedname>KWin::Window::doSetModal</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a1afbbc09234d7576021ef2712df14356">doSetModal</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1568" column="18" bodyfile="kwin/src/window.cpp" bodystart="4671" bodyend="4673"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a629aaa055471ec8d1b61969412279e35" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::doSetNextTargetScale</definition>
        <argsstring>()</argsstring>
        <name>doSetNextTargetScale</name>
        <qualifiedname>KWin::Window::doSetNextTargetScale</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_input_panel_v1_window_1aecd5673a3bdf0461d3a19989551b9768">doSetNextTargetScale</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_internal_window_1af5f5c54d70e0e6dbbceee9712bcf1639">doSetNextTargetScale</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_layer_shell_v1_window_1a3d83db05080b8227e80416ac7114e665">doSetNextTargetScale</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a7ce42f5c44d15f53dbdab7dab49a0b0b">doSetNextTargetScale</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_popup_window_1ab3f0f7cd0c10f1464849b8454398446e">doSetNextTargetScale</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1ab0d2c331c04d05cd526da1e941453626">doSetNextTargetScale</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1569" column="18" bodyfile="kwin/src/window.cpp" bodystart="4689" bodyend="4691"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a2f020c644990bff80970d402c46c00a7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::doSetPreferredBufferTransform</definition>
        <argsstring>()</argsstring>
        <name>doSetPreferredBufferTransform</name>
        <qualifiedname>KWin::Window::doSetPreferredBufferTransform</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_input_panel_v1_window_1a6837702f0d8176a203703315b9ca5ea2">doSetPreferredBufferTransform</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_layer_shell_v1_window_1a3c3a6bd978f7e974382822365c834b07">doSetPreferredBufferTransform</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_popup_window_1a8c9c20db0ab01610d6178a0c1d92e7d1">doSetPreferredBufferTransform</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a1e766a5d3fddeb39ae9797f9aa554aa7">doSetPreferredBufferTransform</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1570" column="18" bodyfile="kwin/src/window.cpp" bodystart="4719" bodyend="4721"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1afe71e723a27aeb466c819f673890babc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::doSetPreferredColorDescription</definition>
        <argsstring>()</argsstring>
        <name>doSetPreferredColorDescription</name>
        <qualifiedname>KWin::Window::doSetPreferredColorDescription</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_input_panel_v1_window_1a591be5252e2fdc8d265622b1cfda104f">doSetPreferredColorDescription</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_layer_shell_v1_window_1abaf872da5fb64831368f7c712ea6c321">doSetPreferredColorDescription</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_popup_window_1a5bfb7f872f12519218063ed9f22a7428">doSetPreferredColorDescription</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1ac4b372156c5bdea5ef0d65368fc647cb">doSetPreferredColorDescription</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1571" column="18" bodyfile="kwin/src/window.cpp" bodystart="4741" bodyend="4743"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a0ff6b1fc41b88953d7f641a33492e54d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setupWindowManagementInterface</definition>
        <argsstring>()</argsstring>
        <name>setupWindowManagementInterface</name>
        <qualifiedname>KWin::Window::setupWindowManagementInterface</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1573" column="10" bodyfile="kwin/src/window.cpp" bodystart="1827" bodyend="2021"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a13609b056f02453c5006ea28d6de94b3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::destroyWindowManagementInterface</definition>
        <argsstring>()</argsstring>
        <name>destroyWindowManagementInterface</name>
        <qualifiedname>KWin::Window::destroyWindowManagementInterface</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1574" column="10" bodyfile="kwin/src/window.cpp" bodystart="2023" bodyend="2027"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ace7499c5c0613f2a0389de51ab135971" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::updateColorScheme</definition>
        <argsstring>()</argsstring>
        <name>updateColorScheme</name>
        <qualifiedname>KWin::Window::updateColorScheme</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1575" column="10" bodyfile="kwin/src/window.cpp" bodystart="1029" bodyend="1032"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a20b6b5cdac1f6b8f13dc04f3e05802a2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::ensurePalette</definition>
        <argsstring>()</argsstring>
        <name>ensurePalette</name>
        <qualifiedname>KWin::Window::ensurePalette</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1576" column="10" bodyfile="kwin/src/window.cpp" bodystart="1034" bodyend="1065"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a53b2543bc269052c7c508b531dc816a3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::handlePaletteChange</definition>
        <argsstring>()</argsstring>
        <name>handlePaletteChange</name>
        <qualifiedname>KWin::Window::handlePaletteChange</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1577" column="10" bodyfile="kwin/src/window.cpp" bodystart="1067" bodyend="1070"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a7fe5b288df23738ad6d2e9565c9f1ed8" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_k_win_1ad43bbfea407edd7454680404fd8f3a7b" kindref="member">Layer</ref></type>
        <definition>Layer KWin::Window::belongsToLayer</definition>
        <argsstring>() const</argsstring>
        <name>belongsToLayer</name>
        <qualifiedname>KWin::Window::belongsToLayer</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_layer_shell_v1_window_1a787a81433528702a7f22be62d356cbcc">belongsToLayer</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1579" column="19" bodyfile="kwin/src/window.cpp" bodystart="554" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a6af763334d4b8f6e15dab019710e6fde" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isActiveFullScreen</definition>
        <argsstring>() const</argsstring>
        <name>isActiveFullScreen</name>
        <qualifiedname>KWin::Window::isActiveFullScreen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1580" column="10" bodyfile="kwin/src/window.cpp" bodystart="2435" bodyend="2446"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a57e519ab516032f0d9d74016c1229f1d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setElectricBorderMode</definition>
        <argsstring>(std::optional&lt; ElectricBorderMode &gt; mode)</argsstring>
        <name>setElectricBorderMode</name>
        <qualifiedname>KWin::Window::setElectricBorderMode</qualifiedname>
        <param>
          <type>std::optional&lt; <ref refid="namespace_k_win_1a43c059c9fd683dba8da0f59f90c934ee" kindref="member">ElectricBorderMode</ref> &gt;</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1583" column="10" bodyfile="kwin/src/window.cpp" bodystart="3565" bodyend="3568"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1abd7f4cf5b59018602262ca9ec54e419e" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; <ref refid="namespace_k_win_1a43c059c9fd683dba8da0f59f90c934ee" kindref="member">ElectricBorderMode</ref> &gt;</type>
        <definition>std::optional&lt; ElectricBorderMode &gt; KWin::Window::electricBorderMode</definition>
        <argsstring>() const</argsstring>
        <name>electricBorderMode</name>
        <qualifiedname>KWin::Window::electricBorderMode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1584" column="19" bodyfile="kwin/src/window.h" bodystart="1584" bodyend="1587"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a8daebb2d16d0caf9dd9e9db6322b47de" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setElectricBorderMaximizing</definition>
        <argsstring>(bool maximizing)</argsstring>
        <name>setElectricBorderMaximizing</name>
        <qualifiedname>KWin::Window::setElectricBorderMaximizing</qualifiedname>
        <param>
          <type>bool</type>
          <declname>maximizing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1588" column="10" bodyfile="kwin/src/window.cpp" bodystart="3570" bodyend="3582"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ac0833d8fcb7badada14ec1ab9a1a7729" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isElectricBorderMaximizing</definition>
        <argsstring>() const</argsstring>
        <name>isElectricBorderMaximizing</name>
        <qualifiedname>KWin::Window::isElectricBorderMaximizing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1589" column="10" bodyfile="kwin/src/window.h" bodystart="1589" bodyend="1592"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af21a731d416e0b1a9390d85e629b0c98" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::updateElectricGeometryRestore</definition>
        <argsstring>()</argsstring>
        <name>updateElectricGeometryRestore</name>
        <qualifiedname>KWin::Window::updateElectricGeometryRestore</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1593" column="10" bodyfile="kwin/src/window.cpp" bodystart="3610" bodyend="3623"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a3df1363787b3578160154bf8b472c6d2" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::quickTileGeometryRestore</definition>
        <argsstring>() const</argsstring>
        <name>quickTileGeometryRestore</name>
        <qualifiedname>KWin::Window::quickTileGeometryRestore</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1594" column="12" bodyfile="kwin/src/window.cpp" bodystart="3625" bodyend="3637"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aee9db3fc7ca52ecdaf42b7a77137c238" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::quickTileGeometry</definition>
        <argsstring>(QuickTileMode mode, const QPointF &amp;pos) const</argsstring>
        <name>quickTileGeometry</name>
        <qualifiedname>KWin::Window::quickTileGeometry</qualifiedname>
        <param>
          <type>QuickTileMode</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1595" column="12" bodyfile="kwin/src/window.cpp" bodystart="3584" bodyend="3600"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ae3e09a76bdd4d8b7faea845fd8a37e7f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::exitQuickTileMode</definition>
        <argsstring>()</argsstring>
        <name>exitQuickTileMode</name>
        <qualifiedname>KWin::Window::exitQuickTileMode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1596" column="10" bodyfile="kwin/src/window.cpp" bodystart="3602" bodyend="3608"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a0b6dba6ec28ac38cae39cc392c735970" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::checkOffscreenPosition</definition>
        <argsstring>(QRectF *geom, const QRectF &amp;screenArea)</argsstring>
        <name>checkOffscreenPosition</name>
        <qualifiedname>KWin::Window::checkOffscreenPosition</qualifiedname>
        <param>
          <type>QRectF *</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>screenArea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1599" column="10" bodyfile="kwin/src/window.cpp" bodystart="4228" bodyend="4240"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a704f2db4a15f2ca4e6ae0b163e73c708" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>qreal KWin::Window::borderLeft</definition>
        <argsstring>() const</argsstring>
        <name>borderLeft</name>
        <qualifiedname>KWin::Window::borderLeft</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1600" column="11" bodyfile="kwin/src/window.cpp" bodystart="2453" bodyend="2456"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a3309d429b01d3670e9fcf4f54917ce46" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>qreal KWin::Window::borderRight</definition>
        <argsstring>() const</argsstring>
        <name>borderRight</name>
        <qualifiedname>KWin::Window::borderRight</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1601" column="11" bodyfile="kwin/src/window.cpp" bodystart="2458" bodyend="2461"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a079dfba93240f19cadab52f478e48e84" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>qreal KWin::Window::borderTop</definition>
        <argsstring>() const</argsstring>
        <name>borderTop</name>
        <qualifiedname>KWin::Window::borderTop</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1602" column="11" bodyfile="kwin/src/window.cpp" bodystart="2463" bodyend="2466"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a7b47bcdf2ffd2ba3113725d2ebfaf822" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>qreal KWin::Window::borderBottom</definition>
        <argsstring>() const</argsstring>
        <name>borderBottom</name>
        <qualifiedname>KWin::Window::borderBottom</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1603" column="11" bodyfile="kwin/src/window.cpp" bodystart="2448" bodyend="2451"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1afac271a8d3eb8a6d16e65ba261713a8a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void KWin::Window::moveResizeInternal</definition>
        <argsstring>(const QRectF &amp;rect, MoveResizeMode mode)=0</argsstring>
        <name>moveResizeInternal</name>
        <qualifiedname>KWin::Window::moveResizeInternal</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_input_panel_v1_window_1ac2a441f185dfb064b5f202b9b95102ac">moveResizeInternal</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a472bf09e0d0e62a2d5a86532f61a5fa3">moveResizeInternal</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_layer_shell_v1_window_1a812b600d7379eb1ae747e7caa7f3a2df">moveResizeInternal</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1ab85e615def62c1eb2728972d090b5bf5">moveResizeInternal</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_surface_window_1af7185d49fb004b9263fbef9464467a1e">moveResizeInternal</reimplementedby>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_window_1a412b316294522eb307c31fb2155e82e9" kindref="member">MoveResizeMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1611" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a52812fb30393688827b36f5ff51c1a6d" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isInteractiveMoveResize</definition>
        <argsstring>() const</argsstring>
        <name>isInteractiveMoveResize</name>
        <qualifiedname>KWin::Window::isInteractiveMoveResize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> is currently in move resize mode </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1616" column="10" bodyfile="kwin/src/window.h" bodystart="1616" bodyend="1619"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a3ac078b88d06393b75e7ba06d5b934c8" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setInteractiveMoveResize</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setInteractiveMoveResize</name>
        <qualifiedname>KWin::Window::setInteractiveMoveResize</qualifiedname>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> is in move resize mode to <computeroutput>enabled</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1623" column="10" bodyfile="kwin/src/window.h" bodystart="1623" bodyend="1626"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a419a9bbda60e3f84216574ec05f4787a" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setInteractiveMoveResizeAnchor</definition>
        <argsstring>(const QPointF &amp;anchor)</argsstring>
        <name>setInteractiveMoveResizeAnchor</name>
        <qualifiedname>KWin::Window::setInteractiveMoveResizeAnchor</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>anchor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1627" column="10" bodyfile="kwin/src/window.h" bodystart="1627" bodyend="1630"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a00035dedbdce6b18de9f323c8a12ebac" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setInteractiveMoveResizeModifiers</definition>
        <argsstring>(Qt::KeyboardModifiers modifiers)</argsstring>
        <name>setInteractiveMoveResizeModifiers</name>
        <qualifiedname>KWin::Window::setInteractiveMoveResizeModifiers</qualifiedname>
        <param>
          <type>Qt::KeyboardModifiers</type>
          <declname>modifiers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1631" column="10" bodyfile="kwin/src/window.h" bodystart="1631" bodyend="1634"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a39aab7cbfbd4db666f1c5dce5028a2a6" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isUnrestrictedInteractiveMoveResize</definition>
        <argsstring>() const</argsstring>
        <name>isUnrestrictedInteractiveMoveResize</name>
        <qualifiedname>KWin::Window::isUnrestrictedInteractiveMoveResize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether the move resize mode is unrestricted. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1638" column="10" bodyfile="kwin/src/window.h" bodystart="1638" bodyend="1641"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a78a086d817f68eeedf87e3e49706b3da" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setUnrestrictedInteractiveMoveResize</definition>
        <argsstring>(bool set)</argsstring>
        <name>setUnrestrictedInteractiveMoveResize</name>
        <qualifiedname>KWin::Window::setUnrestrictedInteractiveMoveResize</qualifiedname>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether move resize mode is unrestricted to <computeroutput>set</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1645" column="10" bodyfile="kwin/src/window.h" bodystart="1645" bodyend="1648"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a087ebcf075b63c7581b7bf3c55fab2ef" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::Window::interactiveMoveOffset</definition>
        <argsstring>() const</argsstring>
        <name>interactiveMoveOffset</name>
        <qualifiedname>KWin::Window::interactiveMoveOffset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Normalized position of the move resize anchor point relative to the top-left window corner when the move resize operation started.</para>
<para>QPointF(0, 0) corresponds to the top left window corner, QPointF(1, 1) corresponds to the bottom right window corner. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1656" column="13" bodyfile="kwin/src/window.h" bodystart="1656" bodyend="1659"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a7e62656d305c8cceba734c4f362d3249" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setInteractiveMoveOffset</definition>
        <argsstring>(const QPointF &amp;offset)</argsstring>
        <name>setInteractiveMoveOffset</name>
        <qualifiedname>KWin::Window::setInteractiveMoveOffset</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1660" column="10" bodyfile="kwin/src/window.h" bodystart="1660" bodyend="1663"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a2c99107d19da560ccc18cb3b8c4a59fc" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::initialInteractiveMoveResizeGeometry</definition>
        <argsstring>() const</argsstring>
        <name>initialInteractiveMoveResizeGeometry</name>
        <qualifiedname>KWin::Window::initialInteractiveMoveResizeGeometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1664" column="12" bodyfile="kwin/src/window.h" bodystart="1664" bodyend="1667"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a8653343fc420debd4ffb00938488a736" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setMoveResizeGeometry</definition>
        <argsstring>(const QRectF &amp;geo)</argsstring>
        <name>setMoveResizeGeometry</name>
        <qualifiedname>KWin::Window::setMoveResizeGeometry</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>geo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1668" column="10" bodyfile="kwin/src/window.cpp" bodystart="3496" bodyend="3500"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a5b6daf48e5a5dfacc4c06034357cee70" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setInteractiveMoveResizeGravity</definition>
        <argsstring>(Gravity gravity)</argsstring>
        <name>setInteractiveMoveResizeGravity</name>
        <qualifiedname>KWin::Window::setInteractiveMoveResizeGravity</qualifiedname>
        <param>
          <type><ref refid="namespace_k_win_1a09aef7c112a8b0cdfb6e27a081d50dc8" kindref="member">Gravity</ref></type>
          <declname>gravity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1669" column="10" bodyfile="kwin/src/window.h" bodystart="1669" bodyend="1672"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a14a4d0eae0024af8a7c3d9fc9cbfa4df" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isInteractiveMoveResizePointerButtonDown</definition>
        <argsstring>() const</argsstring>
        <name>isInteractiveMoveResizePointerButtonDown</name>
        <qualifiedname>KWin::Window::isInteractiveMoveResizePointerButtonDown</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1673" column="10" bodyfile="kwin/src/window.h" bodystart="1673" bodyend="1676"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a2c4200a7f6de700eb03c3b48a86a2fdd" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setInteractiveMoveResizePointerButtonDown</definition>
        <argsstring>(bool down)</argsstring>
        <name>setInteractiveMoveResizePointerButtonDown</name>
        <qualifiedname>KWin::Window::setInteractiveMoveResizePointerButtonDown</qualifiedname>
        <param>
          <type>bool</type>
          <declname>down</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1677" column="10" bodyfile="kwin/src/window.h" bodystart="1677" bodyend="1680"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a9361cc41442c34180031739b1f4bac4b" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
        <definition>Output * KWin::Window::interactiveMoveResizeStartOutput</definition>
        <argsstring>() const</argsstring>
        <name>interactiveMoveResizeStartOutput</name>
        <qualifiedname>KWin::Window::interactiveMoveResizeStartOutput</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1681" column="12" bodyfile="kwin/src/window.h" bodystart="1681" bodyend="1684"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a15a841d9d2201aa7b90f24168632ff4c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::checkUnrestrictedInteractiveMoveResize</definition>
        <argsstring>()</argsstring>
        <name>checkUnrestrictedInteractiveMoveResize</name>
        <qualifiedname>KWin::Window::checkUnrestrictedInteractiveMoveResize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1685" column="10" bodyfile="kwin/src/window.cpp" bodystart="1226" bodyend="1257"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ac3324745eae4f1e36c81876c373ffe5e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::updateCursor</definition>
        <argsstring>()</argsstring>
        <name>updateCursor</name>
        <qualifiedname>KWin::Window::updateCursor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets an appropriate cursor shape for the logical mouse position. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1689" column="10" bodyfile="kwin/src/window.cpp" bodystart="2468" bodyend="2516"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a30f65669aaec9f5dda9b01d987466f7b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::startDelayedInteractiveMoveResize</definition>
        <argsstring>()</argsstring>
        <name>startDelayedInteractiveMoveResize</name>
        <qualifiedname>KWin::Window::startDelayedInteractiveMoveResize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1690" column="10" bodyfile="kwin/src/window.cpp" bodystart="1262" bodyend="1279"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af36f8d8979cc3ffb49d244fd04541f0f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::stopDelayedInteractiveMoveResize</definition>
        <argsstring>()</argsstring>
        <name>stopDelayedInteractiveMoveResize</name>
        <qualifiedname>KWin::Window::stopDelayedInteractiveMoveResize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1691" column="10" bodyfile="kwin/src/window.cpp" bodystart="1281" bodyend="1285"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a4470354b4fa88d30ee3c7667d77c7b9c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Window::startInteractiveMoveResize</definition>
        <argsstring>()</argsstring>
        <name>startInteractiveMoveResize</name>
        <qualifiedname>KWin::Window::startInteractiveMoveResize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1692" column="10" bodyfile="kwin/src/window.cpp" bodystart="1139" bodyend="1178"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a1225fe6301b15744feb468fa81c52d21" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::doStartInteractiveMoveResize</definition>
        <argsstring>()</argsstring>
        <name>doStartInteractiveMoveResize</name>
        <qualifiedname>KWin::Window::doStartInteractiveMoveResize</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a2ee9d540a71bb037e7c5fce48c52ef25">doStartInteractiveMoveResize</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called from startMoveResize.</para>
<para>Implementing classes should return <computeroutput>false</computeroutput> if starting move resize should get aborted. In that case startMoveResize will also return <computeroutput>false</computeroutput>.</para>
<para>Base implementation returns <computeroutput>true</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1701" column="18" bodyfile="kwin/src/window.cpp" bodystart="2530" bodyend="2533"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ac94cdf63c71362a86dc28ecb5e40a1bc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::doFinishInteractiveMoveResize</definition>
        <argsstring>()</argsstring>
        <name>doFinishInteractiveMoveResize</name>
        <qualifiedname>KWin::Window::doFinishInteractiveMoveResize</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a6816c54a596abcac889814251091d070">doFinishInteractiveMoveResize</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1702" column="18" bodyfile="kwin/src/window.cpp" bodystart="2535" bodyend="2537"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a6978b71453df0de95f4822332b1be103" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::finishInteractiveMoveResize</definition>
        <argsstring>(bool cancel)</argsstring>
        <name>finishInteractiveMoveResize</name>
        <qualifiedname>KWin::Window::finishInteractiveMoveResize</qualifiedname>
        <param>
          <type>bool</type>
          <declname>cancel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1703" column="10" bodyfile="kwin/src/window.cpp" bodystart="1180" bodyend="1220"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ad31baea5b1b98cc7a01b21e6b527f77a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::leaveInteractiveMoveResize</definition>
        <argsstring>()</argsstring>
        <name>leaveInteractiveMoveResize</name>
        <qualifiedname>KWin::Window::leaveInteractiveMoveResize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Leaves the move resize mode.</para>
<para>Inheriting classes must invoke the base implementation which ensures that the internal mode is properly ended. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1710" column="18" bodyfile="kwin/src/window.cpp" bodystart="2518" bodyend="2528"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a841ef2a66e586b3cfb6aadd65e179419" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::checkQuickTilingMaximizationZones</definition>
        <argsstring>(int xroot, int yroot)</argsstring>
        <name>checkQuickTilingMaximizationZones</name>
        <qualifiedname>KWin::Window::checkQuickTilingMaximizationZones</qualifiedname>
        <param>
          <type>int</type>
          <declname>xroot</declname>
        </param>
        <param>
          <type>int</type>
          <declname>yroot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1715" column="10" bodyfile="kwin/src/window.cpp" bodystart="2548" bodyend="2614"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aa5afd7d435f68d9fdfe23ae20b954bc6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::resetQuickTilingMaximizationZones</definition>
        <argsstring>()</argsstring>
        <name>resetQuickTilingMaximizationZones</name>
        <qualifiedname>KWin::Window::resetQuickTilingMaximizationZones</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1716" column="10" bodyfile="kwin/src/window.cpp" bodystart="2616" bodyend="2625"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a340e12bfbaf12ad16dc20e49e1fda8ee" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::Window::isWaitingForInteractiveResizeSync</definition>
        <argsstring>() const</argsstring>
        <name>isWaitingForInteractiveResizeSync</name>
        <qualifiedname>KWin::Window::isWaitingForInteractiveResizeSync</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a665e5bdd8f2e9a9f11dc1fb05c679913">isWaitingForInteractiveResizeSync</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether a sync request is still pending. Default implementation returns <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1721" column="18" bodyfile="kwin/src/window.cpp" bodystart="2539" bodyend="2542"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a73ece0a5a9b6157cb1c10461a3ccb1fe" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::doInteractiveResizeSync</definition>
        <argsstring>(const QRectF &amp;rect)</argsstring>
        <name>doInteractiveResizeSync</name>
        <qualifiedname>KWin::Window::doInteractiveResizeSync</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a01d5754d606a7dd9661a97e626125863">doInteractiveResizeSync</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a48fff76cf728cffc9101af2bcdb2dd93">doInteractiveResizeSync</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_xdg_toplevel_window_1a3dd7d01e4b7d5dff9a00f99ac7332bcb">doInteractiveResizeSync</reimplementedby>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called during handling a resize. Implementing subclasses can use this method to perform windowing system specific syncing.</para>
<para>Default implementation does nothing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1728" column="18" bodyfile="kwin/src/window.cpp" bodystart="2544" bodyend="2546"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af6431be1b6486b44c17c218703fe5c28" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>qreal KWin::Window::titlebarThickness</definition>
        <argsstring>() const</argsstring>
        <name>titlebarThickness</name>
        <qualifiedname>KWin::Window::titlebarThickness</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1729" column="11" bodyfile="kwin/src/window.cpp" bodystart="1415" bodyend="1428"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ad599d6c840d9fd09232e753638a16b54" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::nextInteractiveMoveGeometry</definition>
        <argsstring>(const QPointF &amp;global) const</argsstring>
        <name>nextInteractiveMoveGeometry</name>
        <qualifiedname>KWin::Window::nextInteractiveMoveGeometry</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>global</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1730" column="12" bodyfile="kwin/src/window.cpp" bodystart="1778" bodyend="1797"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a695c280f8767b14eced4e9dbd0422431" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::nextInteractiveResizeGeometry</definition>
        <argsstring>(const QPointF &amp;global) const</argsstring>
        <name>nextInteractiveResizeGeometry</name>
        <qualifiedname>KWin::Window::nextInteractiveResizeGeometry</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>global</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1731" column="12" bodyfile="kwin/src/window.cpp" bodystart="1666" bodyend="1776"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ac40923cee6c26120f57174bde42a37eb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::dontInteractiveMoveResize</definition>
        <argsstring>()</argsstring>
        <name>dontInteractiveMoveResize</name>
        <qualifiedname>KWin::Window::dontInteractiveMoveResize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1732" column="10" bodyfile="kwin/src/window.cpp" bodystart="2673" bodyend="2680"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a2570c494a29c3c06a6b47230592e97c4" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::Window::resizeIncrements</definition>
        <argsstring>() const</argsstring>
        <name>resizeIncrements</name>
        <qualifiedname>KWin::Window::resizeIncrements</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a95a7ebb34d5d7127053c50e64415d164">resizeIncrements</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1734" column="20" bodyfile="kwin/src/window.cpp" bodystart="2668" bodyend="2671"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a167b374ab7f2cd2da20250457a4fc2d2" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1a09aef7c112a8b0cdfb6e27a081d50dc8" kindref="member">Gravity</ref></type>
        <definition>Gravity KWin::Window::mouseGravity</definition>
        <argsstring>() const</argsstring>
        <name>mouseGravity</name>
        <qualifiedname>KWin::Window::mouseGravity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the interactive move resize gravity depending on the <ref refid="namespace_k_win_1_1_decoration" kindref="compound">Decoration</ref>&apos;s section under mouse. If no decoration it returns <ref refid="namespace_k_win_1a09aef7c112a8b0cdfb6e27a081d50dc8a6adf97f83acf6453d4a6a4b1070f3754" kindref="member">Gravity::None</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1740" column="13" bodyfile="kwin/src/window.cpp" bodystart="2682" bodyend="2707"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ab2d8993f1630348add5dc2632aba5de5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setDecoration</definition>
        <argsstring>(std::shared_ptr&lt; KDecoration3::Decoration &gt; decoration)</argsstring>
        <name>setDecoration</name>
        <qualifiedname>KWin::Window::setDecoration</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; KDecoration3::Decoration &gt;</type>
          <declname>decoration</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1742" column="10" bodyfile="kwin/src/window.cpp" bodystart="2731" bodyend="2762"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a1bd3b04534d23abc203bc9ac28d5bdcf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::startDecorationDoubleClickTimer</definition>
        <argsstring>()</argsstring>
        <name>startDecorationDoubleClickTimer</name>
        <qualifiedname>KWin::Window::startDecorationDoubleClickTimer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1743" column="10" bodyfile="kwin/src/window.cpp" bodystart="2928" bodyend="2931"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af13e920c6c31b68f63437425761e91eb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::invalidateDecorationDoubleClickTimer</definition>
        <argsstring>()</argsstring>
        <name>invalidateDecorationDoubleClickTimer</name>
        <qualifiedname>KWin::Window::invalidateDecorationDoubleClickTimer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1744" column="10" bodyfile="kwin/src/window.cpp" bodystart="2933" bodyend="2936"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ae574c58525b0a07014d9066093fe6105" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::updateDecorationInputShape</definition>
        <argsstring>()</argsstring>
        <name>updateDecorationInputShape</name>
        <qualifiedname>KWin::Window::updateDecorationInputShape</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1745" column="10" bodyfile="kwin/src/window.cpp" bodystart="2764" bodyend="2778"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a4f8e4a201d469a4bec2646970b1a3f42" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setDesktopFileName</definition>
        <argsstring>(const QString &amp;name)</argsstring>
        <name>setDesktopFileName</name>
        <qualifiedname>KWin::Window::setDesktopFileName</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1747" column="10" bodyfile="kwin/src/window.cpp" bodystart="3089" bodyend="3098"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a65483fe15894a40c5bd6117ec37812fc" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::Window::iconFromDesktopFile</definition>
        <argsstring>() const</argsstring>
        <name>iconFromDesktopFile</name>
        <qualifiedname>KWin::Window::iconFromDesktopFile</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1748" column="13" bodyfile="kwin/src/window.cpp" bodystart="3111" bodyend="3114"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aa6855ec71b01961008ef688291652965" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::updateApplicationMenuServiceName</definition>
        <argsstring>(const QString &amp;serviceName)</argsstring>
        <name>updateApplicationMenuServiceName</name>
        <qualifiedname>KWin::Window::updateApplicationMenuServiceName</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>serviceName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1750" column="10" bodyfile="kwin/src/window.cpp" bodystart="3156" bodyend="3168"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1acbf43400025a9c526cf446f35e0ad6d8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::updateApplicationMenuObjectPath</definition>
        <argsstring>(const QString &amp;objectPath)</argsstring>
        <name>updateApplicationMenuObjectPath</name>
        <qualifiedname>KWin::Window::updateApplicationMenuObjectPath</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>objectPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1751" column="10" bodyfile="kwin/src/window.cpp" bodystart="3170" bodyend="3182"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1aacf6c3ac882bd25beb2777cedd4dbc64" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setUnresponsive</definition>
        <argsstring>(bool unresponsive)</argsstring>
        <name>setUnresponsive</name>
        <qualifiedname>KWin::Window::setUnresponsive</qualifiedname>
        <param>
          <type>bool</type>
          <declname>unresponsive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1753" column="10" bodyfile="kwin/src/window.cpp" bodystart="3207" bodyend="3214"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a2fbf7904e517a0fa5a3661bdb86001c8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::Window::setShortcutInternal</definition>
        <argsstring>()</argsstring>
        <name>setShortcutInternal</name>
        <qualifiedname>KWin::Window::setShortcutInternal</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_x11_window_1a4e62a1023531c7165cacda3ae544c3ae">setShortcutInternal</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1755" column="18" bodyfile="kwin/src/useractions.cpp" bodystart="1802" bodyend="1806"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af4f8e9d5bcbfd147ce65a6106858010e" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::Window::shortcutCaptionSuffix</definition>
        <argsstring>() const</argsstring>
        <name>shortcutCaptionSuffix</name>
        <qualifiedname>KWin::Window::shortcutCaptionSuffix</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1756" column="13" bodyfile="kwin/src/window.cpp" bodystart="3216" bodyend="3222"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a0bccadf8a350482a2554b9c52a5bb9a0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void KWin::Window::updateCaption</definition>
        <argsstring>()=0</argsstring>
        <name>updateCaption</name>
        <qualifiedname>KWin::Window::updateCaption</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_internal_window_1a42400bf13bd4a445d270c5c5fcad338e">updateCaption</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_wayland_window_1a4b5fc35f4b91339351fb6f47200ba45c">updateCaption</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1757" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ac7c35d8668fd5e4e11838ee581e41722" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::startShadeHoverTimer</definition>
        <argsstring>()</argsstring>
        <name>startShadeHoverTimer</name>
        <qualifiedname>KWin::Window::startShadeHoverTimer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1759" column="10" bodyfile="kwin/src/window.cpp" bodystart="896" bodyend="905"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a4805d5c28b9aac6559f3c0a06863bbf9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::startShadeUnhoverTimer</definition>
        <argsstring>()</argsstring>
        <name>startShadeUnhoverTimer</name>
        <qualifiedname>KWin::Window::startShadeUnhoverTimer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1760" column="10" bodyfile="kwin/src/window.cpp" bodystart="907" bodyend="915"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a62f038086489feb23351bd4e00eee5ac" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::shadeHover</definition>
        <argsstring>()</argsstring>
        <name>shadeHover</name>
        <qualifiedname>KWin::Window::shadeHover</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1761" column="10" bodyfile="kwin/src/window.cpp" bodystart="884" bodyend="888"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a30a7bed6ed1322874c268e04a5cd455b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::shadeUnhover</definition>
        <argsstring>()</argsstring>
        <name>shadeUnhover</name>
        <qualifiedname>KWin::Window::shadeUnhover</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1762" column="10" bodyfile="kwin/src/window.cpp" bodystart="890" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a04c86c8dccc5bc02600ce775e4cf78a0" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::keyboardGeometryRestore</definition>
        <argsstring>() const</argsstring>
        <name>keyboardGeometryRestore</name>
        <qualifiedname>KWin::Window::keyboardGeometryRestore</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1765" column="12" bodyfile="kwin/src/window.cpp" bodystart="3074" bodyend="3077"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a316c6dea6c926489ab87a93df74f9ec0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setKeyboardGeometryRestore</definition>
        <argsstring>(const QRectF &amp;geom)</argsstring>
        <name>setKeyboardGeometryRestore</name>
        <qualifiedname>KWin::Window::setKeyboardGeometryRestore</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1766" column="10" bodyfile="kwin/src/window.cpp" bodystart="3079" bodyend="3082"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a48c39e5a2fae63c9480116fa64b89d57" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::moveToArea</definition>
        <argsstring>(const QRectF &amp;geometry, const QRectF &amp;oldArea, const QRectF &amp;newArea)</argsstring>
        <name>moveToArea</name>
        <qualifiedname>KWin::Window::moveToArea</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>oldArea</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>newArea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1768" column="12" bodyfile="kwin/src/window.cpp" bodystart="3940" bodyend="3956"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a094255358ae73e7620a5716508e00968" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::Window::ensureSpecialStateGeometry</definition>
        <argsstring>(const QRectF &amp;geometry)</argsstring>
        <name>ensureSpecialStateGeometry</name>
        <qualifiedname>KWin::Window::ensureSpecialStateGeometry</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1769" column="12" bodyfile="kwin/src/window.cpp" bodystart="3958" bodyend="3979"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a64f67f09528b18e4ca30cf6a41fd17cb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::cleanTabBox</definition>
        <argsstring>()</argsstring>
        <name>cleanTabBox</name>
        <qualifiedname>KWin::Window::cleanTabBox</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1771" column="10" bodyfile="kwin/src/window.cpp" bodystart="4437" bodyend="4445"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1af9b82e7eb525e57206489164ae67df78" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::maybeSendFrameCallback</definition>
        <argsstring>()</argsstring>
        <name>maybeSendFrameCallback</name>
        <qualifiedname>KWin::Window::maybeSendFrameCallback</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1772" column="10" bodyfile="kwin/src/window.cpp" bodystart="4593" bodyend="4607"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a5ba5344f9d163c3f951057ddd84f2111" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::updateNextTargetScale</definition>
        <argsstring>()</argsstring>
        <name>updateNextTargetScale</name>
        <qualifiedname>KWin::Window::updateNextTargetScale</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1774" column="10" bodyfile="kwin/src/window.cpp" bodystart="4693" bodyend="4696"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ac1a0623d451064d4938fc3f4872a2a9d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::updatePreferredBufferTransform</definition>
        <argsstring>()</argsstring>
        <name>updatePreferredBufferTransform</name>
        <qualifiedname>KWin::Window::updatePreferredBufferTransform</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1775" column="10" bodyfile="kwin/src/window.cpp" bodystart="4723" bodyend="4726"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1a8317614541483173a05da42f7d35d06b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::updatePreferredColorDescription</definition>
        <argsstring>()</argsstring>
        <name>updatePreferredColorDescription</name>
        <qualifiedname>KWin::Window::updatePreferredColorDescription</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1776" column="10" bodyfile="kwin/src/window.cpp" bodystart="4745" bodyend="4748"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_window_1ade9e5485cc346d37281078debb1badbc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Window::setTargetScale</definition>
        <argsstring>(qreal scale)</argsstring>
        <name>setTargetScale</name>
        <qualifiedname>KWin::Window::setTargetScale</qualifiedname>
        <param>
          <type>qreal</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/window.h" line="1777" column="10" bodyfile="kwin/src/window.cpp" bodystart="4698" bodyend="4704"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>KWin::InputPanelV1Window</label>
        <link refid="class_k_win_1_1_input_panel_v1_window"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>KWin::InternalWindow</label>
        <link refid="class_k_win_1_1_internal_window"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>KWin::LayerShellV1Window</label>
        <link refid="class_k_win_1_1_layer_shell_v1_window"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>KWin::WaylandWindow</label>
        <link refid="class_k_win_1_1_wayland_window"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::Window</label>
        <link refid="class_k_win_1_1_window"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>KWin::X11Window</label>
        <link refid="class_k_win_1_1_x11_window"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>KWin::XdgPopupWindow</label>
        <link refid="class_k_win_1_1_xdg_popup_window"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>KWin::XdgSurfaceWindow</label>
        <link refid="class_k_win_1_1_xdg_surface_window"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>KWin::XdgToplevelWindow</label>
        <link refid="class_k_win_1_1_xdg_toplevel_window"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="9">
        <label>KWin::BrightnessDevice</label>
        <link refid="class_k_win_1_1_brightness_device"/>
      </node>
      <node id="10">
        <label>KWin::ClientMachine</label>
        <link refid="class_k_win_1_1_client_machine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>KWin::ColorDescription</label>
        <link refid="class_k_win_1_1_color_description"/>
        <childnode refid="6" relation="usage">
          <edgelabel>sRGB</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>KWin::CursorShape</label>
        <link refid="class_k_win_1_1_cursor_shape"/>
      </node>
      <node id="8">
        <label>KWin::Edid</label>
        <link refid="class_k_win_1_1_edid"/>
      </node>
      <node id="3">
        <label>KWin::Output</label>
        <link refid="class_k_win_1_1_output"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>m_state</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>m_information</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_brightnessDevice</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>KWin::Output::Information</label>
        <link refid="struct_k_win_1_1_output_1_1_information"/>
        <childnode refid="8" relation="usage">
          <edgelabel>edid</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>panelOrientation</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>KWin::Output::State</label>
        <link refid="struct_k_win_1_1_output_1_1_state"/>
        <childnode refid="5" relation="usage">
          <edgelabel>manualTransform</edgelabel>
          <edgelabel>transform</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>colorDescription</edgelabel>
          <edgelabel>originalColorDescription</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>KWin::OutputTransform</label>
        <link refid="class_k_win_1_1_output_transform"/>
      </node>
      <node id="11">
        <label>KWin::PlasmaWindowInterface</label>
        <link refid="class_k_win_1_1_plasma_window_interface"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::Window</label>
        <link refid="class_k_win_1_1_window"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_moveResizeOutput</edgelabel>
          <edgelabel>m_output</edgelabel>
          <edgelabel>startOutput</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_preferredBufferTransform</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_preferredColorDescription</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_clientMachine</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_windowManagementInterface</edgelabel>
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>m_transientFor</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_layer</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>cursor</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_rules</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>KWin::WindowRules</label>
        <link refid="class_k_win_1_1_window_rules"/>
      </node>
      <node id="12">
        <label>Layer</label>
        <link refid="struct_layer"/>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/window.h" line="62" column="1" bodyfile="kwin/src/window.h" bodystart="63" bodyend="1897"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_window_1a630842ac4cfe9ba9390eac5ffc8a9a7c" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>_shortcut</name></member>
      <member refid="class_k_win_1_1_window_1a23bedb297b84a5d7e0590617375fcce3" prot="protected" virt="pure-virtual"><scope>KWin::Window</scope><name>acceptsFocus</name></member>
      <member refid="class_k_win_1_1_window_1acac15cb52cc30597cd970a45958ba827" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>active</name></member>
      <member refid="class_k_win_1_1_window_1acce3d6f41f268ae1cff8183476ee6646" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>activeChanged</name></member>
      <member refid="class_k_win_1_1_window_1aa71dc40a7137f7d9295a5ad7a635b0c7" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>activities</name></member>
      <member refid="class_k_win_1_1_window_1ae70865a6d475746978ca119ac336092e" prot="public" virt="virtual"><scope>KWin::Window</scope><name>activities</name></member>
      <member refid="class_k_win_1_1_window_1ac86328eec92ac6f01ab3293a3d72064e" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>activitiesChanged</name></member>
      <member refid="class_k_win_1_1_window_1af1548a0423bb576776f96aee0d3847fa" prot="public" virt="virtual"><scope>KWin::Window</scope><name>addTransient</name></member>
      <member refid="class_k_win_1_1_window_1a631797f76ba2b3af0cbcbc74b060e8ec" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>allMainWindows</name></member>
      <member refid="class_k_win_1_1_window_1a59bcf5b3c635478120afa53945ee8b75" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>anchor</name></member>
      <member refid="class_k_win_1_1_window_1a584420a5827d6b82674359784a3f1ff3" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>appletPopup</name></member>
      <member refid="class_k_win_1_1_window_1a64b3e78c92b9566c25f826c9269b9d7d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>applicationMenuActive</name></member>
      <member refid="class_k_win_1_1_window_1a3980f243d8a936be0e117c6976823aba" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>applicationMenuActive</name></member>
      <member refid="class_k_win_1_1_window_1a8160969459097d515917fcc1e5ec1ee3" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>applicationMenuActiveChanged</name></member>
      <member refid="class_k_win_1_1_window_1a61be5e5de3298a63108f511acb5b3583" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>applicationMenuChanged</name></member>
      <member refid="class_k_win_1_1_window_1a55a5a924afbbff8839a2328555cccbb6" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>applicationMenuObjectPath</name></member>
      <member refid="class_k_win_1_1_window_1abeeea83c2e285a6e2648594080be2913" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>applicationMenuServiceName</name></member>
      <member refid="class_k_win_1_1_window_1a6ef20caeaf3db7a7bfc594b2b59e5797" prot="public" virt="virtual"><scope>KWin::Window</scope><name>applyWindowRules</name></member>
      <member refid="class_k_win_1_1_window_1a05a5e1439ce60beaa523291624da5588" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>autoRaise</name></member>
      <member refid="class_k_win_1_1_window_1a462b5bb23c7028fddfe3a3fc7a3ba038" prot="public" virt="virtual"><scope>KWin::Window</scope><name>belongsToDesktop</name></member>
      <member refid="class_k_win_1_1_window_1a7fe5b288df23738ad6d2e9565c9f1ed8" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>belongsToLayer</name></member>
      <member refid="class_k_win_1_1_window_1a81a6373276b07edb20b368f23754b287" prot="protected" virt="pure-virtual"><scope>KWin::Window</scope><name>belongsToSameApplication</name></member>
      <member refid="class_k_win_1_1_window_1af6b077eadf47fd68373d43f94eef23ad" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>belongToSameApplication</name></member>
      <member refid="class_k_win_1_1_window_1a940ee491c5f1fe9fdb660110ad491804" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>blockActivityUpdates</name></member>
      <member refid="class_k_win_1_1_window_1a7b47bcdf2ffd2ba3113725d2ebfaf822" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>borderBottom</name></member>
      <member refid="class_k_win_1_1_window_1a704f2db4a15f2ca4e6ae0b163e73c708" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>borderLeft</name></member>
      <member refid="class_k_win_1_1_window_1a3309d429b01d3670e9fcf4f54917ce46" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>borderRight</name></member>
      <member refid="class_k_win_1_1_window_1a079dfba93240f19cadab52f478e48e84" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>borderTop</name></member>
      <member refid="class_k_win_1_1_window_1a205c4e3d11f4c4cd184e767829e2afc0" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>bufferGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a023b03368916b91c59535d5843f6c75d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>bufferGeometry</name></member>
      <member refid="class_k_win_1_1_window_1aaa748e21e5fd562e204c3ce1e7410e4c" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>bufferGeometryChanged</name></member>
      <member refid="class_k_win_1_1_window_1a40f33a8d09fddef56ce9b15ff98a1ea6" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>buttonDown</name></member>
      <member refid="class_k_win_1_1_window_1aae37a8d1ea78997edb9c87bb12e44401" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>cancelAutoRaise</name></member>
      <member refid="class_k_win_1_1_window_1aaae917a76558b06792ac435c316cf705" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>cancelInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a58c27d98b0edb3a6d0afb7fdf3882c39" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>cancelShadeHoverTimer</name></member>
      <member refid="class_k_win_1_1_window_1a9a91fff09e5795dce9c1732082ff09b4" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>caption</name></member>
      <member refid="class_k_win_1_1_window_1a29aa4e9445d651a8ad460def78d9a9eb" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>caption</name></member>
      <member refid="class_k_win_1_1_window_1aed9d3f3c470d1fa02c8cce52dbffa050" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>captionChanged</name></member>
      <member refid="class_k_win_1_1_window_1af3efc82546fdf210e4136a4e0d7b1a46" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>captionNormal</name></member>
      <member refid="class_k_win_1_1_window_1a92233974ab2cf30d74e585daabcc3782" prot="public" virt="pure-virtual"><scope>KWin::Window</scope><name>captionNormal</name></member>
      <member refid="class_k_win_1_1_window_1ac61e96f4f734de1446c475cfebb0cf0d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>captionNormalChanged</name></member>
      <member refid="class_k_win_1_1_window_1a5f87d4992170acf48102a02db67279f0" prot="public" virt="pure-virtual"><scope>KWin::Window</scope><name>captionSuffix</name></member>
      <member refid="class_k_win_1_1_window_1af4760996e58d03d3cf08cb9a91f06ba6" prot="public" virt="virtual"><scope>KWin::Window</scope><name>checkActivities</name></member>
      <member refid="class_k_win_1_1_window_1a848c62c85204f55706acf4ea61a08d56" prot="public" virt="virtual"><scope>KWin::Window</scope><name>checkNoBorder</name></member>
      <member refid="class_k_win_1_1_window_1a0b6dba6ec28ac38cae39cc392c735970" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>checkOffscreenPosition</name></member>
      <member refid="class_k_win_1_1_window_1a841ef2a66e586b3cfb6aadd65e179419" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>checkQuickTilingMaximizationZones</name></member>
      <member refid="class_k_win_1_1_window_1a15a841d9d2201aa7b90f24168632ff4c" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>checkUnrestrictedInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a39bbb6d7fea7175cb9d9956bb0218064" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>checkWorkspacePosition</name></member>
      <member refid="class_k_win_1_1_window_1a64f67f09528b18e4ca30cf6a41fd17cb" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>cleanTabBox</name></member>
      <member refid="class_k_win_1_1_window_1abe19bb40b369f778012075b9752d84eb" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>client</name></member>
      <member refid="class_k_win_1_1_window_1ae65385d8659203d561a91aa7c0af9d8b" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>clientGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a76606965aab8b25facbd673c634c6ab4" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>clientGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a5fad289b49f846a6fc1c0cb72e91ec78" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>clientGeometryChanged</name></member>
      <member refid="class_k_win_1_1_window_1a595f871763d11ef27b99d4327d5669fd" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>clientMachine</name></member>
      <member refid="class_k_win_1_1_window_1a817b5734d5c89784f28c1bef955a6485" prot="public" virt="virtual"><scope>KWin::Window</scope><name>clientPosToFramePos</name></member>
      <member refid="class_k_win_1_1_window_1a94200d7cbb5dc1e378197dbde9b22c38" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>clientRectToFrameRect</name></member>
      <member refid="class_k_win_1_1_window_1ae5046998639848857380670149aa13d5" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>clientSize</name></member>
      <member refid="class_k_win_1_1_window_1aec00cdb081b9048bde71fa2844cee001" prot="public" virt="virtual"><scope>KWin::Window</scope><name>clientSizeToFrameSize</name></member>
      <member refid="class_k_win_1_1_window_1a4bb9758a6b7087650bbe60d376ad0650" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>closeable</name></member>
      <member refid="class_k_win_1_1_window_1aab5733f9b923a691e38e6c06808a8ae3" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>closeableChanged</name></member>
      <member refid="class_k_win_1_1_window_1a75b348e50a34a4881ce281e40d1e8f02" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>closed</name></member>
      <member refid="class_k_win_1_1_window_1a7b4df09999849da92ca4ef4b9b244337" prot="public" virt="pure-virtual"><scope>KWin::Window</scope><name>closeWindow</name></member>
      <member refid="class_k_win_1_1_window_1af4e79ae255fc04953422db277a441fcf" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>colorScheme</name></member>
      <member refid="class_k_win_1_1_window_1add4fdac83406710541f46a27ee0e0170" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>colorScheme</name></member>
      <member refid="class_k_win_1_1_window_1a738cb732d11d98b2e6149400e134df11" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>colorSchemeChanged</name></member>
      <member refid="class_k_win_1_1_window_1a0e084dac0bbab6de21ed779cfc909793" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>comboBox</name></member>
      <member refid="class_k_win_1_1_window_1a02d9a70e899649f5bf05e182c54d9120" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>commitTile</name></member>
      <member refid="class_k_win_1_1_window_1abaf5c29b43c3bdd7415d4db7f3c441b4" prot="public" virt="virtual"><scope>KWin::Window</scope><name>constrainClientSize</name></member>
      <member refid="class_k_win_1_1_window_1aba7fd5b92a9da565aecf8ae559f4af69" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>constrainFrameSize</name></member>
      <member refid="class_k_win_1_1_window_1a8e20b44c82b270d86739445572bc8b27" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>counter</name></member>
      <member refid="class_k_win_1_1_window_1a3794a446f3a4460ef3417eefc3ef0ba6" prot="protected" virt="pure-virtual"><scope>KWin::Window</scope><name>createItem</name></member>
      <member refid="class_k_win_1_1_window_1aab5aba9b1ffa9d7f2413b9a1b8f41df9" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>criticalNotification</name></member>
      <member refid="class_k_win_1_1_window_1a90e105403fbfe6e2efd150fc49ca2c2f" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>cursor</name></member>
      <member refid="class_k_win_1_1_window_1a4a4611b4334bd5ef2b224e0bed4d2afa" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>cursor</name></member>
      <member refid="class_k_win_1_1_window_1ad783ee7d4155cdd17ee6ca4138038b87" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>damaged</name></member>
      <member refid="class_k_win_1_1_window_1aeebcd9865806bb3e4b74d13b4ed91ded" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>decoratedWindow</name></member>
      <member refid="class_k_win_1_1_window_1aeb9f103fab307fd78c92cef1f14275b2" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>decoration</name></member>
      <member refid="class_k_win_1_1_window_1ab05570ab597e429201ea5b47b35e5094" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>decoration</name></member>
      <member refid="class_k_win_1_1_window_1a443109a5be24247d1ca26508fec82adc" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>decorationChanged</name></member>
      <member refid="class_k_win_1_1_window_1a4ca7398a5e80f2ed8d5eec3ed382f235" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>decorationHasAlpha</name></member>
      <member refid="class_k_win_1_1_window_1ab1e2bd22ec836e8cada97462d90badf2" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>decorationHasAlpha</name></member>
      <member refid="class_k_win_1_1_window_1a9821bc14a848cb3f210c43c160fe8e80" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>decorationPalette</name></member>
      <member refid="class_k_win_1_1_window_1a5a14f052819dee2470858f59e9d2218c" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>delayedTimer</name></member>
      <member refid="class_k_win_1_1_window_1aa16634b94b70b24daab1fa9df35c0f31" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>deleted</name></member>
      <member refid="class_k_win_1_1_window_1a2d638a5cbb6a91a00b5a5c14c9694888" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>demandAttention</name></member>
      <member refid="class_k_win_1_1_window_1ac42b9fc9ba486aa2daf3cf1054e9afa5" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>demandsAttention</name></member>
      <member refid="class_k_win_1_1_window_1a48804c4aff5e086bf1af7651009d59ec" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>demandsAttentionChanged</name></member>
      <member refid="class_k_win_1_1_window_1a405edf05a731189064fbd7298d06996e" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>desktopFileName</name></member>
      <member refid="class_k_win_1_1_window_1a384f3da43bb8399dc94c43f5032155c5" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>desktopFileName</name></member>
      <member refid="class_k_win_1_1_window_1aa7c85eca2cfa19d7ea698cd46396c6dc" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>desktopFileNameChanged</name></member>
      <member refid="class_k_win_1_1_window_1af8434bc6d80800dccc7700d26fd3594f" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>desktopIds</name></member>
      <member refid="class_k_win_1_1_window_1a8da79be4e140390a3b61957f927f5210" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>desktops</name></member>
      <member refid="class_k_win_1_1_window_1ab3149c28ec7dd1daf9af75a3c10cd35e" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>desktops</name></member>
      <member refid="class_k_win_1_1_window_1a81dba7cdd2be7538645ff1a0718b6c7d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>desktopsChanged</name></member>
      <member refid="class_k_win_1_1_window_1af05b60db12e48cdcb1a231113bb97dce" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>desktopWindow</name></member>
      <member refid="class_k_win_1_1_window_1a47e37aadf699a7684655e3f482f40c02" prot="public" virt="pure-virtual"><scope>KWin::Window</scope><name>destroyWindow</name></member>
      <member refid="class_k_win_1_1_window_1a13609b056f02453c5006ea28d6de94b3" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>destroyWindowManagementInterface</name></member>
      <member refid="class_k_win_1_1_window_1a6a8237a0038173d42be364989ec33623" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>dialog</name></member>
      <member refid="class_k_win_1_1_window_1adaddb6c74ea973a4cde4409691ccef97" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>dndIcon</name></member>
      <member refid="class_k_win_1_1_window_1af6d487a18868cedad24433083d73161a" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>dock</name></member>
      <member refid="class_k_win_1_1_window_1ad70cb80f746c7f97cb0e55d53a9869a4" prot="public" virt="virtual"><scope>KWin::Window</scope><name>dockWantsInput</name></member>
      <member refid="class_k_win_1_1_window_1ac94cdf63c71362a86dc28ecb5e40a1bc" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>doFinishInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a73ece0a5a9b6157cb1c10461a3ccb1fe" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>doInteractiveResizeSync</name></member>
      <member refid="class_k_win_1_1_window_1a169597f62ca6a017611d4e45a0ee3f51" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>doMinimize</name></member>
      <member refid="class_k_win_1_1_window_1ac40923cee6c26120f57174bde42a37eb" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>dontInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a1e64a5d22f780662ce2b05c5fca3aac1" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>doSetActive</name></member>
      <member refid="class_k_win_1_1_window_1ad144363e2fe2d6713183d99099928687" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>doSetDemandsAttention</name></member>
      <member refid="class_k_win_1_1_window_1a53cf8bb1eaf10d2331ee121651054327" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>doSetDesktop</name></member>
      <member refid="class_k_win_1_1_window_1acfcb309859b64b65e4f9bfdd3593e831" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>doSetHidden</name></member>
      <member refid="class_k_win_1_1_window_1a9a8e4718ca55a6dbbd4a510b1f6dd7c0" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>doSetHiddenByShowDesktop</name></member>
      <member refid="class_k_win_1_1_window_1a8d860fefa08b9a1edaa6d78140e02570" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>doSetKeepAbove</name></member>
      <member refid="class_k_win_1_1_window_1ab1a3b85114d894d0615e94869e3ced47" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>doSetKeepBelow</name></member>
      <member refid="class_k_win_1_1_window_1a7a1e7cdb03f5e88cbda4cd80dc1e91c0" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>doSetModal</name></member>
      <member refid="class_k_win_1_1_window_1a629aaa055471ec8d1b61969412279e35" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>doSetNextTargetScale</name></member>
      <member refid="class_k_win_1_1_window_1ac7fddb149ff502da3b73ba871ab63dc5" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>doSetOnActivities</name></member>
      <member refid="class_k_win_1_1_window_1a2f020c644990bff80970d402c46c00a7" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>doSetPreferredBufferTransform</name></member>
      <member refid="class_k_win_1_1_window_1afe71e723a27aeb466c819f673890babc" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>doSetPreferredColorDescription</name></member>
      <member refid="class_k_win_1_1_window_1afed2df13c860037d7c04502b2b681c90" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>doSetQuickTileMode</name></member>
      <member refid="class_k_win_1_1_window_1ad6b5cfb1fda2ae3be8157024383d4f31" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>doSetShade</name></member>
      <member refid="class_k_win_1_1_window_1ae149e3bb83a2a8dd3b8873365ff9c92a" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>doSetSkipPager</name></member>
      <member refid="class_k_win_1_1_window_1a81def43f2990e5a40812c0e076c04565" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>doSetSkipSwitcher</name></member>
      <member refid="class_k_win_1_1_window_1a06f9cf76ca564c6f316aee843a737947" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>doSetSkipTaskbar</name></member>
      <member refid="class_k_win_1_1_window_1ac16917dcfe5318a0e971eea28044dfda" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>doSetSuspended</name></member>
      <member refid="class_k_win_1_1_window_1a1225fe6301b15744feb468fa81c52d21" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>doStartInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a8392b5437fd670ddcf478833696571c0" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>doubleClickTimer</name></member>
      <member refid="class_k_win_1_1_window_1a607b0fe387b98563447c1399a40adb2e" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>dropdownMenu</name></member>
      <member refid="class_k_win_1_1_window_1a680b520607df91ff2ee91be0c33c8736" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>effectWindow</name></member>
      <member refid="class_k_win_1_1_window_1a54880942e05b529132409817d74a84c3" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>effectWindow</name></member>
      <member refid="class_k_win_1_1_window_1abd7f4cf5b59018602262ca9ec54e419e" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>electricBorderMode</name></member>
      <member refid="class_k_win_1_1_window_1af78348da5a0ad82e99e06f1ca9e64ab4" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>elevate</name></member>
      <member refid="class_k_win_1_1_window_1ac6647aba8e91643714f82ff1fdc1d09c" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>enabled</name></member>
      <member refid="class_k_win_1_1_window_1a3bb6bb26cb4a8e13525c376ac9bbd3b2" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>endInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a20b6b5cdac1f6b8f13dc04f3e05802a2" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>ensurePalette</name></member>
      <member refid="class_k_win_1_1_window_1a094255358ae73e7620a5716508e00968" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>ensureSpecialStateGeometry</name></member>
      <member refid="class_k_win_1_1_window_1aae3fab1428c67e6a2c925f765070dd84" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>enterDesktop</name></member>
      <member refid="class_k_win_1_1_window_1a5cab226e8c1d5f137f85aa3135e959cc" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>evaluateWindowRules</name></member>
      <member refid="class_k_win_1_1_window_1ae3e09a76bdd4d8b7faea845fd8a37e7f" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>exitQuickTileMode</name></member>
      <member refid="class_k_win_1_1_window_1a936c783bfd766648824d4d7990c0bb2f" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>findDesktopFile</name></member>
      <member refid="class_k_win_1_1_window_1aa6d169611e85de5c016f53a1ff30f558" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>findInList</name></member>
      <member refid="class_k_win_1_1_window_1ac49252173ad8460fec752ffb4f74824d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>findModal</name></member>
      <member refid="class_k_win_1_1_window_1a7eae1931b3b428d2d59ff49ab95d010c" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>finishCompositing</name></member>
      <member refid="class_k_win_1_1_window_1a6978b71453df0de95f4822332b1be103" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>finishInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1afc19a299627232cd2f497ff1c91772b3" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>finishWindowRules</name></member>
      <member refid="class_k_win_1_1_window_1a1e17df8a7fdcbbde5cfe8ab92e7e6421" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>forgetTile</name></member>
      <member refid="class_k_win_1_1_window_1a0cd1f979061accdf5d743f3089360132" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>frameGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a7617d3fa0acf53549af7d54e558881ad" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>frameGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a0dac69707ab89d7d943100312fbec7c7" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>frameGeometryAboutToChange</name></member>
      <member refid="class_k_win_1_1_window_1ac20682dc9062e09db6ed01b2cf7c6097" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>frameGeometryChanged</name></member>
      <member refid="class_k_win_1_1_window_1af8a628049f3374489651d8db883febd2" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>frameMargins</name></member>
      <member refid="class_k_win_1_1_window_1a739d097e02c1cfa5162510a20c6114d2" prot="public" virt="virtual"><scope>KWin::Window</scope><name>framePosToClientPos</name></member>
      <member refid="class_k_win_1_1_window_1a31d53d6011e247371ee9316d6be2ba81" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>frameRectToClientRect</name></member>
      <member refid="class_k_win_1_1_window_1ae09928747c6104d9520e519176f0f618" prot="public" virt="virtual"><scope>KWin::Window</scope><name>frameSizeToClientSize</name></member>
      <member refid="class_k_win_1_1_window_1a197e218d29e40b39c56eee4eed4aa454" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>fullScreen</name></member>
      <member refid="class_k_win_1_1_window_1abf412f7b864b281ccc78a13b71359e94" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>fullScreenable</name></member>
      <member refid="class_k_win_1_1_window_1a469e95b9f51c551643a0e4bdf46e0203" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>fullScreenChanged</name></member>
      <member refid="class_k_win_1_1_window_1aafa6825cf1306da791fa827c4ba98006" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>fullscreenGeometryRestore</name></member>
      <member refid="class_k_win_1_1_window_1a2887b7589490c544849ac1ecc9c9a48c" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>fullscreenGeometryRestoreChanged</name></member>
      <member refid="class_k_win_1_1_window_1a5f94086b4bce785556425c530c59dbaf" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>geometryRestore</name></member>
      <member refid="class_k_win_1_1_window_1ac90d9d4441fbcadcc29e53b26d4e20f5" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>getMousePressCommand</name></member>
      <member refid="class_k_win_1_1_window_1a3d2bdcd5bd8d81287be54e5184a61f01" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>getMouseReleaseCommand</name></member>
      <member refid="class_k_win_1_1_window_1aa1872f2aa9de9e8689d1fdee95c863a9" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>getWheelCommand</name></member>
      <member refid="class_k_win_1_1_window_1abb26f86fb723e81f43e0a27e8ffa0aa8" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>gravity</name></member>
      <member refid="class_k_win_1_1_window_1af60e148f9cc7e10a15e07d21b4481a34" prot="public" virt="virtual"><scope>KWin::Window</scope><name>group</name></member>
      <member refid="class_k_win_1_1_window_1a0e7daafcd723a739be737dab9a66f22d" prot="public" virt="virtual"><scope>KWin::Window</scope><name>group</name></member>
      <member refid="class_k_win_1_1_window_1a4d1c2d0e1fde826cd0f99ec00ed93de6" prot="public" virt="virtual"><scope>KWin::Window</scope><name>groupTransient</name></member>
      <member refid="class_k_win_1_1_window_1a658b4ab528b8142078ffa190a75f88dc" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>growHorizontal</name></member>
      <member refid="class_k_win_1_1_window_1a2af22a940dbc4ae7506131b6ba64d80a" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>growVertical</name></member>
      <member refid="class_k_win_1_1_window_1a90b69dcdcb07786cd185f895a73649e6" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>handleCustomQuickTileShortcut</name></member>
      <member refid="class_k_win_1_1_window_1a53b2543bc269052c7c508b531dc816a3" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>handlePaletteChange</name></member>
      <member refid="class_k_win_1_1_window_1ae6731dcfd435bc27d7bbee375b152835" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>handleQuickTileShortcut</name></member>
      <member refid="class_k_win_1_1_window_1ae023877c81ca2684d535e7d7f89e4ce7" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>hasApplicationMenu</name></member>
      <member refid="class_k_win_1_1_window_1a6718fa91ff19f314d85678e091b8340c" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>hasApplicationMenu</name></member>
      <member refid="class_k_win_1_1_window_1a71e3866d32586ef81815db5d089295f9" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>hasApplicationMenuChanged</name></member>
      <member refid="class_k_win_1_1_window_1a6033808bddd2e7374784f870c67c6f8a" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>hasNETSupport</name></member>
      <member refid="class_k_win_1_1_window_1a09d95d476bf97f7e8913a851c17c88eb" prot="public" virt="virtual"><scope>KWin::Window</scope><name>hasPopupGrab</name></member>
      <member refid="class_k_win_1_1_window_1ada41aaefb2c2e4b7f03039ff971c1211" prot="public" virt="virtual"><scope>KWin::Window</scope><name>hasStrut</name></member>
      <member refid="class_k_win_1_1_window_1a982612832a19feb2f1d3d2e354a42fd8" prot="public" virt="virtual"><scope>KWin::Window</scope><name>hasTransient</name></member>
      <member refid="class_k_win_1_1_window_1a5423508a43c9fbdadadb2a7a168a35b6" prot="public" virt="virtual"><scope>KWin::Window</scope><name>hasTransientPlacementHint</name></member>
      <member refid="class_k_win_1_1_window_1ab18c68ce7b55201a2c3052994f80362b" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>height</name></member>
      <member refid="class_k_win_1_1_window_1ad9487bb4e3271b05e351100e5f9092a6" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>height</name></member>
      <member refid="class_k_win_1_1_window_1ab2e0f83863b9a8fc1ac12744fc8299c8" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>hidden</name></member>
      <member refid="class_k_win_1_1_window_1aa42a6f9a69ad698d2f8709b6d831c4c8" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>hiddenByShowDesktopChanged</name></member>
      <member refid="class_k_win_1_1_window_1ade5c0d18d4d6deae42a63d61e54d5cdd" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>hiddenChanged</name></member>
      <member refid="class_k_win_1_1_window_1aaed4b5db1f86e8e62e77a13197ed987f" prot="public" virt="virtual"><scope>KWin::Window</scope><name>hitTest</name></member>
      <member refid="class_k_win_1_1_window_1a7b0ffef1838f708ffc5c83b5244712f4" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>icon</name></member>
      <member refid="class_k_win_1_1_window_1ad72a56a6d75f77ed9bfc074b8d575e0d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>icon</name></member>
      <member refid="class_k_win_1_1_window_1a1d74b16abee154db8a79c363051e9c67" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>iconChanged</name></member>
      <member refid="class_k_win_1_1_window_1a3e8d94d178149efd393f5f944366dae5" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>iconFromDesktopFile</name></member>
      <member refid="class_k_win_1_1_window_1a65483fe15894a40c5bd6117ec37812fc" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>iconFromDesktopFile</name></member>
      <member refid="class_k_win_1_1_window_1a2e72ccaab8958830979e76f8e36564f7" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>iconGeometry</name></member>
      <member refid="class_k_win_1_1_window_1ad97233455cde3594215a551becc5fb00" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>iconGeometry</name></member>
      <member refid="class_k_win_1_1_window_1aa2da7f0cb27d3b0c3f597b21ac115d78" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>initialGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a5d65f964d1a3dc5893b561429840639d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>initialGeometryRestore</name></member>
      <member refid="class_k_win_1_1_window_1a2c99107d19da560ccc18cb3b8c4a59fc" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>initialInteractiveMoveResizeGeometry</name></member>
      <member refid="class_k_win_1_1_window_1add628ad2a7308fadfed4c43146813b1c" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>initialMaximizeMode</name></member>
      <member refid="class_k_win_1_1_window_1aa61d53fcea4373c904e60093289795f6" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>initialQuickTileMode</name></member>
      <member refid="class_k_win_1_1_window_1aee14acc6594d272e230e75dc36dadab0" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>inputMethod</name></member>
      <member refid="class_k_win_1_1_window_1ac6d2550e02b58a4b9b3c818a4841d602" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>inputRegion</name></member>
      <member refid="class_k_win_1_1_window_1af0d6ef568b401a7e593c0652c66b31b1" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>inputTransformation</name></member>
      <member refid="class_k_win_1_1_window_1a0fcac52cd277eab8f40d1c5172a4b5b4" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>inputTransformationChanged</name></member>
      <member refid="class_k_win_1_1_window_1a087ebcf075b63c7581b7bf3c55fab2ef" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>interactiveMoveOffset</name></member>
      <member refid="class_k_win_1_1_window_1a028d288109b39cb174d34fb8b2b44345" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>interactiveMoveResizeAnchor</name></member>
      <member refid="class_k_win_1_1_window_1a7a0feefba9bd002fb35060568a605af3" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>interactiveMoveResizeCount</name></member>
      <member refid="class_k_win_1_1_window_1a6e7ab55b455103df20931b548729169a" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>interactiveMoveResizeFinished</name></member>
      <member refid="class_k_win_1_1_window_1aeb3ff3e9e2c5fe0b4816948a52cb58a6" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>interactiveMoveResizeGravity</name></member>
      <member refid="class_k_win_1_1_window_1a010201206994e942640621e136fb90c4" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>interactiveMoveResizeStarted</name></member>
      <member refid="class_k_win_1_1_window_1a9361cc41442c34180031739b1f4bac4b" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>interactiveMoveResizeStartOutput</name></member>
      <member refid="class_k_win_1_1_window_1a230ebb5d4b374435787377b7cb97ce4d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>interactiveMoveResizeStepped</name></member>
      <member refid="class_k_win_1_1_window_1a6cf4afcfaaf0179f72d4fe968510f427" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>internalId</name></member>
      <member refid="class_k_win_1_1_window_1adade434fb1c46bc5680b97af0b160e4c" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>internalId</name></member>
      <member refid="class_k_win_1_1_window_1a584f743781c6709049fa7fe25fa3c88b" prot="public" virt="virtual"><scope>KWin::Window</scope><name>invalidateDecoration</name></member>
      <member refid="class_k_win_1_1_window_1af13e920c6c31b68f63437425761e91eb" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>invalidateDecorationDoubleClickTimer</name></member>
      <member refid="class_k_win_1_1_window_1a8466be38391212ef29a4c880506eb069" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isActive</name></member>
      <member refid="class_k_win_1_1_window_1a6af763334d4b8f6e15dab019710e6fde" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>isActiveFullScreen</name></member>
      <member refid="class_k_win_1_1_window_1a37f5a22919d5ee6f6404ce789c0a71f7" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isAppletPopup</name></member>
      <member refid="class_k_win_1_1_window_1a5f50be966c1885fe61b8a54e2dd584d8" prot="public" virt="virtual"><scope>KWin::Window</scope><name>isClient</name></member>
      <member refid="class_k_win_1_1_window_1a968b72b00f5b592dc1c61359a760ddf9" prot="public" virt="pure-virtual"><scope>KWin::Window</scope><name>isCloseable</name></member>
      <member refid="class_k_win_1_1_window_1a244536a5e022586293ec1fb0f31f5431" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isComboBox</name></member>
      <member refid="class_k_win_1_1_window_1a477e0788aeabac703b672cc772a70398" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isCriticalNotification</name></member>
      <member refid="class_k_win_1_1_window_1a85199ff20c051bd2738f150f96875b7f" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isDecorated</name></member>
      <member refid="class_k_win_1_1_window_1a3eb5ffa931e4a6f5b817084cf0cc9b71" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isDeleted</name></member>
      <member refid="class_k_win_1_1_window_1a3d04ecc04772333222a02d8ac41856f9" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isDemandingAttention</name></member>
      <member refid="class_k_win_1_1_window_1ab56044e6eff0cd7e2a144756834c0751" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isDesktop</name></member>
      <member refid="class_k_win_1_1_window_1a7dd959da7a7a8d50a959684a92d55d65" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isDialog</name></member>
      <member refid="class_k_win_1_1_window_1a51642b7e40fd798861daeadb5e689e27" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isDNDIcon</name></member>
      <member refid="class_k_win_1_1_window_1a3b2b28edaa7b699d1407322fd11ec1cb" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isDock</name></member>
      <member refid="class_k_win_1_1_window_1a25dac8536448a3d7dfae04663ac29d53" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isDropdownMenu</name></member>
      <member refid="class_k_win_1_1_window_1ac0833d8fcb7badada14ec1ab9a1a7729" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>isElectricBorderMaximizing</name></member>
      <member refid="class_k_win_1_1_window_1af68e2698e10f68963734220af029279f" prot="public" virt="virtual"><scope>KWin::Window</scope><name>isFullScreen</name></member>
      <member refid="class_k_win_1_1_window_1a4f27ecb2b1e34b8c0d188b2a677b4d04" prot="public" virt="virtual"><scope>KWin::Window</scope><name>isFullScreenable</name></member>
      <member refid="class_k_win_1_1_window_1a4eb66b6e398d1fecaf5a18adfcd5d621" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isHidden</name></member>
      <member refid="class_k_win_1_1_window_1ac07f6126d0cbaa1688090ceadefe5ded" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isHiddenByShowDesktop</name></member>
      <member refid="class_k_win_1_1_window_1a901d9f764423ff5f2498705fa038d224" prot="public" virt="virtual"><scope>KWin::Window</scope><name>isInputMethod</name></member>
      <member refid="class_k_win_1_1_window_1a1b63155365b80df09ad34dc75f15102d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isInteractiveMove</name></member>
      <member refid="class_k_win_1_1_window_1a52812fb30393688827b36f5ff51c1a6d" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>isInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a14a4d0eae0024af8a7c3d9fc9cbfa4df" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>isInteractiveMoveResizePointerButtonDown</name></member>
      <member refid="class_k_win_1_1_window_1a6994e3aab2074f1b07c15c2f51629363" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isInteractiveResize</name></member>
      <member refid="class_k_win_1_1_window_1a25245fd93c82135a2f197a63a7c21154" prot="public" virt="virtual"><scope>KWin::Window</scope><name>isInternal</name></member>
      <member refid="class_k_win_1_1_window_1abb9526fedfc012f6ad629e79e126af91" prot="public" virt="virtual"><scope>KWin::Window</scope><name>isLocalhost</name></member>
      <member refid="class_k_win_1_1_window_1ac53e1dd7ab4f57c3e323ac3d675b5cac" prot="public" virt="virtual"><scope>KWin::Window</scope><name>isLockScreen</name></member>
      <member refid="class_k_win_1_1_window_1ab7937ac44130efc04c6bc24f65f71958" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isLockScreenOverlay</name></member>
      <member refid="class_k_win_1_1_window_1aa63a6139d1d83641d1e6d1617da0406d" prot="public" virt="virtual"><scope>KWin::Window</scope><name>isMaximizable</name></member>
      <member refid="class_k_win_1_1_window_1a80fbfd7990c3c58f2b61a00e0f94b87d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isMenu</name></member>
      <member refid="class_k_win_1_1_window_1a0265481eb235342664f27f47dafbc2d4" prot="public" virt="virtual"><scope>KWin::Window</scope><name>isMinimizable</name></member>
      <member refid="class_k_win_1_1_window_1a7ee9515027aa5076af42776c20b3a4a5" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isMinimized</name></member>
      <member refid="class_k_win_1_1_window_1ab9a3cecb663e5b45353d210ff5de1195" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isModal</name></member>
      <member refid="class_k_win_1_1_window_1a9886564c812681bf934e6e9d8242a01e" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>isMostRecentlyRaised</name></member>
      <member refid="class_k_win_1_1_window_1a8ebfa3b947306e5cdd3b1db42a1dc601" prot="public" virt="pure-virtual"><scope>KWin::Window</scope><name>isMovable</name></member>
      <member refid="class_k_win_1_1_window_1a61015d9b343ba6b5a7107caa4169bb51" prot="public" virt="pure-virtual"><scope>KWin::Window</scope><name>isMovableAcrossScreens</name></member>
      <member refid="class_k_win_1_1_window_1a03433bdc26094171788332e5edfe66e3" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isNormalWindow</name></member>
      <member refid="class_k_win_1_1_window_1a0ac6d06256d8b4ff4f83089f1a1c6151" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isNotification</name></member>
      <member refid="class_k_win_1_1_window_1a445d701c22287899adf39b5a34313628" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isOffscreenRendering</name></member>
      <member refid="class_k_win_1_1_window_1a7511675b840c00baeccfaa211fa39ff6" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isOnActiveOutput</name></member>
      <member refid="class_k_win_1_1_window_1af30982dccaf9fcab4a7da3dd7053fc8b" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isOnActivity</name></member>
      <member refid="class_k_win_1_1_window_1a20a2cd33c04529fd4e5115e272ffaaf8" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isOnAllActivities</name></member>
      <member refid="class_k_win_1_1_window_1ab12c1237a71a1f353898742b3d85e793" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isOnAllDesktops</name></member>
      <member refid="class_k_win_1_1_window_1a6214074a0338d546c1c97c736f1b1fe6" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isOnCurrentActivity</name></member>
      <member refid="class_k_win_1_1_window_1aa975d4f4a79a999c827e0a4d7bb5c1dd" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isOnCurrentDesktop</name></member>
      <member refid="class_k_win_1_1_window_1a0e153ca25af4de7deaebbfc31c917560" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isOnDesktop</name></member>
      <member refid="class_k_win_1_1_window_1a0a700ea4c908f6907d172e7754c38db7" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isOnOutput</name></member>
      <member refid="class_k_win_1_1_window_1a3081e1e30178d43b6e73b42e383191bd" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isOnScreenDisplay</name></member>
      <member refid="class_k_win_1_1_window_1a66101776c8b365f52d966288d39dbeec" prot="public" virt="virtual"><scope>KWin::Window</scope><name>isOutline</name></member>
      <member refid="class_k_win_1_1_window_1a1aae947c69f1f83740db61c11d5524c2" prot="public" virt="virtual"><scope>KWin::Window</scope><name>isPlaceable</name></member>
      <member refid="class_k_win_1_1_window_1aa442208612eb92068a69c7e1b7a205ef" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isPopupMenu</name></member>
      <member refid="class_k_win_1_1_window_1abc2ff83881725b11c8d72178012a2a88" prot="public" virt="virtual"><scope>KWin::Window</scope><name>isPopupWindow</name></member>
      <member refid="class_k_win_1_1_window_1a4b695bf258e4c855a72d9c832e0ae4b9" prot="public" virt="virtual"><scope>KWin::Window</scope><name>isRequestedFullScreen</name></member>
      <member refid="class_k_win_1_1_window_1aca7dbc7f62bb563afea5583e128a4afb" prot="public" virt="pure-virtual"><scope>KWin::Window</scope><name>isResizable</name></member>
      <member refid="class_k_win_1_1_window_1a3dfd89167d57f28ebedf72ffddd33191" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isShade</name></member>
      <member refid="class_k_win_1_1_window_1abf1e1de77c7a5e7707f1fcc2ed13db58" prot="public" virt="virtual"><scope>KWin::Window</scope><name>isShadeable</name></member>
      <member refid="class_k_win_1_1_window_1aed48d73c0d33bd1134f6c0b48104030d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isShown</name></member>
      <member refid="class_k_win_1_1_window_1a26bdcce1a00f8b7a1c1401b5bf132874" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isSpecialWindow</name></member>
      <member refid="class_k_win_1_1_window_1aa0179fdd1c6fee664b5401f61f35e493" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isSplash</name></member>
      <member refid="class_k_win_1_1_window_1afc0da6efe05a813f7c8e5e4fdded0824" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isSuspended</name></member>
      <member refid="class_k_win_1_1_window_1a5fa248e56c9434f4d7002528b360a092" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isToolbar</name></member>
      <member refid="class_k_win_1_1_window_1a4240959ea5b4e75eed1a8f29b6055397" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isTooltip</name></member>
      <member refid="class_k_win_1_1_window_1a9c9cc0a66b183a2777a997e351a4c7cf" prot="public" virt="virtual"><scope>KWin::Window</scope><name>isTransient</name></member>
      <member refid="class_k_win_1_1_window_1a96111c26765b1c276dc41df14aa1a5af" prot="public" virt="virtual"><scope>KWin::Window</scope><name>isUnmanaged</name></member>
      <member refid="class_k_win_1_1_window_1a39aab7cbfbd4db666f1c5dce5028a2a6" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>isUnrestrictedInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1af7a970e5b2da43bc372f9fa79daec492" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>isUtility</name></member>
      <member refid="class_k_win_1_1_window_1a340e12bfbaf12ad16dc20e49e1fda8ee" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>isWaitingForInteractiveResizeSync</name></member>
      <member refid="class_k_win_1_1_window_1ade1d7dfe29d1f709eca65af12b076d2b" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>keepAbove</name></member>
      <member refid="class_k_win_1_1_window_1a6155a361d4ffdb58f5e2a006354b46a2" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>keepAbove</name></member>
      <member refid="class_k_win_1_1_window_1a794a364234bf2bbcf77034e6061bf7af" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>keepAboveChanged</name></member>
      <member refid="class_k_win_1_1_window_1a47ab87d36dc289a8f636f78b048a5b36" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>keepBelow</name></member>
      <member refid="class_k_win_1_1_window_1aceec67e914c48c0dd7e678db07907a59" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>keepBelow</name></member>
      <member refid="class_k_win_1_1_window_1aceedecf8e018f3aede6fa947ea214d9b" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>keepBelowChanged</name></member>
      <member refid="class_k_win_1_1_window_1a2bc639db4c4a762bc0d58a715136a0ca" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>keepInArea</name></member>
      <member refid="class_k_win_1_1_window_1a04c86c8dccc5bc02600ce775e4cf78a0" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>keyboardGeometryRestore</name></member>
      <member refid="class_k_win_1_1_window_1aeb1157e5384db85990b6c16659bc7ab3" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>keyPressEvent</name></member>
      <member refid="class_k_win_1_1_window_1a5498d4b8f227afb803b7c09c4ad53160" prot="public" virt="pure-virtual"><scope>KWin::Window</scope><name>killWindow</name></member>
      <member refid="class_k_win_1_1_window_1a2c7d45f16d453f275e7ef16d8ec2118f" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>lastUsageSerial</name></member>
      <member refid="class_k_win_1_1_window_1adcb254bbc52101784ed82685e69c97b5" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>layer</name></member>
      <member refid="class_k_win_1_1_window_1af8445d7e9f3a61fb1d02ef84220332ae" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>layer</name></member>
      <member refid="class_k_win_1_1_window_1ac76883ec1ae279e0453ad6ea21a6a441" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>layoutDecorationRects</name></member>
      <member refid="class_k_win_1_1_window_1a7c8bdc25faf71283cc2d836016fa6113" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>leaveDesktop</name></member>
      <member refid="class_k_win_1_1_window_1ad31baea5b1b98cc7a01b21e6b527f77a" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>leaveInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a43e6e0af4a0864ecfad30c5eda29c2d8" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>lockScreenOverlayChanged</name></member>
      <member refid="class_k_win_1_1_window_1a01d9ea2184e2db1093c64e503054e44c" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_active</name></member>
      <member refid="class_k_win_1_1_window_1af5906859fd02b57258bcd8bc581d1c79" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_activityList</name></member>
      <member refid="class_k_win_1_1_window_1ae71abb379513c957189b9b5bc50be96b" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_activityUpdatesBlocked</name></member>
      <member refid="class_k_win_1_1_window_1a34d2bc7be777b7e73a80e0e9f0e11dee" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_applicationMenuActive</name></member>
      <member refid="class_k_win_1_1_window_1afb4dae41e63bf8253fc18fb0592fb896" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_applicationMenuObjectPath</name></member>
      <member refid="class_k_win_1_1_window_1a0fc590d232b8a473c027c123d765351a" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_applicationMenuServiceName</name></member>
      <member refid="class_k_win_1_1_window_1af9123bdb0820a24c5f49b78f3a9a5f2c" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_autoRaiseTimer</name></member>
      <member refid="class_k_win_1_1_window_1ac2a9b46eff2a2b64330634e98bed862a" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_blockedActivityUpdatesRequireTransients</name></member>
      <member refid="class_k_win_1_1_window_1a1359c9bf73f8b28bdfe9d5aa19aea1ab" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_bufferGeometry</name></member>
      <member refid="class_k_win_1_1_window_1ade714a7cf13d4ef4d770b5763919e5fa" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_clientGeometry</name></member>
      <member refid="class_k_win_1_1_window_1ae54e6b7244395a9a4a9c7bb9ab0cf939" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_clientMachine</name></member>
      <member refid="class_k_win_1_1_window_1a9e81ea2b202e22419de25715d6d9d995" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_colorScheme</name></member>
      <member refid="class_k_win_1_1_window_1a1f4d0f011a8c41e357782a318cd0078d" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_decoration</name></member>
      <member refid="class_k_win_1_1_window_1a8f95d5441e07c467333307a930979994" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_deleted</name></member>
      <member refid="class_k_win_1_1_window_1ad92bcaae3a24dae71b6311ea65100a19" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_demandsAttention</name></member>
      <member refid="class_k_win_1_1_window_1a09fb67780141bb5039d70ec04e2c8d09" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_desktopFileName</name></member>
      <member refid="class_k_win_1_1_window_1a11f83e606efc5d90143b2d396e39e3ec" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_desktops</name></member>
      <member refid="class_k_win_1_1_window_1a30324ba0bf9c10338dd809187d7ab87e" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_electricGeometryRestore</name></member>
      <member refid="class_k_win_1_1_window_1a12c2b2f6f08bc682b5709b0b31835af2" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_electricMaximizing</name></member>
      <member refid="class_k_win_1_1_window_1a8ac86198b154d673d3f95e53f8e22bbc" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_electricMaximizingDelay</name></member>
      <member refid="class_k_win_1_1_window_1a85e581a5d27c42ac61ba665b48b6ccd8" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_electricMode</name></member>
      <member refid="class_k_win_1_1_window_1a59df30651b9d39dc3ee42d5d3b63b400" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_frameGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a7c7d55137ebad9559a28f1c0f142d7e3" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_fullscreenGeometryRestore</name></member>
      <member refid="class_k_win_1_1_window_1a0ca7c21092d548fdf56b613e7a2ef757" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_hidden</name></member>
      <member refid="class_k_win_1_1_window_1ae180802be2d4f58f05d01eb88a1dd4eb" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_hiddenByShowDesktop</name></member>
      <member refid="class_k_win_1_1_window_1ae6c87b2230a834ac55ec726fd3bc2573" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_icon</name></member>
      <member refid="class_k_win_1_1_window_1ae18f2e2076546040be29be581bceb33a" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_interactiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a5371907d36cfc708d29493db67dc55b8" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_internalId</name></member>
      <member refid="class_k_win_1_1_window_1a1ae892b14cdf6d7565154061a6c4910a" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_keepAbove</name></member>
      <member refid="class_k_win_1_1_window_1addd6305ffba6280bc90767705a77caef" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_keepBelow</name></member>
      <member refid="class_k_win_1_1_window_1af0d59bddcb003671edd6c8c5918ca9bb" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_keyboardGeometryRestore</name></member>
      <member refid="class_k_win_1_1_window_1aeac686d7fa3178f4f8c48cad30fe64ae" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_lastUsageSerial</name></member>
      <member refid="class_k_win_1_1_window_1a7cebc18154bbbc82550e807cb97548bc" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_layer</name></member>
      <member refid="class_k_win_1_1_window_1a974b55853ed7502a0d360dce8202ecf7" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_lockScreenOverlay</name></member>
      <member refid="class_k_win_1_1_window_1a3c7d9d00fef91f9caea2200864b6fa11" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_maximizeGeometryRestore</name></member>
      <member refid="class_k_win_1_1_window_1ac8984210c5c8842735c5632a8c634095" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_minimized</name></member>
      <member refid="class_k_win_1_1_window_1add656ef4838e72d612c6b50db024088c" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_modal</name></member>
      <member refid="class_k_win_1_1_window_1af7e5c26ceb8213166436ae5cb33b3868" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_moveResizeGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a0cf00bc60958289e00e98f54c5cd5efc" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_moveResizeOutput</name></member>
      <member refid="class_k_win_1_1_window_1a7ebdca86b3c0761c70c933c2218600cb" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_nextTargetScale</name></member>
      <member refid="class_k_win_1_1_window_1a082147340c5e5bad774726702cc59d69" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_offscreenFramecallbackTimer</name></member>
      <member refid="class_k_win_1_1_window_1ae8ba437342c4f6dc46da0fbe50a09e0f" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_offscreenRenderCount</name></member>
      <member refid="class_k_win_1_1_window_1abb36a6011f877745c67c573119c6a5c6" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_opacity</name></member>
      <member refid="class_k_win_1_1_window_1a0dcaab2dcb54c92ce99429a62f2bc3e5" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_originalSkipTaskbar</name></member>
      <member refid="class_k_win_1_1_window_1a87aebec66b33eebf680520b5eb66fbd4" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_output</name></member>
      <member refid="class_k_win_1_1_window_1a9c732f4f49c5d539aad82c43b7901a7f" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_palette</name></member>
      <member refid="class_k_win_1_1_window_1a0084134b116f3a3a3b8890a50e967207" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_preferredBufferTransform</name></member>
      <member refid="class_k_win_1_1_window_1a598d3d131ab6df350faf1e0d8e48c129" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_preferredColorDescription</name></member>
      <member refid="class_k_win_1_1_window_1afdc3cc5183afb301b1beb45eef23b018" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_refCount</name></member>
      <member refid="class_k_win_1_1_window_1ad11fd4fa0886c3235d511ca20c92cdd3" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_requestedTile</name></member>
      <member refid="class_k_win_1_1_window_1a7b0073ffa42fe46eec1c800a0ce2fe93" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_rules</name></member>
      <member refid="class_k_win_1_1_window_1a751e7058dae4fd04e4da899b2860cd0c" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_shadeHoverTimer</name></member>
      <member refid="class_k_win_1_1_window_1ae6f4b0155777b5852e8c6e7a3e8bb704" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_shadeMode</name></member>
      <member refid="class_k_win_1_1_window_1a00a0d46c1f63c72d6905cfcea6cb7e90" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_shadow</name></member>
      <member refid="class_k_win_1_1_window_1a3d1d1e31100e981a40ed4d01467c9b01" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_skipCloseAnimation</name></member>
      <member refid="class_k_win_1_1_window_1ac4054bc17a49a5ec8b5705ed929a3eb3" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_skipPager</name></member>
      <member refid="class_k_win_1_1_window_1a8329114171869e9d8f47985eb2ce5a0b" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_skipSwitcher</name></member>
      <member refid="class_k_win_1_1_window_1a056f5f78bc6d3cb6d6cf48ab73fd9ce2" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_skipTaskbar</name></member>
      <member refid="class_k_win_1_1_window_1a7ab75d4f6088d9ee485731cc567f294e" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_stackingOrder</name></member>
      <member refid="class_k_win_1_1_window_1a7fb37fb07218feaab2454465fbed6864" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_surface</name></member>
      <member refid="class_k_win_1_1_window_1a265fba838812db557b4dc8d9c7ba4dba" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_suspended</name></member>
      <member refid="class_k_win_1_1_window_1a2c70041797ff18d5c1a135feabbd8861" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_targetScale</name></member>
      <member refid="class_k_win_1_1_window_1a19c97e72ee45549f09b9b6fd62c97e73" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_tile</name></member>
      <member refid="class_k_win_1_1_window_1a4f120e060e7e5296686849275e6ba0b2" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_transientFor</name></member>
      <member refid="class_k_win_1_1_window_1a4b477f51ea1fb84ee84bd6fa0f0b4658" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_transients</name></member>
      <member refid="class_k_win_1_1_window_1a2e2dbdceda6f42b30b91e6f9949cdef1" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_unresponsive</name></member>
      <member refid="class_k_win_1_1_window_1aa21b3b775184dac69e633ff5429fadc4" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_virtualKeyboardGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a42e178e26b4f5ac7ffd415293b9b9e5a" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_windowItem</name></member>
      <member refid="class_k_win_1_1_window_1a4400f22402e2098aa69a9cc119d3119f" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>m_windowManagementInterface</name></member>
      <member refid="class_k_win_1_1_window_1afaea2549a9bde1616f1c0491a340ad64" prot="public" virt="virtual"><scope>KWin::Window</scope><name>mainWindows</name></member>
      <member refid="class_k_win_1_1_window_1ab7146e790ca7820c18f7a23b6b2bc7ab" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>managed</name></member>
      <member refid="class_k_win_1_1_window_1a7f753460e69ae5649245beb0dd1abd90" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>mapFromLocal</name></member>
      <member refid="class_k_win_1_1_window_1a9424a239d38ac1d23a06c2db0567d04d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>mapToFrame</name></member>
      <member refid="class_k_win_1_1_window_1a9f3e6314899a3ace5b8df65704a41529" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>mapToLocal</name></member>
      <member refid="class_k_win_1_1_window_1a159ea1bd3bc5d490f99c9b158fbf8fcf" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>markAsDeleted</name></member>
      <member refid="class_k_win_1_1_window_1afcdf5efc106e90c4bf388e9abffffda6" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>maximizable</name></member>
      <member refid="class_k_win_1_1_window_1a513849e778f44172f57dceebf94cadd6" prot="public" virt="virtual"><scope>KWin::Window</scope><name>maximize</name></member>
      <member refid="class_k_win_1_1_window_1a045c3913e8716caabc318263c012e073" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>maximizeableChanged</name></member>
      <member refid="class_k_win_1_1_window_1aab14ea30d0ecc3db40ba4abe981defc8" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>maximizedAboutToChange</name></member>
      <member refid="class_k_win_1_1_window_1a08cad7d21d3195ccc0829c2c0f1f9c95" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>maximizedChanged</name></member>
      <member refid="class_k_win_1_1_window_1a93879a21c2f72b3e4bb1e5eace66a2f2" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>maximizeGeometryRestoreChanged</name></member>
      <member refid="class_k_win_1_1_window_1aacb57e092c7155d3745e3964c7745ba3" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>maximizeMode</name></member>
      <member refid="class_k_win_1_1_window_1a1ca68b36bcceffd514324fe97b3bab11" prot="public" virt="virtual"><scope>KWin::Window</scope><name>maximizeMode</name></member>
      <member refid="class_k_win_1_1_window_1aed76f5fbe38ae0051ad9587c7e47bcd8" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>maxSize</name></member>
      <member refid="class_k_win_1_1_window_1aabe6333ee36076f053b1356e4217cb8c" prot="public" virt="virtual"><scope>KWin::Window</scope><name>maxSize</name></member>
      <member refid="class_k_win_1_1_window_1af9b82e7eb525e57206489164ae67df78" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>maybeSendFrameCallback</name></member>
      <member refid="class_k_win_1_1_window_1ae666f42ac59d5e3dcad179184eaa1986" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>menu</name></member>
      <member refid="class_k_win_1_1_window_1a7c4b95b673e249d7efba8e5af1bfb971" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>minimizable</name></member>
      <member refid="class_k_win_1_1_window_1a7c419713c2fc34dfe096ae7dbde13e06" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>minimizeableChanged</name></member>
      <member refid="class_k_win_1_1_window_1aece20b77969aee41eb51a679cfdce582" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>minimized</name></member>
      <member refid="class_k_win_1_1_window_1ab2768713cab0bc9b18ff28b39d3170ad" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>minimizedChanged</name></member>
      <member refid="class_k_win_1_1_window_1acf74967cccfc708ba0dd82dce391d77f" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>minSize</name></member>
      <member refid="class_k_win_1_1_window_1abb7a478a68c076a93fe1e205b161c4b5" prot="public" virt="virtual"><scope>KWin::Window</scope><name>minSize</name></member>
      <member refid="class_k_win_1_1_window_1a4e462795255c904774aa629a6163f391" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>modal</name></member>
      <member refid="class_k_win_1_1_window_1a6a98d80986255b4543ca25ddc07e9ff2" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>modalChanged</name></member>
      <member refid="class_k_win_1_1_window_1ac363a722e88080cf4a00495866de7f4d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>modifiers</name></member>
      <member refid="class_k_win_1_1_window_1a167b374ab7f2cd2da20250457a4fc2d2" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>mouseGravity</name></member>
      <member refid="class_k_win_1_1_window_1a6dc0bc3b6fedf55e01d0db0ee508b320" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>move</name></member>
      <member refid="class_k_win_1_1_window_1ae6dc01373356e8b623e67a3d36ded9ce" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>move</name></member>
      <member refid="class_k_win_1_1_window_1a6481df4b0d499d0b97ba0cef43d959c1" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>moveable</name></member>
      <member refid="class_k_win_1_1_window_1a945946c3799baf32ae8dc6e71a95410e" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>moveableAcrossScreens</name></member>
      <member refid="class_k_win_1_1_window_1aca6e1f1d8772897c5efbfb3c17fa436e" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>moveResize</name></member>
      <member refid="class_k_win_1_1_window_1afd3ab3a04af8f8ee6569e6389b1a7ac2" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>moveResizeCursorChanged</name></member>
      <member refid="class_k_win_1_1_window_1a9356b0ac19763187d49f27e195ad4c5e" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>moveResizedChanged</name></member>
      <member refid="class_k_win_1_1_window_1a5bd40e38d16c8453af9226579d1865ac" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>moveResizeGeometry</name></member>
      <member refid="class_k_win_1_1_window_1afac271a8d3eb8a6d16e65ba261713a8a" prot="protected" virt="pure-virtual"><scope>KWin::Window</scope><name>moveResizeInternal</name></member>
      <member refid="class_k_win_1_1_window_1a412b316294522eb307c31fb2155e82e9" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>MoveResizeMode</name></member>
      <member refid="class_k_win_1_1_window_1ad20775a66b1c93ffb3cd0a8e917cc92b" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>moveResizeOutput</name></member>
      <member refid="class_k_win_1_1_window_1a48c39e5a2fae63c9480116fa64b89d57" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>moveToArea</name></member>
      <member refid="class_k_win_1_1_window_1a2ec8e47f4272f0e80bec5033f5cac31e" prot="public" virt="virtual"><scope>KWin::Window</scope><name>nextClientPosToFramePos</name></member>
      <member refid="class_k_win_1_1_window_1a295cbed96fc3d79023a1820b26c2af53" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>nextClientRectToFrameRect</name></member>
      <member refid="class_k_win_1_1_window_1af4f582315c040559fde4abcadf727776" prot="public" virt="virtual"><scope>KWin::Window</scope><name>nextClientSizeToFrameSize</name></member>
      <member refid="class_k_win_1_1_window_1ae186402da754d5946bcfeab855f6096e" prot="public" virt="virtual"><scope>KWin::Window</scope><name>nextDecoration</name></member>
      <member refid="class_k_win_1_1_window_1a5bbc27846d8e4d03bb44061b15609f50" prot="public" virt="virtual"><scope>KWin::Window</scope><name>nextFramePosToClientPos</name></member>
      <member refid="class_k_win_1_1_window_1a609229e1420ffc3f9d584ea7834fdb73" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>nextFrameRectToClientRect</name></member>
      <member refid="class_k_win_1_1_window_1abc82318fb715dcc5a0a3b98515897e92" prot="public" virt="virtual"><scope>KWin::Window</scope><name>nextFrameSizeToClientSize</name></member>
      <member refid="class_k_win_1_1_window_1ad599d6c840d9fd09232e753638a16b54" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>nextInteractiveMoveGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a695c280f8767b14eced4e9dbd0422431" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>nextInteractiveResizeGeometry</name></member>
      <member refid="class_k_win_1_1_window_1aa37ac55bb7dc545e7109d022b02202a7" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>nextTargetScale</name></member>
      <member refid="class_k_win_1_1_window_1ad7f7aca73ef4e87e1626a377f2cd168c" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>nextTargetScaleChanged</name></member>
      <member refid="class_k_win_1_1_window_1a522f27150d53cdf33f9ff69940763621" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>noBorder</name></member>
      <member refid="class_k_win_1_1_window_1a728e6755d954d62acad193681d709610" prot="public" virt="virtual"><scope>KWin::Window</scope><name>noBorder</name></member>
      <member refid="class_k_win_1_1_window_1ad800920f411886a60d8a154c1bbb4e1a" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>noBorderChanged</name></member>
      <member refid="class_k_win_1_1_window_1a4a12209a68d7a695cb8fb9a1ebb27b5b" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>normalWindow</name></member>
      <member refid="class_k_win_1_1_window_1a544f23643bc4509d24855f10d716387f" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>notification</name></member>
      <member refid="class_k_win_1_1_window_1a045818526d97d3965985db1204036bd5" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>offscreenRenderingChanged</name></member>
      <member refid="class_k_win_1_1_window_1a140e419a5274b750fd8a6b3789c8f6af" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>offset</name></member>
      <member refid="class_k_win_1_1_window_1ac093de4d3c723b295f1ff93b5aa05393" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>onAllDesktops</name></member>
      <member refid="class_k_win_1_1_window_1a1eda1e68950fd02ab06c22ec96643ce1" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>onScreenDisplay</name></member>
      <member refid="class_k_win_1_1_window_1abb0f10e1968953e89829431415fa803e" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>opacity</name></member>
      <member refid="class_k_win_1_1_window_1a41cf2858ec31edde92b788747ddf1177" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>opacity</name></member>
      <member refid="class_k_win_1_1_window_1a5c56ad8046349bf9a87a26d73fd17c37" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>opacityChanged</name></member>
      <member refid="class_k_win_1_1_window_1a05dee36ed06739092162ef6425fe0d84" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>originalSkipTaskbar</name></member>
      <member refid="class_k_win_1_1_window_1a80c872dfd7f84fdcb120dbdcefd28e72" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>outline</name></member>
      <member refid="class_k_win_1_1_window_1ae01b40bf580c920be022d66080e0685c" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>output</name></member>
      <member refid="class_k_win_1_1_window_1a61b3745b4ffca0d122acc9fc0c8e0c4f" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>output</name></member>
      <member refid="class_k_win_1_1_window_1a7dbccaac47d2333da22ab4acb4897381" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>outputChanged</name></member>
      <member refid="class_k_win_1_1_window_1af9f291eba5887f2df4f6586c4a6b8903" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>packTo</name></member>
      <member refid="class_k_win_1_1_window_1ac10c709b4624c0aef3b4f2f8cc57427b" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>palette</name></member>
      <member refid="class_k_win_1_1_window_1a9507fbaee33b1a8e28fbd6bf78779891" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>paletteChanged</name></member>
      <member refid="class_k_win_1_1_window_1adc4cfddd14db72a5b6337bf3b0f8c639" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>performMousePressCommand</name></member>
      <member refid="class_k_win_1_1_window_1a0a5e4a76a206143596023e553abedfd5" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>performMouseReleaseCommand</name></member>
      <member refid="class_k_win_1_1_window_1a085bf52e9cddc60b0b3d4a4550a60dfd" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>pid</name></member>
      <member refid="class_k_win_1_1_window_1ac21f9e46d7fcddc2b1196ccc928bb763" prot="public" virt="virtual"><scope>KWin::Window</scope><name>pid</name></member>
      <member refid="class_k_win_1_1_window_1aeb2a5b22cd9d9d72646b739689c9e6e0" prot="public" virt="virtual"><scope>KWin::Window</scope><name>pointerEnterEvent</name></member>
      <member refid="class_k_win_1_1_window_1a94aff261a7be7524f316a35b8fe4190f" prot="public" virt="virtual"><scope>KWin::Window</scope><name>pointerLeaveEvent</name></member>
      <member refid="class_k_win_1_1_window_1ab6bf1e4ac19677d618e6a6c392bb27a1" prot="public" virt="virtual"><scope>KWin::Window</scope><name>popupDone</name></member>
      <member refid="class_k_win_1_1_window_1a92b7c2c501362d45205d4859aea145e8" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>popupMenu</name></member>
      <member refid="class_k_win_1_1_window_1a3423010aedb939fad955032d40f64fcb" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>popupWindow</name></member>
      <member refid="class_k_win_1_1_window_1a090c42b4c18c700d15ff1822a2044c0f" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>pos</name></member>
      <member refid="class_k_win_1_1_window_1aa42e778009d34e419aee0651f727ba30" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>pos</name></member>
      <member refid="class_k_win_1_1_window_1aa6519c0e1267b9d6a4bfb925652d5ddb" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>preferredBufferTransform</name></member>
      <member refid="class_k_win_1_1_window_1a4720452272fcfef7fb9e1c4fdf1d3c84" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>preferredColorDescription</name></member>
      <member refid="class_k_win_1_1_window_1a8351dc98d7b4e8388c20c1f75d45b53b" prot="public" virt="virtual"><scope>KWin::Window</scope><name>preferredColorScheme</name></member>
      <member refid="class_k_win_1_1_window_1a3c741dfbd6ca6136eb56b6e57054b8d9" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>processDecorationButtonPress</name></member>
      <member refid="class_k_win_1_1_window_1a2299969b07dae95abd1896a63d24f147" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>processDecorationButtonRelease</name></member>
      <member refid="class_k_win_1_1_window_1a192d2d38ea0f55ec06c164838fac36ac" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>processDecorationMove</name></member>
      <member refid="class_k_win_1_1_window_1af3de3b41671127884529d47ba9e96fc0" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>providesContextHelp</name></member>
      <member refid="class_k_win_1_1_window_1a4eb8c1b2c6df25f85d091afeeebb66ef" prot="public" virt="virtual"><scope>KWin::Window</scope><name>providesContextHelp</name></member>
      <member refid="class_k_win_1_1_window_1aee9db3fc7ca52ecdaf42b7a77137c238" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>quickTileGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a3df1363787b3578160154bf8b472c6d2" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>quickTileGeometryRestore</name></member>
      <member refid="class_k_win_1_1_window_1a771c32db912a7dca82da5fd3f9fe5fa8" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>quickTileMode</name></member>
      <member refid="class_k_win_1_1_window_1a8b05c56b34e456d2ffeec10eaef8fa5e" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>quickTileModeChanged</name></member>
      <member refid="class_k_win_1_1_window_1aa8d74436db9dba2de3f297c459c62ca4" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>ready_for_painting</name></member>
      <member refid="class_k_win_1_1_window_1af15bc927a7938e696dfcaf8e5ddb20c1" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>readyForPainting</name></member>
      <member refid="class_k_win_1_1_window_1a4890a0258935c363bad64f8681c3af11" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>readyForPaintingChanged</name></member>
      <member refid="class_k_win_1_1_window_1aa9a98858e1f184f24e2bfa6cf9362b5f" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>rect</name></member>
      <member refid="class_k_win_1_1_window_1a392792ca7e4158c176f4fa32c42ae528" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>rect</name></member>
      <member refid="class_k_win_1_1_window_1ad9117ba1a2dcfae844dfb15f3beb5ae3" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>ref</name></member>
      <member refid="class_k_win_1_1_window_1a4d84c00bbc011d8a4b3b4a17b8851d15" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>refOffscreenRendering</name></member>
      <member refid="class_k_win_1_1_window_1af8b11c559566d839b7665662b6d561a3" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>removeRule</name></member>
      <member refid="class_k_win_1_1_window_1a660daf739fe1a2d1a2280599f526635c" prot="public" virt="virtual"><scope>KWin::Window</scope><name>removeTransient</name></member>
      <member refid="class_k_win_1_1_window_1a35e79a166a5640473b24800e1a7e13cd" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>removeTransientFromList</name></member>
      <member refid="class_k_win_1_1_window_1acf3e2b244a1f328009073204ff50f5ae" prot="public" virt="virtual"><scope>KWin::Window</scope><name>requestedMaximizeMode</name></member>
      <member refid="class_k_win_1_1_window_1a1ffaa1f6015de331667110a987922089" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>requestedQuickTileMode</name></member>
      <member refid="class_k_win_1_1_window_1a935782e2939b237ea347b393d34ca27b" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>requestedTile</name></member>
      <member refid="class_k_win_1_1_window_1a1fdebcd600a74ba4e3ceef2dc4e01da4" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>requestedTileChanged</name></member>
      <member refid="class_k_win_1_1_window_1a45f340de71d3dbb253c978d091d39d07" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>requestTile</name></member>
      <member refid="class_k_win_1_1_window_1aa5afd7d435f68d9fdfe23ae20b954bc6" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>resetQuickTilingMaximizationZones</name></member>
      <member refid="class_k_win_1_1_window_1a4f9ff78c2b5b8fb2c900869968a9df63" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>resize</name></member>
      <member refid="class_k_win_1_1_window_1acbdb2c16d25e7aa8842c04a0d51fe61e" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>resize</name></member>
      <member refid="class_k_win_1_1_window_1a208becdee75c1e38ea619880b1b50bbc" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>resizeable</name></member>
      <member refid="class_k_win_1_1_window_1a2570c494a29c3c06a6b47230592e97c4" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>resizeIncrements</name></member>
      <member refid="class_k_win_1_1_window_1a06e0e35e4fd13abedca3ed0f9eb65f56" prot="public" virt="pure-virtual"><scope>KWin::Window</scope><name>resizeWithChecks</name></member>
      <member refid="class_k_win_1_1_window_1a9425218f438709c0bf0dac60fb7e2786" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>resource_class</name></member>
      <member refid="class_k_win_1_1_window_1ab2c297c768db712d6bf9961ac1fabb04" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>resource_name</name></member>
      <member refid="class_k_win_1_1_window_1a825429c1c8c6f5b6721752eac7da370d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>resourceClass</name></member>
      <member refid="class_k_win_1_1_window_1a97af0bd7201928fd19d12a0ccbaa9914" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>resourceClass</name></member>
      <member refid="class_k_win_1_1_window_1a927f981105a03011681b42d6644834f0" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>resourceName</name></member>
      <member refid="class_k_win_1_1_window_1ac06a67c2039af8a40589846ae2eb7c9a" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>resourceName</name></member>
      <member refid="class_k_win_1_1_window_1aab8020efbe1a1ddc2934570b9701d0c3" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>rules</name></member>
      <member refid="class_k_win_1_1_window_1aed6539e49519ddd40f9c45665ae9cf58" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>s_defaultPalette</name></member>
      <member refid="class_k_win_1_1_window_1a9fda98051b25624be54619573b64ffb4" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>s_palettes</name></member>
      <member refid="class_k_win_1_1_window_1a70e1b60416c67a488268d17dba135eca" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>SameApplicationCheck</name></member>
      <member refid="class_k_win_1_1_window_1a43d064a134863a34bfe5956f21a35641" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>sendToOutput</name></member>
      <member refid="class_k_win_1_1_window_1afc8d12b9a719a163f5f862a79e515465" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setActive</name></member>
      <member refid="class_k_win_1_1_window_1a82738dff3fdc591b41d16aafef113e01" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setApplicationMenuActive</name></member>
      <member refid="class_k_win_1_1_window_1a2867cf88dbab9e9101452ff49a44790e" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setColorScheme</name></member>
      <member refid="class_k_win_1_1_window_1ad11b98291d4eddcbcc38e614d416f499" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setDecoratedWindow</name></member>
      <member refid="class_k_win_1_1_window_1ab2d8993f1630348add5dc2632aba5de5" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>setDecoration</name></member>
      <member refid="class_k_win_1_1_window_1a4f8e4a201d469a4bec2646970b1a3f42" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>setDesktopFileName</name></member>
      <member refid="class_k_win_1_1_window_1a017d0afde06ff1fac03f4c4ef7cfb6d9" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setDesktops</name></member>
      <member refid="class_k_win_1_1_window_1a8daebb2d16d0caf9dd9e9db6322b47de" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>setElectricBorderMaximizing</name></member>
      <member refid="class_k_win_1_1_window_1a57e519ab516032f0d9d74016c1229f1d" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>setElectricBorderMode</name></member>
      <member refid="class_k_win_1_1_window_1a5f16d2ea8d86a8b9e94c2461d4dbb9c8" prot="public" virt="virtual"><scope>KWin::Window</scope><name>setFullScreen</name></member>
      <member refid="class_k_win_1_1_window_1aa475aaf802327aabba57f3c9404a34d3" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setFullscreenGeometryRestore</name></member>
      <member refid="class_k_win_1_1_window_1a9372354c3330f992f28ca6e6fb22d700" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setGeometryRestore</name></member>
      <member refid="class_k_win_1_1_window_1a5af4007f99eb32f7091d32d3331b0e7e" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setHidden</name></member>
      <member refid="class_k_win_1_1_window_1a4c76c5f07d75a4f427466a9a6db35ef9" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setHiddenByShowDesktop</name></member>
      <member refid="class_k_win_1_1_window_1a8711a1631fd015356de884e9ced52c8d" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>setIcon</name></member>
      <member refid="class_k_win_1_1_window_1a7e62656d305c8cceba734c4f362d3249" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>setInteractiveMoveOffset</name></member>
      <member refid="class_k_win_1_1_window_1a3ac078b88d06393b75e7ba06d5b934c8" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>setInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a419a9bbda60e3f84216574ec05f4787a" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>setInteractiveMoveResizeAnchor</name></member>
      <member refid="class_k_win_1_1_window_1a5b6daf48e5a5dfacc4c06034357cee70" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>setInteractiveMoveResizeGravity</name></member>
      <member refid="class_k_win_1_1_window_1a00035dedbdce6b18de9f323c8a12ebac" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>setInteractiveMoveResizeModifiers</name></member>
      <member refid="class_k_win_1_1_window_1a2c4200a7f6de700eb03c3b48a86a2fdd" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>setInteractiveMoveResizePointerButtonDown</name></member>
      <member refid="class_k_win_1_1_window_1afc24b8209fd3821a0b706667d7b97847" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setKeepAbove</name></member>
      <member refid="class_k_win_1_1_window_1a10220e62a04571d571a0950fb657b2d2" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setKeepBelow</name></member>
      <member refid="class_k_win_1_1_window_1a316c6dea6c926489ab87a93df74f9ec0" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>setKeyboardGeometryRestore</name></member>
      <member refid="class_k_win_1_1_window_1ab80ea35c277e387008a043b40ed19c3d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setLastUsageSerial</name></member>
      <member refid="class_k_win_1_1_window_1a1e3e27bf725caadcf2484557afe24921" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setLockScreenOverlay</name></member>
      <member refid="class_k_win_1_1_window_1a0c0c85ab71928ebce12edcfd33c64b0d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setMaximize</name></member>
      <member refid="class_k_win_1_1_window_1a2020d42e4c3f51da3bcec8cfdc632f86" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setMinimized</name></member>
      <member refid="class_k_win_1_1_window_1a52d0efcfe93dcc8813fddcb813e9120e" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setModal</name></member>
      <member refid="class_k_win_1_1_window_1a8653343fc420debd4ffb00938488a736" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>setMoveResizeGeometry</name></member>
      <member refid="class_k_win_1_1_window_1adbbbb9c3b063b36a448825bc710cb4a8" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setMoveResizeOutput</name></member>
      <member refid="class_k_win_1_1_window_1a6757eacee3e64bdbcd4ad4583859846d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setNextTargetScale</name></member>
      <member refid="class_k_win_1_1_window_1ab2de2bd6a4bf0fabdf41c5cac3e595f3" prot="public" virt="virtual"><scope>KWin::Window</scope><name>setNoBorder</name></member>
      <member refid="class_k_win_1_1_window_1a7e638bc0587a8f3df06238420f94962f" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setOnActivities</name></member>
      <member refid="class_k_win_1_1_window_1a545f116b85dc0d6e66045171aa18fe53" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setOnActivity</name></member>
      <member refid="class_k_win_1_1_window_1a4fd6928be07d09893f0ee9df9e015fc7" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setOnAllActivities</name></member>
      <member refid="class_k_win_1_1_window_1a6d170ffa2b85f130fdd02ca8be09d611" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setOnAllDesktops</name></member>
      <member refid="class_k_win_1_1_window_1a294f762b7e595263d56cb155330f19fd" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setOpacity</name></member>
      <member refid="class_k_win_1_1_window_1a42e28c55648d7fbd21d164b14d889dea" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setOriginalSkipTaskbar</name></member>
      <member refid="class_k_win_1_1_window_1a8018decfe708255ffd09b957dc2d14b8" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setOutput</name></member>
      <member refid="class_k_win_1_1_window_1a83c14ba0b0896374d05e78bc19f878b1" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setPreferredBufferTransform</name></member>
      <member refid="class_k_win_1_1_window_1a0ba265750a8310c6566addce02164027" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setPreferredColorDescription</name></member>
      <member refid="class_k_win_1_1_window_1ac21b2eb64cb5abacbe9015e592c6c935" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setQuickTileMode</name></member>
      <member refid="class_k_win_1_1_window_1aa0a1368e7290795e7c7ed6d32c97d0de" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setQuickTileModeAtCurrentPosition</name></member>
      <member refid="class_k_win_1_1_window_1a595f38fca83c2083b11039c4679983c5" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>setReadyForPainting</name></member>
      <member refid="class_k_win_1_1_window_1a38800a8310bd13d63a6a3e18a50028d4" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>setResourceClass</name></member>
      <member refid="class_k_win_1_1_window_1a14232d4a0703db154fc0f506be5a675a" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setShade</name></member>
      <member refid="class_k_win_1_1_window_1a9c807f93f16ca3869027ea6cc511c5e8" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setShade</name></member>
      <member refid="class_k_win_1_1_window_1ae45b3db3780c6b8ed8eab2b87a1031aa" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setShortcut</name></member>
      <member refid="class_k_win_1_1_window_1a2fbf7904e517a0fa5a3661bdb86001c8" prot="protected" virt="virtual"><scope>KWin::Window</scope><name>setShortcutInternal</name></member>
      <member refid="class_k_win_1_1_window_1a67a344bd50e2d01ad45bf9ecc4ddd6e3" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setSkipCloseAnimation</name></member>
      <member refid="class_k_win_1_1_window_1a9511f02ec7549d4520c56cc8e71341ab" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setSkipPager</name></member>
      <member refid="class_k_win_1_1_window_1ae740a221f99373e76b5ed57a6edfb5a8" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setSkipSwitcher</name></member>
      <member refid="class_k_win_1_1_window_1a02ce5273a16265b92513c1d6f5ca16ce" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setSkipTaskbar</name></member>
      <member refid="class_k_win_1_1_window_1aa4540f347a37695c94ad9264bccb108f" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setStackingOrder</name></member>
      <member refid="class_k_win_1_1_window_1aa1fb45941f94961dd825e503ace0b7d9" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setSurface</name></member>
      <member refid="class_k_win_1_1_window_1a6e70d5ab3f900d20cc2bf67fa3b0c7ae" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setSuspended</name></member>
      <member refid="class_k_win_1_1_window_1ade9e5485cc346d37281078debb1badbc" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>setTargetScale</name></member>
      <member refid="class_k_win_1_1_window_1a71c83108b40bc535e453981b1958db08" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setTileCompatibility</name></member>
      <member refid="class_k_win_1_1_window_1a3e742583c3124dbcc14d7f1ca800fe29" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setTransientFor</name></member>
      <member refid="class_k_win_1_1_window_1aacf6c3ac882bd25beb2777cedd4dbc64" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>setUnresponsive</name></member>
      <member refid="class_k_win_1_1_window_1a78a086d817f68eeedf87e3e49706b3da" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>setUnrestrictedInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a39805264749f963ab793849f002df2cd" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setupCompositing</name></member>
      <member refid="class_k_win_1_1_window_1a0ff6b1fc41b88953d7f641a33492e54d" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>setupWindowManagementInterface</name></member>
      <member refid="class_k_win_1_1_window_1a91b2a6bd8ffbc9b12bf7e0dd7e93b4dd" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>setupWindowRules</name></member>
      <member refid="class_k_win_1_1_window_1a064dec4659e7831fe425f689ad0312c9" prot="public" virt="virtual"><scope>KWin::Window</scope><name>setVirtualKeyboardGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a406585fb5b2d7fa1421fb0c56be550a2" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>shade</name></member>
      <member refid="class_k_win_1_1_window_1ac19536a1e7936f2c46fab47c8562184b" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>shadeable</name></member>
      <member refid="class_k_win_1_1_window_1a2021479eb63a57741fcbd1ff860bf3a8" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>shadeableChanged</name></member>
      <member refid="class_k_win_1_1_window_1a65a50831398387c79231316c21be1abc" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>shadeChanged</name></member>
      <member refid="class_k_win_1_1_window_1a62f038086489feb23351bd4e00eee5ac" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>shadeHover</name></member>
      <member refid="class_k_win_1_1_window_1abfa6caaf2d5624a4cdd2b49d20ed228c" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>shadeMode</name></member>
      <member refid="class_k_win_1_1_window_1a30a7bed6ed1322874c268e04a5cd455b" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>shadeUnhover</name></member>
      <member refid="class_k_win_1_1_window_1a5fc203455636e9bd840465b05c8905e5" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>shadow</name></member>
      <member refid="class_k_win_1_1_window_1aced9f90cb668b5491267d3bc0ab9a530" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>shadowChanged</name></member>
      <member refid="class_k_win_1_1_window_1adf86e393b2358d840cbe8d4b6870193b" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>shortcut</name></member>
      <member refid="class_k_win_1_1_window_1af4f8e9d5bcbfd147ce65a6106858010e" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>shortcutCaptionSuffix</name></member>
      <member refid="class_k_win_1_1_window_1a04cfd63418e8fc4dc8c3cb3565a613a9" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>showApplicationMenu</name></member>
      <member refid="class_k_win_1_1_window_1ab6ab84f217f36414e4089b4b7b34f069" prot="public" virt="virtual"><scope>KWin::Window</scope><name>showContextHelp</name></member>
      <member refid="class_k_win_1_1_window_1a1a0b0f83a533b8b689dd8bd35c318b8b" prot="public" virt="virtual"><scope>KWin::Window</scope><name>showOnScreenEdge</name></member>
      <member refid="class_k_win_1_1_window_1a8114e3a5eda24d8d1b745c9ab046d628" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>shrinkHorizontal</name></member>
      <member refid="class_k_win_1_1_window_1a6faea699a6465e2eab512f6f27f7ac4d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>shrinkVertical</name></member>
      <member refid="class_k_win_1_1_window_1a3d66832f7a462d332759451c3633851d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>size</name></member>
      <member refid="class_k_win_1_1_window_1abdcd7b301e22e9442661118f2a169635" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>size</name></member>
      <member refid="class_k_win_1_1_window_1a96727035a8ba0a709cc464483d1d7b3e" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>SizeMode</name></member>
      <member refid="class_k_win_1_1_window_1a96727035a8ba0a709cc464483d1d7b3eac26ddc87899c79d31f6f90bcd11b85ba" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>SizeModeAny</name></member>
      <member refid="class_k_win_1_1_window_1a96727035a8ba0a709cc464483d1d7b3eaac1c9b8c41a4ac9f828a6506ca5c0772" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>SizeModeFixedH</name></member>
      <member refid="class_k_win_1_1_window_1a96727035a8ba0a709cc464483d1d7b3eaa2888bb87f22c92391588c28ec2a5f18" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>SizeModeFixedW</name></member>
      <member refid="class_k_win_1_1_window_1a96727035a8ba0a709cc464483d1d7b3ea7e60bdb999d87d3a0596e4e8bfdb415b" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>SizeModeMax</name></member>
      <member refid="class_k_win_1_1_window_1a1cb22e123b2f9b94c562e6aa19d0557d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>skipCloseAnimationChanged</name></member>
      <member refid="class_k_win_1_1_window_1acab70f6f5c4c1fb524f1616f9cb13e03" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>skipPager</name></member>
      <member refid="class_k_win_1_1_window_1acd9a44ca4a51baec98cd28279f2c8aa4" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>skipPager</name></member>
      <member refid="class_k_win_1_1_window_1a39a00387940d0f051deff0a6589c5c98" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>skipPagerChanged</name></member>
      <member refid="class_k_win_1_1_window_1a435b14844e4ed3e2ad1a2b95b7a75b73" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>skipsCloseAnimation</name></member>
      <member refid="class_k_win_1_1_window_1af690c3506cbea89838a3561d78fc028f" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>skipsCloseAnimation</name></member>
      <member refid="class_k_win_1_1_window_1a09ff41ece0cac78c632f0a3218c2602d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>skipSwitcher</name></member>
      <member refid="class_k_win_1_1_window_1a7a2eadd344658e6ae2ae2ff1d24195fd" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>skipSwitcher</name></member>
      <member refid="class_k_win_1_1_window_1a097084f43aa41eaa4b55c174712ed556" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>skipSwitcherChanged</name></member>
      <member refid="class_k_win_1_1_window_1aff0dcb9257a7c18c075605858ef64ad6" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>skipTaskbar</name></member>
      <member refid="class_k_win_1_1_window_1afac45df3fbba7e895e8378d325274394" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>skipTaskbar</name></member>
      <member refid="class_k_win_1_1_window_1a926d32fb86d967e63036b5b4afb0eb65" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>skipTaskbarChanged</name></member>
      <member refid="class_k_win_1_1_window_1a3c22405167cf2926964f9336752971a3" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>specialWindow</name></member>
      <member refid="class_k_win_1_1_window_1a6032c3ed54f27c89bb5c871ab695223b" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>splash</name></member>
      <member refid="class_k_win_1_1_window_1ab6e14702ae2257cc27f72a8ad1e6f881" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>stackingOrder</name></member>
      <member refid="class_k_win_1_1_window_1af53fc33cb2e1aa0dd500376191484d1b" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>stackingOrder</name></member>
      <member refid="class_k_win_1_1_window_1a0c8cc94fcc6cfdee73187c18b6208045" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>stackingOrderChanged</name></member>
      <member refid="class_k_win_1_1_window_1a8e53686fbdb1f4670854388a074a6119" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>startAutoRaise</name></member>
      <member refid="class_k_win_1_1_window_1a1bd3b04534d23abc203bc9ac28d5bdcf" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>startDecorationDoubleClickTimer</name></member>
      <member refid="class_k_win_1_1_window_1a30f65669aaec9f5dda9b01d987466f7b" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>startDelayedInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a4470354b4fa88d30ee3c7667d77c7b9c" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>startInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a365dbfdb8799e048a323b0782d8f0837" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>startOutput</name></member>
      <member refid="class_k_win_1_1_window_1ac7c35d8668fd5e4e11838ee581e41722" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>startShadeHoverTimer</name></member>
      <member refid="class_k_win_1_1_window_1a4805d5c28b9aac6559f3c0a06863bbf9" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>startShadeUnhoverTimer</name></member>
      <member refid="class_k_win_1_1_window_1af36f8d8979cc3ffb49d244fd04541f0f" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>stopDelayedInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1aba525ab96946e97c8a9508223b32aa7a" prot="public" virt="virtual"><scope>KWin::Window</scope><name>strutRect</name></member>
      <member refid="class_k_win_1_1_window_1a8e3324842c2afcc9f5bb836e63ecf839" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>strutRects</name></member>
      <member refid="class_k_win_1_1_window_1a708d561f000dfe2d058b6017db96a684" prot="public" virt="virtual"><scope>KWin::Window</scope><name>supportsWindowRules</name></member>
      <member refid="class_k_win_1_1_window_1a379c25dec85d7b0aee3b79676327b9b6" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>surface</name></member>
      <member refid="class_k_win_1_1_window_1a5ab5cf58669820a49608cb46f3ea3e5b" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>surfaceChanged</name></member>
      <member refid="class_k_win_1_1_window_1aa3e58eb3c6ecd544440b973f68921322" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>surfaceItem</name></member>
      <member refid="class_k_win_1_1_window_1a6e2457230d295588778fdda994896e29" prot="public" virt="pure-virtual"><scope>KWin::Window</scope><name>takeFocus</name></member>
      <member refid="class_k_win_1_1_window_1a81faef3b8b494d474c8acb202f9e8ddd" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>targetScale</name></member>
      <member refid="class_k_win_1_1_window_1ab43215452b63309c9442dafde7f3f2c3" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>targetScaleChanged</name></member>
      <member refid="class_k_win_1_1_window_1a69d854b1314004bad99f5e93c3ff7a1f" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>tile</name></member>
      <member refid="class_k_win_1_1_window_1a09799395c3f6800a6d39e39695fed8b2" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>tile</name></member>
      <member refid="class_k_win_1_1_window_1a69b6dd1515f1491903ce82938e7973e6" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>tileChanged</name></member>
      <member refid="class_k_win_1_1_window_1af44c993eea122ea90d4b1aa4cd8de38c" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>titlebarPosition</name></member>
      <member refid="class_k_win_1_1_window_1a69f30f2a3a35a61e4e690519ff58abf3" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>titlebarPositionUnderMouse</name></member>
      <member refid="class_k_win_1_1_window_1af6431be1b6486b44c17c218703fe5c28" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>titlebarThickness</name></member>
      <member refid="class_k_win_1_1_window_1a2728eed3519284ca4c11ceeb944033bf" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>toggleShade</name></member>
      <member refid="class_k_win_1_1_window_1a2d3df03917bf4e17bd6d0d51a33e4338" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>toolbar</name></member>
      <member refid="class_k_win_1_1_window_1a64ebcb72533d0d0d18cff279600b59f8" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>tooltip</name></member>
      <member refid="class_k_win_1_1_window_1a3d9ecdab0b00ae1a91a8adc152e51d14" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>transient</name></member>
      <member refid="class_k_win_1_1_window_1af3e806181c0aa22d655b2396d6e0e05e" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>transientChanged</name></member>
      <member refid="class_k_win_1_1_window_1a74ba8e8138736add81114a69c064170a" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>transientFor</name></member>
      <member refid="class_k_win_1_1_window_1a5cc3ca21e54ffca6d3749abf53b1f800" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>transientFor</name></member>
      <member refid="class_k_win_1_1_window_1a190d7fcd03d1b3c3b3133f9560acfa01" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>transientFor</name></member>
      <member refid="class_k_win_1_1_window_1aca310d8070ce3c28a5bac7694fb2cecb" prot="public" virt="virtual"><scope>KWin::Window</scope><name>transientPlacement</name></member>
      <member refid="class_k_win_1_1_window_1afb0480dda58c4c07e6bf7d2100b7b29e" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>transients</name></member>
      <member refid="class_k_win_1_1_window_1a2aa1fc2ef7187d8f8ed3f3bb60e1df9b" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>triggerDecorationRepaint</name></member>
      <member refid="class_k_win_1_1_window_1a212fbc7e400c510205ba9fd3611968d5" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>unref</name></member>
      <member refid="class_k_win_1_1_window_1a5298a339cf68f39640772342ab018e28" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>unrefOffscreenRendering</name></member>
      <member refid="class_k_win_1_1_window_1a706a06ca23af2665a7f386dc72a870e6" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>unresponsive</name></member>
      <member refid="class_k_win_1_1_window_1a06fa16385e03864699000a61f6a1933b" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>unresponsive</name></member>
      <member refid="class_k_win_1_1_window_1ad6fb29161438612c7904e7c1f1311e2f" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>unresponsiveChanged</name></member>
      <member refid="class_k_win_1_1_window_1ae587eea806a869c36dc2b8718e65dee6" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>unrestricted</name></member>
      <member refid="class_k_win_1_1_window_1a819092f9968d638a17b8e857e092d0f1" prot="public" virt="virtual"><scope>KWin::Window</scope><name>updateActivities</name></member>
      <member refid="class_k_win_1_1_window_1acbf43400025a9c526cf446f35e0ad6d8" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>updateApplicationMenuObjectPath</name></member>
      <member refid="class_k_win_1_1_window_1aa6855ec71b01961008ef688291652965" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>updateApplicationMenuServiceName</name></member>
      <member refid="class_k_win_1_1_window_1a0bccadf8a350482a2554b9c52a5bb9a0" prot="protected" virt="pure-virtual"><scope>KWin::Window</scope><name>updateCaption</name></member>
      <member refid="class_k_win_1_1_window_1ace7499c5c0613f2a0389de51ab135971" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>updateColorScheme</name></member>
      <member refid="class_k_win_1_1_window_1ac3324745eae4f1e36c81876c373ffe5e" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>updateCursor</name></member>
      <member refid="class_k_win_1_1_window_1ae574c58525b0a07014d9066093fe6105" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>updateDecorationInputShape</name></member>
      <member refid="class_k_win_1_1_window_1af21a731d416e0b1a9390d85e629b0c98" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>updateElectricGeometryRestore</name></member>
      <member refid="class_k_win_1_1_window_1aa144f13367344f7c18bb8cd178464763" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>updateInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a566fd5756c0cce34ab4f6ac8ba8dd96b" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>updateLayer</name></member>
      <member refid="class_k_win_1_1_window_1a5ba5344f9d163c3f951057ddd84f2111" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>updateNextTargetScale</name></member>
      <member refid="class_k_win_1_1_window_1ac1a0623d451064d4938fc3f4872a2a9d" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>updatePreferredBufferTransform</name></member>
      <member refid="class_k_win_1_1_window_1a8317614541483173a05da42f7d35d06b" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>updatePreferredColorDescription</name></member>
      <member refid="class_k_win_1_1_window_1a5d25daf1a543308b42b9c90d98d7f213" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>updateShadow</name></member>
      <member refid="class_k_win_1_1_window_1a6ee345225d453923e318c8344b86217f" prot="public" virt="virtual"><scope>KWin::Window</scope><name>updateWindowRules</name></member>
      <member refid="class_k_win_1_1_window_1a0078f08c782843fcb88397dff0ad6232" prot="public" virt="virtual"><scope>KWin::Window</scope><name>userCanSetNoBorder</name></member>
      <member refid="class_k_win_1_1_window_1a24616d29b6a97cb4b9146cd8dac3f5f8" prot="public" virt="virtual"><scope>KWin::Window</scope><name>userTime</name></member>
      <member refid="class_k_win_1_1_window_1a1af192c036d02e92a9884395b2a94f0e" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>utility</name></member>
      <member refid="class_k_win_1_1_window_1a0d654ed94cbf37efd319bc78522523da" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>virtualKeyboardGeometry</name></member>
      <member refid="class_k_win_1_1_window_1ab2223644425271a233b5deb303fb8e59" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>visibleGeometry</name></member>
      <member refid="class_k_win_1_1_window_1ad79ce26eab7a39f0c38b62cdf22f4698" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>visibleGeometryChanged</name></member>
      <member refid="class_k_win_1_1_window_1a477d5b4eb6907302d98c654bb940c9ae" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>wantsAdaptiveSync</name></member>
      <member refid="class_k_win_1_1_window_1a7a9c5f2a5a2a21002dfc4632c67280bf" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>wantsInput</name></member>
      <member refid="class_k_win_1_1_window_1aeb8663fe55e7f87c928c0d89f74a9f9f" prot="public" virt="pure-virtual"><scope>KWin::Window</scope><name>wantsInput</name></member>
      <member refid="class_k_win_1_1_window_1af71103e065455ef561cc28fdfb23062b" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>wantsShadowToBeRendered</name></member>
      <member refid="class_k_win_1_1_window_1ac69f930533a8e570ccc0e002dc077fcb" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>wantsTabFocus</name></member>
      <member refid="class_k_win_1_1_window_1a0f44df53bb213a357ea967843c94db67" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>wantsTearing</name></member>
      <member refid="class_k_win_1_1_window_1a2cd647ee6dfed59b1dc820162e4acd9f" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>width</name></member>
      <member refid="class_k_win_1_1_window_1a181ef9a610beb622b8b9c3d2f32be868" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>width</name></member>
      <member refid="class_k_win_1_1_window_1a1f57b5fc7e5ebf9060435cacce04349d" prot="protected" virt="non-virtual"><scope>KWin::Window</scope><name>Window</name></member>
      <member refid="class_k_win_1_1_window_1ada6d2b84af63fc37f49fd43da8d8592d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>windowClassChanged</name></member>
      <member refid="class_k_win_1_1_window_1a0094149b3a29d3b0240918e695fdb3fa" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>windowItem</name></member>
      <member refid="class_k_win_1_1_window_1a566b2f1b031cd7f536104017d3e157de" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>windowManagementInterface</name></member>
      <member refid="class_k_win_1_1_window_1af885f634335d8664537c240afe0fff3e" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>windowRole</name></member>
      <member refid="class_k_win_1_1_window_1a6fb0135b41d4cd0334e127adaa674a81" prot="public" virt="virtual"><scope>KWin::Window</scope><name>windowRole</name></member>
      <member refid="class_k_win_1_1_window_1a73961c045eb1609f01e611f928af0c4b" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>windowRoleChanged</name></member>
      <member refid="class_k_win_1_1_window_1a1f3c44eb1c5c7348d9bffd7f845108f2" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>windowType</name></member>
      <member refid="class_k_win_1_1_window_1aad3924cca3304323399da26ad99fa29c" prot="public" virt="pure-virtual"><scope>KWin::Window</scope><name>windowType</name></member>
      <member refid="class_k_win_1_1_window_1a65fa8eaf5936ace6355431d739438a3e" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>wmClientMachine</name></member>
      <member refid="class_k_win_1_1_window_1a8ca7699b2ae5cef0dcf3755f55f68fb7" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>x</name></member>
      <member refid="class_k_win_1_1_window_1a5cb43b5eeee4248ce9d046be48ae6ef0" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>x</name></member>
      <member refid="class_k_win_1_1_window_1a82df990348a6c4a0696ef5e1f8aea78d" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>y</name></member>
      <member refid="class_k_win_1_1_window_1ab8d602594babf2cfdd82463169fb8605" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>y</name></member>
      <member refid="class_k_win_1_1_window_1adb30fbdfb7094449cb1f97e177a22432" prot="public" virt="non-virtual"><scope>KWin::Window</scope><name>~Window</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
