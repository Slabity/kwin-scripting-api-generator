<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_animation_effect" kind="class" language="C++" prot="public">
    <compoundname>KWin::AnimationEffect</compoundname>
    <basecompoundref refid="class_k_win_1_1_cross_fade_effect" prot="public" virt="non-virtual">KWin::CrossFadeEffect</basecompoundref>
    <derivedcompoundref refid="class_k_win_1_1_highlight_window_effect" prot="public" virt="non-virtual">KWin::HighlightWindowEffect</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_scripted_effect" prot="public" virt="non-virtual">KWin::ScriptedEffect</derivedcompoundref>
    <includes refid="animationeffect_8h" local="no">animationeffect.h</includes>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_k_win_1_1_animation_effect_1ad40ec87323bcabe7a0f5fb868d477551" prot="public" static="no" strong="no">
        <type></type>
        <name>Anchor</name>
        <qualifiedname>KWin::AnimationEffect::Anchor</qualifiedname>
        <enumvalue id="class_k_win_1_1_animation_effect_1ad40ec87323bcabe7a0f5fb868d477551a160d2c804b35bace5baa66dfd2f66e23" prot="public">
          <name>Left</name>
          <initializer>= 1 &lt;&lt; 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1ad40ec87323bcabe7a0f5fb868d477551a85a17a1b2761f8cd209c95ea645531ff" prot="public">
          <name>Top</name>
          <initializer>= 1 &lt;&lt; 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1ad40ec87323bcabe7a0f5fb868d477551ade91b500003f9970d5625d0e0a300110" prot="public">
          <name>Right</name>
          <initializer>= 1 &lt;&lt; 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1ad40ec87323bcabe7a0f5fb868d477551a0385c23ab058cc7a415e2d5a8c8ea5fa" prot="public">
          <name>Bottom</name>
          <initializer>= 1 &lt;&lt; 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1ad40ec87323bcabe7a0f5fb868d477551a2a30ad52292faf409428986a70a77c10" prot="public">
          <name>Horizontal</name>
          <initializer>= Left | Right</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1ad40ec87323bcabe7a0f5fb868d477551ad2ca49df4be8d318e078cae5ac1667a7" prot="public">
          <name>Vertical</name>
          <initializer>= Top | Bottom</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1ad40ec87323bcabe7a0f5fb868d477551a40c97ee0d8009fe1a77065c0a2dc8d8c" prot="public">
          <name>Mouse</name>
          <initializer>= 1 &lt;&lt; 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="199" column="5" bodyfile="kwin/src/effect/animationeffect.h" bodystart="199" bodyend="205"/>
      </memberdef>
      <memberdef kind="enum" id="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895" prot="public" static="no" strong="no">
        <type></type>
        <name>Attribute</name>
        <qualifiedname>KWin::AnimationEffect::Attribute</qualifiedname>
        <enumvalue id="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895a5e6275946ca4fe24e84549732ddc09c3" prot="public">
          <name>Opacity</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895af0d8dd4766d864f885d223490fa3e843" prot="public">
          <name>Brightness</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895ad7b030ea591560d4e0aab15d47b7b2b4" prot="public">
          <name>Saturation</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895a2de3a5439db74acb3d48c5a053f62c7b" prot="public">
          <name>Scale</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895ac186a3c1bae928b38bea296d136a4bab" prot="public">
          <name>Rotation</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895afdce20e450a71474e85b2f75f80a3a21" prot="public">
          <name>Position</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895a157e84f15dee02e265344aa50d75ca69" prot="public">
          <name>Size</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895a812ea0c08ce09dd69f2ccaa0fad06482" prot="public">
          <name>Translation</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895a0a1dcf1161d0d63b9cceea51b771022c" prot="public">
          <name>Clip</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895a8b3561d41ad5a08eac2a33d499cead3f" prot="public">
          <name>Generic</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895abe18d52b08b44542c54a3dedd80446a6" prot="public">
          <name>CrossFadePrevious</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895a8c40fbbd0f3bde194ef05457bbea38e2" prot="public">
          <name>Shader</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Performs an animation with a provided shader. The float uniform <computeroutput>animationProgress</computeroutput> is set to the current progress of the animation. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895a079dabf6f4315fa57ead06c5115edccf" prot="public">
          <name>ShaderUniform</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Like Shader, but additionally allows to animate a float uniform passed to the shader. The uniform location must be provided as metadata. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895aba30e2f62820395107d4dab5e00652a3" prot="public">
          <name>NonFloatBase</name>
          <initializer>= Position</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="208" column="5" bodyfile="kwin/src/effect/animationeffect.h" bodystart="208" bodyend="231"/>
      </memberdef>
      <memberdef kind="enum" id="class_k_win_1_1_animation_effect_1a6a7b397dc18c582de01625168d197fc5" prot="public" static="no" strong="no">
        <type></type>
        <name>MetaType</name>
        <qualifiedname>KWin::AnimationEffect::MetaType</qualifiedname>
        <enumvalue id="class_k_win_1_1_animation_effect_1a6a7b397dc18c582de01625168d197fc5af8919e2a0aa0a154b5544d0b5fc51fcb" prot="public">
          <name>SourceAnchor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1a6a7b397dc18c582de01625168d197fc5a84d2cf15f3fc82689b425711128c5263" prot="public">
          <name>TargetAnchor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1a6a7b397dc18c582de01625168d197fc5a576bb734f707295c07d6838c89f58607" prot="public">
          <name>RelativeSourceX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1a6a7b397dc18c582de01625168d197fc5a525af2fcf0d6b53ee897c2dade0d5ecf" prot="public">
          <name>RelativeSourceY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1a6a7b397dc18c582de01625168d197fc5a295dca0b686357f91450db4afd2f01f2" prot="public">
          <name>RelativeTargetX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1a6a7b397dc18c582de01625168d197fc5a303e9d59502b2520b5813ee533f3f72d" prot="public">
          <name>RelativeTargetY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1a6a7b397dc18c582de01625168d197fc5a3049dbea054c421398df90b19831ef7a" prot="public">
          <name>Axis</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="234" column="5" bodyfile="kwin/src/effect/animationeffect.h" bodystart="234" bodyend="240"/>
      </memberdef>
      <memberdef kind="enum" id="class_k_win_1_1_animation_effect_1a010a03e246c674b58bedb4d006fa65fd" prot="public" static="no" strong="no">
        <type></type>
        <name>Direction</name>
        <qualifiedname>KWin::AnimationEffect::Direction</qualifiedname>
        <enumvalue id="class_k_win_1_1_animation_effect_1a010a03e246c674b58bedb4d006fa65fda32e5555d3f443490616f78a97a0060c7" prot="public">
          <name>Forward</name>
          <briefdescription>
<para>The animation goes from source to target. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1a010a03e246c674b58bedb4d006fa65fdae88b023c45e724de59e05127674e0c9e" prot="public">
          <name>Backward</name>
          <briefdescription>
<para>The animation goes from target to source. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enum type is used to specify the direction of the animation.</para>
<para><simplesect kind="since"><para>5.15 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="248" column="5" bodyfile="kwin/src/effect/animationeffect.h" bodystart="248" bodyend="251"/>
      </memberdef>
      <memberdef kind="enum" id="class_k_win_1_1_animation_effect_1a9c6611cc8312646efd31f3eb9c3f3f69" prot="public" static="no" strong="no">
        <type></type>
        <name>TerminationFlag</name>
        <qualifiedname>KWin::AnimationEffect::TerminationFlag</qualifiedname>
        <enumvalue id="class_k_win_1_1_animation_effect_1a9c6611cc8312646efd31f3eb9c3f3f69a758333147a53791faf87eba7021f9e4a" prot="public">
          <name>DontTerminate</name>
          <initializer>= 0x00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Don&apos;t terminate the animation when it reaches source or target position. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1a9c6611cc8312646efd31f3eb9c3f3f69a850e4ef8f8749b3f53489ef7ba80f8be" prot="public">
          <name>TerminateAtSource</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Terminate the animation when it reaches the source position. An animation can reach the source position if its direction was changed to go backward (from target to source). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_animation_effect_1a9c6611cc8312646efd31f3eb9c3f3f69ae718635f43fba009820bdc040def880b" prot="public">
          <name>TerminateAtTarget</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Terminate the animation when it reaches the target position. If this flag is not set, then the animation will be persistent. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enum type is used to specify when the animation should be terminated.</para>
<para><simplesect kind="since"><para>5.15 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="259" column="5" bodyfile="kwin/src/effect/animationeffect.h" bodystart="259" bodyend="275"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="class_k_win_1_1_animation_effect_1ab44f8ffcb1249d665c49771754366a51" prot="protected" static="no">
        <type>std::unordered_map&lt; <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *, std::pair&lt; std::vector&lt; <ref refid="class_k_win_1_1_ani_data" kindref="compound">AniData</ref> &gt;, QRect &gt; &gt;</type>
        <definition>typedef std::unordered_map&lt;EffectWindow *, std::pair&lt;std::vector&lt;AniData&gt;, QRect&gt; &gt; KWin::AnimationEffect::AniMap</definition>
        <argsstring></argsstring>
        <name>AniMap</name>
        <qualifiedname>KWin::AnimationEffect::AniMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="501" column="32" bodyfile="kwin/src/effect/animationeffect.h" bodystart="501" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_animation_effect_1a3f0a7d820e40c584b584667295eb6971" prot="private" static="yes" mutable="no">
        <type>QElapsedTimer</type>
        <definition>QElapsedTimer KWin::AnimationEffect::s_clock</definition>
        <argsstring></argsstring>
        <name>s_clock</name>
        <qualifiedname>KWin::AnimationEffect::s_clock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="524" column="26" bodyfile="kwin/src/effect/animationeffect.h" bodystart="524" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_animation_effect_1ae998ffbd9081dc6ddff2d091be29ad13" prot="private" static="no" mutable="no">
        <type>const std::unique_ptr&lt; <ref refid="class_k_win_1_1_animation_effect_private" kindref="compound">AnimationEffectPrivate</ref> &gt;</type>
        <definition>const std::unique_ptr&lt;AnimationEffectPrivate&gt; KWin::AnimationEffect::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <qualifiedname>KWin::AnimationEffect::d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="525" column="27" bodyfile="kwin/src/effect/animationeffect.h" bodystart="525" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_k_win_1_1_animation_effect_1ab981e2749f4bf81c8934ce37faeb4fb1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class AnimationEffectPrivate</definition>
        <argsstring></argsstring>
        <name>AnimationEffectPrivate</name>
        <qualifiedname>KWin::AnimationEffect::AnimationEffectPrivate</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_animation_effect_private" kindref="compound">AnimationEffectPrivate</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="526" column="18" bodyfile="kwin/src/effect/animationeffect.h" bodystart="526" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1abada8ad54366e90cc02a86c7006b5f82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::AnimationEffect::AnimationEffect</definition>
        <argsstring>()</argsstring>
        <name>AnimationEffect</name>
        <qualifiedname>KWin::AnimationEffect::AnimationEffect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs <ref refid="class_k_win_1_1_animation_effect" kindref="compound">AnimationEffect</ref>.</para>
<para>Whenever you intend to connect to the <ref refid="class_k_win_1_1_effects_handler_1a25652fb190ebfb2d9c95b67eb9a3291d" kindref="member">EffectsHandler::windowClosed()</ref> signal, do so when reimplementing the constructor. Do not add private slots named _windowClosed or _windowDeleted! The <ref refid="class_k_win_1_1_animation_effect" kindref="compound">AnimationEffect</ref> connects them right after the construction.</para>
<para>If you shadow the _windowDeleted slot (it doesn&apos;t matter that it&apos;s a private slot), this will lead to segfaults.</para>
<para>If you shadow _windowClosed or connect your slot to <ref refid="class_k_win_1_1_effects_handler_1a25652fb190ebfb2d9c95b67eb9a3291d" kindref="member">EffectsHandler::windowClosed()</ref> after _windowClosed was connected, animations for closing windows will fail. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="293" column="5" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="51" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1ad720a80777a9b23dd5020b57771febbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::AnimationEffect::~AnimationEffect</definition>
        <argsstring>() override</argsstring>
        <name>~AnimationEffect</name>
        <qualifiedname>KWin::AnimationEffect::~AnimationEffect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="294" column="5" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="63" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1aedee2e7f119b23b594b11389629cfd7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::AnimationEffect::isActive</definition>
        <argsstring>() const override</argsstring>
        <name>isActive</name>
        <qualifiedname>KWin::AnimationEffect::isActive</qualifiedname>
        <reimplements refid="group__kwineffects_1ga596b6c0ed146b97b293f5db5f27fc40f">isActive</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overwrite this method to indicate whether your effect will be doing something in the next frame to be rendered. If the method returns <computeroutput>false</computeroutput> the effect will be excluded from the chained methods in the next rendered frame.</para>
<para>This method is called always directly before the paint loop begins. So it is totally fine to e.g. react on a window event, issue a repaint to trigger an animation and change a flag to indicate that this method returns <computeroutput>true</computeroutput>.</para>
<para>As the method is called each frame, you should not perform complex calculations. Best use just a boolean flag.</para>
<para>The default implementation of this method returns <computeroutput>true</computeroutput>. <simplesect kind="since"><para>4.8 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="296" column="10" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1ad6d998c75de0348a1f99ed13cc0a4dba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QString</type>
        <definition>QString KWin::AnimationEffect::debug</definition>
        <argsstring>(const QString &amp;parameter) const override</argsstring>
        <name>debug</name>
        <qualifiedname>KWin::AnimationEffect::debug</qualifiedname>
        <reimplements refid="group__kwineffects_1ga0c159e00c3a51ca733bea49cf8d52691">debug</reimplements>
        <param>
          <type>const QString &amp;</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reimplement this method to provide online debugging. This could be as trivial as printing specific detail information about the effect state but could also be used to move the effect in and out of a special debug modes, clear bogus data, etc. Notice that the functions is const by intent! Whenever you alter the state of the object due to random user input, you should do so with greatest care, hence const_cast&lt;&gt; your object - signalling &quot;let me alone, i know what i&apos;m doing&quot; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameter</parametername>
</parameternamelist>
<parameterdescription>
<para>A freeform string user input for your effect to interpret. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>4.11 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="325" column="13" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="961" bodyend="980"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1a2f37667a2ccbd4e65c493d7633b029f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::AnimationEffect::prePaintWindow</definition>
        <argsstring>(EffectWindow *w, WindowPrePaintData &amp;data, std::chrono::milliseconds presentTime) override</argsstring>
        <name>prePaintWindow</name>
        <qualifiedname>KWin::AnimationEffect::prePaintWindow</qualifiedname>
        <reimplements refid="group__kwineffects_1ga2832c7831c0f49f9f5cf0267ffc53672">prePaintWindow</reimplements>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_window_pre_paint_data" kindref="compound">WindowPrePaintData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::chrono::milliseconds</type>
          <declname>presentTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called for every window before the actual paint pass In this method you can: <itemizedlist>
<listitem><para>enable or disable painting of the window (e.g. enable paiting of minimized window) </para>
</listitem>
<listitem><para>set window to be painted with translucency </para>
</listitem>
<listitem><para>set window to be transformed </para>
</listitem>
<listitem><para>request the window to be divided into multiple parts</para>
</listitem>
</itemizedlist>
In OpenGL based compositing, the frameworks ensures that the context is current when this method is invoked.</para>
<para><emphasis>presentTime</emphasis> specifies the expected monotonic time when the rendered frame will be displayed on the screen. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="326" column="10" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="465" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1a86754f3f8727ccb0a0b4f8416c78e235" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::AnimationEffect::paintWindow</definition>
        <argsstring>(const RenderTarget &amp;renderTarget, const RenderViewport &amp;viewport, EffectWindow *w, int mask, QRegion region, WindowPaintData &amp;data) override</argsstring>
        <name>paintWindow</name>
        <qualifiedname>KWin::AnimationEffect::paintWindow</qualifiedname>
        <reimplements refid="group__kwineffects_1ga0f0292db2bf016a0843ef7cc06219378">paintWindow</reimplements>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref> &amp;</type>
          <declname>renderTarget</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_viewport" kindref="compound">RenderViewport</ref> &amp;</type>
          <declname>viewport</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>QRegion</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_window_paint_data" kindref="compound">WindowPaintData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is the main method for painting windows. In this method you can: <itemizedlist>
<listitem><para>do various transformations </para>
</listitem>
<listitem><para>change opacity of the window </para>
</listitem>
<listitem><para>change brightness and/or saturation, if it&apos;s supported</para>
</listitem>
</itemizedlist>
In OpenGL based compositing, the frameworks ensures that the context is current when this method is invoked. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="327" column="10" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="501" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1a149ee7d8e665976d69fb6a3510daa9f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::AnimationEffect::postPaintScreen</definition>
        <argsstring>() override</argsstring>
        <name>postPaintScreen</name>
        <qualifiedname>KWin::AnimationEffect::postPaintScreen</qualifiedname>
        <reimplements refid="group__kwineffects_1ga10021cf9704c00d60beae284d53846e2">postPaintScreen</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called after all the painting has been finished. In this method you can: <itemizedlist>
<listitem><para>schedule next repaint in case of animations You shouldn&apos;t paint anything here.</para>
</listitem>
</itemizedlist>
In OpenGL based compositing, the frameworks ensures that the context is current when this method is invoked. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="328" column="10" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="630" bodyend="709"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1a779e526b9a16d40fbb640f53927d52fa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::AnimationEffect::metaData</definition>
        <argsstring>(MetaType type, uint meta)</argsstring>
        <name>metaData</name>
        <qualifiedname>KWin::AnimationEffect::metaData</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_animation_effect_1a6a7b397dc18c582de01625168d197fc5" kindref="member">MetaType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>meta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets stored metadata.</para>
<para>Metadata can be used to store some extra information, for example rotation axis, etc. The first 24 bits are reserved for the <ref refid="class_k_win_1_1_animation_effect" kindref="compound">AnimationEffect</ref> class, you can use the last 8 bits for custom hints. In case when you transform a Generic attribute, all 32 bits are yours and you can use them as you want and read them in your <ref refid="class_k_win_1_1_animation_effect_1a268fe59fcf9526311f6334882b0ec7a8" kindref="member">genericAnimation()</ref> implementation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the metadata. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Where the metadata is stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Stored metadata. </para>
</simplesect>
<simplesect kind="since"><para>4.8 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="312" column="16" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="729" bodyend="748"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1a32d06cdede96d4fcc724f73293b7560b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::AnimationEffect::setMetaData</definition>
        <argsstring>(MetaType type, uint value, uint &amp;meta)</argsstring>
        <name>setMetaData</name>
        <qualifiedname>KWin::AnimationEffect::setMetaData</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_animation_effect_1a6a7b397dc18c582de01625168d197fc5" kindref="member">MetaType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>value</declname>
        </param>
        <param>
          <type>uint &amp;</type>
          <declname>meta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets metadata.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the metadata. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Where the metadata will be stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>4.8 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="322" column="17" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="750" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1ac73b6519cc131623633292e7997841af" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>qreal</type>
        <definition>static qreal KWin::AnimationEffect::qecGaussian</definition>
        <argsstring>(qreal progress)</argsstring>
        <name>qecGaussian</name>
        <qualifiedname>KWin::AnimationEffect::qecGaussian</qualifiedname>
        <param>
          <type>qreal</type>
          <declname>progress</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gaussian (bumper) animation curve for QEasingCurve.</para>
<para><simplesect kind="since"><para>4.8 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="335" column="18" bodyfile="kwin/src/effect/animationeffect.h" bodystart="335" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1a734630d089906a4c694a426ec0aa35a9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>qint64</type>
        <definition>static qint64 KWin::AnimationEffect::clock</definition>
        <argsstring>()</argsstring>
        <name>clock</name>
        <qualifiedname>KWin::AnimationEffect::clock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>4.8 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="345" column="26" bodyfile="kwin/src/effect/animationeffect.h" bodystart="345" bodyend="348"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1aab7f535260df8f6bb226f1590373dc4b" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>quint64</type>
        <definition>quint64 KWin::AnimationEffect::animate</definition>
        <argsstring>(EffectWindow *w, Attribute a, uint meta, int ms, const FPx2 &amp;to, const QEasingCurve &amp;curve=QEasingCurve(), int delay=0, const FPx2 &amp;from=FPx2(), bool fullScreen=false, bool keepAlive=true, GLShader *shader=nullptr)</argsstring>
        <name>animate</name>
        <qualifiedname>KWin::AnimationEffect::animate</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895" kindref="member">Attribute</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>meta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const QEasingCurve &amp;</type>
          <declname>curve</declname>
          <defval>QEasingCurve()</defval>
        </param>
        <param>
          <type>int</type>
          <declname>delay</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
          <declname>from</declname>
          <defval><ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>fullScreen</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>keepAlive</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_g_l_shader" kindref="compound">GLShader</ref> *</type>
          <declname>shader</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Starts an animated transition of any supported attribute.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The animated window. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The animated attribute. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Basically a wildcard to carry various extra information, e.g. the anchor, relativity or rotation axis. You will probably use it when performing Generic animations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ms</parametername>
</parameternamelist>
<parameterdescription>
<para>How long the transition will last. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>The target value. <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> is an agnostic two component float type (like QPointF or QSizeF, but without requiring to be either and supporting an invalid state). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>curve</parametername>
</parameternamelist>
<parameterdescription>
<para>How the animation progresses, e.g. Linear progresses constantly while Exponential start slow and becomes very fast in the end. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>When the animation will start compared to &quot;now&quot; (the window will remain at the &quot;from&quot; position until then). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting value, the default is invalid, ie. the attribute for the window is not transformed in the beginning. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fullScreen</parametername>
</parameternamelist>
<parameterdescription>
<para>Sets this effect as the active full screen effect for the duration of the animation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keepAlive</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether closed windows should be kept alive during animation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shader</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional shader to use to render the window. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ID that you can use to cancel a running animation. </para>
</simplesect>
<simplesect kind="since"><para>4.8 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="376" column="13" bodyfile="kwin/src/effect/animationeffect.h" bodystart="376" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1a01c90afe88d6742968cdbe8ff911cdde" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>quint64</type>
        <definition>quint64 KWin::AnimationEffect::set</definition>
        <argsstring>(EffectWindow *w, Attribute a, uint meta, int ms, const FPx2 &amp;to, const QEasingCurve &amp;curve=QEasingCurve(), int delay=0, const FPx2 &amp;from=FPx2(), bool fullScreen=false, bool keepAlive=true, GLShader *shader=nullptr)</argsstring>
        <name>set</name>
        <qualifiedname>KWin::AnimationEffect::set</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895" kindref="member">Attribute</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>meta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const QEasingCurve &amp;</type>
          <declname>curve</declname>
          <defval>QEasingCurve()</defval>
        </param>
        <param>
          <type>int</type>
          <declname>delay</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> &amp;</type>
          <declname>from</declname>
          <defval><ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>fullScreen</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>keepAlive</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_g_l_shader" kindref="compound">GLShader</ref> *</type>
          <declname>shader</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Starts a persistent animated transition of any supported attribute.</para>
<para>This method is equal to <ref refid="class_k_win_1_1_animation_effect_1aab7f535260df8f6bb226f1590373dc4b" kindref="member">animate()</ref> with one important difference: the target value for the attribute is kept until you call <ref refid="class_k_win_1_1_animation_effect_1a5b6efa75d24259e7f4891a5aafab1dd8" kindref="member">cancel()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The animated window. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The animated attribute. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Basically a wildcard to carry various extra information, e.g. the anchor, relativity or rotation axis. You will probably use it when performing Generic animations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ms</parametername>
</parameternamelist>
<parameterdescription>
<para>How long the transition will last. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>The target value. <ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> is an agnostic two component float type (like QPointF or QSizeF, but without requiring to be either and supporting an invalid state). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>curve</parametername>
</parameternamelist>
<parameterdescription>
<para>How the animation progresses, e.g. Linear progresses constantly while Exponential start slow and becomes very fast in the end. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>When the animation will start compared to &quot;now&quot; (the window will remain at the &quot;from&quot; position until then). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting value, the default is invalid, ie. the attribute for the window is not transformed in the beginning. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fullScreen</parametername>
</parameternamelist>
<parameterdescription>
<para>Sets this effect as the active full screen effect for the duration of the animation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keepAlive</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether closed windows should be kept alive during animation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shader</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional shader to use to render the window. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ID that you need to use to cancel this manipulation. </para>
</simplesect>
<simplesect kind="since"><para>4.11 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="409" column="13" bodyfile="kwin/src/effect/animationeffect.h" bodystart="409" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1a3ae98ef446f259a978740c9448a45fb8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::AnimationEffect::retarget</definition>
        <argsstring>(quint64 animationId, FPx2 newTarget, int newRemainingTime=-1)</argsstring>
        <name>retarget</name>
        <qualifiedname>KWin::AnimationEffect::retarget</qualifiedname>
        <param>
          <type>quint64</type>
          <declname>animationId</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref></type>
          <declname>newTarget</declname>
        </param>
        <param>
          <type>int</type>
          <declname>newRemainingTime</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Changes the target (but not type or curve) of a running animation.</para>
<para>Please use <ref refid="class_k_win_1_1_animation_effect_1a5b6efa75d24259e7f4891a5aafab1dd8" kindref="member">cancel()</ref> to cancel an animation rather than altering it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>animationId</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the animation to be retargetted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newTarget</parametername>
</parameternamelist>
<parameterdescription>
<para>The new target. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newRemainingTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The new duration of the transition. By default (-1), the remaining time remains unchanged. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the animation was retargetted successfully, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
<simplesect kind="note"><para>You can NOT retarget an animation that just has just ended! </para>
</simplesect>
<simplesect kind="since"><para>5.6 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="427" column="10" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="290" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1a7978b20304d9c0f2bdadeb56d562bf5b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::AnimationEffect::freezeInTime</definition>
        <argsstring>(quint64 animationId, qint64 frozenTime)</argsstring>
        <name>freezeInTime</name>
        <qualifiedname>KWin::AnimationEffect::freezeInTime</qualifiedname>
        <param>
          <type>quint64</type>
          <declname>animationId</declname>
        </param>
        <param>
          <type>qint64</type>
          <declname>frozenTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="429" column="10" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="318" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1a0579e12a0e28fa34a47afa27cd9ddb39" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::AnimationEffect::redirect</definition>
        <argsstring>(quint64 animationId, Direction direction, TerminationFlags terminationFlags=TerminateAtSource)</argsstring>
        <name>redirect</name>
        <qualifiedname>KWin::AnimationEffect::redirect</qualifiedname>
        <param>
          <type>quint64</type>
          <declname>animationId</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_animation_effect_1a010a03e246c674b58bedb4d006fa65fd" kindref="member">Direction</ref></type>
          <declname>direction</declname>
        </param>
        <param>
          <type>TerminationFlags</type>
          <declname>terminationFlags</declname>
          <defval><ref refid="class_k_win_1_1_animation_effect_1a9c6611cc8312646efd31f3eb9c3f3f69a850e4ef8f8749b3f53489ef7ba80f8be" kindref="member">TerminateAtSource</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Changes the direction of the animation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>animationId</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the animation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>The new direction of the animation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>terminationFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the animation should be terminated when it reaches the source position after its direction was changed to go backward. Currently, <ref refid="class_k_win_1_1_animation_effect_1a9c6611cc8312646efd31f3eb9c3f3f69ae718635f43fba009820bdc040def880b" kindref="member">TerminationFlag::TerminateAtTarget</ref> has no effect. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the direction of the animation was changed successfully, otherwise <computeroutput>false</computeroutput>. </para>
</simplesect>
<simplesect kind="since"><para>5.15 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="443" column="10" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="339" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1a253236a80cad9bc4fd92d5c80325ae03" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::AnimationEffect::complete</definition>
        <argsstring>(quint64 animationId)</argsstring>
        <name>complete</name>
        <qualifiedname>KWin::AnimationEffect::complete</qualifiedname>
        <param>
          <type>quint64</type>
          <declname>animationId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fast-forwards the animation to the target position.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>animationId</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the animation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the animation was fast-forwarded successfully, otherwise <computeroutput>false</computeroutput>. </para>
</simplesect>
<simplesect kind="since"><para>5.15 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="455" column="10" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="365" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1a2621b78354e661cc248b395aa6a870fa" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::AnimationEffect::animationEnded</definition>
        <argsstring>(EffectWindow *w, Attribute a, uint meta)</argsstring>
        <name>animationEnded</name>
        <qualifiedname>KWin::AnimationEffect::animationEnded</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_scripted_effect_1a3435a535510becd1357ab6d45b055791">animationEnded</reimplementedby>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895" kindref="member">Attribute</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>meta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called whenever an animation ends.</para>
<para>You can reimplement this method to keep a constant transformation for the window (i.e. keep it at some opacity or position) or to start another animation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The animated window. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The animated attribute. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Originally supplied metadata to <ref refid="class_k_win_1_1_animation_effect_1aab7f535260df8f6bb226f1590373dc4b" kindref="member">animate()</ref> or <ref refid="class_k_win_1_1_animation_effect_1a01c90afe88d6742968cdbe8ff911cdde" kindref="member">set()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>4.8 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="468" column="18" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="414" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1a5b6efa75d24259e7f4891a5aafab1dd8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::AnimationEffect::cancel</definition>
        <argsstring>(quint64 animationId)</argsstring>
        <name>cancel</name>
        <qualifiedname>KWin::AnimationEffect::cancel</qualifiedname>
        <param>
          <type>quint64</type>
          <declname>animationId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cancels a running animation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>animationId</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the animation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the animation was found (and canceled), <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
<simplesect kind="note"><para>There is NO animated reset of the original value. You&apos;ll have to provide that with a second animation. </para>
</simplesect>
<simplesect kind="note"><para>This will eventually release a Deleted window as well. </para>
</simplesect>
<simplesect kind="note"><para>If you intend to run another animation on the (Deleted) window, you have to do that before cancelling the old animation (to keep the window around). </para>
</simplesect>
<simplesect kind="since"><para>4.11 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="482" column="10" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="384" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1a268fe59fcf9526311f6334882b0ec7a8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::AnimationEffect::genericAnimation</definition>
        <argsstring>(EffectWindow *w, WindowPaintData &amp;data, float progress, uint meta)</argsstring>
        <name>genericAnimation</name>
        <qualifiedname>KWin::AnimationEffect::genericAnimation</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_window_paint_data" kindref="compound">WindowPaintData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>float</type>
          <declname>progress</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>meta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called whenever animation that transforms Generic attribute needs to be painted.</para>
<para>You should reimplement this method if you transform Generic attribute. <computeroutput>meta</computeroutput> can be used to support more than one additional animations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The animated window. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The paint data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>progress</parametername>
</parameternamelist>
<parameterdescription>
<para>Current progress value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>The metadata. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>4.8 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="496" column="18" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="418" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1a2348a8c91ecd82ad000cc3ed58988d10" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_k_win_1_1_animation_effect_1ab44f8ffcb1249d665c49771754366a51" kindref="member">AniMap</ref> &amp;</type>
        <definition>const AnimationEffect::AniMap &amp; KWin::AnimationEffect::state</definition>
        <argsstring>() const</argsstring>
        <name>state</name>
        <qualifiedname>KWin::AnimationEffect::state</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="506" column="18" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="982" bodyend="985"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1a283e3784a15d31c87a4a8a25fcf80c52" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>quint64</type>
        <definition>quint64 KWin::AnimationEffect::p_animate</definition>
        <argsstring>(EffectWindow *w, Attribute a, uint meta, int ms, FPx2 to, const QEasingCurve &amp;curve, int delay, FPx2 from, bool keepAtTarget, bool fullScreenEffect, bool keepAlive, GLShader *shader)</argsstring>
        <name>p_animate</name>
        <qualifiedname>KWin::AnimationEffect::p_animate</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895" kindref="member">Attribute</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>meta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ms</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref></type>
          <declname>to</declname>
        </param>
        <param>
          <type>const QEasingCurve &amp;</type>
          <declname>curve</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delay</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref></type>
          <declname>from</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepAtTarget</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fullScreenEffect</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepAlive</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_g_l_shader" kindref="compound">GLShader</ref> *</type>
          <declname>shader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="509" column="13" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="214" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1a9786f601c4a599388c5e101d8a64ff71" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRect</type>
        <definition>QRect KWin::AnimationEffect::clipRect</definition>
        <argsstring>(const QRect &amp;windowRect, const AniData &amp;) const</argsstring>
        <name>clipRect</name>
        <qualifiedname>KWin::AnimationEffect::clipRect</qualifiedname>
        <param>
          <type>const QRect &amp;</type>
          <declname>windowRect</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_ani_data" kindref="compound">AniData</ref> &amp;</type>
          <defname>anim</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="510" column="11" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="444" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1af3dbc818e35f40c7b6d38337945118e9" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float KWin::AnimationEffect::interpolated</definition>
        <argsstring>(const AniData &amp;, int i=0) const</argsstring>
        <name>interpolated</name>
        <qualifiedname>KWin::AnimationEffect::interpolated</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_ani_data" kindref="compound">AniData</ref> &amp;</type>
          <defname>a</defname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="511" column="11" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="711" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1a227cf7eea059477bdbaccd268e2cb3f3" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float KWin::AnimationEffect::progress</definition>
        <argsstring>(const AniData &amp;) const</argsstring>
        <name>progress</name>
        <qualifiedname>KWin::AnimationEffect::progress</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_ani_data" kindref="compound">AniData</ref> &amp;</type>
          <defname>a</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="512" column="11" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="716" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1a8b6df1d41646e8db1324784149ff680c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::AnimationEffect::updateLayerRepaints</definition>
        <argsstring>()</argsstring>
        <name>updateLayerRepaints</name>
        <qualifiedname>KWin::AnimationEffect::updateLayerRepaints</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="513" column="10" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="815" bodyend="927"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_animation_effect_1adfe89d8b8514d534e56730337b4524e8" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::AnimationEffect::validate</definition>
        <argsstring>(Attribute a, uint &amp;meta, FPx2 *from, FPx2 *to, const EffectWindow *w) const</argsstring>
        <name>validate</name>
        <qualifiedname>KWin::AnimationEffect::validate</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895" kindref="member">Attribute</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint &amp;</type>
          <declname>meta</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> *</type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_f_px2" kindref="compound">FPx2</ref> *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="514" column="10" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="93" bodyend="212"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-slot">
      <memberdef kind="slot" id="class_k_win_1_1_animation_effect_1a4abe282b2045af90fcf3e63a57316483" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::AnimationEffect::init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <qualifiedname>KWin::AnimationEffect::init</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="517" column="10" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="71" bodyend="83"/>
      </memberdef>
      <memberdef kind="slot" id="class_k_win_1_1_animation_effect_1a8e41a8e5340cbdd95b83893775edef4f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::AnimationEffect::triggerRepaint</definition>
        <argsstring>()</argsstring>
        <name>triggerRepaint</name>
        <qualifiedname>KWin::AnimationEffect::triggerRepaint</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="518" column="10" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="782" bodyend="795"/>
      </memberdef>
      <memberdef kind="slot" id="class_k_win_1_1_animation_effect_1ac28611e2d6621a32c356dd8ebec7f163" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::AnimationEffect::_windowClosed</definition>
        <argsstring>(KWin::EffectWindow *w)</argsstring>
        <name>_windowClosed</name>
        <qualifiedname>KWin::AnimationEffect::_windowClosed</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="519" column="10" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="942" bodyend="954"/>
      </memberdef>
      <memberdef kind="slot" id="class_k_win_1_1_animation_effect_1afb6cf0b537bf678c342497697906c2c3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::AnimationEffect::_windowDeleted</definition>
        <argsstring>(KWin::EffectWindow *w)</argsstring>
        <name>_windowDeleted</name>
        <qualifiedname>KWin::AnimationEffect::_windowDeleted</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="520" column="10" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="956" bodyend="959"/>
      </memberdef>
      <memberdef kind="slot" id="class_k_win_1_1_animation_effect_1ab929b90e496a5dd644398e87ef3f1dd8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::AnimationEffect::_windowExpandedGeometryChanged</definition>
        <argsstring>(KWin::EffectWindow *w)</argsstring>
        <name>_windowExpandedGeometryChanged</name>
        <qualifiedname>KWin::AnimationEffect::_windowExpandedGeometryChanged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/animationeffect.h" line="521" column="10" bodyfile="kwin/src/effect/animationeffect.cpp" bodystart="929" bodyend="940"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Base class for animation effects.</para>
<para><ref refid="class_k_win_1_1_animation_effect" kindref="compound">AnimationEffect</ref> serves as a base class for animation effects. It makes easier implementing animated transitions, without having to worry about low-level specific stuff, e.g. referencing and unreferencing deleted windows, scheduling repaints for the next frame, etc.</para>
<para>Each animation animates one specific attribute, e.g. size, position, scale, etc. You can provide your own implementation of the Generic attribute if none of the standard attributes(e.g. size, position, etc) satisfy your requirements.</para>
<para><simplesect kind="since"><para>4.8 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>KWin::AnimationEffect</label>
        <link refid="class_k_win_1_1_animation_effect"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>KWin::CrossFadeEffect</label>
        <link refid="class_k_win_1_1_cross_fade_effect"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>KWin::Effect</label>
        <link refid="class_k_win_1_1_effect"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>KWin::HighlightWindowEffect</label>
        <link refid="class_k_win_1_1_highlight_window_effect"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>KWin::ScriptedEffect</label>
        <link refid="class_k_win_1_1_scripted_effect"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>KWin::AnimationEffect</label>
        <link refid="class_k_win_1_1_animation_effect"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>KWin::CrossFadeEffect</label>
        <link refid="class_k_win_1_1_cross_fade_effect"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>KWin::Effect</label>
        <link refid="class_k_win_1_1_effect"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/effect/animationeffect.h" line="194" column="1" bodyfile="kwin/src/effect/animationeffect.h" bodystart="195" bodyend="527"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_animation_effect_1ac28611e2d6621a32c356dd8ebec7f163" prot="private" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>_windowClosed</name></member>
      <member refid="class_k_win_1_1_animation_effect_1afb6cf0b537bf678c342497697906c2c3" prot="private" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>_windowDeleted</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ab929b90e496a5dd644398e87ef3f1dd8" prot="private" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>_windowExpandedGeometryChanged</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ad40ec87323bcabe7a0f5fb868d477551" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Anchor</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ab44f8ffcb1249d665c49771754366a51" prot="protected" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>AniMap</name></member>
      <member refid="class_k_win_1_1_animation_effect_1aab7f535260df8f6bb226f1590373dc4b" prot="protected" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>animate</name></member>
      <member refid="class_k_win_1_1_animation_effect_1abada8ad54366e90cc02a86c7006b5f82" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>AnimationEffect</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ab981e2749f4bf81c8934ce37faeb4fb1" prot="private" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>AnimationEffectPrivate</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a2621b78354e661cc248b395aa6a870fa" prot="protected" virt="virtual"><scope>KWin::AnimationEffect</scope><name>animationEnded</name></member>
      <member refid="group__kwineffects_1gab9bcf52072fe74567496b0a894d1d873" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>animationTime</name></member>
      <member refid="group__kwineffects_1ga3a167fe6d9c46376ed46db13caf2d135" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>animationTime</name></member>
      <member refid="group__kwineffects_1ga0ba05f1463195d0f92ea1dd3396a5d16" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>animationTime</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Attribute</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a6a7b397dc18c582de01625168d197fc5a3049dbea054c421398df90b19831ef7a" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Axis</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a010a03e246c674b58bedb4d006fa65fdae88b023c45e724de59e05127674e0c9e" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Backward</name></member>
      <member refid="class_k_win_1_1_cross_fade_effect_1a07422c4fb7d5c983a07ffffc677c5ec2" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>blocksDirectScanout</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aea67d120ab5ce1dc424476e63c132af6c1" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Blur</name></member>
      <member refid="group__kwineffects_1gab8a94f591b743b59b7285911e641e7d5" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>borderActivated</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ad40ec87323bcabe7a0f5fb868d477551a0385c23ab058cc7a415e2d5a8c8ea5fa" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Bottom</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895af0d8dd4766d864f885d223490fa3e843" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Brightness</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a5b6efa75d24259e7f4891a5aafab1dd8" prot="protected" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>cancel</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895a0a1dcf1161d0d63b9cceea51b771022c" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Clip</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a9786f601c4a599388c5e101d8a64ff71" prot="private" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>clipRect</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a734630d089906a4c694a426ec0aa35a9" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>clock</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a253236a80cad9bc4fd92d5c80325ae03" prot="protected" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>complete</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aead805f717a48c23959a1e9ecd7722d15d" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Contrast</name></member>
      <member refid="class_k_win_1_1_cross_fade_effect_1ae701f741988327905e85e0cd0312de8d" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>CrossFadeEffect</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895abe18d52b08b44542c54a3dedd80446a6" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>CrossFadePrevious</name></member>
      <member refid="group__kwineffects_1ga4da344d8b8f2cb9eecd6e64a9b758740" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>cursorPos</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ae998ffbd9081dc6ddff2d091be29ad13" prot="private" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>d</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ad6d998c75de0348a1f99ed13cc0a4dba" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>debug</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a010a03e246c674b58bedb4d006fa65fd" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Direction</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a9c6611cc8312646efd31f3eb9c3f3f69a758333147a53791faf87eba7021f9e4a" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>DontTerminate</name></member>
      <member refid="class_k_win_1_1_cross_fade_effect_1af425332f0e69817a60019b5a64a18746" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>drawWindow</name></member>
      <member refid="group__kwineffects_1ga7bd8262f4cb2c5c3090c748eb388ad7e" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Effect</name></member>
      <member refid="group__kwineffects_1ga6337b2a9b5aadfbb6b696119144b56ae" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Feature</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a010a03e246c674b58bedb4d006fa65fda32e5555d3f443490616f78a97a0060c7" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Forward</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a7978b20304d9c0f2bdadeb56d562bf5b" prot="protected" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>freezeInTime</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895a8b3561d41ad5a08eac2a33d499cead3f" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Generic</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a268fe59fcf9526311f6334882b0ec7a8" prot="protected" virt="virtual"><scope>KWin::AnimationEffect</scope><name>genericAnimation</name></member>
      <member refid="group__kwineffects_1gab5e0581ae4b2dffe8014ff5cf6c21158" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>grabbedKeyboardEvent</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aeaecbb77ad241419970ece3d45296c4838" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>HighlightWindows</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ad40ec87323bcabe7a0f5fb868d477551a2a30ad52292faf409428986a70a77c10" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Horizontal</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a4abe282b2045af90fcf3e63a57316483" prot="private" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>init</name></member>
      <member refid="group__kwineffects_1ga7b0ecb57667179e95c188f0ee7416d00" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>interpolate</name></member>
      <member refid="class_k_win_1_1_animation_effect_1af3dbc818e35f40c7b6d38337945118e9" prot="private" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>interpolated</name></member>
      <member refid="class_k_win_1_1_animation_effect_1aedee2e7f119b23b594b11389629cfd7f" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>isActive</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ad40ec87323bcabe7a0f5fb868d477551a160d2c804b35bace5baa66dfd2f66e23" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Left</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a779e526b9a16d40fbb640f53927d52fa" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>metaData</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a6a7b397dc18c582de01625168d197fc5" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>MetaType</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ad40ec87323bcabe7a0f5fb868d477551a40c97ee0d8009fe1a77065c0a2dc8d8c" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Mouse</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895aba30e2f62820395107d4dab5e00652a3" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>NonFloatBase</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aea170229312ed2ec0e446ee89ba7f6b6ca" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Nothing</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895a5e6275946ca4fe24e84549732ddc09c3" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Opacity</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a283e3784a15d31c87a4a8a25fcf80c52" prot="private" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>p_animate</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378dab0de2932c45bde6df3de10d00dbd6fcd" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>PAINT_SCREEN_BACKGROUND_FIRST</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378da43acbfc913cae9eb3c363aeb0524f18f" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>PAINT_SCREEN_REGION</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378da3e731594d83c3e92742bff7c420fb7f8" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>PAINT_SCREEN_TRANSFORMED</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378da124dd798e5f793087e81da77e11a9b1e" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>PAINT_SCREEN_WITH_TRANSFORMED_WINDOWS</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378dac606d3dcf2dd150234f71c4c39083c7d" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>PAINT_WINDOW_OPAQUE</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378da684bb6c6c278b900b6d0c889e79233b8" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>PAINT_WINDOW_TRANSFORMED</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378dac7237bf4bb4d6ea6d6fb1215db19b45e" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>PAINT_WINDOW_TRANSLUCENT</name></member>
      <member refid="group__kwineffects_1ga44ee94161446ce6fb2502376af6515a8" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>paintScreen</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a86754f3f8727ccb0a0b4f8416c78e235" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>paintWindow</name></member>
      <member refid="group__kwineffects_1ga5fb1bc87ff54dcc2cfe87b070816ab00" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>perform</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895afdce20e450a71474e85b2f75f80a3a21" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Position</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a149ee7d8e665976d69fb6a3510daa9f6" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>postPaintScreen</name></member>
      <member refid="group__kwineffects_1ga9b7cf82c6f74331cffabb06c63ef914c" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>postPaintWindow</name></member>
      <member refid="group__kwineffects_1ga2edc1b757e36bb6bcbbacde454dfc05c" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>prePaintScreen</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a2f37667a2ccbd4e65c493d7633b029f3" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>prePaintWindow</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a227cf7eea059477bdbaccd268e2cb3f3" prot="private" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>progress</name></member>
      <member refid="group__kwineffects_1ga30fc2cbbdd90f95568a9e350f34bf2b7" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>provides</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ac73b6519cc131623633292e7997841af" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>qecGaussian</name></member>
      <member refid="group__kwineffects_1ga737c6d80eb8f8b24fdc6398209c38e3d" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>reconfigure</name></member>
      <member refid="group__kwineffects_1gga4aebd7d0f695e37678debaa118fa92dca19d3e23e53788c8d9cc9c18fbf75fc7d" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>ReconfigureAll</name></member>
      <member refid="group__kwineffects_1ga4aebd7d0f695e37678debaa118fa92dc" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>ReconfigureFlag</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a0579e12a0e28fa34a47afa27cd9ddb39" prot="protected" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>redirect</name></member>
      <member refid="class_k_win_1_1_cross_fade_effect_1a9b11480b3e53305cb64217ce477555d3" prot="public" virt="non-virtual" ambiguityscope="KWin::CrossFadeEffect::"><scope>KWin::AnimationEffect</scope><name>redirect</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a6a7b397dc18c582de01625168d197fc5a576bb734f707295c07d6838c89f58607" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>RelativeSourceX</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a6a7b397dc18c582de01625168d197fc5a525af2fcf0d6b53ee897c2dade0d5ecf" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>RelativeSourceY</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a6a7b397dc18c582de01625168d197fc5a295dca0b686357f91450db4afd2f01f2" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>RelativeTargetX</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a6a7b397dc18c582de01625168d197fc5a303e9d59502b2520b5813ee533f3f72d" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>RelativeTargetY</name></member>
      <member refid="group__kwineffects_1ga120531588e58691a5a18028158d2947a" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>requestedEffectChainPosition</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a3ae98ef446f259a978740c9448a45fb8" prot="protected" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>retarget</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ad40ec87323bcabe7a0f5fb868d477551ade91b500003f9970d5625d0e0a300110" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Right</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895ac186a3c1bae928b38bea296d136a4bab" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Rotation</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a3f0a7d820e40c584b584667295eb6971" prot="private" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>s_clock</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895ad7b030ea591560d4e0aab15d47b7b2b4" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Saturation</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895a2de3a5439db74acb3d48c5a053f62c7b" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Scale</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aea592ea0de7a4d658a1ef9bbb48b18e15a" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>ScreenInversion</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a01c90afe88d6742968cdbe8ff911cdde" prot="protected" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>set</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a32d06cdede96d4fcc724f73293b7560b" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>setMetaData</name></member>
      <member refid="group__kwineffects_1ga1efc42cd9be15e8200c6e55f6bf47cb8" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>setPositionTransformations</name></member>
      <member refid="class_k_win_1_1_cross_fade_effect_1a76f2c8834b93c008b25aca2040473fb4" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>setShader</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895a8c40fbbd0f3bde194ef05457bbea38e2" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Shader</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895a079dabf6f4315fa57ead06c5115edccf" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>ShaderUniform</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895a157e84f15dee02e265344aa50d75ca69" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Size</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a6a7b397dc18c582de01625168d197fc5af8919e2a0aa0a154b5544d0b5fc51fcb" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>SourceAnchor</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a2348a8c91ecd82ad000cc3ed58988d10" prot="protected" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>state</name></member>
      <member refid="class_k_win_1_1_cross_fade_effect_1a0b3d634f2f8ee8edd9c316ac062c2477" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>supported</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aea19036d413806c53978a3234e7eb197c4" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>SystemBell</name></member>
      <member refid="group__kwineffects_1ga2d22a8f0b8a4d81615dff67dc1ef970f" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>tabletPadButtonEvent</name></member>
      <member refid="group__kwineffects_1gaa084e5a45597f5775213715eb5506f63" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>tabletPadRingEvent</name></member>
      <member refid="group__kwineffects_1ga4998fb0983bd97163935cad2c4dedd76" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>tabletPadStripEvent</name></member>
      <member refid="group__kwineffects_1ga1d4ae01f5935ea887a12018d59191cbf" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>tabletToolAxis</name></member>
      <member refid="group__kwineffects_1ga7a984d7d83dfa97962b8404301c6aba9" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>tabletToolButtonEvent</name></member>
      <member refid="group__kwineffects_1ga4ed77506be381680bf664dbc8c20e036" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>tabletToolProximity</name></member>
      <member refid="group__kwineffects_1gaf16e9ca42cceb738fb859d1a1a462548" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>tabletToolTip</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a6a7b397dc18c582de01625168d197fc5a84d2cf15f3fc82689b425711128c5263" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>TargetAnchor</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a9c6611cc8312646efd31f3eb9c3f3f69a850e4ef8f8749b3f53489ef7ba80f8be" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>TerminateAtSource</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a9c6611cc8312646efd31f3eb9c3f3f69ae718635f43fba009820bdc040def880b" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>TerminateAtTarget</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a9c6611cc8312646efd31f3eb9c3f3f69" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>TerminationFlag</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ad40ec87323bcabe7a0f5fb868d477551a85a17a1b2761f8cd209c95ea645531ff" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Top</name></member>
      <member refid="group__kwineffects_1gaa31554949bc00085e6380b50be16138e" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>touchCancel</name></member>
      <member refid="group__kwineffects_1ga315fd305e7570f41e7bce7db6812381f" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>touchDown</name></member>
      <member refid="group__kwineffects_1ga54d00a9e05b5d4597db40c2f5b1d36de" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>touchMotion</name></member>
      <member refid="group__kwineffects_1gaf3871967d6199eb7c87621bc75b925bb" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>touchUp</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ae82fac34cfd92461ef431fa8fa651895a812ea0c08ce09dd69f2ccaa0fad06482" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Translation</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a8e41a8e5340cbdd95b83893775edef4f" prot="private" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>triggerRepaint</name></member>
      <member refid="class_k_win_1_1_cross_fade_effect_1a54887120fb87e713e90c0f3e6fe1ed02" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>unredirect</name></member>
      <member refid="class_k_win_1_1_animation_effect_1a8b6df1d41646e8db1324784149ff680c" prot="private" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>updateLayerRepaints</name></member>
      <member refid="class_k_win_1_1_animation_effect_1adfe89d8b8514d534e56730337b4524e8" prot="private" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>validate</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ad40ec87323bcabe7a0f5fb868d477551ad2ca49df4be8d318e078cae5ac1667a7" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>Vertical</name></member>
      <member refid="group__kwineffects_1ga7b142933c38cb9b4a433b768b266e7cb" prot="public" virt="virtual"><scope>KWin::AnimationEffect</scope><name>windowInputMouseEvent</name></member>
      <member refid="class_k_win_1_1_animation_effect_1ad720a80777a9b23dd5020b57771febbb" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>~AnimationEffect</name></member>
      <member refid="class_k_win_1_1_cross_fade_effect_1a5c1a9467b3f91d67b6485e4fd859f7eb" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>~CrossFadeEffect</name></member>
      <member refid="group__kwineffects_1ga50174eb0169aebceb78ebd5aff71c481" prot="public" virt="non-virtual"><scope>KWin::AnimationEffect</scope><name>~Effect</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
