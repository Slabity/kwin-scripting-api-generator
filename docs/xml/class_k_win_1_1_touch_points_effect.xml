<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_touch_points_effect" kind="class" language="C++" prot="public">
    <compoundname>KWin::TouchPointsEffect</compoundname>
    <basecompoundref refid="class_k_win_1_1_effect" prot="public" virt="non-virtual">KWin::Effect</basecompoundref>
    <includes refid="touchpoints_8h" local="no">touchpoints.h</includes>
    <innerclass refid="struct_k_win_1_1_touch_points_effect_1_1_touch_point" prot="private">KWin::TouchPointsEffect::TouchPoint</innerclass>
    <sectiondef kind="property">
      <memberdef kind="property" id="class_k_win_1_1_touch_points_effect_1afe93b24d906b26f14537b98151cf91ad" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>qreal</type>
        <definition>qreal KWin::TouchPointsEffect::lineWidth</definition>
        <argsstring></argsstring>
        <name>lineWidth</name>
        <qualifiedname>KWin::TouchPointsEffect::lineWidth</qualifiedname>
        <read>lineWidth</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="22" column="5" bodyfile="kwin/src/plugins/touchpoints/touchpoints.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_touch_points_effect_1aa1758b7ddd3dbe78e0fcee29b0be1d2f" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>int</type>
        <definition>int KWin::TouchPointsEffect::ringLife</definition>
        <argsstring></argsstring>
        <name>ringLife</name>
        <qualifiedname>KWin::TouchPointsEffect::ringLife</qualifiedname>
        <read>ringLife</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="23" column="5" bodyfile="kwin/src/plugins/touchpoints/touchpoints.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_touch_points_effect_1a20d58ed519f2b2065e783a314be910e9" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>int</type>
        <definition>int KWin::TouchPointsEffect::ringSize</definition>
        <argsstring></argsstring>
        <name>ringSize</name>
        <qualifiedname>KWin::TouchPointsEffect::ringSize</qualifiedname>
        <read>ringSize</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="24" column="5" bodyfile="kwin/src/plugins/touchpoints/touchpoints.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_touch_points_effect_1af67cc1cc1969499fa8a6d3fcaa3cbdeb" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>int</type>
        <definition>int KWin::TouchPointsEffect::ringCount</definition>
        <argsstring></argsstring>
        <name>ringCount</name>
        <qualifiedname>KWin::TouchPointsEffect::ringCount</qualifiedname>
        <read>ringCount</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="25" column="5" bodyfile="kwin/src/plugins/touchpoints/touchpoints.h" bodystart="25" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_touch_points_effect_1a427381063fb1950d85019e331d694c92" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int KWin::TouchPointsEffect::m_ringCount</definition>
        <argsstring></argsstring>
        <name>m_ringCount</name>
        <qualifiedname>KWin::TouchPointsEffect::m_ringCount</qualifiedname>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="69" column="9" bodyfile="kwin/src/plugins/touchpoints/touchpoints.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_touch_points_effect_1a6b7a04ba67981b9f8db02722bd8dd99d" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float KWin::TouchPointsEffect::m_lineWidth</definition>
        <argsstring></argsstring>
        <name>m_lineWidth</name>
        <qualifiedname>KWin::TouchPointsEffect::m_lineWidth</qualifiedname>
        <initializer>= 1.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="70" column="11" bodyfile="kwin/src/plugins/touchpoints/touchpoints.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_touch_points_effect_1ad2aa00bd1c4463271b879036b4e98b79" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int KWin::TouchPointsEffect::m_ringLife</definition>
        <argsstring></argsstring>
        <name>m_ringLife</name>
        <qualifiedname>KWin::TouchPointsEffect::m_ringLife</qualifiedname>
        <initializer>= 300</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="71" column="9" bodyfile="kwin/src/plugins/touchpoints/touchpoints.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_touch_points_effect_1a6b1fab72431c184b35fc399f2638a275" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float KWin::TouchPointsEffect::m_ringMaxSize</definition>
        <argsstring></argsstring>
        <name>m_ringMaxSize</name>
        <qualifiedname>KWin::TouchPointsEffect::m_ringMaxSize</qualifiedname>
        <initializer>= 20.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="72" column="11" bodyfile="kwin/src/plugins/touchpoints/touchpoints.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_touch_points_effect_1ad24b4465f153957affa18dd07c0740a9" prot="private" static="no" mutable="no">
        <type>QList&lt; TouchPoint &gt;</type>
        <definition>QList&lt;TouchPoint&gt; KWin::TouchPointsEffect::m_points</definition>
        <argsstring></argsstring>
        <name>m_points</name>
        <qualifiedname>KWin::TouchPointsEffect::m_points</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="81" column="11" bodyfile="kwin/src/plugins/touchpoints/touchpoints.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_touch_points_effect_1aa1ea429b11c60703ec7157844a3a4131" prot="private" static="no" mutable="no">
        <type>QHash&lt; quint32, QPointF &gt;</type>
        <definition>QHash&lt;quint32, QPointF&gt; KWin::TouchPointsEffect::m_latestPositions</definition>
        <argsstring></argsstring>
        <name>m_latestPositions</name>
        <qualifiedname>KWin::TouchPointsEffect::m_latestPositions</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="82" column="11" bodyfile="kwin/src/plugins/touchpoints/touchpoints.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_touch_points_effect_1aa8e6983fef36cf7e9953a3d88afff0c1" prot="private" static="no" mutable="no">
        <type>QHash&lt; quint32, Qt::GlobalColor &gt;</type>
        <definition>QHash&lt;quint32, Qt::GlobalColor&gt; KWin::TouchPointsEffect::m_colors</definition>
        <argsstring></argsstring>
        <name>m_colors</name>
        <qualifiedname>KWin::TouchPointsEffect::m_colors</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="83" column="11" bodyfile="kwin/src/plugins/touchpoints/touchpoints.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_touch_points_effect_1af4a55ee42730dfdac8bbd09696d5f20d" prot="private" static="no" mutable="no">
        <type>std::chrono::milliseconds</type>
        <definition>std::chrono::milliseconds KWin::TouchPointsEffect::m_lastPresentTime</definition>
        <argsstring></argsstring>
        <name>m_lastPresentTime</name>
        <qualifiedname>KWin::TouchPointsEffect::m_lastPresentTime</qualifiedname>
        <initializer>= std::chrono::milliseconds::zero()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="84" column="31" bodyfile="kwin/src/plugins/touchpoints/touchpoints.h" bodystart="84" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_touch_points_effect_1a5ffc2086b507531775e6dd1864879716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::TouchPointsEffect::TouchPointsEffect</definition>
        <argsstring>()</argsstring>
        <name>TouchPointsEffect</name>
        <qualifiedname>KWin::TouchPointsEffect::TouchPointsEffect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="27" column="5" bodyfile="kwin/src/plugins/touchpoints/touchpoints.cpp" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_touch_points_effect_1a464c301ebab23c44c789aee8e4a78e3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::TouchPointsEffect::~TouchPointsEffect</definition>
        <argsstring>() override</argsstring>
        <name>~TouchPointsEffect</name>
        <qualifiedname>KWin::TouchPointsEffect::~TouchPointsEffect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="28" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_touch_points_effect_1acacb5d2ec656d437c600104d4b83943e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::TouchPointsEffect::prePaintScreen</definition>
        <argsstring>(ScreenPrePaintData &amp;data, std::chrono::milliseconds presentTime) override</argsstring>
        <name>prePaintScreen</name>
        <qualifiedname>KWin::TouchPointsEffect::prePaintScreen</qualifiedname>
        <reimplements refid="group__kwineffects_1ga2edc1b757e36bb6bcbbacde454dfc05c">prePaintScreen</reimplements>
        <param>
          <type><ref refid="class_k_win_1_1_screen_pre_paint_data" kindref="compound">ScreenPrePaintData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::chrono::milliseconds</type>
          <declname>presentTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called before starting to paint the screen. In this method you can: <itemizedlist>
<listitem><para>set whether the windows or the entire screen will be transformed </para>
</listitem>
<listitem><para>change the region of the screen that will be painted </para>
</listitem>
<listitem><para>do various housekeeping tasks such as initing your effect&apos;s variables for the upcoming paint pass or updating animation&apos;s progress</para>
</listitem>
</itemizedlist>
<emphasis>presentTime</emphasis> specifies the expected monotonic time when the rendered frame will be displayed on the screen. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="29" column="10" bodyfile="kwin/src/plugins/touchpoints/touchpoints.cpp" bodystart="97" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_touch_points_effect_1a30c2980ff4f68bb70d1f6d3d2e0dc342" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::TouchPointsEffect::paintScreen</definition>
        <argsstring>(const RenderTarget &amp;renderTarget, const RenderViewport &amp;viewport, int mask, const QRegion &amp;region, Output *screen) override</argsstring>
        <name>paintScreen</name>
        <qualifiedname>KWin::TouchPointsEffect::paintScreen</qualifiedname>
        <reimplements refid="group__kwineffects_1ga44ee94161446ce6fb2502376af6515a8">paintScreen</reimplements>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref> &amp;</type>
          <declname>renderTarget</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_viewport" kindref="compound">RenderViewport</ref> &amp;</type>
          <declname>viewport</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const QRegion &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>screen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>In this method you can: <itemizedlist>
<listitem><para>paint something on top of the windows (by painting after calling effects-&gt;<ref refid="class_k_win_1_1_touch_points_effect_1a30c2980ff4f68bb70d1f6d3d2e0dc342" kindref="member">paintScreen()</ref>) </para>
</listitem>
<listitem><para>paint multiple desktops and/or multiple copies of the same desktop by calling effects-&gt;<ref refid="class_k_win_1_1_touch_points_effect_1a30c2980ff4f68bb70d1f6d3d2e0dc342" kindref="member">paintScreen()</ref> multiple times</para>
</listitem>
</itemizedlist>
In OpenGL based compositing, the frameworks ensures that the context is current when this method is invoked. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="30" column="10" bodyfile="kwin/src/plugins/touchpoints/touchpoints.cpp" bodystart="123" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_touch_points_effect_1a10bdb58e0f644d101d7560cbe042e72d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::TouchPointsEffect::postPaintScreen</definition>
        <argsstring>() override</argsstring>
        <name>postPaintScreen</name>
        <qualifiedname>KWin::TouchPointsEffect::postPaintScreen</qualifiedname>
        <reimplements refid="group__kwineffects_1ga10021cf9704c00d60beae284d53846e2">postPaintScreen</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called after all the painting has been finished. In this method you can: <itemizedlist>
<listitem><para>schedule next repaint in case of animations You shouldn&apos;t paint anything here.</para>
</listitem>
</itemizedlist>
In OpenGL based compositing, the frameworks ensures that the context is current when this method is invoked. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="31" column="10" bodyfile="kwin/src/plugins/touchpoints/touchpoints.cpp" bodystart="146" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_touch_points_effect_1ac62f0e69310b6b24c1d825bd5748e46d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::TouchPointsEffect::isActive</definition>
        <argsstring>() const override</argsstring>
        <name>isActive</name>
        <qualifiedname>KWin::TouchPointsEffect::isActive</qualifiedname>
        <reimplements refid="group__kwineffects_1ga596b6c0ed146b97b293f5db5f27fc40f">isActive</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overwrite this method to indicate whether your effect will be doing something in the next frame to be rendered. If the method returns <computeroutput>false</computeroutput> the effect will be excluded from the chained methods in the next rendered frame.</para>
<para>This method is called always directly before the paint loop begins. So it is totally fine to e.g. react on a window event, issue a repaint to trigger an animation and change a flag to indicate that this method returns <computeroutput>true</computeroutput>.</para>
<para>As the method is called each frame, you should not perform complex calculations. Best use just a boolean flag.</para>
<para>The default implementation of this method returns <computeroutput>true</computeroutput>. <simplesect kind="since"><para>4.8 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="32" column="10" bodyfile="kwin/src/plugins/touchpoints/touchpoints.cpp" bodystart="179" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_touch_points_effect_1a64f0f32fdda6bd97c5568f89e36ca179" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::TouchPointsEffect::touchDown</definition>
        <argsstring>(qint32 id, const QPointF &amp;pos, std::chrono::microseconds time) override</argsstring>
        <name>touchDown</name>
        <qualifiedname>KWin::TouchPointsEffect::touchDown</qualifiedname>
        <reimplements refid="group__kwineffects_1ga315fd305e7570f41e7bce7db6812381f">touchDown</reimplements>
        <param>
          <type>qint32</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A touch point was pressed.</para>
<para>If the effect wants to exclusively use the touch event it should return <computeroutput>true</computeroutput>. If <computeroutput>false</computeroutput> is returned the touch event is passed to further effects.</para>
<para>In general an <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> should only return <computeroutput>true</computeroutput> if it is the exclusive effect getting input events. E.g. has grabbed mouse events.</para>
<para>Default implementation returns <computeroutput>false</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique id of the touch point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The position of the touch point in global coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_touch_points_effect_1af438b9b693a3c8cfdb1471665c2fffb8" kindref="member">touchMotion</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_touch_points_effect_1a44eaa40230ef9ea1908a1a4038c488ce" kindref="member">touchUp</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.8 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="33" column="10" bodyfile="kwin/src/plugins/touchpoints/touchpoints.cpp" bodystart="60" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_touch_points_effect_1af438b9b693a3c8cfdb1471665c2fffb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::TouchPointsEffect::touchMotion</definition>
        <argsstring>(qint32 id, const QPointF &amp;pos, std::chrono::microseconds time) override</argsstring>
        <name>touchMotion</name>
        <qualifiedname>KWin::TouchPointsEffect::touchMotion</qualifiedname>
        <reimplements refid="group__kwineffects_1ga54d00a9e05b5d4597db40c2f5b1d36de">touchMotion</reimplements>
        <param>
          <type>qint32</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A touch point moved.</para>
<para>If the effect wants to exclusively use the touch event it should return <computeroutput>true</computeroutput>. If <computeroutput>false</computeroutput> is returned the touch event is passed to further effects.</para>
<para>In general an <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> should only return <computeroutput>true</computeroutput> if it is the exclusive effect getting input events. E.g. has grabbed mouse events.</para>
<para>Default implementation returns <computeroutput>false</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique id of the touch point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The position of the touch point in global coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_touch_points_effect_1a64f0f32fdda6bd97c5568f89e36ca179" kindref="member">touchDown</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_touch_points_effect_1a44eaa40230ef9ea1908a1a4038c488ce" kindref="member">touchUp</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.8 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="34" column="10" bodyfile="kwin/src/plugins/touchpoints/touchpoints.cpp" bodystart="72" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_touch_points_effect_1a44eaa40230ef9ea1908a1a4038c488ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::TouchPointsEffect::touchUp</definition>
        <argsstring>(qint32 id, std::chrono::microseconds time) override</argsstring>
        <name>touchUp</name>
        <qualifiedname>KWin::TouchPointsEffect::touchUp</qualifiedname>
        <reimplements refid="group__kwineffects_1gaf3871967d6199eb7c87621bc75b925bb">touchUp</reimplements>
        <param>
          <type>qint32</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A touch point was released.</para>
<para>If the effect wants to exclusively use the touch event it should return <computeroutput>true</computeroutput>. If <computeroutput>false</computeroutput> is returned the touch event is passed to further effects.</para>
<para>In general an <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> should only return <computeroutput>true</computeroutput> if it is the exclusive effect getting input events. E.g. has grabbed mouse events.</para>
<para>Default implementation returns <computeroutput>false</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique id of the touch point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_touch_points_effect_1a64f0f32fdda6bd97c5568f89e36ca179" kindref="member">touchDown</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_touch_points_effect_1af438b9b693a3c8cfdb1471665c2fffb8" kindref="member">touchMotion</ref> </para>
</simplesect>
<simplesect kind="since"><para>5.8 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="35" column="10" bodyfile="kwin/src/plugins/touchpoints/touchpoints.cpp" bodystart="84" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_touch_points_effect_1a6baa4d7956cd332d3853fcd6fbd88420" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>qreal</type>
        <definition>qreal KWin::TouchPointsEffect::lineWidth</definition>
        <argsstring>() const</argsstring>
        <name>lineWidth</name>
        <qualifiedname>KWin::TouchPointsEffect::lineWidth</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="38" column="11" bodyfile="kwin/src/plugins/touchpoints/touchpoints.h" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_touch_points_effect_1a1a262b3740f70911daa8e997a0cfcbb8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::TouchPointsEffect::ringLife</definition>
        <argsstring>() const</argsstring>
        <name>ringLife</name>
        <qualifiedname>KWin::TouchPointsEffect::ringLife</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="42" column="9" bodyfile="kwin/src/plugins/touchpoints/touchpoints.h" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_touch_points_effect_1ae2aa6a63d98e10d8639d772a622295b0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::TouchPointsEffect::ringSize</definition>
        <argsstring>() const</argsstring>
        <name>ringSize</name>
        <qualifiedname>KWin::TouchPointsEffect::ringSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="46" column="9" bodyfile="kwin/src/plugins/touchpoints/touchpoints.h" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_touch_points_effect_1aa6993d1898b69996ad6dd20787adea84" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::TouchPointsEffect::ringCount</definition>
        <argsstring>() const</argsstring>
        <name>ringCount</name>
        <qualifiedname>KWin::TouchPointsEffect::ringCount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="50" column="9" bodyfile="kwin/src/plugins/touchpoints/touchpoints.h" bodystart="50" bodyend="53"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_k_win_1_1_touch_points_effect_1a216155f350a172e5ca2cc854d5a48bc2" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::TouchPointsEffect::drawCircle</definition>
        <argsstring>(const RenderViewport &amp;viewport, const QColor &amp;color, float cx, float cy, float r)</argsstring>
        <name>drawCircle</name>
        <qualifiedname>KWin::TouchPointsEffect::drawCircle</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_viewport" kindref="compound">RenderViewport</ref> &amp;</type>
          <declname>viewport</declname>
        </param>
        <param>
          <type>const QColor &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>float</type>
          <declname>cx</declname>
        </param>
        <param>
          <type>float</type>
          <declname>cy</declname>
        </param>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="56" column="17" bodyfile="kwin/src/plugins/touchpoints/touchpoints.cpp" bodystart="184" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_touch_points_effect_1a87fbba4882f5b014f32231a3c00da573" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::TouchPointsEffect::repaint</definition>
        <argsstring>()</argsstring>
        <name>repaint</name>
        <qualifiedname>KWin::TouchPointsEffect::repaint</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="58" column="10" bodyfile="kwin/src/plugins/touchpoints/touchpoints.cpp" bodystart="167" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_touch_points_effect_1aceabbd1ebe0d73df6a82cffd148ea28e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float KWin::TouchPointsEffect::computeAlpha</definition>
        <argsstring>(int time, int ring)</argsstring>
        <name>computeAlpha</name>
        <qualifiedname>KWin::TouchPointsEffect::computeAlpha</qualifiedname>
        <param>
          <type>int</type>
          <declname>time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ring</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="60" column="11" bodyfile="kwin/src/plugins/touchpoints/touchpoints.cpp" bodystart="161" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_touch_points_effect_1a3fa784626b93722ad01a771db33a0d1e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float KWin::TouchPointsEffect::computeRadius</definition>
        <argsstring>(int time, bool press, int ring)</argsstring>
        <name>computeRadius</name>
        <qualifiedname>KWin::TouchPointsEffect::computeRadius</qualifiedname>
        <param>
          <type>int</type>
          <declname>time</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>press</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ring</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="61" column="11" bodyfile="kwin/src/plugins/touchpoints/touchpoints.cpp" bodystart="152" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_touch_points_effect_1aa110f708cf675b63a04c5e67e675c3ca" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::TouchPointsEffect::drawCircleGl</definition>
        <argsstring>(const RenderViewport &amp;viewport, const QColor &amp;color, float cx, float cy, float r)</argsstring>
        <name>drawCircleGl</name>
        <qualifiedname>KWin::TouchPointsEffect::drawCircleGl</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_viewport" kindref="compound">RenderViewport</ref> &amp;</type>
          <declname>viewport</declname>
        </param>
        <param>
          <type>const QColor &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>float</type>
          <declname>cx</declname>
        </param>
        <param>
          <type>float</type>
          <declname>cy</declname>
        </param>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="62" column="10" bodyfile="kwin/src/plugins/touchpoints/touchpoints.cpp" bodystart="193" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_touch_points_effect_1a7bcfd339b9acba8e2cb1eb8ab9df89a5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::TouchPointsEffect::drawCircleQPainter</definition>
        <argsstring>(const QColor &amp;color, float cx, float cy, float r)</argsstring>
        <name>drawCircleQPainter</name>
        <qualifiedname>KWin::TouchPointsEffect::drawCircleQPainter</qualifiedname>
        <param>
          <type>const QColor &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>float</type>
          <declname>cx</declname>
        </param>
        <param>
          <type>float</type>
          <declname>cy</declname>
        </param>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="63" column="10" bodyfile="kwin/src/plugins/touchpoints/touchpoints.cpp" bodystart="222" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_touch_points_effect_1a968e48259d3dddad66f0175d13006c66" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::TouchPointsEffect::paintScreenSetupGl</definition>
        <argsstring>(const RenderTarget &amp;renderTarget, const QMatrix4x4 &amp;projectionMatrix)</argsstring>
        <name>paintScreenSetupGl</name>
        <qualifiedname>KWin::TouchPointsEffect::paintScreenSetupGl</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref> &amp;</type>
          <declname>renderTarget</declname>
        </param>
        <param>
          <type>const QMatrix4x4 &amp;</type>
          <declname>projectionMatrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="64" column="10" bodyfile="kwin/src/plugins/touchpoints/touchpoints.cpp" bodystart="231" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_touch_points_effect_1a30e4fae05436059ff11cf34633814233" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::TouchPointsEffect::paintScreenFinishGl</definition>
        <argsstring>()</argsstring>
        <name>paintScreenFinishGl</name>
        <qualifiedname>KWin::TouchPointsEffect::paintScreenFinishGl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="65" column="10" bodyfile="kwin/src/plugins/touchpoints/touchpoints.cpp" bodystart="242" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_touch_points_effect_1a18c75d6ffa05c04585b6cdc8ea901342" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Qt::GlobalColor</type>
        <definition>Qt::GlobalColor KWin::TouchPointsEffect::colorForId</definition>
        <argsstring>(quint32 id)</argsstring>
        <name>colorForId</name>
        <qualifiedname>KWin::TouchPointsEffect::colorForId</qualifiedname>
        <param>
          <type>quint32</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="67" column="21" bodyfile="kwin/src/plugins/touchpoints/touchpoints.cpp" bodystart="48" bodyend="58"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>KWin::Effect</label>
        <link refid="class_k_win_1_1_effect"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::TouchPointsEffect</label>
        <link refid="class_k_win_1_1_touch_points_effect"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>KWin::Effect</label>
        <link refid="class_k_win_1_1_effect"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::TouchPointsEffect</label>
        <link refid="class_k_win_1_1_touch_points_effect"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/plugins/touchpoints/touchpoints.h" line="18" column="1" bodyfile="kwin/src/plugins/touchpoints/touchpoints.h" bodystart="20" bodyend="85"/>
    <listofallmembers>
      <member refid="group__kwineffects_1gab9bcf52072fe74567496b0a894d1d873" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>animationTime</name></member>
      <member refid="group__kwineffects_1ga3a167fe6d9c46376ed46db13caf2d135" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>animationTime</name></member>
      <member refid="group__kwineffects_1ga0ba05f1463195d0f92ea1dd3396a5d16" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>animationTime</name></member>
      <member refid="group__kwineffects_1ga7cf8035c970fcde177e3038d79015289" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>blocksDirectScanout</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aea67d120ab5ce1dc424476e63c132af6c1" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>Blur</name></member>
      <member refid="group__kwineffects_1gab8a94f591b743b59b7285911e641e7d5" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>borderActivated</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1a18c75d6ffa05c04585b6cdc8ea901342" prot="private" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>colorForId</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1aceabbd1ebe0d73df6a82cffd148ea28e" prot="private" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>computeAlpha</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1a3fa784626b93722ad01a771db33a0d1e" prot="private" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>computeRadius</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aead805f717a48c23959a1e9ecd7722d15d" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>Contrast</name></member>
      <member refid="group__kwineffects_1ga4da344d8b8f2cb9eecd6e64a9b758740" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>cursorPos</name></member>
      <member refid="group__kwineffects_1ga0c159e00c3a51ca733bea49cf8d52691" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>debug</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1a216155f350a172e5ca2cc854d5a48bc2" prot="private" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>drawCircle</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1aa110f708cf675b63a04c5e67e675c3ca" prot="private" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>drawCircleGl</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1a7bcfd339b9acba8e2cb1eb8ab9df89a5" prot="private" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>drawCircleQPainter</name></member>
      <member refid="group__kwineffects_1ga254b1a3e8bb8b9b671e9b000ca027b7c" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>drawWindow</name></member>
      <member refid="group__kwineffects_1ga7bd8262f4cb2c5c3090c748eb388ad7e" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>Effect</name></member>
      <member refid="group__kwineffects_1ga6337b2a9b5aadfbb6b696119144b56ae" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>Feature</name></member>
      <member refid="group__kwineffects_1gab5e0581ae4b2dffe8014ff5cf6c21158" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>grabbedKeyboardEvent</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aeaecbb77ad241419970ece3d45296c4838" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>HighlightWindows</name></member>
      <member refid="group__kwineffects_1ga7b0ecb57667179e95c188f0ee7416d00" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>interpolate</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1ac62f0e69310b6b24c1d825bd5748e46d" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>isActive</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1afe93b24d906b26f14537b98151cf91ad" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>lineWidth</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1a6baa4d7956cd332d3853fcd6fbd88420" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>lineWidth</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1aa8e6983fef36cf7e9953a3d88afff0c1" prot="private" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>m_colors</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1af4a55ee42730dfdac8bbd09696d5f20d" prot="private" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>m_lastPresentTime</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1aa1ea429b11c60703ec7157844a3a4131" prot="private" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>m_latestPositions</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1a6b7a04ba67981b9f8db02722bd8dd99d" prot="private" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>m_lineWidth</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1ad24b4465f153957affa18dd07c0740a9" prot="private" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>m_points</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1a427381063fb1950d85019e331d694c92" prot="private" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>m_ringCount</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1ad2aa00bd1c4463271b879036b4e98b79" prot="private" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>m_ringLife</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1a6b1fab72431c184b35fc399f2638a275" prot="private" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>m_ringMaxSize</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aea170229312ed2ec0e446ee89ba7f6b6ca" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>Nothing</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378dab0de2932c45bde6df3de10d00dbd6fcd" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>PAINT_SCREEN_BACKGROUND_FIRST</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378da43acbfc913cae9eb3c363aeb0524f18f" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>PAINT_SCREEN_REGION</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378da3e731594d83c3e92742bff7c420fb7f8" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>PAINT_SCREEN_TRANSFORMED</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378da124dd798e5f793087e81da77e11a9b1e" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>PAINT_SCREEN_WITH_TRANSFORMED_WINDOWS</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378dac606d3dcf2dd150234f71c4c39083c7d" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>PAINT_WINDOW_OPAQUE</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378da684bb6c6c278b900b6d0c889e79233b8" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>PAINT_WINDOW_TRANSFORMED</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378dac7237bf4bb4d6ea6d6fb1215db19b45e" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>PAINT_WINDOW_TRANSLUCENT</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1a30c2980ff4f68bb70d1f6d3d2e0dc342" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>paintScreen</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1a30e4fae05436059ff11cf34633814233" prot="private" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>paintScreenFinishGl</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1a968e48259d3dddad66f0175d13006c66" prot="private" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>paintScreenSetupGl</name></member>
      <member refid="group__kwineffects_1ga0f0292db2bf016a0843ef7cc06219378" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>paintWindow</name></member>
      <member refid="group__kwineffects_1ga5fb1bc87ff54dcc2cfe87b070816ab00" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>perform</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1a10bdb58e0f644d101d7560cbe042e72d" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>postPaintScreen</name></member>
      <member refid="group__kwineffects_1ga9b7cf82c6f74331cffabb06c63ef914c" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>postPaintWindow</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1acacb5d2ec656d437c600104d4b83943e" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>prePaintScreen</name></member>
      <member refid="group__kwineffects_1ga2832c7831c0f49f9f5cf0267ffc53672" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>prePaintWindow</name></member>
      <member refid="group__kwineffects_1ga30fc2cbbdd90f95568a9e350f34bf2b7" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>provides</name></member>
      <member refid="group__kwineffects_1ga737c6d80eb8f8b24fdc6398209c38e3d" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>reconfigure</name></member>
      <member refid="group__kwineffects_1gga4aebd7d0f695e37678debaa118fa92dca19d3e23e53788c8d9cc9c18fbf75fc7d" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>ReconfigureAll</name></member>
      <member refid="group__kwineffects_1ga4aebd7d0f695e37678debaa118fa92dc" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>ReconfigureFlag</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1a87fbba4882f5b014f32231a3c00da573" prot="private" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>repaint</name></member>
      <member refid="group__kwineffects_1ga120531588e58691a5a18028158d2947a" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>requestedEffectChainPosition</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1af67cc1cc1969499fa8a6d3fcaa3cbdeb" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>ringCount</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1aa6993d1898b69996ad6dd20787adea84" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>ringCount</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1aa1758b7ddd3dbe78e0fcee29b0be1d2f" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>ringLife</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1a1a262b3740f70911daa8e997a0cfcbb8" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>ringLife</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1a20d58ed519f2b2065e783a314be910e9" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>ringSize</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1ae2aa6a63d98e10d8639d772a622295b0" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>ringSize</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aea592ea0de7a4d658a1ef9bbb48b18e15a" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>ScreenInversion</name></member>
      <member refid="group__kwineffects_1ga1efc42cd9be15e8200c6e55f6bf47cb8" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>setPositionTransformations</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aea19036d413806c53978a3234e7eb197c4" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>SystemBell</name></member>
      <member refid="group__kwineffects_1ga2d22a8f0b8a4d81615dff67dc1ef970f" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>tabletPadButtonEvent</name></member>
      <member refid="group__kwineffects_1gaa084e5a45597f5775213715eb5506f63" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>tabletPadRingEvent</name></member>
      <member refid="group__kwineffects_1ga4998fb0983bd97163935cad2c4dedd76" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>tabletPadStripEvent</name></member>
      <member refid="group__kwineffects_1ga1d4ae01f5935ea887a12018d59191cbf" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>tabletToolAxis</name></member>
      <member refid="group__kwineffects_1ga7a984d7d83dfa97962b8404301c6aba9" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>tabletToolButtonEvent</name></member>
      <member refid="group__kwineffects_1ga4ed77506be381680bf664dbc8c20e036" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>tabletToolProximity</name></member>
      <member refid="group__kwineffects_1gaf16e9ca42cceb738fb859d1a1a462548" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>tabletToolTip</name></member>
      <member refid="group__kwineffects_1gaa31554949bc00085e6380b50be16138e" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>touchCancel</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1a64f0f32fdda6bd97c5568f89e36ca179" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>touchDown</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1af438b9b693a3c8cfdb1471665c2fffb8" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>touchMotion</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1a5ffc2086b507531775e6dd1864879716" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>TouchPointsEffect</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1a44eaa40230ef9ea1908a1a4038c488ce" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>touchUp</name></member>
      <member refid="group__kwineffects_1ga7b142933c38cb9b4a433b768b266e7cb" prot="public" virt="virtual"><scope>KWin::TouchPointsEffect</scope><name>windowInputMouseEvent</name></member>
      <member refid="group__kwineffects_1ga50174eb0169aebceb78ebd5aff71c481" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>~Effect</name></member>
      <member refid="class_k_win_1_1_touch_points_effect_1a464c301ebab23c44c789aee8e4a78e3f" prot="public" virt="non-virtual"><scope>KWin::TouchPointsEffect</scope><name>~TouchPointsEffect</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
