<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_effect_window" kind="class" language="C++" prot="public">
    <compoundname>KWin::EffectWindow</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QObject</basecompoundref>
    <includes refid="effectwindow_8h" local="no">effectwindow.h</includes>
    <innerclass refid="class_k_win_1_1_effect_window_1_1_private" prot="public">KWin::EffectWindow::Private</innerclass>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_k_win_1_1_effect_window_1a5a8165f6ee22042d25b8f53c005e5ee9" prot="public" static="no" strong="no">
        <type></type>
        <name></name>
        <qualifiedname>KWin::EffectWindow</qualifiedname>
        <enumvalue id="class_k_win_1_1_effect_window_1a5a8165f6ee22042d25b8f53c005e5ee9afcd7010088bf17a0f7451f2ed729956a" prot="public">
          <name>PAINT_DISABLED</name>
          <initializer>= 1 &lt;&lt; 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> will not be painted </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_effect_window_1a5a8165f6ee22042d25b8f53c005e5ee9a027ec15c92a014e0d33ddecf6478136d" prot="public">
          <name>PAINT_DISABLED_BY_DESKTOP</name>
          <initializer>= 1 &lt;&lt; 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> will not be painted because of which desktop it&apos;s on </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_effect_window_1a5a8165f6ee22042d25b8f53c005e5ee9a48042b3146a90c9ffe1539788807ce8c" prot="public">
          <name>PAINT_DISABLED_BY_MINIMIZE</name>
          <initializer>= 1 &lt;&lt; 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> will not be painted because it is minimized </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_effect_window_1a5a8165f6ee22042d25b8f53c005e5ee9a6411eb1b8ade2ff51c0e24601682573a" prot="public">
          <name>PAINT_DISABLED_BY_ACTIVITY</name>
          <initializer>= 1 &lt;&lt; 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> will not be painted because it&apos;s not on the current activity </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flags explaining why painting should be disabled </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="338" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="338" bodyend="347"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="property">
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1ab3cdfabc4ad08c4a98a249bde5b39b97" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QRectF</type>
        <definition>QRectF KWin::EffectWindow::geometry</definition>
        <argsstring></argsstring>
        <name>geometry</name>
        <qualifiedname>KWin::EffectWindow::geometry</qualifiedname>
        <read>frameGeometry</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="48" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a82134568757e14380d6002c6fad5da9c" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QRectF</type>
        <definition>QRectF KWin::EffectWindow::expandedGeometry</definition>
        <argsstring></argsstring>
        <name>expandedGeometry</name>
        <qualifiedname>KWin::EffectWindow::expandedGeometry</qualifiedname>
        <read>expandedGeometry</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="49" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a12d7c8207faa0369e920652ee2e25bfc" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>qreal</type>
        <definition>qreal KWin::EffectWindow::height</definition>
        <argsstring></argsstring>
        <name>height</name>
        <qualifiedname>KWin::EffectWindow::height</qualifiedname>
        <read>height</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="50" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a2653c6ea19ffb324de2356a67c4c0458" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>qreal</type>
        <definition>qreal KWin::EffectWindow::opacity</definition>
        <argsstring></argsstring>
        <name>opacity</name>
        <qualifiedname>KWin::EffectWindow::opacity</qualifiedname>
        <read>opacity</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="51" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a33bb014b90ec9da18fa7259b44a98d27" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QPointF</type>
        <definition>QPointF KWin::EffectWindow::pos</definition>
        <argsstring></argsstring>
        <name>pos</name>
        <qualifiedname>KWin::EffectWindow::pos</qualifiedname>
        <read>pos</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="52" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1acc4498cfe046b04cd40649fd2f2ea15d" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_k_win_1_1_output" kindref="compound">KWin::Output</ref> *</type>
        <definition>KWin::Output * KWin::EffectWindow::screen</definition>
        <argsstring></argsstring>
        <name>screen</name>
        <qualifiedname>KWin::EffectWindow::screen</qualifiedname>
        <read>screen</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="53" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a3631503d720c01d6e656ae373a3b0b48" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QSizeF</type>
        <definition>QSizeF KWin::EffectWindow::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <qualifiedname>KWin::EffectWindow::size</qualifiedname>
        <read>size</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="54" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1ac402e4ce70089b1478511e451c4a2623" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>qreal</type>
        <definition>qreal KWin::EffectWindow::width</definition>
        <argsstring></argsstring>
        <name>width</name>
        <qualifiedname>KWin::EffectWindow::width</qualifiedname>
        <read>width</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="55" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1aac1f4a263e23a9ddcbb6e14f325923b9" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>qreal</type>
        <definition>qreal KWin::EffectWindow::x</definition>
        <argsstring></argsstring>
        <name>x</name>
        <qualifiedname>KWin::EffectWindow::x</qualifiedname>
        <read>x</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="56" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1aca622a1be68a6c6e02290b6b3e8d2f54" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>qreal</type>
        <definition>qreal KWin::EffectWindow::y</definition>
        <argsstring></argsstring>
        <name>y</name>
        <qualifiedname>KWin::EffectWindow::y</qualifiedname>
        <read>y</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="57" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1aa942bed8cd7a065aaef67224865278e4" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QList&lt; <ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">KWin::VirtualDesktop</ref> * &gt;</type>
        <definition>QList&lt;KWin::VirtualDesktop *&gt; KWin::EffectWindow::desktops</definition>
        <argsstring></argsstring>
        <name>desktops</name>
        <qualifiedname>KWin::EffectWindow::desktops</qualifiedname>
        <read>desktops</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="58" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1abcc1dde8845a3aab00152b64bde0c7d3" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::onAllDesktops</definition>
        <argsstring></argsstring>
        <name>onAllDesktops</name>
        <qualifiedname>KWin::EffectWindow::onAllDesktops</qualifiedname>
        <read>isOnAllDesktops</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="59" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1ab826f08ac96bf689d845b86337b746bd" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::onCurrentDesktop</definition>
        <argsstring></argsstring>
        <name>onCurrentDesktop</name>
        <qualifiedname>KWin::EffectWindow::onCurrentDesktop</qualifiedname>
        <read>isOnCurrentDesktop</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="60" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a3684639a5c385f9c49f38a8681328fe4" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QRectF</type>
        <definition>QRectF KWin::EffectWindow::rect</definition>
        <argsstring></argsstring>
        <name>rect</name>
        <qualifiedname>KWin::EffectWindow::rect</qualifiedname>
        <read>rect</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="61" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a642ffe286fd0bd253bc90f71e51762ca" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QString</type>
        <definition>QString KWin::EffectWindow::windowClass</definition>
        <argsstring></argsstring>
        <name>windowClass</name>
        <qualifiedname>KWin::EffectWindow::windowClass</qualifiedname>
        <read>windowClass</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="62" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a818e53c259a6ec435cd3c8a013915209" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QString</type>
        <definition>QString KWin::EffectWindow::windowRole</definition>
        <argsstring></argsstring>
        <name>windowRole</name>
        <qualifiedname>KWin::EffectWindow::windowRole</qualifiedname>
        <read>windowRole</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="63" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1ace5c087436eae11f4cb3a947afab70c6" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::desktopWindow</definition>
        <argsstring></argsstring>
        <name>desktopWindow</name>
        <qualifiedname>KWin::EffectWindow::desktopWindow</qualifiedname>
        <read>isDesktop</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a desktop background window (the one with wallpaper). See _NET_WM_WINDOW_TYPE_DESKTOP at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="68" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1af4c808c74304af9a3b330e0f52fe6c81" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::dock</definition>
        <argsstring></argsstring>
        <name>dock</name>
        <qualifiedname>KWin::EffectWindow::dock</qualifiedname>
        <read>isDock</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a dock (i.e. a panel). See _NET_WM_WINDOW_TYPE_DOCK at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="73" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a0d87085f89b932da4b9b6b4f027ff431" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::toolbar</definition>
        <argsstring></argsstring>
        <name>toolbar</name>
        <qualifiedname>KWin::EffectWindow::toolbar</qualifiedname>
        <read>isToolbar</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a standalone (detached) toolbar window. See _NET_WM_WINDOW_TYPE_TOOLBAR at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="78" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a0f400ae27ff725c559ee782c45d16daf" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::menu</definition>
        <argsstring></argsstring>
        <name>menu</name>
        <qualifiedname>KWin::EffectWindow::menu</qualifiedname>
        <read>isMenu</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a torn-off menu. See _NET_WM_WINDOW_TYPE_MENU at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="83" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1acb4ac248f51b6f9d6c556c04660562b4" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::normalWindow</definition>
        <argsstring></argsstring>
        <name>normalWindow</name>
        <qualifiedname>KWin::EffectWindow::normalWindow</qualifiedname>
        <read>isNormalWindow</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a &quot;normal&quot; window, i.e. an application or any other window for which none of the specialized window types fit. See _NET_WM_WINDOW_TYPE_NORMAL at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="89" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1afd0dacf9ea562332728aa32580b0a523" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::dialog</definition>
        <argsstring></argsstring>
        <name>dialog</name>
        <qualifiedname>KWin::EffectWindow::dialog</qualifiedname>
        <read>isDialog</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a dialog window. See _NET_WM_WINDOW_TYPE_DIALOG at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="94" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1ae1f05a8a89626196394611627be1361b" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::splash</definition>
        <argsstring></argsstring>
        <name>splash</name>
        <qualifiedname>KWin::EffectWindow::splash</qualifiedname>
        <read>isSplash</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a splashscreen. Note that many (especially older) applications do not support marking their splash windows with this type. See _NET_WM_WINDOW_TYPE_SPLASH at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="100" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1ad0c8a922d3a167bf1dc13d06ecb9da9f" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::utility</definition>
        <argsstring></argsstring>
        <name>utility</name>
        <qualifiedname>KWin::EffectWindow::utility</qualifiedname>
        <read>isUtility</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a utility window, such as a tool window. See _NET_WM_WINDOW_TYPE_UTILITY at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="105" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1aa4d2ef49669398442028080a35370dff" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::dropdownMenu</definition>
        <argsstring></argsstring>
        <name>dropdownMenu</name>
        <qualifiedname>KWin::EffectWindow::dropdownMenu</qualifiedname>
        <read>isDropdownMenu</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a dropdown menu (i.e. a popup directly or indirectly open from the applications menubar). See _NET_WM_WINDOW_TYPE_DROPDOWN_MENU at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="111" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1af78c6f823b19efebcd4781bd8e1c84c2" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::popupMenu</definition>
        <argsstring></argsstring>
        <name>popupMenu</name>
        <qualifiedname>KWin::EffectWindow::popupMenu</qualifiedname>
        <read>isPopupMenu</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a popup menu (that is not a torn-off or dropdown menu). See _NET_WM_WINDOW_TYPE_POPUP_MENU at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="116" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1ae1360c42ad9c20711836790752dc9691" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::tooltip</definition>
        <argsstring></argsstring>
        <name>tooltip</name>
        <qualifiedname>KWin::EffectWindow::tooltip</qualifiedname>
        <read>isTooltip</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a tooltip. See _NET_WM_WINDOW_TYPE_TOOLTIP at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="121" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a907936e214881096315f6494865a8a1f" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::notification</definition>
        <argsstring></argsstring>
        <name>notification</name>
        <qualifiedname>KWin::EffectWindow::notification</qualifiedname>
        <read>isNotification</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a window with a notification. See _NET_WM_WINDOW_TYPE_NOTIFICATION at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="126" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1af2971301a2d3664ec2061d6a58d6731b" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::criticalNotification</definition>
        <argsstring></argsstring>
        <name>criticalNotification</name>
        <qualifiedname>KWin::EffectWindow::criticalNotification</qualifiedname>
        <read>isCriticalNotification</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a window with a critical notification. using the non-standard _KDE_NET_WM_WINDOW_TYPE_CRITICAL_NOTIFICATION </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="131" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a3da8057f010332782b13202d49da9d42" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::onScreenDisplay</definition>
        <argsstring></argsstring>
        <name>onScreenDisplay</name>
        <qualifiedname>KWin::EffectWindow::onScreenDisplay</qualifiedname>
        <read>isOnScreenDisplay</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is an on screen display window using the non-standard _KDE_NET_WM_WINDOW_TYPE_ON_SCREEN_DISPLAY </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="136" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1aefdd2bd64bc8aa3d1f59ea7a6d55646a" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::comboBox</definition>
        <argsstring></argsstring>
        <name>comboBox</name>
        <qualifiedname>KWin::EffectWindow::comboBox</qualifiedname>
        <read>isComboBox</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a combobox popup. See _NET_WM_WINDOW_TYPE_COMBO at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="141" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a64eda7b274f9d91dc86120cf8cab0e5b" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::dndIcon</definition>
        <argsstring></argsstring>
        <name>dndIcon</name>
        <qualifiedname>KWin::EffectWindow::dndIcon</qualifiedname>
        <read>isDNDIcon</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a Drag&amp;Drop icon. See _NET_WM_WINDOW_TYPE_DND at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="146" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1acbf1e8e79b8f9761140c7d7d8c19748e" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>int</type>
        <definition>int KWin::EffectWindow::windowType</definition>
        <argsstring></argsstring>
        <name>windowType</name>
        <qualifiedname>KWin::EffectWindow::windowType</qualifiedname>
        <read>windowTypeInt</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the NETWM window type See <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="151" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1aeac5ca07a875e1afec07bf5d14b5200e" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::managed</definition>
        <argsstring></argsstring>
        <name>managed</name>
        <qualifiedname>KWin::EffectWindow::managed</qualifiedname>
        <read>isManaged</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> is managed by <ref refid="namespace_k_win" kindref="compound">KWin</ref> (it has control over its placement and other aspects, as opposed to override-redirect windows that are entirely handled by the application). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="156" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a8909803ccc6f83d18030a9262ecb4ccc" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::deleted</definition>
        <argsstring></argsstring>
        <name>deleted</name>
        <qualifiedname>KWin::EffectWindow::deleted</qualifiedname>
        <read>isDeleted</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> represents an already deleted window and only kept for the compositor for animations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="160" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1adc8f774efe4457f953cb1675082e41ed" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QString</type>
        <definition>QString KWin::EffectWindow::caption</definition>
        <argsstring></argsstring>
        <name>caption</name>
        <qualifiedname>KWin::EffectWindow::caption</qualifiedname>
        <read>caption</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The Caption of the window. Read from WM_NAME property together with a suffix for hostname and shortcut. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="164" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a6581c3ec66a3009ba7edd1246b5c5580" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::keepAbove</definition>
        <argsstring></argsstring>
        <name>keepAbove</name>
        <qualifiedname>KWin::EffectWindow::keepAbove</qualifiedname>
        <read>keepAbove</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the window is set to be kept above other windows. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="168" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1afc2fe15cd381e8774651e67aa2848262" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::keepBelow</definition>
        <argsstring></argsstring>
        <name>keepBelow</name>
        <qualifiedname>KWin::EffectWindow::keepBelow</qualifiedname>
        <read>keepBelow</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the window is set to be kept below other windows. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="172" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a4dd0bc592ed4f2e2634c5922fb5a8bbc" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::minimized</definition>
        <argsstring></argsstring>
        <name>minimized</name>
        <qualifiedname>KWin::EffectWindow::minimized</qualifiedname>
        <read>isMinimized</read>
        <write>setMinimized</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the window is minimized. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="176" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a2bcc1a1ee733fff0b4517a1e166f7355" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::modal</definition>
        <argsstring></argsstring>
        <name>modal</name>
        <qualifiedname>KWin::EffectWindow::modal</qualifiedname>
        <read>isModal</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the window represents a modal window. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="180" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1ad0184938cfcc847c30dcaa3bd35f54b8" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::moveable</definition>
        <argsstring></argsstring>
        <name>moveable</name>
        <qualifiedname>KWin::EffectWindow::moveable</qualifiedname>
        <read>isMovable</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the window is moveable. Even if it is not moveable, it might be possible to move it to another screen. <simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_window_1ae2fec0609f192e39419323ff990614d8" kindref="member">moveableAcrossScreens</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="186" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1ae2fec0609f192e39419323ff990614d8" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::moveableAcrossScreens</definition>
        <argsstring></argsstring>
        <name>moveableAcrossScreens</name>
        <qualifiedname>KWin::EffectWindow::moveableAcrossScreens</qualifiedname>
        <read>isMovableAcrossScreens</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the window can be moved to another screen. <simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_window_1ad0184938cfcc847c30dcaa3bd35f54b8" kindref="member">moveable</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="191" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a1ffcdee93dcd3009680c17817a88af59" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QSizeF</type>
        <definition>QSizeF KWin::EffectWindow::basicUnit</definition>
        <argsstring></argsstring>
        <name>basicUnit</name>
        <qualifiedname>KWin::EffectWindow::basicUnit</qualifiedname>
        <read>basicUnit</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>By how much the window wishes to grow/shrink at least. Usually QSize(1,1). MAY BE DISOBEYED BY THE WM! It&apos;s only for information, do NOT rely on it at all. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="196" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1abd3ae3a870825e647b5267996bcdcbdc" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::move</definition>
        <argsstring></argsstring>
        <name>move</name>
        <qualifiedname>KWin::EffectWindow::move</qualifiedname>
        <read>isUserMove</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the window is currently being moved by the user. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="200" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a83a05c01aa7381f7b9425407aed859b5" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::resize</definition>
        <argsstring></argsstring>
        <name>resize</name>
        <qualifiedname>KWin::EffectWindow::resize</qualifiedname>
        <read>isUserResize</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the window is currently being resized by the user. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="204" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1aafe869895234ebf31271985ed7eda99d" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QRectF</type>
        <definition>QRectF KWin::EffectWindow::iconGeometry</definition>
        <argsstring></argsstring>
        <name>iconGeometry</name>
        <qualifiedname>KWin::EffectWindow::iconGeometry</qualifiedname>
        <read>iconGeometry</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The optional geometry representing the minimized <ref refid="class_client" kindref="compound">Client</ref> in e.g a taskbar. See _NET_WM_ICON_GEOMETRY at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="209" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a7fe5716ac54e19c915040d41bc0e0c5f" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::specialWindow</definition>
        <argsstring></argsstring>
        <name>specialWindow</name>
        <qualifiedname>KWin::EffectWindow::specialWindow</qualifiedname>
        <read>isSpecialWindow</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is any of special windows types (desktop, dock, splash, ...), i.e. window types that usually don&apos;t have a window frame and the user does not use window management (moving, raising,...) on them. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="215" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a3bccbf4d5390744e013f1dfb8cd88b7c" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QIcon</type>
        <definition>QIcon KWin::EffectWindow::icon</definition>
        <argsstring></argsstring>
        <name>icon</name>
        <qualifiedname>KWin::EffectWindow::icon</qualifiedname>
        <read>icon</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="216" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a59551f7a52bc2598a09457cae7544a41" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::skipSwitcher</definition>
        <argsstring></argsstring>
        <name>skipSwitcher</name>
        <qualifiedname>KWin::EffectWindow::skipSwitcher</qualifiedname>
        <read>isSkipSwitcher</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the window should be excluded from window switching effects. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="220" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a3eebe191bfa9b8c5bbb373e593db12a8" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QRectF</type>
        <definition>QRectF KWin::EffectWindow::contentsRect</definition>
        <argsstring></argsstring>
        <name>contentsRect</name>
        <qualifiedname>KWin::EffectWindow::contentsRect</qualifiedname>
        <read>contentsRect</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Geometry of the actual window contents inside the whole (including decorations) window. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="224" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a7378b90240b39d30d79a119bcd0f5e6e" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::hasDecoration</definition>
        <argsstring></argsstring>
        <name>hasDecoration</name>
        <qualifiedname>KWin::EffectWindow::hasDecoration</qualifiedname>
        <read>hasDecoration</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="225" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a7f8408a59cb0be0ed9b568bca9e66294" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QStringList</type>
        <definition>QStringList KWin::EffectWindow::activities</definition>
        <argsstring></argsstring>
        <name>activities</name>
        <qualifiedname>KWin::EffectWindow::activities</qualifiedname>
        <read>activities</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="226" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a271f7ff723951cdb4c25facc2af3f69b" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::onCurrentActivity</definition>
        <argsstring></argsstring>
        <name>onCurrentActivity</name>
        <qualifiedname>KWin::EffectWindow::onCurrentActivity</qualifiedname>
        <read>isOnCurrentActivity</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="227" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1ab578bcc5faab12c6186b6639874bdb5b" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::onAllActivities</definition>
        <argsstring></argsstring>
        <name>onAllActivities</name>
        <qualifiedname>KWin::EffectWindow::onAllActivities</qualifiedname>
        <read>isOnAllActivities</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="228" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1abaeede1c3d13aca2c9087462726e1267" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::decorationHasAlpha</definition>
        <argsstring></argsstring>
        <name>decorationHasAlpha</name>
        <qualifiedname>KWin::EffectWindow::decorationHasAlpha</qualifiedname>
        <read>decorationHasAlpha</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the decoration currently uses an alpha channel. <simplesect kind="since"><para>4.10 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="233" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1ac851dc62ec769c0e0927667bed751f02" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::visible</definition>
        <argsstring></argsstring>
        <name>visible</name>
        <qualifiedname>KWin::EffectWindow::visible</qualifiedname>
        <read>isVisible</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the window is currently visible to the user, that is: <itemizedlist>
<listitem>
<para>Not minimized </para>
</listitem>
<listitem>
<para>On current desktop </para>
</listitem>
<listitem>
<para>On current activity </para>
</listitem>
</itemizedlist>
<simplesect kind="since"><para>4.11 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="243" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a12a46015a2f18f67615d8a344e1d758c" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::skipsCloseAnimation</definition>
        <argsstring></argsstring>
        <name>skipsCloseAnimation</name>
        <qualifiedname>KWin::EffectWindow::skipsCloseAnimation</qualifiedname>
        <read>skipsCloseAnimation</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the window does not want to be animated on window close. In case this property is <computeroutput>true</computeroutput> it is not useful to start an animation on window close. The window will not be visible, but the animation hooks are executed. <simplesect kind="since"><para>5.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="250" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1ac9c2f7b72598d547e37286f391f0602d" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::fullScreen</definition>
        <argsstring></argsstring>
        <name>fullScreen</name>
        <qualifiedname>KWin::EffectWindow::fullScreen</qualifiedname>
        <read>isFullScreen</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the window is fullscreen. <simplesect kind="since"><para>5.6 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="256" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1ab29a06675f5bca3861366d09db810245" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::unresponsive</definition>
        <argsstring></argsstring>
        <name>unresponsive</name>
        <qualifiedname>KWin::EffectWindow::unresponsive</qualifiedname>
        <read>isUnresponsive</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this client is unresponsive.</para>
<para>When an application failed to react on a ping request in time, it is considered unresponsive. This usually indicates that the application froze or crashed.</para>
<para><simplesect kind="since"><para>5.10 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="266" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1af357e7d5abdcb65806689167a19975bb" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::waylandClient</definition>
        <argsstring></argsstring>
        <name>waylandClient</name>
        <qualifiedname>KWin::EffectWindow::waylandClient</qualifiedname>
        <read>isWaylandClient</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this is a <ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref> client. <simplesect kind="since"><para>5.15 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="272" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1aff40af44afbc9033a2b2d656b1a868d6" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::x11Client</definition>
        <argsstring></argsstring>
        <name>x11Client</name>
        <qualifiedname>KWin::EffectWindow::x11Client</qualifiedname>
        <read>isX11Client</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this is an X11 client. <simplesect kind="since"><para>5.15 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="278" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a1ffc04fc14570a608ccbaaf667b6c4e1" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::popupWindow</definition>
        <argsstring></argsstring>
        <name>popupWindow</name>
        <qualifiedname>KWin::EffectWindow::popupWindow</qualifiedname>
        <read>isPopupWindow</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the window is a popup.</para>
<para>A popup is a window that can be used to implement tooltips, combo box popups, popup menus and other similar user interface concepts.</para>
<para><simplesect kind="since"><para>5.15 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="288" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1adfe027ffe275bd916245c96f052f02a3" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QWindow *</type>
        <definition>QWindow * KWin::EffectWindow::internalWindow</definition>
        <argsstring></argsstring>
        <name>internalWindow</name>
        <qualifiedname>KWin::EffectWindow::internalWindow</qualifiedname>
        <read>internalWindow</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="namespace_k_win" kindref="compound">KWin</ref> internal window. Specific to <ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref> platform.</para>
<para>If the <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> does not reference an internal window, this property is <computeroutput>null</computeroutput>. <simplesect kind="since"><para>5.16 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="296" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="296" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a0eb28f47c675bf114de17778e398caa8" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::outline</definition>
        <argsstring></argsstring>
        <name>outline</name>
        <qualifiedname>KWin::EffectWindow::outline</qualifiedname>
        <read>isOutline</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> represents the outline.</para>
<para>When compositing is turned on, the outline is an actual window.</para>
<para><simplesect kind="since"><para>5.16 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="305" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1a08ba94fa7cdd318c9481e2c66d5461fe" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>pid_t</type>
        <definition>pid_t KWin::EffectWindow::pid</definition>
        <argsstring></argsstring>
        <name>pid</name>
        <qualifiedname>KWin::EffectWindow::pid</qualifiedname>
        <read>pid</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The PID of the application this window belongs to.</para>
<para><simplesect kind="since"><para>5.18 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="312" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1af736439764f6253303ec34f5d9ec85e4" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::lockScreen</definition>
        <argsstring></argsstring>
        <name>lockScreen</name>
        <qualifiedname>KWin::EffectWindow::lockScreen</qualifiedname>
        <read>isLockScreen</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> represents the screenlocker greeter.</para>
<para><simplesect kind="since"><para>5.22 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="319" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1aa3a152eac7d988ca24bdc02675e3a8c5" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::appletPopup</definition>
        <argsstring></argsstring>
        <name>appletPopup</name>
        <qualifiedname>KWin::EffectWindow::appletPopup</qualifiedname>
        <read>isAppletPopup</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the window is an applet popup.</para>
<para>An applet popup is created by an applet to show its fullRepresentation.</para>
<para><simplesect kind="since"><para>6.3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="329" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_effect_window_1aaabc0a11342d1cd5510de18867799dca" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::hiddenByShowDesktop</definition>
        <argsstring></argsstring>
        <name>hiddenByShowDesktop</name>
        <qualifiedname>KWin::EffectWindow::hiddenByShowDesktop</qualifiedname>
        <read>isHiddenByShowDesktop</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> is hidden because the show desktop mode is active. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="334" column="5" bodyfile="kwin/src/effect/effectwindow.h" bodystart="334" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_effect_window_1ad0fab3ee5e5edaa7c455dab2f32cbefb" prot="protected" static="no" mutable="no">
        <type>friend</type>
        <definition>friend KWin::EffectWindow::EffectWindowVisibleRef</definition>
        <argsstring></argsstring>
        <name>EffectWindowVisibleRef</name>
        <qualifiedname>KWin::EffectWindow::EffectWindowVisibleRef</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="834" column="12" bodyfile="kwin/src/effect/effectwindow.h" bodystart="834" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_effect_window_1aa4c00e19d7f24775493097fa40339ded" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_effect_window_1_1_private" kindref="compound">Private</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Private&gt; KWin::EffectWindow::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <qualifiedname>KWin::EffectWindow::d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="840" column="21" bodyfile="kwin/src/effect/effectwindow.h" bodystart="840" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1add8e733bea3a190c7ef173ce956cbb4f" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::EffectWindow::EffectWindow</definition>
        <argsstring>(WindowItem *windowItem)</argsstring>
        <name>EffectWindow</name>
        <qualifiedname>KWin::EffectWindow::EffectWindow</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_window_item" kindref="compound">WindowItem</ref> *</type>
          <declname>windowItem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="349" column="14" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="49" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1af5b5d57608b3a0a0f10b9625fcc9a3ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::EffectWindow::~EffectWindow</definition>
        <argsstring>() override</argsstring>
        <name>~EffectWindow</name>
        <qualifiedname>KWin::EffectWindow::~EffectWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="350" column="5" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a0da6e540a7e9df5971209a71827b4aaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE void</type>
        <definition>void KWin::EffectWindow::addRepaint</definition>
        <argsstring>(const QRect &amp;r)</argsstring>
        <name>addRepaint</name>
        <qualifiedname>KWin::EffectWindow::addRepaint</qualifiedname>
        <param>
          <type>const QRect &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="352" column="23" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="207" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a627065ddceb9a24da8ba085db183cdfa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Q_SCRIPTABLE void</type>
        <definition>void KWin::EffectWindow::addRepaint</definition>
        <argsstring>(int x, int y, int w, int h)</argsstring>
        <name>addRepaint</name>
        <qualifiedname>KWin::EffectWindow::addRepaint</qualifiedname>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="353" column="23" bodyfile="kwin/src/effect/effectwindow.h" bodystart="973" bodyend="976"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a61f5974ca1974aa470cff5f94a90058c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE void</type>
        <definition>void KWin::EffectWindow::addRepaintFull</definition>
        <argsstring>()</argsstring>
        <name>addRepaintFull</name>
        <qualifiedname>KWin::EffectWindow::addRepaintFull</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="354" column="23" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a23927be983c7c31f4d82ede2aa5f021d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE void</type>
        <definition>void KWin::EffectWindow::addLayerRepaint</definition>
        <argsstring>(const QRect &amp;r)</argsstring>
        <name>addLayerRepaint</name>
        <qualifiedname>KWin::EffectWindow::addLayerRepaint</qualifiedname>
        <param>
          <type>const QRect &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="355" column="23" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="217" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a3376625c6628ee28e7073127950bf466" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Q_SCRIPTABLE void</type>
        <definition>void KWin::EffectWindow::addLayerRepaint</definition>
        <argsstring>(int x, int y, int w, int h)</argsstring>
        <name>addLayerRepaint</name>
        <qualifiedname>KWin::EffectWindow::addLayerRepaint</qualifiedname>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="356" column="23" bodyfile="kwin/src/effect/effectwindow.h" bodystart="978" bodyend="981"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a45a22810efc92ca92df970add8ca7907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::refWindow</definition>
        <argsstring>()</argsstring>
        <name>refWindow</name>
        <qualifiedname>KWin::EffectWindow::refWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="358" column="10" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="232" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1afca01a54fcb3e189b2e334939737def0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::unrefWindow</definition>
        <argsstring>()</argsstring>
        <name>unrefWindow</name>
        <qualifiedname>KWin::EffectWindow::unrefWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="359" column="10" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="237" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1afca6adc81dbaabc4fa11d0cd19e43473" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isDeleted</definition>
        <argsstring>() const</argsstring>
        <name>isDeleted</name>
        <qualifiedname>KWin::EffectWindow::isDeleted</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="361" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1ab454ff982c156ceb7f7a258ae34aa233" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isHidden</definition>
        <argsstring>() const</argsstring>
        <name>isHidden</name>
        <qualifiedname>KWin::EffectWindow::isHidden</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="362" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1af4c37c4ec8662d24a2a2d846dc1cec7b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isHiddenByShowDesktop</definition>
        <argsstring>() const</argsstring>
        <name>isHiddenByShowDesktop</name>
        <qualifiedname>KWin::EffectWindow::isHiddenByShowDesktop</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="363" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a266f74122244fed0b148449e70000a0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isMinimized</definition>
        <argsstring>() const</argsstring>
        <name>isMinimized</name>
        <qualifiedname>KWin::EffectWindow::isMinimized</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="365" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a9be7bef00cce83962c0450b2793eb71d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double KWin::EffectWindow::opacity</definition>
        <argsstring>() const</argsstring>
        <name>opacity</name>
        <qualifiedname>KWin::EffectWindow::opacity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="366" column="12"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a458dd4d56e08f5321decf919de50d2e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isOnCurrentActivity</definition>
        <argsstring>() const</argsstring>
        <name>isOnCurrentActivity</name>
        <qualifiedname>KWin::EffectWindow::isOnCurrentActivity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="368" column="10" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1af606cab83f8a5c0c8c8ee12fb548d77f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE bool</type>
        <definition>bool KWin::EffectWindow::isOnActivity</definition>
        <argsstring>(const QString &amp;id) const</argsstring>
        <name>isOnActivity</name>
        <qualifiedname>KWin::EffectWindow::isOnActivity</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="369" column="23" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="144" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a4f7bf5c2674a3b4d83e0994b0243c2e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isOnAllActivities</definition>
        <argsstring>() const</argsstring>
        <name>isOnAllActivities</name>
        <qualifiedname>KWin::EffectWindow::isOnAllActivities</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="370" column="10" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="150" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a64687d9cc4e8f40b17dfb6458e513237" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringList</type>
        <definition>QStringList KWin::EffectWindow::activities</definition>
        <argsstring>() const</argsstring>
        <name>activities</name>
        <qualifiedname>KWin::EffectWindow::activities</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="371" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a637d8d7dc3550c65c154dfb2ceb50bed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE bool</type>
        <definition>bool KWin::EffectWindow::isOnDesktop</definition>
        <argsstring>(KWin::VirtualDesktop *desktop) const</argsstring>
        <name>isOnDesktop</name>
        <qualifiedname>KWin::EffectWindow::isOnDesktop</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">KWin::VirtualDesktop</ref> *</type>
          <declname>desktop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="373" column="23" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="174" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a64addcaf5485d42bc52588803825bc1e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isOnCurrentDesktop</definition>
        <argsstring>() const</argsstring>
        <name>isOnCurrentDesktop</name>
        <qualifiedname>KWin::EffectWindow::isOnCurrentDesktop</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="374" column="10" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a5161af34a008fa16a23b78659ed0fea9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isOnAllDesktops</definition>
        <argsstring>() const</argsstring>
        <name>isOnAllDesktops</name>
        <qualifiedname>KWin::EffectWindow::isOnAllDesktops</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="375" column="10" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="180" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1afbc3a565e6176d5edd68f338841de2e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_virtual_desktop" kindref="compound">KWin::VirtualDesktop</ref> * &gt;</type>
        <definition>QList&lt; KWin::VirtualDesktop * &gt; KWin::EffectWindow::desktops</definition>
        <argsstring>() const</argsstring>
        <name>desktops</name>
        <qualifiedname>KWin::EffectWindow::desktops</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All the desktops by number that the window is in. On X11 this list will always have a length of 1, on <ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref> can be any subset. If the list is empty it means the window is on all desktops </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="381" column="11"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a97bbfac6e836a62207ef6cc604092f3a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>qreal KWin::EffectWindow::x</definition>
        <argsstring>() const</argsstring>
        <name>x</name>
        <qualifiedname>KWin::EffectWindow::x</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="383" column="11"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a9c704223a989c46d49270c9a329d4a7c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>qreal KWin::EffectWindow::y</definition>
        <argsstring>() const</argsstring>
        <name>y</name>
        <qualifiedname>KWin::EffectWindow::y</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="384" column="11"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1acb01d7770d48cee8309a42c585eaf2e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>qreal KWin::EffectWindow::width</definition>
        <argsstring>() const</argsstring>
        <name>width</name>
        <qualifiedname>KWin::EffectWindow::width</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="385" column="11"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a150bf4521f404223e65590c46f693c0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>qreal KWin::EffectWindow::height</definition>
        <argsstring>() const</argsstring>
        <name>height</name>
        <qualifiedname>KWin::EffectWindow::height</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="386" column="11"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1af15d71c8b0c5e553787bcf01b040d216" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::EffectWindow::basicUnit</definition>
        <argsstring>() const</argsstring>
        <name>basicUnit</name>
        <qualifiedname>KWin::EffectWindow::basicUnit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>By how much the window wishes to grow/shrink at least. Usually QSize(1,1). MAY BE DISOBEYED BY THE WM! It&apos;s only for information, do NOT rely on it at all. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="391" column="12" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="341" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1afb22c0e0ccd57d4ab03cf2c2a21d6196" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::EffectWindow::frameGeometry</definition>
        <argsstring>() const</argsstring>
        <name>frameGeometry</name>
        <qualifiedname>KWin::EffectWindow::frameGeometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the geometry of the window excluding server-side and client-side drop-shadows.</para>
<para><simplesect kind="since"><para>5.18 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="398" column="12"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a72d68873c5e685c1660a5350ef6e8aa4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::EffectWindow::bufferGeometry</definition>
        <argsstring>() const</argsstring>
        <name>bufferGeometry</name>
        <qualifiedname>KWin::EffectWindow::bufferGeometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the geometry of the pixmap or buffer attached to this window.</para>
<para>For X11 clients, this method returns server-side geometry of the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>.</para>
<para>For <ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref> clients, this method returns rectangle that the main surface occupies on the screen, in global screen coordinates.</para>
<para><simplesect kind="since"><para>5.18 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="409" column="12"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a102b95292ad9b200cdec6599e2836022" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::EffectWindow::clientGeometry</definition>
        <argsstring>() const</argsstring>
        <name>clientGeometry</name>
        <qualifiedname>KWin::EffectWindow::clientGeometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="410" column="12"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a041b246223a37c104445d75032b6a7d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::EffectWindow::expandedGeometry</definition>
        <argsstring>() const</argsstring>
        <name>expandedGeometry</name>
        <qualifiedname>KWin::EffectWindow::expandedGeometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Geometry of the window including decoration and potentially shadows. May be different from <ref refid="class_k_win_1_1_effect_window_1ab3cdfabc4ad08c4a98a249bde5b39b97" kindref="member">geometry()</ref> if the window has a shadow. <simplesect kind="since"><para>4.9 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="416" column="12"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a0f59244da3252cb83f47d5b1afcd969d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
        <definition>Output * KWin::EffectWindow::screen</definition>
        <argsstring>() const</argsstring>
        <name>screen</name>
        <qualifiedname>KWin::EffectWindow::screen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="417" column="12" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="242" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a61dc7b54e810c5d15f43d3f4a5a54e0e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::EffectWindow::pos</definition>
        <argsstring>() const</argsstring>
        <name>pos</name>
        <qualifiedname>KWin::EffectWindow::pos</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="418" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a1cfb335729144ed2f52ce308d86ae5d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::EffectWindow::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>KWin::EffectWindow::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="419" column="12"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a4c281f63f3ce89b6a7b1478924266ced" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::EffectWindow::rect</definition>
        <argsstring>() const</argsstring>
        <name>rect</name>
        <qualifiedname>KWin::EffectWindow::rect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="420" column="12"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a9986cbee947dc6be4bfff6fd277a9c1e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isMovable</definition>
        <argsstring>() const</argsstring>
        <name>isMovable</name>
        <qualifiedname>KWin::EffectWindow::isMovable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="421" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1aa16444023a6711c04f92d080286baa4c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isMovableAcrossScreens</definition>
        <argsstring>() const</argsstring>
        <name>isMovableAcrossScreens</name>
        <qualifiedname>KWin::EffectWindow::isMovableAcrossScreens</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="422" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1abd15e1e96851916e541bee9466b5e06a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isUserMove</definition>
        <argsstring>() const</argsstring>
        <name>isUserMove</name>
        <qualifiedname>KWin::EffectWindow::isUserMove</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="423" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a2f3aec5c00fe7395e1b68c0bd773ba0c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isUserResize</definition>
        <argsstring>() const</argsstring>
        <name>isUserResize</name>
        <qualifiedname>KWin::EffectWindow::isUserResize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="424" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a5fee2be09ca20db655e19c51e67ee3e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::EffectWindow::iconGeometry</definition>
        <argsstring>() const</argsstring>
        <name>iconGeometry</name>
        <qualifiedname>KWin::EffectWindow::iconGeometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="425" column="12"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a4555b8c484cbddd4f8fefb02ab4aac5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::EffectWindow::contentsRect</definition>
        <argsstring>() const</argsstring>
        <name>contentsRect</name>
        <qualifiedname>KWin::EffectWindow::contentsRect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Geometry of the actual window contents inside the whole (including decorations) window. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="430" column="12" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="331" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1ae2df74962c486e0dd4febf404ab37cad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::hasDecoration</definition>
        <argsstring>() const</argsstring>
        <name>hasDecoration</name>
        <qualifiedname>KWin::EffectWindow::hasDecoration</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="431" column="10" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a66da428118f8f88689a373e89d0787f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::decorationHasAlpha</definition>
        <argsstring>() const</argsstring>
        <name>decorationHasAlpha</name>
        <qualifiedname>KWin::EffectWindow::decorationHasAlpha</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="432" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a3a7b66fb45c9bff713427b4b540d4f1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>KDecoration3::Decoration *</type>
        <definition>KDecoration3::Decoration * KWin::EffectWindow::decoration</definition>
        <argsstring>() const</argsstring>
        <name>decoration</name>
        <qualifiedname>KWin::EffectWindow::decoration</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the decoration <simplesect kind="since"><para>5.25 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="437" column="30" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="351" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a940b73e3ca62682de35ddea05e5c16be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArray</type>
        <definition>QByteArray KWin::EffectWindow::readProperty</definition>
        <argsstring>(long atom, long type, int format) const</argsstring>
        <name>readProperty</name>
        <qualifiedname>KWin::EffectWindow::readProperty</qualifiedname>
        <param>
          <type>long</type>
          <declname>atom</declname>
        </param>
        <param>
          <type>long</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="438" column="16" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="356" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1abc6711adb630d0cbaaaa9bd641b90b7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::deleteProperty</definition>
        <argsstring>(long atom) const</argsstring>
        <name>deleteProperty</name>
        <qualifiedname>KWin::EffectWindow::deleteProperty</qualifiedname>
        <param>
          <type>long</type>
          <declname>atom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="439" column="10" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="383" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1af89b09e4ec52168fcf25d857d02e11f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::EffectWindow::caption</definition>
        <argsstring>() const</argsstring>
        <name>caption</name>
        <qualifiedname>KWin::EffectWindow::caption</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="441" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1ab4239a4b07f0c6ff1b8ec486a85edab7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QIcon</type>
        <definition>QIcon KWin::EffectWindow::icon</definition>
        <argsstring>() const</argsstring>
        <name>icon</name>
        <qualifiedname>KWin::EffectWindow::icon</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="442" column="11"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a775214eefe29f4a1202c509e51bdc67b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::EffectWindow::windowClass</definition>
        <argsstring>() const</argsstring>
        <name>windowClass</name>
        <qualifiedname>KWin::EffectWindow::windowClass</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="443" column="13" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="326" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a17aad578d28e812f1f79aaeb169850d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::EffectWindow::windowRole</definition>
        <argsstring>() const</argsstring>
        <name>windowRole</name>
        <qualifiedname>KWin::EffectWindow::windowRole</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="444" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a155ef87379562c98f8033b2ec1e5a1bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_k_win_1_1_effect_window_group" kindref="compound">EffectWindowGroup</ref> *</type>
        <definition>const EffectWindowGroup * KWin::EffectWindow::group</definition>
        <argsstring>() const</argsstring>
        <name>group</name>
        <qualifiedname>KWin::EffectWindow::group</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="445" column="29" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="222" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1ab769b63e24539194636456d8af938265" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isDesktop</definition>
        <argsstring>() const</argsstring>
        <name>isDesktop</name>
        <qualifiedname>KWin::EffectWindow::isDesktop</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a desktop background window (the one with wallpaper). See _NET_WM_WINDOW_TYPE_DESKTOP at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="451" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a65107c8dbeeaf3a9ce84eef50ad03db5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isDock</definition>
        <argsstring>() const</argsstring>
        <name>isDock</name>
        <qualifiedname>KWin::EffectWindow::isDock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a dock (i.e. a panel). See _NET_WM_WINDOW_TYPE_DOCK at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="456" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a65fec3526e0de0ce4a67fe9c4f2e7448" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isToolbar</definition>
        <argsstring>() const</argsstring>
        <name>isToolbar</name>
        <qualifiedname>KWin::EffectWindow::isToolbar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a standalone (detached) toolbar window. See _NET_WM_WINDOW_TYPE_TOOLBAR at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="461" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1aa764f88576926ce19894feb68a67e3fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isMenu</definition>
        <argsstring>() const</argsstring>
        <name>isMenu</name>
        <qualifiedname>KWin::EffectWindow::isMenu</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a torn-off menu. See _NET_WM_WINDOW_TYPE_MENU at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="466" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a456bf2a8864e847c87aa8e5736757db5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isNormalWindow</definition>
        <argsstring>() const</argsstring>
        <name>isNormalWindow</name>
        <qualifiedname>KWin::EffectWindow::isNormalWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a &quot;normal&quot; window, i.e. an application or any other window for which none of the specialized window types fit. See _NET_WM_WINDOW_TYPE_NORMAL at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="472" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a57e275d5e167ae96fd46f16703a69a67" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isSpecialWindow</definition>
        <argsstring>() const</argsstring>
        <name>isSpecialWindow</name>
        <qualifiedname>KWin::EffectWindow::isSpecialWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is any of special windows types (desktop, dock, splash, ...), i.e. window types that usually don&apos;t have a window frame and the user does not use window management (moving, raising,...) on them. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="478" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a8031598d19bde91f2e88e4db7d0f1c6f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isDialog</definition>
        <argsstring>() const</argsstring>
        <name>isDialog</name>
        <qualifiedname>KWin::EffectWindow::isDialog</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a dialog window. See _NET_WM_WINDOW_TYPE_DIALOG at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="483" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1aa80e56c4d37af18fe83a38a5a8acd4fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isSplash</definition>
        <argsstring>() const</argsstring>
        <name>isSplash</name>
        <qualifiedname>KWin::EffectWindow::isSplash</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a splashscreen. Note that many (especially older) applications do not support marking their splash windows with this type. See _NET_WM_WINDOW_TYPE_SPLASH at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="489" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a19bb9883664ce093ea3d460de5eb05a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isUtility</definition>
        <argsstring>() const</argsstring>
        <name>isUtility</name>
        <qualifiedname>KWin::EffectWindow::isUtility</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a utility window, such as a tool window. See _NET_WM_WINDOW_TYPE_UTILITY at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="494" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a3225f8f425c210c2643d62f6682b21f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isDropdownMenu</definition>
        <argsstring>() const</argsstring>
        <name>isDropdownMenu</name>
        <qualifiedname>KWin::EffectWindow::isDropdownMenu</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a dropdown menu (i.e. a popup directly or indirectly open from the applications menubar). See _NET_WM_WINDOW_TYPE_DROPDOWN_MENU at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="500" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a79bc1933d5f3b52b1e5ce0f04e316a8e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isPopupMenu</definition>
        <argsstring>() const</argsstring>
        <name>isPopupMenu</name>
        <qualifiedname>KWin::EffectWindow::isPopupMenu</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a popup menu (that is not a torn-off or dropdown menu). See _NET_WM_WINDOW_TYPE_POPUP_MENU at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="505" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1aa35362dc2c77b09d945e150160d8628a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isTooltip</definition>
        <argsstring>() const</argsstring>
        <name>isTooltip</name>
        <qualifiedname>KWin::EffectWindow::isTooltip</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a tooltip. See _NET_WM_WINDOW_TYPE_TOOLTIP at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="510" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a950a2d336e2b66136b652626bf721647" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isNotification</definition>
        <argsstring>() const</argsstring>
        <name>isNotification</name>
        <qualifiedname>KWin::EffectWindow::isNotification</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a window with a notification. See _NET_WM_WINDOW_TYPE_NOTIFICATION at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="515" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1aeb1138fd440dbc5703d43c82fbbf9078" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isCriticalNotification</definition>
        <argsstring>() const</argsstring>
        <name>isCriticalNotification</name>
        <qualifiedname>KWin::EffectWindow::isCriticalNotification</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a window with a critical notification. using the non-standard _KDE_NET_WM_WINDOW_TYPE_CRITICAL_NOTIFICATION </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="520" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a3e6a3074f878b15813d2670be4f4d02a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isAppletPopup</definition>
        <argsstring>() const</argsstring>
        <name>isAppletPopup</name>
        <qualifiedname>KWin::EffectWindow::isAppletPopup</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a window used for applet popups. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="524" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a150daba17925799070c8a8b44c373f11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isOnScreenDisplay</definition>
        <argsstring>() const</argsstring>
        <name>isOnScreenDisplay</name>
        <qualifiedname>KWin::EffectWindow::isOnScreenDisplay</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is an on screen display window using the non-standard _KDE_NET_WM_WINDOW_TYPE_ON_SCREEN_DISPLAY </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="529" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1aaa84cf791cc3c8fee0223b44efaf37a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isComboBox</definition>
        <argsstring>() const</argsstring>
        <name>isComboBox</name>
        <qualifiedname>KWin::EffectWindow::isComboBox</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a combobox popup. See _NET_WM_WINDOW_TYPE_COMBO at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="534" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a7f8ce735ac0d3ffa4bec40afa39dbfca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isDNDIcon</definition>
        <argsstring>() const</argsstring>
        <name>isDNDIcon</name>
        <qualifiedname>KWin::EffectWindow::isDNDIcon</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is a Drag&amp;Drop icon. See _NET_WM_WINDOW_TYPE_DND at <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="539" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a7b8e479919145e7acc601ac208b5fdb3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7" kindref="member">WindowType</ref></type>
        <definition>WindowType KWin::EffectWindow::windowType</definition>
        <argsstring>() const</argsstring>
        <name>windowType</name>
        <qualifiedname>KWin::EffectWindow::windowType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the NETWM window type See <ulink url="https://standards.freedesktop.org/wm-spec/wm-spec-latest.html">https://standards.freedesktop.org/wm-spec/wm-spec-latest.html</ulink> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="544" column="16" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="336" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a9bd8dcf6faa3d8e05e878a50c6cd764d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::EffectWindow::windowTypeInt</definition>
        <argsstring>() const</argsstring>
        <name>windowTypeInt</name>
        <qualifiedname>KWin::EffectWindow::windowTypeInt</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="545" column="9" bodyfile="kwin/src/effect/effectwindow.h" bodystart="545" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a04c4b1784a8b6a652fe23f9d2849a4fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isManaged</definition>
        <argsstring>() const</argsstring>
        <name>isManaged</name>
        <qualifiedname>KWin::EffectWindow::isManaged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is managed by <ref refid="namespace_k_win" kindref="compound">KWin</ref> (it has control over its placement and other aspects, as opposed to override-redirect windows that are entirely handled by the application). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="553" column="10" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="485" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a1fcc076f3f099870642a379a17d60c68" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::acceptsFocus</definition>
        <argsstring>() const</argsstring>
        <name>acceptsFocus</name>
        <qualifiedname>KWin::EffectWindow::acceptsFocus</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether or not the window can accept keyboard focus. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="557" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a6eb3fd47382ec2d03748d6c3a4aecc5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::keepAbove</definition>
        <argsstring>() const</argsstring>
        <name>keepAbove</name>
        <qualifiedname>KWin::EffectWindow::keepAbove</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether or not the window is kept above all other windows. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="561" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1ac842c3994f9254ce333bb12e14f5357f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::keepBelow</definition>
        <argsstring>() const</argsstring>
        <name>keepBelow</name>
        <qualifiedname>KWin::EffectWindow::keepBelow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is kept below all other windows. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="565" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1afc6dc49561b0389b487c4374a3251631" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isModal</definition>
        <argsstring>() const</argsstring>
        <name>isModal</name>
        <qualifiedname>KWin::EffectWindow::isModal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="567" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1ad08f7af34987c5e5be374d92a2847838" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE <ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
        <definition>EffectWindow * KWin::EffectWindow::findModal</definition>
        <argsstring>()</argsstring>
        <name>findModal</name>
        <qualifiedname>KWin::EffectWindow::findModal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="568" column="37" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="397" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a23dab79a743a837b851ece97bad78bb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE <ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
        <definition>EffectWindow * KWin::EffectWindow::transientFor</definition>
        <argsstring>()</argsstring>
        <name>transientFor</name>
        <qualifiedname>KWin::EffectWindow::transientFor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="569" column="37" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="407" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a8a4eac143f7a7bfb73255bbe5ca73c77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE QList&lt; <ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> * &gt;</type>
        <definition>QList&lt; EffectWindow * &gt; KWin::EffectWindow::mainWindows</definition>
        <argsstring>() const</argsstring>
        <name>mainWindows</name>
        <qualifiedname>KWin::EffectWindow::mainWindows</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="570" column="24" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="439" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a018a5808c1f51a409f51857a0bb973bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isSkipSwitcher</definition>
        <argsstring>() const</argsstring>
        <name>isSkipSwitcher</name>
        <qualifiedname>KWin::EffectWindow::isSkipSwitcher</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window should be excluded from window switching effects. <simplesect kind="since"><para>4.5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="576" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a9b1640971a557e16de5a12087db10b7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::setMinimized</definition>
        <argsstring>(bool minimize)</argsstring>
        <name>setMinimized</name>
        <qualifiedname>KWin::EffectWindow::setMinimized</qualifiedname>
        <param>
          <type>bool</type>
          <declname>minimize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="578" column="10" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="155" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a057a0f849ec32ab02f115369750dc383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::minimize</definition>
        <argsstring>()</argsstring>
        <name>minimize</name>
        <qualifiedname>KWin::EffectWindow::minimize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="579" column="10" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="464" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1aa06b7a8942dc71e40cea31f957bf3cd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::unminimize</definition>
        <argsstring>()</argsstring>
        <name>unminimize</name>
        <qualifiedname>KWin::EffectWindow::unminimize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="580" column="10" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="471" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a87827f5e370444e1bbedcdfe5b6c6d97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE void</type>
        <definition>void KWin::EffectWindow::closeWindow</definition>
        <argsstring>()</argsstring>
        <name>closeWindow</name>
        <qualifiedname>KWin::EffectWindow::closeWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="581" column="23" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="478" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a47a294f9788dadb6c4dac8c884fc8fff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isVisible</definition>
        <argsstring>() const</argsstring>
        <name>isVisible</name>
        <qualifiedname>KWin::EffectWindow::isVisible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>4.11 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="586" column="10" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="190" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1abeaf8369bf6217d6d3908bd8cd542910" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::skipsCloseAnimation</definition>
        <argsstring>() const</argsstring>
        <name>skipsCloseAnimation</name>
        <qualifiedname>KWin::EffectWindow::skipsCloseAnimation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>5.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="591" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1aadf0f08125cf4c9bf109eed76715ae07" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
        <definition>SurfaceInterface * KWin::EffectWindow::surface</definition>
        <argsstring>() const</argsstring>
        <name>surface</name>
        <qualifiedname>KWin::EffectWindow::surface</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>5.5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="596" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a79a941c946fea029ec74736e1049ff57" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isFullScreen</definition>
        <argsstring>() const</argsstring>
        <name>isFullScreen</name>
        <qualifiedname>KWin::EffectWindow::isFullScreen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>5.6 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="601" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a52d3638155ceb2260d360f87faeb4847" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isUnresponsive</definition>
        <argsstring>() const</argsstring>
        <name>isUnresponsive</name>
        <qualifiedname>KWin::EffectWindow::isUnresponsive</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>5.10 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="606" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a2b31052189a2fcdc40da845511a9c6e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isWaylandClient</definition>
        <argsstring>() const</argsstring>
        <name>isWaylandClient</name>
        <qualifiedname>KWin::EffectWindow::isWaylandClient</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>5.15 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="611" column="10" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="490" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a0116dabaadf796296a795db9caded8d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isX11Client</definition>
        <argsstring>() const</argsstring>
        <name>isX11Client</name>
        <qualifiedname>KWin::EffectWindow::isX11Client</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>5.15 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="616" column="10" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="495" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1ab054619699bf6e3d9adb374aff1dea97" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isPopupWindow</definition>
        <argsstring>() const</argsstring>
        <name>isPopupWindow</name>
        <qualifiedname>KWin::EffectWindow::isPopupWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>5.15 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="621" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a728c7f5994c12d725d8bc487bb167c55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QWindow *</type>
        <definition>QWindow * KWin::EffectWindow::internalWindow</definition>
        <argsstring>() const</argsstring>
        <name>internalWindow</name>
        <qualifiedname>KWin::EffectWindow::internalWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>5.16 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="626" column="13" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="417" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a29f260a54aaf429ca0b5e3e21646a170" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isOutline</definition>
        <argsstring>() const</argsstring>
        <name>isOutline</name>
        <qualifiedname>KWin::EffectWindow::isOutline</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>5.16 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="631" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1aef0897580e3415cf53864c4c60d25898" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isLockScreen</definition>
        <argsstring>() const</argsstring>
        <name>isLockScreen</name>
        <qualifiedname>KWin::EffectWindow::isLockScreen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>5.22 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="636" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a5aa4fbe8bf5442da3d457f0cdec53577" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>pid_t</type>
        <definition>pid_t KWin::EffectWindow::pid</definition>
        <argsstring>() const</argsstring>
        <name>pid</name>
        <qualifiedname>KWin::EffectWindow::pid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>5.18 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="641" column="11"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1aaed1cb8c8bb16b31b1f32fb930107fc9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>qlonglong</type>
        <definition>qlonglong KWin::EffectWindow::windowId</definition>
        <argsstring>() const</argsstring>
        <name>windowId</name>
        <qualifiedname>KWin::EffectWindow::windowId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>5.21 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="646" column="15" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="316" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a631d09d03d4be662273611d25ac3e743" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QUuid</type>
        <definition>QUuid KWin::EffectWindow::internalId</definition>
        <argsstring>() const</argsstring>
        <name>internalId</name>
        <qualifiedname>KWin::EffectWindow::internalId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the internal id of the window that uniquely identifies it. The main difference between <ref refid="class_k_win_1_1_effect_window_1a631d09d03d4be662273611d25ac3e743" kindref="member">internalId()</ref> and <ref refid="class_k_win_1_1_effect_window_1aaed1cb8c8bb16b31b1f32fb930107fc9" kindref="member">windowId()</ref> is that the latter one works as expected only on X11, while the former is unique regardless of the window system.</para>
<para>Note that the internaId() has special meaning only to kwin. <simplesect kind="since"><para>5.24 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="655" column="11"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1aa6324ac18fddbe54080c1a35f839fc27" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::EffectWindow::isInputMethod</definition>
        <argsstring>() const</argsstring>
        <name>isInputMethod</name>
        <qualifiedname>KWin::EffectWindow::isInputMethod</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>6.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="660" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a69d83e8d2e0e9c5630c054ce31210ce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE void</type>
        <definition>void KWin::EffectWindow::setData</definition>
        <argsstring>(int role, const QVariant &amp;data)</argsstring>
        <name>setData</name>
        <qualifiedname>KWin::EffectWindow::setData</qualifiedname>
        <param>
          <type>int</type>
          <declname>role</declname>
        </param>
        <param>
          <type>const QVariant &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Can be used to by effects to store arbitrary data in the <ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref>.</para>
<para>Invoking this method will emit the signal <ref refid="class_k_win_1_1_effects_handler_1af69a4db9f51dc3d75f03d108009dc07e" kindref="member">EffectsHandler::windowDataChanged</ref>. <simplesect kind="see"><para><ref refid="class_k_win_1_1_effects_handler_1af69a4db9f51dc3d75f03d108009dc07e" kindref="member">EffectsHandler::windowDataChanged</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="668" column="23" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="444" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a6a82d876206aec3c767d8ea8ca1dc1fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SCRIPTABLE QVariant</type>
        <definition>QVariant KWin::EffectWindow::data</definition>
        <argsstring>(int role) const</argsstring>
        <name>data</name>
        <qualifiedname>KWin::EffectWindow::data</qualifiedname>
        <param>
          <type>int</type>
          <declname>role</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="669" column="27" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="454" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a624548a53ed00a646e7b89cb898a74a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
        <definition>Window * KWin::EffectWindow::window</definition>
        <argsstring>() const</argsstring>
        <name>window</name>
        <qualifiedname>KWin::EffectWindow::window</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="671" column="12" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a4ea826c4e0ce5b195e428ec9766bc2f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_window_item" kindref="compound">WindowItem</ref> *</type>
        <definition>WindowItem * KWin::EffectWindow::windowItem</definition>
        <argsstring>() const</argsstring>
        <name>windowItem</name>
        <qualifiedname>KWin::EffectWindow::windowItem</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="672" column="16" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a05c9dec69a15d52e0adf66352d94dd46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::elevate</definition>
        <argsstring>(bool elevate)</argsstring>
        <name>elevate</name>
        <qualifiedname>KWin::EffectWindow::elevate</qualifiedname>
        <param>
          <type>bool</type>
          <declname>elevate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="673" column="10" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="459" bodyend="462"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="signal">
      <memberdef kind="signal" id="class_k_win_1_1_effect_window_1a088f3fc1e6fca8bfb18a4fccdcaa3136" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::windowStartUserMovedResized</definition>
        <argsstring>(KWin::EffectWindow *w)</argsstring>
        <name>windowStartUserMovedResized</name>
        <qualifiedname>KWin::EffectWindow::windowStartUserMovedResized</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted when a user begins a window move or resize operation. To figure out whether the user resizes or moves the window use isUserMove or isUserResize. Whenever the geometry is updated the signal <ref refid="class_k_win_1_1_effect_window_1a53583b6a092848b7f139bac1e9633883" kindref="member">windowStepUserMovedResized</ref> is emitted with the current geometry. The move/resize operation ends with the signal <ref refid="class_k_win_1_1_effect_window_1aef6351fb5e97fd6b4c8d9c0f4d322c90" kindref="member">windowFinishUserMovedResized</ref>. Only one window can be moved/resized by the user at the same time! <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The window which is being moved/resized </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_window_1a53583b6a092848b7f139bac1e9633883" kindref="member">windowStepUserMovedResized</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_window_1aef6351fb5e97fd6b4c8d9c0f4d322c90" kindref="member">windowFinishUserMovedResized</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_window_1abd15e1e96851916e541bee9466b5e06a" kindref="member">EffectWindow::isUserMove</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_window_1a2f3aec5c00fe7395e1b68c0bd773ba0c" kindref="member">EffectWindow::isUserResize</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="690" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effect_window_1a53583b6a092848b7f139bac1e9633883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::windowStepUserMovedResized</definition>
        <argsstring>(KWin::EffectWindow *w, const QRectF &amp;geometry)</argsstring>
        <name>windowStepUserMovedResized</name>
        <qualifiedname>KWin::EffectWindow::windowStepUserMovedResized</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted during a move/resize operation when the user changed the geometry. Please note: <ref refid="namespace_k_win" kindref="compound">KWin</ref> supports two operation modes. In one mode all changes are applied instantly. This means the window&apos;s geometry matches the passed in <computeroutput>geometry</computeroutput>. In the other mode the geometry is changed after the user ended the move/resize mode. The <computeroutput>geometry</computeroutput> differs from the window&apos;s geometry. Also the window&apos;s pixmap still has the same size as before. Depending what the effect wants to do it would be recommended to scale/translate the window. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The window which is being moved/resized </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>geometry</parametername>
</parameternamelist>
<parameterdescription>
<para>The geometry of the window in the current move/resize step. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_window_1a088f3fc1e6fca8bfb18a4fccdcaa3136" kindref="member">windowStartUserMovedResized</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_window_1aef6351fb5e97fd6b4c8d9c0f4d322c90" kindref="member">windowFinishUserMovedResized</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_window_1abd15e1e96851916e541bee9466b5e06a" kindref="member">EffectWindow::isUserMove</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_window_1a2f3aec5c00fe7395e1b68c0bd773ba0c" kindref="member">EffectWindow::isUserResize</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="706" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effect_window_1aef6351fb5e97fd6b4c8d9c0f4d322c90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::windowFinishUserMovedResized</definition>
        <argsstring>(KWin::EffectWindow *w)</argsstring>
        <name>windowFinishUserMovedResized</name>
        <qualifiedname>KWin::EffectWindow::windowFinishUserMovedResized</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted when the user finishes move/resize of window <computeroutput>w</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The window which has been moved/resized </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_window_1a088f3fc1e6fca8bfb18a4fccdcaa3136" kindref="member">windowStartUserMovedResized</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_effect_window_1aef6351fb5e97fd6b4c8d9c0f4d322c90" kindref="member">windowFinishUserMovedResized</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="713" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effect_window_1af4926d78bab0b3dd17dad390abcf113e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::windowMaximizedStateChanged</definition>
        <argsstring>(KWin::EffectWindow *w, bool horizontal, bool vertical)</argsstring>
        <name>windowMaximizedStateChanged</name>
        <qualifiedname>KWin::EffectWindow::windowMaximizedStateChanged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>horizontal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>vertical</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted when the maximized state of the window <computeroutput>w</computeroutput> changed. A window can be in one of four states: <itemizedlist>
<listitem><para>restored: both <computeroutput>horizontal</computeroutput> and <computeroutput>vertical</computeroutput> are <computeroutput>false</computeroutput> </para>
</listitem>
<listitem><para>horizontally maximized: <computeroutput>horizontal</computeroutput> is <computeroutput>true</computeroutput> and <computeroutput>vertical</computeroutput> is <computeroutput>false</computeroutput> </para>
</listitem>
<listitem><para>vertically maximized: <computeroutput>horizontal</computeroutput> is <computeroutput>false</computeroutput> and <computeroutput>vertical</computeroutput> is <computeroutput>true</computeroutput> </para>
</listitem>
<listitem><para>completely maximized: both <computeroutput>horizontal</computeroutput> and <computeroutput>vertical</computeroutput> are <computeroutput>true</computeroutput> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose maximized state changed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>horizontal</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput> maximized horizontally </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertical</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput> maximized vertically </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="726" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effect_window_1aafd68357522318d49453a52a2f42aa3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::windowMaximizedStateAboutToChange</definition>
        <argsstring>(KWin::EffectWindow *w, bool horizontal, bool vertical)</argsstring>
        <name>windowMaximizedStateAboutToChange</name>
        <qualifiedname>KWin::EffectWindow::windowMaximizedStateAboutToChange</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>horizontal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>vertical</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted when the maximized state of the window <computeroutput>w</computeroutput> is about to change, but before windowMaximizedStateChanged is emitted or any geometry change. Useful for <ref refid="class_k_win_1_1_offscreen_effect" kindref="compound">OffscreenEffect</ref> to grab a window image before any actual change happens</para>
<para>A window can be in one of four states: <itemizedlist>
<listitem><para>restored: both <computeroutput>horizontal</computeroutput> and <computeroutput>vertical</computeroutput> are <computeroutput>false</computeroutput> </para>
</listitem>
<listitem><para>horizontally maximized: <computeroutput>horizontal</computeroutput> is <computeroutput>true</computeroutput> and <computeroutput>vertical</computeroutput> is <computeroutput>false</computeroutput> </para>
</listitem>
<listitem><para>vertically maximized: <computeroutput>horizontal</computeroutput> is <computeroutput>false</computeroutput> and <computeroutput>vertical</computeroutput> is <computeroutput>true</computeroutput> </para>
</listitem>
<listitem><para>completely maximized: both <computeroutput>horizontal</computeroutput> and <computeroutput>vertical</computeroutput> are <computeroutput>true</computeroutput> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose maximized state changed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>horizontal</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput> maximized horizontally </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertical</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput> maximized vertically </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="742" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effect_window_1a64f57a9239d2520a670f2c20a5de8d5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::windowFrameGeometryChanged</definition>
        <argsstring>(KWin::EffectWindow *window, const QRectF &amp;oldGeometry)</argsstring>
        <name>windowFrameGeometryChanged</name>
        <qualifiedname>KWin::EffectWindow::windowFrameGeometryChanged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>oldGeometry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the frame geometry of a window changed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose geometry changed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldGeometry</parametername>
</parameternamelist>
<parameterdescription>
<para>The previous geometry </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="749" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effect_window_1af6e4034faca74eef5bf0b371bcafa5dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::windowFrameGeometryAboutToChange</definition>
        <argsstring>(KWin::EffectWindow *window)</argsstring>
        <name>windowFrameGeometryAboutToChange</name>
        <qualifiedname>KWin::EffectWindow::windowFrameGeometryAboutToChange</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the frame geometry is about to change, the new one is not known yet. Useful for <ref refid="class_k_win_1_1_offscreen_effect" kindref="compound">OffscreenEffect</ref> to grab a window image before any actual change happens.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose geometry is about to change </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="757" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effect_window_1ac020c4b9381f08721f98702a8ff189ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::windowOpacityChanged</definition>
        <argsstring>(KWin::EffectWindow *w, qreal oldOpacity, qreal newOpacity)</argsstring>
        <name>windowOpacityChanged</name>
        <qualifiedname>KWin::EffectWindow::windowOpacityChanged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>oldOpacity</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>newOpacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted when the windows opacity is changed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose opacity level is changed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldOpacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The previous opacity level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newOpacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The new opacity level </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="765" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effect_window_1a2ba429bb50e0c043e7eb9623609c51d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::minimizedChanged</definition>
        <argsstring>(KWin::EffectWindow *w)</argsstring>
        <name>minimizedChanged</name>
        <qualifiedname>KWin::EffectWindow::minimizedChanged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted when a window is minimized or unminimized. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose minimized state has changed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="770" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effect_window_1a908a07e57b1694fb3e1aa3c45b09847c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::windowModalityChanged</definition>
        <argsstring>(KWin::EffectWindow *w)</argsstring>
        <name>windowModalityChanged</name>
        <qualifiedname>KWin::EffectWindow::windowModalityChanged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted when a window either becomes modal (ie. blocking for its main client) or looses that state. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The window which was unminimized </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="775" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effect_window_1ac5a4312761c28a33a91a65993b5fd8e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::windowUnresponsiveChanged</definition>
        <argsstring>(KWin::EffectWindow *w, bool unresponsive)</argsstring>
        <name>windowUnresponsiveChanged</name>
        <qualifiedname>KWin::EffectWindow::windowUnresponsiveChanged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>unresponsive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted when a window either became unresponsive (eg. app froze or crashed) or respoonsive <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The window that became (un)responsive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unresponsive</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the window is responsive or unresponsive </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="782" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effect_window_1a14d82213bbcf4280fc5a1061858370ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::windowDamaged</definition>
        <argsstring>(KWin::EffectWindow *w)</argsstring>
        <name>windowDamaged</name>
        <qualifiedname>KWin::EffectWindow::windowDamaged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal emitted when an area of a window is scheduled for repainting. Use this signal in an effect if another area needs to be synced as well. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The window which is scheduled for repainting </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="788" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effect_window_1a2b29e1a886f52e50daa10d435b61c941" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::windowKeepAboveChanged</definition>
        <argsstring>(KWin::EffectWindow *w)</argsstring>
        <name>windowKeepAboveChanged</name>
        <qualifiedname>KWin::EffectWindow::windowKeepAboveChanged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the keep above state of <computeroutput>w</computeroutput> was changed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose the keep above state was changed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="795" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effect_window_1a3634c52d613d290e3ef7bad4282a14a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::windowKeepBelowChanged</definition>
        <argsstring>(KWin::EffectWindow *w)</argsstring>
        <name>windowKeepBelowChanged</name>
        <qualifiedname>KWin::EffectWindow::windowKeepBelowChanged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the keep below state of <computeroutput>was</computeroutput> changed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose the keep below state was changed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="802" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effect_window_1ad96c1a300f44ffe8bc7439aa7870cab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::windowFullScreenChanged</definition>
        <argsstring>(KWin::EffectWindow *w)</argsstring>
        <name>windowFullScreenChanged</name>
        <qualifiedname>KWin::EffectWindow::windowFullScreenChanged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the full screen state of <computeroutput>w</computeroutput> was changed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose the full screen state was changed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="809" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effect_window_1a5bf61f1ee3489772bb5fb7464bef406f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::windowDecorationChanged</definition>
        <argsstring>(KWin::EffectWindow *window)</argsstring>
        <name>windowDecorationChanged</name>
        <qualifiedname>KWin::EffectWindow::windowDecorationChanged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when decoration of <computeroutput>was</computeroutput> changed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The window for which decoration changed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="816" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effect_window_1a2b13069077a5aee888368a5811457349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::windowExpandedGeometryChanged</definition>
        <argsstring>(KWin::EffectWindow *window)</argsstring>
        <name>windowExpandedGeometryChanged</name>
        <qualifiedname>KWin::EffectWindow::windowExpandedGeometryChanged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the visible geometry of a window changed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="821" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effect_window_1a28e8bf5badcbb747451e3194f81b5665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::windowDesktopsChanged</definition>
        <argsstring>(KWin::EffectWindow *window)</argsstring>
        <name>windowDesktopsChanged</name>
        <qualifiedname>KWin::EffectWindow::windowDesktopsChanged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when a window enters or leaves a virtual desktop. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="826" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_effect_window_1a468749c54f92e8f89b325b642772dc4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::windowHiddenChanged</definition>
        <argsstring>(KWin::EffectWindow *window)</argsstring>
        <name>windowHiddenChanged</name>
        <qualifiedname>KWin::EffectWindow::windowHiddenChanged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">KWin::EffectWindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when a window is hidden or shown. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="831" column="10"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a9441d465ddee9761ee5ab3f49aebefae" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::refVisible</definition>
        <argsstring>(const EffectWindowVisibleRef *holder)</argsstring>
        <name>refVisible</name>
        <qualifiedname>KWin::EffectWindow::refVisible</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_effect_window_visible_ref" kindref="compound">EffectWindowVisibleRef</ref> *</type>
          <declname>holder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="835" column="10" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="197" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_effect_window_1a57da21810f5641da339c97d0b647b2b3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::EffectWindow::unrefVisible</definition>
        <argsstring>(const EffectWindowVisibleRef *holder)</argsstring>
        <name>unrefVisible</name>
        <qualifiedname>KWin::EffectWindow::unrefVisible</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_effect_window_visible_ref" kindref="compound">EffectWindowVisibleRef</ref> *</type>
          <declname>holder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/effect/effectwindow.h" line="836" column="10" bodyfile="kwin/src/effect/effectwindow.cpp" bodystart="202" bodyend="205"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Representation of a window used by/for <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> classes. </para>
    </briefdescription>
    <detaileddescription>
<para>The purpose is to hide internal data and also to serve as a single representation for the case when Client/Unmanaged becomes Deleted. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>KWin::EffectWindow</label>
        <link refid="class_k_win_1_1_effect_window"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>KWin::EffectWindow</label>
        <link refid="class_k_win_1_1_effect_window"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/effect/effectwindow.h" line="45" column="1" bodyfile="kwin/src/effect/effectwindow.h" bodystart="46" bodyend="841"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_effect_window_1a1fcc076f3f099870642a379a17d60c68" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>acceptsFocus</name></member>
      <member refid="class_k_win_1_1_effect_window_1a7f8408a59cb0be0ed9b568bca9e66294" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>activities</name></member>
      <member refid="class_k_win_1_1_effect_window_1a64687d9cc4e8f40b17dfb6458e513237" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>activities</name></member>
      <member refid="class_k_win_1_1_effect_window_1a23927be983c7c31f4d82ede2aa5f021d" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>addLayerRepaint</name></member>
      <member refid="class_k_win_1_1_effect_window_1a3376625c6628ee28e7073127950bf466" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>addLayerRepaint</name></member>
      <member refid="class_k_win_1_1_effect_window_1a0da6e540a7e9df5971209a71827b4aaa" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>addRepaint</name></member>
      <member refid="class_k_win_1_1_effect_window_1a627065ddceb9a24da8ba085db183cdfa" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>addRepaint</name></member>
      <member refid="class_k_win_1_1_effect_window_1a61f5974ca1974aa470cff5f94a90058c" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>addRepaintFull</name></member>
      <member refid="class_k_win_1_1_effect_window_1aa3a152eac7d988ca24bdc02675e3a8c5" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>appletPopup</name></member>
      <member refid="class_k_win_1_1_effect_window_1a1ffcdee93dcd3009680c17817a88af59" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>basicUnit</name></member>
      <member refid="class_k_win_1_1_effect_window_1af15d71c8b0c5e553787bcf01b040d216" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>basicUnit</name></member>
      <member refid="class_k_win_1_1_effect_window_1a72d68873c5e685c1660a5350ef6e8aa4" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>bufferGeometry</name></member>
      <member refid="class_k_win_1_1_effect_window_1adc8f774efe4457f953cb1675082e41ed" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>caption</name></member>
      <member refid="class_k_win_1_1_effect_window_1af89b09e4ec52168fcf25d857d02e11f4" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>caption</name></member>
      <member refid="class_k_win_1_1_effect_window_1a102b95292ad9b200cdec6599e2836022" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>clientGeometry</name></member>
      <member refid="class_k_win_1_1_effect_window_1a87827f5e370444e1bbedcdfe5b6c6d97" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>closeWindow</name></member>
      <member refid="class_k_win_1_1_effect_window_1aefdd2bd64bc8aa3d1f59ea7a6d55646a" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>comboBox</name></member>
      <member refid="class_k_win_1_1_effect_window_1a3eebe191bfa9b8c5bbb373e593db12a8" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>contentsRect</name></member>
      <member refid="class_k_win_1_1_effect_window_1a4555b8c484cbddd4f8fefb02ab4aac5b" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>contentsRect</name></member>
      <member refid="class_k_win_1_1_effect_window_1af2971301a2d3664ec2061d6a58d6731b" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>criticalNotification</name></member>
      <member refid="class_k_win_1_1_effect_window_1aa4c00e19d7f24775493097fa40339ded" prot="private" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>d</name></member>
      <member refid="class_k_win_1_1_effect_window_1a6a82d876206aec3c767d8ea8ca1dc1fe" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>data</name></member>
      <member refid="class_k_win_1_1_effect_window_1a3a7b66fb45c9bff713427b4b540d4f1b" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>decoration</name></member>
      <member refid="class_k_win_1_1_effect_window_1abaeede1c3d13aca2c9087462726e1267" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>decorationHasAlpha</name></member>
      <member refid="class_k_win_1_1_effect_window_1a66da428118f8f88689a373e89d0787f6" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>decorationHasAlpha</name></member>
      <member refid="class_k_win_1_1_effect_window_1a8909803ccc6f83d18030a9262ecb4ccc" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>deleted</name></member>
      <member refid="class_k_win_1_1_effect_window_1abc6711adb630d0cbaaaa9bd641b90b7f" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>deleteProperty</name></member>
      <member refid="class_k_win_1_1_effect_window_1aa942bed8cd7a065aaef67224865278e4" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>desktops</name></member>
      <member refid="class_k_win_1_1_effect_window_1afbc3a565e6176d5edd68f338841de2e6" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>desktops</name></member>
      <member refid="class_k_win_1_1_effect_window_1ace5c087436eae11f4cb3a947afab70c6" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>desktopWindow</name></member>
      <member refid="class_k_win_1_1_effect_window_1afd0dacf9ea562332728aa32580b0a523" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>dialog</name></member>
      <member refid="class_k_win_1_1_effect_window_1a64eda7b274f9d91dc86120cf8cab0e5b" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>dndIcon</name></member>
      <member refid="class_k_win_1_1_effect_window_1af4c808c74304af9a3b330e0f52fe6c81" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>dock</name></member>
      <member refid="class_k_win_1_1_effect_window_1aa4d2ef49669398442028080a35370dff" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>dropdownMenu</name></member>
      <member refid="class_k_win_1_1_effect_window_1add8e733bea3a190c7ef173ce956cbb4f" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>EffectWindow</name></member>
      <member refid="class_k_win_1_1_effect_window_1ad0fab3ee5e5edaa7c455dab2f32cbefb" prot="protected" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>EffectWindowVisibleRef</name></member>
      <member refid="class_k_win_1_1_effect_window_1a05c9dec69a15d52e0adf66352d94dd46" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>elevate</name></member>
      <member refid="class_k_win_1_1_effect_window_1a82134568757e14380d6002c6fad5da9c" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>expandedGeometry</name></member>
      <member refid="class_k_win_1_1_effect_window_1a041b246223a37c104445d75032b6a7d1" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>expandedGeometry</name></member>
      <member refid="class_k_win_1_1_effect_window_1ad08f7af34987c5e5be374d92a2847838" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>findModal</name></member>
      <member refid="class_k_win_1_1_effect_window_1afb22c0e0ccd57d4ab03cf2c2a21d6196" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>frameGeometry</name></member>
      <member refid="class_k_win_1_1_effect_window_1ac9c2f7b72598d547e37286f391f0602d" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>fullScreen</name></member>
      <member refid="class_k_win_1_1_effect_window_1ab3cdfabc4ad08c4a98a249bde5b39b97" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>geometry</name></member>
      <member refid="class_k_win_1_1_effect_window_1a155ef87379562c98f8033b2ec1e5a1bb" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>group</name></member>
      <member refid="class_k_win_1_1_effect_window_1a7378b90240b39d30d79a119bcd0f5e6e" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>hasDecoration</name></member>
      <member refid="class_k_win_1_1_effect_window_1ae2df74962c486e0dd4febf404ab37cad" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>hasDecoration</name></member>
      <member refid="class_k_win_1_1_effect_window_1a12d7c8207faa0369e920652ee2e25bfc" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>height</name></member>
      <member refid="class_k_win_1_1_effect_window_1a150bf4521f404223e65590c46f693c0a" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>height</name></member>
      <member refid="class_k_win_1_1_effect_window_1aaabc0a11342d1cd5510de18867799dca" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>hiddenByShowDesktop</name></member>
      <member refid="class_k_win_1_1_effect_window_1a3bccbf4d5390744e013f1dfb8cd88b7c" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>icon</name></member>
      <member refid="class_k_win_1_1_effect_window_1ab4239a4b07f0c6ff1b8ec486a85edab7" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>icon</name></member>
      <member refid="class_k_win_1_1_effect_window_1aafe869895234ebf31271985ed7eda99d" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>iconGeometry</name></member>
      <member refid="class_k_win_1_1_effect_window_1a5fee2be09ca20db655e19c51e67ee3e8" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>iconGeometry</name></member>
      <member refid="class_k_win_1_1_effect_window_1a631d09d03d4be662273611d25ac3e743" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>internalId</name></member>
      <member refid="class_k_win_1_1_effect_window_1adfe027ffe275bd916245c96f052f02a3" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>internalWindow</name></member>
      <member refid="class_k_win_1_1_effect_window_1a728c7f5994c12d725d8bc487bb167c55" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>internalWindow</name></member>
      <member refid="class_k_win_1_1_effect_window_1a3e6a3074f878b15813d2670be4f4d02a" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isAppletPopup</name></member>
      <member refid="class_k_win_1_1_effect_window_1aaa84cf791cc3c8fee0223b44efaf37a5" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isComboBox</name></member>
      <member refid="class_k_win_1_1_effect_window_1aeb1138fd440dbc5703d43c82fbbf9078" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isCriticalNotification</name></member>
      <member refid="class_k_win_1_1_effect_window_1afca6adc81dbaabc4fa11d0cd19e43473" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isDeleted</name></member>
      <member refid="class_k_win_1_1_effect_window_1ab769b63e24539194636456d8af938265" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isDesktop</name></member>
      <member refid="class_k_win_1_1_effect_window_1a8031598d19bde91f2e88e4db7d0f1c6f" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isDialog</name></member>
      <member refid="class_k_win_1_1_effect_window_1a7f8ce735ac0d3ffa4bec40afa39dbfca" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isDNDIcon</name></member>
      <member refid="class_k_win_1_1_effect_window_1a65107c8dbeeaf3a9ce84eef50ad03db5" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isDock</name></member>
      <member refid="class_k_win_1_1_effect_window_1a3225f8f425c210c2643d62f6682b21f4" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isDropdownMenu</name></member>
      <member refid="class_k_win_1_1_effect_window_1a79a941c946fea029ec74736e1049ff57" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isFullScreen</name></member>
      <member refid="class_k_win_1_1_effect_window_1ab454ff982c156ceb7f7a258ae34aa233" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isHidden</name></member>
      <member refid="class_k_win_1_1_effect_window_1af4c37c4ec8662d24a2a2d846dc1cec7b" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isHiddenByShowDesktop</name></member>
      <member refid="class_k_win_1_1_effect_window_1aa6324ac18fddbe54080c1a35f839fc27" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isInputMethod</name></member>
      <member refid="class_k_win_1_1_effect_window_1aef0897580e3415cf53864c4c60d25898" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isLockScreen</name></member>
      <member refid="class_k_win_1_1_effect_window_1a04c4b1784a8b6a652fe23f9d2849a4fb" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isManaged</name></member>
      <member refid="class_k_win_1_1_effect_window_1aa764f88576926ce19894feb68a67e3fa" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isMenu</name></member>
      <member refid="class_k_win_1_1_effect_window_1a266f74122244fed0b148449e70000a0a" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isMinimized</name></member>
      <member refid="class_k_win_1_1_effect_window_1afc6dc49561b0389b487c4374a3251631" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isModal</name></member>
      <member refid="class_k_win_1_1_effect_window_1a9986cbee947dc6be4bfff6fd277a9c1e" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isMovable</name></member>
      <member refid="class_k_win_1_1_effect_window_1aa16444023a6711c04f92d080286baa4c" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isMovableAcrossScreens</name></member>
      <member refid="class_k_win_1_1_effect_window_1a456bf2a8864e847c87aa8e5736757db5" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isNormalWindow</name></member>
      <member refid="class_k_win_1_1_effect_window_1a950a2d336e2b66136b652626bf721647" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isNotification</name></member>
      <member refid="class_k_win_1_1_effect_window_1af606cab83f8a5c0c8c8ee12fb548d77f" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isOnActivity</name></member>
      <member refid="class_k_win_1_1_effect_window_1a4f7bf5c2674a3b4d83e0994b0243c2e2" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isOnAllActivities</name></member>
      <member refid="class_k_win_1_1_effect_window_1a5161af34a008fa16a23b78659ed0fea9" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isOnAllDesktops</name></member>
      <member refid="class_k_win_1_1_effect_window_1a458dd4d56e08f5321decf919de50d2e5" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isOnCurrentActivity</name></member>
      <member refid="class_k_win_1_1_effect_window_1a64addcaf5485d42bc52588803825bc1e" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isOnCurrentDesktop</name></member>
      <member refid="class_k_win_1_1_effect_window_1a637d8d7dc3550c65c154dfb2ceb50bed" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isOnDesktop</name></member>
      <member refid="class_k_win_1_1_effect_window_1a150daba17925799070c8a8b44c373f11" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isOnScreenDisplay</name></member>
      <member refid="class_k_win_1_1_effect_window_1a29f260a54aaf429ca0b5e3e21646a170" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isOutline</name></member>
      <member refid="class_k_win_1_1_effect_window_1a79bc1933d5f3b52b1e5ce0f04e316a8e" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isPopupMenu</name></member>
      <member refid="class_k_win_1_1_effect_window_1ab054619699bf6e3d9adb374aff1dea97" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isPopupWindow</name></member>
      <member refid="class_k_win_1_1_effect_window_1a018a5808c1f51a409f51857a0bb973bb" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isSkipSwitcher</name></member>
      <member refid="class_k_win_1_1_effect_window_1a57e275d5e167ae96fd46f16703a69a67" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isSpecialWindow</name></member>
      <member refid="class_k_win_1_1_effect_window_1aa80e56c4d37af18fe83a38a5a8acd4fe" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isSplash</name></member>
      <member refid="class_k_win_1_1_effect_window_1a65fec3526e0de0ce4a67fe9c4f2e7448" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isToolbar</name></member>
      <member refid="class_k_win_1_1_effect_window_1aa35362dc2c77b09d945e150160d8628a" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isTooltip</name></member>
      <member refid="class_k_win_1_1_effect_window_1a52d3638155ceb2260d360f87faeb4847" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isUnresponsive</name></member>
      <member refid="class_k_win_1_1_effect_window_1abd15e1e96851916e541bee9466b5e06a" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isUserMove</name></member>
      <member refid="class_k_win_1_1_effect_window_1a2f3aec5c00fe7395e1b68c0bd773ba0c" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isUserResize</name></member>
      <member refid="class_k_win_1_1_effect_window_1a19bb9883664ce093ea3d460de5eb05a3" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isUtility</name></member>
      <member refid="class_k_win_1_1_effect_window_1a47a294f9788dadb6c4dac8c884fc8fff" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isVisible</name></member>
      <member refid="class_k_win_1_1_effect_window_1a2b31052189a2fcdc40da845511a9c6e7" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isWaylandClient</name></member>
      <member refid="class_k_win_1_1_effect_window_1a0116dabaadf796296a795db9caded8d3" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>isX11Client</name></member>
      <member refid="class_k_win_1_1_effect_window_1a6581c3ec66a3009ba7edd1246b5c5580" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>keepAbove</name></member>
      <member refid="class_k_win_1_1_effect_window_1a6eb3fd47382ec2d03748d6c3a4aecc5b" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>keepAbove</name></member>
      <member refid="class_k_win_1_1_effect_window_1afc2fe15cd381e8774651e67aa2848262" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>keepBelow</name></member>
      <member refid="class_k_win_1_1_effect_window_1ac842c3994f9254ce333bb12e14f5357f" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>keepBelow</name></member>
      <member refid="class_k_win_1_1_effect_window_1af736439764f6253303ec34f5d9ec85e4" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>lockScreen</name></member>
      <member refid="class_k_win_1_1_effect_window_1a8a4eac143f7a7bfb73255bbe5ca73c77" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>mainWindows</name></member>
      <member refid="class_k_win_1_1_effect_window_1aeac5ca07a875e1afec07bf5d14b5200e" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>managed</name></member>
      <member refid="class_k_win_1_1_effect_window_1a0f400ae27ff725c559ee782c45d16daf" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>menu</name></member>
      <member refid="class_k_win_1_1_effect_window_1a057a0f849ec32ab02f115369750dc383" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>minimize</name></member>
      <member refid="class_k_win_1_1_effect_window_1a4dd0bc592ed4f2e2634c5922fb5a8bbc" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>minimized</name></member>
      <member refid="class_k_win_1_1_effect_window_1a2ba429bb50e0c043e7eb9623609c51d6" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>minimizedChanged</name></member>
      <member refid="class_k_win_1_1_effect_window_1a2bcc1a1ee733fff0b4517a1e166f7355" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>modal</name></member>
      <member refid="class_k_win_1_1_effect_window_1abd3ae3a870825e647b5267996bcdcbdc" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>move</name></member>
      <member refid="class_k_win_1_1_effect_window_1ad0184938cfcc847c30dcaa3bd35f54b8" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>moveable</name></member>
      <member refid="class_k_win_1_1_effect_window_1ae2fec0609f192e39419323ff990614d8" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>moveableAcrossScreens</name></member>
      <member refid="class_k_win_1_1_effect_window_1acb4ac248f51b6f9d6c556c04660562b4" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>normalWindow</name></member>
      <member refid="class_k_win_1_1_effect_window_1a907936e214881096315f6494865a8a1f" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>notification</name></member>
      <member refid="class_k_win_1_1_effect_window_1ab578bcc5faab12c6186b6639874bdb5b" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>onAllActivities</name></member>
      <member refid="class_k_win_1_1_effect_window_1abcc1dde8845a3aab00152b64bde0c7d3" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>onAllDesktops</name></member>
      <member refid="class_k_win_1_1_effect_window_1a271f7ff723951cdb4c25facc2af3f69b" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>onCurrentActivity</name></member>
      <member refid="class_k_win_1_1_effect_window_1ab826f08ac96bf689d845b86337b746bd" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>onCurrentDesktop</name></member>
      <member refid="class_k_win_1_1_effect_window_1a3da8057f010332782b13202d49da9d42" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>onScreenDisplay</name></member>
      <member refid="class_k_win_1_1_effect_window_1a2653c6ea19ffb324de2356a67c4c0458" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>opacity</name></member>
      <member refid="class_k_win_1_1_effect_window_1a9be7bef00cce83962c0450b2793eb71d" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>opacity</name></member>
      <member refid="class_k_win_1_1_effect_window_1a0eb28f47c675bf114de17778e398caa8" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>outline</name></member>
      <member refid="class_k_win_1_1_effect_window_1a5a8165f6ee22042d25b8f53c005e5ee9afcd7010088bf17a0f7451f2ed729956a" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>PAINT_DISABLED</name></member>
      <member refid="class_k_win_1_1_effect_window_1a5a8165f6ee22042d25b8f53c005e5ee9a6411eb1b8ade2ff51c0e24601682573a" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>PAINT_DISABLED_BY_ACTIVITY</name></member>
      <member refid="class_k_win_1_1_effect_window_1a5a8165f6ee22042d25b8f53c005e5ee9a027ec15c92a014e0d33ddecf6478136d" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>PAINT_DISABLED_BY_DESKTOP</name></member>
      <member refid="class_k_win_1_1_effect_window_1a5a8165f6ee22042d25b8f53c005e5ee9a48042b3146a90c9ffe1539788807ce8c" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>PAINT_DISABLED_BY_MINIMIZE</name></member>
      <member refid="class_k_win_1_1_effect_window_1a08ba94fa7cdd318c9481e2c66d5461fe" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>pid</name></member>
      <member refid="class_k_win_1_1_effect_window_1a5aa4fbe8bf5442da3d457f0cdec53577" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>pid</name></member>
      <member refid="class_k_win_1_1_effect_window_1af78c6f823b19efebcd4781bd8e1c84c2" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>popupMenu</name></member>
      <member refid="class_k_win_1_1_effect_window_1a1ffc04fc14570a608ccbaaf667b6c4e1" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>popupWindow</name></member>
      <member refid="class_k_win_1_1_effect_window_1a33bb014b90ec9da18fa7259b44a98d27" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>pos</name></member>
      <member refid="class_k_win_1_1_effect_window_1a61dc7b54e810c5d15f43d3f4a5a54e0e" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>pos</name></member>
      <member refid="class_k_win_1_1_effect_window_1a940b73e3ca62682de35ddea05e5c16be" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>readProperty</name></member>
      <member refid="class_k_win_1_1_effect_window_1a3684639a5c385f9c49f38a8681328fe4" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>rect</name></member>
      <member refid="class_k_win_1_1_effect_window_1a4c281f63f3ce89b6a7b1478924266ced" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>rect</name></member>
      <member refid="class_k_win_1_1_effect_window_1a9441d465ddee9761ee5ab3f49aebefae" prot="protected" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>refVisible</name></member>
      <member refid="class_k_win_1_1_effect_window_1a45a22810efc92ca92df970add8ca7907" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>refWindow</name></member>
      <member refid="class_k_win_1_1_effect_window_1a83a05c01aa7381f7b9425407aed859b5" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>resize</name></member>
      <member refid="class_k_win_1_1_effect_window_1acc4498cfe046b04cd40649fd2f2ea15d" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>screen</name></member>
      <member refid="class_k_win_1_1_effect_window_1a0f59244da3252cb83f47d5b1afcd969d" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>screen</name></member>
      <member refid="class_k_win_1_1_effect_window_1a69d83e8d2e0e9c5630c054ce31210ce8" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>setData</name></member>
      <member refid="class_k_win_1_1_effect_window_1a9b1640971a557e16de5a12087db10b7e" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>setMinimized</name></member>
      <member refid="class_k_win_1_1_effect_window_1a3631503d720c01d6e656ae373a3b0b48" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>size</name></member>
      <member refid="class_k_win_1_1_effect_window_1a1cfb335729144ed2f52ce308d86ae5d4" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>size</name></member>
      <member refid="class_k_win_1_1_effect_window_1a12a46015a2f18f67615d8a344e1d758c" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>skipsCloseAnimation</name></member>
      <member refid="class_k_win_1_1_effect_window_1abeaf8369bf6217d6d3908bd8cd542910" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>skipsCloseAnimation</name></member>
      <member refid="class_k_win_1_1_effect_window_1a59551f7a52bc2598a09457cae7544a41" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>skipSwitcher</name></member>
      <member refid="class_k_win_1_1_effect_window_1a7fe5716ac54e19c915040d41bc0e0c5f" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>specialWindow</name></member>
      <member refid="class_k_win_1_1_effect_window_1ae1f05a8a89626196394611627be1361b" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>splash</name></member>
      <member refid="class_k_win_1_1_effect_window_1aadf0f08125cf4c9bf109eed76715ae07" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>surface</name></member>
      <member refid="class_k_win_1_1_effect_window_1a0d87085f89b932da4b9b6b4f027ff431" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>toolbar</name></member>
      <member refid="class_k_win_1_1_effect_window_1ae1360c42ad9c20711836790752dc9691" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>tooltip</name></member>
      <member refid="class_k_win_1_1_effect_window_1a23dab79a743a837b851ece97bad78bb2" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>transientFor</name></member>
      <member refid="class_k_win_1_1_effect_window_1aa06b7a8942dc71e40cea31f957bf3cd2" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>unminimize</name></member>
      <member refid="class_k_win_1_1_effect_window_1a57da21810f5641da339c97d0b647b2b3" prot="protected" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>unrefVisible</name></member>
      <member refid="class_k_win_1_1_effect_window_1afca01a54fcb3e189b2e334939737def0" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>unrefWindow</name></member>
      <member refid="class_k_win_1_1_effect_window_1ab29a06675f5bca3861366d09db810245" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>unresponsive</name></member>
      <member refid="class_k_win_1_1_effect_window_1ad0c8a922d3a167bf1dc13d06ecb9da9f" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>utility</name></member>
      <member refid="class_k_win_1_1_effect_window_1ac851dc62ec769c0e0927667bed751f02" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>visible</name></member>
      <member refid="class_k_win_1_1_effect_window_1af357e7d5abdcb65806689167a19975bb" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>waylandClient</name></member>
      <member refid="class_k_win_1_1_effect_window_1ac402e4ce70089b1478511e451c4a2623" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>width</name></member>
      <member refid="class_k_win_1_1_effect_window_1acb01d7770d48cee8309a42c585eaf2e0" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>width</name></member>
      <member refid="class_k_win_1_1_effect_window_1a624548a53ed00a646e7b89cb898a74a8" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>window</name></member>
      <member refid="class_k_win_1_1_effect_window_1a642ffe286fd0bd253bc90f71e51762ca" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowClass</name></member>
      <member refid="class_k_win_1_1_effect_window_1a775214eefe29f4a1202c509e51bdc67b" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowClass</name></member>
      <member refid="class_k_win_1_1_effect_window_1a14d82213bbcf4280fc5a1061858370ba" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowDamaged</name></member>
      <member refid="class_k_win_1_1_effect_window_1a5bf61f1ee3489772bb5fb7464bef406f" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowDecorationChanged</name></member>
      <member refid="class_k_win_1_1_effect_window_1a28e8bf5badcbb747451e3194f81b5665" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowDesktopsChanged</name></member>
      <member refid="class_k_win_1_1_effect_window_1a2b13069077a5aee888368a5811457349" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowExpandedGeometryChanged</name></member>
      <member refid="class_k_win_1_1_effect_window_1aef6351fb5e97fd6b4c8d9c0f4d322c90" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowFinishUserMovedResized</name></member>
      <member refid="class_k_win_1_1_effect_window_1af6e4034faca74eef5bf0b371bcafa5dc" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowFrameGeometryAboutToChange</name></member>
      <member refid="class_k_win_1_1_effect_window_1a64f57a9239d2520a670f2c20a5de8d5d" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowFrameGeometryChanged</name></member>
      <member refid="class_k_win_1_1_effect_window_1ad96c1a300f44ffe8bc7439aa7870cab3" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowFullScreenChanged</name></member>
      <member refid="class_k_win_1_1_effect_window_1a468749c54f92e8f89b325b642772dc4a" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowHiddenChanged</name></member>
      <member refid="class_k_win_1_1_effect_window_1aaed1cb8c8bb16b31b1f32fb930107fc9" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowId</name></member>
      <member refid="class_k_win_1_1_effect_window_1a4ea826c4e0ce5b195e428ec9766bc2f1" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowItem</name></member>
      <member refid="class_k_win_1_1_effect_window_1a2b29e1a886f52e50daa10d435b61c941" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowKeepAboveChanged</name></member>
      <member refid="class_k_win_1_1_effect_window_1a3634c52d613d290e3ef7bad4282a14a1" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowKeepBelowChanged</name></member>
      <member refid="class_k_win_1_1_effect_window_1aafd68357522318d49453a52a2f42aa3f" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowMaximizedStateAboutToChange</name></member>
      <member refid="class_k_win_1_1_effect_window_1af4926d78bab0b3dd17dad390abcf113e" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowMaximizedStateChanged</name></member>
      <member refid="class_k_win_1_1_effect_window_1a908a07e57b1694fb3e1aa3c45b09847c" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowModalityChanged</name></member>
      <member refid="class_k_win_1_1_effect_window_1ac020c4b9381f08721f98702a8ff189ca" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowOpacityChanged</name></member>
      <member refid="class_k_win_1_1_effect_window_1a818e53c259a6ec435cd3c8a013915209" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowRole</name></member>
      <member refid="class_k_win_1_1_effect_window_1a17aad578d28e812f1f79aaeb169850d3" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowRole</name></member>
      <member refid="class_k_win_1_1_effect_window_1a088f3fc1e6fca8bfb18a4fccdcaa3136" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowStartUserMovedResized</name></member>
      <member refid="class_k_win_1_1_effect_window_1a53583b6a092848b7f139bac1e9633883" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowStepUserMovedResized</name></member>
      <member refid="class_k_win_1_1_effect_window_1acbf1e8e79b8f9761140c7d7d8c19748e" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowType</name></member>
      <member refid="class_k_win_1_1_effect_window_1a7b8e479919145e7acc601ac208b5fdb3" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowType</name></member>
      <member refid="class_k_win_1_1_effect_window_1a9bd8dcf6faa3d8e05e878a50c6cd764d" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowTypeInt</name></member>
      <member refid="class_k_win_1_1_effect_window_1ac5a4312761c28a33a91a65993b5fd8e1" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>windowUnresponsiveChanged</name></member>
      <member refid="class_k_win_1_1_effect_window_1aac1f4a263e23a9ddcbb6e14f325923b9" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>x</name></member>
      <member refid="class_k_win_1_1_effect_window_1a97bbfac6e836a62207ef6cc604092f3a" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>x</name></member>
      <member refid="class_k_win_1_1_effect_window_1aff40af44afbc9033a2b2d656b1a868d6" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>x11Client</name></member>
      <member refid="class_k_win_1_1_effect_window_1aca622a1be68a6c6e02290b6b3e8d2f54" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>y</name></member>
      <member refid="class_k_win_1_1_effect_window_1a9c704223a989c46d49270c9a329d4a7c" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>y</name></member>
      <member refid="class_k_win_1_1_effect_window_1af5b5d57608b3a0a0f10b9625fcc9a3ee" prot="public" virt="non-virtual"><scope>KWin::EffectWindow</scope><name>~EffectWindow</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
