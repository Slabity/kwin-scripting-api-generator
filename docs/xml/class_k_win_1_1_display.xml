<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_display" kind="class" language="C++" prot="public">
    <compoundname>KWin::Display</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QObject</basecompoundref>
    <derivedcompoundref refid="class_k_win_1_1_filtered_display" prot="public" virt="non-virtual">KWin::FilteredDisplay</derivedcompoundref>
    <includes refid="display_8h" local="no">display.h</includes>
    <sectiondef kind="property">
      <memberdef kind="property" id="class_k_win_1_1_display_1a0242f5e4216de825ed68f34f5d78820f" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool KWin::Display::running</definition>
        <argsstring></argsstring>
        <name>running</name>
        <qualifiedname>KWin::Display::running</qualifiedname>
        <read>isRunning</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="36" column="5" bodyfile="kwin/src/wayland/display.h" bodystart="36" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_k_win_1_1_display_1ab42140c6ed37ee9e75821d3081e8add8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class DisplayPrivate</definition>
        <argsstring></argsstring>
        <name>DisplayPrivate</name>
        <qualifiedname>KWin::Display::DisplayPrivate</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_display_private" kindref="compound">DisplayPrivate</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="135" column="18" bodyfile="kwin/src/wayland/display.h" bodystart="135" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_display_1ac893069a7fbde7b8e6d31d1ffd35b0cb" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_display_private" kindref="compound">DisplayPrivate</ref> &gt;</type>
        <definition>std::unique_ptr&lt;DisplayPrivate&gt; KWin::Display::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <qualifiedname>KWin::Display::d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="136" column="21" bodyfile="kwin/src/wayland/display.h" bodystart="136" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_display_1abec28e9c667dfa4485597aaeebb07129" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::Display::Display</definition>
        <argsstring>(QObject *parent=nullptr)</argsstring>
        <name>Display</name>
        <qualifiedname>KWin::Display::Display</qualifiedname>
        <param>
          <type>QObject *</type>
          <declname>parent</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="38" column="14" bodyfile="kwin/src/wayland/display.cpp" bodystart="45" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_display_1a69bab00bcda1b5d18a26d85d06ff0950" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>KWin::Display::~Display</definition>
        <argsstring>()</argsstring>
        <name>~Display</name>
        <qualifiedname>KWin::Display::~Display</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="39" column="13" bodyfile="kwin/src/wayland/display.cpp" bodystart="53" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_display_1ae4065e04d9a4a44150d44585f6942bb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Display::addSocketFileDescriptor</definition>
        <argsstring>(int fileDescriptor, const QString &amp;socketName=QString())</argsstring>
        <name>addSocketFileDescriptor</name>
        <qualifiedname>KWin::Display::addSocketFileDescriptor</qualifiedname>
        <param>
          <type>int</type>
          <declname>fileDescriptor</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>socketName</declname>
          <defval>QString()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a socket with the given <computeroutput>fileDescriptor</computeroutput> to the <ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref> display. This function returns <computeroutput>true</computeroutput> if the socket has been added successfully; otherwise returns <computeroutput>false</computeroutput>.</para>
<para>The compositor can call this function even after the display has been started. <itemizedlist>
<listitem><para>socketName can optionally be parsed to store the socket name represented by the given file-descriptor</para>
</listitem>
</itemizedlist>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_display_1af36443417f1832645373ce713cb226c7" kindref="member">start()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="50" column="10" bodyfile="kwin/src/wayland/display.cpp" bodystart="59" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_display_1aa4c4acfe47f745065df276fab792b431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Display::addSocketName</definition>
        <argsstring>(const QString &amp;name=QString())</argsstring>
        <name>addSocketName</name>
        <qualifiedname>KWin::Display::addSocketName</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
          <defval>QString()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a UNIX socket with the specified <computeroutput>name</computeroutput> to the <ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref> display. This function returns <computeroutput>true</computeroutput> if the socket has been added successfully; otherwise returns <computeroutput>false</computeroutput>.</para>
<para>If the specified socket name <computeroutput>name</computeroutput> is empty, the display will pick a free socket with a filename &quot;wayland-%d&quot;.</para>
<para>The compositor can call this function even after the display has been started.</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_display_1af36443417f1832645373ce713cb226c7" kindref="member">start()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="62" column="10" bodyfile="kwin/src/wayland/display.cpp" bodystart="71" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_display_1a0d0e89f4da09f16cdb95e7f7440fbe33" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QStringList</type>
        <definition>QStringList KWin::Display::socketNames</definition>
        <argsstring>() const</argsstring>
        <name>socketNames</name>
        <qualifiedname>KWin::Display::socketNames</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the list of socket names that the display listens for client connections. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="67" column="17" bodyfile="kwin/src/wayland/display.cpp" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_display_1a1592cc63a3c36673842d84fa3933a202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>quint32</type>
        <definition>quint32 KWin::Display::serial</definition>
        <argsstring>()</argsstring>
        <name>serial</name>
        <qualifiedname>KWin::Display::serial</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="69" column="13" bodyfile="kwin/src/wayland/display.cpp" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_display_1a88d04e81a3c1a696bae7fca6426fabcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>quint32</type>
        <definition>quint32 KWin::Display::nextSerial</definition>
        <argsstring>()</argsstring>
        <name>nextSerial</name>
        <qualifiedname>KWin::Display::nextSerial</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="70" column="13" bodyfile="kwin/src/wayland/display.cpp" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_display_1af36443417f1832645373ce713cb226c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Display::start</definition>
        <argsstring>()</argsstring>
        <name>start</name>
        <qualifiedname>KWin::Display::start</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Start accepting client connections. If the display has started successfully, this function returns <computeroutput>true</computeroutput>; otherwise <computeroutput>false</computeroutput> is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="76" column="10" bodyfile="kwin/src/wayland/display.cpp" bodystart="95" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_display_1a39c8828d70c0deafb5c1b3b9ccf95979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Display::dispatchEvents</definition>
        <argsstring>()</argsstring>
        <name>dispatchEvents</name>
        <qualifiedname>KWin::Display::dispatchEvents</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="77" column="10" bodyfile="kwin/src/wayland/display.cpp" bodystart="119" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_display_1a07034ffcff1c993fe2efabbb4371ab77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> *</type>
        <definition>ClientConnection * KWin::Display::createClient</definition>
        <argsstring>(int fd)</argsstring>
        <name>createClient</name>
        <qualifiedname>KWin::Display::createClient</qualifiedname>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a client for the given file descriptor.</para>
<para>The client is created as if it connected through the normal server socket. This method can be used to create a connection bypassing the normal socket connection. It&apos;s recommended to use together with socketpair and pass the other side of the socket to the client.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor for the socket to the client </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> or <computeroutput>null</computeroutput> on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="90" column="22" bodyfile="kwin/src/wayland/display.cpp" bodystart="226" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_display_1afe19d2ff1279b5a89fbe761a99dc58eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::Display::operator wl_display *</definition>
        <argsstring>()</argsstring>
        <name>operator wl_display *</name>
        <qualifiedname>KWin::Display::operator wl_display *</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="92" column="5" bodyfile="kwin/src/wayland/display.cpp" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_display_1a1544ce9fb0ca6c88896be026ee164ee5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::Display::operator wl_display *</definition>
        <argsstring>() const</argsstring>
        <name>operator wl_display *</name>
        <qualifiedname>KWin::Display::operator wl_display *</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="93" column="5" bodyfile="kwin/src/wayland/display.cpp" bodystart="157" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_display_1aa50d346a6be40bd7db06214c0350456a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::Display::isRunning</definition>
        <argsstring>() const</argsstring>
        <name>isRunning</name>
        <qualifiedname>KWin::Display::isRunning</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="94" column="10" bodyfile="kwin/src/wayland/display.cpp" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_display_1a0be7cd8fa84fabd7a6f51f9819f7d7e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Display::createShm</definition>
        <argsstring>()</argsstring>
        <name>createShm</name>
        <qualifiedname>KWin::Display::createShm</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="96" column="10" bodyfile="kwin/src/wayland/display.cpp" bodystart="131" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_display_1aef2adf782212918f49a67897ae38a39e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_seat_interface" kindref="compound">SeatInterface</ref> * &gt;</type>
        <definition>QList&lt; SeatInterface * &gt; KWin::Display::seats</definition>
        <argsstring>() const</argsstring>
        <name>seats</name>
        <qualifiedname>KWin::Display::seats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>All <ref refid="class_k_win_1_1_seat_interface" kindref="compound">SeatInterface</ref> currently managed on the <ref refid="class_k_win_1_1_display" kindref="compound">Display</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="100" column="11" bodyfile="kwin/src/wayland/display.cpp" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_display_1a768cfd4a55a23aa9d002aefb0065892b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_output_device_v2_interface" kindref="compound">OutputDeviceV2Interface</ref> * &gt;</type>
        <definition>QList&lt; OutputDeviceV2Interface * &gt; KWin::Display::outputDevices</definition>
        <argsstring>() const</argsstring>
        <name>outputDevices</name>
        <qualifiedname>KWin::Display::outputDevices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="101" column="11" bodyfile="kwin/src/wayland/display.cpp" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_display_1a6fb3b0641dcb2f4f911346aa8696b7fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_output_interface" kindref="compound">OutputInterface</ref> * &gt;</type>
        <definition>QList&lt; OutputInterface * &gt; KWin::Display::outputs</definition>
        <argsstring>() const</argsstring>
        <name>outputs</name>
        <qualifiedname>KWin::Display::outputs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="102" column="11" bodyfile="kwin/src/wayland/display.cpp" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_display_1a5e188d47beffd1102046c911952f6f19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_output_interface" kindref="compound">OutputInterface</ref> * &gt;</type>
        <definition>QList&lt; OutputInterface * &gt; KWin::Display::outputsIntersecting</definition>
        <argsstring>(const QRect &amp;rect) const</argsstring>
        <name>outputsIntersecting</name>
        <qualifiedname>KWin::Display::outputsIntersecting</qualifiedname>
        <param>
          <type>const QRect &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="103" column="11" bodyfile="kwin/src/wayland/display.cpp" bodystart="172" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_display_1a442b1534e9a5002094ebfb5db1c7c82a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_output_interface" kindref="compound">OutputInterface</ref> *</type>
        <definition>OutputInterface * KWin::Display::largestIntersectingOutput</definition>
        <argsstring>(const QRect &amp;rect) const</argsstring>
        <name>largestIntersectingOutput</name>
        <qualifiedname>KWin::Display::largestIntersectingOutput</qualifiedname>
        <param>
          <type>const QRect &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="104" column="21" bodyfile="kwin/src/wayland/display.cpp" bodystart="183" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_display_1a79c16fcdaf407c74c7a0d4395762a86f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> *</type>
        <definition>ClientConnection * KWin::Display::getConnection</definition>
        <argsstring>(wl_client *client)</argsstring>
        <name>getConnection</name>
        <qualifiedname>KWin::Display::getConnection</qualifiedname>
        <param>
          <type>wl_client *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> for the given <computeroutput>client</computeroutput>. If there is no <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> yet for the given <computeroutput>client</computeroutput>, it will be created. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The native client for which the <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> is retrieved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> for the given native client </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="112" column="22" bodyfile="kwin/src/wayland/display.cpp" bodystart="203" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_display_1a90caf1e11bcbe97111449fc3b040bcc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Display::setDefaultMaxBufferSize</definition>
        <argsstring>(size_t max)</argsstring>
        <name>setDefaultMaxBufferSize</name>
        <qualifiedname>KWin::Display::setDefaultMaxBufferSize</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the default maximum size for connection buffers of new clients. The size is in bytes. The minimum buffer size is 4096. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="123" column="10" bodyfile="kwin/src/wayland/display.cpp" bodystart="249" bodyend="254"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_k_win_1_1_display_1a374a4d7de3f7a40aed96a879dc92b497" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_graphics_buffer" kindref="compound">GraphicsBuffer</ref> *</type>
        <definition>GraphicsBuffer * KWin::Display::bufferForResource</definition>
        <argsstring>(wl_resource *resource)</argsstring>
        <name>bufferForResource</name>
        <qualifiedname>KWin::Display::bufferForResource</qualifiedname>
        <param>
          <type>wl_resource *</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the graphics buffer for the given <emphasis>resource</emphasis>, or <computeroutput>null</computeroutput> if there&apos;s no buffer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="117" column="27" bodyfile="kwin/src/wayland/display.cpp" bodystart="237" bodyend="247"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-slot">
      <memberdef kind="slot" id="class_k_win_1_1_display_1a2260ce48af41a11b1a0d4225603c7766" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Display::flush</definition>
        <argsstring>()</argsstring>
        <name>flush</name>
        <qualifiedname>KWin::Display::flush</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="126" column="10" bodyfile="kwin/src/wayland/display.cpp" bodystart="126" bodyend="129"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="signal">
      <memberdef kind="signal" id="class_k_win_1_1_display_1ab01e78a46ce6279919e4e853658fa771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Display::socketNamesChanged</definition>
        <argsstring>()</argsstring>
        <name>socketNamesChanged</name>
        <qualifiedname>KWin::Display::socketNamesChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="129" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_display_1a923ef782d0c9b5b8d0afed92c506d11c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Display::runningChanged</definition>
        <argsstring>(bool)</argsstring>
        <name>runningChanged</name>
        <qualifiedname>KWin::Display::runningChanged</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="130" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_display_1a04054e9c882bab1a04bbf319585712e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Display::clientConnected</definition>
        <argsstring>(KWin::ClientConnection *)</argsstring>
        <name>clientConnected</name>
        <qualifiedname>KWin::Display::clientConnected</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_client_connection" kindref="compound">KWin::ClientConnection</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="131" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_display_1a2dae745448a325e7f6e8d0e640080047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::Display::clientDisconnected</definition>
        <argsstring>(KWin::ClientConnection *)</argsstring>
        <name>clientDisconnected</name>
        <qualifiedname>KWin::Display::clientDisconnected</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_client_connection" kindref="compound">KWin::ClientConnection</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/display.h" line="132" column="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Class holding the <ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref> server display loop. </para>
    </briefdescription>
    <detaileddescription>
<para><xrefsect id="todo_1_todo000005"><xreftitle>Todo</xreftitle><xrefdescription><para>Improve documentation </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>KWin::Display</label>
        <link refid="class_k_win_1_1_display"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>KWin::FilteredDisplay</label>
        <link refid="class_k_win_1_1_filtered_display"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>KWin::KWinDisplay</label>
        <link refid="class_k_win_1_1_k_win_display"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>KWin::Display</label>
        <link refid="class_k_win_1_1_display"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/wayland/display.h" line="33" column="1" bodyfile="kwin/src/wayland/display.h" bodystart="34" bodyend="137"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_display_1ae4065e04d9a4a44150d44585f6942bb3" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>addSocketFileDescriptor</name></member>
      <member refid="class_k_win_1_1_display_1aa4c4acfe47f745065df276fab792b431" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>addSocketName</name></member>
      <member refid="class_k_win_1_1_display_1a374a4d7de3f7a40aed96a879dc92b497" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>bufferForResource</name></member>
      <member refid="class_k_win_1_1_display_1a04054e9c882bab1a04bbf319585712e5" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>clientConnected</name></member>
      <member refid="class_k_win_1_1_display_1a2dae745448a325e7f6e8d0e640080047" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>clientDisconnected</name></member>
      <member refid="class_k_win_1_1_display_1a07034ffcff1c993fe2efabbb4371ab77" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>createClient</name></member>
      <member refid="class_k_win_1_1_display_1a0be7cd8fa84fabd7a6f51f9819f7d7e1" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>createShm</name></member>
      <member refid="class_k_win_1_1_display_1ac893069a7fbde7b8e6d31d1ffd35b0cb" prot="private" virt="non-virtual"><scope>KWin::Display</scope><name>d</name></member>
      <member refid="class_k_win_1_1_display_1a39c8828d70c0deafb5c1b3b9ccf95979" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>dispatchEvents</name></member>
      <member refid="class_k_win_1_1_display_1abec28e9c667dfa4485597aaeebb07129" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>Display</name></member>
      <member refid="class_k_win_1_1_display_1ab42140c6ed37ee9e75821d3081e8add8" prot="private" virt="non-virtual"><scope>KWin::Display</scope><name>DisplayPrivate</name></member>
      <member refid="class_k_win_1_1_display_1a2260ce48af41a11b1a0d4225603c7766" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>flush</name></member>
      <member refid="class_k_win_1_1_display_1a79c16fcdaf407c74c7a0d4395762a86f" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>getConnection</name></member>
      <member refid="class_k_win_1_1_display_1aa50d346a6be40bd7db06214c0350456a" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>isRunning</name></member>
      <member refid="class_k_win_1_1_display_1a442b1534e9a5002094ebfb5db1c7c82a" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>largestIntersectingOutput</name></member>
      <member refid="class_k_win_1_1_display_1a88d04e81a3c1a696bae7fca6426fabcc" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>nextSerial</name></member>
      <member refid="class_k_win_1_1_display_1afe19d2ff1279b5a89fbe761a99dc58eb" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>operator wl_display *</name></member>
      <member refid="class_k_win_1_1_display_1a1544ce9fb0ca6c88896be026ee164ee5" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>operator wl_display *</name></member>
      <member refid="class_k_win_1_1_display_1a768cfd4a55a23aa9d002aefb0065892b" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>outputDevices</name></member>
      <member refid="class_k_win_1_1_display_1a6fb3b0641dcb2f4f911346aa8696b7fe" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>outputs</name></member>
      <member refid="class_k_win_1_1_display_1a5e188d47beffd1102046c911952f6f19" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>outputsIntersecting</name></member>
      <member refid="class_k_win_1_1_display_1a0242f5e4216de825ed68f34f5d78820f" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>running</name></member>
      <member refid="class_k_win_1_1_display_1a923ef782d0c9b5b8d0afed92c506d11c" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>runningChanged</name></member>
      <member refid="class_k_win_1_1_display_1aef2adf782212918f49a67897ae38a39e" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>seats</name></member>
      <member refid="class_k_win_1_1_display_1a1592cc63a3c36673842d84fa3933a202" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>serial</name></member>
      <member refid="class_k_win_1_1_display_1a90caf1e11bcbe97111449fc3b040bcc2" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>setDefaultMaxBufferSize</name></member>
      <member refid="class_k_win_1_1_display_1a0d0e89f4da09f16cdb95e7f7440fbe33" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>socketNames</name></member>
      <member refid="class_k_win_1_1_display_1ab01e78a46ce6279919e4e853658fa771" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>socketNamesChanged</name></member>
      <member refid="class_k_win_1_1_display_1af36443417f1832645373ce713cb226c7" prot="public" virt="non-virtual"><scope>KWin::Display</scope><name>start</name></member>
      <member refid="class_k_win_1_1_display_1a69bab00bcda1b5d18a26d85d06ff0950" prot="public" virt="virtual"><scope>KWin::Display</scope><name>~Display</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
