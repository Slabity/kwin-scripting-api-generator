<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="test__wayland__subsurface_8cpp" kind="file" language="C++">
    <compoundname>test_wayland_subsurface.cpp</compoundname>
    <includes local="no">QSignalSpy</includes>
    <includes local="no">QTest</includes>
    <includes refid="wayland_2compositor_8h" local="yes">wayland/compositor.h</includes>
    <includes refid="display_8h" local="yes">wayland/display.h</includes>
    <includes refid="subcompositor_8h" local="yes">wayland/subcompositor.h</includes>
    <includes refid="surface_8h" local="yes">wayland/surface.h</includes>
    <includes local="yes">KWayland/Client/compositor.h</includes>
    <includes local="yes">KWayland/Client/connection_thread.h</includes>
    <includes local="yes">KWayland/Client/event_queue.h</includes>
    <includes local="yes">KWayland/Client/region.h</includes>
    <includes local="yes">KWayland/Client/registry.h</includes>
    <includes local="yes">KWayland/Client/shm_pool.h</includes>
    <includes local="yes">KWayland/Client/subcompositor.h</includes>
    <includes local="yes">KWayland/Client/subsurface.h</includes>
    <includes local="yes">KWayland/Client/surface.h</includes>
    <includes local="no">wayland-client.h</includes>
    <includes local="yes">test_wayland_subsurface.moc</includes>
    <incdepgraph>
      <node id="1">
        <label>kwin/autotests/wayland/client/test_wayland_subsurface.cpp</label>
        <link refid="test__wayland__subsurface_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>core/colorspace.h</label>
        <link refid="colorspace_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>core/output.h</label>
        <link refid="core_2output_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>core/renderbackend.h</label>
        <link refid="renderbackend_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>renderloop.h</label>
        <link refid="renderloop_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>core/rendertarget.h</label>
        <link refid="rendertarget_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>effect/globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>utils/edid.h</label>
        <link refid="edid_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>utils/filedescriptor.h</label>
        <link refid="filedescriptor_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>wayland/compositor.h</label>
        <link refid="wayland_2compositor_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>wayland/display.h</label>
        <link refid="display_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>wayland/subcompositor.h</label>
        <link refid="subcompositor_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>surface.h</label>
        <link refid="surface_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>KWayland/Client/compositor.h</label>
      </node>
      <node id="36">
        <label>KWayland/Client/connection_thread.h</label>
      </node>
      <node id="37">
        <label>KWayland/Client/event_queue.h</label>
      </node>
      <node id="38">
        <label>KWayland/Client/region.h</label>
      </node>
      <node id="39">
        <label>KWayland/Client/registry.h</label>
      </node>
      <node id="40">
        <label>KWayland/Client/shm_pool.h</label>
      </node>
      <node id="41">
        <label>KWayland/Client/subcompositor.h</label>
      </node>
      <node id="42">
        <label>KWayland/Client/subsurface.h</label>
      </node>
      <node id="43">
        <label>KWayland/Client/surface.h</label>
      </node>
      <node id="21">
        <label>QByteArray</label>
      </node>
      <node id="15">
        <label>QCoreApplication</label>
      </node>
      <node id="24">
        <label>QDebug</label>
      </node>
      <node id="16">
        <label>QImage</label>
      </node>
      <node id="22">
        <label>QList</label>
      </node>
      <node id="9">
        <label>QMatrix4x4</label>
      </node>
      <node id="19">
        <label>QObject</label>
      </node>
      <node id="17">
        <label>QPoint</label>
      </node>
      <node id="30">
        <label>QPointer</label>
      </node>
      <node id="25">
        <label>QRect</label>
      </node>
      <node id="32">
        <label>QRegion</label>
      </node>
      <node id="2">
        <label>QSignalSpy</label>
      </node>
      <node id="23">
        <label>QSize</label>
      </node>
      <node id="3">
        <label>QTest</label>
      </node>
      <node id="26">
        <label>QUuid</label>
      </node>
      <node id="18">
        <label>QVariant</label>
      </node>
      <node id="10">
        <label>QVector2D</label>
      </node>
      <node id="14">
        <label>config-kwin.h</label>
      </node>
      <node id="5">
        <label>kwin_export.h</label>
      </node>
      <node id="31">
        <label>memory</label>
      </node>
      <node id="8">
        <label>optional</label>
      </node>
      <node id="45">
        <label>test_wayland_subsurface.moc</label>
      </node>
      <node id="44">
        <label>wayland-client.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_test_sub_surface" prot="public">TestSubSurface</innerclass>
    <sectiondef kind="var">
      <memberdef kind="variable" id="test__wayland__subsurface_8cpp_1a485d6ddd568caea0908934bfdb9fbadb" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString s_socketName</definition>
        <argsstring></argsstring>
        <name>s_socketName</name>
        <initializer>= QStringLiteral(&quot;kwayland-test-wayland-subsurface-0&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/wayland/client/test_wayland_subsurface.cpp" line="67" column="22" bodyfile="kwin/autotests/wayland/client/test_wayland_subsurface.cpp" bodystart="67" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2014<sp/>Martin<sp/>Gräßlin<sp/>&lt;mgraesslin@kde.org&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>LGPL-2.1-only<sp/>OR<sp/>LGPL-3.0-only<sp/>OR<sp/>LicenseRef-KDE-Accepted-LGPL</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Qt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QSignalSpy&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QTest&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KWin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wayland_2compositor_8h" kindref="compound">wayland/compositor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="display_8h" kindref="compound">wayland/display.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="subcompositor_8h" kindref="compound">wayland/subcompositor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="surface_8h" kindref="compound">wayland/surface.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/compositor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/connection_thread.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/event_queue.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/region.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/registry.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/shm_pool.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/subcompositor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/subsurface.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/surface.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Wayland</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wayland-client.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><ref refid="x11keyread_8cpp_1ac0925a94f4858115ad1f04be885ac3b3" kindref="member">Q_DECLARE_METATYPE</ref>(KWayland::Client::SubSurface::Mode)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="class_test_sub_surface" refkind="compound"><highlight class="normal">class<sp/><ref refid="class_test_sub_surface_1a92aff185906bc5150fd8e4ea2526e1fc" kindref="member">TestSubSurface</ref><sp/>:<sp/>public<sp/>QObject</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_test_sub_surface_1a92aff185906bc5150fd8e4ea2526e1fc" kindref="member">TestSubSurface</ref>(QObject<sp/>*parent<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Q_SLOTS:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanup();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testCreate();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testMode();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testPosition_data();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testPosition();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testPlaceAbove();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testPlaceBelow();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testSyncMode();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testDeSyncMode();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testMainSurfaceFromTree();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRemoveSurface();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testMappingOfSurfaceTree();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testSurfaceAt();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testDestroyAttachedBuffer();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testDestroyParentSurface();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testDestroyCommittedSubSurfaceBeforeParent();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_display" kindref="compound">KWin::Display</ref><sp/>*m_display;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_compositor_interface" kindref="compound">KWin::CompositorInterface</ref><sp/>*m_compositorInterface;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_sub_compositor_interface" kindref="compound">KWin::SubCompositorInterface</ref><sp/>*m_subcompositorInterface;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::ConnectionThread<sp/>*m_connection;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::Compositor<sp/>*m_compositor;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::ShmPool<sp/>*m_shm;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::SubCompositor<sp/>*m_subCompositor;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::EventQueue<sp/>*m_queue;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>QThread<sp/>*m_thread;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>s_socketName<sp/>=<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;kwayland-test-wayland-subsurface-0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="class_test_sub_surface_1a92aff185906bc5150fd8e4ea2526e1fc" refkind="member"><highlight class="normal"><ref refid="class_test_sub_surface_1a92aff185906bc5150fd8e4ea2526e1fc" kindref="member">TestSubSurface::TestSubSurface</ref>(QObject<sp/>*parent)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>QObject(parent)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_display(nullptr)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_compositorInterface(nullptr)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_subcompositorInterface(nullptr)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_connection(nullptr)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_compositor(nullptr)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_shm(nullptr)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_subCompositor(nullptr)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_queue(nullptr)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_thread(nullptr)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSubSurface::init()</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win" kindref="compound">KWin</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_display;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_display" kindref="compound">KWin::Display</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display-&gt;<ref refid="class_k_win_1_1_display_1aa4c4acfe47f745065df276fab792b431" kindref="member">addSocketName</ref>(s_socketName);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display-&gt;<ref refid="class_k_win_1_1_display_1af36443417f1832645373ce713cb226c7" kindref="member">start</ref>();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_display-&gt;<ref refid="class_k_win_1_1_display_1aa50d346a6be40bd7db06214c0350456a" kindref="member">isRunning</ref>());</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display-&gt;<ref refid="class_k_win_1_1_display_1a0be7cd8fa84fabd7a6f51f9819f7d7e1" kindref="member">createShm</ref>();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>connection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>KWayland::Client::ConnectionThread;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>connectedSpy(m_connection,<sp/>&amp;KWayland::Client::ConnectionThread::connected);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection-&gt;setSocketName(s_socketName);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>m_thread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QThread(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection-&gt;moveToThread(m_thread);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>m_thread-&gt;start();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection-&gt;initConnection();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(connectedSpy.wait());</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>m_queue<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>KWayland::Client::EventQueue(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!m_queue-&gt;isValid());</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>m_queue-&gt;setup(m_connection);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_queue-&gt;isValid());</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::Registry<sp/>registry;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>compositorSpy(&amp;registry,<sp/>&amp;KWayland::Client::Registry::compositorAnnounced);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>subCompositorSpy(&amp;registry,<sp/>&amp;KWayland::Client::Registry::subCompositorAnnounced);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!registry.eventQueue());</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.setEventQueue(m_queue);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(registry.eventQueue(),<sp/>m_queue);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.create(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(registry.isValid());</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.setup();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>m_compositorInterface<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_compositor_interface" kindref="compound">CompositorInterface</ref>(m_display,<sp/>m_display);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>m_subcompositorInterface<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_sub_compositor_interface" kindref="compound">SubCompositorInterface</ref>(m_display,<sp/>m_display);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_subcompositorInterface);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(subCompositorSpy.wait());</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>m_subCompositor<sp/>=<sp/>registry.createSubCompositor(subCompositorSpy.first().first().value&lt;quint32&gt;(),<sp/>subCompositorSpy.first().last().value&lt;quint32&gt;(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compositorSpy.isEmpty())<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(compositorSpy.wait());</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>m_compositor<sp/>=<sp/>registry.createCompositor(compositorSpy.first().first().value&lt;quint32&gt;(),<sp/>compositorSpy.first().last().value&lt;quint32&gt;(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>m_shm<sp/>=<sp/>registry.createShmPool(registry.interface(KWayland::Client::Registry::Interface::Shm).name,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.interface(KWayland::Client::Registry::Interface::Shm).version,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_shm-&gt;isValid());</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSubSurface::cleanup()</highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_shm)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_shm;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_shm<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_subCompositor)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_subCompositor;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_subCompositor<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_compositor)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_compositor;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_compositor<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_queue)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_queue;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_queue<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_thread)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_thread-&gt;quit();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_thread-&gt;wait();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_thread;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_thread<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_connection;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_display;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSubSurface::testCreate()</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceCreatedSpy(m_compositorInterface,<sp/>&amp;<ref refid="class_k_win_1_1_compositor_interface_1a4a560a885ed69d43af0c857331e25592" kindref="member">KWin::CompositorInterface::surfaceCreated</ref>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>two<sp/>Surfaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*serverSurface<sp/>=<sp/>surfaceCreatedSpy.first().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurface);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>surfaceCreatedSpy.clear();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>parent(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*serverParentSurface<sp/>=<sp/>surfaceCreatedSpy.first().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverParentSurface);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>subSurfaceCreatedSpy(m_subcompositorInterface,<sp/>&amp;<ref refid="class_k_win_1_1_sub_compositor_interface_1a370036949479585c8d47df52165c19c6" kindref="member">KWin::SubCompositorInterface::subSurfaceCreated</ref>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>subSurface<sp/>for<sp/>surface<sp/>of<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::SubSurface&gt;<sp/>subSurface(m_subCompositor-&gt;createSubSurface(surface.get(),<sp/>parent.get()));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(subSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>SubSurfaceInterface<sp/>*serverSubSurface<sp/>=<sp/>subSurfaceCreatedSpy.first().first().value&lt;KWin::SubSurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSubSurface);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSubSurface-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>());</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>(),<sp/>serverParentSurface);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a835e595db96452e83d9bcc23b3e48d68" kindref="member">surface</ref>(),<sp/>serverSurface);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a8c35c1fcb861e552405f054fc2386def" kindref="member">subSurface</ref>(),<sp/>serverSubSurface);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1af71fe28a901624f2d6f1857db53030e8" kindref="member">mainSurface</ref>(),<sp/>serverParentSurface);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>children<sp/>are<sp/>only<sp/>added<sp/>after<sp/>committing<sp/>the<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverParentSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().count(),<sp/>0);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>QEXPECT_FAIL(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>adding<sp/>of<sp/>child<sp/>windows<sp/>to<sp/>workaround<sp/>QtWayland<sp/>behavior&quot;</highlight><highlight class="normal">,<sp/>Continue);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverParentSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().count(),<sp/>0);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>let&apos;s<sp/>commit<sp/>the<sp/>surface,<sp/>to<sp/>apply<sp/>the<sp/>stacking<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverParentSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().count(),<sp/>0);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverParentSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().count(),<sp/>1);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverParentSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().constFirst(),<sp/>serverSubSurface);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>let&apos;s<sp/>destroy<sp/>it<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>destroyedSpy(serverSubSurface,<sp/>&amp;QObject::destroyed);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurface.reset();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(destroyedSpy.wait());</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a8c35c1fcb861e552405f054fc2386def" kindref="member">subSurface</ref>(),<sp/>QPointer&lt;SubSurfaceInterface&gt;());</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>applied<sp/>after<sp/>next<sp/>commit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverParentSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().count(),<sp/>0);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>QEXPECT_FAIL(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>removing<sp/>of<sp/>child<sp/>windows<sp/>to<sp/>workaround<sp/>QtWayland<sp/>behavior&quot;</highlight><highlight class="normal">,<sp/>Continue);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverParentSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().count(),<sp/>1);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>the<sp/>surface<sp/>should<sp/>be<sp/>invalid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!serverParentSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().isEmpty())<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(!serverParentSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().constFirst());</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>committing<sp/>the<sp/>state<sp/>should<sp/>solve<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverParentSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().count(),<sp/>0);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverParentSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().count(),<sp/>0);</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSubSurface::testMode()</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>two<sp/>Surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>parent(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>subSurfaceCreatedSpy(m_subcompositorInterface,<sp/>&amp;<ref refid="class_k_win_1_1_sub_compositor_interface_1a370036949479585c8d47df52165c19c6" kindref="member">KWin::SubCompositorInterface::subSurfaceCreated</ref>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>SubSurface<sp/>for<sp/>surface<sp/>of<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::SubSurface&gt;<sp/>subSurface(m_subCompositor-&gt;createSubSurface(surface.get(),<sp/>parent.get()));</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(subSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>SubSurfaceInterface<sp/>*serverSubSurface<sp/>=<sp/>subSurfaceCreatedSpy.first().first().value&lt;KWin::SubSurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSubSurface);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>both<sp/>client<sp/>and<sp/>server<sp/>subsurface<sp/>should<sp/>be<sp/>in<sp/>synchronized<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(subSurface-&gt;mode(),<sp/>KWayland::Client::SubSurface::Mode::Synchronized);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a9bbe6f1780310e25b2bb66a718f2e2bb" kindref="member">mode</ref>(),<sp/>SubSurfaceInterface::Mode::Synchronized);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>verify<sp/>that<sp/>we<sp/>can<sp/>change<sp/>to<sp/>desynchronized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>modeChangedSpy(serverSubSurface,<sp/>&amp;<ref refid="class_k_win_1_1_sub_surface_interface_1ad6995e06a5af294696ef05f074b3083a" kindref="member">KWin::SubSurfaceInterface::modeChanged</ref>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurface-&gt;setMode(KWayland::Client::SubSurface::Mode::Desynchronized);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(subSurface-&gt;mode(),<sp/>KWayland::Client::SubSurface::Mode::Desynchronized);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(modeChangedSpy.wait());</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(modeChangedSpy.first().first().value&lt;<ref refid="class_k_win_1_1_sub_surface_interface_1ac69a41a5757cc4fe3633111e54de0943" kindref="member">KWin::SubSurfaceInterface::Mode</ref>&gt;(),<sp/>SubSurfaceInterface::Mode::Desynchronized);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a9bbe6f1780310e25b2bb66a718f2e2bb" kindref="member">mode</ref>(),<sp/>SubSurfaceInterface::Mode::Desynchronized);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setting<sp/>the<sp/>same<sp/>again<sp/>won&apos;t<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurface-&gt;setMode(KWayland::Client::SubSurface::Mode::Desynchronized);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(subSurface-&gt;mode(),<sp/>KWayland::Client::SubSurface::Mode::Desynchronized);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>testing<sp/>the<sp/>signal,<sp/>we<sp/>do<sp/>that<sp/>after<sp/>changing<sp/>to<sp/>synchronized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>change<sp/>back<sp/>to<sp/>synchronized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurface-&gt;setMode(KWayland::Client::SubSurface::Mode::Synchronized);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(subSurface-&gt;mode(),<sp/>KWayland::Client::SubSurface::Mode::Synchronized);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(modeChangedSpy.wait());</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(modeChangedSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(modeChangedSpy.first().first().value&lt;<ref refid="class_k_win_1_1_sub_surface_interface_1ac69a41a5757cc4fe3633111e54de0943" kindref="member">KWin::SubSurfaceInterface::Mode</ref>&gt;(),<sp/>SubSurfaceInterface::Mode::Desynchronized);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(modeChangedSpy.last().first().value&lt;<ref refid="class_k_win_1_1_sub_surface_interface_1ac69a41a5757cc4fe3633111e54de0943" kindref="member">KWin::SubSurfaceInterface::Mode</ref>&gt;(),<sp/>SubSurfaceInterface::Mode::Synchronized);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a9bbe6f1780310e25b2bb66a718f2e2bb" kindref="member">mode</ref>(),<sp/>SubSurfaceInterface::Mode::Synchronized);</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSubSurface::testPosition_data()</highlight></codeline>
<codeline lineno="278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;KWayland::Client::SubSurface::Mode&gt;(</highlight><highlight class="stringliteral">&quot;commitMode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;sync&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>KWayland::Client::SubSurface::Mode::Synchronized;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addRow(</highlight><highlight class="stringliteral">&quot;desync&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>KWayland::Client::SubSurface::Mode::Desynchronized;</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSubSurface::testPosition()</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>two<sp/>Surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>parent(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>subSurfaceCreatedSpy(m_subcompositorInterface,<sp/>&amp;<ref refid="class_k_win_1_1_sub_compositor_interface_1a370036949479585c8d47df52165c19c6" kindref="member">KWin::SubCompositorInterface::subSurfaceCreated</ref>);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>SubSurface<sp/>for<sp/>surface<sp/>of<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::SubSurface&gt;<sp/>subSurface(m_subCompositor-&gt;createSubSurface(surface.get(),<sp/>parent.get()));</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(subSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>SubSurfaceInterface<sp/>*serverSubSurface<sp/>=<sp/>subSurfaceCreatedSpy.first().first().value&lt;KWin::SubSurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSubSurface);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>the<sp/>subsurface<sp/>in<sp/>the<sp/>desired<sp/>commit<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(KWayland::Client::SubSurface::Mode,<sp/>commitMode);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurface-&gt;setMode(commitMode);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>both<sp/>client<sp/>and<sp/>server<sp/>should<sp/>have<sp/>a<sp/>default<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(subSurface-&gt;position(),<sp/>QPoint());</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a89fa5bfb83370e1b02c88d70391baa1b" kindref="member">position</ref>(),<sp/>QPoint());</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>positionChangedSpy(serverSubSurface,<sp/>&amp;<ref refid="class_k_win_1_1_sub_surface_interface_1aba13b910f01e983d0ae76e55b7eb5a53" kindref="member">KWin::SubSurfaceInterface::positionChanged</ref>);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>changing<sp/>the<sp/>position<sp/>should<sp/>not<sp/>trigger<sp/>a<sp/>direct<sp/>update<sp/>on<sp/>server<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurface-&gt;setPosition(QPoint(10,<sp/>20));</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(subSurface-&gt;position(),<sp/>QPoint(10,<sp/>20));</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>it&apos;s<sp/>processed<sp/>on<sp/>server<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a89fa5bfb83370e1b02c88d70391baa1b" kindref="member">position</ref>(),<sp/>QPoint());</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>changing<sp/>once<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurface-&gt;setPosition(QPoint(20,<sp/>30));</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(subSurface-&gt;position(),<sp/>QPoint(20,<sp/>30));</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>it&apos;s<sp/>processed<sp/>on<sp/>server<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a89fa5bfb83370e1b02c88d70391baa1b" kindref="member">position</ref>(),<sp/>QPoint());</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>committing<sp/>the<sp/>parent<sp/>surface<sp/>should<sp/>update<sp/>the<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>parentCommittedSpy(serverSubSurface-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>(),<sp/>&amp;SurfaceInterface::committed);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parentCommittedSpy.wait());</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(positionChangedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(positionChangedSpy.first().first().toPoint(),<sp/>QPoint(20,<sp/>30));</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a89fa5bfb83370e1b02c88d70391baa1b" kindref="member">position</ref>(),<sp/>QPoint(20,<sp/>30));</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSubSurface::testPlaceAbove()</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>needed<sp/>Surfaces<sp/>(one<sp/>parent,<sp/>three<sp/>client</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface1(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface2(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface3(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>parent(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>subSurfaceCreatedSpy(m_subcompositorInterface,<sp/>&amp;<ref refid="class_k_win_1_1_sub_compositor_interface_1a370036949479585c8d47df52165c19c6" kindref="member">KWin::SubCompositorInterface::subSurfaceCreated</ref>);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>SubSurfaces<sp/>for<sp/>surface<sp/>of<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::SubSurface&gt;<sp/>subSurface1(m_subCompositor-&gt;createSubSurface(surface1.get(),<sp/>parent.get()));</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(subSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>SubSurfaceInterface<sp/>*serverSubSurface1<sp/>=<sp/>subSurfaceCreatedSpy.first().first().value&lt;KWin::SubSurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSubSurface1);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurfaceCreatedSpy.clear();</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::SubSurface&gt;<sp/>subSurface2(m_subCompositor-&gt;createSubSurface(surface2.get(),<sp/>parent.get()));</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(subSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>SubSurfaceInterface<sp/>*serverSubSurface2<sp/>=<sp/>subSurfaceCreatedSpy.first().first().value&lt;KWin::SubSurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSubSurface2);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurfaceCreatedSpy.clear();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::SubSurface&gt;<sp/>subSurface3(m_subCompositor-&gt;createSubSurface(surface3.get(),<sp/>parent.get()));</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(subSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>SubSurfaceInterface<sp/>*serverSubSurface3<sp/>=<sp/>subSurfaceCreatedSpy.first().first().value&lt;KWin::SubSurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSubSurface3);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurfaceCreatedSpy.clear();</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>far<sp/>the<sp/>stacking<sp/>order<sp/>should<sp/>still<sp/>be<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().isEmpty());</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>QEXPECT_FAIL(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>adding<sp/>of<sp/>child<sp/>windows<sp/>to<sp/>workaround<sp/>QtWayland<sp/>behavior&quot;</highlight><highlight class="normal">,<sp/>Continue);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().isEmpty());</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>committing<sp/>the<sp/>parent<sp/>should<sp/>create<sp/>the<sp/>stacking<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>it&apos;s<sp/>processed<sp/>on<sp/>server<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().count(),<sp/>0);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().count(),<sp/>3);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(0),<sp/>serverSubSurface1);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(1),<sp/>serverSubSurface2);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(2),<sp/>serverSubSurface3);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>raising<sp/>subsurface1<sp/>should<sp/>place<sp/>it<sp/>to<sp/>top<sp/>of<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurface1-&gt;placeAbove(subSurface3.get());</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>it&apos;s<sp/>processed<sp/>on<sp/>server<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>as<sp/>long<sp/>as<sp/>parent<sp/>is<sp/>not<sp/>committed<sp/>it<sp/>shouldn&apos;t<sp/>change<sp/>on<sp/>server<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(0),<sp/>serverSubSurface1);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>commit<sp/>it&apos;s<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().count(),<sp/>3);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(0),<sp/>serverSubSurface2);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(1),<sp/>serverSubSurface3);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(2),<sp/>serverSubSurface1);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>placing<sp/>3<sp/>above<sp/>1,<sp/>should<sp/>result<sp/>in<sp/>2,<sp/>1,<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurface3-&gt;placeAbove(subSurface1.get());</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().count(),<sp/>3);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(0),<sp/>serverSubSurface2);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(1),<sp/>serverSubSurface1);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(2),<sp/>serverSubSurface3);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>placing<sp/>3<sp/>above<sp/>2,<sp/>should<sp/>result<sp/>in<sp/>2,<sp/>3,<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurface3-&gt;placeAbove(subSurface2.get());</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().count(),<sp/>3);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(0),<sp/>serverSubSurface2);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(1),<sp/>serverSubSurface3);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(2),<sp/>serverSubSurface1);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>placing<sp/>1<sp/>above<sp/>3<sp/>-<sp/>shouldn&apos;t<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurface1-&gt;placeAbove(subSurface3.get());</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().count(),<sp/>3);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(0),<sp/>serverSubSurface2);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(1),<sp/>serverSubSurface3);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(2),<sp/>serverSubSurface1);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>2<sp/>above<sp/>3<sp/>-<sp/>&gt;<sp/>3,<sp/>2,<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurface2-&gt;placeAbove(subSurface3.get());</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().count(),<sp/>3);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(0),<sp/>serverSubSurface3);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(1),<sp/>serverSubSurface2);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(2),<sp/>serverSubSurface1);</highlight></codeline>
<codeline lineno="433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSubSurface::testPlaceBelow()</highlight></codeline>
<codeline lineno="436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>needed<sp/>Surfaces<sp/>(one<sp/>parent,<sp/>three<sp/>client</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface1(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface2(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface3(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>parent(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>subSurfaceCreatedSpy(m_subcompositorInterface,<sp/>&amp;<ref refid="class_k_win_1_1_sub_compositor_interface_1a370036949479585c8d47df52165c19c6" kindref="member">KWin::SubCompositorInterface::subSurfaceCreated</ref>);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>SubSurfaces<sp/>for<sp/>surface<sp/>of<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::SubSurface&gt;<sp/>subSurface1(m_subCompositor-&gt;createSubSurface(surface1.get(),<sp/>parent.get()));</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(subSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>SubSurfaceInterface<sp/>*serverSubSurface1<sp/>=<sp/>subSurfaceCreatedSpy.first().first().value&lt;KWin::SubSurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSubSurface1);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurfaceCreatedSpy.clear();</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::SubSurface&gt;<sp/>subSurface2(m_subCompositor-&gt;createSubSurface(surface2.get(),<sp/>parent.get()));</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(subSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>SubSurfaceInterface<sp/>*serverSubSurface2<sp/>=<sp/>subSurfaceCreatedSpy.first().first().value&lt;KWin::SubSurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSubSurface2);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurfaceCreatedSpy.clear();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::SubSurface&gt;<sp/>subSurface3(m_subCompositor-&gt;createSubSurface(surface3.get(),<sp/>parent.get()));</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(subSurfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>SubSurfaceInterface<sp/>*serverSubSurface3<sp/>=<sp/>subSurfaceCreatedSpy.first().first().value&lt;KWin::SubSurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSubSurface3);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurfaceCreatedSpy.clear();</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>far<sp/>the<sp/>stacking<sp/>order<sp/>should<sp/>still<sp/>be<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().isEmpty());</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>QEXPECT_FAIL(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>adding<sp/>of<sp/>child<sp/>windows<sp/>to<sp/>workaround<sp/>QtWayland<sp/>behavior&quot;</highlight><highlight class="normal">,<sp/>Continue);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().isEmpty());</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>committing<sp/>the<sp/>parent<sp/>should<sp/>create<sp/>the<sp/>stacking<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>it&apos;s<sp/>processed<sp/>on<sp/>server<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().count(),<sp/>3);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(0),<sp/>serverSubSurface1);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(1),<sp/>serverSubSurface2);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(2),<sp/>serverSubSurface3);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lowering<sp/>subsurface3<sp/>should<sp/>place<sp/>it<sp/>to<sp/>the<sp/>bottom<sp/>of<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurface3-&gt;lower();</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>it&apos;s<sp/>processed<sp/>on<sp/>server<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>as<sp/>long<sp/>as<sp/>parent<sp/>is<sp/>not<sp/>committed<sp/>it<sp/>shouldn&apos;t<sp/>change<sp/>on<sp/>server<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(0),<sp/>serverSubSurface1);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>commit<sp/>it&apos;s<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().count(),<sp/>1);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().at(0),<sp/>serverSubSurface3);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().count(),<sp/>2);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(0),<sp/>serverSubSurface1);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(1),<sp/>serverSubSurface2);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>place<sp/>1<sp/>below<sp/>3<sp/>-&gt;<sp/>1,<sp/>3,<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurface1-&gt;placeBelow(subSurface3.get());</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().count(),<sp/>2);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().at(0),<sp/>serverSubSurface1);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().at(1),<sp/>serverSubSurface3);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().count(),<sp/>1);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().at(0),<sp/>serverSubSurface2);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>below<sp/>3<sp/>-&gt;<sp/>1,<sp/>2,<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurface2-&gt;placeBelow(subSurface3.get());</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().count(),<sp/>3);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().at(0),<sp/>serverSubSurface1);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().at(1),<sp/>serverSubSurface2);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().at(2),<sp/>serverSubSurface3);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().count(),<sp/>0);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>below<sp/>2<sp/>-&gt;<sp/>shouldn&apos;t<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurface1-&gt;placeBelow(subSurface2.get());</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().count(),<sp/>3);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().at(0),<sp/>serverSubSurface1);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().at(1),<sp/>serverSubSurface2);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().at(2),<sp/>serverSubSurface3);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().count(),<sp/>0);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>3<sp/>below<sp/>1<sp/>-&gt;<sp/>3,<sp/>1,<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurface3-&gt;placeBelow(subSurface1.get());</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_flush(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication::processEvents();</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().count(),<sp/>3);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().at(0),<sp/>serverSubSurface3);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().at(1),<sp/>serverSubSurface1);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" kindref="member">below</ref>().at(2),<sp/>serverSubSurface2);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverSubSurface1-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>()-&gt;<ref refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" kindref="member">above</ref>().count(),<sp/>0);</highlight></codeline>
<codeline lineno="538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSubSurface::testSyncMode()</highlight></codeline>
<codeline lineno="541"><highlight class="normal">{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>state<sp/>is<sp/>only<sp/>applied<sp/>when<sp/>the<sp/>parent<sp/>surface<sp/>commits<sp/>its<sp/>pending<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceCreatedSpy(m_compositorInterface,<sp/>&amp;CompositorInterface::surfaceCreated);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childSurface<sp/>=<sp/>surfaceCreatedSpy.first().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childSurface);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>parent(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parentSurface<sp/>=<sp/>surfaceCreatedSpy.last().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parentSurface);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>subSurface<sp/>for<sp/>surface<sp/>of<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::SubSurface&gt;<sp/>subSurface(m_subCompositor-&gt;createSubSurface(surface.get(),<sp/>parent.get()));</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let&apos;s<sp/>damage<sp/>the<sp/>child<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>childDamagedSpy(childSurface,<sp/>&amp;SurfaceInterface::damaged);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>image(QSize(200,<sp/>200),<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>image.fill(Qt::black);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;attachBuffer(m_shm-&gt;createBuffer(image));</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;damage(QRect(0,<sp/>0,<sp/>200,<sp/>200));</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit();</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state<sp/>should<sp/>be<sp/>applied<sp/>when<sp/>the<sp/>parent<sp/>surface&apos;s<sp/>state<sp/>gets<sp/>applied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!childDamagedSpy.wait(100));</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!childSurface-&gt;buffer());</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!childSurface-&gt;isMapped());</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!parentSurface-&gt;isMapped());</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>image2(QSize(400,<sp/>400),<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>image2.fill(Qt::red);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;attachBuffer(m_shm-&gt;createBuffer(image2));</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;damage(QRect(0,<sp/>0,<sp/>400,<sp/>400));</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;commit();</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childDamagedSpy.wait());</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(childDamagedSpy.count(),<sp/>1);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childSurface-&gt;isMapped());</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parentSurface-&gt;isMapped());</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSubSurface::testDeSyncMode()</highlight></codeline>
<codeline lineno="587"><highlight class="normal">{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>state<sp/>gets<sp/>applied<sp/>immediately<sp/>in<sp/>desync<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceCreatedSpy(m_compositorInterface,<sp/>&amp;CompositorInterface::surfaceCreated);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>surface(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childSurface<sp/>=<sp/>surfaceCreatedSpy.first().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childSurface);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>parent(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parentSurface<sp/>=<sp/>surfaceCreatedSpy.last().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parentSurface);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>subSurface<sp/>for<sp/>surface<sp/>of<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::SubSurface&gt;<sp/>subSurface(m_subCompositor-&gt;createSubSurface(surface.get(),<sp/>parent.get()));</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let&apos;s<sp/>damage<sp/>the<sp/>child<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>childDamagedSpy(childSurface,<sp/>&amp;SurfaceInterface::damaged);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>image(QSize(200,<sp/>200),<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>image.fill(Qt::black);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;attachBuffer(m_shm-&gt;createBuffer(image));</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;damage(QRect(0,<sp/>0,<sp/>200,<sp/>200));</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state<sp/>should<sp/>be<sp/>applied<sp/>when<sp/>the<sp/>parent<sp/>surface&apos;s<sp/>state<sp/>gets<sp/>applied<sp/>or<sp/>when<sp/>the<sp/>subsurface<sp/>switches<sp/>to<sp/>desync</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!childDamagedSpy.wait(100));</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!childSurface-&gt;isMapped());</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!parentSurface-&gt;isMapped());</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setting<sp/>to<sp/>desync<sp/>should<sp/>apply<sp/>the<sp/>state<sp/>directly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurface-&gt;setMode(KWayland::Client::SubSurface::Mode::Desynchronized);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childDamagedSpy.wait());</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!childSurface-&gt;isMapped());</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!parentSurface-&gt;isMapped());</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>damaging<sp/>again,<sp/>should<sp/>directly<sp/>be<sp/>applied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>image.fill(Qt::red);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;attachBuffer(m_shm-&gt;createBuffer(image));</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;damage(QRect(0,<sp/>0,<sp/>200,<sp/>200));</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childDamagedSpy.wait());</highlight></codeline>
<codeline lineno="631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSubSurface::testMainSurfaceFromTree()</highlight></codeline>
<codeline lineno="634"><highlight class="normal">{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>in<sp/>a<sp/>tree<sp/>of<sp/>surfaces<sp/>every<sp/>surface<sp/>has<sp/>the<sp/>same<sp/>main<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceCreatedSpy(m_compositorInterface,<sp/>&amp;CompositorInterface::surfaceCreated);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>parentSurface(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parentServerSurface<sp/>=<sp/>surfaceCreatedSpy.last().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parentServerSurface);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>childLevel1Surface(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childLevel1ServerSurface<sp/>=<sp/>surfaceCreatedSpy.last().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childLevel1ServerSurface);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>childLevel2Surface(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childLevel2ServerSurface<sp/>=<sp/>surfaceCreatedSpy.last().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childLevel2ServerSurface);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>childLevel3Surface(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childLevel3ServerSurface<sp/>=<sp/>surfaceCreatedSpy.last().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childLevel3ServerSurface);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>m_subCompositor-&gt;createSubSurface(childLevel1Surface.get(),<sp/>parentSurface.get());</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>m_subCompositor-&gt;createSubSurface(childLevel2Surface.get(),<sp/>childLevel1Surface.get());</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>m_subCompositor-&gt;createSubSurface(childLevel3Surface.get(),<sp/>childLevel2Surface.get());</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>parentCommittedSpy(parentServerSurface,<sp/>&amp;SurfaceInterface::committed);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>parentSurface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parentCommittedSpy.wait());</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;below().count(),<sp/>0);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;above().count(),<sp/>1);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>child<sp/>=<sp/>parentServerSurface-&gt;above().constFirst();</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child-&gt;parentSurface(),<sp/>parentServerSurface);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child-&gt;mainSurface(),<sp/>parentServerSurface);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child-&gt;surface()-&gt;below().count(),<sp/>0);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child-&gt;surface()-&gt;above().count(),<sp/>1);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>child2<sp/>=<sp/>child-&gt;surface()-&gt;above().constFirst();</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child2-&gt;parentSurface(),<sp/>child-&gt;surface());</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child2-&gt;mainSurface(),<sp/>parentServerSurface);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child2-&gt;surface()-&gt;below().count(),<sp/>0);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child2-&gt;surface()-&gt;above().count(),<sp/>1);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>child3<sp/>=<sp/>child2-&gt;surface()-&gt;above().constFirst();</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child3-&gt;parentSurface(),<sp/>child2-&gt;surface());</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child3-&gt;mainSurface(),<sp/>parentServerSurface);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child3-&gt;surface()-&gt;below().count(),<sp/>0);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child3-&gt;surface()-&gt;above().count(),<sp/>0);</highlight></codeline>
<codeline lineno="681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSubSurface::testRemoveSurface()</highlight></codeline>
<codeline lineno="684"><highlight class="normal">{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>removing<sp/>the<sp/>surface<sp/>also<sp/>removes<sp/>the<sp/>sub-surface<sp/>from<sp/>the<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceCreatedSpy(m_compositorInterface,<sp/>&amp;CompositorInterface::surfaceCreated);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>parentSurface(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parentServerSurface<sp/>=<sp/>surfaceCreatedSpy.last().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parentServerSurface);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>childSurface(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childServerSurface<sp/>=<sp/>surfaceCreatedSpy.last().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childServerSurface);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>childrenChangedSpy(parentServerSurface,<sp/>&amp;SurfaceInterface::childSubSurfacesChanged);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>m_subCompositor-&gt;createSubSurface(childSurface.get(),<sp/>parentSurface.get());</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>parentSurface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childrenChangedSpy.wait());</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;below().count(),<sp/>0);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;above().count(),<sp/>1);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>destroy<sp/>surface,<sp/>takes<sp/>place<sp/>immediately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>childSurface.reset();</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childrenChangedSpy.wait());</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;below().count(),<sp/>0);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;above().count(),<sp/>0);</highlight></codeline>
<codeline lineno="713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSubSurface::testMappingOfSurfaceTree()</highlight></codeline>
<codeline lineno="716"><highlight class="normal">{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>mapping<sp/>and<sp/>unmapping<sp/>of<sp/>a<sp/>sub-surface<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>surfaceCreatedSpy(m_compositorInterface,<sp/>&amp;CompositorInterface::surfaceCreated);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>parentSurface(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parentServerSurface<sp/>=<sp/>surfaceCreatedSpy.last().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parentServerSurface);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>childLevel1Surface(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childLevel1ServerSurface<sp/>=<sp/>surfaceCreatedSpy.last().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childLevel1ServerSurface);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>childLevel2Surface(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childLevel2ServerSurface<sp/>=<sp/>surfaceCreatedSpy.last().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childLevel2ServerSurface);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>childLevel3Surface(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(surfaceCreatedSpy.wait());</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childLevel3ServerSurface<sp/>=<sp/>surfaceCreatedSpy.last().first().value&lt;SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childLevel3ServerSurface);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>subSurfaceLevel1<sp/>=<sp/>m_subCompositor-&gt;createSubSurface(childLevel1Surface.get(),<sp/>parentSurface.get());</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>subSurfaceLevel2<sp/>=<sp/>m_subCompositor-&gt;createSubSurface(childLevel2Surface.get(),<sp/>childLevel1Surface.get());</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>subSurfaceLevel3<sp/>=<sp/>m_subCompositor-&gt;createSubSurface(childLevel3Surface.get(),<sp/>childLevel2Surface.get());</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>parentCommittedSpy(parentServerSurface,<sp/>&amp;SurfaceInterface::committed);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>parentSurface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parentCommittedSpy.wait());</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;below().count(),<sp/>0);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;above().count(),<sp/>1);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>child<sp/>=<sp/>parentServerSurface-&gt;above().constFirst();</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child-&gt;surface()-&gt;below().count(),<sp/>0);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child-&gt;surface()-&gt;above().count(),<sp/>1);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>child2<sp/>=<sp/>child-&gt;surface()-&gt;above().constFirst();</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child2-&gt;surface()-&gt;below().count(),<sp/>0);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child2-&gt;surface()-&gt;above().count(),<sp/>1);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>child3<sp/>=<sp/>child2-&gt;surface()-&gt;above().constFirst();</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child3-&gt;parentSurface(),<sp/>child2-&gt;surface());</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child3-&gt;mainSurface(),<sp/>parentServerSurface);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child3-&gt;surface()-&gt;below().count(),<sp/>0);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(child3-&gt;surface()-&gt;above().count(),<sp/>0);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>far<sp/>no<sp/>surface<sp/>is<sp/>mapped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!parentServerSurface-&gt;isMapped());</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!child-&gt;surface()-&gt;isMapped());</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!child2-&gt;surface()-&gt;isMapped());</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!child3-&gt;surface()-&gt;isMapped());</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>set<sp/>all<sp/>subsurfaces<sp/>to<sp/>desync,<sp/>to<sp/>simplify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurfaceLevel1-&gt;setMode(KWayland::Client::SubSurface::Mode::Desynchronized);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurfaceLevel2-&gt;setMode(KWayland::Client::SubSurface::Mode::Desynchronized);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>subSurfaceLevel3-&gt;setMode(KWayland::Client::SubSurface::Mode::Desynchronized);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>map<sp/>the<sp/>child,<sp/>should<sp/>not<sp/>map<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>child3DamageSpy(child3-&gt;surface(),<sp/>&amp;SurfaceInterface::damaged);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>image(QSize(200,<sp/>200),<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>image.fill(Qt::black);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>childLevel3Surface-&gt;attachBuffer(m_shm-&gt;createBuffer(image));</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>childLevel3Surface-&gt;damage(QRect(0,<sp/>0,<sp/>200,<sp/>200));</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>childLevel3Surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(child3DamageSpy.wait());</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(child3-&gt;surface()-&gt;buffer());</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!child3-&gt;surface()-&gt;isMapped());</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let&apos;s<sp/>map<sp/>the<sp/>top<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>parentSpy(parentServerSurface,<sp/>&amp;SurfaceInterface::damaged);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>parentSurface-&gt;attachBuffer(m_shm-&gt;createBuffer(image));</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>parentSurface-&gt;damage(QRect(0,<sp/>0,<sp/>200,<sp/>200));</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>parentSurface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parentSpy.wait());</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parentServerSurface-&gt;isMapped());</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>children<sp/>should<sp/>not<sp/>yet<sp/>be<sp/>mapped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!child-&gt;surface()-&gt;isMapped());</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!child2-&gt;surface()-&gt;isMapped());</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!child3-&gt;surface()-&gt;isMapped());</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>next<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>child2DamageSpy(child2-&gt;surface(),<sp/>&amp;SurfaceInterface::damaged);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>childLevel2Surface-&gt;attachBuffer(m_shm-&gt;createBuffer(image));</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>childLevel2Surface-&gt;damage(QRect(0,<sp/>0,<sp/>200,<sp/>200));</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>childLevel2Surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(child2DamageSpy.wait());</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parentServerSurface-&gt;isMapped());</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>children<sp/>should<sp/>not<sp/>yet<sp/>be<sp/>mapped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!child-&gt;surface()-&gt;isMapped());</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!child2-&gt;surface()-&gt;isMapped());</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!child3-&gt;surface()-&gt;isMapped());</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>but<sp/>not<sp/>least<sp/>the<sp/>first<sp/>child<sp/>level,<sp/>which<sp/>should<sp/>map<sp/>all<sp/>our<sp/>subsurfaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>child1DamageSpy(child-&gt;surface(),<sp/>&amp;SurfaceInterface::damaged);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>childLevel1Surface-&gt;attachBuffer(m_shm-&gt;createBuffer(image));</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>childLevel1Surface-&gt;damage(QRect(0,<sp/>0,<sp/>200,<sp/>200));</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>childLevel1Surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(child1DamageSpy.wait());</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>everything<sp/>is<sp/>mapped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parentServerSurface-&gt;isMapped());</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(child-&gt;surface()-&gt;isMapped());</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(child2-&gt;surface()-&gt;isMapped());</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(child3-&gt;surface()-&gt;isMapped());</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unmapping<sp/>a<sp/>parent<sp/>should<sp/>unmap<sp/>the<sp/>complete<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>unmappedSpy(child-&gt;surface(),<sp/>&amp;SurfaceInterface::unmapped);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>childLevel1Surface-&gt;attachBuffer(KWayland::Client::Buffer::Ptr());</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>childLevel1Surface-&gt;damage(QRect(0,<sp/>0,<sp/>200,<sp/>200));</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>childLevel1Surface-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(unmappedSpy.wait());</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parentServerSurface-&gt;isMapped());</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!child-&gt;surface()-&gt;isMapped());</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!child2-&gt;surface()-&gt;isMapped());</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!child3-&gt;surface()-&gt;isMapped());</highlight></codeline>
<codeline lineno="830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSubSurface::testSurfaceAt()</highlight></codeline>
<codeline lineno="833"><highlight class="normal">{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>the<sp/>correct<sp/>surface<sp/>is<sp/>picked<sp/>in<sp/>a<sp/>sub-surface<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>create<sp/>a<sp/>parent<sp/>surface<sp/>and<sp/>map<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverSurfaceCreated(m_compositorInterface,<sp/>&amp;CompositorInterface::surfaceCreated);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>parent(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>image(QSize(100,<sp/>100),<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>image.fill(Qt::red);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;attachBuffer(m_shm-&gt;createBuffer(image));</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;damage(QRect(0,<sp/>0,<sp/>100,<sp/>100));</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*parentServerSurface<sp/>=<sp/>serverSurfaceCreated.last().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>directChild1<sp/>occupies<sp/>the<sp/>top-left<sp/>quarter<sp/>of<sp/>the<sp/>parent<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>directImage(QSize(50,<sp/>50),<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>directChild1(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>directChild1-&gt;attachBuffer(m_shm-&gt;createBuffer(directImage));</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>directChild1-&gt;damage(QRect(0,<sp/>0,<sp/>50,<sp/>50));</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>directChild1-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*directChild1ServerSurface<sp/>=<sp/>serverSurfaceCreated.last().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(directChild1ServerSurface);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>directChild2<sp/>occupies<sp/>the<sp/>bottom-right<sp/>quarter<sp/>of<sp/>the<sp/>parent<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>directChild2(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>directChild2-&gt;attachBuffer(m_shm-&gt;createBuffer(directImage));</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>directChild2-&gt;damage(QRect(0,<sp/>0,<sp/>50,<sp/>50));</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>directChild2-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*directChild2ServerSurface<sp/>=<sp/>serverSurfaceCreated.last().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(directChild2ServerSurface);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>sub<sp/>surfaces<sp/>for<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::SubSurface&gt;<sp/>directChild1SubSurface(m_subCompositor-&gt;createSubSurface(directChild1.get(),<sp/>parent.get()));</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>directChild1SubSurface-&gt;setMode(KWayland::Client::SubSurface::Mode::Desynchronized);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::SubSurface&gt;<sp/>directChild2SubSurface(m_subCompositor-&gt;createSubSurface(directChild2.get(),<sp/>parent.get()));</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>directChild2SubSurface-&gt;setMode(KWayland::Client::SubSurface::Mode::Desynchronized);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>directChild2SubSurface-&gt;setPosition(QPoint(50,<sp/>50));</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unset<sp/>input<sp/>regions<sp/>for<sp/>direct<sp/>children</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>directChild1CommittedSpy(directChild1ServerSurface,<sp/>&amp;SurfaceInterface::committed);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>directChild1-&gt;setInputRegion(m_compositor-&gt;createRegion(QRegion()).get());</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>directChild1-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(directChild1CommittedSpy.wait());</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>directChild2CommittedSpy(directChild2ServerSurface,<sp/>&amp;SurfaceInterface::committed);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>directChild2-&gt;setInputRegion(m_compositor-&gt;createRegion(QRegion()).get());</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>directChild2-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(directChild2CommittedSpy.wait());</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>each<sp/>of<sp/>the<sp/>children<sp/>gets<sp/>a<sp/>child</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>childFor1(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*childFor1ServerSurface<sp/>=<sp/>serverSurfaceCreated.last().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>childFor2(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*childFor2ServerSurface<sp/>=<sp/>serverSurfaceCreated.last().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>sub<sp/>surfaces<sp/>for<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::SubSurface&gt;<sp/>childFor1SubSurface(m_subCompositor-&gt;createSubSurface(childFor1.get(),<sp/>directChild1.get()));</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>childFor1SubSurface-&gt;setMode(KWayland::Client::SubSurface::Mode::Desynchronized);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::SubSurface&gt;<sp/>childFor2SubSurface(m_subCompositor-&gt;createSubSurface(childFor2.get(),<sp/>directChild2.get()));</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>childFor2SubSurface-&gt;setMode(KWayland::Client::SubSurface::Mode::Desynchronized);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>let&apos;s<sp/>render<sp/>both<sp/>grand<sp/>children</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>partImage(QSize(50,<sp/>50),<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>partImage.fill(Qt::green);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>childFor1-&gt;attachBuffer(m_shm-&gt;createBuffer(partImage));</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>childFor1-&gt;damage(QRect(0,<sp/>0,<sp/>50,<sp/>50));</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>childFor1-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>partImage.fill(Qt::blue);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>childFor2CommittedSpy(childFor2ServerSurface,<sp/>&amp;SurfaceInterface::committed);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>childFor2-&gt;attachBuffer(m_shm-&gt;createBuffer(partImage));</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>child<sp/>for<sp/>2&apos;s<sp/>input<sp/>region<sp/>is<sp/>subdivided<sp/>into<sp/>quadrants,<sp/>with<sp/>input<sp/>mask<sp/>on<sp/>the<sp/>top<sp/>left<sp/>and<sp/>bottom<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>QRegion<sp/>region;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>region<sp/>+=<sp/>QRect(0,<sp/>0,<sp/>25,<sp/>25);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>region<sp/>+=<sp/>QRect(25,<sp/>25,<sp/>25,<sp/>25);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>childFor2-&gt;setInputRegion(m_compositor-&gt;createRegion(region).get());</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>childFor2-&gt;damage(QRect(0,<sp/>0,<sp/>50,<sp/>50));</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>childFor2-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(childFor2CommittedSpy.wait());</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(directChild1ServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a8c35c1fcb861e552405f054fc2386def" kindref="member">subSurface</ref>()-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>(),<sp/>parentServerSurface);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(directChild2ServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a8c35c1fcb861e552405f054fc2386def" kindref="member">subSurface</ref>()-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>(),<sp/>parentServerSurface);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(childFor1ServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a8c35c1fcb861e552405f054fc2386def" kindref="member">subSurface</ref>()-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>(),<sp/>directChild1ServerSurface);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(childFor2ServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a8c35c1fcb861e552405f054fc2386def" kindref="member">subSurface</ref>()-&gt;<ref refid="class_k_win_1_1_sub_surface_interface_1a53dea67dad7c6216621028e81082be6c" kindref="member">parentSurface</ref>(),<sp/>directChild2ServerSurface);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>let&apos;s<sp/>test<sp/>a<sp/>few<sp/>positions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a121877c312e955cc43e6aa4d337a525d" kindref="member">surfaceAt</ref>(QPointF(0,<sp/>0)),<sp/>childFor1ServerSurface);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a121877c312e955cc43e6aa4d337a525d" kindref="member">surfaceAt</ref>(QPointF(49,<sp/>49)),<sp/>childFor1ServerSurface);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a121877c312e955cc43e6aa4d337a525d" kindref="member">surfaceAt</ref>(QPointF(50,<sp/>50)),<sp/>childFor2ServerSurface);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a121877c312e955cc43e6aa4d337a525d" kindref="member">surfaceAt</ref>(QPointF(99,<sp/>99)),<sp/>childFor2ServerSurface);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a121877c312e955cc43e6aa4d337a525d" kindref="member">surfaceAt</ref>(QPointF(99,<sp/>50)),<sp/>childFor2ServerSurface);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a121877c312e955cc43e6aa4d337a525d" kindref="member">surfaceAt</ref>(QPointF(50,<sp/>99)),<sp/>childFor2ServerSurface);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a121877c312e955cc43e6aa4d337a525d" kindref="member">surfaceAt</ref>(QPointF(25,<sp/>75)),<sp/>parentServerSurface);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a121877c312e955cc43e6aa4d337a525d" kindref="member">surfaceAt</ref>(QPointF(75,<sp/>25)),<sp/>parentServerSurface);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1af7a3a3ccbdff6ffd690e357fd02f2fcc" kindref="member">inputSurfaceAt</ref>(QPointF(0,<sp/>0)),<sp/>childFor1ServerSurface);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1af7a3a3ccbdff6ffd690e357fd02f2fcc" kindref="member">inputSurfaceAt</ref>(QPointF(49,<sp/>49)),<sp/>childFor1ServerSurface);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1af7a3a3ccbdff6ffd690e357fd02f2fcc" kindref="member">inputSurfaceAt</ref>(QPointF(50,<sp/>50)),<sp/>childFor2ServerSurface);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1af7a3a3ccbdff6ffd690e357fd02f2fcc" kindref="member">inputSurfaceAt</ref>(QPointF(99,<sp/>99)),<sp/>childFor2ServerSurface);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1af7a3a3ccbdff6ffd690e357fd02f2fcc" kindref="member">inputSurfaceAt</ref>(QPointF(99,<sp/>50)),<sp/>parentServerSurface);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1af7a3a3ccbdff6ffd690e357fd02f2fcc" kindref="member">inputSurfaceAt</ref>(QPointF(50,<sp/>99)),<sp/>parentServerSurface);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1af7a3a3ccbdff6ffd690e357fd02f2fcc" kindref="member">inputSurfaceAt</ref>(QPointF(25,<sp/>75)),<sp/>parentServerSurface);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1af7a3a3ccbdff6ffd690e357fd02f2fcc" kindref="member">inputSurfaceAt</ref>(QPointF(75,<sp/>25)),<sp/>parentServerSurface);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>outside<sp/>the<sp/>geometries<sp/>should<sp/>be<sp/>no<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!parentServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a121877c312e955cc43e6aa4d337a525d" kindref="member">surfaceAt</ref>(QPointF(-1,<sp/>-1)));</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!parentServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a121877c312e955cc43e6aa4d337a525d" kindref="member">surfaceAt</ref>(QPointF(101,<sp/>101)));</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>surface<sp/>edge<sp/>right/bottom<sp/>edges<sp/>should<sp/>not<sp/>trigger<sp/>as<sp/>contained</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a121877c312e955cc43e6aa4d337a525d" kindref="member">surfaceAt</ref>(QPointF(50,<sp/>25)),<sp/>parentServerSurface);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1a121877c312e955cc43e6aa4d337a525d" kindref="member">surfaceAt</ref>(QPointF(25,<sp/>50)),<sp/>parentServerSurface);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1af7a3a3ccbdff6ffd690e357fd02f2fcc" kindref="member">inputSurfaceAt</ref>(QPointF(50,<sp/>25)),<sp/>parentServerSurface);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(parentServerSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1af7a3a3ccbdff6ffd690e357fd02f2fcc" kindref="member">inputSurfaceAt</ref>(QPointF(25,<sp/>50)),<sp/>parentServerSurface);</highlight></codeline>
<codeline lineno="952"><highlight class="normal">}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSubSurface::testDestroyAttachedBuffer()</highlight></codeline>
<codeline lineno="955"><highlight class="normal">{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>destroying<sp/>of<sp/>a<sp/>buffer<sp/>attached<sp/>to<sp/>a<sp/>sub-surface<sp/>works</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverSurfaceCreated(m_compositorInterface,<sp/>&amp;CompositorInterface::surfaceCreated);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>parent(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>child(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*serverChildSurface<sp/>=<sp/>serverSurfaceCreated.last().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>sub-surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>m_subCompositor-&gt;createSubSurface(child.get(),<sp/>parent.get());</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let&apos;s<sp/>damage<sp/>this<sp/>surface,<sp/>will<sp/>be<sp/>in<sp/>sub-surface<sp/>pending<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>image(QSize(100,<sp/>100),<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>image.fill(Qt::red);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>child-&gt;attachBuffer(m_shm-&gt;createBuffer(image));</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>child-&gt;damage(QRect(0,<sp/>0,<sp/>100,<sp/>100));</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>child-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection-&gt;flush();</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let&apos;s<sp/>try<sp/>to<sp/>destroy<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>destroySpy(serverChildSurface,<sp/>&amp;QObject::destroyed);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_shm;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>m_shm<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>child.reset();</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(destroySpy.wait());</highlight></codeline>
<codeline lineno="982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSubSurface::testDestroyParentSurface()</highlight></codeline>
<codeline lineno="985"><highlight class="normal">{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>destroying<sp/>a<sp/>parent<sp/>surface<sp/>does<sp/>not<sp/>create<sp/>problems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>BUG<sp/>389231</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverSurfaceCreated(m_compositorInterface,<sp/>&amp;CompositorInterface::surfaceCreated);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>parent(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*serverParentSurface<sp/>=<sp/>serverSurfaceCreated.last().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>child(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*serverChildSurface<sp/>=<sp/>serverSurfaceCreated.last().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>grandChild(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*serverGrandChildSurface<sp/>=<sp/>serverSurfaceCreated.last().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>sub-surface<sp/>in<sp/>desynchronized<sp/>mode<sp/>as<sp/>Qt<sp/>uses<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sub1<sp/>=<sp/>m_subCompositor-&gt;createSubSurface(child.get(),<sp/>parent.get());</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>sub1-&gt;setMode(KWayland::Client::SubSurface::Mode::Desynchronized);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sub2<sp/>=<sp/>m_subCompositor-&gt;createSubSurface(grandChild.get(),<sp/>child.get());</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>sub2-&gt;setMode(KWayland::Client::SubSurface::Mode::Desynchronized);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let&apos;s<sp/>damage<sp/>this<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>at<sp/>the<sp/>same<sp/>time<sp/>delete<sp/>the<sp/>parent<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>parent.reset();</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>parentDestroyedSpy(serverParentSurface,<sp/>&amp;QObject::destroyed);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parentDestroyedSpy.wait());</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>QImage<sp/>image(QSize(100,<sp/>100),<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>image.fill(Qt::red);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>grandChild-&gt;attachBuffer(m_shm-&gt;createBuffer(image));</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>grandChild-&gt;damage(QRect(0,<sp/>0,<sp/>100,<sp/>100));</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>grandChild-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>damagedSpy(serverGrandChildSurface,<sp/>&amp;SurfaceInterface::damaged);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(damagedSpy.wait());</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let&apos;s<sp/>try<sp/>to<sp/>destroy<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>destroySpy(serverChildSurface,<sp/>&amp;QObject::destroyed);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>child.reset();</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(destroySpy.wait());</highlight></codeline>
<codeline lineno="1023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSubSurface::testDestroyCommittedSubSurfaceBeforeParent()</highlight></codeline>
<codeline lineno="1026"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>test<sp/>verifies<sp/>that<sp/>no<sp/>crash<sp/>occurs<sp/>when<sp/>a<sp/>committed<sp/>synchronized<sp/>subsurface<sp/>is<sp/>destroyed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>the<sp/>parent<sp/>is<sp/>committed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">KWin;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>serverSurfaceCreated(m_compositorInterface,<sp/>&amp;CompositorInterface::surfaceCreated);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>parent(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*serverParentSurface<sp/>=<sp/>serverSurfaceCreated.last().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>child(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>SurfaceInterface<sp/>*serverChildSurface<sp/>=<sp/>serverSurfaceCreated.last().first().value&lt;KWin::SurfaceInterface<sp/>*&gt;();</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;KWayland::Client::Surface&gt;<sp/>grandChild(m_compositor-&gt;createSurface());</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(serverSurfaceCreated.wait());</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>firstSubSurface<sp/>=<sp/>m_subCompositor-&gt;createSubSurface(child.get(),<sp/>parent.get());</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>firstSubSurface-&gt;setMode(KWayland::Client::SubSurface::Mode::Synchronized);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>secondSubSurface<sp/>=<sp/>m_subCompositor-&gt;createSubSurface(grandChild.get(),<sp/>child.get());</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>secondSubSurface-&gt;setMode(KWayland::Client::SubSurface::Mode::Synchronized);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QImage<sp/>image(QSize(100,<sp/>100),<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image.fill(Qt::red);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grandChild-&gt;attachBuffer(m_shm-&gt;createBuffer(image));</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grandChild-&gt;damage(QRect(0,<sp/>0,<sp/>100,<sp/>100));</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grandChild-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QImage<sp/>image(QSize(75,<sp/>75),<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image.fill(Qt::red);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;attachBuffer(m_shm-&gt;createBuffer(image));</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;damage(QRect(0,<sp/>0,<sp/>75,<sp/>75));</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>secondSubSurface;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grandChild.reset();</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QImage<sp/>image(QSize(60,<sp/>60),<sp/>QImage::Format_ARGB32_Premultiplied);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image.fill(Qt::red);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent-&gt;attachBuffer(m_shm-&gt;createBuffer(image));</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent-&gt;damage(QRect(0,<sp/>0,<sp/>60,<sp/>60));</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent-&gt;commit(KWayland::Client::Surface::CommitFlag::None);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>parentCommittedSpy(serverParentSurface,<sp/>&amp;SurfaceInterface::committed);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(parentCommittedSpy.wait());</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverParentSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1ad4b3c49e2e99aa0f949c85507850a6b6" kindref="member">size</ref>(),<sp/>QSize(60,<sp/>60));</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(serverChildSurface-&gt;<ref refid="class_k_win_1_1_surface_interface_1ad4b3c49e2e99aa0f949c85507850a6b6" kindref="member">size</ref>(),<sp/>QSize(75,<sp/>75));</highlight></codeline>
<codeline lineno="1083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal">QTEST_GUILESS_MAIN(<ref refid="class_test_sub_surface" kindref="compound">TestSubSurface</ref>)</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_wayland_subsurface.moc&quot;</highlight></codeline>
    </programlisting>
    <location file="kwin/autotests/wayland/client/test_wayland_subsurface.cpp"/>
  </compounddef>
</doxygen>
