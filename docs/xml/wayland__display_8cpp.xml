<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="wayland__display_8cpp" kind="file" language="C++">
    <compoundname>wayland_display.cpp</compoundname>
    <includes refid="wayland__display_8h" local="yes">wayland_display.h</includes>
    <includes refid="memorymap_8h" local="yes">utils/memorymap.h</includes>
    <includes refid="wayland__logging_8h" local="yes">wayland_logging.h</includes>
    <includes local="no">KWayland/Client/compositor.h</includes>
    <includes local="no">KWayland/Client/pointerconstraints.h</includes>
    <includes local="no">KWayland/Client/pointergestures.h</includes>
    <includes local="no">KWayland/Client/registry.h</includes>
    <includes local="no">KWayland/Client/relativepointer.h</includes>
    <includes local="no">KWayland/Client/seat.h</includes>
    <includes local="no">KWayland/Client/subcompositor.h</includes>
    <includes local="no">KWayland/Client/xdgdecoration.h</includes>
    <includes local="no">KWayland/Client/xdgshell.h</includes>
    <includes local="no">QMutex</includes>
    <includes local="no">QThread</includes>
    <includes local="no">QWaitCondition</includes>
    <includes local="no">drm_fourcc.h</includes>
    <includes local="no">fcntl.h</includes>
    <includes local="no">poll.h</includes>
    <includes local="no">span</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">wayland-client.h</includes>
    <includes local="no">xf86drm.h</includes>
    <includes refid="color__manager_8h" local="yes">color_manager.h</includes>
    <includes local="yes">wayland-linux-dmabuf-unstable-v1-client-protocol.h</includes>
    <includes local="yes">wayland-pointer-constraints-unstable-v1-client-protocol.h</includes>
    <includes local="yes">wayland-pointer-gestures-unstable-v1-server-protocol.h</includes>
    <includes local="yes">wayland-presentation-time-client-protocol.h</includes>
    <includes local="yes">wayland-relative-pointer-unstable-v1-client-protocol.h</includes>
    <includes local="yes">wayland-tearing-control-v1-client-protocol.h</includes>
    <includes local="yes">wayland-xdg-decoration-unstable-v1-client-protocol.h</includes>
    <includes local="yes">wayland-xdg-shell-client-protocol.h</includes>
    <includes local="yes">wayland_display.moc</includes>
    <includes local="yes">moc_wayland_display.cpp</includes>
    <incdepgraph>
      <node id="31">
        <label>color_manager.h</label>
        <link refid="color__manager_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>kwin/src/backends/wayland/wayland_display.cpp</label>
        <link refid="wayland__display_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>wayland_display.h</label>
        <link refid="wayland__display_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>wayland_logging.h</label>
        <link refid="wayland__logging_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>core/colorspace.h</label>
        <link refid="colorspace_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>utils/memorymap.h</label>
        <link refid="memorymap_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>KWayland/Client/compositor.h</label>
      </node>
      <node id="13">
        <label>KWayland/Client/pointerconstraints.h</label>
      </node>
      <node id="14">
        <label>KWayland/Client/pointergestures.h</label>
      </node>
      <node id="15">
        <label>KWayland/Client/registry.h</label>
      </node>
      <node id="16">
        <label>KWayland/Client/relativepointer.h</label>
      </node>
      <node id="17">
        <label>KWayland/Client/seat.h</label>
      </node>
      <node id="18">
        <label>KWayland/Client/subcompositor.h</label>
      </node>
      <node id="19">
        <label>KWayland/Client/xdgdecoration.h</label>
      </node>
      <node id="20">
        <label>KWayland/Client/xdgshell.h</label>
      </node>
      <node id="10">
        <label>QDebug</label>
      </node>
      <node id="3">
        <label>QHash</label>
      </node>
      <node id="38">
        <label>QList</label>
      </node>
      <node id="11">
        <label>QLoggingCategory</label>
      </node>
      <node id="34">
        <label>QMatrix4x4</label>
      </node>
      <node id="21">
        <label>QMutex</label>
      </node>
      <node id="4">
        <label>QObject</label>
      </node>
      <node id="22">
        <label>QThread</label>
      </node>
      <node id="35">
        <label>QVector2D</label>
      </node>
      <node id="23">
        <label>QWaitCondition</label>
      </node>
      <node id="24">
        <label>drm_fourcc.h</label>
      </node>
      <node id="25">
        <label>fcntl.h</label>
      </node>
      <node id="36">
        <label>kwin_export.h</label>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
      <node id="48">
        <label>moc_wayland_display.cpp</label>
      </node>
      <node id="33">
        <label>optional</label>
      </node>
      <node id="26">
        <label>poll.h</label>
      </node>
      <node id="27">
        <label>span</label>
      </node>
      <node id="7">
        <label>sys/mman.h</label>
      </node>
      <node id="28">
        <label>unistd.h</label>
      </node>
      <node id="8">
        <label>utility</label>
      </node>
      <node id="29">
        <label>wayland-client.h</label>
      </node>
      <node id="37">
        <label>wayland-color-management-v1-client-protocol.h</label>
      </node>
      <node id="39">
        <label>wayland-linux-dmabuf-unstable-v1-client-protocol.h</label>
      </node>
      <node id="40">
        <label>wayland-pointer-constraints-unstable-v1-client-protocol.h</label>
      </node>
      <node id="41">
        <label>wayland-pointer-gestures-unstable-v1-server-protocol.h</label>
      </node>
      <node id="42">
        <label>wayland-presentation-time-client-protocol.h</label>
      </node>
      <node id="43">
        <label>wayland-relative-pointer-unstable-v1-client-protocol.h</label>
      </node>
      <node id="44">
        <label>wayland-tearing-control-v1-client-protocol.h</label>
      </node>
      <node id="45">
        <label>wayland-xdg-decoration-unstable-v1-client-protocol.h</label>
      </node>
      <node id="46">
        <label>wayland-xdg-shell-client-protocol.h</label>
      </node>
      <node id="47">
        <label>wayland_display.moc</label>
      </node>
      <node id="30">
        <label>xf86drm.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_k_win_1_1_wayland_1_1_wayland_event_thread" prot="public">KWin::Wayland::WaylandEventThread</innerclass>
    <innerclass refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1" prot="public">KWin::Wayland::WaylandLinuxDmabufFeedbackV1</innerclass>
    <innernamespace refid="namespace_k_win">KWin</innernamespace>
    <innernamespace refid="namespace_k_win_1_1_wayland">KWin::Wayland</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2022<sp/>Vlad<sp/>Zahorodnii<sp/>&lt;vlad.zahorodnii@kde.org&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wayland__display_8h" kindref="compound">wayland_display.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="memorymap_8h" kindref="compound">utils/memorymap.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wayland__logging_8h" kindref="compound">wayland_logging.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/compositor.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/pointerconstraints.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/pointergestures.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/registry.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/relativepointer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/seat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/subcompositor.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/xdgdecoration.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;KWayland/Client/xdgshell.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QMutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QThread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QWaitCondition&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drm_fourcc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;poll.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;span&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wayland-client.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;xf86drm.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="color__manager_8h" kindref="compound">color_manager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generated<sp/>in<sp/>src/wayland.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;wayland-linux-dmabuf-unstable-v1-client-protocol.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;wayland-pointer-constraints-unstable-v1-client-protocol.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;wayland-pointer-gestures-unstable-v1-server-protocol.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;wayland-presentation-time-client-protocol.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;wayland-relative-pointer-unstable-v1-client-protocol.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;wayland-tearing-control-v1-client-protocol.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;wayland-xdg-decoration-unstable-v1-client-protocol.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;wayland-xdg-shell-client-protocol.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win" kindref="compound">KWin</ref></highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref></highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="class_k_win_1_1_wayland_1_1_wayland_event_thread" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_event_thread_1aed39210292fd8d60c22eb520890b1da5" kindref="member">WaylandEventThread</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QThread</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="55" refid="class_k_win_1_1_wayland_1_1_wayland_event_thread_1aed39210292fd8d60c22eb520890b1da5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_event_thread_1aed39210292fd8d60c22eb520890b1da5" kindref="member">WaylandEventThread</ref>(wl_display<sp/>*display)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_display(display)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>m_fd(wl_display_get_fd(display))</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>m_quitPipe{-1,<sp/>-1}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>m_reading(true)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>m_quitting(false)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pipe2(m_quitPipe,<sp/>O_CLOEXEC)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qCWarning(KWIN_WAYLAND_BACKEND)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>quite<sp/>pipe<sp/>in<sp/>WaylandEventThread&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="class_k_win_1_1_wayland_1_1_wayland_event_thread_1a0c74cb7ca35c6803307978d47fbcd4de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_event_thread_1a0c74cb7ca35c6803307978d47fbcd4de" kindref="member">~WaylandEventThread</ref>()</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline lineno="68"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_quitPipe[0]<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(m_quitPipe[0]);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(m_quitPipe[1]);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="class_k_win_1_1_wayland_1_1_wayland_event_thread_1a7e9564442ee8d6c5dd73f5334fddc6c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_event_thread_1a7e9564442ee8d6c5dd73f5334fddc6c4" kindref="member">dispatch</ref>()</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wl_display_dispatch_pending(m_display)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qFatal(</highlight><highlight class="stringliteral">&quot;Wayland<sp/>connection<sp/>broke&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wl_display_flush(m_display);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_reading.loadAcquire())<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wl_display_prepare_read(m_display)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QMutexLocker<sp/>lock(&amp;m_mutex);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reading.storeRelease(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_cond.wakeOne();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="class_k_win_1_1_wayland_1_1_wayland_event_thread_1a2d4d432c38c37343dc5c5bb22562bf92" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_event_thread_1a2d4d432c38c37343dc5c5bb22562bf92" kindref="member">stop</ref>()</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_quitPipe[1]<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write(m_quitPipe[1],<sp/></highlight><highlight class="stringliteral">&quot;\0&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_mutex.lock();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_quitting<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_cond.wakeOne();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_mutex.unlock();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wait();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">Q_SIGNALS:</highlight></codeline>
<codeline lineno="112" refid="class_k_win_1_1_wayland_1_1_wayland_event_thread_1a6096b81c533b07ac52483c7dadf203eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_event_thread_1a6096b81c533b07ac52483c7dadf203eb" kindref="member">available</ref>();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="115" refid="class_k_win_1_1_wayland_1_1_wayland_event_thread_1acc22b0964638cb3b440e8ccfeade3df1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_event_thread_1acc22b0964638cb3b440e8ccfeade3df1" kindref="member">run</ref>()</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline lineno="116"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reading.storeRelease(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q_EMIT<sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_event_thread_1a6096b81c533b07ac52483c7dadf203eb" kindref="member">available</ref>();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_mutex.lock();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!m_reading.loadRelaxed()<sp/>&amp;&amp;<sp/>!m_quitting)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_cond.wait(&amp;m_mutex);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_mutex.unlock();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_quitting)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pollfd<sp/>fds[2]<sp/>=<sp/>{<sp/>{<sp/>m_fd,<sp/>POLLIN,<sp/>0<sp/>},<sp/>{<sp/>m_quitPipe[0],<sp/>POLLIN,<sp/>0<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poll(fds,<sp/>2,<sp/>-1);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fds[1].revents<sp/>&amp;<sp/>POLLIN)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wl_display_cancel_read(m_display);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fds[0].revents<sp/>&amp;<sp/>POLLIN)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wl_display_read_events(m_display);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wl_display_cancel_read(m_display);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>m_display;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_fd;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_quitPipe[2];</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>QAtomicInteger&lt;bool&gt;<sp/>m_reading;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>QMutex<sp/>m_mutex;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>QWaitCondition<sp/>m_cond;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_quitting;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">};</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>dev_t<sp/>deserializeDeviceId(wl_array<sp/>*data)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_ASSERT(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dev_t)<sp/>==<sp/>data-&gt;size);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>dev_t<sp/>ret;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memcpy(&amp;ret,<sp/>data-&gt;data,<sp/>data-&gt;size);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1acaba5f0418abebad3a9e56d1fc352f79" kindref="member">WaylandLinuxDmabufFeedbackV1</ref></highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="169" refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1acaba5f0418abebad3a9e56d1fc352f79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1acaba5f0418abebad3a9e56d1fc352f79" kindref="member">WaylandLinuxDmabufFeedbackV1</ref>(zwp_linux_dmabuf_feedback_v1<sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref>)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref>(<ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref>)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">zwp_linux_dmabuf_feedback_v1_listener<sp/>feedbackListener<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.done<sp/>=<sp/>done,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.format_table<sp/>=<sp/>format_table,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.main_device<sp/>=<sp/>main_device,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.tranche_done<sp/>=<sp/>tranche_done,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.tranche_target_device<sp/>=<sp/>tranche_target_device,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.tranche_formats<sp/>=<sp/>tranche_formats,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.tranche_flags<sp/>=<sp/>tranche_flags,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zwp_linux_dmabuf_feedback_v1_add_listener(<ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref>,<sp/>&amp;feedbackListener,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a698b0bf2b0a52a11e2b9c7731ffa8352" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a698b0bf2b0a52a11e2b9c7731ffa8352" kindref="member">~WaylandLinuxDmabufFeedbackV1</ref>()</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zwp_linux_dmabuf_feedback_v1_destroy(<ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_linux_dmabuf_feedback_v1<sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref>;</highlight></codeline>
<codeline lineno="190" refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a26b06e489ceae805678102e375d3ae4b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>QByteArray<sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a26b06e489ceae805678102e375d3ae4b" kindref="member">mainDevice</ref>;</highlight></codeline>
<codeline lineno="191" refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a88b2363d638f28bcd91f3b5b3c5a94a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>dev_t<sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a88b2363d638f28bcd91f3b5b3c5a94a1" kindref="member">mainDeviceId</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="192" refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1accfebae132e35f59bc49399245820613" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>dev_t<sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1accfebae132e35f59bc49399245820613" kindref="member">trancheDeviceId</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="193" refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a605a50e503297f1cf3fcc398f1cc1436" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_memory_map" kindref="compound">MemoryMap</ref><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a605a50e503297f1cf3fcc398f1cc1436" kindref="member">formatTable</ref>;</highlight></codeline>
<codeline lineno="194" refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a337e8abfc335e61472be66968d403422" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>QHash&lt;uint32_t,<sp/>QList&lt;uint64_t&gt;&gt;<sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a337e8abfc335e61472be66968d403422" kindref="member">formats</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>done(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/>zwp_linux_dmabuf_feedback_v1<sp/>*zwp_linux_dmabuf_feedback_v1)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>format_table(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/>zwp_linux_dmabuf_feedback_v1<sp/>*zwp_linux_dmabuf_feedback_v1,<sp/>int32_t<sp/>fd,<sp/>uint32_t<sp/>size)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1" kindref="compound">WaylandLinuxDmabufFeedbackV1</ref><sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1" kindref="compound">WaylandLinuxDmabufFeedbackV1</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref>-&gt;<ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a605a50e503297f1cf3fcc398f1cc1436" kindref="member">formatTable</ref><sp/>=<sp/><ref refid="class_k_win_1_1_memory_map" kindref="compound">MemoryMap</ref>(size,<sp/>PROT_READ,<sp/>MAP_PRIVATE,<sp/>fd,<sp/>0);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(fd);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>main_device(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/>zwp_linux_dmabuf_feedback_v1<sp/>*zwp_linux_dmabuf_feedback_v1,<sp/>wl_array<sp/>*deviceId)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1acaba5f0418abebad3a9e56d1fc352f79" kindref="member">WaylandLinuxDmabufFeedbackV1</ref><sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1acaba5f0418abebad3a9e56d1fc352f79" kindref="member">WaylandLinuxDmabufFeedbackV1</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref>-&gt;mainDeviceId<sp/>=<sp/>deserializeDeviceId(deviceId);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drmDevice<sp/>*device<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(drmGetDeviceFromDevId(<ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref>-&gt;mainDeviceId,<sp/>0,<sp/>&amp;device)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qCWarning(KWIN_WAYLAND_BACKEND)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;drmGetDeviceFromDevId()<sp/>failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;available_nodes<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>DRM_NODE_RENDER))<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref>-&gt;mainDevice<sp/>=<sp/>QByteArray(device-&gt;nodes[DRM_NODE_RENDER]);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;available_nodes<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>DRM_NODE_PRIMARY))<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can&apos;t<sp/>reliably<sp/>find<sp/>the<sp/>render<sp/>node<sp/>from<sp/>the<sp/>primary<sp/>node<sp/>if<sp/>the<sp/>display<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>render<sp/>devices<sp/>are<sp/>split,<sp/>so<sp/>just<sp/>fallback<sp/>to<sp/>the<sp/>primary<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref>-&gt;mainDevice<sp/>=<sp/>QByteArray(device-&gt;nodes[DRM_NODE_PRIMARY]);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drmFreeDevice(&amp;device);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>tranche_done(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/>zwp_linux_dmabuf_feedback_v1<sp/>*zwp_linux_dmabuf_feedback_v1)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1acaba5f0418abebad3a9e56d1fc352f79" kindref="member">WaylandLinuxDmabufFeedbackV1</ref><sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1acaba5f0418abebad3a9e56d1fc352f79" kindref="member">WaylandLinuxDmabufFeedbackV1</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref>-&gt;trancheDeviceId<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>tranche_target_device(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/>zwp_linux_dmabuf_feedback_v1<sp/>*zwp_linux_dmabuf_feedback_v1,<sp/>wl_array<sp/>*deviceId)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1acaba5f0418abebad3a9e56d1fc352f79" kindref="member">WaylandLinuxDmabufFeedbackV1</ref><sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1acaba5f0418abebad3a9e56d1fc352f79" kindref="member">WaylandLinuxDmabufFeedbackV1</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref>-&gt;trancheDeviceId<sp/>=<sp/>deserializeDeviceId(deviceId);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>tranche_formats(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/>zwp_linux_dmabuf_feedback_v1<sp/>*zwp_linux_dmabuf_feedback_v1,<sp/>wl_array<sp/>*indices)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1acaba5f0418abebad3a9e56d1fc352f79" kindref="member">WaylandLinuxDmabufFeedbackV1</ref><sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1acaba5f0418abebad3a9e56d1fc352f79" kindref="member">WaylandLinuxDmabufFeedbackV1</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref>-&gt;formatTable.isValid())<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref>-&gt;mainDeviceId<sp/>!=<sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref>-&gt;trancheDeviceId)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">linux_dmabuf_feedback_v1_table_entry</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="namespace_k_win_1a6ef3f38157c98f3fe83ae3ec855ee903" kindref="member">format</ref>;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>pad;<sp/></highlight><highlight class="comment">//<sp/>unused</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>modifier;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entries<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">linux_dmabuf_feedback_v1_table_entry<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref>-&gt;formatTable.data());</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>&amp;index<sp/>:<sp/>std::span(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(indices-&gt;data),<sp/>indices-&gt;size<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint16_t)))<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>linux_dmabuf_feedback_v1_table_entry<sp/>&amp;entry<sp/>=<sp/>entries[index];</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_feedback_v1_1a79997d4fd45eed1b1a1e14a810b3c629" kindref="member">feedback</ref>-&gt;formats[entry.format].append(entry.modifier);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>tranche_flags(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/>zwp_linux_dmabuf_feedback_v1<sp/>*zwp_linux_dmabuf_feedback_v1,<sp/>uint32_t<sp/>flags)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal">};</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_v1_1a3e5fe116baa1cf5dbcf74650e27b6b22" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_v1_1a3e5fe116baa1cf5dbcf74650e27b6b22" kindref="member">WaylandLinuxDmabufV1::WaylandLinuxDmabufV1</ref>(wl_registry<sp/>*registry,<sp/>uint32_t<sp/>name,<sp/>uint32_t<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>)</highlight></codeline>
<codeline lineno="278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>m_dmabuf<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">zwp_linux_dmabuf_v1<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(wl_registry_bind(registry,<sp/>name,<sp/>&amp;zwp_linux_dmabuf_v1_interface,<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>));</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">zwp_linux_dmabuf_v1_listener<sp/>dmabufListener<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.format<sp/>=<sp/>format,</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.modifier<sp/>=<sp/>modifier,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_linux_dmabuf_v1_add_listener(m_dmabuf,<sp/>&amp;dmabufListener,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>m_defaultFeedback<sp/>=<sp/>std::make_unique&lt;WaylandLinuxDmabufFeedbackV1&gt;(zwp_linux_dmabuf_v1_get_default_feedback(m_dmabuf));</highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_v1_1adab985052a662c12ab3c37d2be920d2e" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_v1_1adab985052a662c12ab3c37d2be920d2e" kindref="member">WaylandLinuxDmabufV1::~WaylandLinuxDmabufV1</ref>()</highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>zwp_linux_dmabuf_v1_destroy(m_dmabuf);</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_v1_1aa121b76b25d2c94042a70e0c85845c8b" refkind="member"><highlight class="normal">zwp_linux_dmabuf_v1<sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_v1_1aa121b76b25d2c94042a70e0c85845c8b" kindref="member">WaylandLinuxDmabufV1::handle</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="296"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_dmabuf;</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300" refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_v1_1a9a91b2fd3a24a8958d6bc6c1042c9ffc" refkind="member"><highlight class="normal">QByteArray<sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_v1_1a9a91b2fd3a24a8958d6bc6c1042c9ffc" kindref="member">WaylandLinuxDmabufV1::mainDevice</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="301"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_defaultFeedback-&gt;mainDevice;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_v1_1a702d419dc821b11b215021341ae69a38" refkind="member"><highlight class="normal">QHash&lt;uint32_t,<sp/>QList&lt;uint64_t&gt;&gt;<sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_v1_1a702d419dc821b11b215021341ae69a38" kindref="member">WaylandLinuxDmabufV1::formats</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="306"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_defaultFeedback-&gt;formats;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WaylandLinuxDmabufV1::format(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>zwp_linux_dmabuf_v1<sp/>*zwp_linux_dmabuf_v1,<sp/>uint32_t<sp/><ref refid="namespace_k_win_1a6ef3f38157c98f3fe83ae3ec855ee903" kindref="member">format</ref>)</highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>sent<sp/>in<sp/>v4<sp/>and<sp/>onward.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WaylandLinuxDmabufV1::modifier(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>zwp_linux_dmabuf_v1<sp/>*zwp_linux_dmabuf_v1,<sp/>uint32_t<sp/><ref refid="namespace_k_win_1a6ef3f38157c98f3fe83ae3ec855ee903" kindref="member">format</ref>,<sp/>uint32_t<sp/>modifier_hi,<sp/>uint32_t<sp/>modifier_lo)</highlight></codeline>
<codeline lineno="316"><highlight class="normal">{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>sent<sp/>in<sp/>v4<sp/>and<sp/>onward.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="class_k_win_1_1_wayland_1_1_wayland_display_1a11e9106402d0fbcd67f9c8d0719d2536" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_display_1a11e9106402d0fbcd67f9c8d0719d2536" kindref="member">WaylandDisplay::WaylandDisplay</ref>()</highlight></codeline>
<codeline lineno="321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="class_k_win_1_1_wayland_1_1_wayland_display_1aa539ca32529631811cbf34affe44a4cc" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_display_1aa539ca32529631811cbf34affe44a4cc" kindref="member">WaylandDisplay::~WaylandDisplay</ref>()</highlight></codeline>
<codeline lineno="325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>m_eventThread-&gt;stop();</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>m_eventThread.reset();</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>m_compositor.reset();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pointerConstraints.reset();</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pointerGestures.reset();</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>m_relativePointerManager.reset();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>m_seat.reset();</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>m_xdgDecorationManager.reset();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>m_xdgShell.reset();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>m_linuxDmabuf.reset();</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>m_colorManager.reset();</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_shm)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wl_shm_destroy(m_shm);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_presentationTime)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wp_presentation_destroy(m_presentationTime);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_tearingControl)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wp_tearing_control_manager_v1_destroy(m_tearingControl);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_registry)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wl_registry_destroy(m_registry);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_display)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wl_display_disconnect(m_display);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="class_k_win_1_1_wayland_1_1_wayland_display_1aec7eea5e3a3290c324e91ab24dff35c8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_display_1aec7eea5e3a3290c324e91ab24dff35c8" kindref="member">WaylandDisplay::flush</ref>()</highlight></codeline>
<codeline lineno="357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>m_eventThread-&gt;dispatch();</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361" refid="class_k_win_1_1_wayland_1_1_wayland_display_1a74d7d0a9e5e0682835140aa749d682c6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_display_1a74d7d0a9e5e0682835140aa749d682c6" kindref="member">WaylandDisplay::initialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>&amp;socketName)</highlight></codeline>
<codeline lineno="362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display<sp/>=<sp/>wl_display_connect(socketName.toUtf8());</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_display)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>m_eventThread<sp/>=<sp/>std::make_unique&lt;WaylandEventThread&gt;(m_display);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(m_eventThread.get(),<sp/>&amp;<ref refid="class_k_win_1_1_wayland_1_1_wayland_event_thread_1a6096b81c533b07ac52483c7dadf203eb" kindref="member">WaylandEventThread::available</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_k_win_1_1_wayland_1_1_wayland_display_1aec7eea5e3a3290c324e91ab24dff35c8" kindref="member">WaylandDisplay::flush</ref>,<sp/>Qt::QueuedConnection);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>m_eventThread-&gt;start();</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>wl_registry_listener<sp/>registryListener<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.global<sp/>=<sp/>registry_global,</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.global_remove<sp/>=<sp/>registry_global_remove,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>m_registry<sp/>=<sp/>wl_display_get_registry(m_display);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_registry_add_listener(m_registry,<sp/>&amp;registryListener,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_roundtrip(m_display);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>wl_display_roundtrip(m_display);<sp/></highlight><highlight class="comment">//<sp/>get<sp/>dmabuf<sp/>formats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384" refid="class_k_win_1_1_wayland_1_1_wayland_display_1a1a4358ab81e8fed73f661135afcc6420" refkind="member"><highlight class="normal">wl_display<sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_display_1a1a4358ab81e8fed73f661135afcc6420" kindref="member">WaylandDisplay::nativeDisplay</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="385"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_display;</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="class_k_win_1_1_wayland_1_1_wayland_display_1ab15043c365b9bab42e64f5756fa935ca" refkind="member"><highlight class="normal">KWayland::Client::Compositor<sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_display_1ab15043c365b9bab42e64f5756fa935ca" kindref="member">WaylandDisplay::compositor</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="390"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_compositor.get();</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394" refid="class_k_win_1_1_wayland_1_1_wayland_display_1a1d12b3b810d632d60534b23a45530a50" refkind="member"><highlight class="normal">KWayland::Client::PointerConstraints<sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_display_1a1d12b3b810d632d60534b23a45530a50" kindref="member">WaylandDisplay::pointerConstraints</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="395"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_pointerConstraints.get();</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="class_k_win_1_1_wayland_1_1_wayland_display_1aba4c32905c18eb3d17f9a06363321b9a" refkind="member"><highlight class="normal">KWayland::Client::PointerGestures<sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_display_1aba4c32905c18eb3d17f9a06363321b9a" kindref="member">WaylandDisplay::pointerGestures</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="400"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_pointerGestures.get();</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="class_k_win_1_1_wayland_1_1_wayland_display_1a6f660b083f7119838d3acebc68a87146" refkind="member"><highlight class="normal">KWayland::Client::RelativePointerManager<sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_display_1a6f660b083f7119838d3acebc68a87146" kindref="member">WaylandDisplay::relativePointerManager</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="405"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_relativePointerManager.get();</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409" refid="class_k_win_1_1_wayland_1_1_wayland_display_1a44ceab97b270c7fbd854f6f9dcb0f36a" refkind="member"><highlight class="normal">wl_shm<sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_display_1a44ceab97b270c7fbd854f6f9dcb0f36a" kindref="member">WaylandDisplay::shm</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="410"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_shm;</highlight></codeline>
<codeline lineno="412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414" refid="class_k_win_1_1_wayland_1_1_wayland_display_1add0bae570e89003f857c4fe8c16190fb" refkind="member"><highlight class="normal">KWayland::Client::Seat<sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_display_1add0bae570e89003f857c4fe8c16190fb" kindref="member">WaylandDisplay::seat</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="415"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_seat.get();</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="class_k_win_1_1_wayland_1_1_wayland_display_1ae8f00a8c957062545fbbb6e85f9ea938" refkind="member"><highlight class="normal">KWayland::Client::XdgShell<sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_display_1ae8f00a8c957062545fbbb6e85f9ea938" kindref="member">WaylandDisplay::xdgShell</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="420"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_xdgShell.get();</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424" refid="class_k_win_1_1_wayland_1_1_wayland_display_1a7eb95f268d4e7e553a6b1b57f2ad0cdb" refkind="member"><highlight class="normal">KWayland::Client::XdgDecorationManager<sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_display_1a7eb95f268d4e7e553a6b1b57f2ad0cdb" kindref="member">WaylandDisplay::xdgDecorationManager</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="425"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_xdgDecorationManager.get();</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="class_k_win_1_1_wayland_1_1_wayland_display_1a79ae91243b6e6386721c9d379df47b0a" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_linux_dmabuf_v1" kindref="compound">WaylandLinuxDmabufV1</ref><sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_display_1a79ae91243b6e6386721c9d379df47b0a" kindref="member">WaylandDisplay::linuxDmabuf</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="430"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_linuxDmabuf.get();</highlight></codeline>
<codeline lineno="432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434" refid="class_k_win_1_1_wayland_1_1_wayland_display_1aeb9d15d3211577633de4122a4746dc50" refkind="member"><highlight class="normal">wp_presentation<sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_display_1aeb9d15d3211577633de4122a4746dc50" kindref="member">WaylandDisplay::presentationTime</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="435"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_presentationTime;</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439" refid="class_k_win_1_1_wayland_1_1_wayland_display_1aa3ef74c4091d9d75f2b5e870fe104e01" refkind="member"><highlight class="normal">wp_tearing_control_manager_v1<sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_display_1aa3ef74c4091d9d75f2b5e870fe104e01" kindref="member">WaylandDisplay::tearingControl</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="440"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_tearingControl;</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444" refid="class_k_win_1_1_wayland_1_1_wayland_display_1a4899b6c6e017a084769330fd2b784092" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_color_manager" kindref="compound">ColorManager</ref><sp/>*<ref refid="class_k_win_1_1_wayland_1_1_wayland_display_1a4899b6c6e017a084769330fd2b784092" kindref="member">WaylandDisplay::colorManager</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="445"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_colorManager.get();</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WaylandDisplay::registry_global(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/>wl_registry<sp/>*registry,<sp/>uint32_t<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*interface,<sp/>uint32_t<sp/><ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>)</highlight></codeline>
<codeline lineno="450"><highlight class="normal">{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_wayland_1_1_wayland_display" kindref="compound">WaylandDisplay</ref><sp/>*display<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_k_win_1_1_wayland_1_1_wayland_display" kindref="compound">WaylandDisplay</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(interface,<sp/>wl_compositor_interface.name)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref><sp/>&lt;<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qFatal(</highlight><highlight class="stringliteral">&quot;wl_compositor<sp/>version<sp/>4<sp/>or<sp/>later<sp/>is<sp/>required&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display-&gt;m_compositor<sp/>=<sp/>std::make_unique&lt;KWayland::Client::Compositor&gt;();</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display-&gt;m_compositor-&gt;setup(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">wl_compositor<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(wl_registry_bind(registry,<sp/>name,<sp/>&amp;wl_compositor_interface,<sp/>std::min(<ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>,<sp/>4u))));</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(interface,<sp/>wl_shm_interface.name)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display-&gt;m_shm<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">wl_shm<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(wl_registry_bind(registry,<sp/>name,<sp/>&amp;wl_shm_interface,<sp/>std::min(<ref refid="xwaylandkeyboardgrab__v1_8cpp_1a15753f4ac4ad215e3e64d8f9e5bb5ff6" kindref="member">version</ref>,<sp/>1u)));</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(interface,<sp/>wl_seat_interface.name)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display-&gt;m_seat<sp/>=<sp/>std::make_unique&lt;KWayland::Client::Seat&gt;();</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display-&gt;m_seat-&gt;setup(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">wl_seat<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(wl_registry_bind(registry,<sp/>name,<sp/>&amp;wl_seat_interface,<sp/>std::min(<ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>,<sp/>5u))));</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(interface,<sp/>xdg_wm_base_interface.name)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display-&gt;m_xdgShell<sp/>=<sp/>std::make_unique&lt;KWayland::Client::XdgShellStable&gt;();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display-&gt;m_xdgShell-&gt;setup(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">xdg_wm_base<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(wl_registry_bind(registry,<sp/>name,<sp/>&amp;xdg_wm_base_interface,<sp/>std::min(<ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>,<sp/>1u))));</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(interface,<sp/>zwp_pointer_constraints_v1_interface.name)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display-&gt;m_pointerConstraints<sp/>=<sp/>std::make_unique&lt;KWayland::Client::PointerConstraints&gt;();</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display-&gt;m_pointerConstraints-&gt;setup(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">zwp_pointer_constraints_v1<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(wl_registry_bind(registry,<sp/>name,<sp/>&amp;zwp_pointer_constraints_v1_interface,<sp/>std::min(<ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>,<sp/>1u))));</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(interface,<sp/>zwp_pointer_gestures_v1_interface.name)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display-&gt;m_pointerGestures<sp/>=<sp/>std::make_unique&lt;KWayland::Client::PointerGestures&gt;();</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display-&gt;m_pointerGestures-&gt;setup(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">zwp_pointer_gestures_v1<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(wl_registry_bind(registry,<sp/>name,<sp/>&amp;zwp_pointer_gestures_v1_interface,<sp/>std::min(<ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>,<sp/>1u))));</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(interface,<sp/>zwp_relative_pointer_manager_v1_interface.name)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display-&gt;m_relativePointerManager<sp/>=<sp/>std::make_unique&lt;KWayland::Client::RelativePointerManager&gt;();</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display-&gt;m_relativePointerManager-&gt;setup(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">zwp_relative_pointer_manager_v1<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(wl_registry_bind(registry,<sp/>name,<sp/>&amp;zwp_relative_pointer_manager_v1_interface,<sp/>std::min(<ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>,<sp/>1u))));</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(interface,<sp/>zxdg_decoration_manager_v1_interface.name)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display-&gt;m_xdgDecorationManager<sp/>=<sp/>std::make_unique&lt;KWayland::Client::XdgDecorationManager&gt;();</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display-&gt;m_xdgDecorationManager-&gt;setup(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">zxdg_decoration_manager_v1<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(wl_registry_bind(registry,<sp/>name,<sp/>&amp;zxdg_decoration_manager_v1_interface,<sp/>std::min(<ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>,<sp/>1u))));</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(interface,<sp/>zwp_linux_dmabuf_v1_interface.name)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref><sp/>&lt;<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning(</highlight><highlight class="stringliteral">&quot;zwp_linux_dmabuf_v1<sp/>v4<sp/>or<sp/>newer<sp/>is<sp/>needed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display-&gt;m_linuxDmabuf<sp/>=<sp/>std::make_unique&lt;WaylandLinuxDmabufV1&gt;(registry,<sp/>name,<sp/>std::min(<ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>,<sp/>4u));</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(interface,<sp/>wp_presentation_interface.name)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display-&gt;m_presentationTime<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">wp_presentation<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(wl_registry_bind(registry,<sp/>name,<sp/>&amp;wp_presentation_interface,<sp/>std::min(<ref refid="namespace_k_win_1ad85acfe1f9d7ee3655274bf2fc62d9a3" kindref="member">version</ref>,<sp/>2u)));</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(interface,<sp/>wp_tearing_control_v1_interface.name)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display-&gt;m_tearingControl<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">wp_tearing_control_manager_v1<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(wl_registry_bind(registry,<sp/>name,<sp/>&amp;wp_tearing_control_v1_interface,<sp/>1));</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(interface,<sp/>wp_color_manager_v1_interface.name)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>global<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">wp_color_manager_v1<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(wl_registry_bind(registry,<sp/>name,<sp/>&amp;wp_color_manager_v1_interface,<sp/>1));</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display-&gt;m_colorManager<sp/>=<sp/>std::make_unique&lt;ColorManager&gt;(global);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WaylandDisplay::registry_global_remove(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/>wl_registry<sp/>*registry,<sp/>uint32_t<sp/>name)</highlight></codeline>
<codeline lineno="496"><highlight class="normal">{</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;wayland_display.moc&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;moc_wayland_display.cpp&quot;</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="kwin/src/backends/wayland/wayland_display.cpp"/>
  </compounddef>
</doxygen>
