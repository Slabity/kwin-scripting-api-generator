<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_x11_window" kind="class" language="C++" prot="public">
    <compoundname>KWin::X11Window</compoundname>
    <basecompoundref refid="class_k_win_1_1_window" prot="public" virt="non-virtual">KWin::Window</basecompoundref>
    <includes refid="x11window_8h" local="no">x11window.h</includes>
    <innerclass refid="struct_k_win_1_1_x11_window_1_1_sync_request" prot="public">KWin::X11Window::SyncRequest</innerclass>
    <sectiondef kind="private-type">
      <memberdef kind="enum" id="class_k_win_1_1_x11_window_1ad8cf73e489a340b776daf13b2633250e" prot="private" static="no" strong="no">
        <type></type>
        <name>MappingState</name>
        <qualifiedname>KWin::X11Window::MappingState</qualifiedname>
        <enumvalue id="class_k_win_1_1_x11_window_1ad8cf73e489a340b776daf13b2633250eab4581e57fd3350dff9a6cf4122d48f40" prot="private">
          <name>Withdrawn</name>
          <briefdescription>
<para>Not handled, as per ICCCM WithdrawnState. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_x11_window_1ad8cf73e489a340b776daf13b2633250ea0bd403e2bf588cd4393aff014d1e9560" prot="private">
          <name>Mapped</name>
          <briefdescription>
<para>The frame is mapped. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_x11_window_1ad8cf73e489a340b776daf13b2633250ea2b1d4c57d2f1f8c7b0e79bdf2c03699d" prot="private">
          <name>Unmapped</name>
          <briefdescription>
<para>The frame is not mapped. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_x11_window_1ad8cf73e489a340b776daf13b2633250ea2cff2cd4057c61bf166bc1d9d17d7060" prot="private">
          <name>Kept</name>
          <briefdescription>
<para>The frame should be unmapped, but is kept (For compositing) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="405" column="5" bodyfile="kwin/src/x11window.h" bodystart="405" bodyend="410"/>
      </memberdef>
      <memberdef kind="enum" id="class_k_win_1_1_x11_window_1afe0e35bb1783e95746d39574eeabdd9f" prot="private" static="no" strong="no">
        <type></type>
        <name>FullScreenMode</name>
        <qualifiedname>KWin::X11Window::FullScreenMode</qualifiedname>
        <enumvalue id="class_k_win_1_1_x11_window_1afe0e35bb1783e95746d39574eeabdd9fa7389cfc67e8c44e13ff0fc3652e79de7" prot="private">
          <name>FullScreenNone</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_x11_window_1afe0e35bb1783e95746d39574eeabdd9fac5638fe64595d593b48c718bf46491fe" prot="private">
          <name>FullScreenNormal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="433" column="5" bodyfile="kwin/src/x11window.h" bodystart="433" bodyend="436"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a2c0123d834fdd577128895e8aee3a3c8" prot="private" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_xcb_1_1_window" kindref="compound">Xcb::Window</ref></type>
        <definition>Xcb::Window KWin::X11Window::m_client</definition>
        <argsstring></argsstring>
        <name>m_client</name>
        <qualifiedname>KWin::X11Window::m_client</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="394" column="17" bodyfile="kwin/src/x11window.h" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1afedaa96808a7257653162506604f0e6c" prot="private" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_xcb_1_1_window" kindref="compound">Xcb::Window</ref></type>
        <definition>Xcb::Window KWin::X11Window::m_wrapper</definition>
        <argsstring></argsstring>
        <name>m_wrapper</name>
        <qualifiedname>KWin::X11Window::m_wrapper</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="395" column="17" bodyfile="kwin/src/x11window.h" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a9a869c5dfcd0bbc68eac6ef7103bdb19" prot="private" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_xcb_1_1_window" kindref="compound">Xcb::Window</ref></type>
        <definition>Xcb::Window KWin::X11Window::m_frame</definition>
        <argsstring></argsstring>
        <name>m_frame</name>
        <qualifiedname>KWin::X11Window::m_frame</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="396" column="17" bodyfile="kwin/src/x11window.h" bodystart="396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a3696a879194e3a39f2f07ad08d0aff81" prot="private" static="no" mutable="no">
        <type>qreal</type>
        <definition>qreal KWin::X11Window::m_bufferScale</definition>
        <argsstring></argsstring>
        <name>m_bufferScale</name>
        <qualifiedname>KWin::X11Window::m_bufferScale</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="397" column="11" bodyfile="kwin/src/x11window.h" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1afda2fcebc914c0f26c774d2efb9c1b89" prot="private" static="no" mutable="no">
        <type>xcb_window_t</type>
        <definition>xcb_window_t KWin::X11Window::m_wmClientLeader</definition>
        <argsstring></argsstring>
        <name>m_wmClientLeader</name>
        <qualifiedname>KWin::X11Window::m_wmClientLeader</qualifiedname>
        <initializer>= XCB_WINDOW_NONE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="398" column="18" bodyfile="kwin/src/x11window.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a0dadf24a4f4cf4a651db7a1eb92b39b2" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int KWin::X11Window::m_activityUpdatesBlocked</definition>
        <argsstring></argsstring>
        <name>m_activityUpdatesBlocked</name>
        <qualifiedname>KWin::X11Window::m_activityUpdatesBlocked</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="399" column="9" bodyfile="kwin/src/x11window.h" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a4d125d688f572341cc61d5de341e7611" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::X11Window::m_blockedActivityUpdatesRequireTransients</definition>
        <argsstring></argsstring>
        <name>m_blockedActivityUpdatesRequireTransients</name>
        <qualifiedname>KWin::X11Window::m_blockedActivityUpdatesRequireTransients</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="400" column="10" bodyfile="kwin/src/x11window.h" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a089887b3a7275ef8ace8e5e2dd90b434" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::X11Window::m_managed</definition>
        <argsstring></argsstring>
        <name>m_managed</name>
        <qualifiedname>KWin::X11Window::m_managed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="401" column="10" bodyfile="kwin/src/x11window.h" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a78ecb9f0fb339ce5f9eadff195360ed4" prot="private" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_xcb_1_1_geometry_hints" kindref="compound">Xcb::GeometryHints</ref></type>
        <definition>Xcb::GeometryHints KWin::X11Window::m_geometryHints</definition>
        <argsstring></argsstring>
        <name>m_geometryHints</name>
        <qualifiedname>KWin::X11Window::m_geometryHints</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="403" column="24" bodyfile="kwin/src/x11window.h" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1ac1a234ffbccd20ff062ed45e7b45e347" prot="private" static="no" mutable="no">
        <type>MappingState</type>
        <definition>MappingState KWin::X11Window::mapping_state</definition>
        <argsstring></argsstring>
        <name>mapping_state</name>
        <qualifiedname>KWin::X11Window::mapping_state</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="411" column="18" bodyfile="kwin/src/x11window.h" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a02b906c1b91e1f840a65e743d2e48990" prot="private" static="no" mutable="no">
        <type>NETWinInfo *</type>
        <definition>NETWinInfo* KWin::X11Window::info</definition>
        <argsstring></argsstring>
        <name>info</name>
        <qualifiedname>KWin::X11Window::info</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="423" column="16" bodyfile="kwin/src/x11window.h" bodystart="423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1adc5da24d9918ed05fb1c59d5000cfa20" prot="private" static="no" mutable="no">
        <type>xcb_window_t</type>
        <definition>xcb_window_t KWin::X11Window::m_transientForId</definition>
        <argsstring></argsstring>
        <name>m_transientForId</name>
        <qualifiedname>KWin::X11Window::m_transientForId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="424" column="18" bodyfile="kwin/src/x11window.h" bodystart="424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a8c713e2c0aab832d3bbe7bb416ec5c5a" prot="private" static="no" mutable="no">
        <type>xcb_window_t</type>
        <definition>xcb_window_t KWin::X11Window::m_originalTransientForId</definition>
        <argsstring></argsstring>
        <name>m_originalTransientForId</name>
        <qualifiedname>KWin::X11Window::m_originalTransientForId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="425" column="18" bodyfile="kwin/src/x11window.h" bodystart="425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1aa25daabef196a50ce59ce97623ccb8a7" prot="private" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_x11_window" kindref="compound">X11Window</ref> *</type>
        <definition>X11Window* KWin::X11Window::shade_below</definition>
        <argsstring></argsstring>
        <name>shade_below</name>
        <qualifiedname>KWin::X11Window::shade_below</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="426" column="15" bodyfile="kwin/src/x11window.h" bodystart="426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a6d04a39af2239f5369ea5b466999a6a8" prot="private" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_xcb_1_1_motif_hints" kindref="compound">Xcb::MotifHints</ref></type>
        <definition>Xcb::MotifHints KWin::X11Window::m_motif</definition>
        <argsstring></argsstring>
        <name>m_motif</name>
        <qualifiedname>KWin::X11Window::m_motif</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="427" column="21" bodyfile="kwin/src/x11window.h" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a860162f55f87e254235a33fb0ffb40e8" prot="private" static="no" mutable="no">
        <type>uint</type>
        <definition>uint KWin::X11Window::noborder</definition>
        <argsstring></argsstring>
        <name>noborder</name>
        <qualifiedname>KWin::X11Window::noborder</qualifiedname>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="428" column="10" bodyfile="kwin/src/x11window.h" bodystart="428" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1aacb6dd2d37edc3bda79d15d6d41cf4ef" prot="private" static="no" mutable="no">
        <type>uint</type>
        <definition>uint KWin::X11Window::app_noborder</definition>
        <argsstring></argsstring>
        <name>app_noborder</name>
        <qualifiedname>KWin::X11Window::app_noborder</qualifiedname>
        <bitfield> 1</bitfield>
        <briefdescription>
<para>App requested no border via window type, shape extension, etc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="429" column="10" bodyfile="kwin/src/x11window.h" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1ac85538fc29a5d13ab6e1583d77fb6fd0" prot="private" static="no" mutable="no">
        <type>uint</type>
        <definition>uint KWin::X11Window::ignore_focus_stealing</definition>
        <argsstring></argsstring>
        <name>ignore_focus_stealing</name>
        <qualifiedname>KWin::X11Window::ignore_focus_stealing</qualifiedname>
        <bitfield> 1</bitfield>
        <briefdescription>
<para>Don&apos;t apply focus stealing prevention to this client. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="430" column="10" bodyfile="kwin/src/x11window.h" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a117b66ac3910d4ea189112132c7902a0" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::X11Window::is_shape</definition>
        <argsstring></argsstring>
        <name>is_shape</name>
        <qualifiedname>KWin::X11Window::is_shape</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="431" column="10" bodyfile="kwin/src/x11window.h" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1af86805a7f9c8b73d407f7604906f5ef1" prot="private" static="no" mutable="no">
        <type>enum KWin::X11Window::FullScreenMode</type>
        <definition>enum KWin::X11Window::FullScreenMode KWin::X11Window::m_fullscreenMode</definition>
        <argsstring></argsstring>
        <name>m_fullscreenMode</name>
        <qualifiedname>KWin::X11Window::m_fullscreenMode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="436" column="22"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a2345786fa7572bd079829cbf0a317281" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9" kindref="member">MaximizeMode</ref></type>
        <definition>MaximizeMode KWin::X11Window::max_mode</definition>
        <argsstring></argsstring>
        <name>max_mode</name>
        <qualifiedname>KWin::X11Window::max_mode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="438" column="18" bodyfile="kwin/src/x11window.h" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a30582c94ff9c7f689b46eb6b3e7508e2" prot="private" static="no" mutable="no">
        <type>QString</type>
        <definition>QString KWin::X11Window::cap_normal</definition>
        <argsstring></argsstring>
        <name>cap_normal</name>
        <qualifiedname>KWin::X11Window::cap_normal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="439" column="13" bodyfile="kwin/src/x11window.h" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a77b1b4eac1644f73899516865d4b8a88" prot="private" static="no" mutable="no">
        <type>QString</type>
        <definition>QString KWin::X11Window::cap_iconic</definition>
        <argsstring></argsstring>
        <name>cap_iconic</name>
        <qualifiedname>KWin::X11Window::cap_iconic</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="439" column="24" bodyfile="kwin/src/x11window.h" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1aa370e59f7295b01b351382d7edde8996" prot="private" static="no" mutable="no">
        <type>QString</type>
        <definition>QString KWin::X11Window::cap_suffix</definition>
        <argsstring></argsstring>
        <name>cap_suffix</name>
        <qualifiedname>KWin::X11Window::cap_suffix</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="439" column="35" bodyfile="kwin/src/x11window.h" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1adba5c5d4cd7fe7f987a05c144c479b83" prot="private" static="no" mutable="no">
        <type><ref refid="class_k_win_1_1_group" kindref="compound">Group</ref> *</type>
        <definition>Group* KWin::X11Window::in_group</definition>
        <argsstring></argsstring>
        <name>in_group</name>
        <qualifiedname>KWin::X11Window::in_group</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="440" column="11" bodyfile="kwin/src/x11window.h" bodystart="440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1ae43db3bfa14a0ff08d8b2c7f89e18278" prot="private" static="no" mutable="no">
        <type>QTimer *</type>
        <definition>QTimer* KWin::X11Window::ping_timer</definition>
        <argsstring></argsstring>
        <name>ping_timer</name>
        <qualifiedname>KWin::X11Window::ping_timer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="441" column="12" bodyfile="kwin/src/x11window.h" bodystart="441" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a95f4ed0554ad705eebdcbb4e35164b67" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_kill_prompt" kindref="compound">KillPrompt</ref> &gt;</type>
        <definition>std::unique_ptr&lt;KillPrompt&gt; KWin::X11Window::m_killPrompt</definition>
        <argsstring></argsstring>
        <name>m_killPrompt</name>
        <qualifiedname>KWin::X11Window::m_killPrompt</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="442" column="21" bodyfile="kwin/src/x11window.h" bodystart="442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1ac92d621b442478ed00ed5333b42b5c9b" prot="private" static="no" mutable="no">
        <type>xcb_timestamp_t</type>
        <definition>xcb_timestamp_t KWin::X11Window::m_pingTimestamp</definition>
        <argsstring></argsstring>
        <name>m_pingTimestamp</name>
        <qualifiedname>KWin::X11Window::m_pingTimestamp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="443" column="21" bodyfile="kwin/src/x11window.h" bodystart="443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1ab648f3df1211d607cf997b32226ed986" prot="private" static="no" mutable="no">
        <type>xcb_timestamp_t</type>
        <definition>xcb_timestamp_t KWin::X11Window::m_userTime</definition>
        <argsstring></argsstring>
        <name>m_userTime</name>
        <qualifiedname>KWin::X11Window::m_userTime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="444" column="21" bodyfile="kwin/src/x11window.h" bodystart="444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1aeb570d4a19935db0dba769ba194a85e4" prot="private" static="no" mutable="no">
        <type>pid_t</type>
        <definition>pid_t KWin::X11Window::m_pid</definition>
        <argsstring></argsstring>
        <name>m_pid</name>
        <qualifiedname>KWin::X11Window::m_pid</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="445" column="11" bodyfile="kwin/src/x11window.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1aaff2592627e7cee09eda1f4c60785768" prot="private" static="no" mutable="no">
        <type>NET::Actions</type>
        <definition>NET::Actions KWin::X11Window::allowed_actions</definition>
        <argsstring></argsstring>
        <name>allowed_actions</name>
        <qualifiedname>KWin::X11Window::allowed_actions</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="446" column="18" bodyfile="kwin/src/x11window.h" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a74db77386a7ac3b3300f97cd709c591e" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::X11Window::shade_geometry_change</definition>
        <argsstring></argsstring>
        <name>shade_geometry_change</name>
        <qualifiedname>KWin::X11Window::shade_geometry_change</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="447" column="10" bodyfile="kwin/src/x11window.h" bodystart="447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a467a3fa616d36fb9724fddd2f44955de" prot="private" static="no" mutable="no">
        <type><ref refid="struct_k_win_1_1_x11_window_1_1_sync_request" kindref="compound">SyncRequest</ref></type>
        <definition>SyncRequest KWin::X11Window::m_syncRequest</definition>
        <argsstring></argsstring>
        <name>m_syncRequest</name>
        <qualifiedname>KWin::X11Window::m_syncRequest</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="448" column="17" bodyfile="kwin/src/x11window.h" bodystart="448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a01c5451c21925fdf368bd432cba0b79e" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int KWin::X11Window::sm_stacking_order</definition>
        <argsstring></argsstring>
        <name>sm_stacking_order</name>
        <qualifiedname>KWin::X11Window::sm_stacking_order</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="450" column="9" bodyfile="kwin/src/x11window.h" bodystart="450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a783fff52c785acdedc22930ad63e004d" prot="private" static="no" mutable="no">
        <type>xcb_visualid_t</type>
        <definition>xcb_visualid_t KWin::X11Window::m_visual</definition>
        <argsstring></argsstring>
        <name>m_visual</name>
        <qualifiedname>KWin::X11Window::m_visual</qualifiedname>
        <initializer>= XCB_NONE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="451" column="20" bodyfile="kwin/src/x11window.h" bodystart="451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1ae8bcf53884c1b4d17d2a8be528fac58d" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int KWin::X11Window::bit_depth</definition>
        <argsstring></argsstring>
        <name>bit_depth</name>
        <qualifiedname>KWin::X11Window::bit_depth</qualifiedname>
        <initializer>= 24</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="452" column="9" bodyfile="kwin/src/x11window.h" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a3efe1715537f0efd661f1233de842fa3" prot="private" static="no" mutable="no">
        <type>QRegion</type>
        <definition>QRegion KWin::X11Window::opaque_region</definition>
        <argsstring></argsstring>
        <name>opaque_region</name>
        <qualifiedname>KWin::X11Window::opaque_region</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="453" column="13" bodyfile="kwin/src/x11window.h" bodystart="453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a9f98d6a7b144874dcf02e9dbf38f30a6" prot="private" static="no" mutable="yes">
        <type>QList&lt; QRectF &gt;</type>
        <definition>QList&lt;QRectF&gt; KWin::X11Window::m_shapeRegion</definition>
        <argsstring></argsstring>
        <name>m_shapeRegion</name>
        <qualifiedname>KWin::X11Window::m_shapeRegion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="454" column="19" bodyfile="kwin/src/x11window.h" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1aed534774c04274416ea6c6f0779dc23b" prot="private" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool KWin::X11Window::m_shapeRegionIsValid</definition>
        <argsstring></argsstring>
        <name>m_shapeRegionIsValid</name>
        <qualifiedname>KWin::X11Window::m_shapeRegionIsValid</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="455" column="18" bodyfile="kwin/src/x11window.h" bodystart="455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a257020550f705a0d39a625b1bd01dac9" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::X11Window::activitiesDefined</definition>
        <argsstring></argsstring>
        <name>activitiesDefined</name>
        <qualifiedname>KWin::X11Window::activitiesDefined</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="462" column="10" bodyfile="kwin/src/x11window.h" bodystart="462" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a70314eabbb4e1b7dc9cb7828eff47b52" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::X11Window::sessionActivityOverride</definition>
        <argsstring></argsstring>
        <name>sessionActivityOverride</name>
        <qualifiedname>KWin::X11Window::sessionActivityOverride</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="464" column="10" bodyfile="kwin/src/x11window.h" bodystart="464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a93dc0566478fbb1767027bec5d329692" prot="private" static="no" mutable="no">
        <type>QTimer *</type>
        <definition>QTimer* KWin::X11Window::m_focusOutTimer</definition>
        <argsstring></argsstring>
        <name>m_focusOutTimer</name>
        <qualifiedname>KWin::X11Window::m_focusOutTimer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="466" column="12" bodyfile="kwin/src/x11window.h" bodystart="466" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a88328bd253838a424b5a72a976296ac8" prot="private" static="no" mutable="no">
        <type>QTimer</type>
        <definition>QTimer KWin::X11Window::m_releaseTimer</definition>
        <argsstring></argsstring>
        <name>m_releaseTimer</name>
        <qualifiedname>KWin::X11Window::m_releaseTimer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="467" column="12" bodyfile="kwin/src/x11window.h" bodystart="467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1aefcfe816f86504b1415ec988c08c4b9e" prot="private" static="no" mutable="no">
        <type>QMetaObject::Connection</type>
        <definition>QMetaObject::Connection KWin::X11Window::m_edgeGeometryTrackingConnection</definition>
        <argsstring></argsstring>
        <name>m_edgeGeometryTrackingConnection</name>
        <qualifiedname>KWin::X11Window::m_edgeGeometryTrackingConnection</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="469" column="29" bodyfile="kwin/src/x11window.h" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a2490a4822ec3f6f1f7785b113606d681" prot="private" static="no" mutable="no">
        <type>QMarginsF</type>
        <definition>QMarginsF KWin::X11Window::m_clientFrameExtents</definition>
        <argsstring></argsstring>
        <name>m_clientFrameExtents</name>
        <qualifiedname>KWin::X11Window::m_clientFrameExtents</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="471" column="15" bodyfile="kwin/src/x11window.h" bodystart="471" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a42bebf68bd09c480836b38fd2c0746c1" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int KWin::X11Window::m_blockGeometryUpdates</definition>
        <argsstring></argsstring>
        <name>m_blockGeometryUpdates</name>
        <qualifiedname>KWin::X11Window::m_blockGeometryUpdates</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="472" column="9" bodyfile="kwin/src/x11window.h" bodystart="472" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a38572ad4e59316b31cc8410aff313a0e" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::X11Window::m_unmanaged</definition>
        <argsstring></argsstring>
        <name>m_unmanaged</name>
        <qualifiedname>KWin::X11Window::m_unmanaged</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="474" column="10" bodyfile="kwin/src/x11window.h" bodystart="474" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a911ac445dc4b68ed099347da68766802" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::X11Window::m_outline</definition>
        <argsstring></argsstring>
        <name>m_outline</name>
        <qualifiedname>KWin::X11Window::m_outline</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="475" column="10" bodyfile="kwin/src/x11window.h" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a7f4560bb6de78010fc9439ce0c14d41b" prot="private" static="no" mutable="no">
        <type>quint64</type>
        <definition>quint64 KWin::X11Window::m_surfaceSerial</definition>
        <argsstring></argsstring>
        <name>m_surfaceSerial</name>
        <qualifiedname>KWin::X11Window::m_surfaceSerial</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="476" column="13" bodyfile="kwin/src/x11window.h" bodystart="476" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_x11_window_1a6fde6b9aaa080b60ed5a8f629cea64fb" prot="private" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool KWin::X11Window::check_active_modal</definition>
        <argsstring></argsstring>
        <name>check_active_modal</name>
        <qualifiedname>KWin::X11Window::check_active_modal</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_x11_window_1aebfddaceb1026381401b70b7984af92f" kindref="member">X11Window::checkActiveModal()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="449" column="17" bodyfile="kwin/src/x11window.h" bodystart="449" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_k_win_1_1_x11_window_1ad5f9b5279c3d1153bb245b7e33d9bd94" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct ResetupRulesProcedure</definition>
        <argsstring></argsstring>
        <name>ResetupRulesProcedure</name>
        <qualifiedname>KWin::X11Window::ResetupRulesProcedure</qualifiedname>
        <param>
          <type>ResetupRulesProcedure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="456" column="19" bodyfile="kwin/src/x11window.h" bodystart="456" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_k_win_1_1_x11_window_1a7175d6e6f28f86cbf7473fdaf05fafb2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool performTransiencyCheck</definition>
        <argsstring>()</argsstring>
        <name>performTransiencyCheck</name>
        <qualifiedname>KWin::X11Window::performTransiencyCheck</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="458" column="17"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a21436db429ad1b82c39b129b44a285ac" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::X11Window::X11Window</definition>
        <argsstring>()</argsstring>
        <name>X11Window</name>
        <qualifiedname>KWin::X11Window::X11Window</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This ctor is &quot;dumb&quot; - it only initializes data. All the real initialization is done in <ref refid="class_k_win_1_1_x11_window_1abbb8a2850677bce88d1a52dd38337dfd" kindref="member">manage()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="59" column="14" bodyfile="kwin/src/x11window.cpp" bodystart="128" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a5d0eabdd975932fcc54937d3b763df02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::X11Window::~X11Window</definition>
        <argsstring>() override</argsstring>
        <name>~X11Window</name>
        <qualifiedname>KWin::X11Window::~X11Window</qualifiedname>
        <briefdescription>
<para>Use <ref refid="class_k_win_1_1_x11_window_1a7c848abfd1542214c0d8f289d8c76fcb" kindref="member">destroyWindow()</ref> or <ref refid="class_k_win_1_1_x11_window_1ae40e9801befd45d3e0bb13a87427fdd9" kindref="member">releaseWindow()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>&quot;Dumb&quot; destructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="60" column="5" bodyfile="kwin/src/x11window.cpp" bodystart="191" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a41fce59f634f8e4f8cbb0cc52cb1dd71" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>xcb_window_t</type>
        <definition>xcb_window_t KWin::X11Window::frameId</definition>
        <argsstring>() const</argsstring>
        <name>frameId</name>
        <qualifiedname>KWin::X11Window::frameId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="62" column="18" bodyfile="kwin/src/x11window.cpp" bodystart="2366" bodyend="2369"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1abb09d9e05765e00997b34c4906e2d8b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>xcb_window_t</type>
        <definition>xcb_window_t KWin::X11Window::window</definition>
        <argsstring>() const</argsstring>
        <name>window</name>
        <qualifiedname>KWin::X11Window::window</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="63" column="18" bodyfile="kwin/src/x11window.cpp" bodystart="2371" bodyend="2374"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aea04ef1d7bd98b427c4d3f4ac4f72322" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>xcb_window_t</type>
        <definition>xcb_window_t KWin::X11Window::wrapperId</definition>
        <argsstring>() const</argsstring>
        <name>wrapperId</name>
        <qualifiedname>KWin::X11Window::wrapperId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="64" column="18" bodyfile="kwin/src/x11window.cpp" bodystart="2376" bodyend="2379"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ad33086a0fc2f1cd541bec4d5ccb092d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::X11Window::desktopId</definition>
        <argsstring>() const</argsstring>
        <name>desktopId</name>
        <qualifiedname>KWin::X11Window::desktopId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="66" column="9" bodyfile="kwin/src/x11window.cpp" bodystart="4602" bodyend="4605"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ac6dee2b4e4c8688dcf37ca08c16a0090" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArray</type>
        <definition>QByteArray KWin::X11Window::sessionId</definition>
        <argsstring>() const</argsstring>
        <name>sessionId</name>
        <qualifiedname>KWin::X11Window::sessionId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns sessionId for this window, taken either from its window or from the leader window. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="67" column="16" bodyfile="kwin/src/x11window.cpp" bodystart="4611" bodyend="4618"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ac8f91f3f06cbfe41d1f61204c9aa6a39" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>xcb_window_t</type>
        <definition>xcb_window_t KWin::X11Window::wmClientLeader</definition>
        <argsstring>() const</argsstring>
        <name>wmClientLeader</name>
        <qualifiedname>KWin::X11Window::wmClientLeader</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns client leader window for this client. Returns the client window itself if no leader window is defined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="68" column="18" bodyfile="kwin/src/x11window.cpp" bodystart="4638" bodyend="4644"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a02c63caa6bc293c149df845967c743a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::X11Window::wmCommand</definition>
        <argsstring>()</argsstring>
        <name>wmCommand</name>
        <qualifiedname>KWin::X11Window::wmCommand</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns command property for this window, taken either from its window or from the leader window. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="69" column="13" bodyfile="kwin/src/x11window.cpp" bodystart="4624" bodyend="4632"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a05c453a3fcf05dad3f5b834a417dd93e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::X11Window::framePosToClientPos</definition>
        <argsstring>(const QPointF &amp;point) const override</argsstring>
        <name>framePosToClientPos</name>
        <qualifiedname>KWin::X11Window::framePosToClientPos</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a739d097e02c1cfa5162510a20c6114d2">framePosToClientPos</reimplements>
        <param>
          <type>const QPointF &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the matching client position for the given frame position <computeroutput>point</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="71" column="13" bodyfile="kwin/src/x11window.cpp" bodystart="2381" bodyend="2395"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ad04667c236f30d2b04226fb479e54c8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::X11Window::nextFramePosToClientPos</definition>
        <argsstring>(const QPointF &amp;point) const override</argsstring>
        <name>nextFramePosToClientPos</name>
        <qualifiedname>KWin::X11Window::nextFramePosToClientPos</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a5bbc27846d8e4d03bb44061b15609f50">nextFramePosToClientPos</reimplements>
        <param>
          <type>const QPointF &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="72" column="13" bodyfile="kwin/src/x11window.cpp" bodystart="2397" bodyend="2400"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a54fae364d539ef6501ae44c2a3a57d55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::X11Window::clientPosToFramePos</definition>
        <argsstring>(const QPointF &amp;point) const override</argsstring>
        <name>clientPosToFramePos</name>
        <qualifiedname>KWin::X11Window::clientPosToFramePos</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a817b5734d5c89784f28c1bef955a6485">clientPosToFramePos</reimplements>
        <param>
          <type>const QPointF &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the matching frame position for the given client position <computeroutput>point</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="73" column="13" bodyfile="kwin/src/x11window.cpp" bodystart="2402" bodyend="2416"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ad58f460d101533c87526ed2ccf3fa1bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::X11Window::nextClientPosToFramePos</definition>
        <argsstring>(const QPointF &amp;point) const override</argsstring>
        <name>nextClientPosToFramePos</name>
        <qualifiedname>KWin::X11Window::nextClientPosToFramePos</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a2ec8e47f4272f0e80bec5033f5cac31e">nextClientPosToFramePos</reimplements>
        <param>
          <type>const QPointF &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="74" column="13" bodyfile="kwin/src/x11window.cpp" bodystart="2418" bodyend="2421"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ad52b2f9c90fe952787fdce1107f66024" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::X11Window::frameSizeToClientSize</definition>
        <argsstring>(const QSizeF &amp;size) const override</argsstring>
        <name>frameSizeToClientSize</name>
        <qualifiedname>KWin::X11Window::frameSizeToClientSize</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1ae09928747c6104d9520e519176f0f618">frameSizeToClientSize</reimplements>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the matching client size for the given frame size <computeroutput>size</computeroutput>.</para>
<para>Notice that size constraints won&apos;t be applied.</para>
<para>Default implementation returns the frame size with frame margins being excluded. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="75" column="12" bodyfile="kwin/src/x11window.cpp" bodystart="2423" bodyend="2440"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a647f36c69b53bde05593b6ab25d728cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::X11Window::nextFrameSizeToClientSize</definition>
        <argsstring>(const QSizeF &amp;size) const override</argsstring>
        <name>nextFrameSizeToClientSize</name>
        <qualifiedname>KWin::X11Window::nextFrameSizeToClientSize</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1abc82318fb715dcc5a0a3b98515897e92">nextFrameSizeToClientSize</reimplements>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="76" column="12" bodyfile="kwin/src/x11window.cpp" bodystart="2442" bodyend="2445"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a00a45287c67f885c7ca53be41eb9344e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::X11Window::clientSizeToFrameSize</definition>
        <argsstring>(const QSizeF &amp;size) const override</argsstring>
        <name>clientSizeToFrameSize</name>
        <qualifiedname>KWin::X11Window::clientSizeToFrameSize</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1aec00cdb081b9048bde71fa2844cee001">clientSizeToFrameSize</reimplements>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the matching frame size for the given client size <computeroutput>size</computeroutput>.</para>
<para>Notice that size constraints won&apos;t be applied.</para>
<para>Default implementation returns the client size with frame margins being included. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="77" column="12" bodyfile="kwin/src/x11window.cpp" bodystart="2447" bodyend="2464"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a983d242e42480e725fe01005f240d0a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::X11Window::nextClientSizeToFrameSize</definition>
        <argsstring>(const QSizeF &amp;size) const override</argsstring>
        <name>nextClientSizeToFrameSize</name>
        <qualifiedname>KWin::X11Window::nextClientSizeToFrameSize</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1af4f582315c040559fde4abcadf727776">nextClientSizeToFrameSize</reimplements>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="78" column="12" bodyfile="kwin/src/x11window.cpp" bodystart="2466" bodyend="2469"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a0698f17c5d52ecb88f88580fd73b4fd7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::X11Window::nextFrameRectToBufferRect</definition>
        <argsstring>(const QRectF &amp;rect) const</argsstring>
        <name>nextFrameRectToBufferRect</name>
        <qualifiedname>KWin::X11Window::nextFrameRectToBufferRect</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="79" column="12" bodyfile="kwin/src/x11window.cpp" bodystart="2471" bodyend="2474"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a74eb3de413f19ead5d7a4e434ed206ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::X11Window::implicitSize</definition>
        <argsstring>() const</argsstring>
        <name>implicitSize</name>
        <qualifiedname>KWin::X11Window::implicitSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the natural size of the window, if the window is not shaded it&apos;s the same as <ref refid="class_k_win_1_1_window_1a3d66832f7a462d332759451c3633851d" kindref="member">size()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="80" column="12" bodyfile="kwin/src/x11window.cpp" bodystart="2480" bodyend="2483"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a36df52d4458adb16003f64ce41afb137" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::blockGeometryUpdates</definition>
        <argsstring>(bool block)</argsstring>
        <name>blockGeometryUpdates</name>
        <qualifiedname>KWin::X11Window::blockGeometryUpdates</qualifiedname>
        <param>
          <type>bool</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="82" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="3950" bodyend="3962"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ae3e0c34d99ddf77ff1f285845bd57ecf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::blockGeometryUpdates</definition>
        <argsstring>()</argsstring>
        <name>blockGeometryUpdates</name>
        <qualifiedname>KWin::X11Window::blockGeometryUpdates</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="83" column="10" bodyfile="kwin/src/x11window.h" bodystart="599" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ad4d789ae6e9c11028bb79afb13152b2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::unblockGeometryUpdates</definition>
        <argsstring>()</argsstring>
        <name>unblockGeometryUpdates</name>
        <qualifiedname>KWin::X11Window::unblockGeometryUpdates</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="84" column="10" bodyfile="kwin/src/x11window.h" bodystart="604" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aa33a16f171c29e61cdf0a9a038ded108" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::areGeometryUpdatesBlocked</definition>
        <argsstring>() const</argsstring>
        <name>areGeometryUpdatesBlocked</name>
        <qualifiedname>KWin::X11Window::areGeometryUpdatesBlocked</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="85" column="10" bodyfile="kwin/src/x11window.h" bodystart="594" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a41aed382a89f01fbfb0b733a4e6b1372" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>xcb_visualid_t</type>
        <definition>xcb_visualid_t KWin::X11Window::visual</definition>
        <argsstring>() const</argsstring>
        <name>visual</name>
        <qualifiedname>KWin::X11Window::visual</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="87" column="20" bodyfile="kwin/src/x11window.h" bodystart="499" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aba9a7266b1f4259019315768ba4394a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::X11Window::depth</definition>
        <argsstring>() const</argsstring>
        <name>depth</name>
        <qualifiedname>KWin::X11Window::depth</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="88" column="9" bodyfile="kwin/src/x11window.h" bodystart="504" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a34ea4cffa5445af708e43d32d2cebc20" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::hasAlpha</definition>
        <argsstring>() const</argsstring>
        <name>hasAlpha</name>
        <qualifiedname>KWin::X11Window::hasAlpha</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="89" column="10" bodyfile="kwin/src/x11window.h" bodystart="509" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ae860187f63c4b87b374c624fa4a9a523" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QRegion</type>
        <definition>QRegion KWin::X11Window::opaqueRegion</definition>
        <argsstring>() const</argsstring>
        <name>opaqueRegion</name>
        <qualifiedname>KWin::X11Window::opaqueRegion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="90" column="13" bodyfile="kwin/src/x11window.h" bodystart="514" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ad790784904671e41c5dd7f7542dd07ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; QRectF &gt;</type>
        <definition>QList&lt; QRectF &gt; KWin::X11Window::shapeRegion</definition>
        <argsstring>() const</argsstring>
        <name>shapeRegion</name>
        <qualifiedname>KWin::X11Window::shapeRegion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="91" column="11" bodyfile="kwin/src/x11window.cpp" bodystart="4544" bodyend="4575"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a974270608d37bc8817c9421d7ca8e60e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>pid_t</type>
        <definition>pid_t KWin::X11Window::pid</definition>
        <argsstring>() const override</argsstring>
        <name>pid</name>
        <qualifiedname>KWin::X11Window::pid</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1ac21f9e46d7fcddc2b1196ccc928bb763">pid</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="93" column="11" bodyfile="kwin/src/x11window.cpp" bodystart="2485" bodyend="2488"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ae2e6e971b045b7eb896cd0e037ccdf3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QString</type>
        <definition>QString KWin::X11Window::windowRole</definition>
        <argsstring>() const override</argsstring>
        <name>windowRole</name>
        <qualifiedname>KWin::X11Window::windowRole</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a6fb0135b41d4cd0334e127adaa674a81">windowRole</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="94" column="13" bodyfile="kwin/src/x11window.cpp" bodystart="2490" bodyend="2493"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a30e74c044caf63f869473d6b8648f506" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::isTransient</definition>
        <argsstring>() const override</argsstring>
        <name>isTransient</name>
        <qualifiedname>KWin::X11Window::isTransient</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a9c9cc0a66b183a2777a997e351a4c7cf">isTransient</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="96" column="10" bodyfile="kwin/src/x11window.h" bodystart="529" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1afe2f971d0d4593a63edb75220cf48c02" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::groupTransient</definition>
        <argsstring>() const override</argsstring>
        <name>groupTransient</name>
        <qualifiedname>KWin::X11Window::groupTransient</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a4d1c2d0e1fde826cd0f99ec00ed93de6">groupTransient</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default implementation returns <computeroutput>null</computeroutput>. Mostly intended for X11 clients, from EWMH: <verbatim>* If the WM_TRANSIENT_FOR property is set to None or Root window, the window should be
* treated as a transient for all other windows in the same group. It has been noted that this
* is a slight ICCCM violation, but as this behavior is pretty standard for many toolkits and
* window managers, and is extremely unlikely to break anything, it seems reasonable to document
* it as standard.
* </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="97" column="10" bodyfile="kwin/src/x11window.h" bodystart="524" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a0b9273d4b5cbb939568096e8a73db60e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> * &gt;</type>
        <definition>QList&lt; Window * &gt; KWin::X11Window::mainWindows</definition>
        <argsstring>() const override</argsstring>
        <name>mainWindows</name>
        <qualifiedname>KWin::X11Window::mainWindows</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1afaea2549a9bde1616f1c0491a340ad64">mainWindows</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="98" column="11" bodyfile="kwin/src/x11window.cpp" bodystart="3069" bodyend="3085"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a07961b2f4f6ecf9840d8d748b5cfa120" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::hasTransient</definition>
        <argsstring>(const Window *c, bool indirect) const override</argsstring>
        <name>hasTransient</name>
        <qualifiedname>KWin::X11Window::hasTransient</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a982612832a19feb2f1d3d2e354a42fd8">hasTransient</reimplements>
        <param>
          <type>const <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>transient</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>indirect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if transient is the transient_for window for this window, or recursively the transient_for window </para>
</simplesect>
<xrefsect id="todo_1_todo000009"><xreftitle>Todo</xreftitle><xrefdescription><para>: remove boolean trap </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="99" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="3015" bodyend="3023"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a924bca8c6e8fa1e6d3c9bdf0fe3e9979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::checkTransient</definition>
        <argsstring>(xcb_window_t w)</argsstring>
        <name>checkTransient</name>
        <qualifiedname>KWin::X11Window::checkTransient</qualifiedname>
        <param>
          <type>xcb_window_t</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="100" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="3004" bodyend="3011"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ad00fe111dfb7ae782ad657eb684e8633" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="class_k_win_1_1_group" kindref="compound">Group</ref> *</type>
        <definition>const Group * KWin::X11Window::group</definition>
        <argsstring>() const override</argsstring>
        <name>group</name>
        <qualifiedname>KWin::X11Window::group</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1af60e148f9cc7e10a15e07d21b4481a34">group</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default implementation returns <computeroutput>null</computeroutput>.</para>
<para>Mostly for X11 clients, holds the client group </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="101" column="17" bodyfile="kwin/src/x11window.h" bodystart="534" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a3e337f96d26bf6151d2ee8f6c150f1a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_k_win_1_1_group" kindref="compound">Group</ref> *</type>
        <definition>Group * KWin::X11Window::group</definition>
        <argsstring>() override</argsstring>
        <name>group</name>
        <qualifiedname>KWin::X11Window::group</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a0e7daafcd723a739be737dab9a66f22d">group</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default implementation returns <computeroutput>null</computeroutput>.</para>
<para>Mostly for X11 clients, holds the client group </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="102" column="11" bodyfile="kwin/src/x11window.h" bodystart="539" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a0db74047dfa4074d7af9aa43971d9270" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::checkGroup</definition>
        <argsstring>(Group *gr=nullptr, bool force=false)</argsstring>
        <name>checkGroup</name>
        <qualifiedname>KWin::X11Window::checkGroup</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_group" kindref="compound">Group</ref> *</type>
          <declname>gr</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="103" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="3090" bodyend="3213"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ac1310097efa2d4aa74c054248f06e594" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::changeClientLeaderGroup</definition>
        <argsstring>(Group *gr)</argsstring>
        <name>changeClientLeaderGroup</name>
        <qualifiedname>KWin::X11Window::changeClientLeaderGroup</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_group" kindref="compound">Group</ref> *</type>
          <declname>gr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="104" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="3216" bodyend="3227"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aa5523cb6190e79111935d776fa833f38" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::supportsWindowRules</definition>
        <argsstring>() const override</argsstring>
        <name>supportsWindowRules</name>
        <qualifiedname>KWin::X11Window::supportsWindowRules</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a708d561f000dfe2d058b6017db96a684">supportsWindowRules</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="105" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4490" bodyend="4493"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a596570835e18830ab4d15180190debc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::updateWindowRules</definition>
        <argsstring>(Rules::Types selection) override</argsstring>
        <name>updateWindowRules</name>
        <qualifiedname>KWin::X11Window::updateWindowRules</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a6ee345225d453923e318c8344b86217f">updateWindowRules</reimplements>
        <param>
          <type>Rules::Types</type>
          <declname>selection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="106" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4495" bodyend="4501"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1abf855a28da219dbab00882f1bf790f99" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::applyWindowRules</definition>
        <argsstring>() override</argsstring>
        <name>applyWindowRules</name>
        <qualifiedname>KWin::X11Window::applyWindowRules</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a6ef20caeaf3db7a7bfc594b2b59e5797">applyWindowRules</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="107" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4484" bodyend="4488"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a63e4b163df670b2138b014ecdb946cb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::updateFullscreenMonitors</definition>
        <argsstring>(NETFullscreenMonitors topology)</argsstring>
        <name>updateFullscreenMonitors</name>
        <qualifiedname>KWin::X11Window::updateFullscreenMonitors</qualifiedname>
        <param>
          <type>NETFullscreenMonitors</type>
          <declname>topology</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="108" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4328" bodyend="4345"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ad81dd123f5387c0508abbb1464f808ee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::hasNETSupport</definition>
        <argsstring>() const</argsstring>
        <name>hasNETSupport</name>
        <qualifiedname>KWin::X11Window::hasNETSupport</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="110" column="10" bodyfile="kwin/src/x11window.h" bodystart="554" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a789e45e8dda7a6db82df10a93024772a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::X11Window::minSize</definition>
        <argsstring>() const override</argsstring>
        <name>minSize</name>
        <qualifiedname>KWin::X11Window::minSize</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1abb7a478a68c076a93fe1e205b161c4b5">minSize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the minimum client size, not the minimum frame size. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="112" column="12" bodyfile="kwin/src/x11window.cpp" bodystart="3494" bodyend="3497"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a3693e777b97ae236b95db854e3257078" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::X11Window::maxSize</definition>
        <argsstring>() const override</argsstring>
        <name>maxSize</name>
        <qualifiedname>KWin::X11Window::maxSize</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1aabe6333ee36076f053b1356e4217cb8c">maxSize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the maximum client size, not the maximum frame size. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="113" column="12" bodyfile="kwin/src/x11window.cpp" bodystart="3499" bodyend="3502"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ae682c484348a8b95638bcbec7d73c32f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::X11Window::basicUnit</definition>
        <argsstring>() const</argsstring>
        <name>basicUnit</name>
        <qualifiedname>KWin::X11Window::basicUnit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="114" column="12" bodyfile="kwin/src/x11window.cpp" bodystart="3504" bodyend="3507"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a9a8ecb6fc486d923b1258db29b12fdb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::windowEvent</definition>
        <argsstring>(xcb_generic_event_t *e)</argsstring>
        <name>windowEvent</name>
        <qualifiedname>KWin::X11Window::windowEvent</qualifiedname>
        <param>
          <type>xcb_generic_event_t *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>General handler for XEvents concerning the client window </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="116" column="10" bodyfile="kwin/src/events.cpp" bodystart="301" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a0ab369f3c39bf8f53453ed0345c3d75d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_k_win_1ad892545facf36d334d4558298117fbc7" kindref="member">WindowType</ref></type>
        <definition>WindowType KWin::X11Window::windowType</definition>
        <argsstring>() const override</argsstring>
        <name>windowType</name>
        <qualifiedname>KWin::X11Window::windowType</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1aad3924cca3304323399da26ad99fa29c">windowType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="117" column="16" bodyfile="kwin/src/x11window.cpp" bodystart="2345" bodyend="2357"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1abeb8d1bcaf6c5295c957832481cd33a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::track</definition>
        <argsstring>(xcb_window_t w)</argsstring>
        <name>track</name>
        <qualifiedname>KWin::X11Window::track</qualifiedname>
        <param>
          <type>xcb_window_t</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="119" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="358" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1abbb8a2850677bce88d1a52dd38337dfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::manage</definition>
        <argsstring>(xcb_window_t w, bool isMapped)</argsstring>
        <name>manage</name>
        <qualifiedname>KWin::X11Window::manage</qualifiedname>
        <param>
          <type>xcb_window_t</type>
          <declname>w</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isMapped</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Manages the clients. This means handling the very first maprequest: reparenting, initial geometry, initial state, placement, etc. Returns false if <ref refid="namespace_k_win" kindref="compound">KWin</ref> is not going to manage this window. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="120" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="423" bodyend="1010"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ae40e9801befd45d3e0bb13a87427fdd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::releaseWindow</definition>
        <argsstring>(bool on_shutdown=false)</argsstring>
        <name>releaseWindow</name>
        <qualifiedname>KWin::X11Window::releaseWindow</qualifiedname>
        <param>
          <type>bool</type>
          <declname>on_shutdown</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Releases the window. The client has done its job and the window is still existing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="122" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="231" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a550ff35903b0fd0d034c4e109f3f8943" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::hasScheduledRelease</definition>
        <argsstring>() const</argsstring>
        <name>hasScheduledRelease</name>
        <qualifiedname>KWin::X11Window::hasScheduledRelease</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="123" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="223" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a7c848abfd1542214c0d8f289d8c76fcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::destroyWindow</definition>
        <argsstring>() override</argsstring>
        <name>destroyWindow</name>
        <qualifiedname>KWin::X11Window::destroyWindow</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a47e37aadf699a7684655e3f482f40c02">destroyWindow</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Like <ref refid="class_k_win_1_1_x11_window_1ae40e9801befd45d3e0bb13a87427fdd9" kindref="member">releaseWindow()</ref>, but this one is called when the window has been already destroyed (E.g. The application closed it) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="125" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="314" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a171645c92c0b24978f9a48630957f791" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QStringList</type>
        <definition>QStringList KWin::X11Window::activities</definition>
        <argsstring>() const override</argsstring>
        <name>activities</name>
        <qualifiedname>KWin::X11Window::activities</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1ae70865a6d475746978ca119ac336092e">activities</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the list of activities the client window is on. if it&apos;s on all activities, the list will be empty. Don&apos;t use this, use <ref refid="class_k_win_1_1_window_1af30982dccaf9fcab4a7da3dd7053fc8b" kindref="member">isOnActivity()</ref> and friends (from class <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="127" column="17" bodyfile="kwin/src/x11window.cpp" bodystart="1859" bodyend="1865"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a10036002d7b8d3da31ad81aa0d00cea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::doSetOnActivities</definition>
        <argsstring>(const QStringList &amp;newActivitiesList) override</argsstring>
        <name>doSetOnActivities</name>
        <qualifiedname>KWin::X11Window::doSetOnActivities</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1ac7fddb149ff502da3b73ba871ab63dc5">doSetOnActivities</reimplements>
        <param>
          <type>const QStringList &amp;</type>
          <declname>activityList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called from <ref refid="class_k_win_1_1_window_1a7e638bc0587a8f3df06238420f94962f" kindref="member">setOnActivities</ref> just after the activity list member has been updated, but before <ref refid="class_k_win_1_1_x11_window_1a1446cfc31ada2f5e9ea3f0fca4f41084" kindref="member">updateActivities</ref> is called.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>activityList</parametername>
</parameternamelist>
<parameterdescription>
<para>the new list of activities set on that window</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Default implementation does nothing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="128" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1830" bodyend="1844"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a1446cfc31ada2f5e9ea3f0fca4f41084" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::updateActivities</definition>
        <argsstring>(bool includeTransients) override</argsstring>
        <name>updateActivities</name>
        <qualifiedname>KWin::X11Window::updateActivities</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a819092f9968d638a17b8e857e092d0f1">updateActivities</reimplements>
        <param>
          <type>bool</type>
          <declname>includeTransients</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>update after activities changed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="129" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1846" bodyend="1852"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a44a0e3ebe485da6063063850e55127c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::isShadeable</definition>
        <argsstring>() const override</argsstring>
        <name>isShadeable</name>
        <qualifiedname>KWin::X11Window::isShadeable</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1abf1e1de77c7a5e7707f1fcc2ed13db58">isShadeable</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> can be shaded. Default implementation returns <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="131" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1363" bodyend="1366"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a1ef7085c0c0cf02938b8bbc1dedb3866" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::isMaximizable</definition>
        <argsstring>() const override</argsstring>
        <name>isMaximizable</name>
        <qualifiedname>KWin::X11Window::isMaximizable</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1aa63a6139d1d83641d1e6d1617da0406d">isMaximizable</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> can be maximized; otherwise <computeroutput>false</computeroutput>.</para>
<para>Default implementation returns <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="132" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="3933" bodyend="3948"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ac6190e05ee7c40de52a3a853f4df410a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9" kindref="member">MaximizeMode</ref></type>
        <definition>MaximizeMode KWin::X11Window::maximizeMode</definition>
        <argsstring>() const override</argsstring>
        <name>maximizeMode</name>
        <qualifiedname>KWin::X11Window::maximizeMode</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a1ca68b36bcceffd514324fe97b3bab11">maximizeMode</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the currently applied maximize mode.</para>
<para>Default implementation returns MaximizeRestore. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="133" column="18" bodyfile="kwin/src/x11window.h" bodystart="544" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a4e215498a2a89848ba5b6aa7e4fd56db" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::maximize</definition>
        <argsstring>(MaximizeMode mode, const QRectF &amp;restore=QRectF()) override</argsstring>
        <name>maximize</name>
        <qualifiedname>KWin::X11Window::maximize</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a513849e778f44172f57dceebf94cadd6">maximize</reimplements>
        <param>
          <type><ref refid="namespace_k_win_1a58aad0d72424cd3d75519560dd43d9b9" kindref="member">MaximizeMode</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>restore</declname>
          <defval>QRectF()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="134" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4078" bodyend="4274"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a7dafba5edb390a4ff2f8ef2eca77df42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::isMinimizable</definition>
        <argsstring>() const override</argsstring>
        <name>isMinimizable</name>
        <qualifiedname>KWin::X11Window::isMinimizable</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a0265481eb235342664f27f47dafbc2d4">isMinimizable</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is minimizable or not </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="136" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1307" bodyend="1345"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a031295bc7fb1dd7e6752b29cec3c9472" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::isFullScreenable</definition>
        <argsstring>() const override</argsstring>
        <name>isFullScreenable</name>
        <qualifiedname>KWin::X11Window::isFullScreenable</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a4f27ecb2b1e34b8c0d188b2a677b4d04">isFullScreenable</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> can be shown in full screen mode; otherwise <computeroutput>false</computeroutput>.</para>
<para>Default implementation returns <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="138" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1204" bodyend="1214"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a2f48fc29406a12f659c62e25709e81a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::setFullScreen</definition>
        <argsstring>(bool set) override</argsstring>
        <name>setFullScreen</name>
        <qualifiedname>KWin::X11Window::setFullScreen</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a5f16d2ea8d86a8b9e94c2461d4dbb9c8">setFullScreen</reimplements>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Asks the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> to enter or leave full screen mode.</para>
<para>Default implementation does nothing.</para>
<para><computeroutput>set</computeroutput> <computeroutput>true</computeroutput> if the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> has to be shown in full screen mode, otherwise <computeroutput>false</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="139" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4276" bodyend="4326"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ae5b462a986c3efa84fa3c566cc9b985e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::isFullScreen</definition>
        <argsstring>() const override</argsstring>
        <name>isFullScreen</name>
        <qualifiedname>KWin::X11Window::isFullScreen</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1af68e2698e10f68963734220af029279f">isFullScreen</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> is currently being shown in full screen mode; otherwise <computeroutput>false</computeroutput>.</para>
<para>A window in full screen mode occupies the entire screen with no window frame around it.</para>
<para>Default implementation returns <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="140" column="10" bodyfile="kwin/src/x11window.h" bodystart="549" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ae059401c61a846bfa487c1564d1dbfac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::X11Window::fullScreenMode</definition>
        <argsstring>() const</argsstring>
        <name>fullScreenMode</name>
        <qualifiedname>KWin::X11Window::fullScreenMode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="141" column="9" bodyfile="kwin/src/x11window.h" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a51f795b9545f4b2b1c9aaa3bd3ff0fde" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::userNoBorder</definition>
        <argsstring>() const</argsstring>
        <name>userNoBorder</name>
        <qualifiedname>KWin::X11Window::userNoBorder</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="146" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1199" bodyend="1202"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a41bb8138b2bf7ce1cd9f62f2d839dce3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::noBorder</definition>
        <argsstring>() const override</argsstring>
        <name>noBorder</name>
        <qualifiedname>KWin::X11Window::noBorder</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a728e6755d954d62acad193681d709610">noBorder</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="147" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1216" bodyend="1219"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a4e73f983d63129203de7cdf7cb915826" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::setNoBorder</definition>
        <argsstring>(bool set) override</argsstring>
        <name>setNoBorder</name>
        <qualifiedname>KWin::X11Window::setNoBorder</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1ab2de2bd6a4bf0fabdf41c5cac3e595f3">setNoBorder</reimplements>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="148" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1235" bodyend="1248"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a4a2834b58aae2c4a90b9730f99eb1e31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::userCanSetNoBorder</definition>
        <argsstring>() const override</argsstring>
        <name>userCanSetNoBorder</name>
        <qualifiedname>KWin::X11Window::userCanSetNoBorder</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a0078f08c782843fcb88397dff0ad6232">userCanSetNoBorder</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="149" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1221" bodyend="1233"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a188bf6c90ae46ccd1dcba279fc494bb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::checkNoBorder</definition>
        <argsstring>() override</argsstring>
        <name>checkNoBorder</name>
        <qualifiedname>KWin::X11Window::checkNoBorder</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a848c62c85204f55706acf4ea61a08d56">checkNoBorder</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="150" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1250" bodyend="1253"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a11a31f06dd221d1bb1e4c6166ffbeb52" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::checkActivities</definition>
        <argsstring>() override</argsstring>
        <name>checkActivities</name>
        <qualifiedname>KWin::X11Window::checkActivities</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1af4760996e58d03d3cf08cb9a91f06ba6">checkActivities</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Refresh <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref>&apos;s cache of activites Called when activity daemon status changes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="151" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2300" bodyend="2306"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a360413cff4a7e2dbcfde0dfa01fc41c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::X11Window::sessionStackingOrder</definition>
        <argsstring>() const</argsstring>
        <name>sessionStackingOrder</name>
        <qualifiedname>KWin::X11Window::sessionStackingOrder</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="153" column="9" bodyfile="kwin/src/x11window.h" bodystart="559" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a1614734f8b904d3507c3e2e746948aca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::wantsInput</definition>
        <argsstring>() const override</argsstring>
        <name>wantsInput</name>
        <qualifiedname>KWin::X11Window::wantsInput</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1aeb8663fe55e7f87c928c0d89f74a9f9f">wantsInput</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="156" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2190" bodyend="2193"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ad26ea1c81f61a38f6652edc5212f32e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::isResizable</definition>
        <argsstring>() const override</argsstring>
        <name>isResizable</name>
        <qualifiedname>KWin::X11Window::isResizable</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1aca7dbc7f62bb563afea5583e128a4afb">isResizable</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is resizable or has a fixed size. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="158" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="3906" bodyend="3931"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1af6f8e4a552926fe7968147d02b5ba732" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::isMovable</definition>
        <argsstring>() const override</argsstring>
        <name>isMovable</name>
        <qualifiedname>KWin::X11Window::isMovable</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a8ebfa3b947306e5cdd3b1db42a1dc601">isMovable</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window is moveable or has a fixed position. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="159" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="3863" bodyend="3884"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a01dc71b0fcf03387727e17aa70fbed15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::isMovableAcrossScreens</definition>
        <argsstring>() const override</argsstring>
        <name>isMovableAcrossScreens</name>
        <qualifiedname>KWin::X11Window::isMovableAcrossScreens</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a61015d9b343ba6b5a7107caa4169bb51">isMovableAcrossScreens</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window can be moved to another screen. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="160" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="3886" bodyend="3904"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a5f7b5e65052844f25f1efcc0ebf150d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::isCloseable</definition>
        <argsstring>() const override</argsstring>
        <name>isCloseable</name>
        <qualifiedname>KWin::X11Window::isCloseable</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a968b72b00f5b592dc1c61359a760ddf9">isCloseable</reimplements>
        <briefdescription>
<para>May be closed by the user (May have a close button) </para>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window may be closed (have a close button) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="161" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1624" bodyend="1627"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a704bb98c8ea8645169ca5d9b2588abea" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::takeFocus</definition>
        <argsstring>() override</argsstring>
        <name>takeFocus</name>
        <qualifiedname>KWin::X11Window::takeFocus</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a6e2457230d295588778fdda994896e29">takeFocus</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs the actual focusing of the window using XSetInputFocus and WM_TAKE_FOCUS </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="163" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1870" bodyend="1896"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a9ef0042230e05f0829491bbf6f3dd091" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::invalidateDecoration</definition>
        <argsstring>() override</argsstring>
        <name>invalidateDecoration</name>
        <qualifiedname>KWin::X11Window::invalidateDecoration</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a584f743781c6709049fa7fe25fa3c88b">invalidateDecoration</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="165" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1089" bodyend="1092"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1afcee480b58ca8d3d4c54218a92243631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::detectShape</definition>
        <argsstring>()</argsstring>
        <name>detectShape</name>
        <qualifiedname>KWin::X11Window::detectShape</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="167" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1255" bodyend="1258"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aeba379d644f6d23d9967f08e1d4fe462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::updateShape</definition>
        <argsstring>()</argsstring>
        <name>updateShape</name>
        <qualifiedname>KWin::X11Window::updateShape</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="168" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1260" bodyend="1292"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a6c03fc2e4e471167af05d58866f4ab23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::X11Window::resizeWithChecks</definition>
        <argsstring>(const QRectF &amp;geometry, const QSizeF &amp;size) override</argsstring>
        <name>resizeWithChecks</name>
        <qualifiedname>KWin::X11Window::resizeWithChecks</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a06e0e35e4fd13abedca3ed0f9eb65f56">resizeWithChecks</reimplements>
        <param>
          <type>const QRectF &amp;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para><ref refid="class_k_win_1_1_x11_window_1a6c03fc2e4e471167af05d58866f4ab23" kindref="member">resizeWithChecks()</ref> resizes according to gravity, and checks workarea position </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="171" column="12" bodyfile="kwin/src/x11window.h" bodystart="569" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a5871fc2a918eb9a92cd610d4a7aa454e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::X11Window::resizeWithChecks</definition>
        <argsstring>(const QRectF &amp;geometry, qreal w, qreal h, xcb_gravity_t gravity)</argsstring>
        <name>resizeWithChecks</name>
        <qualifiedname>KWin::X11Window::resizeWithChecks</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>w</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>h</declname>
        </param>
        <param>
          <type>xcb_gravity_t</type>
          <declname>gravity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="172" column="12" bodyfile="kwin/src/x11window.cpp" bodystart="3772" bodyend="3833"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a11885a761ac0deb25396b265ac46314e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::X11Window::resizeWithChecks</definition>
        <argsstring>(const QRectF &amp;geometry, const QSizeF &amp;s, xcb_gravity_t gravity)</argsstring>
        <name>resizeWithChecks</name>
        <qualifiedname>KWin::X11Window::resizeWithChecks</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>xcb_gravity_t</type>
          <declname>gravity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="173" column="12" bodyfile="kwin/src/x11window.h" bodystart="574" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ad86f89d181510912a5d22dd8809232f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::X11Window::constrainClientSize</definition>
        <argsstring>(const QSizeF &amp;size, SizeMode mode=SizeModeAny) const override</argsstring>
        <name>constrainClientSize</name>
        <qualifiedname>KWin::X11Window::constrainClientSize</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1abaf5c29b43c3bdd7415d4db7f3c441b4">constrainClientSize</reimplements>
        <param>
          <type>const QSizeF &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_window_1a96727035a8ba0a709cc464483d1d7b3e" kindref="member">SizeMode</ref></type>
          <declname>mode</declname>
          <defval><ref refid="class_k_win_1_1_window_1a96727035a8ba0a709cc464483d1d7b3eac26ddc87899c79d31f6f90bcd11b85ba" kindref="member">SizeModeAny</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constrains the client size <computeroutput>size</computeroutput> according to a set of the window&apos;s size hints.</para>
<para>Default implementation applies only minimum and maximum size constraints. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="174" column="12" bodyfile="kwin/src/x11window.cpp" bodystart="3249" bodyend="3412"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a0534b03d57a37b287fd85abe101a300d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::providesContextHelp</definition>
        <argsstring>() const override</argsstring>
        <name>providesContextHelp</name>
        <qualifiedname>KWin::X11Window::providesContextHelp</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a4eb8c1b2c6df25f85d091afeeebb66ef">providesContextHelp</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the window provides context help or not. If it does, you should show a help menu item or a help button like &apos;?&apos; and call contextHelp() if this is invoked.</para>
<para><simplesect kind="see"><para>contextHelp() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="176" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1905" bodyend="1908"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a0455ca5d541dedad3447ba818ff5060f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::updateVisibility</definition>
        <argsstring>()</argsstring>
        <name>updateVisibility</name>
        <qualifiedname>KWin::X11Window::updateVisibility</qualifiedname>
        <briefdescription>
<para>Updates visibility depending on being shaded, virtual desktop, etc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="179" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1437" bodyend="1467"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a143ebe7e115cf4e2021c76df9915ffab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::hiddenPreview</definition>
        <argsstring>() const</argsstring>
        <name>hiddenPreview</name>
        <qualifiedname>KWin::X11Window::hiddenPreview</qualifiedname>
        <briefdescription>
<para><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> is mapped in order to get a window pixmap. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="180" column="10" bodyfile="kwin/src/x11window.h" bodystart="584" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a7e486d52b96037445ac64672e741b0da" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>QString</type>
        <definition>QString KWin::X11Window::captionNormal</definition>
        <argsstring>() const override</argsstring>
        <name>captionNormal</name>
        <qualifiedname>KWin::X11Window::captionNormal</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a92233974ab2cf30d74e585daabcc3782">captionNormal</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The caption as set by the <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> without any suffix. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_window_1a9a91fff09e5795dce9c1732082ff09b4" kindref="member">caption</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_x11_window_1aab38daa11733395704738f79e0b7b60d" kindref="member">captionSuffix</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="182" column="13" bodyfile="kwin/src/x11window.h" bodystart="182" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aab38daa11733395704738f79e0b7b60d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>QString</type>
        <definition>QString KWin::X11Window::captionSuffix</definition>
        <argsstring>() const override</argsstring>
        <name>captionSuffix</name>
        <qualifiedname>KWin::X11Window::captionSuffix</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a5f87d4992170acf48102a02db67279f0">captionSuffix</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The suffix added to the caption (e.g. shortcut, machine name, etc.) </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_window_1a9a91fff09e5795dce9c1732082ff09b4" kindref="member">caption</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_x11_window_1a7e486d52b96037445ac64672e741b0da" kindref="member">captionNormal</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="186" column="13" bodyfile="kwin/src/x11window.h" bodystart="186" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ae020484bc7335a2691fd19eac6a1056c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::X11Window::gravityAdjustment</definition>
        <argsstring>(xcb_gravity_t gravity) const</argsstring>
        <name>gravityAdjustment</name>
        <qualifiedname>KWin::X11Window::gravityAdjustment</qualifiedname>
        <param>
          <type>xcb_gravity_t</type>
          <declname>gravity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="191" column="13" bodyfile="kwin/src/x11window.cpp" bodystart="3571" bodyend="3627"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aaa1eee010ef24eb77cb4dc7f015ed9a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const QPointF</type>
        <definition>const QPointF KWin::X11Window::calculateGravitation</definition>
        <argsstring>(bool invert) const</argsstring>
        <name>calculateGravitation</name>
        <qualifiedname>KWin::X11Window::calculateGravitation</qualifiedname>
        <param>
          <type>bool</type>
          <declname>invert</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="192" column="19" bodyfile="kwin/src/x11window.cpp" bodystart="3629" bodyend="3642"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a4ea1fefbb46d8c53846ff8f883ef4dee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::NETMoveResize</definition>
        <argsstring>(qreal x_root, qreal y_root, NET::Direction direction, xcb_button_t button)</argsstring>
        <name>NETMoveResize</name>
        <qualifiedname>KWin::X11Window::NETMoveResize</qualifiedname>
        <param>
          <type>qreal</type>
          <declname>x_root</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>y_root</declname>
        </param>
        <param>
          <type>NET::Direction</type>
          <declname>direction</declname>
        </param>
        <param>
          <type>xcb_button_t</type>
          <declname>button</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="194" column="10" bodyfile="kwin/src/events.cpp" bodystart="747" bodyend="806"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a0a3956dd63bae633d3c5ae43d719f536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::NETMoveResizeWindow</definition>
        <argsstring>(int flags, qreal x, qreal y, qreal width, qreal height)</argsstring>
        <name>NETMoveResizeWindow</name>
        <qualifiedname>KWin::X11Window::NETMoveResizeWindow</qualifiedname>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>x</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>y</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>width</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="195" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="3837" bodyend="3854"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a21869cb8fb78f45c4f64286c98af4ed3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::GTKShowWindowMenu</definition>
        <argsstring>(qreal x_root, qreal y_root)</argsstring>
        <name>GTKShowWindowMenu</name>
        <qualifiedname>KWin::X11Window::GTKShowWindowMenu</qualifiedname>
        <param>
          <type>qreal</type>
          <declname>x_root</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>y_root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="196" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="3857" bodyend="3861"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a1dee043d082cfa70ef4bd172c5e7db40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::restackWindow</definition>
        <argsstring>(xcb_window_t above, int detail, NET::RequestSource source, xcb_timestamp_t timestamp)</argsstring>
        <name>restackWindow</name>
        <qualifiedname>KWin::X11Window::restackWindow</qualifiedname>
        <param>
          <type>xcb_window_t</type>
          <declname>above</declname>
        </param>
        <param>
          <type>int</type>
          <declname>detail</declname>
        </param>
        <param>
          <type>NET::RequestSource</type>
          <declname>source</declname>
        </param>
        <param>
          <type>xcb_timestamp_t</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="197" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4942" bodyend="4985"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a443d3e0d70905641a1f9becb641e157a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::gotPing</definition>
        <argsstring>(xcb_timestamp_t timestamp)</argsstring>
        <name>gotPing</name>
        <qualifiedname>KWin::X11Window::gotPing</qualifiedname>
        <param>
          <type>xcb_timestamp_t</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="199" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1706" bodyend="1720"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aa6d818043d5d2f1f757d18f560d9c71e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::updateUserTime</definition>
        <argsstring>(xcb_timestamp_t time=XCB_TIME_CURRENT_TIME)</argsstring>
        <name>updateUserTime</name>
        <qualifiedname>KWin::X11Window::updateUserTime</qualifiedname>
        <param>
          <type>xcb_timestamp_t</type>
          <declname>time</declname>
          <defval>XCB_TIME_CURRENT_TIME</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="201" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4671" bodyend="4685"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ada9945f8884ca782481cb3fbfb8f33ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>xcb_timestamp_t</type>
        <definition>xcb_timestamp_t KWin::X11Window::userTime</definition>
        <argsstring>() const override</argsstring>
        <name>userTime</name>
        <qualifiedname>KWin::X11Window::userTime</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a24616d29b6a97cb4b9146cd8dac3f5f8">userTime</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="202" column="21" bodyfile="kwin/src/x11window.cpp" bodystart="4776" bodyend="4789"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a3078570444760b4a48a69fadf74b7a2b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::hasUserTimeSupport</definition>
        <argsstring>() const</argsstring>
        <name>hasUserTimeSupport</name>
        <qualifiedname>KWin::X11Window::hasUserTimeSupport</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="203" column="10" bodyfile="kwin/src/x11window.h" bodystart="579" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aa4171b66aad9facad7cd60937f8be3d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::killWindow</definition>
        <argsstring>() override</argsstring>
        <name>killWindow</name>
        <qualifiedname>KWin::X11Window::killWindow</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a5498d4b8f227afb803b7c09c4ad53160">killWindow</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Kills the window via XKill </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="211" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1656" bodyend="1666"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a7de22915b48c0b82741aed9ecce4286c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::showContextHelp</definition>
        <argsstring>() override</argsstring>
        <name>showContextHelp</name>
        <qualifiedname>KWin::X11Window::showContextHelp</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1ab6ab84f217f36414e4089b4b7b34f069">showContextHelp</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invokes context help on the window. Only works if the window actually provides context help.</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_window_1af3de3b41671127884529d47ba9e96fc0" kindref="member">providesContextHelp()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="212" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1916" bodyend="1921"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aebfddaceb1026381401b70b7984af92f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::checkActiveModal</definition>
        <argsstring>()</argsstring>
        <name>checkActiveModal</name>
        <qualifiedname>KWin::X11Window::checkActiveModal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="213" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="3231" bodyend="3247"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ab99047488d85c85c666ddb2ecab244ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_k_win_1_1_strut_rect" kindref="compound">StrutRect</ref></type>
        <definition>StrutRect KWin::X11Window::strutRect</definition>
        <argsstring>(StrutArea area) const override</argsstring>
        <name>strutRect</name>
        <qualifiedname>KWin::X11Window::strutRect</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1aba525ab96946e97c8a9508223b32aa7a">strutRect</reimplements>
        <param>
          <type><ref refid="namespace_k_win_1a5e1f12b4f6fe1e98672dabf86c00fd1f" kindref="member">StrutArea</ref></type>
          <declname>area</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="215" column="15" bodyfile="kwin/src/x11window.cpp" bodystart="4431" bodyend="4473"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a0705718e853e8dc77e99fcf3a7e446e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::hasStrut</definition>
        <argsstring>() const override</argsstring>
        <name>hasStrut</name>
        <qualifiedname>KWin::X11Window::hasStrut</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1ada41aaefb2c2e4b7f03039ff971c1211">hasStrut</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="216" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4475" bodyend="4482"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aa6f12c894ba2f2a0f1d37dfdeaa6c3ea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::isClientSideDecorated</definition>
        <argsstring>() const</argsstring>
        <name>isClientSideDecorated</name>
        <qualifiedname>KWin::X11Window::isClientSideDecorated</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="218" column="10" bodyfile="kwin/src/x11window.h" bodystart="519" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1afbe8974f7b4627bb6004a590f1e98323" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_xcb_1_1_string_property" kindref="compound">Xcb::StringProperty</ref></type>
        <definition>Xcb::StringProperty KWin::X11Window::fetchPreferredColorScheme</definition>
        <argsstring>() const</argsstring>
        <name>fetchPreferredColorScheme</name>
        <qualifiedname>KWin::X11Window::fetchPreferredColorScheme</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="220" column="25" bodyfile="kwin/src/x11window.cpp" bodystart="2314" bodyend="2317"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a0578029e113c93a9816a7c11590c8b8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::X11Window::readPreferredColorScheme</definition>
        <argsstring>(Xcb::StringProperty &amp;property) const</argsstring>
        <name>readPreferredColorScheme</name>
        <qualifiedname>KWin::X11Window::readPreferredColorScheme</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_xcb_1_1_string_property" kindref="compound">Xcb::StringProperty</ref> &amp;</type>
          <declname>property</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="221" column="13" bodyfile="kwin/src/x11window.cpp" bodystart="2319" bodyend="2322"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a756913ae234b4f7441c9986ca98205b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QString</type>
        <definition>QString KWin::X11Window::preferredColorScheme</definition>
        <argsstring>() const override</argsstring>
        <name>preferredColorScheme</name>
        <qualifiedname>KWin::X11Window::preferredColorScheme</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a8351dc98d7b4e8388c20c1f75d45b53b">preferredColorScheme</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="222" column="13" bodyfile="kwin/src/x11window.cpp" bodystart="2324" bodyend="2328"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ae56e338fd870babf17b618f5f877c134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::setSessionActivityOverride</definition>
        <argsstring>(bool needed)</argsstring>
        <name>setSessionActivityOverride</name>
        <qualifiedname>KWin::X11Window::setSessionActivityOverride</qualifiedname>
        <param>
          <type>bool</type>
          <declname>needed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="225" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2308" bodyend="2312"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a852aa374f815f9b1b3ac774dd4ac6d84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::isClient</definition>
        <argsstring>() const override</argsstring>
        <name>isClient</name>
        <qualifiedname>KWin::X11Window::isClient</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a5f50be966c1885fe61b8a54e2dd584d8">isClient</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="226" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2330" bodyend="2333"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a6c61081edb155d2aa8672e2ee6a94708" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::isOutline</definition>
        <argsstring>() const override</argsstring>
        <name>isOutline</name>
        <qualifiedname>KWin::X11Window::isOutline</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a66101776c8b365f52d966288d39dbeec">isOutline</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="227" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2340" bodyend="2343"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a96c7a60b05aadbc537329ae7f90c817a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::isUnmanaged</definition>
        <argsstring>() const override</argsstring>
        <name>isUnmanaged</name>
        <qualifiedname>KWin::X11Window::isUnmanaged</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a96111c26765b1c276dc41df14aa1a5af">isUnmanaged</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="228" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2335" bodyend="2338"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a79a9f667307227a6db1343f080e61ced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::cancelFocusOutTimer</definition>
        <argsstring>()</argsstring>
        <name>cancelFocusOutTimer</name>
        <qualifiedname>KWin::X11Window::cancelFocusOutTimer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="230" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2359" bodyend="2364"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a014911fefc34d2f424b4438e130b5aad" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::showOnScreenEdge</definition>
        <argsstring>() override</argsstring>
        <name>showOnScreenEdge</name>
        <qualifiedname>KWin::X11Window::showOnScreenEdge</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a1a0b0f83a533b8b689dd8bd35c318b8b">showOnScreenEdge</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Restores the <ref refid="class_client" kindref="compound">Client</ref> after it had been hidden due to show on screen edge functionality. In addition the property gets deleted so that the <ref refid="class_client" kindref="compound">Client</ref> knows that it is visible again. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="236" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2551" bodyend="2555"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a8d338a701c0f1f6ab4c12c1d656adf74" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_xcb_1_1_string_property" kindref="compound">Xcb::StringProperty</ref></type>
        <definition>Xcb::StringProperty KWin::X11Window::fetchApplicationMenuServiceName</definition>
        <argsstring>() const</argsstring>
        <name>fetchApplicationMenuServiceName</name>
        <qualifiedname>KWin::X11Window::fetchApplicationMenuServiceName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="238" column="25" bodyfile="kwin/src/x11window.cpp" bodystart="2571" bodyend="2574"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a68b4cac4c0bafcdaa1b65abdd1698b4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::readApplicationMenuServiceName</definition>
        <argsstring>(Xcb::StringProperty &amp;property)</argsstring>
        <name>readApplicationMenuServiceName</name>
        <qualifiedname>KWin::X11Window::readApplicationMenuServiceName</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_xcb_1_1_string_property" kindref="compound">Xcb::StringProperty</ref> &amp;</type>
          <declname>property</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="239" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2576" bodyend="2579"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a83c3971ad7bd97a47b428285cc900402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::checkApplicationMenuServiceName</definition>
        <argsstring>()</argsstring>
        <name>checkApplicationMenuServiceName</name>
        <qualifiedname>KWin::X11Window::checkApplicationMenuServiceName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="240" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2581" bodyend="2585"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a1e877ff3158c82224301f63640e2f80c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_xcb_1_1_string_property" kindref="compound">Xcb::StringProperty</ref></type>
        <definition>Xcb::StringProperty KWin::X11Window::fetchApplicationMenuObjectPath</definition>
        <argsstring>() const</argsstring>
        <name>fetchApplicationMenuObjectPath</name>
        <qualifiedname>KWin::X11Window::fetchApplicationMenuObjectPath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="242" column="25" bodyfile="kwin/src/x11window.cpp" bodystart="2587" bodyend="2590"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a0fa9fddfd088d3b8402fe8f3c77bf694" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::readApplicationMenuObjectPath</definition>
        <argsstring>(Xcb::StringProperty &amp;property)</argsstring>
        <name>readApplicationMenuObjectPath</name>
        <qualifiedname>KWin::X11Window::readApplicationMenuObjectPath</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_xcb_1_1_string_property" kindref="compound">Xcb::StringProperty</ref> &amp;</type>
          <declname>property</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="243" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2592" bodyend="2595"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a1d1ecbf363011f72ea936436a0814a7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::checkApplicationMenuObjectPath</definition>
        <argsstring>()</argsstring>
        <name>checkApplicationMenuObjectPath</name>
        <qualifiedname>KWin::X11Window::checkApplicationMenuObjectPath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="244" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2597" bodyend="2601"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a464866180484d5fdee7b76bf021b741f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="struct_k_win_1_1_x11_window_1_1_sync_request" kindref="compound">SyncRequest</ref> &amp;</type>
        <definition>const SyncRequest &amp; KWin::X11Window::syncRequest</definition>
        <argsstring>() const</argsstring>
        <name>syncRequest</name>
        <qualifiedname>KWin::X11Window::syncRequest</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="258" column="23" bodyfile="kwin/src/x11window.h" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aa18bcf738f457ed150e5d309f086b018" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::ackSync</definition>
        <argsstring>()</argsstring>
        <name>ackSync</name>
        <qualifiedname>KWin::X11Window::ackSync</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="262" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2603" bodyend="2619"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1acf438337522deafccf8127f32c305918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::ackSyncTimeout</definition>
        <argsstring>()</argsstring>
        <name>ackSyncTimeout</name>
        <qualifiedname>KWin::X11Window::ackSyncTimeout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="263" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2621" bodyend="2628"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a182332ca660202f8f8dbbe2c95e64832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::finishSync</definition>
        <argsstring>()</argsstring>
        <name>finishSync</name>
        <qualifiedname>KWin::X11Window::finishSync</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="264" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2630" bodyend="2641"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ac4ea0281b6dd47dc2eadc44c5b824b0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::allowWindowActivation</definition>
        <argsstring>(xcb_timestamp_t time=-1U, bool focus_in=false)</argsstring>
        <name>allowWindowActivation</name>
        <qualifiedname>KWin::X11Window::allowWindowActivation</qualifiedname>
        <param>
          <type>xcb_timestamp_t</type>
          <declname>time</declname>
          <defval>-1U</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>focus_in</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="266" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4858" bodyend="4940"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ad49c1844b0fc9fc164afa874f3a7a5fd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>quint64</type>
        <definition>quint64 KWin::X11Window::surfaceSerial</definition>
        <argsstring>() const</argsstring>
        <name>surfaceSerial</name>
        <qualifiedname>KWin::X11Window::surfaceSerial</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="268" column="13" bodyfile="kwin/src/x11window.h" bodystart="589" bodyend="592"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a3514798b407fc2a0bd1836916b471736" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::deleteClient</definition>
        <argsstring>(X11Window *c)</argsstring>
        <name>deleteClient</name>
        <qualifiedname>KWin::X11Window::deleteClient</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_x11_window" kindref="compound">X11Window</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Does &apos;delete c;&apos;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="206" column="17" bodyfile="kwin/src/x11window.cpp" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ad978568ef3760787e04fcd1198f05845" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::belongToSameApplication</definition>
        <argsstring>(const X11Window *c1, const X11Window *c2, SameApplicationChecks checks=SameApplicationChecks())</argsstring>
        <name>belongToSameApplication</name>
        <qualifiedname>KWin::X11Window::belongToSameApplication</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_x11_window" kindref="compound">X11Window</ref> *</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_x11_window" kindref="compound">X11Window</ref> *</type>
          <declname>c2</declname>
        </param>
        <param>
          <type>SameApplicationChecks</type>
          <declname>checks</declname>
          <defval>SameApplicationChecks()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="208" column="17" bodyfile="kwin/src/x11window.cpp" bodystart="2643" bodyend="2683"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a1552f36cc01da626a1a6de4d76e94d50" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::sameAppWindowRoleMatch</definition>
        <argsstring>(const X11Window *c1, const X11Window *c2, bool active_hack)</argsstring>
        <name>sameAppWindowRoleMatch</name>
        <qualifiedname>KWin::X11Window::sameAppWindowRoleMatch</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_x11_window" kindref="compound">X11Window</ref> *</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_x11_window" kindref="compound">X11Window</ref> *</type>
          <declname>c2</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>active_hack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="209" column="17" bodyfile="kwin/src/x11window.cpp" bodystart="2695" bodyend="2735"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-slot">
      <memberdef kind="slot" id="class_k_win_1_1_x11_window_1a100d8dcd723787d44cdb0360f18b6e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::closeWindow</definition>
        <argsstring>() override</argsstring>
        <name>closeWindow</name>
        <qualifiedname>KWin::X11Window::closeWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Closes the window by either sending a delete_window message or using XKill. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="271" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1632" bodyend="1651"/>
      </memberdef>
      <memberdef kind="slot" id="class_k_win_1_1_x11_window_1a15704747d5303018fad70cb9491a9926" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::updateCaption</definition>
        <argsstring>() override</argsstring>
        <name>updateCaption</name>
        <qualifiedname>KWin::X11Window::updateCaption</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="272" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2011" bodyend="2014"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a97dd8e2b9526b26e75f354bb55e4d4b7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::mapRequestEvent</definition>
        <argsstring>(xcb_map_request_event_t *e)</argsstring>
        <name>mapRequestEvent</name>
        <qualifiedname>KWin::X11Window::mapRequestEvent</qualifiedname>
        <param>
          <type>xcb_map_request_event_t *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handles map requests of the client window </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="276" column="10" bodyfile="kwin/src/events.cpp" bodystart="455" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a4bb87843ffa7ebde1ca84c6624105ecd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::unmapNotifyEvent</definition>
        <argsstring>(xcb_unmap_notify_event_t *e)</argsstring>
        <name>unmapNotifyEvent</name>
        <qualifiedname>KWin::X11Window::unmapNotifyEvent</qualifiedname>
        <param>
          <type>xcb_unmap_notify_event_t *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handles unmap notify events of the client window </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="277" column="10" bodyfile="kwin/src/events.cpp" bodystart="495" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a915cf8a4d2e655910127d4bf410845b5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::destroyNotifyEvent</definition>
        <argsstring>(xcb_destroy_notify_event_t *e)</argsstring>
        <name>destroyNotifyEvent</name>
        <qualifiedname>KWin::X11Window::destroyNotifyEvent</qualifiedname>
        <param>
          <type>xcb_destroy_notify_event_t *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="278" column="10" bodyfile="kwin/src/events.cpp" bodystart="523" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a8bfddbf9d7cbbe7e97490aa95ab3e02d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::configureNotifyEvent</definition>
        <argsstring>(xcb_configure_notify_event_t *e)</argsstring>
        <name>configureNotifyEvent</name>
        <qualifiedname>KWin::X11Window::configureNotifyEvent</qualifiedname>
        <param>
          <type>xcb_configure_notify_event_t *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="279" column="10" bodyfile="kwin/src/events.cpp" bodystart="557" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aa50cfbd22ee8cb01b73eacb1d2b64413" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::configureRequestEvent</definition>
        <argsstring>(xcb_configure_request_event_t *e)</argsstring>
        <name>configureRequestEvent</name>
        <qualifiedname>KWin::X11Window::configureRequestEvent</qualifiedname>
        <param>
          <type>xcb_configure_request_event_t *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handles configure requests of the client window </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="280" column="10" bodyfile="kwin/src/events.cpp" bodystart="578" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a9f96d5572a984e786475329df63963f3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::propertyNotifyEvent</definition>
        <argsstring>(xcb_property_notify_event_t *e)</argsstring>
        <name>propertyNotifyEvent</name>
        <qualifiedname>KWin::X11Window::propertyNotifyEvent</qualifiedname>
        <param>
          <type>xcb_property_notify_event_t *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handles property changes of the client window </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="281" column="10" bodyfile="kwin/src/events.cpp" bodystart="624" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a4ee833894920d122aeff9b7a531deab2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::clientMessageEvent</definition>
        <argsstring>(xcb_client_message_event_t *e)</argsstring>
        <name>clientMessageEvent</name>
        <qualifiedname>KWin::X11Window::clientMessageEvent</qualifiedname>
        <param>
          <type>xcb_client_message_event_t *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handles client messages for the client window </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="282" column="10" bodyfile="kwin/src/events.cpp" bodystart="534" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a444feb5a8a18956df514967f006356ff" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::focusInEvent</definition>
        <argsstring>(xcb_focus_in_event_t *e)</argsstring>
        <name>focusInEvent</name>
        <qualifiedname>KWin::X11Window::focusInEvent</qualifiedname>
        <param>
          <type>xcb_focus_in_event_t *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="283" column="10" bodyfile="kwin/src/events.cpp" bodystart="671" bodyend="701"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aae9f06e1458a6a5af0a9c9ec30d19897" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::focusOutEvent</definition>
        <argsstring>(xcb_focus_out_event_t *e)</argsstring>
        <name>focusOutEvent</name>
        <qualifiedname>KWin::X11Window::focusOutEvent</qualifiedname>
        <param>
          <type>xcb_focus_out_event_t *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="284" column="10" bodyfile="kwin/src/events.cpp" bodystart="703" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ad4b17c7d31c907bcd72f08fc04d1a6de" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::exportMappingState</definition>
        <argsstring>(int s)</argsstring>
        <name>exportMappingState</name>
        <qualifiedname>KWin::X11Window::exportMappingState</qualifiedname>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the client window&apos;s mapping state. Possible values are WithdrawnState, IconicState, NormalState. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="315" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1473" bodyend="1487"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a815d7dcf1b3907d8f200510156b54ac7" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::isManaged</definition>
        <argsstring>() const</argsstring>
        <name>isManaged</name>
        <qualifiedname>KWin::X11Window::isManaged</qualifiedname>
        <briefdescription>
<para>Returns false if this client is not yet managed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="316" column="10" bodyfile="kwin/src/x11window.h" bodystart="564" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a94ea5dc729e583b4769cc7aedf8e17af" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::updateAllowedActions</definition>
        <argsstring>(bool force=false)</argsstring>
        <name>updateAllowedActions</name>
        <qualifiedname>KWin::X11Window::updateAllowedActions</qualifiedname>
        <param>
          <type>bool</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="317" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2205" bodyend="2256"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aedd73012b4ffd3ac691de1b0f29dc201" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRect</type>
        <definition>QRect KWin::X11Window::fullscreenMonitorsArea</definition>
        <argsstring>(NETFullscreenMonitors topology) const</argsstring>
        <name>fullscreenMonitorsArea</name>
        <qualifiedname>KWin::X11Window::fullscreenMonitorsArea</qualifiedname>
        <param>
          <type>NETFullscreenMonitors</type>
          <declname>topology</declname>
          <defname>requestedTopology</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the bounding rectangle defined by the 4 monitor indices indicating the top, bottom, left, and right edges of the window when the fullscreen state is enabled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="318" column="11" bodyfile="kwin/src/x11window.cpp" bodystart="4351" bodyend="4369"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aaf152900d7d2d40ad264a85c933221df" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::getResourceClass</definition>
        <argsstring>()</argsstring>
        <name>getResourceClass</name>
        <qualifiedname>KWin::X11Window::getResourceClass</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="319" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="3449" bodyend="3452"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aa7579106126ca57370fbcb248021ee38" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::getWmNormalHints</definition>
        <argsstring>()</argsstring>
        <name>getWmNormalHints</name>
        <qualifiedname>KWin::X11Window::getWmNormalHints</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the client&apos;s normal WM hints and reconfigures itself respectively. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="320" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="3457" bodyend="3492"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a8d305c8ab41a33488d4033952f302e8d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::getWmClientMachine</definition>
        <argsstring>()</argsstring>
        <name>getWmClientMachine</name>
        <qualifiedname>KWin::X11Window::getWmClientMachine</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="321" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4646" bodyend="4649"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a18cb33a4927894921bca2b6ede90aff5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::getMotifHints</definition>
        <argsstring>()</argsstring>
        <name>getMotifHints</name>
        <qualifiedname>KWin::X11Window::getMotifHints</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="322" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2037" bodyend="2065"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a2cd4accc6ce5b049e6f33be3b45fca5d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::getIcons</definition>
        <argsstring>()</argsstring>
        <name>getIcons</name>
        <qualifiedname>KWin::X11Window::getIcons</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="323" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2067" bodyend="2112"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aa32140e78a8c89a63b194b19454df3dc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::getWmOpaqueRegion</definition>
        <argsstring>()</argsstring>
        <name>getWmOpaqueRegion</name>
        <qualifiedname>KWin::X11Window::getWmOpaqueRegion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="324" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4534" bodyend="4542"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a726e779bc76a5dad682c396b992da876" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::discardShapeRegion</definition>
        <argsstring>()</argsstring>
        <name>discardShapeRegion</name>
        <qualifiedname>KWin::X11Window::discardShapeRegion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="325" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4577" bodyend="4581"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ad520dc77dfff5dd9b4269143d96851ab" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::fetchName</definition>
        <argsstring>()</argsstring>
        <name>fetchName</name>
        <qualifiedname>KWin::X11Window::fetchName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fetches the window&apos;s caption (WM_NAME property). It will be stored in the client&apos;s <ref refid="class_k_win_1_1_window_1a9a91fff09e5795dce9c1732082ff09b4" kindref="member">caption()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="326" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1927" bodyend="1930"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a5fe86bbd65b6b2ffd34d7c783074b583" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::fetchIconicName</definition>
        <argsstring>()</argsstring>
        <name>fetchIconicName</name>
        <qualifiedname>KWin::X11Window::fetchIconicName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="327" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2016" bodyend="2035"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ae6844d4e1e4571ba6938b103002d0c8e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString KWin::X11Window::readName</definition>
        <argsstring>() const</argsstring>
        <name>readName</name>
        <qualifiedname>KWin::X11Window::readName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="328" column="13" bodyfile="kwin/src/x11window.cpp" bodystart="1949" bodyend="1956"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ac81685cb1c52b9ebe5f0074bf53a67df" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::setCaption</definition>
        <argsstring>(const QString &amp;s, bool force=false)</argsstring>
        <name>setCaption</name>
        <qualifiedname>KWin::X11Window::setCaption</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="329" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1961" bodyend="2009"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a231da0a0d67efe839d269c9d5a89dfea" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::hasTransientInternal</definition>
        <argsstring>(const X11Window *c, bool indirect, QList&lt; const X11Window * &gt; &amp;set) const</argsstring>
        <name>hasTransientInternal</name>
        <qualifiedname>KWin::X11Window::hasTransientInternal</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_x11_window" kindref="compound">X11Window</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>indirect</declname>
        </param>
        <param>
          <type>QList&lt; const <ref refid="class_k_win_1_1_x11_window" kindref="compound">X11Window</ref> * &gt; &amp;</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="330" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="3025" bodyend="3067"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a4e62a1023531c7165cacda3ae544c3ae" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::setShortcutInternal</definition>
        <argsstring>() override</argsstring>
        <name>setShortcutInternal</name>
        <qualifiedname>KWin::X11Window::setShortcutInternal</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a2fbf7904e517a0fa5a3661bdb86001c8">setShortcutInternal</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="331" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4998" bodyend="5009"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ad6f81e28f4196359b71b36304f3c0557" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_xcb_1_1_property" kindref="compound">Xcb::Property</ref></type>
        <definition>Xcb::Property KWin::X11Window::fetchWmClientLeader</definition>
        <argsstring>() const</argsstring>
        <name>fetchWmClientLeader</name>
        <qualifiedname>KWin::X11Window::fetchWmClientLeader</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="332" column="19" bodyfile="kwin/src/x11window.cpp" bodystart="4583" bodyend="4586"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a688470921011abdabe8710e41949ea33" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::readWmClientLeader</definition>
        <argsstring>(Xcb::Property &amp;p)</argsstring>
        <name>readWmClientLeader</name>
        <qualifiedname>KWin::X11Window::readWmClientLeader</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_xcb_1_1_property" kindref="compound">Xcb::Property</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="333" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4588" bodyend="4591"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aba5a438ac4f4c401ea9317cea86351a9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::getWmClientLeader</definition>
        <argsstring>()</argsstring>
        <name>getWmClientLeader</name>
        <qualifiedname>KWin::X11Window::getWmClientLeader</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="334" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4593" bodyend="4600"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a6b11ffba331180875f2ba8e8b3aa458f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_xcb_1_1_property" kindref="compound">Xcb::Property</ref></type>
        <definition>Xcb::Property KWin::X11Window::fetchSkipCloseAnimation</definition>
        <argsstring>() const</argsstring>
        <name>fetchSkipCloseAnimation</name>
        <qualifiedname>KWin::X11Window::fetchSkipCloseAnimation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="335" column="19" bodyfile="kwin/src/x11window.cpp" bodystart="4651" bodyend="4654"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a0ecf71466c32a50e250c9e72e25e1a59" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::readSkipCloseAnimation</definition>
        <argsstring>(Xcb::Property &amp;prop)</argsstring>
        <name>readSkipCloseAnimation</name>
        <qualifiedname>KWin::X11Window::readSkipCloseAnimation</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_xcb_1_1_property" kindref="compound">Xcb::Property</ref> &amp;</type>
          <declname>prop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="336" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4656" bodyend="4659"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ad04e182599f55512f082fac44cdc2877" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::getSkipCloseAnimation</definition>
        <argsstring>()</argsstring>
        <name>getSkipCloseAnimation</name>
        <qualifiedname>KWin::X11Window::getSkipCloseAnimation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="337" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4661" bodyend="4665"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ac1921f7ae1729305d00b02b1285501cf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::configureRequest</definition>
        <argsstring>(int value_mask, qreal rx, qreal ry, qreal rw, qreal rh, int gravity, bool from_tool)</argsstring>
        <name>configureRequest</name>
        <qualifiedname>KWin::X11Window::configureRequest</qualifiedname>
        <param>
          <type>int</type>
          <declname>value_mask</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>rx</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>ry</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>rw</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>rh</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gravity</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>from_tool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="339" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="3645" bodyend="3770"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a8cd217c8c85e2631910d131fd8182076" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>NETExtendedStrut</type>
        <definition>NETExtendedStrut KWin::X11Window::strut</definition>
        <argsstring>() const</argsstring>
        <name>strut</name>
        <qualifiedname>KWin::X11Window::strut</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="340" column="22" bodyfile="kwin/src/x11window.cpp" bodystart="4399" bodyend="4429"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1abaa286845fb49310485f9354bcc3bf7d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::X11Window::checkShadeGeometry</definition>
        <argsstring>(int w, int h)</argsstring>
        <name>checkShadeGeometry</name>
        <qualifiedname>KWin::X11Window::checkShadeGeometry</qualifiedname>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="341" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1abdacd3cab455593efccc8200293b6092" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::getSyncCounter</definition>
        <argsstring>()</argsstring>
        <name>getSyncCounter</name>
        <qualifiedname>KWin::X11Window::getSyncCounter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="342" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2114" bodyend="2152"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a8bbefc962d2261240377d89d98449e74" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::sendSyncRequest</definition>
        <argsstring>()</argsstring>
        <name>sendSyncRequest</name>
        <qualifiedname>KWin::X11Window::sendSyncRequest</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send the client a _NET_SYNC_REQUEST </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="343" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2157" bodyend="2188"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a60cc41d0659dcf351f77fc30dfcba02c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::pingWindow</definition>
        <argsstring>()</argsstring>
        <name>pingWindow</name>
        <qualifiedname>KWin::X11Window::pingWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send a ping to the window using _NET_WM_PING if possible if it doesn&apos;t respond within a reasonable time, it will be killed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="345" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1672" bodyend="1704"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ae57f321c93b4aa5f31871ef57b530302" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::killProcess</definition>
        <argsstring>(bool ask, xcb_timestamp_t timestamp=XCB_TIME_CURRENT_TIME)</argsstring>
        <name>killProcess</name>
        <qualifiedname>KWin::X11Window::killProcess</qualifiedname>
        <param>
          <type>bool</type>
          <declname>ask</declname>
        </param>
        <param>
          <type>xcb_timestamp_t</type>
          <declname>timestamp</declname>
          <defval>XCB_TIME_CURRENT_TIME</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="346" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1722" bodyend="1747"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ad5eb9a4f81f5b67c24e10c514fcb6fff" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::updateUrgency</definition>
        <argsstring>()</argsstring>
        <name>updateUrgency</name>
        <qualifiedname>KWin::X11Window::updateUrgency</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="347" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4839" bodyend="4844"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a593e59a1089886a5a04b690aeb00f88a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::embedClient</definition>
        <argsstring>(xcb_window_t w, xcb_visualid_t visualid, xcb_colormap_t colormap, const QRect &amp;nativeGeometry, uint8_t depth)</argsstring>
        <name>embedClient</name>
        <qualifiedname>KWin::X11Window::embedClient</qualifiedname>
        <param>
          <type>xcb_window_t</type>
          <declname>w</declname>
        </param>
        <param>
          <type>xcb_visualid_t</type>
          <declname>visualid</declname>
        </param>
        <param>
          <type>xcb_colormap_t</type>
          <declname>colormap</declname>
        </param>
        <param>
          <type>const QRect &amp;</type>
          <declname>nativeGeometry</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="351" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1013" bodyend="1064"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a0fd19b51f8f2c2872fb4f832b9433e53" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::detectNoBorder</definition>
        <argsstring>()</argsstring>
        <name>detectNoBorder</name>
        <qualifiedname>KWin::X11Window::detectNoBorder</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="352" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1130" bodyend="1167"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aca594a06e553127445fd3d2e30875b87" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::updateFrameExtents</definition>
        <argsstring>()</argsstring>
        <name>updateFrameExtents</name>
        <qualifiedname>KWin::X11Window::updateFrameExtents</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="353" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1169" bodyend="1177"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a57595a8204681eab51abf447417429e1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::setClientFrameExtents</definition>
        <argsstring>(const NETStrut &amp;strut)</argsstring>
        <name>setClientFrameExtents</name>
        <qualifiedname>KWin::X11Window::setClientFrameExtents</qualifiedname>
        <param>
          <type>const NETStrut &amp;</type>
          <declname>strut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="354" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1179" bodyend="1197"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a72719211ae47955e3e66d1426cdf9c4f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::internalShow</definition>
        <argsstring>()</argsstring>
        <name>internalShow</name>
        <qualifiedname>KWin::X11Window::internalShow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="356" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1489" bodyend="1502"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a5c666dd7d9c1ce72425606073c6920b9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::internalHide</definition>
        <argsstring>()</argsstring>
        <name>internalHide</name>
        <qualifiedname>KWin::X11Window::internalHide</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="357" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1504" bodyend="1517"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a4fa48412495f268916e74d594ce223fd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::internalKeep</definition>
        <argsstring>()</argsstring>
        <name>internalKeep</name>
        <qualifiedname>KWin::X11Window::internalKeep</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="358" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1519" bodyend="1533"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a5f53a567bc22f7a520029458a30ea963" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::map</definition>
        <argsstring>()</argsstring>
        <name>map</name>
        <qualifiedname>KWin::X11Window::map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maps (shows) the client. Note that it is mapping state of the frame, not necessarily the client window itself (i.e. a shaded window is here considered mapped, even though it is in IconicState). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="359" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1540" bodyend="1550"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a02f1b1a4618473d78d9e8590e17e1454" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::unmap</definition>
        <argsstring>()</argsstring>
        <name>unmap</name>
        <qualifiedname>KWin::X11Window::unmap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unmaps the client. Again, this is about the frame. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="360" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1555" bodyend="1569"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a027bcd91bc7a25f7ddeb4a762fc37416" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::updateHiddenPreview</definition>
        <argsstring>()</argsstring>
        <name>updateHiddenPreview</name>
        <qualifiedname>KWin::X11Window::updateHiddenPreview</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>XComposite doesn&apos;t keep window pixmaps of unmapped windows, which means there wouldn&apos;t be any previews of windows that are minimized or on another virtual desktop. Therefore rawHide() actually keeps such windows mapped. However special care needs to be taken so that such windows don&apos;t interfere. Therefore they&apos;re put very low in the stacking order and they have input shape set to none, which hopefully is enough. If there&apos;s no input shape available, then it&apos;s hoped that there will be some other desktop above it <emphasis>shrug</emphasis>. Using normal shape would be better, but that&apos;d affect other things, e.g. painting of the actual preview. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="361" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1582" bodyend="1594"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ab80efe428261f22b773147decfc42e8e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::updateInputShape</definition>
        <argsstring>()</argsstring>
        <name>updateInputShape</name>
        <qualifiedname>KWin::X11Window::updateInputShape</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="363" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1294" bodyend="1302"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aba7c88e5679ddbfb878e57caf9318c2e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::configure</definition>
        <argsstring>(const QRect &amp;nativeFrame, const QRect &amp;nativeWrapper, const QRect &amp;nativeClient)</argsstring>
        <name>configure</name>
        <qualifiedname>KWin::X11Window::configure</qualifiedname>
        <param>
          <type>const QRect &amp;</type>
          <declname>nativeFrame</declname>
        </param>
        <param>
          <type>const QRect &amp;</type>
          <declname>nativeWrapper</declname>
        </param>
        <param>
          <type>const QRect &amp;</type>
          <declname>nativeClient</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="364" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4048" bodyend="4075"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a2208a7a71c84aeb9877dc36f7cb4d946" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>xcb_timestamp_t</type>
        <definition>xcb_timestamp_t KWin::X11Window::readUserTimeMapTimestamp</definition>
        <argsstring>(const KStartupInfoId *asn_id, const KStartupInfoData *asn_data, bool session) const</argsstring>
        <name>readUserTimeMapTimestamp</name>
        <qualifiedname>KWin::X11Window::readUserTimeMapTimestamp</qualifiedname>
        <param>
          <type>const KStartupInfoId *</type>
          <declname>asn_id</declname>
        </param>
        <param>
          <type>const KStartupInfoData *</type>
          <declname>asn_data</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>session</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="366" column="21" bodyfile="kwin/src/x11window.cpp" bodystart="4693" bodyend="4774"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ab5684df8c30224370c7be63916c64f1a" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>xcb_timestamp_t</type>
        <definition>xcb_timestamp_t KWin::X11Window::readUserCreationTime</definition>
        <argsstring>() const</argsstring>
        <name>readUserCreationTime</name>
        <qualifiedname>KWin::X11Window::readUserCreationTime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="368" column="21" bodyfile="kwin/src/x11window.cpp" bodystart="4687" bodyend="4691"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a0854a286c6eddfdac2c8f75a55891efa" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::startupIdChanged</definition>
        <argsstring>()</argsstring>
        <name>startupIdChanged</name>
        <qualifiedname>KWin::X11Window::startupIdChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="369" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4800" bodyend="4837"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a8b6a7587aa13191c3b9e201219027203" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_xcb_1_1_property" kindref="compound">Xcb::Property</ref></type>
        <definition>Xcb::Property KWin::X11Window::fetchShowOnScreenEdge</definition>
        <argsstring>() const</argsstring>
        <name>fetchShowOnScreenEdge</name>
        <qualifiedname>KWin::X11Window::fetchShowOnScreenEdge</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="371" column="19" bodyfile="kwin/src/x11window.cpp" bodystart="2495" bodyend="2498"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ae9a20aef2d287db0f9015c377d47a6bb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::readShowOnScreenEdge</definition>
        <argsstring>(Xcb::Property &amp;property)</argsstring>
        <name>readShowOnScreenEdge</name>
        <qualifiedname>KWin::X11Window::readShowOnScreenEdge</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_xcb_1_1_property" kindref="compound">Xcb::Property</ref> &amp;</type>
          <declname>property</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="372" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2500" bodyend="2543"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ace28db274b027ec5b02424acb94e2ccc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::updateShowOnScreenEdge</definition>
        <argsstring>()</argsstring>
        <name>updateShowOnScreenEdge</name>
        <qualifiedname>KWin::X11Window::updateShowOnScreenEdge</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads the property and creates/destroys the screen edge if required and shows/hides the client. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="377" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2545" bodyend="2549"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a751930905324e041a1174e4e379973d4" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>xcb_res_query_client_ids_cookie_t</type>
        <definition>xcb_res_query_client_ids_cookie_t KWin::X11Window::fetchPid</definition>
        <argsstring>() const</argsstring>
        <name>fetchPid</name>
        <qualifiedname>KWin::X11Window::fetchPid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="379" column="39" bodyfile="kwin/src/x11window.cpp" bodystart="3414" bodyend="3429"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a3146ac62da26b66b2b5cd5edc0b7a8a3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::readPid</definition>
        <argsstring>(xcb_res_query_client_ids_cookie_t cookie)</argsstring>
        <name>readPid</name>
        <qualifiedname>KWin::X11Window::readPid</qualifiedname>
        <param>
          <type>xcb_res_query_client_ids_cookie_t</type>
          <declname>cookie</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="380" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="3431" bodyend="3447"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a6e64490ab1bd03cdb67c9611fb530550" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::updateDecoration</definition>
        <argsstring>(bool check_workspace_pos, bool force=false)</argsstring>
        <name>updateDecoration</name>
        <qualifiedname>KWin::X11Window::updateDecoration</qualifiedname>
        <param>
          <type>bool</type>
          <declname>check_workspace_pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="382" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1066" bodyend="1087"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a4816ecf09aa61dbaa88216457ab5c3d9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::createDecoration</definition>
        <argsstring>()</argsstring>
        <name>createDecoration</name>
        <qualifiedname>KWin::X11Window::createDecoration</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="383" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1094" bodyend="1119"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a5a6a4c3f1f3388fe3996847a0adcd568" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::destroyDecoration</definition>
        <argsstring>()</argsstring>
        <name>destroyDecoration</name>
        <qualifiedname>KWin::X11Window::destroyDecoration</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="384" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1121" bodyend="1128"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a843e20b3ca879bbc5a19602594a8434a" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QWindow *</type>
        <definition>QWindow * KWin::X11Window::findInternalWindow</definition>
        <argsstring>() const</argsstring>
        <name>findInternalWindow</name>
        <qualifiedname>KWin::X11Window::findInternalWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="386" column="13" bodyfile="kwin/src/x11window.cpp" bodystart="4518" bodyend="4527"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ab5d63d78e54b0096e9142d9c85aebc0f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::checkOutput</definition>
        <argsstring>()</argsstring>
        <name>checkOutput</name>
        <qualifiedname>KWin::X11Window::checkOutput</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="387" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4529" bodyend="4532"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aada5dfacbf80ac6e98abba4990478aac" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::associate</definition>
        <argsstring>()</argsstring>
        <name>associate</name>
        <qualifiedname>KWin::X11Window::associate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="388" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4503" bodyend="4516"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a8b426638f78556c09db60750bcc4db86" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::handleXwaylandScaleChanged</definition>
        <argsstring>()</argsstring>
        <name>handleXwaylandScaleChanged</name>
        <qualifiedname>KWin::X11Window::handleXwaylandScaleChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="389" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="3538" bodyend="3544"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a96909fe896be3b7517c498ba64f36627" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::handleCommitted</definition>
        <argsstring>()</argsstring>
        <name>handleCommitted</name>
        <qualifiedname>KWin::X11Window::handleCommitted</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="390" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="3546" bodyend="3557"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ae238661d51e1f420a0fb54fb203b5ddb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::setAllowCommits</definition>
        <argsstring>(bool allow)</argsstring>
        <name>setAllowCommits</name>
        <qualifiedname>KWin::X11Window::setAllowCommits</qualifiedname>
        <param>
          <type>bool</type>
          <declname>allow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="392" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="3559" bodyend="3569"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a0ee16658ae52b9c64f91ea2ba61c3309" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::sendSyntheticConfigureNotify</definition>
        <argsstring>()</argsstring>
        <name>sendSyntheticConfigureNotify</name>
        <qualifiedname>KWin::X11Window::sendSyntheticConfigureNotify</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Auxiliary function to inform the client about the current window configuration. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="404" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="3513" bodyend="3536"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ab6ac2de11dcf4682f7cecc364f8c5c5b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_xcb_1_1_transient_for" kindref="compound">Xcb::TransientFor</ref></type>
        <definition>Xcb::TransientFor KWin::X11Window::fetchTransient</definition>
        <argsstring>() const</argsstring>
        <name>fetchTransient</name>
        <qualifiedname>KWin::X11Window::fetchTransient</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="413" column="23" bodyfile="kwin/src/x11window.cpp" bodystart="2783" bodyend="2786"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ad7f9e5850995b1644262698caf204251" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::readTransientProperty</definition>
        <argsstring>(Xcb::TransientFor &amp;transientFor)</argsstring>
        <name>readTransientProperty</name>
        <qualifiedname>KWin::X11Window::readTransientProperty</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_xcb_1_1_transient_for" kindref="compound">Xcb::TransientFor</ref> &amp;</type>
          <declname>transientFor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="414" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2788" bodyend="2799"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a9c80083ed8a38c8c934412416c96a1e9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::readTransient</definition>
        <argsstring>()</argsstring>
        <name>readTransient</name>
        <qualifiedname>KWin::X11Window::readTransient</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="415" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2801" bodyend="2808"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a557b9127f5e04a113054cafe3db106ec" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>xcb_window_t</type>
        <definition>xcb_window_t KWin::X11Window::verifyTransientFor</definition>
        <argsstring>(xcb_window_t transient_for, bool set)</argsstring>
        <name>verifyTransientFor</name>
        <qualifiedname>KWin::X11Window::verifyTransientFor</qualifiedname>
        <param>
          <type>xcb_window_t</type>
          <declname>transient_for</declname>
          <defname>new_transient_for</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check that the window is not transient for itself, and similar nonsense. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="416" column="18" bodyfile="kwin/src/x11window.cpp" bodystart="2926" bodyend="2993"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a1dd1bd6243e8e9c5463903193049c086" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::addTransient</definition>
        <argsstring>(Window *cl) override</argsstring>
        <name>addTransient</name>
        <qualifiedname>KWin::X11Window::addTransient</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1af1548a0423bb576776f96aee0d3847fa">addTransient</reimplements>
        <param>
          <type><ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>cl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="417" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2995" bodyend="3001"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a7c398ae6f8034a8ec7f93cd230a6c458" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::removeFromMainClients</definition>
        <argsstring>()</argsstring>
        <name>removeFromMainClients</name>
        <qualifiedname>KWin::X11Window::removeFromMainClients</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="418" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2828" bodyend="2838"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1aa4d4048defab5e01fcdc59d7daf603b5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::cleanGrouping</definition>
        <argsstring>()</argsstring>
        <name>cleanGrouping</name>
        <qualifiedname>KWin::X11Window::cleanGrouping</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="419" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2844" bodyend="2870"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a8ab929d8a9af26e3f4cfa02fb3ebe6de" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::checkGroupTransients</definition>
        <argsstring>()</argsstring>
        <name>checkGroupTransients</name>
        <qualifiedname>KWin::X11Window::checkGroupTransients</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="420" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2876" bodyend="2921"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a6f8a395b0f906520e9fdc1eff2834973" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::setTransient</definition>
        <argsstring>(xcb_window_t new_transient_for_id)</argsstring>
        <name>setTransient</name>
        <qualifiedname>KWin::X11Window::setTransient</qualifiedname>
        <param>
          <type>xcb_window_t</type>
          <declname>new_transient_for_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="421" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2810" bodyend="2826"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ad8225594169fd9a4141f65afac052138" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_xcb_1_1_string_property" kindref="compound">Xcb::StringProperty</ref></type>
        <definition>Xcb::StringProperty KWin::X11Window::fetchActivities</definition>
        <argsstring>() const</argsstring>
        <name>fetchActivities</name>
        <qualifiedname>KWin::X11Window::fetchActivities</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="460" column="25" bodyfile="kwin/src/x11window.cpp" bodystart="2258" bodyend="2265"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a16d24df4dbe671e33837d21010855d83" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::readActivities</definition>
        <argsstring>(Xcb::StringProperty &amp;property)</argsstring>
        <name>readActivities</name>
        <qualifiedname>KWin::X11Window::readActivities</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_xcb_1_1_string_property" kindref="compound">Xcb::StringProperty</ref> &amp;</type>
          <declname>property</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="461" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2267" bodyend="2298"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a7edf1d1b28b1cc4671453865e584838e" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::belongsToSameApplication</definition>
        <argsstring>(const Window *other, SameApplicationChecks checks) const override</argsstring>
        <name>belongsToSameApplication</name>
        <qualifiedname>KWin::X11Window::belongsToSameApplication</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a81a6373276b07edb20b368f23754b287">belongsToSameApplication</reimplements>
        <param>
          <type>const <ref refid="class_k_win_1_1_window" kindref="compound">Window</ref> *</type>
          <declname>other</declname>
        </param>
        <param>
          <type>SameApplicationChecks</type>
          <declname>checks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="287" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2557" bodyend="2564"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a4fa8ec1c4db212569b556385ecb1ee01" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::doSetActive</definition>
        <argsstring>() override</argsstring>
        <name>doSetActive</name>
        <qualifiedname>KWin::X11Window::doSetActive</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a1e64a5d22f780662ce2b05c5fca3aac1">doSetActive</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called from setActive once the active value got updated, but before the changed signal is emitted.</para>
<para>Default implementation does nothing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="288" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4791" bodyend="4798"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ae94b05487c33de67d84da9933dea483d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::doSetKeepAbove</definition>
        <argsstring>() override</argsstring>
        <name>doSetKeepAbove</name>
        <qualifiedname>KWin::X11Window::doSetKeepAbove</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a8d860fefa08b9a1edaa6d78140e02570">doSetKeepAbove</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called from setKeepAbove once the keepBelow value got updated, but before the changed signal is emitted.</para>
<para>Default implementation does nothing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="289" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1749" bodyend="1755"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a447de9e09e0220d08054450e1246cd0b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::doSetKeepBelow</definition>
        <argsstring>() override</argsstring>
        <name>doSetKeepBelow</name>
        <qualifiedname>KWin::X11Window::doSetKeepBelow</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1ab1a3b85114d894d0615e94869e3ced47">doSetKeepBelow</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called from setKeepBelow once the keepBelow value got updated, but before the changed signal is emitted.</para>
<para>Default implementation does nothing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="290" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1757" bodyend="1763"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a11e2054319bd2f62b5bc58f487c4ce1f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::doSetShade</definition>
        <argsstring>(ShadeMode previousShadeMode) override</argsstring>
        <name>doSetShade</name>
        <qualifiedname>KWin::X11Window::doSetShade</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1ad6b5cfb1fda2ae3be8157024383d4f31">doSetShade</reimplements>
        <param>
          <type><ref refid="namespace_k_win_1a14799797d985d6375dd7684fff01585f" kindref="member">ShadeMode</ref></type>
          <declname>previousShadeMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called from <ref refid="class_k_win_1_1_window_1a14232d4a0703db154fc0f506be5a675a" kindref="member">setShade()</ref> once the shadeMode value got updated, but before the changed signal is emitted.</para>
<para>Default implementation does nothing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="291" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1368" bodyend="1435"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a89be160951e8e68c8586d664dfc6b8d8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::doSetDesktop</definition>
        <argsstring>() override</argsstring>
        <name>doSetDesktop</name>
        <qualifiedname>KWin::X11Window::doSetDesktop</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a53cf8bb1eaf10d2331ee121651054327">doSetDesktop</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called from setDeskop once the desktop value got updated, but before the changed signal is emitted.</para>
<para>Default implementation does nothing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="292" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1789" bodyend="1796"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a3c09d6423fde800b97331f19ce1b41d1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::doMinimize</definition>
        <argsstring>() override</argsstring>
        <name>doMinimize</name>
        <qualifiedname>KWin::X11Window::doMinimize</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a169597f62ca6a017611d4e45a0ee3f51">doMinimize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called from minimize and unminimize once the minimized value got updated, but before the changed signal is emitted.</para>
<para>Default implementation does nothig. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="293" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1347" bodyend="1361"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a4ad23dbc6476b4f95483c5f0ad860106" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::doSetSkipPager</definition>
        <argsstring>() override</argsstring>
        <name>doSetSkipPager</name>
        <qualifiedname>KWin::X11Window::doSetSkipPager</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1ae149e3bb83a2a8dd3b8873365ff9c92a">doSetSkipPager</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="294" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1773" bodyend="1779"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a5c78c11f4dd95862340687f15c814811" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::doSetSkipTaskbar</definition>
        <argsstring>() override</argsstring>
        <name>doSetSkipTaskbar</name>
        <qualifiedname>KWin::X11Window::doSetSkipTaskbar</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a06f9cf76ca564c6f316aee843a737947">doSetSkipTaskbar</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="295" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1765" bodyend="1771"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a3aca1f96ad4178f21a8810796590277a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::doSetSkipSwitcher</definition>
        <argsstring>() override</argsstring>
        <name>doSetSkipSwitcher</name>
        <qualifiedname>KWin::X11Window::doSetSkipSwitcher</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a81def43f2990e5a40812c0e076c04565">doSetSkipSwitcher</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="296" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1781" bodyend="1787"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a3bdcc0a857c8fda2ee05bbc5c47c96c0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::doSetDemandsAttention</definition>
        <argsstring>() override</argsstring>
        <name>doSetDemandsAttention</name>
        <qualifiedname>KWin::X11Window::doSetDemandsAttention</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1ad144363e2fe2d6713183d99099928687">doSetDemandsAttention</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="297" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1798" bodyend="1804"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a124e9b6187a7437ba1793d49fc930bdd" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::doSetHidden</definition>
        <argsstring>() override</argsstring>
        <name>doSetHidden</name>
        <qualifiedname>KWin::X11Window::doSetHidden</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1acfcb309859b64b65e4f9bfdd3593e831">doSetHidden</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="298" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1806" bodyend="1812"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a8deba3f1d527b47bcb3d515454489c36" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::doSetHiddenByShowDesktop</definition>
        <argsstring>() override</argsstring>
        <name>doSetHiddenByShowDesktop</name>
        <qualifiedname>KWin::X11Window::doSetHiddenByShowDesktop</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a9a8e4718ca55a6dbbd4a510b1f6dd7c0">doSetHiddenByShowDesktop</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="299" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1814" bodyend="1820"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a1afbbc09234d7576021ef2712df14356" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::doSetModal</definition>
        <argsstring>() override</argsstring>
        <name>doSetModal</name>
        <qualifiedname>KWin::X11Window::doSetModal</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a7a1e7cdb03f5e88cbda4cd80dc1e91c0">doSetModal</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="300" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="1822" bodyend="1828"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a8720a4715ab6ba47d1e1b1269990353c" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::belongsToDesktop</definition>
        <argsstring>() const override</argsstring>
        <name>belongsToDesktop</name>
        <qualifiedname>KWin::X11Window::belongsToDesktop</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a462b5bb23c7028fddfe3a3fc7a3ba038">belongsToDesktop</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="301" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4987" bodyend="4996"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a665e5bdd8f2e9a9f11dc1fb05c679913" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::isWaitingForInteractiveResizeSync</definition>
        <argsstring>() const override</argsstring>
        <name>isWaitingForInteractiveResizeSync</name>
        <qualifiedname>KWin::X11Window::isWaitingForInteractiveResizeSync</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a340e12bfbaf12ad16dc20e49e1fda8ee">isWaitingForInteractiveResizeSync</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether a sync request is still pending. Default implementation returns <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="302" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4371" bodyend="4374"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a48fff76cf728cffc9101af2bcdb2dd93" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::doInteractiveResizeSync</definition>
        <argsstring>(const QRectF &amp;rect) override</argsstring>
        <name>doInteractiveResizeSync</name>
        <qualifiedname>KWin::X11Window::doInteractiveResizeSync</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a73ece0a5a9b6157cb1c10461a3ccb1fe">doInteractiveResizeSync</reimplements>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called during handling a resize. Implementing subclasses can use this method to perform windowing system specific syncing.</para>
<para>Default implementation does nothing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="303" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="4376" bodyend="4397"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a95a7ebb34d5d7127053c50e64415d164" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::X11Window::resizeIncrements</definition>
        <argsstring>() const override</argsstring>
        <name>resizeIncrements</name>
        <qualifiedname>KWin::X11Window::resizeIncrements</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a2570c494a29c3c06a6b47230592e97c4">resizeIncrements</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="304" column="12" bodyfile="kwin/src/x11window.cpp" bodystart="2566" bodyend="2569"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ab4476c8a103a3e93bc655994eece0a4e" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::X11Window::acceptsFocus</definition>
        <argsstring>() const override</argsstring>
        <name>acceptsFocus</name>
        <qualifiedname>KWin::X11Window::acceptsFocus</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a23bedb297b84a5d7e0590617375fcce3">acceptsFocus</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the window accepts focus. The difference to wantsInput is that the implementation should not check rules and return what the window effectively supports. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="305" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2195" bodyend="2198"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ad843fc6a8f011780582ce42211b46050" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::doSetQuickTileMode</definition>
        <argsstring>() override</argsstring>
        <name>doSetQuickTileMode</name>
        <qualifiedname>KWin::X11Window::doSetQuickTileMode</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1afed2df13c860037d7c04502b2b681c90">doSetQuickTileMode</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="306" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="2200" bodyend="2203"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ab85e615def62c1eb2728972d090b5bf5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::moveResizeInternal</definition>
        <argsstring>(const QRectF &amp;rect, MoveResizeMode mode) override</argsstring>
        <name>moveResizeInternal</name>
        <qualifiedname>KWin::X11Window::moveResizeInternal</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1afac271a8d3eb8a6d16e65ba261713a8a">moveResizeInternal</reimplements>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_window_1a412b316294522eb307c31fb2155e82e9" kindref="member">MoveResizeMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reimplemented to inform the client about the new window position. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="307" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="3967" bodyend="4046"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1ab93c4bce424fac00751dc610977c09ac" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_window_item" kindref="compound">WindowItem</ref> &gt;</type>
        <definition>std::unique_ptr&lt; WindowItem &gt; KWin::X11Window::createItem</definition>
        <argsstring>(Item *parentItem) override</argsstring>
        <name>createItem</name>
        <qualifiedname>KWin::X11Window::createItem</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a3794a446f3a4460ef3417eefc3ef0ba6">createItem</reimplements>
        <param>
          <type><ref refid="class_k_win_1_1_item" kindref="compound">Item</ref> *</type>
          <declname>parentItem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="308" column="21" bodyfile="kwin/src/x11window.cpp" bodystart="204" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1a7ce42f5c44d15f53dbdab7dab49a0b0b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::X11Window::doSetNextTargetScale</definition>
        <argsstring>() override</argsstring>
        <name>doSetNextTargetScale</name>
        <qualifiedname>KWin::X11Window::doSetNextTargetScale</qualifiedname>
        <reimplements refid="class_k_win_1_1_window_1a629aaa055471ec8d1b61969412279e35">doSetNextTargetScale</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="309" column="10" bodyfile="kwin/src/x11window.cpp" bodystart="209" bodyend="215"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="signal">
      <memberdef kind="signal" id="class_k_win_1_1_x11_window_1af16e4161195204fcd94a93cd6e97088d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::shapeChanged</definition>
        <argsstring>()</argsstring>
        <name>shapeChanged</name>
        <qualifiedname>KWin::X11Window::shapeChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="312" column="10"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_k_win_1_1_x11_window_1abb79e01420c4d8dc9c1e55be3293a428" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::X11Window::sendClientMessage</definition>
        <argsstring>(xcb_window_t w, xcb_atom_t a, xcb_atom_t protocol, uint32_t data1=0, uint32_t data2=0, uint32_t data3=0)</argsstring>
        <name>sendClientMessage</name>
        <qualifiedname>KWin::X11Window::sendClientMessage</qualifiedname>
        <param>
          <type>xcb_window_t</type>
          <declname>w</declname>
        </param>
        <param>
          <type>xcb_atom_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>xcb_atom_t</type>
          <declname>protocol</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data1</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data2</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data3</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/x11window.h" line="348" column="17" bodyfile="kwin/src/x11window.cpp" bodystart="1596" bodyend="1619"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>KWin::Window</label>
        <link refid="class_k_win_1_1_window"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::X11Window</label>
        <link refid="class_k_win_1_1_x11_window"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="10">
        <label>KWin::BrightnessDevice</label>
        <link refid="class_k_win_1_1_brightness_device"/>
      </node>
      <node id="11">
        <label>KWin::ClientMachine</label>
        <link refid="class_k_win_1_1_client_machine"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>KWin::ColorDescription</label>
        <link refid="class_k_win_1_1_color_description"/>
        <childnode refid="7" relation="usage">
          <edgelabel>sRGB</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>KWin::CursorShape</label>
        <link refid="class_k_win_1_1_cursor_shape"/>
      </node>
      <node id="9">
        <label>KWin::Edid</label>
        <link refid="class_k_win_1_1_edid"/>
      </node>
      <node id="4">
        <label>KWin::Output</label>
        <link refid="class_k_win_1_1_output"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_state</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_information</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_brightnessDevice</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>KWin::Output::Information</label>
        <link refid="struct_k_win_1_1_output_1_1_information"/>
        <childnode refid="9" relation="usage">
          <edgelabel>edid</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>panelOrientation</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>KWin::Output::State</label>
        <link refid="struct_k_win_1_1_output_1_1_state"/>
        <childnode refid="6" relation="usage">
          <edgelabel>manualTransform</edgelabel>
          <edgelabel>transform</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>colorDescription</edgelabel>
          <edgelabel>originalColorDescription</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>KWin::OutputTransform</label>
        <link refid="class_k_win_1_1_output_transform"/>
      </node>
      <node id="12">
        <label>KWin::PlasmaWindowInterface</label>
        <link refid="class_k_win_1_1_plasma_window_interface"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>KWin::Window</label>
        <link refid="class_k_win_1_1_window"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>m_moveResizeOutput</edgelabel>
          <edgelabel>m_output</edgelabel>
          <edgelabel>startOutput</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_preferredBufferTransform</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>m_preferredColorDescription</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_clientMachine</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_windowManagementInterface</edgelabel>
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>m_transientFor</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_layer</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>cursor</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_rules</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>KWin::WindowRules</label>
        <link refid="class_k_win_1_1_window_rules"/>
      </node>
      <node id="1">
        <label>KWin::X11Window</label>
        <link refid="class_k_win_1_1_x11_window"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>Layer</label>
        <link refid="struct_layer"/>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/x11window.h" line="54" column="1" bodyfile="kwin/src/x11window.h" bodystart="55" bodyend="477"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_window_1a630842ac4cfe9ba9390eac5ffc8a9a7c" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>_shortcut</name></member>
      <member refid="class_k_win_1_1_x11_window_1ab4476c8a103a3e93bc655994eece0a4e" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>acceptsFocus</name></member>
      <member refid="class_k_win_1_1_x11_window_1aa18bcf738f457ed150e5d309f086b018" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>ackSync</name></member>
      <member refid="class_k_win_1_1_x11_window_1acf438337522deafccf8127f32c305918" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>ackSyncTimeout</name></member>
      <member refid="class_k_win_1_1_window_1acac15cb52cc30597cd970a45958ba827" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>active</name></member>
      <member refid="class_k_win_1_1_window_1acce3d6f41f268ae1cff8183476ee6646" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>activeChanged</name></member>
      <member refid="class_k_win_1_1_x11_window_1a171645c92c0b24978f9a48630957f791" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>activities</name></member>
      <member refid="class_k_win_1_1_window_1aa71dc40a7137f7d9295a5ad7a635b0c7" prot="public" virt="non-virtual" ambiguityscope="KWin::Window::"><scope>KWin::X11Window</scope><name>activities</name></member>
      <member refid="class_k_win_1_1_window_1ac86328eec92ac6f01ab3293a3d72064e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>activitiesChanged</name></member>
      <member refid="class_k_win_1_1_x11_window_1a257020550f705a0d39a625b1bd01dac9" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>activitiesDefined</name></member>
      <member refid="class_k_win_1_1_x11_window_1a1dd1bd6243e8e9c5463903193049c086" prot="private" virt="virtual"><scope>KWin::X11Window</scope><name>addTransient</name></member>
      <member refid="class_k_win_1_1_window_1a631797f76ba2b3af0cbcbc74b060e8ec" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>allMainWindows</name></member>
      <member refid="class_k_win_1_1_x11_window_1aaff2592627e7cee09eda1f4c60785768" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>allowed_actions</name></member>
      <member refid="class_k_win_1_1_x11_window_1ac4ea0281b6dd47dc2eadc44c5b824b0d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>allowWindowActivation</name></member>
      <member refid="class_k_win_1_1_window_1a59bcf5b3c635478120afa53945ee8b75" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>anchor</name></member>
      <member refid="class_k_win_1_1_x11_window_1aacb6dd2d37edc3bda79d15d6d41cf4ef" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>app_noborder</name></member>
      <member refid="class_k_win_1_1_window_1a584420a5827d6b82674359784a3f1ff3" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>appletPopup</name></member>
      <member refid="class_k_win_1_1_window_1a64b3e78c92b9566c25f826c9269b9d7d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>applicationMenuActive</name></member>
      <member refid="class_k_win_1_1_window_1a3980f243d8a936be0e117c6976823aba" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>applicationMenuActive</name></member>
      <member refid="class_k_win_1_1_window_1a8160969459097d515917fcc1e5ec1ee3" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>applicationMenuActiveChanged</name></member>
      <member refid="class_k_win_1_1_window_1a61be5e5de3298a63108f511acb5b3583" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>applicationMenuChanged</name></member>
      <member refid="class_k_win_1_1_window_1a55a5a924afbbff8839a2328555cccbb6" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>applicationMenuObjectPath</name></member>
      <member refid="class_k_win_1_1_window_1abeeea83c2e285a6e2648594080be2913" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>applicationMenuServiceName</name></member>
      <member refid="class_k_win_1_1_x11_window_1abf855a28da219dbab00882f1bf790f99" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>applyWindowRules</name></member>
      <member refid="class_k_win_1_1_x11_window_1aa33a16f171c29e61cdf0a9a038ded108" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>areGeometryUpdatesBlocked</name></member>
      <member refid="class_k_win_1_1_x11_window_1aada5dfacbf80ac6e98abba4990478aac" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>associate</name></member>
      <member refid="class_k_win_1_1_window_1a05a5e1439ce60beaa523291624da5588" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>autoRaise</name></member>
      <member refid="class_k_win_1_1_x11_window_1ae682c484348a8b95638bcbec7d73c32f" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>basicUnit</name></member>
      <member refid="class_k_win_1_1_x11_window_1a8720a4715ab6ba47d1e1b1269990353c" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>belongsToDesktop</name></member>
      <member refid="class_k_win_1_1_window_1a7fe5b288df23738ad6d2e9565c9f1ed8" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>belongsToLayer</name></member>
      <member refid="class_k_win_1_1_x11_window_1a7edf1d1b28b1cc4671453865e584838e" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>belongsToSameApplication</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad978568ef3760787e04fcd1198f05845" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>belongToSameApplication</name></member>
      <member refid="class_k_win_1_1_window_1af6b077eadf47fd68373d43f94eef23ad" prot="public" virt="non-virtual" ambiguityscope="KWin::Window::"><scope>KWin::X11Window</scope><name>belongToSameApplication</name></member>
      <member refid="class_k_win_1_1_x11_window_1ae8bcf53884c1b4d17d2a8be528fac58d" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>bit_depth</name></member>
      <member refid="class_k_win_1_1_window_1a940ee491c5f1fe9fdb660110ad491804" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>blockActivityUpdates</name></member>
      <member refid="class_k_win_1_1_x11_window_1a36df52d4458adb16003f64ce41afb137" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>blockGeometryUpdates</name></member>
      <member refid="class_k_win_1_1_x11_window_1ae3e0c34d99ddf77ff1f285845bd57ecf" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>blockGeometryUpdates</name></member>
      <member refid="class_k_win_1_1_window_1a7b47bcdf2ffd2ba3113725d2ebfaf822" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>borderBottom</name></member>
      <member refid="class_k_win_1_1_window_1a704f2db4a15f2ca4e6ae0b163e73c708" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>borderLeft</name></member>
      <member refid="class_k_win_1_1_window_1a3309d429b01d3670e9fcf4f54917ce46" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>borderRight</name></member>
      <member refid="class_k_win_1_1_window_1a079dfba93240f19cadab52f478e48e84" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>borderTop</name></member>
      <member refid="class_k_win_1_1_window_1a205c4e3d11f4c4cd184e767829e2afc0" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>bufferGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a023b03368916b91c59535d5843f6c75d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>bufferGeometry</name></member>
      <member refid="class_k_win_1_1_window_1aaa748e21e5fd562e204c3ce1e7410e4c" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>bufferGeometryChanged</name></member>
      <member refid="class_k_win_1_1_window_1a40f33a8d09fddef56ce9b15ff98a1ea6" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>buttonDown</name></member>
      <member refid="class_k_win_1_1_x11_window_1aaa1eee010ef24eb77cb4dc7f015ed9a6" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>calculateGravitation</name></member>
      <member refid="class_k_win_1_1_window_1aae37a8d1ea78997edb9c87bb12e44401" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>cancelAutoRaise</name></member>
      <member refid="class_k_win_1_1_x11_window_1a79a9f667307227a6db1343f080e61ced" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>cancelFocusOutTimer</name></member>
      <member refid="class_k_win_1_1_window_1aaae917a76558b06792ac435c316cf705" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>cancelInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a58c27d98b0edb3a6d0afb7fdf3882c39" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>cancelShadeHoverTimer</name></member>
      <member refid="class_k_win_1_1_x11_window_1a77b1b4eac1644f73899516865d4b8a88" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>cap_iconic</name></member>
      <member refid="class_k_win_1_1_x11_window_1a30582c94ff9c7f689b46eb6b3e7508e2" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>cap_normal</name></member>
      <member refid="class_k_win_1_1_x11_window_1aa370e59f7295b01b351382d7edde8996" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>cap_suffix</name></member>
      <member refid="class_k_win_1_1_window_1a9a91fff09e5795dce9c1732082ff09b4" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>caption</name></member>
      <member refid="class_k_win_1_1_window_1a29aa4e9445d651a8ad460def78d9a9eb" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>caption</name></member>
      <member refid="class_k_win_1_1_window_1aed9d3f3c470d1fa02c8cce52dbffa050" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>captionChanged</name></member>
      <member refid="class_k_win_1_1_x11_window_1a7e486d52b96037445ac64672e741b0da" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>captionNormal</name></member>
      <member refid="class_k_win_1_1_window_1af3efc82546fdf210e4136a4e0d7b1a46" prot="public" virt="non-virtual" ambiguityscope="KWin::Window::"><scope>KWin::X11Window</scope><name>captionNormal</name></member>
      <member refid="class_k_win_1_1_window_1ac61e96f4f734de1446c475cfebb0cf0d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>captionNormalChanged</name></member>
      <member refid="class_k_win_1_1_x11_window_1aab38daa11733395704738f79e0b7b60d" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>captionSuffix</name></member>
      <member refid="class_k_win_1_1_x11_window_1ac1310097efa2d4aa74c054248f06e594" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>changeClientLeaderGroup</name></member>
      <member refid="class_k_win_1_1_x11_window_1a6fde6b9aaa080b60ed5a8f629cea64fb" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>check_active_modal</name></member>
      <member refid="class_k_win_1_1_x11_window_1aebfddaceb1026381401b70b7984af92f" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>checkActiveModal</name></member>
      <member refid="class_k_win_1_1_x11_window_1a11a31f06dd221d1bb1e4c6166ffbeb52" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>checkActivities</name></member>
      <member refid="class_k_win_1_1_x11_window_1a1d1ecbf363011f72ea936436a0814a7a" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>checkApplicationMenuObjectPath</name></member>
      <member refid="class_k_win_1_1_x11_window_1a83c3971ad7bd97a47b428285cc900402" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>checkApplicationMenuServiceName</name></member>
      <member refid="class_k_win_1_1_x11_window_1a0db74047dfa4074d7af9aa43971d9270" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>checkGroup</name></member>
      <member refid="class_k_win_1_1_x11_window_1a8ab929d8a9af26e3f4cfa02fb3ebe6de" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>checkGroupTransients</name></member>
      <member refid="class_k_win_1_1_x11_window_1a188bf6c90ae46ccd1dcba279fc494bb0" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>checkNoBorder</name></member>
      <member refid="class_k_win_1_1_window_1a0b6dba6ec28ac38cae39cc392c735970" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>checkOffscreenPosition</name></member>
      <member refid="class_k_win_1_1_x11_window_1ab5d63d78e54b0096e9142d9c85aebc0f" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>checkOutput</name></member>
      <member refid="class_k_win_1_1_window_1a841ef2a66e586b3cfb6aadd65e179419" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>checkQuickTilingMaximizationZones</name></member>
      <member refid="class_k_win_1_1_x11_window_1abaa286845fb49310485f9354bcc3bf7d" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>checkShadeGeometry</name></member>
      <member refid="class_k_win_1_1_x11_window_1a924bca8c6e8fa1e6d3c9bdf0fe3e9979" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>checkTransient</name></member>
      <member refid="class_k_win_1_1_window_1a15a841d9d2201aa7b90f24168632ff4c" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>checkUnrestrictedInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a39bbb6d7fea7175cb9d9956bb0218064" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>checkWorkspacePosition</name></member>
      <member refid="class_k_win_1_1_x11_window_1aa4d4048defab5e01fcdc59d7daf603b5" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>cleanGrouping</name></member>
      <member refid="class_k_win_1_1_window_1a64f67f09528b18e4ca30cf6a41fd17cb" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>cleanTabBox</name></member>
      <member refid="class_k_win_1_1_window_1abe19bb40b369f778012075b9752d84eb" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>client</name></member>
      <member refid="class_k_win_1_1_window_1ae65385d8659203d561a91aa7c0af9d8b" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>clientGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a76606965aab8b25facbd673c634c6ab4" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>clientGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a5fad289b49f846a6fc1c0cb72e91ec78" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>clientGeometryChanged</name></member>
      <member refid="class_k_win_1_1_window_1a595f871763d11ef27b99d4327d5669fd" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>clientMachine</name></member>
      <member refid="class_k_win_1_1_x11_window_1a4ee833894920d122aeff9b7a531deab2" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>clientMessageEvent</name></member>
      <member refid="class_k_win_1_1_x11_window_1a54fae364d539ef6501ae44c2a3a57d55" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>clientPosToFramePos</name></member>
      <member refid="class_k_win_1_1_window_1a94200d7cbb5dc1e378197dbde9b22c38" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>clientRectToFrameRect</name></member>
      <member refid="class_k_win_1_1_window_1ae5046998639848857380670149aa13d5" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>clientSize</name></member>
      <member refid="class_k_win_1_1_x11_window_1a00a45287c67f885c7ca53be41eb9344e" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>clientSizeToFrameSize</name></member>
      <member refid="class_k_win_1_1_window_1a4bb9758a6b7087650bbe60d376ad0650" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>closeable</name></member>
      <member refid="class_k_win_1_1_window_1aab5733f9b923a691e38e6c06808a8ae3" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>closeableChanged</name></member>
      <member refid="class_k_win_1_1_window_1a75b348e50a34a4881ce281e40d1e8f02" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>closed</name></member>
      <member refid="class_k_win_1_1_x11_window_1a100d8dcd723787d44cdb0360f18b6e0e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>closeWindow</name></member>
      <member refid="class_k_win_1_1_window_1af4e79ae255fc04953422db277a441fcf" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>colorScheme</name></member>
      <member refid="class_k_win_1_1_window_1add4fdac83406710541f46a27ee0e0170" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>colorScheme</name></member>
      <member refid="class_k_win_1_1_window_1a738cb732d11d98b2e6149400e134df11" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>colorSchemeChanged</name></member>
      <member refid="class_k_win_1_1_window_1a0e084dac0bbab6de21ed779cfc909793" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>comboBox</name></member>
      <member refid="class_k_win_1_1_window_1a02d9a70e899649f5bf05e182c54d9120" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>commitTile</name></member>
      <member refid="class_k_win_1_1_x11_window_1aba7c88e5679ddbfb878e57caf9318c2e" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>configure</name></member>
      <member refid="class_k_win_1_1_x11_window_1a8bfddbf9d7cbbe7e97490aa95ab3e02d" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>configureNotifyEvent</name></member>
      <member refid="class_k_win_1_1_x11_window_1ac1921f7ae1729305d00b02b1285501cf" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>configureRequest</name></member>
      <member refid="class_k_win_1_1_x11_window_1aa50cfbd22ee8cb01b73eacb1d2b64413" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>configureRequestEvent</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad86f89d181510912a5d22dd8809232f8" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>constrainClientSize</name></member>
      <member refid="class_k_win_1_1_window_1aba7fd5b92a9da565aecf8ae559f4af69" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>constrainFrameSize</name></member>
      <member refid="class_k_win_1_1_window_1a8e20b44c82b270d86739445572bc8b27" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>counter</name></member>
      <member refid="class_k_win_1_1_x11_window_1a4816ecf09aa61dbaa88216457ab5c3d9" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>createDecoration</name></member>
      <member refid="class_k_win_1_1_x11_window_1ab93c4bce424fac00751dc610977c09ac" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>createItem</name></member>
      <member refid="class_k_win_1_1_window_1aab5aba9b1ffa9d7f2413b9a1b8f41df9" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>criticalNotification</name></member>
      <member refid="class_k_win_1_1_window_1a90e105403fbfe6e2efd150fc49ca2c2f" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>cursor</name></member>
      <member refid="class_k_win_1_1_window_1a4a4611b4334bd5ef2b224e0bed4d2afa" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>cursor</name></member>
      <member refid="class_k_win_1_1_window_1ad783ee7d4155cdd17ee6ca4138038b87" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>damaged</name></member>
      <member refid="class_k_win_1_1_window_1aeebcd9865806bb3e4b74d13b4ed91ded" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>decoratedWindow</name></member>
      <member refid="class_k_win_1_1_window_1aeb9f103fab307fd78c92cef1f14275b2" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>decoration</name></member>
      <member refid="class_k_win_1_1_window_1ab05570ab597e429201ea5b47b35e5094" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>decoration</name></member>
      <member refid="class_k_win_1_1_window_1a443109a5be24247d1ca26508fec82adc" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>decorationChanged</name></member>
      <member refid="class_k_win_1_1_window_1a4ca7398a5e80f2ed8d5eec3ed382f235" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>decorationHasAlpha</name></member>
      <member refid="class_k_win_1_1_window_1ab1e2bd22ec836e8cada97462d90badf2" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>decorationHasAlpha</name></member>
      <member refid="class_k_win_1_1_window_1a9821bc14a848cb3f210c43c160fe8e80" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>decorationPalette</name></member>
      <member refid="class_k_win_1_1_window_1a5a14f052819dee2470858f59e9d2218c" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>delayedTimer</name></member>
      <member refid="class_k_win_1_1_x11_window_1a3514798b407fc2a0bd1836916b471736" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>deleteClient</name></member>
      <member refid="class_k_win_1_1_window_1aa16634b94b70b24daab1fa9df35c0f31" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>deleted</name></member>
      <member refid="class_k_win_1_1_window_1a2d638a5cbb6a91a00b5a5c14c9694888" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>demandAttention</name></member>
      <member refid="class_k_win_1_1_window_1ac42b9fc9ba486aa2daf3cf1054e9afa5" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>demandsAttention</name></member>
      <member refid="class_k_win_1_1_window_1a48804c4aff5e086bf1af7651009d59ec" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>demandsAttentionChanged</name></member>
      <member refid="class_k_win_1_1_x11_window_1aba9a7266b1f4259019315768ba4394a6" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>depth</name></member>
      <member refid="class_k_win_1_1_window_1a405edf05a731189064fbd7298d06996e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>desktopFileName</name></member>
      <member refid="class_k_win_1_1_window_1a384f3da43bb8399dc94c43f5032155c5" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>desktopFileName</name></member>
      <member refid="class_k_win_1_1_window_1aa7c85eca2cfa19d7ea698cd46396c6dc" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>desktopFileNameChanged</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad33086a0fc2f1cd541bec4d5ccb092d8" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>desktopId</name></member>
      <member refid="class_k_win_1_1_window_1af8434bc6d80800dccc7700d26fd3594f" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>desktopIds</name></member>
      <member refid="class_k_win_1_1_window_1a8da79be4e140390a3b61957f927f5210" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>desktops</name></member>
      <member refid="class_k_win_1_1_window_1ab3149c28ec7dd1daf9af75a3c10cd35e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>desktops</name></member>
      <member refid="class_k_win_1_1_window_1a81dba7cdd2be7538645ff1a0718b6c7d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>desktopsChanged</name></member>
      <member refid="class_k_win_1_1_window_1af05b60db12e48cdcb1a231113bb97dce" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>desktopWindow</name></member>
      <member refid="class_k_win_1_1_x11_window_1a5a6a4c3f1f3388fe3996847a0adcd568" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>destroyDecoration</name></member>
      <member refid="class_k_win_1_1_x11_window_1a915cf8a4d2e655910127d4bf410845b5" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>destroyNotifyEvent</name></member>
      <member refid="class_k_win_1_1_x11_window_1a7c848abfd1542214c0d8f289d8c76fcb" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>destroyWindow</name></member>
      <member refid="class_k_win_1_1_window_1a13609b056f02453c5006ea28d6de94b3" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>destroyWindowManagementInterface</name></member>
      <member refid="class_k_win_1_1_x11_window_1a0fd19b51f8f2c2872fb4f832b9433e53" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>detectNoBorder</name></member>
      <member refid="class_k_win_1_1_x11_window_1afcee480b58ca8d3d4c54218a92243631" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>detectShape</name></member>
      <member refid="class_k_win_1_1_window_1a6a8237a0038173d42be364989ec33623" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>dialog</name></member>
      <member refid="class_k_win_1_1_x11_window_1a726e779bc76a5dad682c396b992da876" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>discardShapeRegion</name></member>
      <member refid="class_k_win_1_1_window_1adaddb6c74ea973a4cde4409691ccef97" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>dndIcon</name></member>
      <member refid="class_k_win_1_1_window_1af6d487a18868cedad24433083d73161a" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>dock</name></member>
      <member refid="class_k_win_1_1_window_1ad70cb80f746c7f97cb0e55d53a9869a4" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>dockWantsInput</name></member>
      <member refid="class_k_win_1_1_window_1ac94cdf63c71362a86dc28ecb5e40a1bc" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>doFinishInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_x11_window_1a48fff76cf728cffc9101af2bcdb2dd93" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>doInteractiveResizeSync</name></member>
      <member refid="class_k_win_1_1_x11_window_1a3c09d6423fde800b97331f19ce1b41d1" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>doMinimize</name></member>
      <member refid="class_k_win_1_1_window_1ac40923cee6c26120f57174bde42a37eb" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>dontInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_x11_window_1a4fa8ec1c4db212569b556385ecb1ee01" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>doSetActive</name></member>
      <member refid="class_k_win_1_1_x11_window_1a3bdcc0a857c8fda2ee05bbc5c47c96c0" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>doSetDemandsAttention</name></member>
      <member refid="class_k_win_1_1_x11_window_1a89be160951e8e68c8586d664dfc6b8d8" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>doSetDesktop</name></member>
      <member refid="class_k_win_1_1_x11_window_1a124e9b6187a7437ba1793d49fc930bdd" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>doSetHidden</name></member>
      <member refid="class_k_win_1_1_x11_window_1a8deba3f1d527b47bcb3d515454489c36" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>doSetHiddenByShowDesktop</name></member>
      <member refid="class_k_win_1_1_x11_window_1ae94b05487c33de67d84da9933dea483d" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>doSetKeepAbove</name></member>
      <member refid="class_k_win_1_1_x11_window_1a447de9e09e0220d08054450e1246cd0b" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>doSetKeepBelow</name></member>
      <member refid="class_k_win_1_1_x11_window_1a1afbbc09234d7576021ef2712df14356" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>doSetModal</name></member>
      <member refid="class_k_win_1_1_x11_window_1a7ce42f5c44d15f53dbdab7dab49a0b0b" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>doSetNextTargetScale</name></member>
      <member refid="class_k_win_1_1_x11_window_1a10036002d7b8d3da31ad81aa0d00cea3" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>doSetOnActivities</name></member>
      <member refid="class_k_win_1_1_window_1a2f020c644990bff80970d402c46c00a7" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>doSetPreferredBufferTransform</name></member>
      <member refid="class_k_win_1_1_window_1afe71e723a27aeb466c819f673890babc" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>doSetPreferredColorDescription</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad843fc6a8f011780582ce42211b46050" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>doSetQuickTileMode</name></member>
      <member refid="class_k_win_1_1_x11_window_1a11e2054319bd2f62b5bc58f487c4ce1f" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>doSetShade</name></member>
      <member refid="class_k_win_1_1_x11_window_1a4ad23dbc6476b4f95483c5f0ad860106" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>doSetSkipPager</name></member>
      <member refid="class_k_win_1_1_x11_window_1a3aca1f96ad4178f21a8810796590277a" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>doSetSkipSwitcher</name></member>
      <member refid="class_k_win_1_1_x11_window_1a5c78c11f4dd95862340687f15c814811" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>doSetSkipTaskbar</name></member>
      <member refid="class_k_win_1_1_window_1ac16917dcfe5318a0e971eea28044dfda" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>doSetSuspended</name></member>
      <member refid="class_k_win_1_1_window_1a1225fe6301b15744feb468fa81c52d21" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>doStartInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a8392b5437fd670ddcf478833696571c0" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>doubleClickTimer</name></member>
      <member refid="class_k_win_1_1_window_1a607b0fe387b98563447c1399a40adb2e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>dropdownMenu</name></member>
      <member refid="class_k_win_1_1_window_1a680b520607df91ff2ee91be0c33c8736" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>effectWindow</name></member>
      <member refid="class_k_win_1_1_window_1a54880942e05b529132409817d74a84c3" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>effectWindow</name></member>
      <member refid="class_k_win_1_1_window_1abd7f4cf5b59018602262ca9ec54e419e" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>electricBorderMode</name></member>
      <member refid="class_k_win_1_1_window_1af78348da5a0ad82e99e06f1ca9e64ab4" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>elevate</name></member>
      <member refid="class_k_win_1_1_x11_window_1a593e59a1089886a5a04b690aeb00f88a" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>embedClient</name></member>
      <member refid="class_k_win_1_1_window_1ac6647aba8e91643714f82ff1fdc1d09c" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>enabled</name></member>
      <member refid="class_k_win_1_1_window_1a3bb6bb26cb4a8e13525c376ac9bbd3b2" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>endInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a20b6b5cdac1f6b8f13dc04f3e05802a2" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>ensurePalette</name></member>
      <member refid="class_k_win_1_1_window_1a094255358ae73e7620a5716508e00968" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>ensureSpecialStateGeometry</name></member>
      <member refid="class_k_win_1_1_window_1aae3fab1428c67e6a2c925f765070dd84" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>enterDesktop</name></member>
      <member refid="class_k_win_1_1_window_1a5cab226e8c1d5f137f85aa3135e959cc" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>evaluateWindowRules</name></member>
      <member refid="class_k_win_1_1_window_1ae3e09a76bdd4d8b7faea845fd8a37e7f" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>exitQuickTileMode</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad4b17c7d31c907bcd72f08fc04d1a6de" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>exportMappingState</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad8225594169fd9a4141f65afac052138" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>fetchActivities</name></member>
      <member refid="class_k_win_1_1_x11_window_1a1e877ff3158c82224301f63640e2f80c" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>fetchApplicationMenuObjectPath</name></member>
      <member refid="class_k_win_1_1_x11_window_1a8d338a701c0f1f6ab4c12c1d656adf74" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>fetchApplicationMenuServiceName</name></member>
      <member refid="class_k_win_1_1_x11_window_1a5fe86bbd65b6b2ffd34d7c783074b583" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>fetchIconicName</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad520dc77dfff5dd9b4269143d96851ab" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>fetchName</name></member>
      <member refid="class_k_win_1_1_x11_window_1a751930905324e041a1174e4e379973d4" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>fetchPid</name></member>
      <member refid="class_k_win_1_1_x11_window_1afbe8974f7b4627bb6004a590f1e98323" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>fetchPreferredColorScheme</name></member>
      <member refid="class_k_win_1_1_x11_window_1a8b6a7587aa13191c3b9e201219027203" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>fetchShowOnScreenEdge</name></member>
      <member refid="class_k_win_1_1_x11_window_1a6b11ffba331180875f2ba8e8b3aa458f" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>fetchSkipCloseAnimation</name></member>
      <member refid="class_k_win_1_1_x11_window_1ab6ac2de11dcf4682f7cecc364f8c5c5b" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>fetchTransient</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad6f81e28f4196359b71b36304f3c0557" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>fetchWmClientLeader</name></member>
      <member refid="class_k_win_1_1_window_1a936c783bfd766648824d4d7990c0bb2f" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>findDesktopFile</name></member>
      <member refid="class_k_win_1_1_window_1aa6d169611e85de5c016f53a1ff30f558" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>findInList</name></member>
      <member refid="class_k_win_1_1_x11_window_1a843e20b3ca879bbc5a19602594a8434a" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>findInternalWindow</name></member>
      <member refid="class_k_win_1_1_window_1ac49252173ad8460fec752ffb4f74824d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>findModal</name></member>
      <member refid="class_k_win_1_1_window_1a7eae1931b3b428d2d59ff49ab95d010c" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>finishCompositing</name></member>
      <member refid="class_k_win_1_1_window_1a6978b71453df0de95f4822332b1be103" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>finishInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_x11_window_1a182332ca660202f8f8dbbe2c95e64832" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>finishSync</name></member>
      <member refid="class_k_win_1_1_window_1afc19a299627232cd2f497ff1c91772b3" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>finishWindowRules</name></member>
      <member refid="class_k_win_1_1_x11_window_1a444feb5a8a18956df514967f006356ff" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>focusInEvent</name></member>
      <member refid="class_k_win_1_1_x11_window_1aae9f06e1458a6a5af0a9c9ec30d19897" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>focusOutEvent</name></member>
      <member refid="class_k_win_1_1_window_1a1e17df8a7fdcbbde5cfe8ab92e7e6421" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>forgetTile</name></member>
      <member refid="class_k_win_1_1_window_1a0cd1f979061accdf5d743f3089360132" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>frameGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a7617d3fa0acf53549af7d54e558881ad" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>frameGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a0dac69707ab89d7d943100312fbec7c7" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>frameGeometryAboutToChange</name></member>
      <member refid="class_k_win_1_1_window_1ac20682dc9062e09db6ed01b2cf7c6097" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>frameGeometryChanged</name></member>
      <member refid="class_k_win_1_1_x11_window_1a41fce59f634f8e4f8cbb0cc52cb1dd71" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>frameId</name></member>
      <member refid="class_k_win_1_1_window_1af8a628049f3374489651d8db883febd2" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>frameMargins</name></member>
      <member refid="class_k_win_1_1_x11_window_1a05c453a3fcf05dad3f5b834a417dd93e" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>framePosToClientPos</name></member>
      <member refid="class_k_win_1_1_window_1a31d53d6011e247371ee9316d6be2ba81" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>frameRectToClientRect</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad52b2f9c90fe952787fdce1107f66024" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>frameSizeToClientSize</name></member>
      <member refid="class_k_win_1_1_window_1a197e218d29e40b39c56eee4eed4aa454" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>fullScreen</name></member>
      <member refid="class_k_win_1_1_window_1abf412f7b864b281ccc78a13b71359e94" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>fullScreenable</name></member>
      <member refid="class_k_win_1_1_window_1a469e95b9f51c551643a0e4bdf46e0203" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>fullScreenChanged</name></member>
      <member refid="class_k_win_1_1_window_1aafa6825cf1306da791fa827c4ba98006" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>fullscreenGeometryRestore</name></member>
      <member refid="class_k_win_1_1_window_1a2887b7589490c544849ac1ecc9c9a48c" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>fullscreenGeometryRestoreChanged</name></member>
      <member refid="class_k_win_1_1_x11_window_1afe0e35bb1783e95746d39574eeabdd9f" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>FullScreenMode</name></member>
      <member refid="class_k_win_1_1_x11_window_1ae059401c61a846bfa487c1564d1dbfac" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>fullScreenMode</name></member>
      <member refid="class_k_win_1_1_x11_window_1aedd73012b4ffd3ac691de1b0f29dc201" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>fullscreenMonitorsArea</name></member>
      <member refid="class_k_win_1_1_x11_window_1afe0e35bb1783e95746d39574eeabdd9fa7389cfc67e8c44e13ff0fc3652e79de7" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>FullScreenNone</name></member>
      <member refid="class_k_win_1_1_x11_window_1afe0e35bb1783e95746d39574eeabdd9fac5638fe64595d593b48c718bf46491fe" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>FullScreenNormal</name></member>
      <member refid="class_k_win_1_1_window_1a5f94086b4bce785556425c530c59dbaf" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>geometryRestore</name></member>
      <member refid="class_k_win_1_1_x11_window_1a2cd4accc6ce5b049e6f33be3b45fca5d" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>getIcons</name></member>
      <member refid="class_k_win_1_1_x11_window_1a18cb33a4927894921bca2b6ede90aff5" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>getMotifHints</name></member>
      <member refid="class_k_win_1_1_window_1ac90d9d4441fbcadcc29e53b26d4e20f5" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>getMousePressCommand</name></member>
      <member refid="class_k_win_1_1_window_1a3d2bdcd5bd8d81287be54e5184a61f01" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>getMouseReleaseCommand</name></member>
      <member refid="class_k_win_1_1_x11_window_1aaf152900d7d2d40ad264a85c933221df" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>getResourceClass</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad04e182599f55512f082fac44cdc2877" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>getSkipCloseAnimation</name></member>
      <member refid="class_k_win_1_1_x11_window_1abdacd3cab455593efccc8200293b6092" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>getSyncCounter</name></member>
      <member refid="class_k_win_1_1_window_1aa1872f2aa9de9e8689d1fdee95c863a9" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>getWheelCommand</name></member>
      <member refid="class_k_win_1_1_x11_window_1aba5a438ac4f4c401ea9317cea86351a9" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>getWmClientLeader</name></member>
      <member refid="class_k_win_1_1_x11_window_1a8d305c8ab41a33488d4033952f302e8d" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>getWmClientMachine</name></member>
      <member refid="class_k_win_1_1_x11_window_1aa7579106126ca57370fbcb248021ee38" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>getWmNormalHints</name></member>
      <member refid="class_k_win_1_1_x11_window_1aa32140e78a8c89a63b194b19454df3dc" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>getWmOpaqueRegion</name></member>
      <member refid="class_k_win_1_1_x11_window_1a443d3e0d70905641a1f9becb641e157a" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>gotPing</name></member>
      <member refid="class_k_win_1_1_window_1abb26f86fb723e81f43e0a27e8ffa0aa8" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>gravity</name></member>
      <member refid="class_k_win_1_1_x11_window_1ae020484bc7335a2691fd19eac6a1056c" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>gravityAdjustment</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad00fe111dfb7ae782ad657eb684e8633" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>group</name></member>
      <member refid="class_k_win_1_1_x11_window_1a3e337f96d26bf6151d2ee8f6c150f1a9" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>group</name></member>
      <member refid="class_k_win_1_1_x11_window_1afe2f971d0d4593a63edb75220cf48c02" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>groupTransient</name></member>
      <member refid="class_k_win_1_1_window_1a658b4ab528b8142078ffa190a75f88dc" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>growHorizontal</name></member>
      <member refid="class_k_win_1_1_window_1a2af22a940dbc4ae7506131b6ba64d80a" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>growVertical</name></member>
      <member refid="class_k_win_1_1_x11_window_1a21869cb8fb78f45c4f64286c98af4ed3" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>GTKShowWindowMenu</name></member>
      <member refid="class_k_win_1_1_x11_window_1a96909fe896be3b7517c498ba64f36627" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>handleCommitted</name></member>
      <member refid="class_k_win_1_1_window_1a90b69dcdcb07786cd185f895a73649e6" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>handleCustomQuickTileShortcut</name></member>
      <member refid="class_k_win_1_1_window_1a53b2543bc269052c7c508b531dc816a3" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>handlePaletteChange</name></member>
      <member refid="class_k_win_1_1_window_1ae6731dcfd435bc27d7bbee375b152835" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>handleQuickTileShortcut</name></member>
      <member refid="class_k_win_1_1_x11_window_1a8b426638f78556c09db60750bcc4db86" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>handleXwaylandScaleChanged</name></member>
      <member refid="class_k_win_1_1_x11_window_1a34ea4cffa5445af708e43d32d2cebc20" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>hasAlpha</name></member>
      <member refid="class_k_win_1_1_window_1ae023877c81ca2684d535e7d7f89e4ce7" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>hasApplicationMenu</name></member>
      <member refid="class_k_win_1_1_window_1a6718fa91ff19f314d85678e091b8340c" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>hasApplicationMenu</name></member>
      <member refid="class_k_win_1_1_window_1a71e3866d32586ef81815db5d089295f9" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>hasApplicationMenuChanged</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad81dd123f5387c0508abbb1464f808ee" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>hasNETSupport</name></member>
      <member refid="class_k_win_1_1_window_1a09d95d476bf97f7e8913a851c17c88eb" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>hasPopupGrab</name></member>
      <member refid="class_k_win_1_1_x11_window_1a550ff35903b0fd0d034c4e109f3f8943" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>hasScheduledRelease</name></member>
      <member refid="class_k_win_1_1_x11_window_1a0705718e853e8dc77e99fcf3a7e446e0" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>hasStrut</name></member>
      <member refid="class_k_win_1_1_x11_window_1a07961b2f4f6ecf9840d8d748b5cfa120" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>hasTransient</name></member>
      <member refid="class_k_win_1_1_x11_window_1a231da0a0d67efe839d269c9d5a89dfea" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>hasTransientInternal</name></member>
      <member refid="class_k_win_1_1_window_1a5423508a43c9fbdadadb2a7a168a35b6" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>hasTransientPlacementHint</name></member>
      <member refid="class_k_win_1_1_x11_window_1a3078570444760b4a48a69fadf74b7a2b" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>hasUserTimeSupport</name></member>
      <member refid="class_k_win_1_1_window_1ab18c68ce7b55201a2c3052994f80362b" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>height</name></member>
      <member refid="class_k_win_1_1_window_1ad9487bb4e3271b05e351100e5f9092a6" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>height</name></member>
      <member refid="class_k_win_1_1_window_1ab2e0f83863b9a8fc1ac12744fc8299c8" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>hidden</name></member>
      <member refid="class_k_win_1_1_window_1aa42a6f9a69ad698d2f8709b6d831c4c8" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>hiddenByShowDesktopChanged</name></member>
      <member refid="class_k_win_1_1_window_1ade5c0d18d4d6deae42a63d61e54d5cdd" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>hiddenChanged</name></member>
      <member refid="class_k_win_1_1_x11_window_1a143ebe7e115cf4e2021c76df9915ffab" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>hiddenPreview</name></member>
      <member refid="class_k_win_1_1_window_1aaed4b5db1f86e8e62e77a13197ed987f" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>hitTest</name></member>
      <member refid="class_k_win_1_1_window_1a7b0ffef1838f708ffc5c83b5244712f4" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>icon</name></member>
      <member refid="class_k_win_1_1_window_1ad72a56a6d75f77ed9bfc074b8d575e0d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>icon</name></member>
      <member refid="class_k_win_1_1_window_1a1d74b16abee154db8a79c363051e9c67" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>iconChanged</name></member>
      <member refid="class_k_win_1_1_window_1a3e8d94d178149efd393f5f944366dae5" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>iconFromDesktopFile</name></member>
      <member refid="class_k_win_1_1_window_1a65483fe15894a40c5bd6117ec37812fc" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>iconFromDesktopFile</name></member>
      <member refid="class_k_win_1_1_window_1a2e72ccaab8958830979e76f8e36564f7" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>iconGeometry</name></member>
      <member refid="class_k_win_1_1_window_1ad97233455cde3594215a551becc5fb00" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>iconGeometry</name></member>
      <member refid="class_k_win_1_1_x11_window_1ac85538fc29a5d13ab6e1583d77fb6fd0" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>ignore_focus_stealing</name></member>
      <member refid="class_k_win_1_1_x11_window_1a74eb3de413f19ead5d7a4e434ed206ac" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>implicitSize</name></member>
      <member refid="class_k_win_1_1_x11_window_1adba5c5d4cd7fe7f987a05c144c479b83" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>in_group</name></member>
      <member refid="class_k_win_1_1_x11_window_1a02b906c1b91e1f840a65e743d2e48990" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>info</name></member>
      <member refid="class_k_win_1_1_window_1aa2da7f0cb27d3b0c3f597b21ac115d78" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>initialGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a5d65f964d1a3dc5893b561429840639d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>initialGeometryRestore</name></member>
      <member refid="class_k_win_1_1_window_1a2c99107d19da560ccc18cb3b8c4a59fc" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>initialInteractiveMoveResizeGeometry</name></member>
      <member refid="class_k_win_1_1_window_1add628ad2a7308fadfed4c43146813b1c" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>initialMaximizeMode</name></member>
      <member refid="class_k_win_1_1_window_1aa61d53fcea4373c904e60093289795f6" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>initialQuickTileMode</name></member>
      <member refid="class_k_win_1_1_window_1aee14acc6594d272e230e75dc36dadab0" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>inputMethod</name></member>
      <member refid="class_k_win_1_1_window_1ac6d2550e02b58a4b9b3c818a4841d602" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>inputRegion</name></member>
      <member refid="class_k_win_1_1_window_1af0d6ef568b401a7e593c0652c66b31b1" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>inputTransformation</name></member>
      <member refid="class_k_win_1_1_window_1a0fcac52cd277eab8f40d1c5172a4b5b4" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>inputTransformationChanged</name></member>
      <member refid="class_k_win_1_1_window_1a087ebcf075b63c7581b7bf3c55fab2ef" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>interactiveMoveOffset</name></member>
      <member refid="class_k_win_1_1_window_1a028d288109b39cb174d34fb8b2b44345" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>interactiveMoveResizeAnchor</name></member>
      <member refid="class_k_win_1_1_window_1a7a0feefba9bd002fb35060568a605af3" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>interactiveMoveResizeCount</name></member>
      <member refid="class_k_win_1_1_window_1a6e7ab55b455103df20931b548729169a" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>interactiveMoveResizeFinished</name></member>
      <member refid="class_k_win_1_1_window_1aeb3ff3e9e2c5fe0b4816948a52cb58a6" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>interactiveMoveResizeGravity</name></member>
      <member refid="class_k_win_1_1_window_1a010201206994e942640621e136fb90c4" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>interactiveMoveResizeStarted</name></member>
      <member refid="class_k_win_1_1_window_1a9361cc41442c34180031739b1f4bac4b" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>interactiveMoveResizeStartOutput</name></member>
      <member refid="class_k_win_1_1_window_1a230ebb5d4b374435787377b7cb97ce4d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>interactiveMoveResizeStepped</name></member>
      <member refid="class_k_win_1_1_x11_window_1a5c666dd7d9c1ce72425606073c6920b9" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>internalHide</name></member>
      <member refid="class_k_win_1_1_window_1a6cf4afcfaaf0179f72d4fe968510f427" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>internalId</name></member>
      <member refid="class_k_win_1_1_window_1adade434fb1c46bc5680b97af0b160e4c" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>internalId</name></member>
      <member refid="class_k_win_1_1_x11_window_1a4fa48412495f268916e74d594ce223fd" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>internalKeep</name></member>
      <member refid="class_k_win_1_1_x11_window_1a72719211ae47955e3e66d1426cdf9c4f" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>internalShow</name></member>
      <member refid="class_k_win_1_1_x11_window_1a9ef0042230e05f0829491bbf6f3dd091" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>invalidateDecoration</name></member>
      <member refid="class_k_win_1_1_window_1af13e920c6c31b68f63437425761e91eb" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>invalidateDecorationDoubleClickTimer</name></member>
      <member refid="class_k_win_1_1_x11_window_1a117b66ac3910d4ea189112132c7902a0" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>is_shape</name></member>
      <member refid="class_k_win_1_1_window_1a8466be38391212ef29a4c880506eb069" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isActive</name></member>
      <member refid="class_k_win_1_1_window_1a6af763334d4b8f6e15dab019710e6fde" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>isActiveFullScreen</name></member>
      <member refid="class_k_win_1_1_window_1a37f5a22919d5ee6f6404ce789c0a71f7" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isAppletPopup</name></member>
      <member refid="class_k_win_1_1_x11_window_1a852aa374f815f9b1b3ac774dd4ac6d84" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>isClient</name></member>
      <member refid="class_k_win_1_1_x11_window_1aa6f12c894ba2f2a0f1d37dfdeaa6c3ea" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isClientSideDecorated</name></member>
      <member refid="class_k_win_1_1_x11_window_1a5f7b5e65052844f25f1efcc0ebf150d4" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>isCloseable</name></member>
      <member refid="class_k_win_1_1_window_1a244536a5e022586293ec1fb0f31f5431" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isComboBox</name></member>
      <member refid="class_k_win_1_1_window_1a477e0788aeabac703b672cc772a70398" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isCriticalNotification</name></member>
      <member refid="class_k_win_1_1_window_1a85199ff20c051bd2738f150f96875b7f" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isDecorated</name></member>
      <member refid="class_k_win_1_1_window_1a3eb5ffa931e4a6f5b817084cf0cc9b71" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isDeleted</name></member>
      <member refid="class_k_win_1_1_window_1a3d04ecc04772333222a02d8ac41856f9" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isDemandingAttention</name></member>
      <member refid="class_k_win_1_1_window_1ab56044e6eff0cd7e2a144756834c0751" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isDesktop</name></member>
      <member refid="class_k_win_1_1_window_1a7dd959da7a7a8d50a959684a92d55d65" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isDialog</name></member>
      <member refid="class_k_win_1_1_window_1a51642b7e40fd798861daeadb5e689e27" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isDNDIcon</name></member>
      <member refid="class_k_win_1_1_window_1a3b2b28edaa7b699d1407322fd11ec1cb" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isDock</name></member>
      <member refid="class_k_win_1_1_window_1a25dac8536448a3d7dfae04663ac29d53" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isDropdownMenu</name></member>
      <member refid="class_k_win_1_1_window_1ac0833d8fcb7badada14ec1ab9a1a7729" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>isElectricBorderMaximizing</name></member>
      <member refid="class_k_win_1_1_x11_window_1ae5b462a986c3efa84fa3c566cc9b985e" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>isFullScreen</name></member>
      <member refid="class_k_win_1_1_x11_window_1a031295bc7fb1dd7e6752b29cec3c9472" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>isFullScreenable</name></member>
      <member refid="class_k_win_1_1_window_1a4eb66b6e398d1fecaf5a18adfcd5d621" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isHidden</name></member>
      <member refid="class_k_win_1_1_window_1ac07f6126d0cbaa1688090ceadefe5ded" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isHiddenByShowDesktop</name></member>
      <member refid="class_k_win_1_1_window_1a901d9f764423ff5f2498705fa038d224" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>isInputMethod</name></member>
      <member refid="class_k_win_1_1_window_1a1b63155365b80df09ad34dc75f15102d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isInteractiveMove</name></member>
      <member refid="class_k_win_1_1_window_1a52812fb30393688827b36f5ff51c1a6d" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>isInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a14a4d0eae0024af8a7c3d9fc9cbfa4df" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>isInteractiveMoveResizePointerButtonDown</name></member>
      <member refid="class_k_win_1_1_window_1a6994e3aab2074f1b07c15c2f51629363" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isInteractiveResize</name></member>
      <member refid="class_k_win_1_1_window_1a25245fd93c82135a2f197a63a7c21154" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>isInternal</name></member>
      <member refid="class_k_win_1_1_window_1abb9526fedfc012f6ad629e79e126af91" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>isLocalhost</name></member>
      <member refid="class_k_win_1_1_window_1ac53e1dd7ab4f57c3e323ac3d675b5cac" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>isLockScreen</name></member>
      <member refid="class_k_win_1_1_window_1ab7937ac44130efc04c6bc24f65f71958" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isLockScreenOverlay</name></member>
      <member refid="class_k_win_1_1_x11_window_1a815d7dcf1b3907d8f200510156b54ac7" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>isManaged</name></member>
      <member refid="class_k_win_1_1_x11_window_1a1ef7085c0c0cf02938b8bbc1dedb3866" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>isMaximizable</name></member>
      <member refid="class_k_win_1_1_window_1a80fbfd7990c3c58f2b61a00e0f94b87d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isMenu</name></member>
      <member refid="class_k_win_1_1_x11_window_1a7dafba5edb390a4ff2f8ef2eca77df42" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>isMinimizable</name></member>
      <member refid="class_k_win_1_1_window_1a7ee9515027aa5076af42776c20b3a4a5" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isMinimized</name></member>
      <member refid="class_k_win_1_1_window_1ab9a3cecb663e5b45353d210ff5de1195" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isModal</name></member>
      <member refid="class_k_win_1_1_window_1a9886564c812681bf934e6e9d8242a01e" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>isMostRecentlyRaised</name></member>
      <member refid="class_k_win_1_1_x11_window_1af6f8e4a552926fe7968147d02b5ba732" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>isMovable</name></member>
      <member refid="class_k_win_1_1_x11_window_1a01dc71b0fcf03387727e17aa70fbed15" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>isMovableAcrossScreens</name></member>
      <member refid="class_k_win_1_1_window_1a03433bdc26094171788332e5edfe66e3" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isNormalWindow</name></member>
      <member refid="class_k_win_1_1_window_1a0ac6d06256d8b4ff4f83089f1a1c6151" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isNotification</name></member>
      <member refid="class_k_win_1_1_window_1a445d701c22287899adf39b5a34313628" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isOffscreenRendering</name></member>
      <member refid="class_k_win_1_1_window_1a7511675b840c00baeccfaa211fa39ff6" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isOnActiveOutput</name></member>
      <member refid="class_k_win_1_1_window_1af30982dccaf9fcab4a7da3dd7053fc8b" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isOnActivity</name></member>
      <member refid="class_k_win_1_1_window_1a20a2cd33c04529fd4e5115e272ffaaf8" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isOnAllActivities</name></member>
      <member refid="class_k_win_1_1_window_1ab12c1237a71a1f353898742b3d85e793" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isOnAllDesktops</name></member>
      <member refid="class_k_win_1_1_window_1a6214074a0338d546c1c97c736f1b1fe6" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isOnCurrentActivity</name></member>
      <member refid="class_k_win_1_1_window_1aa975d4f4a79a999c827e0a4d7bb5c1dd" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isOnCurrentDesktop</name></member>
      <member refid="class_k_win_1_1_window_1a0e153ca25af4de7deaebbfc31c917560" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isOnDesktop</name></member>
      <member refid="class_k_win_1_1_window_1a0a700ea4c908f6907d172e7754c38db7" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isOnOutput</name></member>
      <member refid="class_k_win_1_1_window_1a3081e1e30178d43b6e73b42e383191bd" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isOnScreenDisplay</name></member>
      <member refid="class_k_win_1_1_x11_window_1a6c61081edb155d2aa8672e2ee6a94708" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>isOutline</name></member>
      <member refid="class_k_win_1_1_window_1a1aae947c69f1f83740db61c11d5524c2" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>isPlaceable</name></member>
      <member refid="class_k_win_1_1_window_1aa442208612eb92068a69c7e1b7a205ef" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isPopupMenu</name></member>
      <member refid="class_k_win_1_1_window_1abc2ff83881725b11c8d72178012a2a88" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>isPopupWindow</name></member>
      <member refid="class_k_win_1_1_window_1a4b695bf258e4c855a72d9c832e0ae4b9" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>isRequestedFullScreen</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad26ea1c81f61a38f6652edc5212f32e5" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>isResizable</name></member>
      <member refid="class_k_win_1_1_window_1a3dfd89167d57f28ebedf72ffddd33191" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isShade</name></member>
      <member refid="class_k_win_1_1_x11_window_1a44a0e3ebe485da6063063850e55127c0" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>isShadeable</name></member>
      <member refid="class_k_win_1_1_window_1aed48d73c0d33bd1134f6c0b48104030d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isShown</name></member>
      <member refid="class_k_win_1_1_window_1a26bdcce1a00f8b7a1c1401b5bf132874" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isSpecialWindow</name></member>
      <member refid="class_k_win_1_1_window_1aa0179fdd1c6fee664b5401f61f35e493" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isSplash</name></member>
      <member refid="class_k_win_1_1_window_1afc0da6efe05a813f7c8e5e4fdded0824" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isSuspended</name></member>
      <member refid="class_k_win_1_1_window_1a5fa248e56c9434f4d7002528b360a092" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isToolbar</name></member>
      <member refid="class_k_win_1_1_window_1a4240959ea5b4e75eed1a8f29b6055397" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isTooltip</name></member>
      <member refid="class_k_win_1_1_x11_window_1a30e74c044caf63f869473d6b8648f506" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>isTransient</name></member>
      <member refid="class_k_win_1_1_x11_window_1a96c7a60b05aadbc537329ae7f90c817a" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>isUnmanaged</name></member>
      <member refid="class_k_win_1_1_window_1a39aab7cbfbd4db666f1c5dce5028a2a6" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>isUnrestrictedInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1af7a970e5b2da43bc372f9fa79daec492" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>isUtility</name></member>
      <member refid="class_k_win_1_1_x11_window_1a665e5bdd8f2e9a9f11dc1fb05c679913" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>isWaitingForInteractiveResizeSync</name></member>
      <member refid="class_k_win_1_1_window_1ade1d7dfe29d1f709eca65af12b076d2b" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>keepAbove</name></member>
      <member refid="class_k_win_1_1_window_1a6155a361d4ffdb58f5e2a006354b46a2" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>keepAbove</name></member>
      <member refid="class_k_win_1_1_window_1a794a364234bf2bbcf77034e6061bf7af" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>keepAboveChanged</name></member>
      <member refid="class_k_win_1_1_window_1a47ab87d36dc289a8f636f78b048a5b36" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>keepBelow</name></member>
      <member refid="class_k_win_1_1_window_1aceec67e914c48c0dd7e678db07907a59" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>keepBelow</name></member>
      <member refid="class_k_win_1_1_window_1aceedecf8e018f3aede6fa947ea214d9b" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>keepBelowChanged</name></member>
      <member refid="class_k_win_1_1_window_1a2bc639db4c4a762bc0d58a715136a0ca" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>keepInArea</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad8cf73e489a340b776daf13b2633250ea2cff2cd4057c61bf166bc1d9d17d7060" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>Kept</name></member>
      <member refid="class_k_win_1_1_window_1a04c86c8dccc5bc02600ce775e4cf78a0" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>keyboardGeometryRestore</name></member>
      <member refid="class_k_win_1_1_window_1aeb1157e5384db85990b6c16659bc7ab3" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>keyPressEvent</name></member>
      <member refid="class_k_win_1_1_x11_window_1ae57f321c93b4aa5f31871ef57b530302" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>killProcess</name></member>
      <member refid="class_k_win_1_1_x11_window_1aa4171b66aad9facad7cd60937f8be3d1" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>killWindow</name></member>
      <member refid="class_k_win_1_1_window_1a2c7d45f16d453f275e7ef16d8ec2118f" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>lastUsageSerial</name></member>
      <member refid="class_k_win_1_1_window_1adcb254bbc52101784ed82685e69c97b5" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>layer</name></member>
      <member refid="class_k_win_1_1_window_1af8445d7e9f3a61fb1d02ef84220332ae" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>layer</name></member>
      <member refid="class_k_win_1_1_window_1ac76883ec1ae279e0453ad6ea21a6a441" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>layoutDecorationRects</name></member>
      <member refid="class_k_win_1_1_window_1a7c8bdc25faf71283cc2d836016fa6113" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>leaveDesktop</name></member>
      <member refid="class_k_win_1_1_window_1ad31baea5b1b98cc7a01b21e6b527f77a" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>leaveInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a43e6e0af4a0864ecfad30c5eda29c2d8" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>lockScreenOverlayChanged</name></member>
      <member refid="class_k_win_1_1_window_1a01d9ea2184e2db1093c64e503054e44c" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_active</name></member>
      <member refid="class_k_win_1_1_window_1af5906859fd02b57258bcd8bc581d1c79" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_activityList</name></member>
      <member refid="class_k_win_1_1_x11_window_1a0dadf24a4f4cf4a651db7a1eb92b39b2" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_activityUpdatesBlocked</name></member>
      <member refid="class_k_win_1_1_window_1a34d2bc7be777b7e73a80e0e9f0e11dee" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_applicationMenuActive</name></member>
      <member refid="class_k_win_1_1_window_1afb4dae41e63bf8253fc18fb0592fb896" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_applicationMenuObjectPath</name></member>
      <member refid="class_k_win_1_1_window_1a0fc590d232b8a473c027c123d765351a" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_applicationMenuServiceName</name></member>
      <member refid="class_k_win_1_1_window_1af9123bdb0820a24c5f49b78f3a9a5f2c" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_autoRaiseTimer</name></member>
      <member refid="class_k_win_1_1_x11_window_1a4d125d688f572341cc61d5de341e7611" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_blockedActivityUpdatesRequireTransients</name></member>
      <member refid="class_k_win_1_1_x11_window_1a42bebf68bd09c480836b38fd2c0746c1" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_blockGeometryUpdates</name></member>
      <member refid="class_k_win_1_1_window_1a1359c9bf73f8b28bdfe9d5aa19aea1ab" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_bufferGeometry</name></member>
      <member refid="class_k_win_1_1_x11_window_1a3696a879194e3a39f2f07ad08d0aff81" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_bufferScale</name></member>
      <member refid="class_k_win_1_1_x11_window_1a2c0123d834fdd577128895e8aee3a3c8" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_client</name></member>
      <member refid="class_k_win_1_1_x11_window_1a2490a4822ec3f6f1f7785b113606d681" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_clientFrameExtents</name></member>
      <member refid="class_k_win_1_1_window_1ade714a7cf13d4ef4d770b5763919e5fa" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_clientGeometry</name></member>
      <member refid="class_k_win_1_1_window_1ae54e6b7244395a9a4a9c7bb9ab0cf939" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_clientMachine</name></member>
      <member refid="class_k_win_1_1_window_1a9e81ea2b202e22419de25715d6d9d995" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_colorScheme</name></member>
      <member refid="class_k_win_1_1_window_1a1f4d0f011a8c41e357782a318cd0078d" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_decoration</name></member>
      <member refid="class_k_win_1_1_window_1a8f95d5441e07c467333307a930979994" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_deleted</name></member>
      <member refid="class_k_win_1_1_window_1ad92bcaae3a24dae71b6311ea65100a19" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_demandsAttention</name></member>
      <member refid="class_k_win_1_1_window_1a09fb67780141bb5039d70ec04e2c8d09" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_desktopFileName</name></member>
      <member refid="class_k_win_1_1_window_1a11f83e606efc5d90143b2d396e39e3ec" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_desktops</name></member>
      <member refid="class_k_win_1_1_x11_window_1aefcfe816f86504b1415ec988c08c4b9e" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_edgeGeometryTrackingConnection</name></member>
      <member refid="class_k_win_1_1_window_1a30324ba0bf9c10338dd809187d7ab87e" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_electricGeometryRestore</name></member>
      <member refid="class_k_win_1_1_window_1a12c2b2f6f08bc682b5709b0b31835af2" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_electricMaximizing</name></member>
      <member refid="class_k_win_1_1_window_1a8ac86198b154d673d3f95e53f8e22bbc" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_electricMaximizingDelay</name></member>
      <member refid="class_k_win_1_1_window_1a85e581a5d27c42ac61ba665b48b6ccd8" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_electricMode</name></member>
      <member refid="class_k_win_1_1_x11_window_1a93dc0566478fbb1767027bec5d329692" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_focusOutTimer</name></member>
      <member refid="class_k_win_1_1_x11_window_1a9a869c5dfcd0bbc68eac6ef7103bdb19" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_frame</name></member>
      <member refid="class_k_win_1_1_window_1a59df30651b9d39dc3ee42d5d3b63b400" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_frameGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a7c7d55137ebad9559a28f1c0f142d7e3" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_fullscreenGeometryRestore</name></member>
      <member refid="class_k_win_1_1_x11_window_1af86805a7f9c8b73d407f7604906f5ef1" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_fullscreenMode</name></member>
      <member refid="class_k_win_1_1_x11_window_1a78ecb9f0fb339ce5f9eadff195360ed4" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_geometryHints</name></member>
      <member refid="class_k_win_1_1_window_1a0ca7c21092d548fdf56b613e7a2ef757" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_hidden</name></member>
      <member refid="class_k_win_1_1_window_1ae180802be2d4f58f05d01eb88a1dd4eb" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_hiddenByShowDesktop</name></member>
      <member refid="class_k_win_1_1_window_1ae6c87b2230a834ac55ec726fd3bc2573" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_icon</name></member>
      <member refid="class_k_win_1_1_window_1ae18f2e2076546040be29be581bceb33a" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_interactiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a5371907d36cfc708d29493db67dc55b8" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_internalId</name></member>
      <member refid="class_k_win_1_1_window_1a1ae892b14cdf6d7565154061a6c4910a" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_keepAbove</name></member>
      <member refid="class_k_win_1_1_window_1addd6305ffba6280bc90767705a77caef" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_keepBelow</name></member>
      <member refid="class_k_win_1_1_window_1af0d59bddcb003671edd6c8c5918ca9bb" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_keyboardGeometryRestore</name></member>
      <member refid="class_k_win_1_1_x11_window_1a95f4ed0554ad705eebdcbb4e35164b67" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_killPrompt</name></member>
      <member refid="class_k_win_1_1_window_1aeac686d7fa3178f4f8c48cad30fe64ae" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_lastUsageSerial</name></member>
      <member refid="class_k_win_1_1_window_1a7cebc18154bbbc82550e807cb97548bc" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_layer</name></member>
      <member refid="class_k_win_1_1_window_1a974b55853ed7502a0d360dce8202ecf7" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_lockScreenOverlay</name></member>
      <member refid="class_k_win_1_1_x11_window_1a089887b3a7275ef8ace8e5e2dd90b434" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_managed</name></member>
      <member refid="class_k_win_1_1_window_1a3c7d9d00fef91f9caea2200864b6fa11" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_maximizeGeometryRestore</name></member>
      <member refid="class_k_win_1_1_window_1ac8984210c5c8842735c5632a8c634095" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_minimized</name></member>
      <member refid="class_k_win_1_1_window_1add656ef4838e72d612c6b50db024088c" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_modal</name></member>
      <member refid="class_k_win_1_1_x11_window_1a6d04a39af2239f5369ea5b466999a6a8" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_motif</name></member>
      <member refid="class_k_win_1_1_window_1af7e5c26ceb8213166436ae5cb33b3868" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_moveResizeGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a0cf00bc60958289e00e98f54c5cd5efc" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_moveResizeOutput</name></member>
      <member refid="class_k_win_1_1_window_1a7ebdca86b3c0761c70c933c2218600cb" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_nextTargetScale</name></member>
      <member refid="class_k_win_1_1_window_1a082147340c5e5bad774726702cc59d69" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_offscreenFramecallbackTimer</name></member>
      <member refid="class_k_win_1_1_window_1ae8ba437342c4f6dc46da0fbe50a09e0f" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_offscreenRenderCount</name></member>
      <member refid="class_k_win_1_1_window_1abb36a6011f877745c67c573119c6a5c6" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_opacity</name></member>
      <member refid="class_k_win_1_1_window_1a0dcaab2dcb54c92ce99429a62f2bc3e5" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_originalSkipTaskbar</name></member>
      <member refid="class_k_win_1_1_x11_window_1a8c713e2c0aab832d3bbe7bb416ec5c5a" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_originalTransientForId</name></member>
      <member refid="class_k_win_1_1_x11_window_1a911ac445dc4b68ed099347da68766802" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_outline</name></member>
      <member refid="class_k_win_1_1_window_1a87aebec66b33eebf680520b5eb66fbd4" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_output</name></member>
      <member refid="class_k_win_1_1_window_1a9c732f4f49c5d539aad82c43b7901a7f" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_palette</name></member>
      <member refid="class_k_win_1_1_x11_window_1aeb570d4a19935db0dba769ba194a85e4" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_pid</name></member>
      <member refid="class_k_win_1_1_x11_window_1ac92d621b442478ed00ed5333b42b5c9b" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_pingTimestamp</name></member>
      <member refid="class_k_win_1_1_window_1a0084134b116f3a3a3b8890a50e967207" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_preferredBufferTransform</name></member>
      <member refid="class_k_win_1_1_window_1a598d3d131ab6df350faf1e0d8e48c129" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_preferredColorDescription</name></member>
      <member refid="class_k_win_1_1_window_1afdc3cc5183afb301b1beb45eef23b018" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_refCount</name></member>
      <member refid="class_k_win_1_1_x11_window_1a88328bd253838a424b5a72a976296ac8" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_releaseTimer</name></member>
      <member refid="class_k_win_1_1_window_1ad11fd4fa0886c3235d511ca20c92cdd3" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_requestedTile</name></member>
      <member refid="class_k_win_1_1_window_1a7b0073ffa42fe46eec1c800a0ce2fe93" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_rules</name></member>
      <member refid="class_k_win_1_1_window_1a751e7058dae4fd04e4da899b2860cd0c" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_shadeHoverTimer</name></member>
      <member refid="class_k_win_1_1_window_1ae6f4b0155777b5852e8c6e7a3e8bb704" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_shadeMode</name></member>
      <member refid="class_k_win_1_1_window_1a00a0d46c1f63c72d6905cfcea6cb7e90" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_shadow</name></member>
      <member refid="class_k_win_1_1_x11_window_1a9f98d6a7b144874dcf02e9dbf38f30a6" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_shapeRegion</name></member>
      <member refid="class_k_win_1_1_x11_window_1aed534774c04274416ea6c6f0779dc23b" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_shapeRegionIsValid</name></member>
      <member refid="class_k_win_1_1_window_1a3d1d1e31100e981a40ed4d01467c9b01" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_skipCloseAnimation</name></member>
      <member refid="class_k_win_1_1_window_1ac4054bc17a49a5ec8b5705ed929a3eb3" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_skipPager</name></member>
      <member refid="class_k_win_1_1_window_1a8329114171869e9d8f47985eb2ce5a0b" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_skipSwitcher</name></member>
      <member refid="class_k_win_1_1_window_1a056f5f78bc6d3cb6d6cf48ab73fd9ce2" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_skipTaskbar</name></member>
      <member refid="class_k_win_1_1_window_1a7ab75d4f6088d9ee485731cc567f294e" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_stackingOrder</name></member>
      <member refid="class_k_win_1_1_window_1a7fb37fb07218feaab2454465fbed6864" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_surface</name></member>
      <member refid="class_k_win_1_1_x11_window_1a7f4560bb6de78010fc9439ce0c14d41b" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_surfaceSerial</name></member>
      <member refid="class_k_win_1_1_window_1a265fba838812db557b4dc8d9c7ba4dba" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_suspended</name></member>
      <member refid="class_k_win_1_1_x11_window_1a467a3fa616d36fb9724fddd2f44955de" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_syncRequest</name></member>
      <member refid="class_k_win_1_1_window_1a2c70041797ff18d5c1a135feabbd8861" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_targetScale</name></member>
      <member refid="class_k_win_1_1_window_1a19c97e72ee45549f09b9b6fd62c97e73" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_tile</name></member>
      <member refid="class_k_win_1_1_window_1a4f120e060e7e5296686849275e6ba0b2" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_transientFor</name></member>
      <member refid="class_k_win_1_1_x11_window_1adc5da24d9918ed05fb1c59d5000cfa20" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_transientForId</name></member>
      <member refid="class_k_win_1_1_window_1a4b477f51ea1fb84ee84bd6fa0f0b4658" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_transients</name></member>
      <member refid="class_k_win_1_1_x11_window_1a38572ad4e59316b31cc8410aff313a0e" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_unmanaged</name></member>
      <member refid="class_k_win_1_1_window_1a2e2dbdceda6f42b30b91e6f9949cdef1" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_unresponsive</name></member>
      <member refid="class_k_win_1_1_x11_window_1ab648f3df1211d607cf997b32226ed986" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_userTime</name></member>
      <member refid="class_k_win_1_1_window_1aa21b3b775184dac69e633ff5429fadc4" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_virtualKeyboardGeometry</name></member>
      <member refid="class_k_win_1_1_x11_window_1a783fff52c785acdedc22930ad63e004d" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_visual</name></member>
      <member refid="class_k_win_1_1_window_1a42e178e26b4f5ac7ffd415293b9b9e5a" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_windowItem</name></member>
      <member refid="class_k_win_1_1_window_1a4400f22402e2098aa69a9cc119d3119f" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_windowManagementInterface</name></member>
      <member refid="class_k_win_1_1_x11_window_1afda2fcebc914c0f26c774d2efb9c1b89" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_wmClientLeader</name></member>
      <member refid="class_k_win_1_1_x11_window_1afedaa96808a7257653162506604f0e6c" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>m_wrapper</name></member>
      <member refid="class_k_win_1_1_x11_window_1a0b9273d4b5cbb939568096e8a73db60e" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>mainWindows</name></member>
      <member refid="class_k_win_1_1_x11_window_1abbb8a2850677bce88d1a52dd38337dfd" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>manage</name></member>
      <member refid="class_k_win_1_1_window_1ab7146e790ca7820c18f7a23b6b2bc7ab" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>managed</name></member>
      <member refid="class_k_win_1_1_x11_window_1a5f53a567bc22f7a520029458a30ea963" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>map</name></member>
      <member refid="class_k_win_1_1_window_1a7f753460e69ae5649245beb0dd1abd90" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>mapFromLocal</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad8cf73e489a340b776daf13b2633250ea0bd403e2bf588cd4393aff014d1e9560" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>Mapped</name></member>
      <member refid="class_k_win_1_1_x11_window_1ac1a234ffbccd20ff062ed45e7b45e347" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>mapping_state</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad8cf73e489a340b776daf13b2633250e" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>MappingState</name></member>
      <member refid="class_k_win_1_1_x11_window_1a97dd8e2b9526b26e75f354bb55e4d4b7" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>mapRequestEvent</name></member>
      <member refid="class_k_win_1_1_window_1a9424a239d38ac1d23a06c2db0567d04d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>mapToFrame</name></member>
      <member refid="class_k_win_1_1_window_1a9f3e6314899a3ace5b8df65704a41529" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>mapToLocal</name></member>
      <member refid="class_k_win_1_1_window_1a159ea1bd3bc5d490f99c9b158fbf8fcf" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>markAsDeleted</name></member>
      <member refid="class_k_win_1_1_x11_window_1a2345786fa7572bd079829cbf0a317281" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>max_mode</name></member>
      <member refid="class_k_win_1_1_window_1afcdf5efc106e90c4bf388e9abffffda6" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>maximizable</name></member>
      <member refid="class_k_win_1_1_x11_window_1a4e215498a2a89848ba5b6aa7e4fd56db" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>maximize</name></member>
      <member refid="class_k_win_1_1_window_1a045c3913e8716caabc318263c012e073" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>maximizeableChanged</name></member>
      <member refid="class_k_win_1_1_window_1aab14ea30d0ecc3db40ba4abe981defc8" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>maximizedAboutToChange</name></member>
      <member refid="class_k_win_1_1_window_1a08cad7d21d3195ccc0829c2c0f1f9c95" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>maximizedChanged</name></member>
      <member refid="class_k_win_1_1_window_1a93879a21c2f72b3e4bb1e5eace66a2f2" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>maximizeGeometryRestoreChanged</name></member>
      <member refid="class_k_win_1_1_x11_window_1ac6190e05ee7c40de52a3a853f4df410a" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>maximizeMode</name></member>
      <member refid="class_k_win_1_1_window_1aacb57e092c7155d3745e3964c7745ba3" prot="public" virt="non-virtual" ambiguityscope="KWin::Window::"><scope>KWin::X11Window</scope><name>maximizeMode</name></member>
      <member refid="class_k_win_1_1_x11_window_1a3693e777b97ae236b95db854e3257078" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>maxSize</name></member>
      <member refid="class_k_win_1_1_window_1aed76f5fbe38ae0051ad9587c7e47bcd8" prot="public" virt="non-virtual" ambiguityscope="KWin::Window::"><scope>KWin::X11Window</scope><name>maxSize</name></member>
      <member refid="class_k_win_1_1_window_1af9b82e7eb525e57206489164ae67df78" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>maybeSendFrameCallback</name></member>
      <member refid="class_k_win_1_1_window_1ae666f42ac59d5e3dcad179184eaa1986" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>menu</name></member>
      <member refid="class_k_win_1_1_window_1a7c4b95b673e249d7efba8e5af1bfb971" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>minimizable</name></member>
      <member refid="class_k_win_1_1_window_1a7c419713c2fc34dfe096ae7dbde13e06" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>minimizeableChanged</name></member>
      <member refid="class_k_win_1_1_window_1aece20b77969aee41eb51a679cfdce582" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>minimized</name></member>
      <member refid="class_k_win_1_1_window_1ab2768713cab0bc9b18ff28b39d3170ad" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>minimizedChanged</name></member>
      <member refid="class_k_win_1_1_x11_window_1a789e45e8dda7a6db82df10a93024772a" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>minSize</name></member>
      <member refid="class_k_win_1_1_window_1acf74967cccfc708ba0dd82dce391d77f" prot="public" virt="non-virtual" ambiguityscope="KWin::Window::"><scope>KWin::X11Window</scope><name>minSize</name></member>
      <member refid="class_k_win_1_1_window_1a4e462795255c904774aa629a6163f391" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>modal</name></member>
      <member refid="class_k_win_1_1_window_1a6a98d80986255b4543ca25ddc07e9ff2" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>modalChanged</name></member>
      <member refid="class_k_win_1_1_window_1ac363a722e88080cf4a00495866de7f4d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>modifiers</name></member>
      <member refid="class_k_win_1_1_window_1a167b374ab7f2cd2da20250457a4fc2d2" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>mouseGravity</name></member>
      <member refid="class_k_win_1_1_window_1a6dc0bc3b6fedf55e01d0db0ee508b320" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>move</name></member>
      <member refid="class_k_win_1_1_window_1ae6dc01373356e8b623e67a3d36ded9ce" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>move</name></member>
      <member refid="class_k_win_1_1_window_1a6481df4b0d499d0b97ba0cef43d959c1" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>moveable</name></member>
      <member refid="class_k_win_1_1_window_1a945946c3799baf32ae8dc6e71a95410e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>moveableAcrossScreens</name></member>
      <member refid="class_k_win_1_1_window_1aca6e1f1d8772897c5efbfb3c17fa436e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>moveResize</name></member>
      <member refid="class_k_win_1_1_window_1afd3ab3a04af8f8ee6569e6389b1a7ac2" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>moveResizeCursorChanged</name></member>
      <member refid="class_k_win_1_1_window_1a9356b0ac19763187d49f27e195ad4c5e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>moveResizedChanged</name></member>
      <member refid="class_k_win_1_1_window_1a5bd40e38d16c8453af9226579d1865ac" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>moveResizeGeometry</name></member>
      <member refid="class_k_win_1_1_x11_window_1ab85e615def62c1eb2728972d090b5bf5" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>moveResizeInternal</name></member>
      <member refid="class_k_win_1_1_window_1a412b316294522eb307c31fb2155e82e9" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>MoveResizeMode</name></member>
      <member refid="class_k_win_1_1_window_1ad20775a66b1c93ffb3cd0a8e917cc92b" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>moveResizeOutput</name></member>
      <member refid="class_k_win_1_1_window_1a48c39e5a2fae63c9480116fa64b89d57" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>moveToArea</name></member>
      <member refid="class_k_win_1_1_x11_window_1a4ea1fefbb46d8c53846ff8f883ef4dee" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>NETMoveResize</name></member>
      <member refid="class_k_win_1_1_x11_window_1a0a3956dd63bae633d3c5ae43d719f536" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>NETMoveResizeWindow</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad58f460d101533c87526ed2ccf3fa1bc" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>nextClientPosToFramePos</name></member>
      <member refid="class_k_win_1_1_window_1a295cbed96fc3d79023a1820b26c2af53" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>nextClientRectToFrameRect</name></member>
      <member refid="class_k_win_1_1_x11_window_1a983d242e42480e725fe01005f240d0a2" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>nextClientSizeToFrameSize</name></member>
      <member refid="class_k_win_1_1_window_1ae186402da754d5946bcfeab855f6096e" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>nextDecoration</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad04667c236f30d2b04226fb479e54c8b" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>nextFramePosToClientPos</name></member>
      <member refid="class_k_win_1_1_x11_window_1a0698f17c5d52ecb88f88580fd73b4fd7" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>nextFrameRectToBufferRect</name></member>
      <member refid="class_k_win_1_1_window_1a609229e1420ffc3f9d584ea7834fdb73" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>nextFrameRectToClientRect</name></member>
      <member refid="class_k_win_1_1_x11_window_1a647f36c69b53bde05593b6ab25d728cf" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>nextFrameSizeToClientSize</name></member>
      <member refid="class_k_win_1_1_window_1ad599d6c840d9fd09232e753638a16b54" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>nextInteractiveMoveGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a695c280f8767b14eced4e9dbd0422431" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>nextInteractiveResizeGeometry</name></member>
      <member refid="class_k_win_1_1_window_1aa37ac55bb7dc545e7109d022b02202a7" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>nextTargetScale</name></member>
      <member refid="class_k_win_1_1_window_1ad7f7aca73ef4e87e1626a377f2cd168c" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>nextTargetScaleChanged</name></member>
      <member refid="class_k_win_1_1_x11_window_1a41bb8138b2bf7ce1cd9f62f2d839dce3" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>noBorder</name></member>
      <member refid="class_k_win_1_1_window_1a522f27150d53cdf33f9ff69940763621" prot="public" virt="non-virtual" ambiguityscope="KWin::Window::"><scope>KWin::X11Window</scope><name>noBorder</name></member>
      <member refid="class_k_win_1_1_x11_window_1a860162f55f87e254235a33fb0ffb40e8" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>noborder</name></member>
      <member refid="class_k_win_1_1_window_1ad800920f411886a60d8a154c1bbb4e1a" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>noBorderChanged</name></member>
      <member refid="class_k_win_1_1_window_1a4a12209a68d7a695cb8fb9a1ebb27b5b" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>normalWindow</name></member>
      <member refid="class_k_win_1_1_window_1a544f23643bc4509d24855f10d716387f" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>notification</name></member>
      <member refid="class_k_win_1_1_window_1a045818526d97d3965985db1204036bd5" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>offscreenRenderingChanged</name></member>
      <member refid="class_k_win_1_1_window_1a140e419a5274b750fd8a6b3789c8f6af" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>offset</name></member>
      <member refid="class_k_win_1_1_window_1ac093de4d3c723b295f1ff93b5aa05393" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>onAllDesktops</name></member>
      <member refid="class_k_win_1_1_window_1a1eda1e68950fd02ab06c22ec96643ce1" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>onScreenDisplay</name></member>
      <member refid="class_k_win_1_1_window_1abb0f10e1968953e89829431415fa803e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>opacity</name></member>
      <member refid="class_k_win_1_1_window_1a41cf2858ec31edde92b788747ddf1177" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>opacity</name></member>
      <member refid="class_k_win_1_1_window_1a5c56ad8046349bf9a87a26d73fd17c37" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>opacityChanged</name></member>
      <member refid="class_k_win_1_1_x11_window_1a3efe1715537f0efd661f1233de842fa3" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>opaque_region</name></member>
      <member refid="class_k_win_1_1_x11_window_1ae860187f63c4b87b374c624fa4a9a523" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>opaqueRegion</name></member>
      <member refid="class_k_win_1_1_window_1a05dee36ed06739092162ef6425fe0d84" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>originalSkipTaskbar</name></member>
      <member refid="class_k_win_1_1_window_1a80c872dfd7f84fdcb120dbdcefd28e72" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>outline</name></member>
      <member refid="class_k_win_1_1_window_1ae01b40bf580c920be022d66080e0685c" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>output</name></member>
      <member refid="class_k_win_1_1_window_1a61b3745b4ffca0d122acc9fc0c8e0c4f" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>output</name></member>
      <member refid="class_k_win_1_1_window_1a7dbccaac47d2333da22ab4acb4897381" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>outputChanged</name></member>
      <member refid="class_k_win_1_1_window_1af9f291eba5887f2df4f6586c4a6b8903" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>packTo</name></member>
      <member refid="class_k_win_1_1_window_1ac10c709b4624c0aef3b4f2f8cc57427b" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>palette</name></member>
      <member refid="class_k_win_1_1_window_1a9507fbaee33b1a8e28fbd6bf78779891" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>paletteChanged</name></member>
      <member refid="class_k_win_1_1_window_1adc4cfddd14db72a5b6337bf3b0f8c639" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>performMousePressCommand</name></member>
      <member refid="class_k_win_1_1_window_1a0a5e4a76a206143596023e553abedfd5" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>performMouseReleaseCommand</name></member>
      <member refid="class_k_win_1_1_x11_window_1a7175d6e6f28f86cbf7473fdaf05fafb2" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>performTransiencyCheck</name></member>
      <member refid="class_k_win_1_1_x11_window_1a974270608d37bc8817c9421d7ca8e60e" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>pid</name></member>
      <member refid="class_k_win_1_1_window_1a085bf52e9cddc60b0b3d4a4550a60dfd" prot="public" virt="non-virtual" ambiguityscope="KWin::Window::"><scope>KWin::X11Window</scope><name>pid</name></member>
      <member refid="class_k_win_1_1_x11_window_1ae43db3bfa14a0ff08d8b2c7f89e18278" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>ping_timer</name></member>
      <member refid="class_k_win_1_1_x11_window_1a60cc41d0659dcf351f77fc30dfcba02c" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>pingWindow</name></member>
      <member refid="class_k_win_1_1_window_1aeb2a5b22cd9d9d72646b739689c9e6e0" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>pointerEnterEvent</name></member>
      <member refid="class_k_win_1_1_window_1a94aff261a7be7524f316a35b8fe4190f" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>pointerLeaveEvent</name></member>
      <member refid="class_k_win_1_1_window_1ab6bf1e4ac19677d618e6a6c392bb27a1" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>popupDone</name></member>
      <member refid="class_k_win_1_1_window_1a92b7c2c501362d45205d4859aea145e8" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>popupMenu</name></member>
      <member refid="class_k_win_1_1_window_1a3423010aedb939fad955032d40f64fcb" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>popupWindow</name></member>
      <member refid="class_k_win_1_1_window_1a090c42b4c18c700d15ff1822a2044c0f" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>pos</name></member>
      <member refid="class_k_win_1_1_window_1aa42e778009d34e419aee0651f727ba30" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>pos</name></member>
      <member refid="class_k_win_1_1_window_1aa6519c0e1267b9d6a4bfb925652d5ddb" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>preferredBufferTransform</name></member>
      <member refid="class_k_win_1_1_window_1a4720452272fcfef7fb9e1c4fdf1d3c84" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>preferredColorDescription</name></member>
      <member refid="class_k_win_1_1_x11_window_1a756913ae234b4f7441c9986ca98205b4" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>preferredColorScheme</name></member>
      <member refid="class_k_win_1_1_window_1a3c741dfbd6ca6136eb56b6e57054b8d9" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>processDecorationButtonPress</name></member>
      <member refid="class_k_win_1_1_window_1a2299969b07dae95abd1896a63d24f147" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>processDecorationButtonRelease</name></member>
      <member refid="class_k_win_1_1_window_1a192d2d38ea0f55ec06c164838fac36ac" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>processDecorationMove</name></member>
      <member refid="class_k_win_1_1_x11_window_1a9f96d5572a984e786475329df63963f3" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>propertyNotifyEvent</name></member>
      <member refid="class_k_win_1_1_x11_window_1a0534b03d57a37b287fd85abe101a300d" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>providesContextHelp</name></member>
      <member refid="class_k_win_1_1_window_1af3de3b41671127884529d47ba9e96fc0" prot="public" virt="non-virtual" ambiguityscope="KWin::Window::"><scope>KWin::X11Window</scope><name>providesContextHelp</name></member>
      <member refid="class_k_win_1_1_window_1aee9db3fc7ca52ecdaf42b7a77137c238" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>quickTileGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a3df1363787b3578160154bf8b472c6d2" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>quickTileGeometryRestore</name></member>
      <member refid="class_k_win_1_1_window_1a771c32db912a7dca82da5fd3f9fe5fa8" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>quickTileMode</name></member>
      <member refid="class_k_win_1_1_window_1a8b05c56b34e456d2ffeec10eaef8fa5e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>quickTileModeChanged</name></member>
      <member refid="class_k_win_1_1_x11_window_1a16d24df4dbe671e33837d21010855d83" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>readActivities</name></member>
      <member refid="class_k_win_1_1_x11_window_1a0fa9fddfd088d3b8402fe8f3c77bf694" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>readApplicationMenuObjectPath</name></member>
      <member refid="class_k_win_1_1_x11_window_1a68b4cac4c0bafcdaa1b65abdd1698b4e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>readApplicationMenuServiceName</name></member>
      <member refid="class_k_win_1_1_x11_window_1ae6844d4e1e4571ba6938b103002d0c8e" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>readName</name></member>
      <member refid="class_k_win_1_1_x11_window_1a3146ac62da26b66b2b5cd5edc0b7a8a3" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>readPid</name></member>
      <member refid="class_k_win_1_1_x11_window_1a0578029e113c93a9816a7c11590c8b8c" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>readPreferredColorScheme</name></member>
      <member refid="class_k_win_1_1_x11_window_1ae9a20aef2d287db0f9015c377d47a6bb" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>readShowOnScreenEdge</name></member>
      <member refid="class_k_win_1_1_x11_window_1a0ecf71466c32a50e250c9e72e25e1a59" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>readSkipCloseAnimation</name></member>
      <member refid="class_k_win_1_1_x11_window_1a9c80083ed8a38c8c934412416c96a1e9" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>readTransient</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad7f9e5850995b1644262698caf204251" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>readTransientProperty</name></member>
      <member refid="class_k_win_1_1_x11_window_1ab5684df8c30224370c7be63916c64f1a" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>readUserCreationTime</name></member>
      <member refid="class_k_win_1_1_x11_window_1a2208a7a71c84aeb9877dc36f7cb4d946" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>readUserTimeMapTimestamp</name></member>
      <member refid="class_k_win_1_1_x11_window_1a688470921011abdabe8710e41949ea33" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>readWmClientLeader</name></member>
      <member refid="class_k_win_1_1_window_1aa8d74436db9dba2de3f297c459c62ca4" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>ready_for_painting</name></member>
      <member refid="class_k_win_1_1_window_1af15bc927a7938e696dfcaf8e5ddb20c1" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>readyForPainting</name></member>
      <member refid="class_k_win_1_1_window_1a4890a0258935c363bad64f8681c3af11" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>readyForPaintingChanged</name></member>
      <member refid="class_k_win_1_1_window_1aa9a98858e1f184f24e2bfa6cf9362b5f" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>rect</name></member>
      <member refid="class_k_win_1_1_window_1a392792ca7e4158c176f4fa32c42ae528" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>rect</name></member>
      <member refid="class_k_win_1_1_window_1ad9117ba1a2dcfae844dfb15f3beb5ae3" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>ref</name></member>
      <member refid="class_k_win_1_1_window_1a4d84c00bbc011d8a4b3b4a17b8851d15" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>refOffscreenRendering</name></member>
      <member refid="class_k_win_1_1_x11_window_1ae40e9801befd45d3e0bb13a87427fdd9" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>releaseWindow</name></member>
      <member refid="class_k_win_1_1_x11_window_1a7c398ae6f8034a8ec7f93cd230a6c458" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>removeFromMainClients</name></member>
      <member refid="class_k_win_1_1_window_1af8b11c559566d839b7665662b6d561a3" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>removeRule</name></member>
      <member refid="class_k_win_1_1_window_1a660daf739fe1a2d1a2280599f526635c" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>removeTransient</name></member>
      <member refid="class_k_win_1_1_window_1a35e79a166a5640473b24800e1a7e13cd" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>removeTransientFromList</name></member>
      <member refid="class_k_win_1_1_window_1acf3e2b244a1f328009073204ff50f5ae" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>requestedMaximizeMode</name></member>
      <member refid="class_k_win_1_1_window_1a1ffaa1f6015de331667110a987922089" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>requestedQuickTileMode</name></member>
      <member refid="class_k_win_1_1_window_1a935782e2939b237ea347b393d34ca27b" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>requestedTile</name></member>
      <member refid="class_k_win_1_1_window_1a1fdebcd600a74ba4e3ceef2dc4e01da4" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>requestedTileChanged</name></member>
      <member refid="class_k_win_1_1_window_1a45f340de71d3dbb253c978d091d39d07" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>requestTile</name></member>
      <member refid="class_k_win_1_1_window_1aa5afd7d435f68d9fdfe23ae20b954bc6" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>resetQuickTilingMaximizationZones</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad5f9b5279c3d1153bb245b7e33d9bd94" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>ResetupRulesProcedure</name></member>
      <member refid="class_k_win_1_1_window_1a4f9ff78c2b5b8fb2c900869968a9df63" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>resize</name></member>
      <member refid="class_k_win_1_1_window_1acbdb2c16d25e7aa8842c04a0d51fe61e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>resize</name></member>
      <member refid="class_k_win_1_1_window_1a208becdee75c1e38ea619880b1b50bbc" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>resizeable</name></member>
      <member refid="class_k_win_1_1_x11_window_1a95a7ebb34d5d7127053c50e64415d164" prot="protected" virt="virtual"><scope>KWin::X11Window</scope><name>resizeIncrements</name></member>
      <member refid="class_k_win_1_1_x11_window_1a6c03fc2e4e471167af05d58866f4ab23" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>resizeWithChecks</name></member>
      <member refid="class_k_win_1_1_x11_window_1a5871fc2a918eb9a92cd610d4a7aa454e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>resizeWithChecks</name></member>
      <member refid="class_k_win_1_1_x11_window_1a11885a761ac0deb25396b265ac46314e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>resizeWithChecks</name></member>
      <member refid="class_k_win_1_1_window_1a9425218f438709c0bf0dac60fb7e2786" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>resource_class</name></member>
      <member refid="class_k_win_1_1_window_1ab2c297c768db712d6bf9961ac1fabb04" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>resource_name</name></member>
      <member refid="class_k_win_1_1_window_1a825429c1c8c6f5b6721752eac7da370d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>resourceClass</name></member>
      <member refid="class_k_win_1_1_window_1a97af0bd7201928fd19d12a0ccbaa9914" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>resourceClass</name></member>
      <member refid="class_k_win_1_1_window_1a927f981105a03011681b42d6644834f0" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>resourceName</name></member>
      <member refid="class_k_win_1_1_window_1ac06a67c2039af8a40589846ae2eb7c9a" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>resourceName</name></member>
      <member refid="class_k_win_1_1_x11_window_1a1dee043d082cfa70ef4bd172c5e7db40" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>restackWindow</name></member>
      <member refid="class_k_win_1_1_window_1aab8020efbe1a1ddc2934570b9701d0c3" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>rules</name></member>
      <member refid="class_k_win_1_1_window_1aed6539e49519ddd40f9c45665ae9cf58" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>s_defaultPalette</name></member>
      <member refid="class_k_win_1_1_window_1a9fda98051b25624be54619573b64ffb4" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>s_palettes</name></member>
      <member refid="class_k_win_1_1_window_1a70e1b60416c67a488268d17dba135eca" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>SameApplicationCheck</name></member>
      <member refid="class_k_win_1_1_x11_window_1a1552f36cc01da626a1a6de4d76e94d50" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>sameAppWindowRoleMatch</name></member>
      <member refid="class_k_win_1_1_x11_window_1abb79e01420c4d8dc9c1e55be3293a428" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>sendClientMessage</name></member>
      <member refid="class_k_win_1_1_x11_window_1a8bbefc962d2261240377d89d98449e74" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>sendSyncRequest</name></member>
      <member refid="class_k_win_1_1_x11_window_1a0ee16658ae52b9c64f91ea2ba61c3309" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>sendSyntheticConfigureNotify</name></member>
      <member refid="class_k_win_1_1_window_1a43d064a134863a34bfe5956f21a35641" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>sendToOutput</name></member>
      <member refid="class_k_win_1_1_x11_window_1a70314eabbb4e1b7dc9cb7828eff47b52" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>sessionActivityOverride</name></member>
      <member refid="class_k_win_1_1_x11_window_1ac6dee2b4e4c8688dcf37ca08c16a0090" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>sessionId</name></member>
      <member refid="class_k_win_1_1_x11_window_1a360413cff4a7e2dbcfde0dfa01fc41c5" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>sessionStackingOrder</name></member>
      <member refid="class_k_win_1_1_window_1afc8d12b9a719a163f5f862a79e515465" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setActive</name></member>
      <member refid="class_k_win_1_1_x11_window_1ae238661d51e1f420a0fb54fb203b5ddb" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>setAllowCommits</name></member>
      <member refid="class_k_win_1_1_window_1a82738dff3fdc591b41d16aafef113e01" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setApplicationMenuActive</name></member>
      <member refid="class_k_win_1_1_x11_window_1ac81685cb1c52b9ebe5f0074bf53a67df" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>setCaption</name></member>
      <member refid="class_k_win_1_1_x11_window_1a57595a8204681eab51abf447417429e1" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>setClientFrameExtents</name></member>
      <member refid="class_k_win_1_1_window_1a2867cf88dbab9e9101452ff49a44790e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setColorScheme</name></member>
      <member refid="class_k_win_1_1_window_1ad11b98291d4eddcbcc38e614d416f499" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setDecoratedWindow</name></member>
      <member refid="class_k_win_1_1_window_1ab2d8993f1630348add5dc2632aba5de5" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>setDecoration</name></member>
      <member refid="class_k_win_1_1_window_1a4f8e4a201d469a4bec2646970b1a3f42" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>setDesktopFileName</name></member>
      <member refid="class_k_win_1_1_window_1a017d0afde06ff1fac03f4c4ef7cfb6d9" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setDesktops</name></member>
      <member refid="class_k_win_1_1_window_1a8daebb2d16d0caf9dd9e9db6322b47de" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>setElectricBorderMaximizing</name></member>
      <member refid="class_k_win_1_1_window_1a57e519ab516032f0d9d74016c1229f1d" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>setElectricBorderMode</name></member>
      <member refid="class_k_win_1_1_x11_window_1a2f48fc29406a12f659c62e25709e81a9" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>setFullScreen</name></member>
      <member refid="class_k_win_1_1_window_1aa475aaf802327aabba57f3c9404a34d3" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setFullscreenGeometryRestore</name></member>
      <member refid="class_k_win_1_1_window_1a9372354c3330f992f28ca6e6fb22d700" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setGeometryRestore</name></member>
      <member refid="class_k_win_1_1_window_1a5af4007f99eb32f7091d32d3331b0e7e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setHidden</name></member>
      <member refid="class_k_win_1_1_window_1a4c76c5f07d75a4f427466a9a6db35ef9" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setHiddenByShowDesktop</name></member>
      <member refid="class_k_win_1_1_window_1a8711a1631fd015356de884e9ced52c8d" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>setIcon</name></member>
      <member refid="class_k_win_1_1_window_1a7e62656d305c8cceba734c4f362d3249" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>setInteractiveMoveOffset</name></member>
      <member refid="class_k_win_1_1_window_1a3ac078b88d06393b75e7ba06d5b934c8" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>setInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a419a9bbda60e3f84216574ec05f4787a" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>setInteractiveMoveResizeAnchor</name></member>
      <member refid="class_k_win_1_1_window_1a5b6daf48e5a5dfacc4c06034357cee70" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>setInteractiveMoveResizeGravity</name></member>
      <member refid="class_k_win_1_1_window_1a00035dedbdce6b18de9f323c8a12ebac" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>setInteractiveMoveResizeModifiers</name></member>
      <member refid="class_k_win_1_1_window_1a2c4200a7f6de700eb03c3b48a86a2fdd" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>setInteractiveMoveResizePointerButtonDown</name></member>
      <member refid="class_k_win_1_1_window_1afc24b8209fd3821a0b706667d7b97847" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setKeepAbove</name></member>
      <member refid="class_k_win_1_1_window_1a10220e62a04571d571a0950fb657b2d2" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setKeepBelow</name></member>
      <member refid="class_k_win_1_1_window_1a316c6dea6c926489ab87a93df74f9ec0" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>setKeyboardGeometryRestore</name></member>
      <member refid="class_k_win_1_1_window_1ab80ea35c277e387008a043b40ed19c3d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setLastUsageSerial</name></member>
      <member refid="class_k_win_1_1_window_1a1e3e27bf725caadcf2484557afe24921" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setLockScreenOverlay</name></member>
      <member refid="class_k_win_1_1_window_1a0c0c85ab71928ebce12edcfd33c64b0d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setMaximize</name></member>
      <member refid="class_k_win_1_1_window_1a2020d42e4c3f51da3bcec8cfdc632f86" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setMinimized</name></member>
      <member refid="class_k_win_1_1_window_1a52d0efcfe93dcc8813fddcb813e9120e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setModal</name></member>
      <member refid="class_k_win_1_1_window_1a8653343fc420debd4ffb00938488a736" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>setMoveResizeGeometry</name></member>
      <member refid="class_k_win_1_1_window_1adbbbb9c3b063b36a448825bc710cb4a8" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setMoveResizeOutput</name></member>
      <member refid="class_k_win_1_1_window_1a6757eacee3e64bdbcd4ad4583859846d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setNextTargetScale</name></member>
      <member refid="class_k_win_1_1_x11_window_1a4e73f983d63129203de7cdf7cb915826" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>setNoBorder</name></member>
      <member refid="class_k_win_1_1_window_1a7e638bc0587a8f3df06238420f94962f" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setOnActivities</name></member>
      <member refid="class_k_win_1_1_window_1a545f116b85dc0d6e66045171aa18fe53" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setOnActivity</name></member>
      <member refid="class_k_win_1_1_window_1a4fd6928be07d09893f0ee9df9e015fc7" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setOnAllActivities</name></member>
      <member refid="class_k_win_1_1_window_1a6d170ffa2b85f130fdd02ca8be09d611" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setOnAllDesktops</name></member>
      <member refid="class_k_win_1_1_window_1a294f762b7e595263d56cb155330f19fd" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setOpacity</name></member>
      <member refid="class_k_win_1_1_window_1a42e28c55648d7fbd21d164b14d889dea" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setOriginalSkipTaskbar</name></member>
      <member refid="class_k_win_1_1_window_1a8018decfe708255ffd09b957dc2d14b8" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setOutput</name></member>
      <member refid="class_k_win_1_1_window_1a83c14ba0b0896374d05e78bc19f878b1" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setPreferredBufferTransform</name></member>
      <member refid="class_k_win_1_1_window_1a0ba265750a8310c6566addce02164027" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setPreferredColorDescription</name></member>
      <member refid="class_k_win_1_1_window_1ac21b2eb64cb5abacbe9015e592c6c935" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setQuickTileMode</name></member>
      <member refid="class_k_win_1_1_window_1aa0a1368e7290795e7c7ed6d32c97d0de" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setQuickTileModeAtCurrentPosition</name></member>
      <member refid="class_k_win_1_1_window_1a595f38fca83c2083b11039c4679983c5" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>setReadyForPainting</name></member>
      <member refid="class_k_win_1_1_window_1a38800a8310bd13d63a6a3e18a50028d4" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>setResourceClass</name></member>
      <member refid="class_k_win_1_1_x11_window_1ae56e338fd870babf17b618f5f877c134" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setSessionActivityOverride</name></member>
      <member refid="class_k_win_1_1_window_1a14232d4a0703db154fc0f506be5a675a" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setShade</name></member>
      <member refid="class_k_win_1_1_window_1a9c807f93f16ca3869027ea6cc511c5e8" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setShade</name></member>
      <member refid="class_k_win_1_1_window_1ae45b3db3780c6b8ed8eab2b87a1031aa" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setShortcut</name></member>
      <member refid="class_k_win_1_1_x11_window_1a4e62a1023531c7165cacda3ae544c3ae" prot="private" virt="virtual"><scope>KWin::X11Window</scope><name>setShortcutInternal</name></member>
      <member refid="class_k_win_1_1_window_1a67a344bd50e2d01ad45bf9ecc4ddd6e3" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setSkipCloseAnimation</name></member>
      <member refid="class_k_win_1_1_window_1a9511f02ec7549d4520c56cc8e71341ab" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setSkipPager</name></member>
      <member refid="class_k_win_1_1_window_1ae740a221f99373e76b5ed57a6edfb5a8" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setSkipSwitcher</name></member>
      <member refid="class_k_win_1_1_window_1a02ce5273a16265b92513c1d6f5ca16ce" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setSkipTaskbar</name></member>
      <member refid="class_k_win_1_1_window_1aa4540f347a37695c94ad9264bccb108f" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setStackingOrder</name></member>
      <member refid="class_k_win_1_1_window_1aa1fb45941f94961dd825e503ace0b7d9" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setSurface</name></member>
      <member refid="class_k_win_1_1_window_1a6e70d5ab3f900d20cc2bf67fa3b0c7ae" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setSuspended</name></member>
      <member refid="class_k_win_1_1_window_1ade9e5485cc346d37281078debb1badbc" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>setTargetScale</name></member>
      <member refid="class_k_win_1_1_window_1a71c83108b40bc535e453981b1958db08" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setTileCompatibility</name></member>
      <member refid="class_k_win_1_1_x11_window_1a6f8a395b0f906520e9fdc1eff2834973" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>setTransient</name></member>
      <member refid="class_k_win_1_1_window_1a3e742583c3124dbcc14d7f1ca800fe29" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setTransientFor</name></member>
      <member refid="class_k_win_1_1_window_1aacf6c3ac882bd25beb2777cedd4dbc64" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>setUnresponsive</name></member>
      <member refid="class_k_win_1_1_window_1a78a086d817f68eeedf87e3e49706b3da" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>setUnrestrictedInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a39805264749f963ab793849f002df2cd" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setupCompositing</name></member>
      <member refid="class_k_win_1_1_window_1a0ff6b1fc41b88953d7f641a33492e54d" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>setupWindowManagementInterface</name></member>
      <member refid="class_k_win_1_1_window_1a91b2a6bd8ffbc9b12bf7e0dd7e93b4dd" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>setupWindowRules</name></member>
      <member refid="class_k_win_1_1_window_1a064dec4659e7831fe425f689ad0312c9" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>setVirtualKeyboardGeometry</name></member>
      <member refid="class_k_win_1_1_window_1a406585fb5b2d7fa1421fb0c56be550a2" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>shade</name></member>
      <member refid="class_k_win_1_1_x11_window_1aa25daabef196a50ce59ce97623ccb8a7" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>shade_below</name></member>
      <member refid="class_k_win_1_1_x11_window_1a74db77386a7ac3b3300f97cd709c591e" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>shade_geometry_change</name></member>
      <member refid="class_k_win_1_1_window_1ac19536a1e7936f2c46fab47c8562184b" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>shadeable</name></member>
      <member refid="class_k_win_1_1_window_1a2021479eb63a57741fcbd1ff860bf3a8" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>shadeableChanged</name></member>
      <member refid="class_k_win_1_1_window_1a65a50831398387c79231316c21be1abc" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>shadeChanged</name></member>
      <member refid="class_k_win_1_1_window_1a62f038086489feb23351bd4e00eee5ac" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>shadeHover</name></member>
      <member refid="class_k_win_1_1_window_1abfa6caaf2d5624a4cdd2b49d20ed228c" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>shadeMode</name></member>
      <member refid="class_k_win_1_1_window_1a30a7bed6ed1322874c268e04a5cd455b" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>shadeUnhover</name></member>
      <member refid="class_k_win_1_1_window_1a5fc203455636e9bd840465b05c8905e5" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>shadow</name></member>
      <member refid="class_k_win_1_1_window_1aced9f90cb668b5491267d3bc0ab9a530" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>shadowChanged</name></member>
      <member refid="class_k_win_1_1_x11_window_1af16e4161195204fcd94a93cd6e97088d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>shapeChanged</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad790784904671e41c5dd7f7542dd07ba" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>shapeRegion</name></member>
      <member refid="class_k_win_1_1_window_1adf86e393b2358d840cbe8d4b6870193b" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>shortcut</name></member>
      <member refid="class_k_win_1_1_window_1af4f8e9d5bcbfd147ce65a6106858010e" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>shortcutCaptionSuffix</name></member>
      <member refid="class_k_win_1_1_window_1a04cfd63418e8fc4dc8c3cb3565a613a9" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>showApplicationMenu</name></member>
      <member refid="class_k_win_1_1_x11_window_1a7de22915b48c0b82741aed9ecce4286c" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>showContextHelp</name></member>
      <member refid="class_k_win_1_1_x11_window_1a014911fefc34d2f424b4438e130b5aad" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>showOnScreenEdge</name></member>
      <member refid="class_k_win_1_1_window_1a8114e3a5eda24d8d1b745c9ab046d628" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>shrinkHorizontal</name></member>
      <member refid="class_k_win_1_1_window_1a6faea699a6465e2eab512f6f27f7ac4d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>shrinkVertical</name></member>
      <member refid="class_k_win_1_1_window_1a3d66832f7a462d332759451c3633851d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>size</name></member>
      <member refid="class_k_win_1_1_window_1abdcd7b301e22e9442661118f2a169635" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>size</name></member>
      <member refid="class_k_win_1_1_window_1a96727035a8ba0a709cc464483d1d7b3e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>SizeMode</name></member>
      <member refid="class_k_win_1_1_window_1a96727035a8ba0a709cc464483d1d7b3eac26ddc87899c79d31f6f90bcd11b85ba" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>SizeModeAny</name></member>
      <member refid="class_k_win_1_1_window_1a96727035a8ba0a709cc464483d1d7b3eaac1c9b8c41a4ac9f828a6506ca5c0772" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>SizeModeFixedH</name></member>
      <member refid="class_k_win_1_1_window_1a96727035a8ba0a709cc464483d1d7b3eaa2888bb87f22c92391588c28ec2a5f18" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>SizeModeFixedW</name></member>
      <member refid="class_k_win_1_1_window_1a96727035a8ba0a709cc464483d1d7b3ea7e60bdb999d87d3a0596e4e8bfdb415b" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>SizeModeMax</name></member>
      <member refid="class_k_win_1_1_window_1a1cb22e123b2f9b94c562e6aa19d0557d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>skipCloseAnimationChanged</name></member>
      <member refid="class_k_win_1_1_window_1acab70f6f5c4c1fb524f1616f9cb13e03" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>skipPager</name></member>
      <member refid="class_k_win_1_1_window_1acd9a44ca4a51baec98cd28279f2c8aa4" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>skipPager</name></member>
      <member refid="class_k_win_1_1_window_1a39a00387940d0f051deff0a6589c5c98" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>skipPagerChanged</name></member>
      <member refid="class_k_win_1_1_window_1a435b14844e4ed3e2ad1a2b95b7a75b73" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>skipsCloseAnimation</name></member>
      <member refid="class_k_win_1_1_window_1af690c3506cbea89838a3561d78fc028f" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>skipsCloseAnimation</name></member>
      <member refid="class_k_win_1_1_window_1a09ff41ece0cac78c632f0a3218c2602d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>skipSwitcher</name></member>
      <member refid="class_k_win_1_1_window_1a7a2eadd344658e6ae2ae2ff1d24195fd" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>skipSwitcher</name></member>
      <member refid="class_k_win_1_1_window_1a097084f43aa41eaa4b55c174712ed556" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>skipSwitcherChanged</name></member>
      <member refid="class_k_win_1_1_window_1aff0dcb9257a7c18c075605858ef64ad6" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>skipTaskbar</name></member>
      <member refid="class_k_win_1_1_window_1afac45df3fbba7e895e8378d325274394" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>skipTaskbar</name></member>
      <member refid="class_k_win_1_1_window_1a926d32fb86d967e63036b5b4afb0eb65" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>skipTaskbarChanged</name></member>
      <member refid="class_k_win_1_1_x11_window_1a01c5451c21925fdf368bd432cba0b79e" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>sm_stacking_order</name></member>
      <member refid="class_k_win_1_1_window_1a3c22405167cf2926964f9336752971a3" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>specialWindow</name></member>
      <member refid="class_k_win_1_1_window_1a6032c3ed54f27c89bb5c871ab695223b" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>splash</name></member>
      <member refid="class_k_win_1_1_window_1ab6e14702ae2257cc27f72a8ad1e6f881" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>stackingOrder</name></member>
      <member refid="class_k_win_1_1_window_1af53fc33cb2e1aa0dd500376191484d1b" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>stackingOrder</name></member>
      <member refid="class_k_win_1_1_window_1a0c8cc94fcc6cfdee73187c18b6208045" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>stackingOrderChanged</name></member>
      <member refid="class_k_win_1_1_window_1a8e53686fbdb1f4670854388a074a6119" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>startAutoRaise</name></member>
      <member refid="class_k_win_1_1_window_1a1bd3b04534d23abc203bc9ac28d5bdcf" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>startDecorationDoubleClickTimer</name></member>
      <member refid="class_k_win_1_1_window_1a30f65669aaec9f5dda9b01d987466f7b" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>startDelayedInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a4470354b4fa88d30ee3c7667d77c7b9c" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>startInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a365dbfdb8799e048a323b0782d8f0837" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>startOutput</name></member>
      <member refid="class_k_win_1_1_window_1ac7c35d8668fd5e4e11838ee581e41722" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>startShadeHoverTimer</name></member>
      <member refid="class_k_win_1_1_window_1a4805d5c28b9aac6559f3c0a06863bbf9" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>startShadeUnhoverTimer</name></member>
      <member refid="class_k_win_1_1_x11_window_1a0854a286c6eddfdac2c8f75a55891efa" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>startupIdChanged</name></member>
      <member refid="class_k_win_1_1_window_1af36f8d8979cc3ffb49d244fd04541f0f" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>stopDelayedInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_x11_window_1a8cd217c8c85e2631910d131fd8182076" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>strut</name></member>
      <member refid="class_k_win_1_1_x11_window_1ab99047488d85c85c666ddb2ecab244ac" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>strutRect</name></member>
      <member refid="class_k_win_1_1_window_1a8e3324842c2afcc9f5bb836e63ecf839" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>strutRects</name></member>
      <member refid="class_k_win_1_1_x11_window_1aa5523cb6190e79111935d776fa833f38" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>supportsWindowRules</name></member>
      <member refid="class_k_win_1_1_window_1a379c25dec85d7b0aee3b79676327b9b6" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>surface</name></member>
      <member refid="class_k_win_1_1_window_1a5ab5cf58669820a49608cb46f3ea3e5b" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>surfaceChanged</name></member>
      <member refid="class_k_win_1_1_window_1aa3e58eb3c6ecd544440b973f68921322" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>surfaceItem</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad49c1844b0fc9fc164afa874f3a7a5fd" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>surfaceSerial</name></member>
      <member refid="class_k_win_1_1_x11_window_1a464866180484d5fdee7b76bf021b741f" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>syncRequest</name></member>
      <member refid="class_k_win_1_1_x11_window_1a704bb98c8ea8645169ca5d9b2588abea" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>takeFocus</name></member>
      <member refid="class_k_win_1_1_window_1a81faef3b8b494d474c8acb202f9e8ddd" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>targetScale</name></member>
      <member refid="class_k_win_1_1_window_1ab43215452b63309c9442dafde7f3f2c3" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>targetScaleChanged</name></member>
      <member refid="class_k_win_1_1_window_1a69d854b1314004bad99f5e93c3ff7a1f" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>tile</name></member>
      <member refid="class_k_win_1_1_window_1a09799395c3f6800a6d39e39695fed8b2" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>tile</name></member>
      <member refid="class_k_win_1_1_window_1a69b6dd1515f1491903ce82938e7973e6" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>tileChanged</name></member>
      <member refid="class_k_win_1_1_window_1af44c993eea122ea90d4b1aa4cd8de38c" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>titlebarPosition</name></member>
      <member refid="class_k_win_1_1_window_1a69f30f2a3a35a61e4e690519ff58abf3" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>titlebarPositionUnderMouse</name></member>
      <member refid="class_k_win_1_1_window_1af6431be1b6486b44c17c218703fe5c28" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>titlebarThickness</name></member>
      <member refid="class_k_win_1_1_window_1a2728eed3519284ca4c11ceeb944033bf" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>toggleShade</name></member>
      <member refid="class_k_win_1_1_window_1a2d3df03917bf4e17bd6d0d51a33e4338" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>toolbar</name></member>
      <member refid="class_k_win_1_1_window_1a64ebcb72533d0d0d18cff279600b59f8" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>tooltip</name></member>
      <member refid="class_k_win_1_1_x11_window_1abeb8d1bcaf6c5295c957832481cd33a4" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>track</name></member>
      <member refid="class_k_win_1_1_window_1a3d9ecdab0b00ae1a91a8adc152e51d14" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>transient</name></member>
      <member refid="class_k_win_1_1_window_1af3e806181c0aa22d655b2396d6e0e05e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>transientChanged</name></member>
      <member refid="class_k_win_1_1_window_1a74ba8e8138736add81114a69c064170a" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>transientFor</name></member>
      <member refid="class_k_win_1_1_window_1a5cc3ca21e54ffca6d3749abf53b1f800" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>transientFor</name></member>
      <member refid="class_k_win_1_1_window_1a190d7fcd03d1b3c3b3133f9560acfa01" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>transientFor</name></member>
      <member refid="class_k_win_1_1_window_1aca310d8070ce3c28a5bac7694fb2cecb" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>transientPlacement</name></member>
      <member refid="class_k_win_1_1_window_1afb0480dda58c4c07e6bf7d2100b7b29e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>transients</name></member>
      <member refid="class_k_win_1_1_window_1a2aa1fc2ef7187d8f8ed3f3bb60e1df9b" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>triggerDecorationRepaint</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad4d789ae6e9c11028bb79afb13152b2a" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>unblockGeometryUpdates</name></member>
      <member refid="class_k_win_1_1_x11_window_1a02f1b1a4618473d78d9e8590e17e1454" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>unmap</name></member>
      <member refid="class_k_win_1_1_x11_window_1a4bb87843ffa7ebde1ca84c6624105ecd" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>unmapNotifyEvent</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad8cf73e489a340b776daf13b2633250ea2b1d4c57d2f1f8c7b0e79bdf2c03699d" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>Unmapped</name></member>
      <member refid="class_k_win_1_1_window_1a212fbc7e400c510205ba9fd3611968d5" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>unref</name></member>
      <member refid="class_k_win_1_1_window_1a5298a339cf68f39640772342ab018e28" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>unrefOffscreenRendering</name></member>
      <member refid="class_k_win_1_1_window_1a706a06ca23af2665a7f386dc72a870e6" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>unresponsive</name></member>
      <member refid="class_k_win_1_1_window_1a06fa16385e03864699000a61f6a1933b" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>unresponsive</name></member>
      <member refid="class_k_win_1_1_window_1ad6fb29161438612c7904e7c1f1311e2f" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>unresponsiveChanged</name></member>
      <member refid="class_k_win_1_1_window_1ae587eea806a869c36dc2b8718e65dee6" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>unrestricted</name></member>
      <member refid="class_k_win_1_1_x11_window_1a1446cfc31ada2f5e9ea3f0fca4f41084" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>updateActivities</name></member>
      <member refid="class_k_win_1_1_x11_window_1a94ea5dc729e583b4769cc7aedf8e17af" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>updateAllowedActions</name></member>
      <member refid="class_k_win_1_1_window_1acbf43400025a9c526cf446f35e0ad6d8" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>updateApplicationMenuObjectPath</name></member>
      <member refid="class_k_win_1_1_window_1aa6855ec71b01961008ef688291652965" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>updateApplicationMenuServiceName</name></member>
      <member refid="class_k_win_1_1_x11_window_1a15704747d5303018fad70cb9491a9926" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>updateCaption</name></member>
      <member refid="class_k_win_1_1_window_1ace7499c5c0613f2a0389de51ab135971" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>updateColorScheme</name></member>
      <member refid="class_k_win_1_1_window_1ac3324745eae4f1e36c81876c373ffe5e" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>updateCursor</name></member>
      <member refid="class_k_win_1_1_x11_window_1a6e64490ab1bd03cdb67c9611fb530550" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>updateDecoration</name></member>
      <member refid="class_k_win_1_1_window_1ae574c58525b0a07014d9066093fe6105" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>updateDecorationInputShape</name></member>
      <member refid="class_k_win_1_1_window_1af21a731d416e0b1a9390d85e629b0c98" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>updateElectricGeometryRestore</name></member>
      <member refid="class_k_win_1_1_x11_window_1aca594a06e553127445fd3d2e30875b87" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>updateFrameExtents</name></member>
      <member refid="class_k_win_1_1_x11_window_1a63e4b163df670b2138b014ecdb946cb1" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>updateFullscreenMonitors</name></member>
      <member refid="class_k_win_1_1_x11_window_1a027bcd91bc7a25f7ddeb4a762fc37416" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>updateHiddenPreview</name></member>
      <member refid="class_k_win_1_1_x11_window_1ab80efe428261f22b773147decfc42e8e" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>updateInputShape</name></member>
      <member refid="class_k_win_1_1_window_1aa144f13367344f7c18bb8cd178464763" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>updateInteractiveMoveResize</name></member>
      <member refid="class_k_win_1_1_window_1a566fd5756c0cce34ab4f6ac8ba8dd96b" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>updateLayer</name></member>
      <member refid="class_k_win_1_1_window_1a5ba5344f9d163c3f951057ddd84f2111" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>updateNextTargetScale</name></member>
      <member refid="class_k_win_1_1_window_1ac1a0623d451064d4938fc3f4872a2a9d" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>updatePreferredBufferTransform</name></member>
      <member refid="class_k_win_1_1_window_1a8317614541483173a05da42f7d35d06b" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>updatePreferredColorDescription</name></member>
      <member refid="class_k_win_1_1_window_1a5d25daf1a543308b42b9c90d98d7f213" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>updateShadow</name></member>
      <member refid="class_k_win_1_1_x11_window_1aeba379d644f6d23d9967f08e1d4fe462" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>updateShape</name></member>
      <member refid="class_k_win_1_1_x11_window_1ace28db274b027ec5b02424acb94e2ccc" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>updateShowOnScreenEdge</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad5eb9a4f81f5b67c24e10c514fcb6fff" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>updateUrgency</name></member>
      <member refid="class_k_win_1_1_x11_window_1aa6d818043d5d2f1f757d18f560d9c71e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>updateUserTime</name></member>
      <member refid="class_k_win_1_1_x11_window_1a0455ca5d541dedad3447ba818ff5060f" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>updateVisibility</name></member>
      <member refid="class_k_win_1_1_x11_window_1a596570835e18830ab4d15180190debc5" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>updateWindowRules</name></member>
      <member refid="class_k_win_1_1_x11_window_1a4a2834b58aae2c4a90b9730f99eb1e31" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>userCanSetNoBorder</name></member>
      <member refid="class_k_win_1_1_x11_window_1a51f795b9545f4b2b1c9aaa3bd3ff0fde" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>userNoBorder</name></member>
      <member refid="class_k_win_1_1_x11_window_1ada9945f8884ca782481cb3fbfb8f33ea" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>userTime</name></member>
      <member refid="class_k_win_1_1_window_1a1af192c036d02e92a9884395b2a94f0e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>utility</name></member>
      <member refid="class_k_win_1_1_x11_window_1a557b9127f5e04a113054cafe3db106ec" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>verifyTransientFor</name></member>
      <member refid="class_k_win_1_1_window_1a0d654ed94cbf37efd319bc78522523da" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>virtualKeyboardGeometry</name></member>
      <member refid="class_k_win_1_1_window_1ab2223644425271a233b5deb303fb8e59" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>visibleGeometry</name></member>
      <member refid="class_k_win_1_1_window_1ad79ce26eab7a39f0c38b62cdf22f4698" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>visibleGeometryChanged</name></member>
      <member refid="class_k_win_1_1_x11_window_1a41aed382a89f01fbfb0b733a4e6b1372" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>visual</name></member>
      <member refid="class_k_win_1_1_window_1a477d5b4eb6907302d98c654bb940c9ae" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>wantsAdaptiveSync</name></member>
      <member refid="class_k_win_1_1_x11_window_1a1614734f8b904d3507c3e2e746948aca" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>wantsInput</name></member>
      <member refid="class_k_win_1_1_window_1a7a9c5f2a5a2a21002dfc4632c67280bf" prot="public" virt="non-virtual" ambiguityscope="KWin::Window::"><scope>KWin::X11Window</scope><name>wantsInput</name></member>
      <member refid="class_k_win_1_1_window_1af71103e065455ef561cc28fdfb23062b" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>wantsShadowToBeRendered</name></member>
      <member refid="class_k_win_1_1_window_1ac69f930533a8e570ccc0e002dc077fcb" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>wantsTabFocus</name></member>
      <member refid="class_k_win_1_1_window_1a0f44df53bb213a357ea967843c94db67" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>wantsTearing</name></member>
      <member refid="class_k_win_1_1_window_1a2cd647ee6dfed59b1dc820162e4acd9f" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>width</name></member>
      <member refid="class_k_win_1_1_window_1a181ef9a610beb622b8b9c3d2f32be868" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>width</name></member>
      <member refid="class_k_win_1_1_window_1a1f57b5fc7e5ebf9060435cacce04349d" prot="protected" virt="non-virtual"><scope>KWin::X11Window</scope><name>Window</name></member>
      <member refid="class_k_win_1_1_x11_window_1abb09d9e05765e00997b34c4906e2d8b0" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>window</name></member>
      <member refid="class_k_win_1_1_window_1ada6d2b84af63fc37f49fd43da8d8592d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>windowClassChanged</name></member>
      <member refid="class_k_win_1_1_x11_window_1a9a8ecb6fc486d923b1258db29b12fdb6" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>windowEvent</name></member>
      <member refid="class_k_win_1_1_window_1a0094149b3a29d3b0240918e695fdb3fa" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>windowItem</name></member>
      <member refid="class_k_win_1_1_window_1a566b2f1b031cd7f536104017d3e157de" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>windowManagementInterface</name></member>
      <member refid="class_k_win_1_1_x11_window_1ae2e6e971b045b7eb896cd0e037ccdf3d" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>windowRole</name></member>
      <member refid="class_k_win_1_1_window_1af885f634335d8664537c240afe0fff3e" prot="public" virt="non-virtual" ambiguityscope="KWin::Window::"><scope>KWin::X11Window</scope><name>windowRole</name></member>
      <member refid="class_k_win_1_1_window_1a73961c045eb1609f01e611f928af0c4b" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>windowRoleChanged</name></member>
      <member refid="class_k_win_1_1_x11_window_1a0ab369f3c39bf8f53453ed0345c3d75d" prot="public" virt="virtual"><scope>KWin::X11Window</scope><name>windowType</name></member>
      <member refid="class_k_win_1_1_window_1a1f3c44eb1c5c7348d9bffd7f845108f2" prot="public" virt="non-virtual" ambiguityscope="KWin::Window::"><scope>KWin::X11Window</scope><name>windowType</name></member>
      <member refid="class_k_win_1_1_x11_window_1ad8cf73e489a340b776daf13b2633250eab4581e57fd3350dff9a6cf4122d48f40" prot="private" virt="non-virtual"><scope>KWin::X11Window</scope><name>Withdrawn</name></member>
      <member refid="class_k_win_1_1_x11_window_1ac8f91f3f06cbfe41d1f61204c9aa6a39" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>wmClientLeader</name></member>
      <member refid="class_k_win_1_1_window_1a65fa8eaf5936ace6355431d739438a3e" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>wmClientMachine</name></member>
      <member refid="class_k_win_1_1_x11_window_1a02c63caa6bc293c149df845967c743a4" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>wmCommand</name></member>
      <member refid="class_k_win_1_1_x11_window_1aea04ef1d7bd98b427c4d3f4ac4f72322" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>wrapperId</name></member>
      <member refid="class_k_win_1_1_window_1a8ca7699b2ae5cef0dcf3755f55f68fb7" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>x</name></member>
      <member refid="class_k_win_1_1_window_1a5cb43b5eeee4248ce9d046be48ae6ef0" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>x</name></member>
      <member refid="class_k_win_1_1_x11_window_1a21436db429ad1b82c39b129b44a285ac" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>X11Window</name></member>
      <member refid="class_k_win_1_1_window_1a82df990348a6c4a0696ef5e1f8aea78d" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>y</name></member>
      <member refid="class_k_win_1_1_window_1ab8d602594babf2cfdd82463169fb8605" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>y</name></member>
      <member refid="class_k_win_1_1_window_1adb30fbdfb7094449cb1f97e177a22432" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>~Window</name></member>
      <member refid="class_k_win_1_1_x11_window_1a5d0eabdd975932fcc54937d3b763df02" prot="public" virt="non-virtual"><scope>KWin::X11Window</scope><name>~X11Window</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
