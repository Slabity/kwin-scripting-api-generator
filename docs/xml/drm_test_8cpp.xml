<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="drm_test_8cpp" kind="file" language="C++">
    <compoundname>drmTest.cpp</compoundname>
    <includes local="no">QSignalSpy</includes>
    <includes local="no">QSize</includes>
    <includes local="no">QTest</includes>
    <includes refid="mock__drm_8h" local="yes">mock_drm.h</includes>
    <includes refid="outputlayer_8h" local="yes">core/outputlayer.h</includes>
    <includes refid="session_8h" local="yes">core/session.h</includes>
    <includes refid="drm__backend_8h" local="yes">drm_backend.h</includes>
    <includes refid="drm__connector_8h" local="yes">drm_connector.h</includes>
    <includes refid="drm__crtc_8h" local="yes">drm_crtc.h</includes>
    <includes refid="drm__egl__backend_8h" local="yes">drm_egl_backend.h</includes>
    <includes refid="drm__gpu_8h" local="yes">drm_gpu.h</includes>
    <includes refid="drm__output_8h" local="yes">drm_output.h</includes>
    <includes refid="drm__pipeline_8h" local="yes">drm_pipeline.h</includes>
    <includes refid="drm__plane_8h" local="yes">drm_plane.h</includes>
    <includes refid="drm__pointer_8h" local="yes">drm_pointer.h</includes>
    <includes refid="qpainterbackend_8h" local="yes">platformsupport/scenes/qpainter/qpainterbackend.h</includes>
    <includes local="no">drm_fourcc.h</includes>
    <includes local="no">fcntl.h</includes>
    <includes local="no">sys/utsname.h</includes>
    <includes local="yes">drmTest.moc</includes>
    <incdepgraph>
      <node id="1">
        <label>kwin/autotests/drm/drmTest.cpp</label>
        <link refid="drm_test_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>mock_drm.h</label>
        <link refid="mock__drm_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="105">
        <label>drm_abstract_output.h</label>
        <link refid="drm__abstract__output_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>drm_backend.h</label>
        <link refid="drm__backend_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>drm_blob.h</label>
        <link refid="drm__blob_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>drm_buffer.h</label>
        <link refid="drm__buffer_8h"/>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>drm_colorop.h</label>
        <link refid="drm__colorop_8h"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>drm_connector.h</label>
        <link refid="drm__connector_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>drm_crtc.h</label>
        <link refid="drm__crtc_8h"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>drm_egl_backend.h</label>
        <link refid="drm__egl__backend_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>drm_gpu.h</label>
        <link refid="drm__gpu_8h"/>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>drm_logging.h</label>
        <link refid="drm__logging_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>drm_object.h</label>
        <link refid="drm__object_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="104">
        <label>drm_output.h</label>
        <link refid="drm__output_8h"/>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>drm_pipeline.h</label>
        <link refid="drm__pipeline_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>drm_plane.h</label>
        <link refid="drm__plane_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>drm_pointer.h</label>
        <link refid="drm__pointer_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>drm_property.h</label>
        <link refid="drm__property_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>drm_render_backend.h</label>
        <link refid="drm__render__backend_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>colorlut3d.h</label>
        <link refid="colorlut3d_8h"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>core/colorpipeline.h</label>
        <link refid="colorpipeline_8h"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>core/colorspace.h</label>
        <link refid="colorspace_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>colortransformation.h</label>
        <link refid="colortransformation_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>core/drmdevice.h</label>
        <link refid="drmdevice_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>core/graphicsbuffer.h</label>
        <link refid="graphicsbuffer_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>graphicsbufferallocator.h</label>
        <link refid="graphicsbufferallocator_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>core/output.h</label>
        <link refid="core_2output_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>core/outputbackend.h</label>
        <link refid="outputbackend_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>core/outputlayer.h</label>
        <link refid="outputlayer_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>core/renderbackend.h</label>
        <link refid="renderbackend_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>renderjournal.h</label>
        <link refid="renderjournal_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>renderloop.h</label>
        <link refid="renderloop_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>core/renderloop_p.h</label>
        <link refid="renderloop__p_8h"/>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>core/rendertarget.h</label>
        <link refid="rendertarget_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>core/session.h</label>
        <link refid="session_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>effect/globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>opengl/eglcontext.h</label>
        <link refid="eglcontext_8h"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>opengl/egldisplay.h</label>
        <link refid="egldisplay_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>opengl/glframebuffer.h</label>
        <link refid="glframebuffer_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>opengl/glshader.h</label>
        <link refid="glshader_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>opengl/glshadermanager.h</label>
        <link refid="glshadermanager_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>opengl/gltexture.h</label>
        <link refid="gltexture_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>opengl/glutils.h</label>
        <link refid="glutils_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>opengl/glvertexbuffer.h</label>
        <link refid="glvertexbuffer_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>platformsupport/scenes/opengl/abstract_egl_backend.h</label>
        <link refid="abstract__egl__backend_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>platformsupport/scenes/opengl/openglbackend.h</label>
        <link refid="openglbackend_8h"/>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="106">
        <label>platformsupport/scenes/qpainter/qpainterbackend.h</label>
        <link refid="qpainterbackend_8h"/>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>utils/edid.h</label>
        <link refid="edid_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>utils/filedescriptor.h</label>
        <link refid="filedescriptor_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>utils/version.h</label>
        <link refid="version_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>wayland/linuxdmabufv1clientbuffer.h</label>
        <link refid="linuxdmabufv1clientbuffer_8h"/>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>QByteArray</label>
      </node>
      <node id="75">
        <label>QColor</label>
      </node>
      <node id="25">
        <label>QCoreApplication</label>
      </node>
      <node id="32">
        <label>QDebug</label>
      </node>
      <node id="69">
        <label>QExplicitlySharedDataPointer</label>
      </node>
      <node id="79">
        <label>QFlags</label>
      </node>
      <node id="86">
        <label>QHash</label>
      </node>
      <node id="26">
        <label>QImage</label>
      </node>
      <node id="8">
        <label>QList</label>
      </node>
      <node id="52">
        <label>QLoggingCategory</label>
      </node>
      <node id="9">
        <label>QMap</label>
      </node>
      <node id="76">
        <label>QMatrix3x3</label>
      </node>
      <node id="18">
        <label>QMatrix4x4</label>
      </node>
      <node id="29">
        <label>QObject</label>
      </node>
      <node id="27">
        <label>QPoint</label>
      </node>
      <node id="34">
        <label>QPointer</label>
      </node>
      <node id="10">
        <label>QRect</label>
      </node>
      <node id="35">
        <label>QRegion</label>
      </node>
      <node id="92">
        <label>QSet</label>
      </node>
      <node id="2">
        <label>QSignalSpy</label>
      </node>
      <node id="3">
        <label>QSize</label>
      </node>
      <node id="44">
        <label>QSocketNotifier</label>
      </node>
      <node id="72">
        <label>QStack</label>
      </node>
      <node id="39">
        <label>QString</label>
      </node>
      <node id="4">
        <label>QTest</label>
      </node>
      <node id="101">
        <label>QTimer</label>
      </node>
      <node id="33">
        <label>QUuid</label>
      </node>
      <node id="28">
        <label>QVariant</label>
      </node>
      <node id="57">
        <label>QVector</label>
      </node>
      <node id="19">
        <label>QVector2D</label>
      </node>
      <node id="77">
        <label>QVector3D</label>
      </node>
      <node id="36">
        <label>chrono</label>
      </node>
      <node id="24">
        <label>config-kwin.h</label>
      </node>
      <node id="60">
        <label>drm.h</label>
      </node>
      <node id="110">
        <label>drmTest.moc</label>
      </node>
      <node id="107">
        <label>drm_fourcc.h</label>
      </node>
      <node id="43">
        <label>epoxy/egl.h</label>
      </node>
      <node id="70">
        <label>epoxy/gl.h</label>
      </node>
      <node id="108">
        <label>fcntl.h</label>
      </node>
      <node id="102">
        <label>fstream</label>
      </node>
      <node id="83">
        <label>functional</label>
      </node>
      <node id="20">
        <label>kwin_export.h</label>
      </node>
      <node id="80">
        <label>map</label>
      </node>
      <node id="11">
        <label>memory</label>
      </node>
      <node id="12">
        <label>mutex</label>
      </node>
      <node id="17">
        <label>optional</label>
      </node>
      <node id="103">
        <label>qobject.h</label>
      </node>
      <node id="64">
        <label>qobjectdefs.h</label>
      </node>
      <node id="82">
        <label>ranges</label>
      </node>
      <node id="61">
        <label>span</label>
      </node>
      <node id="47">
        <label>stdint.h</label>
      </node>
      <node id="40">
        <label>sys/types.h</label>
      </node>
      <node id="109">
        <label>sys/utsname.h</label>
      </node>
      <node id="59">
        <label>tuple</label>
      </node>
      <node id="91">
        <label>utility</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
      <node id="93">
        <label>wayland-server.h</label>
      </node>
      <node id="6">
        <label>xf86drm.h</label>
      </node>
      <node id="7">
        <label>xf86drmMode.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_drm_test" prot="public">DrmTest</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="drm_test_8cpp_1a6e6035bb393860b32b6862bde7f919dd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_mock_gpu" kindref="compound">MockGpu</ref> &gt;</type>
        <definition>static std::unique_ptr&lt; MockGpu &gt; findPrimaryDevice</definition>
        <argsstring>(int crtcCount)</argsstring>
        <name>findPrimaryDevice</name>
        <param>
          <type>int</type>
          <declname>crtcCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/drmTest.cpp" line="35" column="24" bodyfile="kwin/autotests/drm/drmTest.cpp" bodystart="35" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="drm_test_8cpp_1ab3828ef7e3e78acca71f04ed9a1f5200" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void verifyCleanup</definition>
        <argsstring>(MockGpu *mockGpu)</argsstring>
        <name>verifyCleanup</name>
        <param>
          <type><ref refid="class_mock_gpu" kindref="compound">MockGpu</ref> *</type>
          <declname>mockGpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/drm/drmTest.cpp" line="77" column="13" bodyfile="kwin/autotests/drm/drmTest.cpp" bodystart="77" bodyend="88"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>KWin<sp/>-<sp/>the<sp/>KDE<sp/>window<sp/>manager</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>KDE<sp/>project.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2022<sp/>Xaver<sp/>Hugl<sp/>&lt;xaver.hugl@gmail.com&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QSignalSpy&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QSize&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QTest&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mock__drm_8h" kindref="compound">mock_drm.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="outputlayer_8h" kindref="compound">core/outputlayer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="session_8h" kindref="compound">core/session.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="drm__backend_8h" kindref="compound">drm_backend.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="drm__connector_8h" kindref="compound">drm_connector.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="drm__crtc_8h" kindref="compound">drm_crtc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="drm__egl__backend_8h" kindref="compound">drm_egl_backend.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="drm__gpu_8h" kindref="compound">drm_gpu.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="drm__output_8h" kindref="compound">drm_output.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="drm__pipeline_8h" kindref="compound">drm_pipeline.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="drm__plane_8h" kindref="compound">drm_plane.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="drm__pointer_8h" kindref="compound">drm_pointer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="qpainterbackend_8h" kindref="compound">platformsupport/scenes/qpainter/qpainterbackend.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drm_fourcc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/utsname.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win" kindref="compound">KWin</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;MockGpu&gt;<sp/>findPrimaryDevice(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>crtcCount)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deviceCount<sp/>=<sp/>drmGetDevices2(0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(deviceCount<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;drmDevice<sp/>*&gt;<sp/>devices(deviceCount);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(drmGetDevices2(0,<sp/>devices.data(),<sp/>devices.size())<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>deviceCleanup<sp/>=<sp/>qScopeGuard([&amp;devices]()<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drmFreeDevices(devices.data(),<sp/>devices.size());</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(drmDevice<sp/>*device<sp/>:<sp/>std::as_const(devices))<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;available_nodes<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>DRM_NODE_PRIMARY))<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd<sp/>=<sp/>open(device-&gt;nodes[DRM_NODE_PRIMARY],<sp/>O_RDWR<sp/>|<sp/>O_CLOEXEC);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;MockGpu&gt;(fd,<sp/>device-&gt;nodes[DRM_NODE_PRIMARY],<sp/>crtcCount);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="class_drm_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_drm_test" kindref="compound">DrmTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QObject</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Q_SLOTS:</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testAmsDetection();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testOutputDetection();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testZeroModesHandling();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testModeGeneration_data();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testModeGeneration();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testConnectorLifetime();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testModeset_data();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testModeset();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testVrrChange();</highlight></codeline>
<codeline lineno="75"><highlight class="normal">};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>verifyCleanup(<ref refid="class_mock_gpu" kindref="compound">MockGpu</ref><sp/>*mockGpu)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(mockGpu-&gt;<ref refid="class_mock_gpu_1a4db44c183cfe6b86c2aba593ba8abac1" kindref="member">drmConnectors</ref>.isEmpty());</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(mockGpu-&gt;<ref refid="class_mock_gpu_1af35965dad6c5e6b91ff77c5f1d3be3a2" kindref="member">drmEncoders</ref>.isEmpty());</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(mockGpu-&gt;<ref refid="class_mock_gpu_1adc76c685139cc925cb73de9f4edaa4f7" kindref="member">drmCrtcs</ref>.isEmpty());</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(mockGpu-&gt;<ref refid="class_mock_gpu_1a46189b8fffdf443ba058cb50a37ff89e" kindref="member">drmPlanes</ref>.isEmpty());</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(mockGpu-&gt;<ref refid="class_mock_gpu_1a94bba5871c7c9376e5c6819750f9bb57" kindref="member">drmPlaneRes</ref>.isEmpty());</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(mockGpu-&gt;<ref refid="class_mock_gpu_1a48fcd9ef84c479bc90d52e7046ed4b8d" kindref="member">fbs</ref>.isEmpty());</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(mockGpu-&gt;<ref refid="class_mock_gpu_1a63c82d673f4f569627a8d177a7662437" kindref="member">drmProps</ref>.isEmpty());</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(mockGpu-&gt;<ref refid="class_mock_gpu_1a7c10720c29580871293ad95cc54b4bf2" kindref="member">drmObjectProperties</ref>.isEmpty());</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(mockGpu-&gt;<ref refid="class_mock_gpu_1a8d3a1ef4d55a1235ebbab526a26b99d7" kindref="member">drmPropertyBlobs</ref>.isEmpty());</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrmTest::testAmsDetection()</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>session<sp/>=<sp/><ref refid="class_k_win_1_1_session_1afd0186542d0af406ba5125e61959d4f9" kindref="member">Session::create</ref>(Session::Type::Noop);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>backend<sp/>=<sp/>std::make_unique&lt;DrmBackend&gt;(session.get());</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gpu<sp/>without<sp/>planes<sp/>should<sp/>use<sp/>legacy<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mockGpu<sp/>=<sp/>findPrimaryDevice(0);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>gpu<sp/>=<sp/>std::make_unique&lt;DrmGpu&gt;(backend.get(),<sp/>mockGpu-&gt;fd,<sp/><ref refid="class_k_win_1_1_drm_device_1a355652b4cd9ca9f9bf15e22d88b53345" kindref="member">DrmDevice::open</ref>(mockGpu-&gt;devNode));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(!gpu-&gt;atomicModeSetting());</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gpu<sp/>with<sp/>planes<sp/>should<sp/>use<sp/>AMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mockGpu<sp/>=<sp/>findPrimaryDevice(0);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mockGpu-&gt;planes<sp/>&lt;&lt;<sp/>std::make_shared&lt;MockPlane&gt;(mockGpu.get(),<sp/><ref refid="mock__drm_8h_1abb8069f242e006c559a71f47984115bda074de7e7c226d5c60f8af14c20725352" kindref="member">PlaneType::Primary</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>gpu<sp/>=<sp/>std::make_unique&lt;DrmGpu&gt;(backend.get(),<sp/>mockGpu-&gt;fd,<sp/><ref refid="class_k_win_1_1_drm_device_1a355652b4cd9ca9f9bf15e22d88b53345" kindref="member">DrmDevice::open</ref>(mockGpu-&gt;devNode));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpu<sp/>=<sp/>std::make_unique&lt;DrmGpu&gt;(backend.get(),<sp/>mockGpu-&gt;fd,<sp/><ref refid="class_k_win_1_1_drm_device_1a355652b4cd9ca9f9bf15e22d88b53345" kindref="member">DrmDevice::open</ref>(mockGpu-&gt;devNode));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(gpu-&gt;atomicModeSetting());</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>not<sp/>if<sp/>the<sp/>kernel<sp/>doesn&apos;t<sp/>allow<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mockGpu<sp/>=<sp/>findPrimaryDevice(0);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mockGpu-&gt;deviceCaps[<ref refid="mock__drm_8h_1a999115459f7a1b8d0e2088aab86bdf92" kindref="member">MOCKDRM_DEVICE_CAP_ATOMIC</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>gpu<sp/>=<sp/>std::make_unique&lt;DrmGpu&gt;(backend.get(),<sp/>mockGpu-&gt;fd,<sp/><ref refid="class_k_win_1_1_drm_device_1a355652b4cd9ca9f9bf15e22d88b53345" kindref="member">DrmDevice::open</ref>(mockGpu-&gt;devNode));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(!gpu-&gt;atomicModeSetting());</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpu.reset();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verifyCleanup(mockGpu.get());</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrmTest::testOutputDetection()</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mockGpu<sp/>=<sp/>findPrimaryDevice(5);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>one<sp/>=<sp/>std::make_shared&lt;MockConnector&gt;(mockGpu.get());</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>two<sp/>=<sp/>std::make_shared&lt;MockConnector&gt;(mockGpu.get());</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vr<sp/>=<sp/>std::make_shared&lt;MockConnector&gt;(mockGpu.get(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>mockGpu-&gt;connectors.push_back(one);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>mockGpu-&gt;connectors.push_back(two);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>mockGpu-&gt;connectors.push_back(vr);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>session<sp/>=<sp/><ref refid="class_k_win_1_1_session_1afd0186542d0af406ba5125e61959d4f9" kindref="member">Session::create</ref>(Session::Type::Noop);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>backend<sp/>=<sp/>std::make_unique&lt;DrmBackend&gt;(session.get());</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>renderBackend<sp/>=<sp/>backend-&gt;createQPainterBackend();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>gpu<sp/>=<sp/>std::make_unique&lt;DrmGpu&gt;(backend.get(),<sp/>mockGpu-&gt;fd,<sp/><ref refid="class_k_win_1_1_drm_device_1a355652b4cd9ca9f9bf15e22d88b53345" kindref="member">DrmDevice::open</ref>(mockGpu-&gt;devNode));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(gpu-&gt;updateOutputs());</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3<sp/>outputs<sp/>should<sp/>be<sp/>detected,<sp/>one<sp/>of<sp/>them<sp/>non-desktop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outputs<sp/>=<sp/>gpu-&gt;drmOutputs();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(outputs.size(),<sp/>3);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vrOutput<sp/>=<sp/>std::find_if(outputs.begin(),<sp/>outputs.end(),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;output)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>output-&gt;isNonDesktop();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(vrOutput<sp/>!=<sp/>outputs.end());</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DrmOutput<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*vrOutput)-&gt;connector()-&gt;id()<sp/>==<sp/>vr-&gt;id);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>hotunplugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>mockGpu-&gt;connectors.removeOne(one);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(gpu-&gt;updateOutputs());</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(gpu-&gt;drmOutputs().size(),<sp/>2);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>hotplugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>mockGpu-&gt;connectors.push_back(one);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(gpu-&gt;updateOutputs());</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(gpu-&gt;drmOutputs().size(),<sp/>3);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>connector<sp/>state<sp/>changing<sp/>to<sp/>disconnected<sp/>should<sp/>count<sp/>as<sp/>a<sp/>hotunplug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>one-&gt;connection<sp/>=<sp/>DRM_MODE_DISCONNECTED;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(gpu-&gt;updateOutputs());</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(gpu-&gt;drmOutputs().size(),<sp/>2);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>crash<sp/>if<sp/>all<sp/>connectors<sp/>are<sp/>disconnected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>two-&gt;connection<sp/>=<sp/>DRM_MODE_DISCONNECTED;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>vr-&gt;connection<sp/>=<sp/>DRM_MODE_DISCONNECTED;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(gpu-&gt;updateOutputs());</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(gpu-&gt;drmOutputs().empty());</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>gpu.reset();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>verifyCleanup(mockGpu.get());</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrmTest::testZeroModesHandling()</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mockGpu<sp/>=<sp/>findPrimaryDevice(5);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>conn<sp/>=<sp/>std::make_shared&lt;MockConnector&gt;(mockGpu.get());</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>mockGpu-&gt;connectors.push_back(conn);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>session<sp/>=<sp/><ref refid="class_k_win_1_1_session_1afd0186542d0af406ba5125e61959d4f9" kindref="member">Session::create</ref>(Session::Type::Noop);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>backend<sp/>=<sp/>std::make_unique&lt;DrmBackend&gt;(session.get());</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>renderBackend<sp/>=<sp/>backend-&gt;createQPainterBackend();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>gpu<sp/>=<sp/>std::make_unique&lt;DrmGpu&gt;(backend.get(),<sp/>mockGpu-&gt;fd,<sp/><ref refid="class_k_win_1_1_drm_device_1a355652b4cd9ca9f9bf15e22d88b53345" kindref="member">DrmDevice::open</ref>(mockGpu-&gt;devNode));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>connector<sp/>with<sp/>zero<sp/>modes<sp/>should<sp/>be<sp/>ignored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>conn-&gt;modes.clear();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(gpu-&gt;updateOutputs());</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(gpu-&gt;drmOutputs().empty());</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>once<sp/>it<sp/>has<sp/>modes,<sp/>it<sp/>should<sp/>be<sp/>detected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>conn-&gt;addMode(1920,<sp/>1080,<sp/>60);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(gpu-&gt;updateOutputs());</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(gpu-&gt;drmOutputs().size(),<sp/>1);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>an<sp/>update<sp/>says<sp/>it<sp/>has<sp/>no<sp/>modes<sp/>anymore<sp/>but<sp/>it&apos;s<sp/>still<sp/>connected,<sp/>ignore<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>conn-&gt;modes.clear();</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(gpu-&gt;updateOutputs());</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(gpu-&gt;drmOutputs().size(),<sp/>1);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!gpu-&gt;drmOutputs().constFirst()-&gt;modes().empty());</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>gpu.reset();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>verifyCleanup(mockGpu.get());</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrmTest::testModeGeneration_data()</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;QSize&gt;(</highlight><highlight class="stringliteral">&quot;nativeMode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;QList&lt;QSize&gt;&gt;(</highlight><highlight class="stringliteral">&quot;expectedModes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;2160p&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>QSize(3840,<sp/>2160)<sp/>&lt;&lt;<sp/>QList&lt;QSize&gt;{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1600,<sp/>1200),</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1280,<sp/>1024),</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1024,<sp/>768),</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(2560,<sp/>1600),</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1920,<sp/>1200),</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1280,<sp/>800),</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(3840,<sp/>2160),</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(3200,<sp/>1800),</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(2880,<sp/>1620),</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(2560,<sp/>1440),</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1920,<sp/>1080),</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1600,<sp/>900),</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1368,<sp/>768),</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1280,<sp/>720),</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;1440p&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>QSize(2560,<sp/>1440)<sp/>&lt;&lt;<sp/>QList&lt;QSize&gt;{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1600,<sp/>1200),</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1280,<sp/>1024),</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1024,<sp/>768),</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1920,<sp/>1200),</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1280,<sp/>800),</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(2560,<sp/>1440),</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1920,<sp/>1080),</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1600,<sp/>900),</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1368,<sp/>768),</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1280,<sp/>720),</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;1080p&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>QSize(1920,<sp/>1080)<sp/>&lt;&lt;<sp/>QList&lt;QSize&gt;{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1280,<sp/>1024),</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1024,<sp/>768),</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1280,<sp/>800),</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1920,<sp/>1080),</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1600,<sp/>900),</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1368,<sp/>768),</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1280,<sp/>720),</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;2160p<sp/>21:9&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>QSize(5120,<sp/>2160)<sp/>&lt;&lt;<sp/>QList&lt;QSize&gt;{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(5120,<sp/>2160),</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1600,<sp/>1200),</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1280,<sp/>1024),</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1024,<sp/>768),</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(2560,<sp/>1600),</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1920,<sp/>1200),</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1280,<sp/>800),</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(3840,<sp/>2160),</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(3200,<sp/>1800),</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(2880,<sp/>1620),</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(2560,<sp/>1440),</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1920,<sp/>1080),</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1600,<sp/>900),</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1368,<sp/>768),</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1280,<sp/>720),</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;1440p<sp/>21:9&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>QSize(3440,<sp/>1440)<sp/>&lt;&lt;<sp/>QList&lt;QSize&gt;{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(3440,<sp/>1440),</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1600,<sp/>1200),</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1280,<sp/>1024),</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1024,<sp/>768),</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1920,<sp/>1200),</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1280,<sp/>800),</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(2560,<sp/>1440),</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1920,<sp/>1080),</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1600,<sp/>900),</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1368,<sp/>768),</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1280,<sp/>720),</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;1080p<sp/>21:9&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>QSize(2560,<sp/>1080)<sp/>&lt;&lt;<sp/>QList&lt;QSize&gt;{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(2560,<sp/>1080),</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1280,<sp/>1024),</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1024,<sp/>768),</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1280,<sp/>800),</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1920,<sp/>1080),</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1600,<sp/>900),</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1368,<sp/>768),</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSize(1280,<sp/>720),</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrmTest::testModeGeneration()</highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mockGpu<sp/>=<sp/>findPrimaryDevice(5);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>conn<sp/>=<sp/>std::make_shared&lt;MockConnector&gt;(mockGpu.get());</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>mockGpu-&gt;connectors.push_back(conn);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>session<sp/>=<sp/><ref refid="class_k_win_1_1_session_1afd0186542d0af406ba5125e61959d4f9" kindref="member">Session::create</ref>(Session::Type::Noop);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>backend<sp/>=<sp/>std::make_unique&lt;DrmBackend&gt;(session.get());</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>renderBackend<sp/>=<sp/>backend-&gt;createQPainterBackend();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>gpu<sp/>=<sp/>std::make_unique&lt;DrmGpu&gt;(backend.get(),<sp/>mockGpu-&gt;fd,<sp/><ref refid="class_k_win_1_1_drm_device_1a355652b4cd9ca9f9bf15e22d88b53345" kindref="member">DrmDevice::open</ref>(mockGpu-&gt;devNode));</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(QSize,<sp/>nativeMode);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(QList&lt;QSize&gt;,<sp/>expectedModes);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>conn-&gt;modes.clear();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>conn-&gt;addMode(nativeMode.width(),<sp/>nativeMode.height(),<sp/>60);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(gpu-&gt;updateOutputs());</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(gpu-&gt;drmOutputs().size(),<sp/>1);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>mode<sp/>generation<sp/>without<sp/>the<sp/>scaling<sp/>property</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(gpu-&gt;drmOutputs().front()-&gt;modes().size(),<sp/>1);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>mockGpu-&gt;connectors.removeAll(conn);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(gpu-&gt;updateOutputs());</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>conn-&gt;props.emplace_back(conn.get(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;scaling<sp/>mode&quot;</highlight><highlight class="normal">),<sp/>0,<sp/>DRM_MODE_PROP_ENUM,<sp/>QList&lt;QByteArray&gt;{</highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Full&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Center&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Full<sp/>aspect&quot;</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>mockGpu-&gt;connectors.push_back(conn);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(gpu-&gt;updateOutputs());</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>DrmOutput<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>output<sp/>=<sp/>gpu-&gt;drmOutputs().front();</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(output-&gt;<ref refid="class_k_win_1_1_output_1a31492dff27d452f0b062cfcb85de835e" kindref="member">modes</ref>().size(),<sp/>expectedModes.size());</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;mode<sp/>:<sp/>output-&gt;<ref refid="class_k_win_1_1_output_1a31492dff27d452f0b062cfcb85de835e" kindref="member">modes</ref>())<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(expectedModes.contains(mode-&gt;size()));</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(mode-&gt;size().width()<sp/>&lt;=<sp/>nativeMode.width());</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(mode-&gt;size().height()<sp/>&lt;=<sp/>nativeMode.height());</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY(mode-&gt;refreshRate()<sp/>&lt;=<sp/>60000);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>gpu.reset();</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>verifyCleanup(mockGpu.get());</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrmTest::testConnectorLifetime()</highlight></codeline>
<codeline lineno="333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>crash<sp/>if<sp/>output<sp/>lifetime<sp/>is<sp/>extended<sp/>beyond<sp/>the<sp/>connector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mockGpu<sp/>=<sp/>findPrimaryDevice(5);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>conn<sp/>=<sp/>std::make_shared&lt;MockConnector&gt;(mockGpu.get());</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>mockGpu-&gt;connectors.push_back(conn);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>session<sp/>=<sp/><ref refid="class_k_win_1_1_session_1afd0186542d0af406ba5125e61959d4f9" kindref="member">Session::create</ref>(Session::Type::Noop);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>backend<sp/>=<sp/>std::make_unique&lt;DrmBackend&gt;(session.get());</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>renderBackend<sp/>=<sp/>backend-&gt;createQPainterBackend();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>gpu<sp/>=<sp/>std::make_unique&lt;DrmGpu&gt;(backend.get(),<sp/>mockGpu-&gt;fd,<sp/><ref refid="class_k_win_1_1_drm_device_1a355652b4cd9ca9f9bf15e22d88b53345" kindref="member">DrmDevice::open</ref>(mockGpu-&gt;devNode));</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(gpu-&gt;updateOutputs());</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(gpu-&gt;drmOutputs().size(),<sp/>1);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>DrmOutput<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>output<sp/>=<sp/>gpu-&gt;drmOutputs().front();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>output-&gt;<ref refid="class_k_win_1_1_output_1a898e164f3e5af7e88855a563410646f3" kindref="member">ref</ref>();</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>mockGpu-&gt;connectors.clear();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(gpu-&gt;updateOutputs());</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>output-&gt;<ref refid="class_k_win_1_1_output_1a036f0372f9a864df2bbb535b02b9a4c5" kindref="member">unref</ref>();</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>gpu.reset();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>verifyCleanup(mockGpu.get());</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrmTest::testModeset_data()</highlight></codeline>
<codeline lineno="360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;int&gt;(</highlight><highlight class="stringliteral">&quot;AMS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>to<sp/>uncomment<sp/>this,<sp/>implement<sp/>page<sp/>flip<sp/>callbacks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>QTest::newRow(&quot;disabled&quot;)<sp/>&lt;&lt;<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;enabled&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrmTest::testModeset()</highlight></codeline>
<codeline lineno="368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>reenable,<sp/>make<sp/>this<sp/>part<sp/>of<sp/>an<sp/>integration<sp/>test,<sp/>so<sp/>that<sp/>kwinApp()<sp/>isn&apos;t<sp/>nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>QSKIP(</highlight><highlight class="stringliteral">&quot;this<sp/>test<sp/>needs<sp/>output<sp/>pipelines<sp/>to<sp/>be<sp/>enabled<sp/>by<sp/>default,<sp/>which<sp/>is<sp/>no<sp/>longer<sp/>the<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>if<sp/>doing<sp/>a<sp/>modeset<sp/>would<sp/>succeed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>AMS);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mockGpu<sp/>=<sp/>findPrimaryDevice(5);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>mockGpu-&gt;deviceCaps[<ref refid="mock__drm_8h_1a999115459f7a1b8d0e2088aab86bdf92" kindref="member">MOCKDRM_DEVICE_CAP_ATOMIC</ref>]<sp/>=<sp/>AMS;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>conn<sp/>=<sp/>std::make_shared&lt;MockConnector&gt;(mockGpu.get());</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>mockGpu-&gt;connectors.push_back(conn);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>session<sp/>=<sp/><ref refid="class_k_win_1_1_session_1afd0186542d0af406ba5125e61959d4f9" kindref="member">Session::create</ref>(Session::Type::Noop);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>backend<sp/>=<sp/>std::make_unique&lt;DrmBackend&gt;(session.get());</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>renderBackend<sp/>=<sp/>backend-&gt;createQPainterBackend();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>gpu<sp/>=<sp/>std::make_unique&lt;DrmGpu&gt;(backend.get(),<sp/>mockGpu-&gt;fd,<sp/><ref refid="class_k_win_1_1_drm_device_1a355652b4cd9ca9f9bf15e22d88b53345" kindref="member">DrmDevice::open</ref>(mockGpu-&gt;devNode));</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(gpu-&gt;updateOutputs());</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(gpu-&gt;drmOutputs().size(),<sp/>1);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>output<sp/>=<sp/>gpu-&gt;drmOutputs().front();</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layer<sp/>=<sp/>renderBackend-&gt;<ref refid="class_k_win_1_1_drm_output_1a2178f29dcb0317e91115d312c515a5a5" kindref="member">primaryLayer</ref>(output);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>layer-&gt;<ref refid="class_k_win_1_1_output_layer_1a0c35fab74670dc55d6778c0ba83f65b3" kindref="member">beginFrame</ref>();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>output-&gt;<ref refid="class_k_win_1_1_drm_abstract_output_1ae92f4b12869021b84a68eb373f75922e" kindref="member">renderLoop</ref>()-&gt;<ref refid="class_k_win_1_1_render_loop_1a38275bc527efdb56632fc03e059fa280" kindref="member">prepareNewFrame</ref>();</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>frame<sp/>=<sp/>std::make_shared&lt;OutputFrame&gt;(output-&gt;<ref refid="class_k_win_1_1_drm_abstract_output_1ae92f4b12869021b84a68eb373f75922e" kindref="member">renderLoop</ref>(),<sp/>std::chrono::nanoseconds(1&apos;000&apos;000&apos;000&apos;000<sp/>/<sp/>output-&gt;<ref refid="class_k_win_1_1_output_1a3e1d2698295c7897ca32593d1022449d" kindref="member">refreshRate</ref>()));</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>layer-&gt;endFrame(<ref refid="namespace_k_win_1a0655524c1f1ba8dbb2cf16a1e4b9bb97" kindref="member">infiniteRegion</ref>(),<sp/><ref refid="namespace_k_win_1a0655524c1f1ba8dbb2cf16a1e4b9bb97" kindref="member">infiniteRegion</ref>(),<sp/>frame.get());</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(output-&gt;<ref refid="class_k_win_1_1_drm_output_1a29e4f0c3251b4bbc3f84584c4172e483" kindref="member">present</ref>(frame));</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>gpu.reset();</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>verifyCleanup(mockGpu.get());</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrmTest::testVrrChange()</highlight></codeline>
<codeline lineno="399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mockGpu<sp/>=<sp/>findPrimaryDevice(5);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>mockGpu-&gt;deviceCaps[<ref refid="mock__drm_8h_1a999115459f7a1b8d0e2088aab86bdf92" kindref="member">MOCKDRM_DEVICE_CAP_ATOMIC</ref>]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>conn<sp/>=<sp/>std::make_shared&lt;MockConnector&gt;(mockGpu.get());</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>conn-&gt;setVrrCapable(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>mockGpu-&gt;connectors.push_back(conn);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>session<sp/>=<sp/><ref refid="class_k_win_1_1_session_1afd0186542d0af406ba5125e61959d4f9" kindref="member">Session::create</ref>(Session::Type::Noop);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>backend<sp/>=<sp/>std::make_unique&lt;DrmBackend&gt;(session.get());</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>renderBackend<sp/>=<sp/>backend-&gt;createQPainterBackend();</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>gpu<sp/>=<sp/>std::make_unique&lt;DrmGpu&gt;(backend.get(),<sp/>mockGpu-&gt;fd,<sp/><ref refid="class_k_win_1_1_drm_device_1a355652b4cd9ca9f9bf15e22d88b53345" kindref="member">DrmDevice::open</ref>(mockGpu-&gt;devNode));</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(gpu-&gt;updateOutputs());</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>output<sp/>=<sp/>gpu-&gt;drmOutputs().front();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!(output-&gt;<ref refid="class_k_win_1_1_output_1ae3afdc2a498853b6f295ea29b53b418c" kindref="member">capabilities</ref>()<sp/>&amp;<sp/>Output::Capability::Vrr));</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>capsChanged(output,<sp/>&amp;<ref refid="class_k_win_1_1_output_1a77b1653dbbbf75f5dca80ec649eb0929" kindref="member">Output::capabilitiesChanged</ref>);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>conn-&gt;setVrrCapable(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(gpu-&gt;updateOutputs());</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(gpu-&gt;drmOutputs().front(),<sp/>output);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(capsChanged.count(),<sp/>1);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(output-&gt;<ref refid="class_k_win_1_1_output_1ae3afdc2a498853b6f295ea29b53b418c" kindref="member">capabilities</ref>()<sp/>&amp;<sp/>Output::Capability::Vrr);</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal">QTEST_GUILESS_MAIN(<ref refid="class_drm_test" kindref="compound">DrmTest</ref>)</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;drmTest.moc&quot;</highlight></codeline>
    </programlisting>
    <location file="kwin/autotests/drm/drmTest.cpp"/>
  </compounddef>
</doxygen>
