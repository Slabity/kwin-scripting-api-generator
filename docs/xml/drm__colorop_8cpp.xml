<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="drm__colorop_8cpp" kind="file" language="C++">
    <compoundname>drm_colorop.cpp</compoundname>
    <includes refid="drm__colorop_8h" local="yes">drm_colorop.h</includes>
    <includes refid="drm__blob_8h" local="yes">drm_blob.h</includes>
    <includes refid="drm__commit_8h" local="yes">drm_commit.h</includes>
    <includes refid="drm__object_8h" local="yes">drm_object.h</includes>
    <includes local="no">ranges</includes>
    <incdepgraph>
      <node id="18">
        <label>drm_blob.h</label>
        <link refid="drm__blob_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>kwin/src/backends/drm/drm_colorop.cpp</label>
        <link refid="drm__colorop_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>drm_colorop.h</label>
        <link refid="drm__colorop_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>drm_commit.h</label>
        <link refid="drm__commit_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>drm_logging.h</label>
        <link refid="drm__logging_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>drm_object.h</label>
        <link refid="drm__object_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>drm_pointer.h</label>
        <link refid="drm__pointer_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>drm_property.h</label>
        <link refid="drm__property_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>colorlut3d.h</label>
        <link refid="colorlut3d_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>core/colorpipeline.h</label>
        <link refid="colorpipeline_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>colorspace.h</label>
        <link refid="colorspace_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>colortransformation.h</label>
        <link refid="colortransformation_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>core/renderloop.h</label>
        <link refid="renderloop_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>effect/globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>QByteArray</label>
      </node>
      <node id="28">
        <label>QCoreApplication</label>
      </node>
      <node id="37">
        <label>QDebug</label>
      </node>
      <node id="21">
        <label>QHash</label>
      </node>
      <node id="29">
        <label>QImage</label>
      </node>
      <node id="40">
        <label>QList</label>
      </node>
      <node id="38">
        <label>QLoggingCategory</label>
      </node>
      <node id="41">
        <label>QMap</label>
      </node>
      <node id="10">
        <label>QMatrix4x4</label>
      </node>
      <node id="32">
        <label>QObject</label>
      </node>
      <node id="30">
        <label>QPoint</label>
      </node>
      <node id="31">
        <label>QVariant</label>
      </node>
      <node id="5">
        <label>QVector</label>
      </node>
      <node id="11">
        <label>QVector2D</label>
      </node>
      <node id="22">
        <label>chrono</label>
      </node>
      <node id="27">
        <label>config-kwin.h</label>
      </node>
      <node id="16">
        <label>drm.h</label>
      </node>
      <node id="7">
        <label>kwin_export.h</label>
      </node>
      <node id="6">
        <label>memory</label>
      </node>
      <node id="9">
        <label>optional</label>
      </node>
      <node id="43">
        <label>ranges</label>
      </node>
      <node id="17">
        <label>span</label>
      </node>
      <node id="13">
        <label>stdint.h</label>
      </node>
      <node id="14">
        <label>tuple</label>
      </node>
      <node id="23">
        <label>unordered_map</label>
      </node>
      <node id="24">
        <label>unordered_set</label>
      </node>
      <node id="15">
        <label>vector</label>
      </node>
      <node id="34">
        <label>xf86drm.h</label>
      </node>
      <node id="20">
        <label>xf86drmMode.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_k_win">KWin</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>KWin<sp/>-<sp/>the<sp/>KDE<sp/>window<sp/>manager</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>KDE<sp/>project.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2024<sp/>Xaver<sp/>Hugl<sp/>&lt;xaver.hugl@gmail.com&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="drm__colorop_8h" kindref="compound">drm_colorop.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="drm__blob_8h" kindref="compound">drm_blob.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="drm__commit_8h" kindref="compound">drm_commit.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="drm__object_8h" kindref="compound">drm_object.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ranges&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win" kindref="compound">KWin</ref></highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="class_k_win_1_1_drm_abstract_color_op_1a2d7e5219a9c3ff5b5b0701af4ec7854e" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_drm_abstract_color_op_1a2d7e5219a9c3ff5b5b0701af4ec7854e" kindref="member">DrmAbstractColorOp::DrmAbstractColorOp</ref>(<ref refid="class_k_win_1_1_drm_abstract_color_op_1a2d7e5219a9c3ff5b5b0701af4ec7854e" kindref="member">DrmAbstractColorOp</ref><sp/>*<ref refid="class_k_win_1_1_drm_abstract_color_op_1a4cd8bd0280bcd6e99f04d8fa50ff5939" kindref="member">next</ref>)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_drm_abstract_color_op_1a09b067c064103ad8c5746405f46869e4" kindref="member">m_next</ref>(<ref refid="class_k_win_1_1_drm_abstract_color_op_1a4cd8bd0280bcd6e99f04d8fa50ff5939" kindref="member">next</ref>)</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="class_k_win_1_1_drm_abstract_color_op_1a3c3aa5ac1749db7b66e65548940c56e2" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_drm_abstract_color_op_1a3c3aa5ac1749db7b66e65548940c56e2" kindref="member">DrmAbstractColorOp::~DrmAbstractColorOp</ref>()</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="class_k_win_1_1_drm_abstract_color_op_1a4cd8bd0280bcd6e99f04d8fa50ff5939" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_drm_abstract_color_op_1a2d7e5219a9c3ff5b5b0701af4ec7854e" kindref="member">DrmAbstractColorOp</ref><sp/>*<ref refid="class_k_win_1_1_drm_abstract_color_op_1a4cd8bd0280bcd6e99f04d8fa50ff5939" kindref="member">DrmAbstractColorOp::next</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="29"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_drm_abstract_color_op_1a09b067c064103ad8c5746405f46869e4" kindref="member">m_next</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="class_k_win_1_1_drm_abstract_color_op_1acce5fb17c83c6b523427c47446d2eeb6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_drm_abstract_color_op_1acce5fb17c83c6b523427c47446d2eeb6" kindref="member">DrmAbstractColorOp::matchPipeline</ref>(<ref refid="class_k_win_1_1_drm_atomic_commit" kindref="compound">DrmAtomicCommit</ref><sp/>*commit,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_pipeline" kindref="compound">ColorPipeline</ref><sp/>&amp;pipeline)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_k_win_1_1_drm_abstract_color_op_1ade396076e4796b2e53c871888af7e518" kindref="member">m_cachedPipeline</ref><sp/>&amp;&amp;<sp/>*<ref refid="class_k_win_1_1_drm_abstract_color_op_1ade396076e4796b2e53c871888af7e518" kindref="member">m_cachedPipeline</ref><sp/>==<sp/>pipeline)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commit-&gt;<ref refid="class_k_win_1_1_drm_atomic_commit_1a3e4293578ac95f2d6600a65116404f3e" kindref="member">merge</ref>(<ref refid="class_k_win_1_1_drm_abstract_color_op_1aafeee5068439b7c869e7018da266c573" kindref="member">m_cache</ref>.get());</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_drm_abstract_color_op_1a2d7e5219a9c3ff5b5b0701af4ec7854e" kindref="member">DrmAbstractColorOp</ref><sp/>*currentOp<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>needsLimitedRange<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_op" kindref="compound">ColorOp</ref><sp/>&amp;op)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>KMS<sp/>LUTs<sp/>have<sp/>an<sp/>input<sp/>and<sp/>output<sp/>range<sp/>of<sp/>[0,<sp/>1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::holds_alternative&lt;ColorTransferFunction&gt;(op.operation)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>std::holds_alternative&lt;InverseColorTransferFunction&gt;(op.operation);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first,<sp/>only<sp/>check<sp/>if<sp/>the<sp/>pipeline<sp/>can<sp/>be<sp/>programmed<sp/>in<sp/>the<sp/>first<sp/>place</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>calculate<sp/>LUTs<sp/>just<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>std::optional&lt;ColorOp&gt;<sp/>initialOp;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>valueScaling<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pipeline.<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.empty()<sp/>&amp;&amp;<sp/>needsLimitedRange(pipeline.<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.front())<sp/>&amp;&amp;<sp/>pipeline.<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.front().input.max<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valueScaling<sp/>=<sp/>1.0<sp/>/<sp/>pipeline.<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.front().input.max;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialOp<sp/>=<sp/><ref refid="class_k_win_1_1_color_op" kindref="compound">ColorOp</ref>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.input<sp/>=<sp/>pipeline.<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.front().input,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.operation<sp/>=<sp/><ref refid="class_k_win_1_1_color_multiplier" kindref="compound">ColorMultiplier</ref>{valueScaling},</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.output<sp/>=<sp/><ref refid="class_k_win_1_1_value_range" kindref="compound">ValueRange</ref>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.min<sp/>=<sp/>pipeline.<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.front().input.min<sp/>*<sp/>valueScaling,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.max<sp/>=<sp/>1.0,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(currentOp<sp/>&amp;&amp;<sp/>!currentOp-&gt;<ref refid="class_k_win_1_1_drm_abstract_color_op_1a3efbe454f8f585d000996b4e3a23f9ec" kindref="member">canBeUsedFor</ref>(*initialOp,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentOp<sp/>=<sp/>currentOp-&gt;<ref refid="class_k_win_1_1_drm_abstract_color_op_1a4cd8bd0280bcd6e99f04d8fa50ff5939" kindref="member">next</ref>();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!currentOp)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentOp<sp/>=<sp/>currentOp-&gt;<ref refid="class_k_win_1_1_drm_abstract_color_op_1a4cd8bd0280bcd6e99f04d8fa50ff5939" kindref="member">next</ref>();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>pipeline.<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.begin();<sp/>it<sp/>!=<sp/>pipeline.<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(currentOp<sp/>&amp;&amp;<sp/>!currentOp-&gt;<ref refid="class_k_win_1_1_drm_abstract_color_op_1a3efbe454f8f585d000996b4e3a23f9ec" kindref="member">canBeUsedFor</ref>(*it,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentOp<sp/>=<sp/>currentOp-&gt;<ref refid="class_k_win_1_1_drm_abstract_color_op_1a4cd8bd0280bcd6e99f04d8fa50ff5939" kindref="member">next</ref>();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!currentOp)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>actually<sp/>program<sp/>the<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>currentOp<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_drm_abstract_color_op_1aafeee5068439b7c869e7018da266c573" kindref="member">m_cache</ref><sp/>=<sp/>std::make_unique&lt;DrmAtomicCommit&gt;(commit-&gt;<ref refid="class_k_win_1_1_drm_commit_1af8a218c85630a9fd793248fea96d568b" kindref="member">gpu</ref>());</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(initialOp)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!currentOp-&gt;<ref refid="class_k_win_1_1_drm_abstract_color_op_1a3efbe454f8f585d000996b4e3a23f9ec" kindref="member">canBeUsedFor</ref>(*initialOp,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentOp-&gt;<ref refid="class_k_win_1_1_drm_abstract_color_op_1ad7ea1cca68350b6f75ee97d2f206805b" kindref="member">bypass</ref>(<ref refid="class_k_win_1_1_drm_abstract_color_op_1aafeee5068439b7c869e7018da266c573" kindref="member">m_cache</ref>.get());</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentOp<sp/>=<sp/>currentOp-&gt;<ref refid="class_k_win_1_1_drm_abstract_color_op_1a4cd8bd0280bcd6e99f04d8fa50ff5939" kindref="member">next</ref>();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentOp-&gt;<ref refid="class_k_win_1_1_drm_abstract_color_op_1a246de45aa118f77a4d6597e6c2632b9a" kindref="member">program</ref>(<ref refid="class_k_win_1_1_drm_abstract_color_op_1aafeee5068439b7c869e7018da266c573" kindref="member">m_cache</ref>.get(),<sp/>std::span(&amp;*initialOp,<sp/>1),<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentOp<sp/>=<sp/>currentOp-&gt;<ref refid="class_k_win_1_1_drm_abstract_color_op_1a4cd8bd0280bcd6e99f04d8fa50ff5939" kindref="member">next</ref>();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>pipeline.<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.begin();<sp/>it<sp/>!=<sp/>pipeline.<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.end();)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!currentOp-&gt;<ref refid="class_k_win_1_1_drm_abstract_color_op_1a3efbe454f8f585d000996b4e3a23f9ec" kindref="member">canBeUsedFor</ref>(*it,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentOp-&gt;<ref refid="class_k_win_1_1_drm_abstract_color_op_1ad7ea1cca68350b6f75ee97d2f206805b" kindref="member">bypass</ref>(<ref refid="class_k_win_1_1_drm_abstract_color_op_1aafeee5068439b7c869e7018da266c573" kindref="member">m_cache</ref>.get());</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentOp<sp/>=<sp/>currentOp-&gt;<ref refid="class_k_win_1_1_drm_abstract_color_op_1a4cd8bd0280bcd6e99f04d8fa50ff5939" kindref="member">next</ref>();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>firstIt<sp/>=<sp/>it;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it++;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>combine<sp/>as<sp/>many<sp/>operations<sp/>into<sp/>one<sp/>hardware<sp/>operation<sp/>as<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>pipeline.<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.end()<sp/>&amp;&amp;<sp/>currentOp-&gt;<ref refid="class_k_win_1_1_drm_abstract_color_op_1a3efbe454f8f585d000996b4e3a23f9ec" kindref="member">canBeUsedFor</ref>(*it,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it++;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::span<sp/>operations(firstIt,<sp/>it);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>outputScaling<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>pipeline.<ref refid="class_k_win_1_1_color_pipeline_1a76a718e0c2f2586605bb1959f8d86692" kindref="member">ops</ref>.end()<sp/>&amp;&amp;<sp/>(needsLimitedRange(operations.front())<sp/>||<sp/>needsLimitedRange(operations.back())<sp/>||<sp/>needsLimitedRange(*it)))<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>or<sp/>the<sp/>next<sp/>operation<sp/>needs<sp/>a<sp/>limited<sp/>range,<sp/>or<sp/>we<sp/>need<sp/>limited<sp/>range<sp/>for<sp/>the<sp/>output,<sp/>make<sp/>it<sp/>happen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputScaling<sp/>=<sp/>1.0<sp/>/<sp/>operations.back().output.max;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentOp-&gt;<ref refid="class_k_win_1_1_drm_abstract_color_op_1a246de45aa118f77a4d6597e6c2632b9a" kindref="member">program</ref>(<ref refid="class_k_win_1_1_drm_abstract_color_op_1aafeee5068439b7c869e7018da266c573" kindref="member">m_cache</ref>.get(),<sp/>operations,<sp/>valueScaling,<sp/>outputScaling);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valueScaling<sp/>=<sp/>outputScaling;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentOp<sp/>=<sp/>currentOp-&gt;<ref refid="class_k_win_1_1_drm_abstract_color_op_1a4cd8bd0280bcd6e99f04d8fa50ff5939" kindref="member">next</ref>();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(currentOp)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentOp-&gt;<ref refid="class_k_win_1_1_drm_abstract_color_op_1ad7ea1cca68350b6f75ee97d2f206805b" kindref="member">bypass</ref>(<ref refid="class_k_win_1_1_drm_abstract_color_op_1aafeee5068439b7c869e7018da266c573" kindref="member">m_cache</ref>.get());</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentOp<sp/>=<sp/>currentOp-&gt;<ref refid="class_k_win_1_1_drm_abstract_color_op_1a4cd8bd0280bcd6e99f04d8fa50ff5939" kindref="member">next</ref>();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>commit-&gt;<ref refid="class_k_win_1_1_drm_atomic_commit_1a3e4293578ac95f2d6600a65116404f3e" kindref="member">merge</ref>(<ref refid="class_k_win_1_1_drm_abstract_color_op_1aafeee5068439b7c869e7018da266c573" kindref="member">m_cache</ref>.get());</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_drm_abstract_color_op_1ade396076e4796b2e53c871888af7e518" kindref="member">m_cachedPipeline</ref><sp/>=<sp/>pipeline;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="class_k_win_1_1_drm_lut_color_op_1ad23a13d858a1ad0f799932bdfebedf26" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_drm_lut_color_op_1ad23a13d858a1ad0f799932bdfebedf26" kindref="member">DrmLutColorOp::DrmLutColorOp</ref>(<ref refid="class_k_win_1_1_drm_abstract_color_op_1a2d7e5219a9c3ff5b5b0701af4ec7854e" kindref="member">DrmAbstractColorOp</ref><sp/>*<ref refid="class_k_win_1_1_drm_abstract_color_op_1a4cd8bd0280bcd6e99f04d8fa50ff5939" kindref="member">next</ref>,<sp/><ref refid="class_k_win_1_1_drm_property" kindref="compound">DrmProperty</ref><sp/>*prop,<sp/>uint32_t<sp/>maxSize)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_drm_abstract_color_op_1a2d7e5219a9c3ff5b5b0701af4ec7854e" kindref="member">DrmAbstractColorOp</ref>(<ref refid="class_k_win_1_1_drm_abstract_color_op_1a4cd8bd0280bcd6e99f04d8fa50ff5939" kindref="member">next</ref>)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_prop(prop)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_maxSize(maxSize)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_components(m_maxSize)</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="class_k_win_1_1_drm_lut_color_op_1a95d1f7173eaba388ff1892ab8d55779c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_drm_lut_color_op_1a95d1f7173eaba388ff1892ab8d55779c" kindref="member">DrmLutColorOp::canBeUsedFor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_op" kindref="compound">ColorOp</ref><sp/>&amp;op,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>scaling)</highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta<sp/>=<sp/>0.0001;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>scaling<sp/>is<sp/>true,<sp/>we<sp/>can<sp/>assume<sp/>the<sp/>input<sp/>to<sp/>be<sp/>bounded<sp/>to<sp/>[0;<sp/>1]<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!scaling<sp/>&amp;&amp;<sp/>op.<ref refid="class_k_win_1_1_color_op_1a9d406b010fbb91164c4a2c5d56adb0d2" kindref="member">input</ref>.<ref refid="class_k_win_1_1_value_range_1a851207666f98fcd4c70ab33c96871dbb" kindref="member">max</ref><sp/>&gt;<sp/>1<sp/>+<sp/>eta)<sp/>||<sp/>op.<ref refid="class_k_win_1_1_color_op_1a9d406b010fbb91164c4a2c5d56adb0d2" kindref="member">input</ref>.<ref refid="class_k_win_1_1_value_range_1a66cb166dc8588f1fc9a85bafcdc67bf2" kindref="member">min</ref><sp/>&lt;<sp/>-eta)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::holds_alternative&lt;ColorTransferFunction&gt;(op.<ref refid="class_k_win_1_1_color_op_1a0e5fd273177b549f312a92499cdbb330" kindref="member">operation</ref>)<sp/>||<sp/>std::holds_alternative&lt;InverseColorTransferFunction&gt;(op.<ref refid="class_k_win_1_1_color_op_1a0e5fd273177b549f312a92499cdbb330" kindref="member">operation</ref>)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>std::holds_alternative&lt;ColorTonemapper&gt;(op.<ref refid="class_k_win_1_1_color_op_1a0e5fd273177b549f312a92499cdbb330" kindref="member">operation</ref>)<sp/>||<sp/>std::holds_alternative&lt;std::shared_ptr&lt;ColorTransformation&gt;&gt;(op.<ref refid="class_k_win_1_1_color_op_1a0e5fd273177b549f312a92499cdbb330" kindref="member">operation</ref>))<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>required<sp/>resolution<sp/>depends<sp/>heavily<sp/>on<sp/>the<sp/>function<sp/>and<sp/>on<sp/>the<sp/>input<sp/>and<sp/>output<sp/>ranges<sp/>/<sp/>multipliers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>this<sp/>is<sp/>good<sp/>enough<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_maxSize<sp/>&gt;=<sp/>1024;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::holds_alternative&lt;ColorMultiplier&gt;(op.<ref refid="class_k_win_1_1_color_op_1a0e5fd273177b549f312a92499cdbb330" kindref="member">operation</ref>))<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="class_k_win_1_1_drm_lut_color_op_1ae4e7a797f72129b4ea3fb735b05d2142" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_drm_lut_color_op_1ae4e7a797f72129b4ea3fb735b05d2142" kindref="member">DrmLutColorOp::program</ref>(<ref refid="class_k_win_1_1_drm_atomic_commit" kindref="compound">DrmAtomicCommit</ref><sp/>*commit,<sp/>std::span&lt;const<sp/>ColorOp&gt;<sp/>operations,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>inputScale,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>outputScale)</highlight></codeline>
<codeline lineno="146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_maxSize;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref><sp/>=<sp/>i<sp/>/<sp/>double(m_maxSize<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scaledInput<sp/>=<sp/><ref refid="namespace_k_win_1abe2e249447d344f266998fdcef93fde0" kindref="member">input</ref><sp/>/<sp/>inputScale;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVector3D<sp/>output(scaledInput,<sp/>scaledInput,<sp/>scaledInput);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;op<sp/>:<sp/>operations)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tf<sp/>=<sp/>std::get_if&lt;ColorTransferFunction&gt;(&amp;op.operation))<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>tf-&gt;tf.encodedToNits(output);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tf<sp/>=<sp/>std::get_if&lt;InverseColorTransferFunction&gt;(&amp;op.operation))<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>tf-&gt;tf.nitsToEncoded(output);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mult<sp/>=<sp/>std::get_if&lt;ColorMultiplier&gt;(&amp;op.operation))<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>*=<sp/>mult-&gt;factors;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tonemap<sp/>=<sp/>std::get_if&lt;ColorTonemapper&gt;(&amp;op.operation))<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.setX(tonemap-&gt;map(output.x()));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lut1d<sp/>=<sp/>std::get_if&lt;std::shared_ptr&lt;ColorTransformation&gt;&gt;(&amp;op.operation))<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>(*lut1d)-&gt;transform(output);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q_UNREACHABLE();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_components[i]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.red<sp/>=<sp/>uint16_t(std::round(std::clamp(output.x()<sp/>*<sp/>outputScale,<sp/>0.0,<sp/>1.0)<sp/>*<sp/>std::numeric_limits&lt;uint16_t&gt;::max())),</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.green<sp/>=<sp/>uint16_t(std::round(std::clamp(output.y()<sp/>*<sp/>outputScale,<sp/>0.0,<sp/>1.0)<sp/>*<sp/>std::numeric_limits&lt;uint16_t&gt;::max())),</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.blue<sp/>=<sp/>uint16_t(std::round(std::clamp(output.z()<sp/>*<sp/>outputScale,<sp/>0.0,<sp/>1.0)<sp/>*<sp/>std::numeric_limits&lt;uint16_t&gt;::max())),</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.reserved<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>commit-&gt;<ref refid="class_k_win_1_1_drm_atomic_commit_1a8c53789ea8201b737d2d3ae0524e748b" kindref="member">addBlob</ref>(*m_prop,<sp/><ref refid="class_k_win_1_1_drm_blob_1a26d8f56e11c0090e06042564ff7170f3" kindref="member">DrmBlob::create</ref>(m_prop-&gt;drmObject()-&gt;gpu(),<sp/>m_components.data(),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(drm_color_lut)<sp/>*<sp/>m_maxSize));</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="class_k_win_1_1_drm_lut_color_op_1af5a88f92b1c45d13707f4f80fc6fef38" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_drm_lut_color_op_1af5a88f92b1c45d13707f4f80fc6fef38" kindref="member">DrmLutColorOp::bypass</ref>(<ref refid="class_k_win_1_1_drm_atomic_commit" kindref="compound">DrmAtomicCommit</ref><sp/>*commit)</highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>commit-&gt;<ref refid="class_k_win_1_1_drm_atomic_commit_1a8c53789ea8201b737d2d3ae0524e748b" kindref="member">addBlob</ref>(*m_prop,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="class_k_win_1_1_legacy_matrix_color_op_1a05c817b807f17259cc44acbac29dc4e1" refkind="member"><highlight class="normal"><ref refid="class_k_win_1_1_legacy_matrix_color_op_1a05c817b807f17259cc44acbac29dc4e1" kindref="member">LegacyMatrixColorOp::LegacyMatrixColorOp</ref>(<ref refid="class_k_win_1_1_drm_abstract_color_op_1a2d7e5219a9c3ff5b5b0701af4ec7854e" kindref="member">DrmAbstractColorOp</ref><sp/>*<ref refid="class_k_win_1_1_drm_abstract_color_op_1a4cd8bd0280bcd6e99f04d8fa50ff5939" kindref="member">next</ref>,<sp/><ref refid="class_k_win_1_1_drm_property" kindref="compound">DrmProperty</ref><sp/>*prop)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_k_win_1_1_drm_abstract_color_op_1a2d7e5219a9c3ff5b5b0701af4ec7854e" kindref="member">DrmAbstractColorOp</ref>(<ref refid="class_k_win_1_1_drm_abstract_color_op_1a4cd8bd0280bcd6e99f04d8fa50ff5939" kindref="member">next</ref>)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_prop(prop)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="class_k_win_1_1_legacy_matrix_color_op_1adaec3d33040e0c1092d41e484c3ec6f3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_legacy_matrix_color_op_1adaec3d33040e0c1092d41e484c3ec6f3" kindref="member">LegacyMatrixColorOp::canBeUsedFor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_color_op" kindref="compound">ColorOp</ref><sp/>&amp;op,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>scaling)</highlight></codeline>
<codeline lineno="188"><highlight class="normal">{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>isn&apos;t<sp/>necessarily<sp/>true,<sp/>but<sp/>let&apos;s<sp/>keep<sp/>things<sp/>simple<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>matrix<sp/>=<sp/>std::get_if&lt;ColorMatrix&gt;(&amp;op.<ref refid="class_k_win_1_1_color_op_1a0e5fd273177b549f312a92499cdbb330" kindref="member">operation</ref>))<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::abs(matrix-&gt;mat(3,<sp/>0)<sp/>-<sp/>0)<sp/>&lt;<sp/><ref refid="class_k_win_1_1_color_pipeline_1a4c736fae0c1a4bf9e204b0a44efbd396" kindref="member">ColorPipeline::s_maxResolution</ref></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>std::abs(matrix-&gt;mat(3,<sp/>1)<sp/>-<sp/>0)<sp/>&lt;<sp/><ref refid="class_k_win_1_1_color_pipeline_1a4c736fae0c1a4bf9e204b0a44efbd396" kindref="member">ColorPipeline::s_maxResolution</ref></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>std::abs(matrix-&gt;mat(3,<sp/>2)<sp/>-<sp/>0)<sp/>&lt;<sp/><ref refid="class_k_win_1_1_color_pipeline_1a4c736fae0c1a4bf9e204b0a44efbd396" kindref="member">ColorPipeline::s_maxResolution</ref></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>std::abs(matrix-&gt;mat(3,<sp/>3)<sp/>-<sp/>1)<sp/>&lt;<sp/><ref refid="class_k_win_1_1_color_pipeline_1a4c736fae0c1a4bf9e204b0a44efbd396" kindref="member">ColorPipeline::s_maxResolution</ref></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>std::abs(matrix-&gt;mat(0,<sp/>3)<sp/>-<sp/>0)<sp/>&lt;<sp/><ref refid="class_k_win_1_1_color_pipeline_1a4c736fae0c1a4bf9e204b0a44efbd396" kindref="member">ColorPipeline::s_maxResolution</ref></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>std::abs(matrix-&gt;mat(1,<sp/>3)<sp/>-<sp/>0)<sp/>&lt;<sp/><ref refid="class_k_win_1_1_color_pipeline_1a4c736fae0c1a4bf9e204b0a44efbd396" kindref="member">ColorPipeline::s_maxResolution</ref></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>std::abs(matrix-&gt;mat(2,<sp/>3)<sp/>-<sp/>0)<sp/>&lt;<sp/><ref refid="class_k_win_1_1_color_pipeline_1a4c736fae0c1a4bf9e204b0a44efbd396" kindref="member">ColorPipeline::s_maxResolution</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::holds_alternative&lt;ColorMultiplier&gt;(op.<ref refid="class_k_win_1_1_color_op_1a0e5fd273177b549f312a92499cdbb330" kindref="member">operation</ref>))<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint64_t<sp/>doubleToFixed(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ctm<sp/>values<sp/>are<sp/>in<sp/>S31.32<sp/>sign-magnitude<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>ret<sp/>=<sp/>std::abs(value)<sp/>*<sp/>(1ull<sp/>&lt;&lt;<sp/>32);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>|=<sp/>1ull<sp/>&lt;&lt;<sp/>63;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="class_k_win_1_1_legacy_matrix_color_op_1a7aa443bb029f46f03f4b292e1a46efeb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_legacy_matrix_color_op_1a7aa443bb029f46f03f4b292e1a46efeb" kindref="member">LegacyMatrixColorOp::program</ref>(<ref refid="class_k_win_1_1_drm_atomic_commit" kindref="compound">DrmAtomicCommit</ref><sp/>*commit,<sp/>std::span&lt;const<sp/>ColorOp&gt;<sp/>operations,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>inputScale,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>outputScale)</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE<sp/>that<sp/>matrix<sp/>operations<sp/>have<sp/>to<sp/>be<sp/>added<sp/>in<sp/>reverse<sp/>order<sp/>to<sp/>get<sp/>the<sp/>correct<sp/>result!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>QMatrix4x4<sp/>result;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>result.scale(outputScale);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;op<sp/>:<sp/>operations<sp/>|<sp/>std::views::reverse)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>matrix<sp/>=<sp/>std::get_if&lt;ColorMatrix&gt;(&amp;op.operation))<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>*=<sp/>matrix-&gt;mat;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mult<sp/>=<sp/>std::get_if&lt;ColorMultiplier&gt;(&amp;op.operation))<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.scale(mult-&gt;factors.x(),<sp/>mult-&gt;factors.y(),<sp/>mult-&gt;factors.z());</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q_UNREACHABLE();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>result.scale(1.0<sp/>/<sp/>inputScale);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>drm_color_ctm<sp/>data<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.matrix<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doubleToFixed(result(0,<sp/>0)),<sp/>doubleToFixed(result(0,<sp/>1)),<sp/>doubleToFixed(result(0,<sp/>2)),<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doubleToFixed(result(1,<sp/>0)),<sp/>doubleToFixed(result(1,<sp/>1)),<sp/>doubleToFixed(result(1,<sp/>2)),<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doubleToFixed(result(2,<sp/>0)),<sp/>doubleToFixed(result(2,<sp/>1)),<sp/>doubleToFixed(result(2,<sp/>2)),<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>commit-&gt;<ref refid="class_k_win_1_1_drm_atomic_commit_1a8c53789ea8201b737d2d3ae0524e748b" kindref="member">addBlob</ref>(*m_prop,<sp/><ref refid="class_k_win_1_1_drm_blob_1a26d8f56e11c0090e06042564ff7170f3" kindref="member">DrmBlob::create</ref>(m_prop-&gt;drmObject()-&gt;gpu(),<sp/>&amp;data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(data)));</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="class_k_win_1_1_legacy_matrix_color_op_1aa44ef8473900ba4e0dbcc4992ab720c8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_legacy_matrix_color_op_1aa44ef8473900ba4e0dbcc4992ab720c8" kindref="member">LegacyMatrixColorOp::bypass</ref>(<ref refid="class_k_win_1_1_drm_atomic_commit" kindref="compound">DrmAtomicCommit</ref><sp/>*commit)</highlight></codeline>
<codeline lineno="240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>commit-&gt;<ref refid="class_k_win_1_1_drm_atomic_commit_1a8c53789ea8201b737d2d3ae0524e748b" kindref="member">addBlob</ref>(*m_prop,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="kwin/src/backends/drm/drm_colorop.cpp"/>
  </compounddef>
</doxygen>
