<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_show_paint_effect" kind="class" language="C++" prot="public">
    <compoundname>KWin::ShowPaintEffect</compoundname>
    <basecompoundref refid="class_k_win_1_1_effect" prot="public" virt="non-virtual">KWin::Effect</basecompoundref>
    <includes refid="showpaint_8h" local="no">showpaint.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_show_paint_effect_1a343e93e001d67a572a3d0b86b29f2168" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::ShowPaintEffect::m_active</definition>
        <argsstring></argsstring>
        <name>m_active</name>
        <qualifiedname>KWin::ShowPaintEffect::m_active</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/showpaint/showpaint.h" line="36" column="10" bodyfile="kwin/src/plugins/showpaint/showpaint.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_show_paint_effect_1afe707b36a1b17d87de4532ac76e387e6" prot="private" static="no" mutable="no">
        <type>QRegion</type>
        <definition>QRegion KWin::ShowPaintEffect::m_painted</definition>
        <argsstring></argsstring>
        <name>m_painted</name>
        <qualifiedname>KWin::ShowPaintEffect::m_painted</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/showpaint/showpaint.h" line="37" column="13" bodyfile="kwin/src/plugins/showpaint/showpaint.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_show_paint_effect_1a5e0b2915abd5e0526484bc4b8ae15865" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int KWin::ShowPaintEffect::m_colorIndex</definition>
        <argsstring></argsstring>
        <name>m_colorIndex</name>
        <qualifiedname>KWin::ShowPaintEffect::m_colorIndex</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/showpaint/showpaint.h" line="38" column="9" bodyfile="kwin/src/plugins/showpaint/showpaint.h" bodystart="38" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_show_paint_effect_1a153a7416d0283b84ecd132150db77c37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::ShowPaintEffect::ShowPaintEffect</definition>
        <argsstring>()</argsstring>
        <name>ShowPaintEffect</name>
        <qualifiedname>KWin::ShowPaintEffect::ShowPaintEffect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/showpaint/showpaint.h" line="22" column="5" bodyfile="kwin/src/plugins/showpaint/showpaint.cpp" bodystart="38" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_show_paint_effect_1af781765d717bbf6b86bfef54d9706a40" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::ShowPaintEffect::paintScreen</definition>
        <argsstring>(const RenderTarget &amp;renderTarget, const RenderViewport &amp;viewport, int mask, const QRegion &amp;region, Output *screen) override</argsstring>
        <name>paintScreen</name>
        <qualifiedname>KWin::ShowPaintEffect::paintScreen</qualifiedname>
        <reimplements refid="group__kwineffects_1ga44ee94161446ce6fb2502376af6515a8">paintScreen</reimplements>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref> &amp;</type>
          <declname>renderTarget</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_viewport" kindref="compound">RenderViewport</ref> &amp;</type>
          <declname>viewport</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const QRegion &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>screen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>In this method you can: <itemizedlist>
<listitem><para>paint something on top of the windows (by painting after calling effects-&gt;<ref refid="class_k_win_1_1_show_paint_effect_1af781765d717bbf6b86bfef54d9706a40" kindref="member">paintScreen()</ref>) </para>
</listitem>
<listitem><para>paint multiple desktops and/or multiple copies of the same desktop by calling effects-&gt;<ref refid="class_k_win_1_1_show_paint_effect_1af781765d717bbf6b86bfef54d9706a40" kindref="member">paintScreen()</ref> multiple times</para>
</listitem>
</itemizedlist>
In OpenGL based compositing, the frameworks ensures that the context is current when this method is invoked. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/showpaint/showpaint.h" line="24" column="10" bodyfile="kwin/src/plugins/showpaint/showpaint.cpp" bodystart="49" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_show_paint_effect_1ad34874fdbb62716262d72ddc24be7ee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::ShowPaintEffect::paintWindow</definition>
        <argsstring>(const RenderTarget &amp;renderTarget, const RenderViewport &amp;viewport, EffectWindow *w, int mask, QRegion region, WindowPaintData &amp;data) override</argsstring>
        <name>paintWindow</name>
        <qualifiedname>KWin::ShowPaintEffect::paintWindow</qualifiedname>
        <reimplements refid="group__kwineffects_1ga0f0292db2bf016a0843ef7cc06219378">paintWindow</reimplements>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref> &amp;</type>
          <declname>renderTarget</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_viewport" kindref="compound">RenderViewport</ref> &amp;</type>
          <declname>viewport</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_effect_window" kindref="compound">EffectWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>QRegion</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_window_paint_data" kindref="compound">WindowPaintData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is the main method for painting windows. In this method you can: <itemizedlist>
<listitem><para>do various transformations </para>
</listitem>
<listitem><para>change opacity of the window </para>
</listitem>
<listitem><para>change brightness and/or saturation, if it&apos;s supported</para>
</listitem>
</itemizedlist>
In OpenGL based compositing, the frameworks ensures that the context is current when this method is invoked. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/showpaint/showpaint.h" line="25" column="10" bodyfile="kwin/src/plugins/showpaint/showpaint.cpp" bodystart="63" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_show_paint_effect_1a74b5f198507074f83d154c93f4ee2618" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::ShowPaintEffect::isActive</definition>
        <argsstring>() const override</argsstring>
        <name>isActive</name>
        <qualifiedname>KWin::ShowPaintEffect::isActive</qualifiedname>
        <reimplements refid="group__kwineffects_1ga596b6c0ed146b97b293f5db5f27fc40f">isActive</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overwrite this method to indicate whether your effect will be doing something in the next frame to be rendered. If the method returns <computeroutput>false</computeroutput> the effect will be excluded from the chained methods in the next rendered frame.</para>
<para>This method is called always directly before the paint loop begins. So it is totally fine to e.g. react on a window event, issue a repaint to trigger an animation and change a flag to indicate that this method returns <computeroutput>true</computeroutput>.</para>
<para>As the method is called each frame, you should not perform complex calculations. Best use just a boolean flag.</para>
<para>The default implementation of this method returns <computeroutput>true</computeroutput>. <simplesect kind="since"><para>4.8 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/showpaint/showpaint.h" line="27" column="10" bodyfile="kwin/src/plugins/showpaint/showpaint.cpp" bodystart="106" bodyend="109"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-slot">
      <memberdef kind="slot" id="class_k_win_1_1_show_paint_effect_1a56357cce031c9725ddfafdb0f14b0be4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ShowPaintEffect::toggle</definition>
        <argsstring>()</argsstring>
        <name>toggle</name>
        <qualifiedname>KWin::ShowPaintEffect::toggle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/showpaint/showpaint.h" line="30" column="10" bodyfile="kwin/src/plugins/showpaint/showpaint.cpp" bodystart="111" bodyend="115"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_k_win_1_1_show_paint_effect_1a6834cbbc861d9499a48cb384e77ce6e7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ShowPaintEffect::paintGL</definition>
        <argsstring>(const RenderTarget &amp;renderTarget, const QMatrix4x4 &amp;projection, qreal scale)</argsstring>
        <name>paintGL</name>
        <qualifiedname>KWin::ShowPaintEffect::paintGL</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref> &amp;</type>
          <declname>renderTarget</declname>
        </param>
        <param>
          <type>const QMatrix4x4 &amp;</type>
          <declname>projection</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/showpaint/showpaint.h" line="33" column="10" bodyfile="kwin/src/plugins/showpaint/showpaint.cpp" bodystart="69" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_show_paint_effect_1a4c5d6e093d993568d43c345d9e82a345" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::ShowPaintEffect::paintQPainter</definition>
        <argsstring>()</argsstring>
        <name>paintQPainter</name>
        <qualifiedname>KWin::ShowPaintEffect::paintQPainter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/showpaint/showpaint.h" line="34" column="10" bodyfile="kwin/src/plugins/showpaint/showpaint.cpp" bodystart="97" bodyend="104"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>KWin::Effect</label>
        <link refid="class_k_win_1_1_effect"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::ShowPaintEffect</label>
        <link refid="class_k_win_1_1_show_paint_effect"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>KWin::Effect</label>
        <link refid="class_k_win_1_1_effect"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::ShowPaintEffect</label>
        <link refid="class_k_win_1_1_show_paint_effect"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/plugins/showpaint/showpaint.h" line="17" column="1" bodyfile="kwin/src/plugins/showpaint/showpaint.h" bodystart="18" bodyend="39"/>
    <listofallmembers>
      <member refid="group__kwineffects_1gab9bcf52072fe74567496b0a894d1d873" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>animationTime</name></member>
      <member refid="group__kwineffects_1ga3a167fe6d9c46376ed46db13caf2d135" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>animationTime</name></member>
      <member refid="group__kwineffects_1ga0ba05f1463195d0f92ea1dd3396a5d16" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>animationTime</name></member>
      <member refid="group__kwineffects_1ga7cf8035c970fcde177e3038d79015289" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>blocksDirectScanout</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aea67d120ab5ce1dc424476e63c132af6c1" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>Blur</name></member>
      <member refid="group__kwineffects_1gab8a94f591b743b59b7285911e641e7d5" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>borderActivated</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aead805f717a48c23959a1e9ecd7722d15d" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>Contrast</name></member>
      <member refid="group__kwineffects_1ga4da344d8b8f2cb9eecd6e64a9b758740" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>cursorPos</name></member>
      <member refid="group__kwineffects_1ga0c159e00c3a51ca733bea49cf8d52691" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>debug</name></member>
      <member refid="group__kwineffects_1ga254b1a3e8bb8b9b671e9b000ca027b7c" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>drawWindow</name></member>
      <member refid="group__kwineffects_1ga7bd8262f4cb2c5c3090c748eb388ad7e" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>Effect</name></member>
      <member refid="group__kwineffects_1ga6337b2a9b5aadfbb6b696119144b56ae" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>Feature</name></member>
      <member refid="group__kwineffects_1gab5e0581ae4b2dffe8014ff5cf6c21158" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>grabbedKeyboardEvent</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aeaecbb77ad241419970ece3d45296c4838" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>HighlightWindows</name></member>
      <member refid="group__kwineffects_1ga7b0ecb57667179e95c188f0ee7416d00" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>interpolate</name></member>
      <member refid="class_k_win_1_1_show_paint_effect_1a74b5f198507074f83d154c93f4ee2618" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>isActive</name></member>
      <member refid="class_k_win_1_1_show_paint_effect_1a343e93e001d67a572a3d0b86b29f2168" prot="private" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>m_active</name></member>
      <member refid="class_k_win_1_1_show_paint_effect_1a5e0b2915abd5e0526484bc4b8ae15865" prot="private" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>m_colorIndex</name></member>
      <member refid="class_k_win_1_1_show_paint_effect_1afe707b36a1b17d87de4532ac76e387e6" prot="private" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>m_painted</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aea170229312ed2ec0e446ee89ba7f6b6ca" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>Nothing</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378dab0de2932c45bde6df3de10d00dbd6fcd" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>PAINT_SCREEN_BACKGROUND_FIRST</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378da43acbfc913cae9eb3c363aeb0524f18f" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>PAINT_SCREEN_REGION</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378da3e731594d83c3e92742bff7c420fb7f8" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>PAINT_SCREEN_TRANSFORMED</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378da124dd798e5f793087e81da77e11a9b1e" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>PAINT_SCREEN_WITH_TRANSFORMED_WINDOWS</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378dac606d3dcf2dd150234f71c4c39083c7d" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>PAINT_WINDOW_OPAQUE</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378da684bb6c6c278b900b6d0c889e79233b8" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>PAINT_WINDOW_TRANSFORMED</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378dac7237bf4bb4d6ea6d6fb1215db19b45e" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>PAINT_WINDOW_TRANSLUCENT</name></member>
      <member refid="class_k_win_1_1_show_paint_effect_1a6834cbbc861d9499a48cb384e77ce6e7" prot="private" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>paintGL</name></member>
      <member refid="class_k_win_1_1_show_paint_effect_1a4c5d6e093d993568d43c345d9e82a345" prot="private" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>paintQPainter</name></member>
      <member refid="class_k_win_1_1_show_paint_effect_1af781765d717bbf6b86bfef54d9706a40" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>paintScreen</name></member>
      <member refid="class_k_win_1_1_show_paint_effect_1ad34874fdbb62716262d72ddc24be7ee5" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>paintWindow</name></member>
      <member refid="group__kwineffects_1ga5fb1bc87ff54dcc2cfe87b070816ab00" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>perform</name></member>
      <member refid="group__kwineffects_1ga10021cf9704c00d60beae284d53846e2" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>postPaintScreen</name></member>
      <member refid="group__kwineffects_1ga9b7cf82c6f74331cffabb06c63ef914c" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>postPaintWindow</name></member>
      <member refid="group__kwineffects_1ga2edc1b757e36bb6bcbbacde454dfc05c" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>prePaintScreen</name></member>
      <member refid="group__kwineffects_1ga2832c7831c0f49f9f5cf0267ffc53672" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>prePaintWindow</name></member>
      <member refid="group__kwineffects_1ga30fc2cbbdd90f95568a9e350f34bf2b7" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>provides</name></member>
      <member refid="group__kwineffects_1ga737c6d80eb8f8b24fdc6398209c38e3d" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>reconfigure</name></member>
      <member refid="group__kwineffects_1gga4aebd7d0f695e37678debaa118fa92dca19d3e23e53788c8d9cc9c18fbf75fc7d" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>ReconfigureAll</name></member>
      <member refid="group__kwineffects_1ga4aebd7d0f695e37678debaa118fa92dc" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>ReconfigureFlag</name></member>
      <member refid="group__kwineffects_1ga120531588e58691a5a18028158d2947a" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>requestedEffectChainPosition</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aea592ea0de7a4d658a1ef9bbb48b18e15a" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>ScreenInversion</name></member>
      <member refid="group__kwineffects_1ga1efc42cd9be15e8200c6e55f6bf47cb8" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>setPositionTransformations</name></member>
      <member refid="class_k_win_1_1_show_paint_effect_1a153a7416d0283b84ecd132150db77c37" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>ShowPaintEffect</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aea19036d413806c53978a3234e7eb197c4" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>SystemBell</name></member>
      <member refid="group__kwineffects_1ga2d22a8f0b8a4d81615dff67dc1ef970f" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>tabletPadButtonEvent</name></member>
      <member refid="group__kwineffects_1gaa084e5a45597f5775213715eb5506f63" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>tabletPadRingEvent</name></member>
      <member refid="group__kwineffects_1ga4998fb0983bd97163935cad2c4dedd76" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>tabletPadStripEvent</name></member>
      <member refid="group__kwineffects_1ga1d4ae01f5935ea887a12018d59191cbf" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>tabletToolAxis</name></member>
      <member refid="group__kwineffects_1ga7a984d7d83dfa97962b8404301c6aba9" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>tabletToolButtonEvent</name></member>
      <member refid="group__kwineffects_1ga4ed77506be381680bf664dbc8c20e036" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>tabletToolProximity</name></member>
      <member refid="group__kwineffects_1gaf16e9ca42cceb738fb859d1a1a462548" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>tabletToolTip</name></member>
      <member refid="class_k_win_1_1_show_paint_effect_1a56357cce031c9725ddfafdb0f14b0be4" prot="private" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>toggle</name></member>
      <member refid="group__kwineffects_1gaa31554949bc00085e6380b50be16138e" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>touchCancel</name></member>
      <member refid="group__kwineffects_1ga315fd305e7570f41e7bce7db6812381f" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>touchDown</name></member>
      <member refid="group__kwineffects_1ga54d00a9e05b5d4597db40c2f5b1d36de" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>touchMotion</name></member>
      <member refid="group__kwineffects_1gaf3871967d6199eb7c87621bc75b925bb" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>touchUp</name></member>
      <member refid="group__kwineffects_1ga7b142933c38cb9b4a433b768b266e7cb" prot="public" virt="virtual"><scope>KWin::ShowPaintEffect</scope><name>windowInputMouseEvent</name></member>
      <member refid="group__kwineffects_1ga50174eb0169aebceb78ebd5aff71c481" prot="public" virt="non-virtual"><scope>KWin::ShowPaintEffect</scope><name>~Effect</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
