<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_input_event_spy" kind="class" language="C++" prot="public">
    <compoundname>KWin::InputEventSpy</compoundname>
    <derivedcompoundref refid="class_k_win_1_1_barrier_spy" prot="public" virt="non-virtual">KWin::BarrierSpy</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_debug_console_filter" prot="public" virt="non-virtual">KWin::DebugConsoleFilter</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_hide_cursor_effect" prot="public" virt="non-virtual">KWin::HideCursorEffect</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_hide_cursor_spy" prot="public" virt="non-virtual">KWin::HideCursorSpy</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_key_state_changed_spy" prot="public" virt="non-virtual">KWin::KeyStateChangedSpy</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_keyboard_layout" prot="public" virt="non-virtual">KWin::KeyboardLayout</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_keyboard_repeat" prot="public" virt="non-virtual">KWin::KeyboardRepeat</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_lid_switch_tracker" prot="private" virt="non-virtual">KWin::LidSwitchTracker</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_modifiers_changed_spy" prot="public" virt="non-virtual">KWin::ModifiersChangedSpy</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_on_screen_notification_input_event_spy" prot="public" virt="non-virtual">KWin::OnScreenNotificationInputEventSpy</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_shake_cursor_effect" prot="public" virt="non-virtual">KWin::ShakeCursorEffect</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_tablet_mode_switch_event_spy" prot="public" virt="non-virtual">KWin::TabletModeSwitchEventSpy</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_user_activity_spy" prot="public" virt="non-virtual">KWin::UserActivitySpy</derivedcompoundref>
    <derivedcompoundref refid="class_k_win_1_1_window_interacted_spy" prot="public" virt="non-virtual">KWin::WindowInteractedSpy</derivedcompoundref>
    <includes refid="input__event__spy_8h" local="no">input_event_spy.h</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1a57ca2c40b812786fd52212bab1b2ec1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::InputEventSpy::InputEventSpy</definition>
        <argsstring>()</argsstring>
        <name>InputEventSpy</name>
        <qualifiedname>KWin::InputEventSpy::InputEventSpy</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="45" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1a6e84ba72ddfb5f7f4555ed716e8408be" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>KWin::InputEventSpy::~InputEventSpy</definition>
        <argsstring>()</argsstring>
        <name>~InputEventSpy</name>
        <qualifiedname>KWin::InputEventSpy::~InputEventSpy</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="46" column="13" bodyfile="kwin/src/input_event_spy.cpp" bodystart="19" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1a3ccfe3b095e67c4a0a3aff7827de86ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::pointerMotion</definition>
        <argsstring>(PointerMotionEvent *event)</argsstring>
        <name>pointerMotion</name>
        <qualifiedname>KWin::InputEventSpy::pointerMotion</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_barrier_spy_1a9e2ec5ebc6e6f9bc736ce7bdd3b24842">pointerMotion</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1a87f2ada2959b8f04b04840477c281c1b">pointerMotion</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_hide_cursor_effect_1a7e10b2729b30821a76a58170e300be9b">pointerMotion</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_hide_cursor_spy_1a1434db73c095307e97bd8b4ce2161624">pointerMotion</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_on_screen_notification_input_event_spy_1adae4940ab06364d4d3b0779eccf24adc">pointerMotion</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_shake_cursor_effect_1a3170828038d0b73a304d183f3fefddd2">pointerMotion</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1a492fe7d3be57ec0104f80d42cda1dbf7">pointerMotion</reimplementedby>
        <param>
          <type><ref refid="struct_k_win_1_1_pointer_motion_event" kindref="compound">PointerMotionEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="48" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="26" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1a5f9efdef8191faa288b3fc6ee2a4c43b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::pointerButton</definition>
        <argsstring>(PointerButtonEvent *event)</argsstring>
        <name>pointerButton</name>
        <qualifiedname>KWin::InputEventSpy::pointerButton</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1aa2d7fd76b201098362bf21ecce6ff8ed">pointerButton</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_hide_cursor_effect_1a90fb7caaff16691b798e2e52573d6f4f">pointerButton</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_hide_cursor_spy_1a5b31d18856581eacec37788b26a3fbc7">pointerButton</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1a33da27553708afc527e5cbf48fecc560">pointerButton</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_window_interacted_spy_1aee6f4e5285d7e53a2abe4cde16a9c1b5">pointerButton</reimplementedby>
        <param>
          <type><ref refid="struct_k_win_1_1_pointer_button_event" kindref="compound">PointerButtonEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="49" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="30" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1affd755ad4b5017dc625f10377b152fb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::pointerAxis</definition>
        <argsstring>(PointerAxisEvent *event)</argsstring>
        <name>pointerAxis</name>
        <qualifiedname>KWin::InputEventSpy::pointerAxis</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1a7c10c8dcdc27712ce41d1e9401cfc225">pointerAxis</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_hide_cursor_spy_1a2b5c2a7b353415b131d07a1f52d2f7d8">pointerAxis</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1a059cf6ae6dc9ea2d45fef466155e8358">pointerAxis</reimplementedby>
        <param>
          <type><ref refid="struct_k_win_1_1_pointer_axis_event" kindref="compound">PointerAxisEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Event spy for pointer axis events.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>The event information about the axis event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="55" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="34" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1ad6fe36c33c15628757cf73b201402554" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::keyboardKey</definition>
        <argsstring>(KeyboardKeyEvent *event)</argsstring>
        <name>keyboardKey</name>
        <qualifiedname>KWin::InputEventSpy::keyboardKey</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_barrier_spy_1af70287204e33f7420499898696121440">keyboardKey</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1a8d76b60ce0129c10e0e4ebf7a21e443a">keyboardKey</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_hide_cursor_effect_1a630de266f9f8958b6567fb13ee99fff8">keyboardKey</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_keyboard_repeat_1af1c1abb5814598ff6c7fe4a4b73ea05a">keyboardKey</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_key_state_changed_spy_1a666cc294d3bc7ac1346ba5ce8d5e17b4">keyboardKey</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_modifiers_changed_spy_1a6f83764030dd19cebd44d7c5a3a5d4b7">keyboardKey</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1a88de03219ae05e99a3c8516977845a87">keyboardKey</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_window_interacted_spy_1acb049ec08f0e54abda209588033c1d95">keyboardKey</reimplementedby>
        <param>
          <type><ref refid="struct_k_win_1_1_keyboard_key_event" kindref="compound">KeyboardKeyEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Event spy for keyboard events.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>The event information about the key event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="61" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="38" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1a507ecbd332c0511d81d88c135f676ec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::touchDown</definition>
        <argsstring>(qint32 id, const QPointF &amp;pos, std::chrono::microseconds time)</argsstring>
        <name>touchDown</name>
        <qualifiedname>KWin::InputEventSpy::touchDown</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1a4dd5c88fee03bb0aef62a2c69acb3bc4">touchDown</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_hide_cursor_spy_1a1a758091668b0f3a30de3b7a0a16f972">touchDown</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1a2a22306d2d29b46db89c1502a2ba360c">touchDown</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_window_interacted_spy_1a6ca5cc8a4d4568153808d52d48810395">touchDown</reimplementedby>
        <param>
          <type>qint32</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="62" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="42" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1a045ff5dafa2b5893cf128a899aab3a59" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::touchMotion</definition>
        <argsstring>(qint32 id, const QPointF &amp;pos, std::chrono::microseconds time)</argsstring>
        <name>touchMotion</name>
        <qualifiedname>KWin::InputEventSpy::touchMotion</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1a1cbd0a5fa34011321fcc7386bdefd564">touchMotion</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1a996e22d9f196bf48434349be2e127449">touchMotion</reimplementedby>
        <param>
          <type>qint32</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="63" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="46" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1ac3ddba7aa87645ba3945c4b32b5da39c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::touchUp</definition>
        <argsstring>(qint32 id, std::chrono::microseconds time)</argsstring>
        <name>touchUp</name>
        <qualifiedname>KWin::InputEventSpy::touchUp</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1a31c3726cb0eb5a6d65b11abc72bb7eb3">touchUp</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1a2baf5ce70245cd29e7602122c80ac8a0">touchUp</reimplementedby>
        <param>
          <type>qint32</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="64" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1a80fc99dbbd1abb780319e9e6a732dd7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::pinchGestureBegin</definition>
        <argsstring>(int fingerCount, std::chrono::microseconds time)</argsstring>
        <name>pinchGestureBegin</name>
        <qualifiedname>KWin::InputEventSpy::pinchGestureBegin</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1abbf353773b90b5c957af37171e578b52">pinchGestureBegin</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1a4d23735c6a444d6842bc391ad02d76d3">pinchGestureBegin</reimplementedby>
        <param>
          <type>int</type>
          <declname>fingerCount</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="66" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1aec624bc6f49a7718c9afd404b2413ba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::pinchGestureUpdate</definition>
        <argsstring>(qreal scale, qreal angleDelta, const QPointF &amp;delta, std::chrono::microseconds time)</argsstring>
        <name>pinchGestureUpdate</name>
        <qualifiedname>KWin::InputEventSpy::pinchGestureUpdate</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1a870d58897169ed108cbdc6d49561abfb">pinchGestureUpdate</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1aa921ac4f1caa4171427106a72606aa1d">pinchGestureUpdate</reimplementedby>
        <param>
          <type>qreal</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>angleDelta</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="67" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1ac4ab13f55c14149aac8bb09a14047e04" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::pinchGestureEnd</definition>
        <argsstring>(std::chrono::microseconds time)</argsstring>
        <name>pinchGestureEnd</name>
        <qualifiedname>KWin::InputEventSpy::pinchGestureEnd</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1af6da6aabb92981bc16eca93062ac8436">pinchGestureEnd</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1aae5dc8b96c132e73e86b8271723dcad7">pinchGestureEnd</reimplementedby>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="68" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="62" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1ab74da6eea7a3ebf4c5f9ca091d49ce02" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::pinchGestureCancelled</definition>
        <argsstring>(std::chrono::microseconds time)</argsstring>
        <name>pinchGestureCancelled</name>
        <qualifiedname>KWin::InputEventSpy::pinchGestureCancelled</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1a3a7d452d40ffe433f36434b1298056e3">pinchGestureCancelled</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1aa5f71754a630b2ee1c416345407c353c">pinchGestureCancelled</reimplementedby>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="69" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1a6912fab5acc5b46764b393587cfc5bcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::swipeGestureBegin</definition>
        <argsstring>(int fingerCount, std::chrono::microseconds time)</argsstring>
        <name>swipeGestureBegin</name>
        <qualifiedname>KWin::InputEventSpy::swipeGestureBegin</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1a4d44f83a7b6bb711e3e73d46b706f9c2">swipeGestureBegin</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1aed88f331f1b14c06023ed8c4be5158cd">swipeGestureBegin</reimplementedby>
        <param>
          <type>int</type>
          <declname>fingerCount</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="71" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1a72923e161c7fd5839f88e0a7f67b90b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::swipeGestureUpdate</definition>
        <argsstring>(const QPointF &amp;delta, std::chrono::microseconds time)</argsstring>
        <name>swipeGestureUpdate</name>
        <qualifiedname>KWin::InputEventSpy::swipeGestureUpdate</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1ae96bf64f7e1bf856206826ff4f0563cc">swipeGestureUpdate</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1aa6879a23ce681aeb7745663e3e2d9525">swipeGestureUpdate</reimplementedby>
        <param>
          <type>const QPointF &amp;</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="72" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1a29dd3aad67fa704e0455b8fc65327a3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::swipeGestureEnd</definition>
        <argsstring>(std::chrono::microseconds time)</argsstring>
        <name>swipeGestureEnd</name>
        <qualifiedname>KWin::InputEventSpy::swipeGestureEnd</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1a22b237698931c6a27dfbb2112d203658">swipeGestureEnd</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1a9d39690f59aff6a70a5c001f96727978">swipeGestureEnd</reimplementedby>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="73" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1a81f598f6133ea0e38d5382371d247108" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::swipeGestureCancelled</definition>
        <argsstring>(std::chrono::microseconds time)</argsstring>
        <name>swipeGestureCancelled</name>
        <qualifiedname>KWin::InputEventSpy::swipeGestureCancelled</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1aa436009bfa8abcf430ca968ef529ebcf">swipeGestureCancelled</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1a7e01101f01d3eb8fc4c8f73e3da20d3c">swipeGestureCancelled</reimplementedby>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="74" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1a6d5503fce973f4dc475b694e457e8af8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::holdGestureBegin</definition>
        <argsstring>(int fingerCount, std::chrono::microseconds time)</argsstring>
        <name>holdGestureBegin</name>
        <qualifiedname>KWin::InputEventSpy::holdGestureBegin</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1a10aa070b2b2f0def83e9a17062519a5f">holdGestureBegin</reimplementedby>
        <param>
          <type>int</type>
          <declname>fingerCount</declname>
        </param>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="76" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1a3a41cc57de2a013e5d665fb297106f63" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::holdGestureEnd</definition>
        <argsstring>(std::chrono::microseconds time)</argsstring>
        <name>holdGestureEnd</name>
        <qualifiedname>KWin::InputEventSpy::holdGestureEnd</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1a379bcc364c93f4d16ed05fe43371f48f">holdGestureEnd</reimplementedby>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="77" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="90" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1a30b4f89aae399402cdf72c480990f1dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::holdGestureCancelled</definition>
        <argsstring>(std::chrono::microseconds time)</argsstring>
        <name>holdGestureCancelled</name>
        <qualifiedname>KWin::InputEventSpy::holdGestureCancelled</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1a2465e7212e27a5d1b92cc99faddc56f2">holdGestureCancelled</reimplementedby>
        <param>
          <type>std::chrono::microseconds</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="78" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1aad8e1b6c2c9a12e0886fe59300196ac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::switchEvent</definition>
        <argsstring>(SwitchEvent *event)</argsstring>
        <name>switchEvent</name>
        <qualifiedname>KWin::InputEventSpy::switchEvent</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1a2b6ac4a8fa1608050db0c2e0c9a2ad65">switchEvent</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_lid_switch_tracker_1ad35622b48253671a685e1c99418480eb">switchEvent</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_tablet_mode_switch_event_spy_1acb5df2a86d04b74adc2386082a3a3b72">switchEvent</reimplementedby>
        <param>
          <type><ref refid="struct_k_win_1_1_switch_event" kindref="compound">SwitchEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="80" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1a71ac2c509ad154dd53fbc6eb67634c23" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::tabletToolProximityEvent</definition>
        <argsstring>(TabletToolProximityEvent *event)</argsstring>
        <name>tabletToolProximityEvent</name>
        <qualifiedname>KWin::InputEventSpy::tabletToolProximityEvent</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1a234bad00d05f030055a473b01e657f81">tabletToolProximityEvent</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_hide_cursor_effect_1aa4b25e3ed15ad779f08ec03510be2315">tabletToolProximityEvent</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_hide_cursor_spy_1abf97dc117b7bcd7a4c5fe31e6a56d9fa">tabletToolProximityEvent</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1a3d5aacc6790f369e3b516e91deb34efb">tabletToolProximityEvent</reimplementedby>
        <param>
          <type><ref refid="struct_k_win_1_1_tablet_tool_proximity_event" kindref="compound">TabletToolProximityEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="82" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1a9dc8eee8245438767e2b51a4daccd554" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::tabletToolAxisEvent</definition>
        <argsstring>(TabletToolAxisEvent *event)</argsstring>
        <name>tabletToolAxisEvent</name>
        <qualifiedname>KWin::InputEventSpy::tabletToolAxisEvent</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1a692c35fdf71b0ece2a2a962ebe9e4de0">tabletToolAxisEvent</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_hide_cursor_effect_1ad999318fa05523e9527d1e5113ccff92">tabletToolAxisEvent</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1a4837e1d54780ce293d4be847dbba2bfe">tabletToolAxisEvent</reimplementedby>
        <param>
          <type><ref refid="struct_k_win_1_1_tablet_tool_axis_event" kindref="compound">TabletToolAxisEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="83" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1a4a6dbc01b4a0809a7ffd1d9012478187" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::tabletToolTipEvent</definition>
        <argsstring>(TabletToolTipEvent *event)</argsstring>
        <name>tabletToolTipEvent</name>
        <qualifiedname>KWin::InputEventSpy::tabletToolTipEvent</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1a133aa4158b1b6793e343b2e99470886a">tabletToolTipEvent</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_hide_cursor_effect_1a5ad505ccf29b1597320d0e08d59f190d">tabletToolTipEvent</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1aa0228a6daf85e6ddfe626112b96c2746">tabletToolTipEvent</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_window_interacted_spy_1aa6d8b6fa222888179ee79348760387cc">tabletToolTipEvent</reimplementedby>
        <param>
          <type><ref refid="struct_k_win_1_1_tablet_tool_tip_event" kindref="compound">TabletToolTipEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="84" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1a41541ccc5d9d7b80b9c30210213f341f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::tabletToolButtonEvent</definition>
        <argsstring>(TabletToolButtonEvent *event)</argsstring>
        <name>tabletToolButtonEvent</name>
        <qualifiedname>KWin::InputEventSpy::tabletToolButtonEvent</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1a0ee63f36d0ae898b677e5706e74561b4">tabletToolButtonEvent</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1a4b4c64d616c323ad6a51b6674b37449c">tabletToolButtonEvent</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_window_interacted_spy_1af40a5af10be8ca7f979c2ce39dfde6d3">tabletToolButtonEvent</reimplementedby>
        <param>
          <type><ref refid="struct_k_win_1_1_tablet_tool_button_event" kindref="compound">TabletToolButtonEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="85" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1a9cf667727e6bc064baaa387167c149d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::tabletPadButtonEvent</definition>
        <argsstring>(TabletPadButtonEvent *event)</argsstring>
        <name>tabletPadButtonEvent</name>
        <qualifiedname>KWin::InputEventSpy::tabletPadButtonEvent</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1a2ff3aeab74c83c8cab6080338350970d">tabletPadButtonEvent</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1a024992c41fa98fdc2e29698943b91407">tabletPadButtonEvent</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_window_interacted_spy_1ada0bc9589a735147ecf9cfc96beb31f1">tabletPadButtonEvent</reimplementedby>
        <param>
          <type><ref refid="struct_k_win_1_1_tablet_pad_button_event" kindref="compound">TabletPadButtonEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="86" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1ac7eba23b7d72733f8d13e523396ab31c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::tabletPadStripEvent</definition>
        <argsstring>(TabletPadStripEvent *event)</argsstring>
        <name>tabletPadStripEvent</name>
        <qualifiedname>KWin::InputEventSpy::tabletPadStripEvent</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1acbfe6fd99e011dcd11b6742c2796cbe1">tabletPadStripEvent</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1a4f6ca7c0b1a9216c3154b8a6bc243759">tabletPadStripEvent</reimplementedby>
        <param>
          <type><ref refid="struct_k_win_1_1_tablet_pad_strip_event" kindref="compound">TabletPadStripEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="87" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_input_event_spy_1abc90adebce1923ae01a2267dc476a072" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::InputEventSpy::tabletPadRingEvent</definition>
        <argsstring>(TabletPadRingEvent *event)</argsstring>
        <name>tabletPadRingEvent</name>
        <qualifiedname>KWin::InputEventSpy::tabletPadRingEvent</qualifiedname>
        <reimplementedby refid="class_k_win_1_1_debug_console_filter_1aad400c85b63fe3debac56ee1f7badec8">tabletPadRingEvent</reimplementedby>
        <reimplementedby refid="class_k_win_1_1_user_activity_spy_1a26d477e73ca50bad6eaff48fec49867e">tabletPadRingEvent</reimplementedby>
        <param>
          <type><ref refid="struct_k_win_1_1_tablet_pad_ring_event" kindref="compound">TabletPadRingEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/input_event_spy.h" line="88" column="18" bodyfile="kwin/src/input_event_spy.cpp" bodystart="126" bodyend="128"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Base class for spying on input events inside <ref refid="class_k_win_1_1_input_redirection" kindref="compound">InputRedirection</ref>.</para>
<para>This class is quite similar to <ref refid="class_k_win_1_1_input_event_filter" kindref="compound">InputEventFilter</ref>, except that it does not support event filtering. Each <ref refid="class_k_win_1_1_input_event_spy" kindref="compound">InputEventSpy</ref> gets to see all input events, the processing happens prior to sending events through the InputEventFilters.</para>
<para>Deleting an instance of <ref refid="class_k_win_1_1_input_event_spy" kindref="compound">InputEventSpy</ref> automatically uninstalls it from <ref refid="class_k_win_1_1_input_redirection" kindref="compound">InputRedirection</ref>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>KWin::BarrierSpy</label>
        <link refid="class_k_win_1_1_barrier_spy"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>KWin::DebugConsoleFilter</label>
        <link refid="class_k_win_1_1_debug_console_filter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>KWin::HideCursorEffect</label>
        <link refid="class_k_win_1_1_hide_cursor_effect"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>KWin::HideCursorSpy</label>
        <link refid="class_k_win_1_1_hide_cursor_spy"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::InputEventSpy</label>
        <link refid="class_k_win_1_1_input_event_spy"/>
      </node>
      <node id="6">
        <label>KWin::KeyStateChangedSpy</label>
        <link refid="class_k_win_1_1_key_state_changed_spy"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>KWin::KeyboardLayout</label>
        <link refid="class_k_win_1_1_keyboard_layout"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>KWin::KeyboardRepeat</label>
        <link refid="class_k_win_1_1_keyboard_repeat"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>KWin::LidSwitchTracker</label>
        <link refid="class_k_win_1_1_lid_switch_tracker"/>
        <childnode refid="1" relation="private-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>KWin::ModifiersChangedSpy</label>
        <link refid="class_k_win_1_1_modifiers_changed_spy"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>KWin::OnScreenNotificationInputEventSpy</label>
        <link refid="class_k_win_1_1_on_screen_notification_input_event_spy"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>KWin::ShakeCursorEffect</label>
        <link refid="class_k_win_1_1_shake_cursor_effect"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>KWin::TabletModeSwitchEventSpy</label>
        <link refid="class_k_win_1_1_tablet_mode_switch_event_spy"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>KWin::UserActivitySpy</label>
        <link refid="class_k_win_1_1_user_activity_spy"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>KWin::WindowInteractedSpy</label>
        <link refid="class_k_win_1_1_window_interacted_spy"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="kwin/src/input_event_spy.h" line="42" column="1" bodyfile="kwin/src/input_event_spy.h" bodystart="43" bodyend="89"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_input_event_spy_1a6d5503fce973f4dc475b694e457e8af8" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>holdGestureBegin</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1a30b4f89aae399402cdf72c480990f1dd" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>holdGestureCancelled</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1a3a41cc57de2a013e5d665fb297106f63" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>holdGestureEnd</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1a57ca2c40b812786fd52212bab1b2ec1c" prot="public" virt="non-virtual"><scope>KWin::InputEventSpy</scope><name>InputEventSpy</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1ad6fe36c33c15628757cf73b201402554" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>keyboardKey</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1a80fc99dbbd1abb780319e9e6a732dd7b" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>pinchGestureBegin</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1ab74da6eea7a3ebf4c5f9ca091d49ce02" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>pinchGestureCancelled</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1ac4ab13f55c14149aac8bb09a14047e04" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>pinchGestureEnd</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1aec624bc6f49a7718c9afd404b2413ba6" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>pinchGestureUpdate</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1affd755ad4b5017dc625f10377b152fb8" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>pointerAxis</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1a5f9efdef8191faa288b3fc6ee2a4c43b" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>pointerButton</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1a3ccfe3b095e67c4a0a3aff7827de86ed" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>pointerMotion</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1a6912fab5acc5b46764b393587cfc5bcd" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>swipeGestureBegin</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1a81f598f6133ea0e38d5382371d247108" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>swipeGestureCancelled</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1a29dd3aad67fa704e0455b8fc65327a3c" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>swipeGestureEnd</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1a72923e161c7fd5839f88e0a7f67b90b1" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>swipeGestureUpdate</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1aad8e1b6c2c9a12e0886fe59300196ac3" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>switchEvent</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1a9cf667727e6bc064baaa387167c149d0" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>tabletPadButtonEvent</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1abc90adebce1923ae01a2267dc476a072" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>tabletPadRingEvent</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1ac7eba23b7d72733f8d13e523396ab31c" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>tabletPadStripEvent</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1a9dc8eee8245438767e2b51a4daccd554" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>tabletToolAxisEvent</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1a41541ccc5d9d7b80b9c30210213f341f" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>tabletToolButtonEvent</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1a71ac2c509ad154dd53fbc6eb67634c23" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>tabletToolProximityEvent</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1a4a6dbc01b4a0809a7ffd1d9012478187" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>tabletToolTipEvent</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1a507ecbd332c0511d81d88c135f676ec0" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>touchDown</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1a045ff5dafa2b5893cf128a899aab3a59" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>touchMotion</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1ac3ddba7aa87645ba3945c4b32b5da39c" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>touchUp</name></member>
      <member refid="class_k_win_1_1_input_event_spy_1a6e84ba72ddfb5f7f4555ed716e8408be" prot="public" virt="virtual"><scope>KWin::InputEventSpy</scope><name>~InputEventSpy</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
