<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="test__plasma__virtual__desktop_8cpp" kind="file" language="C++">
    <compoundname>test_plasma_virtual_desktop.cpp</compoundname>
    <includes local="no">QSignalSpy</includes>
    <includes local="no">QTest</includes>
    <includes refid="wayland_2compositor_8h" local="yes">wayland/compositor.h</includes>
    <includes refid="display_8h" local="yes">wayland/display.h</includes>
    <includes refid="plasmavirtualdesktop_8h" local="yes">wayland/plasmavirtualdesktop.h</includes>
    <includes refid="plasmawindowmanagement_8h" local="yes">wayland/plasmawindowmanagement.h</includes>
    <includes local="yes">KWayland/Client/compositor.h</includes>
    <includes local="yes">KWayland/Client/connection_thread.h</includes>
    <includes local="yes">KWayland/Client/event_queue.h</includes>
    <includes local="yes">KWayland/Client/plasmavirtualdesktop.h</includes>
    <includes local="yes">KWayland/Client/plasmawindowmanagement.h</includes>
    <includes local="yes">KWayland/Client/region.h</includes>
    <includes local="yes">KWayland/Client/registry.h</includes>
    <includes local="yes">KWayland/Client/surface.h</includes>
    <includes local="yes">test_plasma_virtual_desktop.moc</includes>
    <incdepgraph>
      <node id="1">
        <label>kwin/autotests/wayland/client/test_plasma_virtual_desktop.cpp</label>
        <link refid="test__plasma__virtual__desktop_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>core/colorspace.h</label>
        <link refid="colorspace_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>core/output.h</label>
        <link refid="core_2output_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>core/renderbackend.h</label>
        <link refid="renderbackend_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>renderloop.h</label>
        <link refid="renderloop_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>core/rendertarget.h</label>
        <link refid="rendertarget_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>effect/globals.h</label>
        <link refid="globals_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>utils/edid.h</label>
        <link refid="edid_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>utils/filedescriptor.h</label>
        <link refid="filedescriptor_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>wayland/compositor.h</label>
        <link refid="wayland_2compositor_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>wayland/display.h</label>
        <link refid="display_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>wayland/plasmavirtualdesktop.h</label>
        <link refid="plasmavirtualdesktop_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>wayland/plasmawindowmanagement.h</label>
        <link refid="plasmawindowmanagement_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>surface.h</label>
        <link refid="surface_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>KWayland/Client/compositor.h</label>
      </node>
      <node id="37">
        <label>KWayland/Client/connection_thread.h</label>
      </node>
      <node id="38">
        <label>KWayland/Client/event_queue.h</label>
      </node>
      <node id="39">
        <label>KWayland/Client/plasmavirtualdesktop.h</label>
      </node>
      <node id="40">
        <label>KWayland/Client/plasmawindowmanagement.h</label>
      </node>
      <node id="41">
        <label>KWayland/Client/region.h</label>
      </node>
      <node id="42">
        <label>KWayland/Client/registry.h</label>
      </node>
      <node id="43">
        <label>KWayland/Client/surface.h</label>
      </node>
      <node id="21">
        <label>QByteArray</label>
      </node>
      <node id="15">
        <label>QCoreApplication</label>
      </node>
      <node id="24">
        <label>QDebug</label>
      </node>
      <node id="16">
        <label>QImage</label>
      </node>
      <node id="22">
        <label>QList</label>
      </node>
      <node id="9">
        <label>QMatrix4x4</label>
      </node>
      <node id="19">
        <label>QObject</label>
      </node>
      <node id="17">
        <label>QPoint</label>
      </node>
      <node id="30">
        <label>QPointer</label>
      </node>
      <node id="25">
        <label>QRect</label>
      </node>
      <node id="32">
        <label>QRegion</label>
      </node>
      <node id="2">
        <label>QSignalSpy</label>
      </node>
      <node id="23">
        <label>QSize</label>
      </node>
      <node id="3">
        <label>QTest</label>
      </node>
      <node id="26">
        <label>QUuid</label>
      </node>
      <node id="18">
        <label>QVariant</label>
      </node>
      <node id="10">
        <label>QVector2D</label>
      </node>
      <node id="14">
        <label>config-kwin.h</label>
      </node>
      <node id="5">
        <label>kwin_export.h</label>
      </node>
      <node id="31">
        <label>memory</label>
      </node>
      <node id="8">
        <label>optional</label>
      </node>
      <node id="44">
        <label>test_plasma_virtual_desktop.moc</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_test_virtual_desktop" prot="public">TestVirtualDesktop</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="test__plasma__virtual__desktop_8cpp_1ae7181d4337dbd72c3d55c4a015b03da0" prot="public" static="no">
        <name>CLEANUP</name>
        <param><defname>variable</defname></param>
        <initializer>    if (variable) {         \
        delete variable;    \
        variable = nullptr; \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/wayland/client/test_plasma_virtual_desktop.cpp" line="142" column="9"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="test__plasma__virtual__desktop_8cpp_1a485d6ddd568caea0908934bfdb9fbadb" prot="public" static="yes" mutable="no">
        <type>const QString</type>
        <definition>const QString s_socketName</definition>
        <argsstring></argsstring>
        <name>s_socketName</name>
        <initializer>= QStringLiteral(&quot;kwayland-test-wayland-virtual-desktop-0&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/autotests/wayland/client/test_plasma_virtual_desktop.cpp" line="61" column="22" bodyfile="kwin/autotests/wayland/client/test_plasma_virtual_desktop.cpp" bodystart="61" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2018<sp/>Marco<sp/>Martin<sp/>&lt;mart@kde.org&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>LGPL-2.1-only<sp/>OR<sp/>LGPL-3.0-only<sp/>OR<sp/>LicenseRef-KDE-Accepted-LGPL</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Qt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QSignalSpy&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QTest&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KWin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wayland_2compositor_8h" kindref="compound">wayland/compositor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="display_8h" kindref="compound">wayland/display.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="plasmavirtualdesktop_8h" kindref="compound">wayland/plasmavirtualdesktop.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="plasmawindowmanagement_8h" kindref="compound">wayland/plasmawindowmanagement.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/compositor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/connection_thread.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/event_queue.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/plasmavirtualdesktop.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/plasmawindowmanagement.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/region.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/registry.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KWayland/Client/surface.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="class_test_virtual_desktop" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_test_virtual_desktop_1a57b98afc45219d4bc19a256710d2052f" kindref="member">TestVirtualDesktop</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QObject</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_test_virtual_desktop_1a57b98afc45219d4bc19a256710d2052f" kindref="member">TestVirtualDesktop</ref>(QObject<sp/>*parent<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Q_SLOTS:</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanup();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testCreate();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testSetRows();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testConnectNewClient();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testDestroy();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testActivate();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testEnterLeaveDesktop();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testAllDesktops();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testCreateRequested();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRemoveRequested();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_display" kindref="compound">KWin::Display</ref><sp/>*m_display;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_compositor_interface" kindref="compound">KWin::CompositorInterface</ref><sp/>*m_compositorInterface;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_plasma_virtual_desktop_management_interface" kindref="compound">KWin::PlasmaVirtualDesktopManagementInterface</ref><sp/>*m_plasmaVirtualDesktopManagementInterface;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_plasma_window_management_interface" kindref="compound">KWin::PlasmaWindowManagementInterface</ref><sp/>*m_windowManagementInterface;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_plasma_window_interface" kindref="compound">KWin::PlasmaWindowInterface</ref><sp/>*m_windowInterface;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::ConnectionThread<sp/>*m_connection;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::Compositor<sp/>*m_compositor;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::PlasmaVirtualDesktopManagement<sp/>*m_plasmaVirtualDesktopManagement;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::EventQueue<sp/>*m_queue;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::PlasmaWindowManagement<sp/>*m_windowManagement;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::PlasmaWindow<sp/>*m_window;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>QThread<sp/>*m_thread;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>s_socketName<sp/>=<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;kwayland-test-wayland-virtual-desktop-0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="class_test_virtual_desktop_1a57b98afc45219d4bc19a256710d2052f" refkind="member"><highlight class="normal"><ref refid="class_test_virtual_desktop_1a57b98afc45219d4bc19a256710d2052f" kindref="member">TestVirtualDesktop::TestVirtualDesktop</ref>(QObject<sp/>*parent)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>QObject(parent)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_display(nullptr)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_compositorInterface(nullptr)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_connection(nullptr)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_compositor(nullptr)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_queue(nullptr)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_thread(nullptr)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestVirtualDesktop::init()</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_k_win" kindref="compound">KWin</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_display;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_display" kindref="compound">KWin::Display</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display-&gt;<ref refid="class_k_win_1_1_display_1aa4c4acfe47f745065df276fab792b431" kindref="member">addSocketName</ref>(s_socketName);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>m_display-&gt;<ref refid="class_k_win_1_1_display_1af36443417f1832645373ce713cb226c7" kindref="member">start</ref>();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_display-&gt;<ref refid="class_k_win_1_1_display_1aa50d346a6be40bd7db06214c0350456a" kindref="member">isRunning</ref>());</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>connection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>KWayland::Client::ConnectionThread;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>connectedSpy(m_connection,<sp/>&amp;KWayland::Client::ConnectionThread::connected);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection-&gt;setSocketName(s_socketName);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>m_thread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QThread(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection-&gt;moveToThread(m_thread);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>m_thread-&gt;start();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>m_connection-&gt;initConnection();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(connectedSpy.wait());</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>m_queue<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>KWayland::Client::EventQueue(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!m_queue-&gt;isValid());</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>m_queue-&gt;setup(m_connection);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_queue-&gt;isValid());</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::Registry<sp/>registry;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>compositorSpy(&amp;registry,<sp/>&amp;KWayland::Client::Registry::compositorAnnounced);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>plasmaVirtualDesktopManagementSpy(&amp;registry,<sp/>&amp;KWayland::Client::Registry::plasmaVirtualDesktopManagementAnnounced);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowManagementSpy(&amp;registry,<sp/>&amp;KWayland::Client::Registry::plasmaWindowManagementAnnounced);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!registry.eventQueue());</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.setEventQueue(m_queue);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(registry.eventQueue(),<sp/>m_queue);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.create(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(registry.isValid());</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.setup();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>m_compositorInterface<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_compositor_interface" kindref="compound">CompositorInterface</ref>(m_display,<sp/>m_display);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(compositorSpy.wait());</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>m_compositor<sp/>=<sp/>registry.createCompositor(compositorSpy.first().first().value&lt;quint32&gt;(),<sp/>compositorSpy.first().last().value&lt;quint32&gt;(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>m_plasmaVirtualDesktopManagementInterface<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_plasma_virtual_desktop_management_interface" kindref="compound">PlasmaVirtualDesktopManagementInterface</ref>(m_display,<sp/>m_display);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(plasmaVirtualDesktopManagementSpy.wait());</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>m_plasmaVirtualDesktopManagement<sp/>=<sp/>registry.createPlasmaVirtualDesktopManagement(plasmaVirtualDesktopManagementSpy.first().first().value&lt;quint32&gt;(),</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plasmaVirtualDesktopManagementSpy.first().last().value&lt;quint32&gt;(),</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowManagementInterface<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_k_win_1_1_plasma_window_management_interface" kindref="compound">PlasmaWindowManagementInterface</ref>(m_display,<sp/>m_display);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowManagementInterface-&gt;<ref refid="class_k_win_1_1_plasma_window_management_interface_1ac7651342d0b847adf16aecd58f1699a0" kindref="member">setPlasmaVirtualDesktopManagementInterface</ref>(m_plasmaVirtualDesktopManagementInterface);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(windowManagementSpy.wait());</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowManagement<sp/>=</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.createPlasmaWindowManagement(windowManagementSpy.first().first().value&lt;quint32&gt;(),<sp/>windowManagementSpy.first().last().value&lt;quint32&gt;(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>windowSpy(m_windowManagement,<sp/>&amp;KWayland::Client::PlasmaWindowManagement::windowCreated);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface<sp/>=<sp/>m_windowManagementInterface-&gt;<ref refid="class_k_win_1_1_plasma_window_management_interface_1a765c8b6b3715d0025176ce746cba7ec3" kindref="member">createWindow</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>QUuid::createUuid());</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;<ref refid="class_k_win_1_1_plasma_window_interface_1ab3bb5923033ca714ed8088c6224caadd" kindref="member">setPid</ref>(1337);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(windowSpy.wait());</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>m_window<sp/>=<sp/>windowSpy.first().first().value&lt;KWayland::Client::PlasmaWindow<sp/>*&gt;();</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestVirtualDesktop::cleanup()</highlight></codeline>
<codeline lineno="141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLEANUP(variable)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(variable)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delete<sp/>variable;<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variable<sp/>=<sp/>nullptr;<sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__plasma__virtual__desktop_8cpp_1ae7181d4337dbd72c3d55c4a015b03da0" kindref="member">CLEANUP</ref>(m_compositor)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__plasma__virtual__desktop_8cpp_1ae7181d4337dbd72c3d55c4a015b03da0" kindref="member">CLEANUP</ref>(m_plasmaVirtualDesktopManagement)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__plasma__virtual__desktop_8cpp_1ae7181d4337dbd72c3d55c4a015b03da0" kindref="member">CLEANUP</ref>(m_windowInterface)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__plasma__virtual__desktop_8cpp_1ae7181d4337dbd72c3d55c4a015b03da0" kindref="member">CLEANUP</ref>(m_windowManagement)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__plasma__virtual__desktop_8cpp_1ae7181d4337dbd72c3d55c4a015b03da0" kindref="member">CLEANUP</ref>(m_queue)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_connection)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_connection-&gt;deleteLater();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_connection<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_thread)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_thread-&gt;quit();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_thread-&gt;wait();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_thread;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_thread<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__plasma__virtual__desktop_8cpp_1ae7181d4337dbd72c3d55c4a015b03da0" kindref="member">CLEANUP</ref>(m_compositorInterface)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__plasma__virtual__desktop_8cpp_1ae7181d4337dbd72c3d55c4a015b03da0" kindref="member">CLEANUP</ref>(m_plasmaVirtualDesktopManagementInterface)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__plasma__virtual__desktop_8cpp_1ae7181d4337dbd72c3d55c4a015b03da0" kindref="member">CLEANUP</ref>(m_windowManagementInterface)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__plasma__virtual__desktop_8cpp_1ae7181d4337dbd72c3d55c4a015b03da0" kindref="member">CLEANUP</ref>(m_display)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>CLEANUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestVirtualDesktop::testCreate()</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>desktopCreatedSpy(m_plasmaVirtualDesktopManagement,<sp/>&amp;KWayland::Client::PlasmaVirtualDesktopManagement::desktopCreated);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>managementDoneSpy(m_plasmaVirtualDesktopManagement,<sp/>&amp;KWayland::Client::PlasmaVirtualDesktopManagement::done);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>this<sp/>createDesktop<sp/>bind()<sp/>isn&apos;t<sp/>called<sp/>already,<sp/>the<sp/>desktopadded<sp/>signals<sp/>will<sp/>be<sp/>sent<sp/>after<sp/>bind<sp/>happened</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>KWin::PlasmaVirtualDesktopInterface<sp/>*desktop1Int<sp/>=<sp/>m_plasmaVirtualDesktopManagementInterface-&gt;createDesktop(QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>desktop1Int-&gt;<ref refid="class_k_win_1_1_plasma_virtual_desktop_interface_1a8e6e3dbbcf7c11c1bb7572673a2bfa66" kindref="member">setName</ref>(</highlight><highlight class="stringliteral">&quot;Desktop<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(desktopCreatedSpy.wait());</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;QVariant&gt;<sp/>arguments<sp/>=<sp/>desktopCreatedSpy.takeFirst();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(arguments.at(0).toString(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(arguments.at(1).toUInt(),<sp/>(quint32)0);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>m_plasmaVirtualDesktopManagementInterface-&gt;sendDone();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(managementDoneSpy.wait());</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_plasmaVirtualDesktopManagement-&gt;desktops().length(),<sp/>1);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::PlasmaVirtualDesktop<sp/>*desktop1<sp/>=<sp/>m_plasmaVirtualDesktopManagement-&gt;desktops().first();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>desktop1DoneSpy(desktop1,<sp/>&amp;KWayland::Client::PlasmaVirtualDesktop::done);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>desktop1Int-&gt;<ref refid="class_k_win_1_1_plasma_virtual_desktop_interface_1ac1bc37e5cbdb88cd323b553a0be222b4" kindref="member">sendDone</ref>();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(desktop1DoneSpy.wait());</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(desktop1-&gt;id(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(desktop1-&gt;name(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;Desktop<sp/>1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>those<sp/>createDesktop<sp/>the<sp/>bind<sp/>will<sp/>already<sp/>be<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>KWin::PlasmaVirtualDesktopInterface<sp/>*desktop2Int<sp/>=<sp/>m_plasmaVirtualDesktopManagementInterface-&gt;createDesktop(QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-2&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>desktop2Int-&gt;<ref refid="class_k_win_1_1_plasma_virtual_desktop_interface_1a8e6e3dbbcf7c11c1bb7572673a2bfa66" kindref="member">setName</ref>(</highlight><highlight class="stringliteral">&quot;Desktop<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(desktopCreatedSpy.wait());</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>arguments<sp/>=<sp/>desktopCreatedSpy.takeFirst();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(arguments.at(0).toString(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-2&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(arguments.at(1).toUInt(),<sp/>(quint32)1);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_plasmaVirtualDesktopManagement-&gt;desktops().length(),<sp/>2);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>KWin::PlasmaVirtualDesktopInterface<sp/>*desktop3Int<sp/>=<sp/>m_plasmaVirtualDesktopManagementInterface-&gt;createDesktop(QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-3&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>desktop3Int-&gt;<ref refid="class_k_win_1_1_plasma_virtual_desktop_interface_1a8e6e3dbbcf7c11c1bb7572673a2bfa66" kindref="member">setName</ref>(</highlight><highlight class="stringliteral">&quot;Desktop<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(desktopCreatedSpy.wait());</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>arguments<sp/>=<sp/>desktopCreatedSpy.takeFirst();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(arguments.at(0).toString(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-3&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_plasmaVirtualDesktopManagement-&gt;desktops().length(),<sp/>3);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>m_plasmaVirtualDesktopManagementInterface-&gt;sendDone();</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(managementDoneSpy.wait());</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>clients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::PlasmaVirtualDesktop<sp/>*desktop2<sp/>=<sp/>m_plasmaVirtualDesktopManagement-&gt;desktops()[1];</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>desktop2DoneSpy(desktop2,<sp/>&amp;KWayland::Client::PlasmaVirtualDesktop::done);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>desktop2Int-&gt;<ref refid="class_k_win_1_1_plasma_virtual_desktop_interface_1ac1bc37e5cbdb88cd323b553a0be222b4" kindref="member">sendDone</ref>();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(desktop2DoneSpy.wait());</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::PlasmaVirtualDesktop<sp/>*desktop3<sp/>=<sp/>m_plasmaVirtualDesktopManagement-&gt;desktops()[2];</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>desktop3DoneSpy(desktop3,<sp/>&amp;KWayland::Client::PlasmaVirtualDesktop::done);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>desktop3Int-&gt;<ref refid="class_k_win_1_1_plasma_virtual_desktop_interface_1ac1bc37e5cbdb88cd323b553a0be222b4" kindref="member">sendDone</ref>();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(desktop3DoneSpy.wait());</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(desktop1-&gt;id(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(desktop1-&gt;name(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;Desktop<sp/>1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(desktop2-&gt;id(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-2&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(desktop2-&gt;name(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;Desktop<sp/>2&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(desktop3-&gt;id(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-3&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(desktop3-&gt;name(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;Desktop<sp/>3&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>coherence<sp/>of<sp/>order<sp/>between<sp/>client<sp/>and<sp/>server</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_plasmaVirtualDesktopManagementInterface-&gt;desktops().length(),<sp/>3);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_plasmaVirtualDesktopManagement-&gt;desktops().length(),<sp/>3);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_plasmaVirtualDesktopManagement-&gt;desktops().length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(m_plasmaVirtualDesktopManagementInterface-&gt;desktops().at(i)-&gt;id(),<sp/>m_plasmaVirtualDesktopManagement-&gt;desktops().at(i)-&gt;id());</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestVirtualDesktop::testSetRows()</highlight></codeline>
<codeline lineno="244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rebuild<sp/>some<sp/>desktops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>testCreate();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>rowsChangedSpy(m_plasmaVirtualDesktopManagement,<sp/>&amp;KWayland::Client::PlasmaVirtualDesktopManagement::rowsChanged);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>m_plasmaVirtualDesktopManagementInterface-&gt;setRows(3);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(rowsChangedSpy.wait());</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_plasmaVirtualDesktopManagement-&gt;rows(),<sp/>3);</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestVirtualDesktop::testConnectNewClient()</highlight></codeline>
<codeline lineno="256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rebuild<sp/>some<sp/>desktops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>testCreate();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::Registry<sp/>registry;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!registry.eventQueue());</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.setEventQueue(m_queue);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(registry.eventQueue(),<sp/>m_queue);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.create(m_connection-&gt;display());</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(registry.isValid());</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.setup();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>plasmaVirtualDesktopManagementSpy(&amp;registry,<sp/>&amp;KWayland::Client::Registry::plasmaVirtualDesktopManagementAnnounced);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(plasmaVirtualDesktopManagementSpy.wait());</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::PlasmaVirtualDesktopManagement<sp/>*otherPlasmaVirtualDesktopManagement<sp/>=</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.createPlasmaVirtualDesktopManagement(plasmaVirtualDesktopManagementSpy.first().first().value&lt;quint32&gt;(),</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plasmaVirtualDesktopManagementSpy.first().last().value&lt;quint32&gt;(),</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>managementDoneSpy(otherPlasmaVirtualDesktopManagement,<sp/>&amp;KWayland::Client::PlasmaVirtualDesktopManagement::done);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(managementDoneSpy.wait());</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(otherPlasmaVirtualDesktopManagement-&gt;desktops().length(),<sp/>3);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>otherPlasmaVirtualDesktopManagement;</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestVirtualDesktop::testDestroy()</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rebuild<sp/>some<sp/>desktops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>testCreate();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>KWin::PlasmaVirtualDesktopInterface<sp/>*desktop1Int<sp/>=<sp/>m_plasmaVirtualDesktopManagementInterface-&gt;desktops().first();</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::PlasmaVirtualDesktop<sp/>*desktop1<sp/>=<sp/>m_plasmaVirtualDesktopManagement-&gt;desktops().first();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>desktop1IntDestroyedSpy(desktop1Int,<sp/>&amp;QObject::destroyed);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>desktop1DestroyedSpy(desktop1,<sp/>&amp;QObject::destroyed);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>desktop1RemovedSpy(desktop1,<sp/>&amp;KWayland::Client::PlasmaVirtualDesktop::removed);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>m_plasmaVirtualDesktopManagementInterface-&gt;removeDesktop(QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>that<sp/>both<sp/>server<sp/>and<sp/>client<sp/>desktoip<sp/>interfaces<sp/>go<sp/>away</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!desktop1IntDestroyedSpy.isEmpty());</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(desktop1RemovedSpy.wait());</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(desktop1DestroyedSpy.wait());</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>coherence<sp/>of<sp/>order<sp/>between<sp/>client<sp/>and<sp/>server</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_plasmaVirtualDesktopManagementInterface-&gt;desktops().length(),<sp/>2);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_plasmaVirtualDesktopManagement-&gt;desktops().length(),<sp/>2);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_plasmaVirtualDesktopManagement-&gt;desktops().length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCOMPARE(m_plasmaVirtualDesktopManagementInterface-&gt;desktops().at(i)-&gt;id(),<sp/>m_plasmaVirtualDesktopManagement-&gt;desktops().at(i)-&gt;id());</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>the<sp/>desktopRemoved<sp/>signal<sp/>of<sp/>the<sp/>manager,<sp/>remove<sp/>another<sp/>desktop<sp/>as<sp/>the<sp/>signals<sp/>can&apos;t<sp/>be<sp/>tested<sp/>at<sp/>the<sp/>same<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>desktopManagerRemovedSpy(m_plasmaVirtualDesktopManagement,<sp/>&amp;KWayland::Client::PlasmaVirtualDesktopManagement::desktopRemoved);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>m_plasmaVirtualDesktopManagementInterface-&gt;removeDesktop(QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-2&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(desktopManagerRemovedSpy.wait());</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(desktopManagerRemovedSpy.takeFirst().at(0).toString(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-2&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_plasmaVirtualDesktopManagementInterface-&gt;desktops().length(),<sp/>1);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_plasmaVirtualDesktopManagement-&gt;desktops().length(),<sp/>1);</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestVirtualDesktop::testActivate()</highlight></codeline>
<codeline lineno="322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rebuild<sp/>some<sp/>desktops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>testCreate();</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>KWin::PlasmaVirtualDesktopInterface<sp/>*desktop1Int<sp/>=<sp/>m_plasmaVirtualDesktopManagementInterface-&gt;desktops().first();</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::PlasmaVirtualDesktop<sp/>*desktop1<sp/>=<sp/>m_plasmaVirtualDesktopManagement-&gt;desktops().first();</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(desktop1-&gt;isActive());</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(desktop1Int-&gt;<ref refid="class_k_win_1_1_plasma_virtual_desktop_interface_1a02df1cfe6b3262bca2ca476776f9b1b6" kindref="member">isActive</ref>());</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>KWin::PlasmaVirtualDesktopInterface<sp/>*desktop2Int<sp/>=<sp/>m_plasmaVirtualDesktopManagementInterface-&gt;desktops()[1];</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::PlasmaVirtualDesktop<sp/>*desktop2<sp/>=<sp/>m_plasmaVirtualDesktopManagement-&gt;desktops()[1];</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!desktop2Int-&gt;<ref refid="class_k_win_1_1_plasma_virtual_desktop_interface_1a02df1cfe6b3262bca2ca476776f9b1b6" kindref="member">isActive</ref>());</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>requestActivateSpy(desktop2Int,<sp/>&amp;<ref refid="class_k_win_1_1_plasma_virtual_desktop_interface_1a0dc3fba3d0c4636bedf63e2518364a42" kindref="member">KWin::PlasmaVirtualDesktopInterface::activateRequested</ref>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>activatedSpy(desktop2,<sp/>&amp;KWayland::Client::PlasmaVirtualDesktop::activated);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>desktop2-&gt;requestActivate();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(requestActivateSpy.wait());</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>simulates<sp/>a<sp/>compositor<sp/>which<sp/>supports<sp/>only<sp/>one<sp/>active<sp/>desktop<sp/>at<sp/>a<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*deskInt<sp/>:<sp/>m_plasmaVirtualDesktopManagementInterface-&gt;desktops())<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(deskInt-&gt;id()<sp/>==<sp/>desktop2-&gt;id())<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deskInt-&gt;setActive(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deskInt-&gt;setActive(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(activatedSpy.wait());</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>correct<sp/>state<sp/>in<sp/>the<sp/>server</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(desktop2Int-&gt;<ref refid="class_k_win_1_1_plasma_virtual_desktop_interface_1a02df1cfe6b3262bca2ca476776f9b1b6" kindref="member">isActive</ref>());</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!desktop1Int-&gt;<ref refid="class_k_win_1_1_plasma_virtual_desktop_interface_1a02df1cfe6b3262bca2ca476776f9b1b6" kindref="member">isActive</ref>());</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>correct<sp/>state<sp/>in<sp/>the<sp/>client</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(desktop2Int-&gt;<ref refid="class_k_win_1_1_plasma_virtual_desktop_interface_1a02df1cfe6b3262bca2ca476776f9b1b6" kindref="member">isActive</ref>());</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!desktop1Int-&gt;<ref refid="class_k_win_1_1_plasma_virtual_desktop_interface_1a02df1cfe6b3262bca2ca476776f9b1b6" kindref="member">isActive</ref>());</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>the<sp/>deactivated<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>deactivatedSpy(desktop2,<sp/>&amp;KWayland::Client::PlasmaVirtualDesktop::deactivated);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*deskInt<sp/>:<sp/>m_plasmaVirtualDesktopManagementInterface-&gt;desktops())<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(deskInt-&gt;id()<sp/>==<sp/>desktop1-&gt;id())<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deskInt-&gt;setActive(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deskInt-&gt;setActive(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(deactivatedSpy.wait());</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestVirtualDesktop::testEnterLeaveDesktop()</highlight></codeline>
<codeline lineno="372"><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>testCreate();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>enterRequestedSpy(m_windowInterface,<sp/>&amp;<ref refid="class_k_win_1_1_plasma_window_interface_1ae529eb9362ecf903777c74e3fc596d48" kindref="member">KWin::PlasmaWindowInterface::enterPlasmaVirtualDesktopRequested</ref>);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>m_window-&gt;requestEnterVirtualDesktop(QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(enterRequestedSpy.wait());</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(enterRequestedSpy.takeFirst().at(0).toString(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>virtualDesktopEnteredSpy(m_window,<sp/>&amp;KWayland::Client::PlasmaWindow::plasmaVirtualDesktopEntered);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>agree<sp/>to<sp/>the<sp/>request</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;addPlasmaVirtualDesktop(QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_windowInterface-&gt;plasmaVirtualDesktops().length(),<sp/>1);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_windowInterface-&gt;plasmaVirtualDesktops().first(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>the<sp/>client<sp/>received<sp/>the<sp/>enter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(virtualDesktopEnteredSpy.wait());</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(virtualDesktopEnteredSpy.takeFirst().at(0).toString(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_window-&gt;plasmaVirtualDesktops().length(),<sp/>1);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_window-&gt;plasmaVirtualDesktops().first(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>another<sp/>desktop,<sp/>server<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;addPlasmaVirtualDesktop(QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-3&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(virtualDesktopEnteredSpy.wait());</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(virtualDesktopEnteredSpy.takeFirst().at(0).toString(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-3&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_windowInterface-&gt;plasmaVirtualDesktops().length(),<sp/>2);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_window-&gt;plasmaVirtualDesktops().length(),<sp/>2);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_window-&gt;plasmaVirtualDesktops()[1],<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-3&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>add<sp/>an<sp/>invalid<sp/>desktop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;addPlasmaVirtualDesktop(QStringLiteral(</highlight><highlight class="stringliteral">&quot;invalid&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_window-&gt;plasmaVirtualDesktops().length(),<sp/>2);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>a<sp/>desktop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>leaveRequestedSpy(m_windowInterface,<sp/>&amp;<ref refid="class_k_win_1_1_plasma_window_interface_1a68ef60ac0eae024df5b840ce293fb437" kindref="member">KWin::PlasmaWindowInterface::leavePlasmaVirtualDesktopRequested</ref>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>m_window-&gt;requestLeaveVirtualDesktop(QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(leaveRequestedSpy.wait());</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(leaveRequestedSpy.takeFirst().at(0).toString(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>virtualDesktopLeftSpy(m_window,<sp/>&amp;KWayland::Client::PlasmaWindow::plasmaVirtualDesktopLeft);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>agree<sp/>to<sp/>the<sp/>request</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;removePlasmaVirtualDesktop(QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_windowInterface-&gt;plasmaVirtualDesktops().length(),<sp/>1);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_windowInterface-&gt;plasmaVirtualDesktops().first(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-3&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>the<sp/>client<sp/>received<sp/>the<sp/>leave</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(virtualDesktopLeftSpy.wait());</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(virtualDesktopLeftSpy.takeFirst().at(0).toString(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_window-&gt;plasmaVirtualDesktops().length(),<sp/>1);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_window-&gt;plasmaVirtualDesktops().first(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-3&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>desktop<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>m_plasmaVirtualDesktopManagementInterface-&gt;removeDesktop(QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-3&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>window<sp/>should<sp/>receive<sp/>a<sp/>left<sp/>signal<sp/>from<sp/>the<sp/>destroyed<sp/>desktop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(virtualDesktopLeftSpy.wait());</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_window-&gt;plasmaVirtualDesktops().length(),<sp/>0);</highlight></codeline>
<codeline lineno="432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestVirtualDesktop::testAllDesktops()</highlight></codeline>
<codeline lineno="435"><highlight class="normal">{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>testCreate();</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>virtualDesktopEnteredSpy(m_window,<sp/>&amp;KWayland::Client::PlasmaWindow::plasmaVirtualDesktopEntered);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>virtualDesktopLeftSpy(m_window,<sp/>&amp;KWayland::Client::PlasmaWindow::plasmaVirtualDesktopLeft);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>beginning<sp/>the<sp/>window<sp/>is<sp/>on<sp/>desktop<sp/>1<sp/>and<sp/>desktop<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;addPlasmaVirtualDesktop(QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;addPlasmaVirtualDesktop(QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-3&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(virtualDesktopEnteredSpy.wait());</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setting<sp/>on<sp/>all<sp/>desktops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_window-&gt;plasmaVirtualDesktops().length(),<sp/>2);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;setOnAllDesktops(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setting<sp/>on<sp/>all<sp/>desktops,<sp/>the<sp/>window<sp/>will<sp/>leave<sp/>every<sp/>desktop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(virtualDesktopLeftSpy.wait());</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(virtualDesktopLeftSpy.count(),<sp/>2);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_window-&gt;plasmaVirtualDesktops().length(),<sp/>0);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_window-&gt;isOnAllDesktops());</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_window-&gt;plasmaVirtualDesktops().length(),<sp/>0);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(m_window-&gt;isOnAllDesktops());</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>to<sp/>the<sp/>active<sp/>desktop<sp/>(0-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>m_windowInterface-&gt;setOnAllDesktops(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(virtualDesktopEnteredSpy.wait());</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_window-&gt;plasmaVirtualDesktops().length(),<sp/>1);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_windowInterface-&gt;plasmaVirtualDesktops().first(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(!m_window-&gt;isOnAllDesktops());</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestVirtualDesktop::testCreateRequested()</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rebuild<sp/>some<sp/>desktops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>testCreate();</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>desktopCreateRequestedSpy(m_plasmaVirtualDesktopManagementInterface,</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="class_k_win_1_1_plasma_virtual_desktop_management_interface_1a56ead651939b1820f5e65052ae900ed1" kindref="member">KWin::PlasmaVirtualDesktopManagementInterface::desktopCreateRequested</ref>);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>desktopCreatedSpy(m_plasmaVirtualDesktopManagement,<sp/>&amp;KWayland::Client::PlasmaVirtualDesktopManagement::desktopCreated);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>listen<sp/>for<sp/>createdRequested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>m_plasmaVirtualDesktopManagement-&gt;requestCreateVirtualDesktop(QStringLiteral(</highlight><highlight class="stringliteral">&quot;Desktop&quot;</highlight><highlight class="normal">),<sp/>1);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(desktopCreateRequestedSpy.wait());</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(desktopCreateRequestedSpy.first().first().toString(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;Desktop&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(desktopCreateRequestedSpy.first().at(1).toUInt(),<sp/>(quint32)1);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>actually<sp/>create</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>m_plasmaVirtualDesktopManagementInterface-&gt;createDesktop(QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-4&quot;</highlight><highlight class="normal">),<sp/>1);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>KWin::PlasmaVirtualDesktopInterface<sp/>*desktopInt<sp/>=<sp/>m_plasmaVirtualDesktopManagementInterface-&gt;desktops().at(1);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(desktopInt-&gt;<ref refid="class_k_win_1_1_plasma_virtual_desktop_interface_1ad4920aee9e59462156e2cec5294d1b12" kindref="member">id</ref>(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-4&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>desktopInt-&gt;<ref refid="class_k_win_1_1_plasma_virtual_desktop_interface_1a8e6e3dbbcf7c11c1bb7572673a2bfa66" kindref="member">setName</ref>(QStringLiteral(</highlight><highlight class="stringliteral">&quot;Desktop&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(desktopCreatedSpy.wait());</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(desktopCreatedSpy.first().first().toString(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-4&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_plasmaVirtualDesktopManagement-&gt;desktops().count(),<sp/>4);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>KWayland::Client::PlasmaVirtualDesktop<sp/>*desktop<sp/>=<sp/>m_plasmaVirtualDesktopManagement-&gt;desktops().at(1);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>desktopDoneSpy(desktop,<sp/>&amp;KWayland::Client::PlasmaVirtualDesktop::done);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>desktopInt-&gt;<ref refid="class_k_win_1_1_plasma_virtual_desktop_interface_1ac1bc37e5cbdb88cd323b553a0be222b4" kindref="member">sendDone</ref>();</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>desktopDoneSpy.wait();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>the<sp/>order<sp/>is<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_plasmaVirtualDesktopManagement-&gt;desktops().at(0)-&gt;id(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(desktop-&gt;id(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-4&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_plasmaVirtualDesktopManagement-&gt;desktops().at(2)-&gt;id(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-2&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(m_plasmaVirtualDesktopManagement-&gt;desktops().at(3)-&gt;id(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-3&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestVirtualDesktop::testRemoveRequested()</highlight></codeline>
<codeline lineno="505"><highlight class="normal">{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rebuild<sp/>some<sp/>desktops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>testCreate();</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>QSignalSpy<sp/>desktopRemoveRequestedSpy(m_plasmaVirtualDesktopManagementInterface,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="class_k_win_1_1_plasma_virtual_desktop_management_interface_1a5a44e68ce01cbd7093b032955fadce34" kindref="member">KWin::PlasmaVirtualDesktopManagementInterface::desktopRemoveRequested</ref>);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>request<sp/>a<sp/>remove,<sp/>just<sp/>check<sp/>the<sp/>request<sp/>arrived,<sp/>ignore<sp/>the<sp/>request.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>m_plasmaVirtualDesktopManagement-&gt;requestRemoveVirtualDesktop(QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>QVERIFY(desktopRemoveRequestedSpy.wait());</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(desktopRemoveRequestedSpy.first().first().toString(),<sp/>QStringLiteral(</highlight><highlight class="stringliteral">&quot;0-1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal">QTEST_GUILESS_MAIN(<ref refid="class_test_virtual_desktop" kindref="compound">TestVirtualDesktop</ref>)</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_plasma_virtual_desktop.moc&quot;</highlight></codeline>
    </programlisting>
    <location file="kwin/autotests/wayland/client/test_plasma_virtual_desktop.cpp"/>
  </compounddef>
</doxygen>
