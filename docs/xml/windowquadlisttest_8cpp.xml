<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="windowquadlisttest_8cpp" kind="file" language="C++">
    <compoundname>windowquadlisttest.cpp</compoundname>
    <includes refid="itemgeometry_8h" local="yes">scene/itemgeometry.h</includes>
    <includes local="no">QTest</includes>
    <includes local="yes">windowquadlisttest.moc</includes>
    <incdepgraph>
      <node id="1">
        <label>kwin/autotests/effect/windowquadlisttest.cpp</label>
        <link refid="windowquadlisttest_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>opengl/glvertexbuffer.h</label>
        <link refid="glvertexbuffer_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>scene/itemgeometry.h</label>
        <link refid="itemgeometry_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>QColor</label>
      </node>
      <node id="6">
        <label>QRegion</label>
      </node>
      <node id="12">
        <label>QTest</label>
      </node>
      <node id="7">
        <label>QVector2D</label>
      </node>
      <node id="8">
        <label>epoxy/gl.h</label>
      </node>
      <node id="4">
        <label>kwin_export.h</label>
      </node>
      <node id="9">
        <label>optional</label>
      </node>
      <node id="10">
        <label>ranges</label>
      </node>
      <node id="11">
        <label>span</label>
      </node>
      <node id="13">
        <label>windowquadlisttest.moc</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_window_quad_list_test" prot="public">WindowQuadListTest</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>KWin<sp/>-<sp/>the<sp/>KDE<sp/>window<sp/>manager</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>KDE<sp/>project.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-FileCopyrightText:<sp/>2013<sp/>Martin<sp/>Gräßlin<sp/>&lt;mgraesslin@kde.org&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>SPDX-License-Identifier:<sp/>GPL-2.0-or-later</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="itemgeometry_8h" kindref="compound">scene/itemgeometry.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QTest&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><ref refid="x11keyread_8cpp_1ac0925a94f4858115ad1f04be885ac3b3" kindref="member">Q_DECLARE_METATYPE</ref>(<ref refid="class_k_win_1_1_window_quad_list" kindref="compound">KWin::WindowQuadList</ref>)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="class_window_quad_list_test" refkind="compound"><highlight class="normal">class<sp/><ref refid="class_window_quad_list_test" kindref="compound">WindowQuadListTest</ref><sp/>:<sp/>public<sp/>QObject</highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Q_SLOTS:</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testMakeGrid_data();</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testMakeGrid();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testMakeRegularGrid_data();</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testMakeRegularGrid();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_window_quad" kindref="compound">KWin::WindowQuad</ref><sp/>makeQuad(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>&amp;rect);</highlight></codeline>
<codeline lineno="25"><highlight class="normal">};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="class_k_win_1_1_window_quad" kindref="compound">KWin::WindowQuad</ref><sp/>WindowQuadListTest::makeQuad(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>&amp;r)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_k_win_1_1_window_quad" kindref="compound">KWin::WindowQuad</ref><sp/>quad;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>quad[0]<sp/>=<sp/><ref refid="class_k_win_1_1_window_vertex" kindref="compound">KWin::WindowVertex</ref>(r.x(),<sp/>r.y(),<sp/>r.x(),<sp/>r.y());</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>quad[1]<sp/>=<sp/><ref refid="class_k_win_1_1_window_vertex" kindref="compound">KWin::WindowVertex</ref>(r.x()<sp/>+<sp/>r.width(),<sp/>r.y(),<sp/>r.x()<sp/>+<sp/>r.width(),<sp/>r.y());</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>quad[2]<sp/>=<sp/><ref refid="class_k_win_1_1_window_vertex" kindref="compound">KWin::WindowVertex</ref>(r.x()<sp/>+<sp/>r.width(),<sp/>r.y()<sp/>+<sp/>r.height(),<sp/>r.x()<sp/>+<sp/>r.width(),<sp/>r.y()<sp/>+<sp/>r.height());</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>quad[3]<sp/>=<sp/><ref refid="class_k_win_1_1_window_vertex" kindref="compound">KWin::WindowVertex</ref>(r.x(),<sp/>r.y()<sp/>+<sp/>r.height(),<sp/>r.x(),<sp/>r.y()<sp/>+<sp/>r.height());</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>quad;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WindowQuadListTest::testMakeGrid_data()</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;KWin::WindowQuadList&gt;(</highlight><highlight class="stringliteral">&quot;orig&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;int&gt;(</highlight><highlight class="stringliteral">&quot;quadSize&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;int&gt;(</highlight><highlight class="stringliteral">&quot;expectedCount&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;KWin::WindowQuadList&gt;(</highlight><highlight class="stringliteral">&quot;expected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>KWin::WindowQuadList<sp/>orig;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>KWin::WindowQuadList<sp/>expected;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;empty&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>orig<sp/>&lt;&lt;<sp/>10<sp/>&lt;&lt;<sp/>0<sp/>&lt;&lt;<sp/>expected;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>orig.append(makeQuad(QRectF(0,<sp/>0,<sp/>10,<sp/>10)));</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(0,<sp/>0,<sp/>10,<sp/>10)));</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;quadSizeTooLarge&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>orig<sp/>&lt;&lt;<sp/>10<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>expected;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.clear();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(0,<sp/>0,<sp/>5,<sp/>5)));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(0,<sp/>5,<sp/>5,<sp/>5)));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(5,<sp/>0,<sp/>5,<sp/>5)));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(5,<sp/>5,<sp/>5,<sp/>5)));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;regularGrid&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>orig<sp/>&lt;&lt;<sp/>5<sp/>&lt;&lt;<sp/>4<sp/>&lt;&lt;<sp/>expected;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.clear();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(0,<sp/>0,<sp/>9,<sp/>9)));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(0,<sp/>9,<sp/>9,<sp/>1)));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(9,<sp/>0,<sp/>1,<sp/>9)));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(9,<sp/>9,<sp/>1,<sp/>1)));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;irregularGrid&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>orig<sp/>&lt;&lt;<sp/>9<sp/>&lt;&lt;<sp/>4<sp/>&lt;&lt;<sp/>expected;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>orig.append(makeQuad(QRectF(0,<sp/>10,<sp/>4,<sp/>3)));</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.clear();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(0,<sp/>0,<sp/>4,<sp/>4)));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(0,<sp/>4,<sp/>4,<sp/>4)));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(0,<sp/>8,<sp/>4,<sp/>2)));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(0,<sp/>10,<sp/>4,<sp/>2)));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(0,<sp/>12,<sp/>4,<sp/>1)));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(4,<sp/>0,<sp/>4,<sp/>4)));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(4,<sp/>4,<sp/>4,<sp/>4)));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(4,<sp/>8,<sp/>4,<sp/>2)));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(8,<sp/>0,<sp/>2,<sp/>4)));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(8,<sp/>4,<sp/>2,<sp/>4)));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(8,<sp/>8,<sp/>2,<sp/>2)));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;irregularGrid2&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>orig<sp/>&lt;&lt;<sp/>4<sp/>&lt;&lt;<sp/>11<sp/>&lt;&lt;<sp/>expected;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WindowQuadListTest::testMakeGrid()</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(KWin::WindowQuadList,<sp/>orig);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>quadSize);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>expectedCount);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>KWin::WindowQuadList<sp/>actual<sp/>=<sp/>orig.<ref refid="class_k_win_1_1_window_quad_list_1a7ca764a354c99c1596f67810c09aef7f" kindref="member">makeGrid</ref>(quadSize);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(actual.count(),<sp/>expectedCount);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(KWin::WindowQuadList,<sp/>expected);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>actual.constBegin();<sp/>it<sp/>!=<sp/>actual.constEnd();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>KWin::WindowQuad<sp/>&amp;actualQuad<sp/>=<sp/>(*it);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it2<sp/>=<sp/>expected.constBegin();<sp/>it2<sp/>!=<sp/>expected.constEnd();<sp/>++it2)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>KWin::WindowQuad<sp/>&amp;expectedQuad<sp/>=<sp/>(*it2);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vertexTest<sp/>=<sp/>[actualQuad,<sp/>expectedQuad](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>KWin::WindowVertex<sp/>&amp;actualVertex<sp/>=<sp/>actualQuad[index];</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>KWin::WindowVertex<sp/>&amp;expectedVertex<sp/>=<sp/>expectedQuad[index];</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actualVertex.<ref refid="class_k_win_1_1_window_vertex_1a2410a6327e195217bbf890844323224c" kindref="member">x</ref>()<sp/>!=<sp/>expectedVertex.<ref refid="class_k_win_1_1_window_vertex_1a2410a6327e195217bbf890844323224c" kindref="member">x</ref>())<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actualVertex.<ref refid="class_k_win_1_1_window_vertex_1a993029d8be46adc8cdb06c7289c42ec0" kindref="member">y</ref>()<sp/>!=<sp/>expectedVertex.<ref refid="class_k_win_1_1_window_vertex_1a993029d8be46adc8cdb06c7289c42ec0" kindref="member">y</ref>())<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!qFuzzyIsNull(actualVertex.<ref refid="class_k_win_1_1_window_vertex_1a8a11e14b8b47d454e5c1fd8966c0c28c" kindref="member">u</ref>()<sp/>-<sp/>expectedVertex.<ref refid="class_k_win_1_1_window_vertex_1a8a11e14b8b47d454e5c1fd8966c0c28c" kindref="member">u</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!qFuzzyIsNull(actualVertex.<ref refid="class_k_win_1_1_window_vertex_1a957edfa73c53bf5f90f6ba67f6b8af0d" kindref="member">v</ref>()<sp/>-<sp/>expectedVertex.<ref refid="class_k_win_1_1_window_vertex_1a957edfa73c53bf5f90f6ba67f6b8af0d" kindref="member">v</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>vertexTest(0)<sp/>&amp;&amp;<sp/>vertexTest(1)<sp/>&amp;&amp;<sp/>vertexTest(2)<sp/>&amp;&amp;<sp/>vertexTest(3);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY2(found,<sp/>qPrintable(QStringLiteral(</highlight><highlight class="stringliteral">&quot;%0,<sp/>%1<sp/>/<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal">).arg(QString::number(actualQuad.<ref refid="class_k_win_1_1_window_quad_1a3829a592d201e9a41a0dbc4182b991ea" kindref="member">left</ref>()),<sp/>QString::number(actualQuad.<ref refid="class_k_win_1_1_window_quad_1ad1a27a0d9debf742957f49ff4065597f" kindref="member">top</ref>()),<sp/>QString::number(actualQuad.<ref refid="class_k_win_1_1_window_quad_1a860bdf47f60bbb4062c8215211bdc936" kindref="member">right</ref>()),<sp/>QString::number(actualQuad.<ref refid="class_k_win_1_1_window_quad_1a53e4777b307e98236ac5468944b3ec4a" kindref="member">bottom</ref>()))));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WindowQuadListTest::testMakeRegularGrid_data()</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;KWin::WindowQuadList&gt;(</highlight><highlight class="stringliteral">&quot;orig&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;int&gt;(</highlight><highlight class="stringliteral">&quot;xSubdivisions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;int&gt;(</highlight><highlight class="stringliteral">&quot;ySubdivisions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;int&gt;(</highlight><highlight class="stringliteral">&quot;expectedCount&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::addColumn&lt;KWin::WindowQuadList&gt;(</highlight><highlight class="stringliteral">&quot;expected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>KWin::WindowQuadList<sp/>orig;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>KWin::WindowQuadList<sp/>expected;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;empty&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>orig<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>0<sp/>&lt;&lt;<sp/>expected;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>orig.append(makeQuad(QRectF(0,<sp/>0,<sp/>10,<sp/>10)));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(0,<sp/>0,<sp/>10,<sp/>10)));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;noSplit&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>orig<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>expected;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.clear();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(0,<sp/>0,<sp/>5,<sp/>10)));</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(5,<sp/>0,<sp/>5,<sp/>10)));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;xSplit&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>orig<sp/>&lt;&lt;<sp/>2<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>2<sp/>&lt;&lt;<sp/>expected;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.clear();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(0,<sp/>0,<sp/>10,<sp/>5)));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(0,<sp/>5,<sp/>10,<sp/>5)));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;ySplit&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>orig<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>2<sp/>&lt;&lt;<sp/>2<sp/>&lt;&lt;<sp/>expected;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.clear();</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(0,<sp/>0,<sp/>5,<sp/>5)));</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(5,<sp/>0,<sp/>5,<sp/>5)));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(0,<sp/>5,<sp/>5,<sp/>5)));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(5,<sp/>5,<sp/>5,<sp/>5)));</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;xySplit&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>orig<sp/>&lt;&lt;<sp/>2<sp/>&lt;&lt;<sp/>2<sp/>&lt;&lt;<sp/>4<sp/>&lt;&lt;<sp/>expected;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>orig.append(makeQuad(QRectF(0,<sp/>10,<sp/>4,<sp/>2)));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.clear();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(0,<sp/>0,<sp/>5,<sp/>3)));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(5,<sp/>0,<sp/>5,<sp/>3)));</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(0,<sp/>3,<sp/>5,<sp/>3)));</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(5,<sp/>3,<sp/>5,<sp/>3)));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(0,<sp/>6,<sp/>5,<sp/>3)));</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(5,<sp/>6,<sp/>5,<sp/>3)));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(0,<sp/>9,<sp/>5,<sp/>1)));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(0,<sp/>10,<sp/>4,<sp/>2)));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>expected.append(makeQuad(QRectF(5,<sp/>9,<sp/>5,<sp/>1)));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>QTest::newRow(</highlight><highlight class="stringliteral">&quot;multipleQuads&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>orig<sp/>&lt;&lt;<sp/>2<sp/>&lt;&lt;<sp/>4<sp/>&lt;&lt;<sp/>9<sp/>&lt;&lt;<sp/>expected;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WindowQuadListTest::testMakeRegularGrid()</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(KWin::WindowQuadList,<sp/>orig);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>xSubdivisions);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>ySubdivisions);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>expectedCount);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>KWin::WindowQuadList<sp/>actual<sp/>=<sp/>orig.<ref refid="class_k_win_1_1_window_quad_list_1af629d73e990dcff5478342e04c3eefe5" kindref="member">makeRegularGrid</ref>(xSubdivisions,<sp/>ySubdivisions);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>QCOMPARE(actual.count(),<sp/>expectedCount);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>QFETCH(KWin::WindowQuadList,<sp/>expected);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>actual.constBegin();<sp/>it<sp/>!=<sp/>actual.constEnd();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>KWin::WindowQuad<sp/>&amp;actualQuad<sp/>=<sp/>(*it);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it2<sp/>=<sp/>expected.constBegin();<sp/>it2<sp/>!=<sp/>expected.constEnd();<sp/>++it2)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>KWin::WindowQuad<sp/>&amp;expectedQuad<sp/>=<sp/>(*it2);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vertexTest<sp/>=<sp/>[actualQuad,<sp/>expectedQuad](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>KWin::WindowVertex<sp/>&amp;actualVertex<sp/>=<sp/>actualQuad[index];</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>KWin::WindowVertex<sp/>&amp;expectedVertex<sp/>=<sp/>expectedQuad[index];</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actualVertex.<ref refid="class_k_win_1_1_window_vertex_1a2410a6327e195217bbf890844323224c" kindref="member">x</ref>()<sp/>!=<sp/>expectedVertex.<ref refid="class_k_win_1_1_window_vertex_1a2410a6327e195217bbf890844323224c" kindref="member">x</ref>())<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actualVertex.<ref refid="class_k_win_1_1_window_vertex_1a993029d8be46adc8cdb06c7289c42ec0" kindref="member">y</ref>()<sp/>!=<sp/>expectedVertex.<ref refid="class_k_win_1_1_window_vertex_1a993029d8be46adc8cdb06c7289c42ec0" kindref="member">y</ref>())<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!qFuzzyIsNull(actualVertex.<ref refid="class_k_win_1_1_window_vertex_1a8a11e14b8b47d454e5c1fd8966c0c28c" kindref="member">u</ref>()<sp/>-<sp/>expectedVertex.<ref refid="class_k_win_1_1_window_vertex_1a8a11e14b8b47d454e5c1fd8966c0c28c" kindref="member">u</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!qFuzzyIsNull(actualVertex.<ref refid="class_k_win_1_1_window_vertex_1a957edfa73c53bf5f90f6ba67f6b8af0d" kindref="member">v</ref>()<sp/>-<sp/>expectedVertex.<ref refid="class_k_win_1_1_window_vertex_1a957edfa73c53bf5f90f6ba67f6b8af0d" kindref="member">v</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>vertexTest(0)<sp/>&amp;&amp;<sp/>vertexTest(1)<sp/>&amp;&amp;<sp/>vertexTest(2)<sp/>&amp;&amp;<sp/>vertexTest(3);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QVERIFY2(found,<sp/>qPrintable(QStringLiteral(</highlight><highlight class="stringliteral">&quot;%0,<sp/>%1<sp/>/<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal">).arg(QString::number(actualQuad.<ref refid="class_k_win_1_1_window_quad_1a3829a592d201e9a41a0dbc4182b991ea" kindref="member">left</ref>()),<sp/>QString::number(actualQuad.<ref refid="class_k_win_1_1_window_quad_1ad1a27a0d9debf742957f49ff4065597f" kindref="member">top</ref>()),<sp/>QString::number(actualQuad.<ref refid="class_k_win_1_1_window_quad_1a860bdf47f60bbb4062c8215211bdc936" kindref="member">right</ref>()),<sp/>QString::number(actualQuad.<ref refid="class_k_win_1_1_window_quad_1a53e4777b307e98236ac5468944b3ec4a" kindref="member">bottom</ref>()))));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><ref refid="onscreennotificationtest_8cpp_1a2f6feba20c73ec66058034e36bb8f880" kindref="member">QTEST_MAIN</ref>(<ref refid="class_window_quad_list_test" kindref="compound">WindowQuadListTest</ref>)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;windowquadlisttest.moc&quot;</highlight></codeline>
    </programlisting>
    <location file="kwin/autotests/effect/windowquadlisttest.cpp"/>
  </compounddef>
</doxygen>
