<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_startup_feedback_effect" kind="class" language="C++" prot="public">
    <compoundname>KWin::StartupFeedbackEffect</compoundname>
    <basecompoundref refid="class_k_win_1_1_effect" prot="public" virt="non-virtual">KWin::Effect</basecompoundref>
    <includes refid="startupfeedback_8h" local="no">startupfeedback.h</includes>
    <innerclass refid="struct_k_win_1_1_startup_feedback_effect_1_1_startup" prot="private">KWin::StartupFeedbackEffect::Startup</innerclass>
    <sectiondef kind="private-type">
      <memberdef kind="enum" id="class_k_win_1_1_startup_feedback_effect_1a9606c96d87698c5a42a3b2cc1d7253b6" prot="private" static="no" strong="no">
        <type></type>
        <name>FeedbackType</name>
        <qualifiedname>KWin::StartupFeedbackEffect::FeedbackType</qualifiedname>
        <enumvalue id="class_k_win_1_1_startup_feedback_effect_1a9606c96d87698c5a42a3b2cc1d7253b6a77ee0a76ccd01c1797d3a1e5d9b53137" prot="private">
          <name>NoFeedback</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_startup_feedback_effect_1a9606c96d87698c5a42a3b2cc1d7253b6a97e6e9860799eeaec8b3822eaf471dfb" prot="private">
          <name>BouncingFeedback</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_startup_feedback_effect_1a9606c96d87698c5a42a3b2cc1d7253b6a26f0ae2f48e778fdd5720f7d627384fa" prot="private">
          <name>BlinkingFeedback</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_k_win_1_1_startup_feedback_effect_1a9606c96d87698c5a42a3b2cc1d7253b6af9623a922331a076eec4d4ffba564219" prot="private">
          <name>PassiveFeedback</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="63" column="5" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.h" bodystart="63" bodyend="68"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="property">
      <memberdef kind="property" id="class_k_win_1_1_startup_feedback_effect_1a99933dfeb08dcf1bb24bc764c0894dd3" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>int</type>
        <definition>int KWin::StartupFeedbackEffect::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <qualifiedname>KWin::StartupFeedbackEffect::type</qualifiedname>
        <read>type</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="33" column="5" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.h" bodystart="33" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_startup_feedback_effect_1aa519660b879d7077cd73779f3fc74d4f" prot="private" static="no" mutable="no">
        <type>qreal</type>
        <definition>qreal KWin::StartupFeedbackEffect::m_bounceSizesRatio</definition>
        <argsstring></argsstring>
        <name>m_bounceSizesRatio</name>
        <qualifiedname>KWin::StartupFeedbackEffect::m_bounceSizesRatio</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="83" column="11" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_startup_feedback_effect_1a82337a730ae060cf5b179b9e819f047b" prot="private" static="no" mutable="no">
        <type>QString</type>
        <definition>QString KWin::StartupFeedbackEffect::m_currentStartup</definition>
        <argsstring></argsstring>
        <name>m_currentStartup</name>
        <qualifiedname>KWin::StartupFeedbackEffect::m_currentStartup</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="88" column="13" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_startup_feedback_effect_1a35df8796eaeedad1e1e844361f01f0dc" prot="private" static="no" mutable="no">
        <type>QMap&lt; QString, Startup &gt;</type>
        <definition>QMap&lt;QString, Startup&gt; KWin::StartupFeedbackEffect::m_startups</definition>
        <argsstring></argsstring>
        <name>m_startups</name>
        <qualifiedname>KWin::StartupFeedbackEffect::m_startups</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="89" column="10" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_startup_feedback_effect_1a6372940a0f4785afef4dd3866291c37a" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::StartupFeedbackEffect::m_active</definition>
        <argsstring></argsstring>
        <name>m_active</name>
        <qualifiedname>KWin::StartupFeedbackEffect::m_active</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="90" column="10" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_startup_feedback_effect_1a2951c2686047d01098bc7d03fc9e3149" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int KWin::StartupFeedbackEffect::m_frame</definition>
        <argsstring></argsstring>
        <name>m_frame</name>
        <qualifiedname>KWin::StartupFeedbackEffect::m_frame</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="91" column="9" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_startup_feedback_effect_1a99232415f30694653012a07261980979" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int KWin::StartupFeedbackEffect::m_progress</definition>
        <argsstring></argsstring>
        <name>m_progress</name>
        <qualifiedname>KWin::StartupFeedbackEffect::m_progress</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="92" column="9" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_startup_feedback_effect_1a697564bee2249428df9697721144357e" prot="private" static="no" mutable="no">
        <type>std::chrono::milliseconds</type>
        <definition>std::chrono::milliseconds KWin::StartupFeedbackEffect::m_lastPresentTime</definition>
        <argsstring></argsstring>
        <name>m_lastPresentTime</name>
        <qualifiedname>KWin::StartupFeedbackEffect::m_lastPresentTime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="93" column="31" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_startup_feedback_effect_1a8dbe93331b678caf95297d95aed3e655" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_g_l_texture" kindref="compound">GLTexture</ref> &gt;</type>
        <definition>std::unique_ptr&lt;GLTexture&gt; KWin::StartupFeedbackEffect::m_bouncingTextures[5]</definition>
        <argsstring>[5]</argsstring>
        <name>m_bouncingTextures</name>
        <qualifiedname>KWin::StartupFeedbackEffect::m_bouncingTextures</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="94" column="21" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_startup_feedback_effect_1ae96f9e0f08fbd0f99fb3aa3fabab63c2" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_g_l_texture" kindref="compound">GLTexture</ref> &gt;</type>
        <definition>std::unique_ptr&lt;GLTexture&gt; KWin::StartupFeedbackEffect::m_texture</definition>
        <argsstring></argsstring>
        <name>m_texture</name>
        <qualifiedname>KWin::StartupFeedbackEffect::m_texture</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="95" column="21" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_startup_feedback_effect_1a42c5b7383f6d7a83278f270c148bb976" prot="private" static="no" mutable="no">
        <type>FeedbackType</type>
        <definition>FeedbackType KWin::StartupFeedbackEffect::m_type</definition>
        <argsstring></argsstring>
        <name>m_type</name>
        <qualifiedname>KWin::StartupFeedbackEffect::m_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="96" column="18" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_startup_feedback_effect_1a2f80d8943494d23828533611c7f0035d" prot="private" static="no" mutable="no">
        <type>QRect</type>
        <definition>QRect KWin::StartupFeedbackEffect::m_currentGeometry</definition>
        <argsstring></argsstring>
        <name>m_currentGeometry</name>
        <qualifiedname>KWin::StartupFeedbackEffect::m_currentGeometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="97" column="11" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_startup_feedback_effect_1a3656f66ce7b54ffa975518cb98308137" prot="private" static="no" mutable="no">
        <type>QRect</type>
        <definition>QRect KWin::StartupFeedbackEffect::m_dirtyRect</definition>
        <argsstring></argsstring>
        <name>m_dirtyRect</name>
        <qualifiedname>KWin::StartupFeedbackEffect::m_dirtyRect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="97" column="29" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_startup_feedback_effect_1a28c3a4a92542fcd868a95c3fa64db982" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_g_l_shader" kindref="compound">GLShader</ref> &gt;</type>
        <definition>std::unique_ptr&lt;GLShader&gt; KWin::StartupFeedbackEffect::m_blinkingShader</definition>
        <argsstring></argsstring>
        <name>m_blinkingShader</name>
        <qualifiedname>KWin::StartupFeedbackEffect::m_blinkingShader</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="98" column="21" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_startup_feedback_effect_1a4d73e81c2070b766bc3dbf280e8bd092" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int KWin::StartupFeedbackEffect::m_cursorSize</definition>
        <argsstring></argsstring>
        <name>m_cursorSize</name>
        <qualifiedname>KWin::StartupFeedbackEffect::m_cursorSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="99" column="9" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_startup_feedback_effect_1a4522d08a0a25b6f4fe1771fac0051f09" prot="private" static="no" mutable="no">
        <type>KConfigWatcher::Ptr</type>
        <definition>KConfigWatcher::Ptr KWin::StartupFeedbackEffect::m_configWatcher</definition>
        <argsstring></argsstring>
        <name>m_configWatcher</name>
        <qualifiedname>KWin::StartupFeedbackEffect::m_configWatcher</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="100" column="25" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_startup_feedback_effect_1a90fcc18fb773c2bb263d8a7e519b2359" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool KWin::StartupFeedbackEffect::m_splashVisible</definition>
        <argsstring></argsstring>
        <name>m_splashVisible</name>
        <qualifiedname>KWin::StartupFeedbackEffect::m_splashVisible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="101" column="10" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_k_win_1_1_startup_feedback_effect_1a9b96267877e6e6ec4a3a4b47cc72d3c6" prot="private" static="no" mutable="no">
        <type>std::chrono::seconds</type>
        <definition>std::chrono::seconds KWin::StartupFeedbackEffect::m_timeout</definition>
        <argsstring></argsstring>
        <name>m_timeout</name>
        <qualifiedname>KWin::StartupFeedbackEffect::m_timeout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="102" column="26" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.h" bodystart="102" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_startup_feedback_effect_1a265c511f8b2b1f5b4d3659c0c0af9801" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::StartupFeedbackEffect::StartupFeedbackEffect</definition>
        <argsstring>()</argsstring>
        <name>StartupFeedbackEffect</name>
        <qualifiedname>KWin::StartupFeedbackEffect::StartupFeedbackEffect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="35" column="5" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="77" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_startup_feedback_effect_1a4be43f341c9e50ae1287c096e20e3587" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::StartupFeedbackEffect::~StartupFeedbackEffect</definition>
        <argsstring>() override</argsstring>
        <name>~StartupFeedbackEffect</name>
        <qualifiedname>KWin::StartupFeedbackEffect::~StartupFeedbackEffect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="36" column="5" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="132" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_startup_feedback_effect_1ab6125bce4610ec0ad231a98b951288b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::StartupFeedbackEffect::reconfigure</definition>
        <argsstring>(ReconfigureFlags flags) override</argsstring>
        <name>reconfigure</name>
        <qualifiedname>KWin::StartupFeedbackEffect::reconfigure</qualifiedname>
        <reimplements refid="group__kwineffects_1ga737c6d80eb8f8b24fdc6398209c38e3d">reconfigure</reimplements>
        <param>
          <type>ReconfigureFlags</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called when configuration changes (either the effect&apos;s or <ref refid="namespace_k_win" kindref="compound">KWin</ref>&apos;s global).</para>
<para>In OpenGL based compositing, the frameworks ensures that the context is current when the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> is reconfigured. If this method is called from within the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> it is required to ensure that the context is current if the implementation does OpenGL calls. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="38" column="10" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="141" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_startup_feedback_effect_1a6a2dd70b7f80b8e7694cf0e27dbba28e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::StartupFeedbackEffect::prePaintScreen</definition>
        <argsstring>(ScreenPrePaintData &amp;data, std::chrono::milliseconds presentTime) override</argsstring>
        <name>prePaintScreen</name>
        <qualifiedname>KWin::StartupFeedbackEffect::prePaintScreen</qualifiedname>
        <reimplements refid="group__kwineffects_1ga2edc1b757e36bb6bcbbacde454dfc05c">prePaintScreen</reimplements>
        <param>
          <type><ref refid="class_k_win_1_1_screen_pre_paint_data" kindref="compound">ScreenPrePaintData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::chrono::milliseconds</type>
          <declname>presentTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called before starting to paint the screen. In this method you can: <itemizedlist>
<listitem><para>set whether the windows or the entire screen will be transformed </para>
</listitem>
<listitem><para>change the region of the screen that will be painted </para>
</listitem>
<listitem><para>do various housekeeping tasks such as initing your effect&apos;s variables for the upcoming paint pass or updating animation&apos;s progress</para>
</listitem>
</itemizedlist>
<emphasis>presentTime</emphasis> specifies the expected monotonic time when the rendered frame will be displayed on the screen. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="39" column="10" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="177" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_startup_feedback_effect_1a7a56fae5b260899c3302e35bb821496e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::StartupFeedbackEffect::paintScreen</definition>
        <argsstring>(const RenderTarget &amp;renderTarget, const RenderViewport &amp;viewport, int mask, const QRegion &amp;region, Output *screen) override</argsstring>
        <name>paintScreen</name>
        <qualifiedname>KWin::StartupFeedbackEffect::paintScreen</qualifiedname>
        <reimplements refid="group__kwineffects_1ga44ee94161446ce6fb2502376af6515a8">paintScreen</reimplements>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_target" kindref="compound">RenderTarget</ref> &amp;</type>
          <declname>renderTarget</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_render_viewport" kindref="compound">RenderViewport</ref> &amp;</type>
          <declname>viewport</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const QRegion &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>screen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>In this method you can: <itemizedlist>
<listitem><para>paint something on top of the windows (by painting after calling effects-&gt;<ref refid="class_k_win_1_1_startup_feedback_effect_1a7a56fae5b260899c3302e35bb821496e" kindref="member">paintScreen()</ref>) </para>
</listitem>
<listitem><para>paint multiple desktops and/or multiple copies of the same desktop by calling effects-&gt;<ref refid="class_k_win_1_1_startup_feedback_effect_1a7a56fae5b260899c3302e35bb821496e" kindref="member">paintScreen()</ref> multiple times</para>
</listitem>
</itemizedlist>
In OpenGL based compositing, the frameworks ensures that the context is current when this method is invoked. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="40" column="10" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="208" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_startup_feedback_effect_1a50276e5b47a10cfad4749e5e792703b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void KWin::StartupFeedbackEffect::postPaintScreen</definition>
        <argsstring>() override</argsstring>
        <name>postPaintScreen</name>
        <qualifiedname>KWin::StartupFeedbackEffect::postPaintScreen</qualifiedname>
        <reimplements refid="group__kwineffects_1ga10021cf9704c00d60beae284d53846e2">postPaintScreen</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called after all the painting has been finished. In this method you can: <itemizedlist>
<listitem><para>schedule next repaint in case of animations You shouldn&apos;t paint anything here.</para>
</listitem>
</itemizedlist>
In OpenGL based compositing, the frameworks ensures that the context is current when this method is invoked. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="41" column="10" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="249" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_startup_feedback_effect_1a383b0db88ac3cec4d64bcef2d327ce24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool KWin::StartupFeedbackEffect::isActive</definition>
        <argsstring>() const override</argsstring>
        <name>isActive</name>
        <qualifiedname>KWin::StartupFeedbackEffect::isActive</qualifiedname>
        <reimplements refid="group__kwineffects_1ga596b6c0ed146b97b293f5db5f27fc40f">isActive</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overwrite this method to indicate whether your effect will be doing something in the next frame to be rendered. If the method returns <computeroutput>false</computeroutput> the effect will be excluded from the chained methods in the next rendered frame.</para>
<para>This method is called always directly before the paint loop begins. So it is totally fine to e.g. react on a window event, issue a repaint to trigger an animation and change a flag to indicate that this method returns <computeroutput>true</computeroutput>.</para>
<para>As the method is called each frame, you should not perform complex calculations. Best use just a boolean flag.</para>
<para>The default implementation of this method returns <computeroutput>true</computeroutput>. <simplesect kind="since"><para>4.8 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="42" column="10" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="476" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_startup_feedback_effect_1a37c06b30185acdeca2b1a9351a0f83a8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>int KWin::StartupFeedbackEffect::requestedEffectChainPosition</definition>
        <argsstring>() const override</argsstring>
        <name>requestedEffectChainPosition</name>
        <qualifiedname>KWin::StartupFeedbackEffect::requestedEffectChainPosition</qualifiedname>
        <reimplements refid="group__kwineffects_1ga120531588e58691a5a18028158d2947a">requestedEffectChainPosition</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reimplement this method to indicate where in the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> chain the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref> should be placed.</para>
<para>A low number indicates early chain position, thus before other Effects got called, a high number indicates a late position. The returned number should be in the interval [0, 100]. The default value is 0.</para>
<para>In KWin4 this information was provided in the <ref refid="class_k_win_1_1_effect" kindref="compound">Effect</ref>&apos;s desktop file as property X-KDE-Ordering. In the case of Scripted Effects this property is still used.</para>
<para><simplesect kind="since"><para>5.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="44" column="9" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.h" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_startup_feedback_effect_1acdb6651c5b448ddf2151afff8dffd8b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int KWin::StartupFeedbackEffect::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <qualifiedname>KWin::StartupFeedbackEffect::type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="49" column="9" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.h" bodystart="49" bodyend="52"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_k_win_1_1_startup_feedback_effect_1a1ab5f48be54af4cd729e7f613fab0bd1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::StartupFeedbackEffect::supported</definition>
        <argsstring>()</argsstring>
        <name>supported</name>
        <qualifiedname>KWin::StartupFeedbackEffect::supported</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="54" column="17" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="136" bodyend="139"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-slot">
      <memberdef kind="slot" id="class_k_win_1_1_startup_feedback_effect_1ae440909bdc41e153307e6ff721ec943d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::StartupFeedbackEffect::gotNewStartup</definition>
        <argsstring>(const QString &amp;id, const QIcon &amp;icon)</argsstring>
        <name>gotNewStartup</name>
        <qualifiedname>KWin::StartupFeedbackEffect::gotNewStartup</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const QIcon &amp;</type>
          <declname>icon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="57" column="10" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="271" bodyend="295"/>
      </memberdef>
      <memberdef kind="slot" id="class_k_win_1_1_startup_feedback_effect_1a6998ee8e787766ee95f7fcecdfb2c144" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::StartupFeedbackEffect::gotRemoveStartup</definition>
        <argsstring>(const QString &amp;id)</argsstring>
        <name>gotRemoveStartup</name>
        <qualifiedname>KWin::StartupFeedbackEffect::gotRemoveStartup</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="58" column="10" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="297" bodyend="309"/>
      </memberdef>
      <memberdef kind="slot" id="class_k_win_1_1_startup_feedback_effect_1a7b6a7dbfe2426038185c50872c3b017f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::StartupFeedbackEffect::gotStartupChange</definition>
        <argsstring>(const QString &amp;id, const QIcon &amp;icon)</argsstring>
        <name>gotStartupChange</name>
        <qualifiedname>KWin::StartupFeedbackEffect::gotStartupChange</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const QIcon &amp;</type>
          <declname>icon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="59" column="10" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="311" bodyend="320"/>
      </memberdef>
      <memberdef kind="slot" id="class_k_win_1_1_startup_feedback_effect_1a35124266faefa74fec89a98751d31029" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::StartupFeedbackEffect::slotMouseChanged</definition>
        <argsstring>(const QPointF &amp;pos, const QPointF &amp;oldpos, Qt::MouseButtons buttons, Qt::MouseButtons oldbuttons, Qt::KeyboardModifiers modifiers, Qt::KeyboardModifiers oldmodifiers)</argsstring>
        <name>slotMouseChanged</name>
        <qualifiedname>KWin::StartupFeedbackEffect::slotMouseChanged</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>oldpos</declname>
        </param>
        <param>
          <type>Qt::MouseButtons</type>
          <declname>buttons</declname>
        </param>
        <param>
          <type>Qt::MouseButtons</type>
          <declname>oldbuttons</declname>
        </param>
        <param>
          <type>Qt::KeyboardModifiers</type>
          <declname>modifiers</declname>
        </param>
        <param>
          <type>Qt::KeyboardModifiers</type>
          <declname>oldmodifiers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="60" column="10" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="260" bodyend="269"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_k_win_1_1_startup_feedback_effect_1a6ad5a4b89dab4a492a02f08d2afc4646" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::StartupFeedbackEffect::start</definition>
        <argsstring>(const Startup &amp;startup)</argsstring>
        <name>start</name>
        <qualifiedname>KWin::StartupFeedbackEffect::start</qualifiedname>
        <param>
          <type>const Startup &amp;</type>
          <declname>startup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="76" column="10" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="322" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_startup_feedback_effect_1ab1a3786923795071c083d6c17c4b01f3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::StartupFeedbackEffect::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <qualifiedname>KWin::StartupFeedbackEffect::stop</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="77" column="10" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="356" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_startup_feedback_effect_1aa65ec70efa5854db7d47dfee3b906fb4" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QImage</type>
        <definition>QImage KWin::StartupFeedbackEffect::scalePixmap</definition>
        <argsstring>(const QPixmap &amp;pm, const QSize &amp;size, qreal devicePixelRatio) const</argsstring>
        <name>scalePixmap</name>
        <qualifiedname>KWin::StartupFeedbackEffect::scalePixmap</qualifiedname>
        <param>
          <type>const QPixmap &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type>const QSize &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>devicePixelRatio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="78" column="12" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="413" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_startup_feedback_effect_1aedee031b1b07b11c66164c8d11a69ee3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::StartupFeedbackEffect::prepareTextures</definition>
        <argsstring>(const QPixmap &amp;pix, qreal devicePixelRatio)</argsstring>
        <name>prepareTextures</name>
        <qualifiedname>KWin::StartupFeedbackEffect::prepareTextures</qualifiedname>
        <param>
          <type>const QPixmap &amp;</type>
          <declname>pix</declname>
        </param>
        <param>
          <type>qreal</type>
          <declname>devicePixelRatio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="79" column="10" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="383" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_startup_feedback_effect_1a2819f3bfbcf328ddb050935443c9c938" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRect</type>
        <definition>QRect KWin::StartupFeedbackEffect::feedbackRect</definition>
        <argsstring>() const</argsstring>
        <name>feedbackRect</name>
        <qualifiedname>KWin::StartupFeedbackEffect::feedbackRect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="80" column="11" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="440" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_startup_feedback_effect_1a763b803650dc66f3035e8f525222ec10" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QSize</type>
        <definition>QSize KWin::StartupFeedbackEffect::feedbackIconSize</definition>
        <argsstring>() const</argsstring>
        <name>feedbackIconSize</name>
        <qualifiedname>KWin::StartupFeedbackEffect::feedbackIconSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="81" column="11" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.cpp" bodystart="435" bodyend="438"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>KWin::Effect</label>
        <link refid="class_k_win_1_1_effect"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::StartupFeedbackEffect</label>
        <link refid="class_k_win_1_1_startup_feedback_effect"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>KWin::Effect</label>
        <link refid="class_k_win_1_1_effect"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>KWin::StartupFeedbackEffect</label>
        <link refid="class_k_win_1_1_startup_feedback_effect"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/plugins/startupfeedback/startupfeedback.h" line="29" column="1" bodyfile="kwin/src/plugins/startupfeedback/startupfeedback.h" bodystart="31" bodyend="103"/>
    <listofallmembers>
      <member refid="group__kwineffects_1gab9bcf52072fe74567496b0a894d1d873" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>animationTime</name></member>
      <member refid="group__kwineffects_1ga3a167fe6d9c46376ed46db13caf2d135" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>animationTime</name></member>
      <member refid="group__kwineffects_1ga0ba05f1463195d0f92ea1dd3396a5d16" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>animationTime</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a9606c96d87698c5a42a3b2cc1d7253b6a26f0ae2f48e778fdd5720f7d627384fa" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>BlinkingFeedback</name></member>
      <member refid="group__kwineffects_1ga7cf8035c970fcde177e3038d79015289" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>blocksDirectScanout</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aea67d120ab5ce1dc424476e63c132af6c1" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>Blur</name></member>
      <member refid="group__kwineffects_1gab8a94f591b743b59b7285911e641e7d5" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>borderActivated</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a9606c96d87698c5a42a3b2cc1d7253b6a97e6e9860799eeaec8b3822eaf471dfb" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>BouncingFeedback</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aead805f717a48c23959a1e9ecd7722d15d" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>Contrast</name></member>
      <member refid="group__kwineffects_1ga4da344d8b8f2cb9eecd6e64a9b758740" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>cursorPos</name></member>
      <member refid="group__kwineffects_1ga0c159e00c3a51ca733bea49cf8d52691" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>debug</name></member>
      <member refid="group__kwineffects_1ga254b1a3e8bb8b9b671e9b000ca027b7c" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>drawWindow</name></member>
      <member refid="group__kwineffects_1ga7bd8262f4cb2c5c3090c748eb388ad7e" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>Effect</name></member>
      <member refid="group__kwineffects_1ga6337b2a9b5aadfbb6b696119144b56ae" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>Feature</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a763b803650dc66f3035e8f525222ec10" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>feedbackIconSize</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a2819f3bfbcf328ddb050935443c9c938" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>feedbackRect</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a9606c96d87698c5a42a3b2cc1d7253b6" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>FeedbackType</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1ae440909bdc41e153307e6ff721ec943d" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>gotNewStartup</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a6998ee8e787766ee95f7fcecdfb2c144" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>gotRemoveStartup</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a7b6a7dbfe2426038185c50872c3b017f" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>gotStartupChange</name></member>
      <member refid="group__kwineffects_1gab5e0581ae4b2dffe8014ff5cf6c21158" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>grabbedKeyboardEvent</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aeaecbb77ad241419970ece3d45296c4838" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>HighlightWindows</name></member>
      <member refid="group__kwineffects_1ga7b0ecb57667179e95c188f0ee7416d00" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>interpolate</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a383b0db88ac3cec4d64bcef2d327ce24" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>isActive</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a6372940a0f4785afef4dd3866291c37a" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>m_active</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a28c3a4a92542fcd868a95c3fa64db982" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>m_blinkingShader</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1aa519660b879d7077cd73779f3fc74d4f" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>m_bounceSizesRatio</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a8dbe93331b678caf95297d95aed3e655" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>m_bouncingTextures</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a4522d08a0a25b6f4fe1771fac0051f09" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>m_configWatcher</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a2f80d8943494d23828533611c7f0035d" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>m_currentGeometry</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a82337a730ae060cf5b179b9e819f047b" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>m_currentStartup</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a4d73e81c2070b766bc3dbf280e8bd092" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>m_cursorSize</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a3656f66ce7b54ffa975518cb98308137" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>m_dirtyRect</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a2951c2686047d01098bc7d03fc9e3149" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>m_frame</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a697564bee2249428df9697721144357e" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>m_lastPresentTime</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a99232415f30694653012a07261980979" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>m_progress</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a90fcc18fb773c2bb263d8a7e519b2359" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>m_splashVisible</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a35df8796eaeedad1e1e844361f01f0dc" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>m_startups</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1ae96f9e0f08fbd0f99fb3aa3fabab63c2" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>m_texture</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a9b96267877e6e6ec4a3a4b47cc72d3c6" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>m_timeout</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a42c5b7383f6d7a83278f270c148bb976" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>m_type</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a9606c96d87698c5a42a3b2cc1d7253b6a77ee0a76ccd01c1797d3a1e5d9b53137" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>NoFeedback</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aea170229312ed2ec0e446ee89ba7f6b6ca" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>Nothing</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378dab0de2932c45bde6df3de10d00dbd6fcd" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>PAINT_SCREEN_BACKGROUND_FIRST</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378da43acbfc913cae9eb3c363aeb0524f18f" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>PAINT_SCREEN_REGION</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378da3e731594d83c3e92742bff7c420fb7f8" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>PAINT_SCREEN_TRANSFORMED</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378da124dd798e5f793087e81da77e11a9b1e" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>PAINT_SCREEN_WITH_TRANSFORMED_WINDOWS</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378dac606d3dcf2dd150234f71c4c39083c7d" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>PAINT_WINDOW_OPAQUE</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378da684bb6c6c278b900b6d0c889e79233b8" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>PAINT_WINDOW_TRANSFORMED</name></member>
      <member refid="group__kwineffects_1gga26b3491296f952420a75b4a0ab33378dac7237bf4bb4d6ea6d6fb1215db19b45e" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>PAINT_WINDOW_TRANSLUCENT</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a7a56fae5b260899c3302e35bb821496e" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>paintScreen</name></member>
      <member refid="group__kwineffects_1ga0f0292db2bf016a0843ef7cc06219378" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>paintWindow</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a9606c96d87698c5a42a3b2cc1d7253b6af9623a922331a076eec4d4ffba564219" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>PassiveFeedback</name></member>
      <member refid="group__kwineffects_1ga5fb1bc87ff54dcc2cfe87b070816ab00" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>perform</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a50276e5b47a10cfad4749e5e792703b1" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>postPaintScreen</name></member>
      <member refid="group__kwineffects_1ga9b7cf82c6f74331cffabb06c63ef914c" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>postPaintWindow</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a6a2dd70b7f80b8e7694cf0e27dbba28e" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>prePaintScreen</name></member>
      <member refid="group__kwineffects_1ga2832c7831c0f49f9f5cf0267ffc53672" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>prePaintWindow</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1aedee031b1b07b11c66164c8d11a69ee3" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>prepareTextures</name></member>
      <member refid="group__kwineffects_1ga30fc2cbbdd90f95568a9e350f34bf2b7" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>provides</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1ab6125bce4610ec0ad231a98b951288b8" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>reconfigure</name></member>
      <member refid="group__kwineffects_1gga4aebd7d0f695e37678debaa118fa92dca19d3e23e53788c8d9cc9c18fbf75fc7d" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>ReconfigureAll</name></member>
      <member refid="group__kwineffects_1ga4aebd7d0f695e37678debaa118fa92dc" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>ReconfigureFlag</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a37c06b30185acdeca2b1a9351a0f83a8" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>requestedEffectChainPosition</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1aa65ec70efa5854db7d47dfee3b906fb4" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>scalePixmap</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aea592ea0de7a4d658a1ef9bbb48b18e15a" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>ScreenInversion</name></member>
      <member refid="group__kwineffects_1ga1efc42cd9be15e8200c6e55f6bf47cb8" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>setPositionTransformations</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a35124266faefa74fec89a98751d31029" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>slotMouseChanged</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a6ad5a4b89dab4a492a02f08d2afc4646" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>start</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a265c511f8b2b1f5b4d3659c0c0af9801" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>StartupFeedbackEffect</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1ab1a3786923795071c083d6c17c4b01f3" prot="private" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>stop</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a1ab5f48be54af4cd729e7f613fab0bd1" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>supported</name></member>
      <member refid="group__kwineffects_1gga6337b2a9b5aadfbb6b696119144b56aea19036d413806c53978a3234e7eb197c4" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>SystemBell</name></member>
      <member refid="group__kwineffects_1ga2d22a8f0b8a4d81615dff67dc1ef970f" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>tabletPadButtonEvent</name></member>
      <member refid="group__kwineffects_1gaa084e5a45597f5775213715eb5506f63" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>tabletPadRingEvent</name></member>
      <member refid="group__kwineffects_1ga4998fb0983bd97163935cad2c4dedd76" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>tabletPadStripEvent</name></member>
      <member refid="group__kwineffects_1ga1d4ae01f5935ea887a12018d59191cbf" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>tabletToolAxis</name></member>
      <member refid="group__kwineffects_1ga7a984d7d83dfa97962b8404301c6aba9" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>tabletToolButtonEvent</name></member>
      <member refid="group__kwineffects_1ga4ed77506be381680bf664dbc8c20e036" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>tabletToolProximity</name></member>
      <member refid="group__kwineffects_1gaf16e9ca42cceb738fb859d1a1a462548" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>tabletToolTip</name></member>
      <member refid="group__kwineffects_1gaa31554949bc00085e6380b50be16138e" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>touchCancel</name></member>
      <member refid="group__kwineffects_1ga315fd305e7570f41e7bce7db6812381f" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>touchDown</name></member>
      <member refid="group__kwineffects_1ga54d00a9e05b5d4597db40c2f5b1d36de" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>touchMotion</name></member>
      <member refid="group__kwineffects_1gaf3871967d6199eb7c87621bc75b925bb" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>touchUp</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a99933dfeb08dcf1bb24bc764c0894dd3" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>type</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1acdb6651c5b448ddf2151afff8dffd8b6" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>type</name></member>
      <member refid="group__kwineffects_1ga7b142933c38cb9b4a433b768b266e7cb" prot="public" virt="virtual"><scope>KWin::StartupFeedbackEffect</scope><name>windowInputMouseEvent</name></member>
      <member refid="group__kwineffects_1ga50174eb0169aebceb78ebd5aff71c481" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>~Effect</name></member>
      <member refid="class_k_win_1_1_startup_feedback_effect_1a4be43f341c9e50ae1287c096e20e3587" prot="public" virt="non-virtual"><scope>KWin::StartupFeedbackEffect</scope><name>~StartupFeedbackEffect</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
