<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="struct_k_win_1_1_xcb_1_1_wrapper_data" kind="struct" language="C++" prot="public">
    <compoundname>KWin::Xcb::WrapperData</compoundname>
    <includes refid="xcbutils_8h" local="no">xcbutils.h</includes>
    <templateparamlist>
      <param>
        <type>typename Reply</type>
      </param>
      <param>
        <type>typename Cookie</type>
      </param>
      <param>
        <type>typename...</type>
        <declname>Args</declname>
        <defname>Args</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_k_win_1_1_xcb_1_1_wrapper_data_1a76adacdf7a92ef164244aa5b8017de38" prot="public" static="no">
        <type>Reply</type>
        <definition>typedef Reply KWin::Xcb::WrapperData&lt; Reply, Cookie, Args &gt;::reply_type</definition>
        <argsstring></argsstring>
        <name>reply_type</name>
        <qualifiedname>KWin::Xcb::WrapperData::reply_type</qualifiedname>
        <briefdescription>
<para>The type returned by the xcb reply function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/xcbutils.h" line="205" column="19" bodyfile="kwin/src/utils/xcbutils.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_k_win_1_1_xcb_1_1_wrapper_data_1a5cc365395476b56d3251124b48607264" prot="public" static="no">
        <type>Cookie</type>
        <definition>typedef Cookie KWin::Xcb::WrapperData&lt; Reply, Cookie, Args &gt;::cookie_type</definition>
        <argsstring></argsstring>
        <name>cookie_type</name>
        <qualifiedname>KWin::Xcb::WrapperData::cookie_type</qualifiedname>
        <briefdescription>
<para>The type returned by the xcb request function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/xcbutils.h" line="209" column="20" bodyfile="kwin/src/utils/xcbutils.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_k_win_1_1_xcb_1_1_wrapper_data_1ae17e84df5de545f827ba2a6573cdae66" prot="public" static="no">
        <type>std::tuple&lt; Args... &gt;</type>
        <definition>typedef std::tuple&lt;Args...&gt; KWin::Xcb::WrapperData&lt; Reply, Cookie, Args &gt;::argument_types</definition>
        <argsstring></argsstring>
        <name>argument_types</name>
        <qualifiedname>KWin::Xcb::WrapperData::argument_types</qualifiedname>
        <briefdescription>
<para>Variadic arguments combined as a std::tuple. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/xcbutils.h" line="214" column="24" bodyfile="kwin/src/utils/xcbutils.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_k_win_1_1_xcb_1_1_wrapper_data_1ac4d3a69005818a9fa24030174446a97e" prot="public" static="no">
        <type>Cookie(*</type>
        <definition>typedef Cookie(* KWin::Xcb::WrapperData&lt; Reply, Cookie, Args &gt;::request_func) (xcb_connection_t *, Args...)</definition>
        <argsstring>)(xcb_connection_t *, Args...)</argsstring>
        <name>request_func</name>
        <qualifiedname>KWin::Xcb::WrapperData::request_func</qualifiedname>
        <briefdescription>
<para>The function pointer definition for the xcb request function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/xcbutils.h" line="218" column="13" bodyfile="kwin/src/utils/xcbutils.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_k_win_1_1_xcb_1_1_wrapper_data_1a93fcfe893251b376ba275660f10651c8" prot="public" static="no">
        <type>Reply *(*</type>
        <definition>typedef Reply *(* KWin::Xcb::WrapperData&lt; Reply, Cookie, Args &gt;::reply_func) (xcb_connection_t *, Cookie, xcb_generic_error_t **)</definition>
        <argsstring>)(xcb_connection_t *, Cookie, xcb_generic_error_t **)</argsstring>
        <name>reply_func</name>
        <qualifiedname>KWin::Xcb::WrapperData::reply_func</qualifiedname>
        <briefdescription>
<para>The function pointer definition for the xcb reply function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/xcbutils.h" line="222" column="13" bodyfile="kwin/src/utils/xcbutils.h" bodystart="222" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="struct_k_win_1_1_xcb_1_1_wrapper_data_1adbd15d7fccf15bceb04657debcdb0a32" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t KWin::Xcb::WrapperData&lt; Reply, Cookie, Args &gt;::argumentCount</definition>
        <argsstring></argsstring>
        <name>argumentCount</name>
        <qualifiedname>KWin::Xcb::WrapperData::argumentCount</qualifiedname>
        <initializer>= sizeof...(Args)</initializer>
        <briefdescription>
<para>Number of variadic arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/utils/xcbutils.h" line="227" column="34" bodyfile="kwin/src/utils/xcbutils.h" bodystart="227" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Variadic template to wrap an xcb request. </para>
    </briefdescription>
    <detaileddescription>
<para>This struct is part of the generic implementation to wrap xcb requests and fetching their reply. Each request is represented by two templated elements: <ref refid="struct_k_win_1_1_xcb_1_1_wrapper_data" kindref="compound">WrapperData</ref> and <ref refid="class_k_win_1_1_xcb_1_1_wrapper" kindref="compound">Wrapper</ref>.</para>
<para>The <ref refid="struct_k_win_1_1_xcb_1_1_wrapper_data" kindref="compound">WrapperData</ref> defines the following types: <itemizedlist>
<listitem><para><ref refid="struct_k_win_1_1_xcb_1_1_wrapper_data_1a76adacdf7a92ef164244aa5b8017de38" kindref="member">reply_type</ref> of the xcb request </para>
</listitem>
<listitem><para><ref refid="struct_k_win_1_1_xcb_1_1_wrapper_data_1a5cc365395476b56d3251124b48607264" kindref="member">cookie_type</ref> of the xcb request </para>
</listitem>
<listitem><para>function pointer type for the xcb request </para>
</listitem>
<listitem><para>function pointer type for the reply This uses variadic template arguments thus it can be used to specify any xcb request.</para>
</listitem>
</itemizedlist>
As the <ref refid="struct_k_win_1_1_xcb_1_1_wrapper_data" kindref="compound">WrapperData</ref> does not specify the actual function pointers one needs to derive another struct which specifies the function pointer requestFunc and the function pointer replyFunc as static constexpr of type <ref refid="struct_k_win_1_1_xcb_1_1_wrapper_data_1a93fcfe893251b376ba275660f10651c8" kindref="member">reply_func</ref> and <ref refid="struct_k_win_1_1_xcb_1_1_wrapper_data_1a76adacdf7a92ef164244aa5b8017de38" kindref="member">reply_type</ref> respectively. E.g. for the command xcb_get_geometry: <programlisting><codeline><highlight class="keyword">struct<sp/></highlight><highlight class="normal">GeometryData<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>WrapperData&lt;<sp/>xcb_get_geometry_reply_t,<sp/>xcb_get_geometry_cookie_t,<sp/>xcb_drawable_t<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>request_func<sp/>requestFunc<sp/>=<sp/>&amp;xcb_get_geometry_unchecked;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>reply_func<sp/>replyFunc<sp/>=<sp/>&amp;xcb_get_geometry_reply;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para>To simplify this definition the macro XCB_WRAPPER_DATA is provided. For the same xcb command this looks like this: <programlisting><codeline><highlight class="normal"><ref refid="xcbutils_8h_1a048bc0be61c5c8a39e37d45f8a1f3cd4" kindref="member">XCB_WRAPPER_DATA</ref>(GeometryData,<sp/>xcb_get_geometry,<sp/>xcb_drawable_t)</highlight></codeline>
</programlisting></para>
<para>The derived <ref refid="struct_k_win_1_1_xcb_1_1_wrapper_data" kindref="compound">WrapperData</ref> has to be passed as first template argument to <ref refid="class_k_win_1_1_xcb_1_1_wrapper" kindref="compound">Wrapper</ref>. The other template arguments of <ref refid="class_k_win_1_1_xcb_1_1_wrapper" kindref="compound">Wrapper</ref> are the same variadic template arguments as passed into <ref refid="struct_k_win_1_1_xcb_1_1_wrapper_data" kindref="compound">WrapperData</ref>. This is ensured at compile time and will cause a compile error in case there is a mismatch of the variadic template arguments passed to <ref refid="struct_k_win_1_1_xcb_1_1_wrapper_data" kindref="compound">WrapperData</ref> and <ref refid="class_k_win_1_1_xcb_1_1_wrapper" kindref="compound">Wrapper</ref>. Passing another type than a struct derived from <ref refid="struct_k_win_1_1_xcb_1_1_wrapper_data" kindref="compound">WrapperData</ref> to <ref refid="class_k_win_1_1_xcb_1_1_wrapper" kindref="compound">Wrapper</ref> will result in a compile error. The following code snippets won&apos;t compile: <programlisting><codeline><highlight class="normal"><ref refid="xcbutils_8h_1a048bc0be61c5c8a39e37d45f8a1f3cd4" kindref="member">XCB_WRAPPER_DATA</ref>(GeometryData,<sp/>xcb_get_geometry,<sp/>xcb_drawable_t)</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>fails<sp/>with<sp/>&quot;static<sp/>assertion<sp/>failed:<sp/>Argument<sp/>miss-match<sp/>between<sp/>Wrapper<sp/>and<sp/>WrapperData&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">IncorrectArguments<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Wrapper&lt;GeometryData,<sp/>uint8_t&gt;</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>IncorrectArguments()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>IncorrectArguments(xcb_window_t<sp/>window)<sp/>:<sp/>Wrapper&lt;GeometryData,<sp/>uint8_t&gt;(window)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>fails<sp/>with<sp/>&quot;static<sp/>assertion<sp/>failed:<sp/>Data<sp/>template<sp/>argument<sp/>must<sp/>be<sp/>derived<sp/>from<sp/>WrapperData&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">WrapperDataDirectly<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Wrapper&lt;WrapperData&lt;xcb_get_geometry_reply_t,<sp/>xcb_get_geometry_request_t,<sp/>xcb_drawable_t&gt;,<sp/>xcb_drawable_t&gt;</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WrapperDataDirectly()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WrapperDataDirectly(xcb_window_t<sp/>window)<sp/>:<sp/>Wrapper&lt;WrapperData&lt;xcb_get_geometry_reply_t,<sp/>xcb_get_geometry_request_t,<sp/>xcb_drawable_t&gt;,<sp/>xcb_drawable_t&gt;(window)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>fails<sp/>with<sp/>&quot;static<sp/>assertion<sp/>failed:<sp/>Data<sp/>template<sp/>argument<sp/>must<sp/>be<sp/>derived<sp/>from<sp/>WrapperData&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">FakeWrapperData</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>xcb_get_geometry_reply_t<sp/>reply_type;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>xcb_get_geometry_cookie_t<sp/>cookie_type;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::tuple&lt;xcb_drawable_t&gt;<sp/>argument_types;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>cookie_type<sp/>(*request_func)(xcb_connection_t*,<sp/>xcb_drawable_t);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>reply_type<sp/>*(*reply_func)(xcb_connection_t*,<sp/>cookie_type,<sp/>xcb_generic_error_t**);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::size_t<sp/>argumentCount<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>request_func<sp/>requestFunc<sp/>=<sp/>&amp;xcb_get_geometry_unchecked;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>reply_func<sp/>replyFunc<sp/>=<sp/>&amp;xcb_get_geometry_reply;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">NotDerivedFromWrapperData<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Wrapper&lt;FakeWrapperData,<sp/>xcb_drawable_t&gt;</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>NotDerivedFromWrapperData()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>NotDerivedFromWrapperData(xcb_window_t<sp/>window)<sp/>:<sp/>Wrapper&lt;FakeWrapperData,<sp/>xcb_drawable_t&gt;(window)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para>The <ref refid="class_k_win_1_1_xcb_1_1_wrapper" kindref="compound">Wrapper</ref> provides an easy to use RAII API which calls the <ref refid="struct_k_win_1_1_xcb_1_1_wrapper_data" kindref="compound">WrapperData</ref>&apos;s requestFunc in the ctor and fetches the reply the first time it is used. In addition the dtor takes care of freeing the reply if it got fetched, otherwise it discards the reply. The <ref refid="class_k_win_1_1_xcb_1_1_wrapper" kindref="compound">Wrapper</ref> can be used as if it were the <ref refid="struct_k_win_1_1_xcb_1_1_wrapper_data_1a76adacdf7a92ef164244aa5b8017de38" kindref="member">reply_type</ref> directly.</para>
<para>There are several command wrappers defined which either subclass <ref refid="class_k_win_1_1_xcb_1_1_wrapper" kindref="compound">Wrapper</ref> to add methods to simplify the usage of the result_type or use a typedef. To add a new typedef one can use the macro XCB_WRAPPER which creates the <ref refid="struct_k_win_1_1_xcb_1_1_wrapper_data" kindref="compound">WrapperData</ref> struct as XCB_WRAPPER_DATA does and the typedef. E.g: <programlisting><codeline><highlight class="normal"><ref refid="xcbutils_8h_1a1e52a93aacd14474fc0a792e9f7354e3" kindref="member">XCB_WRAPPER</ref>(Geometry,<sp/>xcb_get_geometry,<sp/>xcb_drawable_t)</highlight></codeline>
</programlisting></para>
<para>creates a typedef Geometry and the struct GeometryData.</para>
<para>Overall this allows to simplify the <ref refid="namespace_k_win_1_1_xcb" kindref="compound">Xcb</ref> usage. For example consider the following xcb code snippet: <programlisting><codeline><highlight class="normal">xcb_window_t<sp/>w;<sp/></highlight><highlight class="comment">//<sp/>some<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">xcb_connection_t<sp/>*c<sp/>=<sp/><ref refid="namespace_k_win_1aa7f02d94c7c3eb413790afa48eff03e8" kindref="member">connection</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xcb_get_geometry_cookie_t<sp/>cookie<sp/>=<sp/>xcb_get_geometry_unchecked(c,<sp/>w);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>other<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">xcb_get_geometry_reply_t<sp/>*reply<sp/>=<sp/>xcb_get_geometry_reply(c,<sp/>cookie,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reply)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>reply-&gt;x;<sp/></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>with<sp/>the<sp/>geometry</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">free(reply);</highlight></codeline>
</programlisting></para>
<para>With the help of the <ref refid="class_k_win_1_1_xcb_1_1_wrapper" kindref="compound">Wrapper</ref> class this can be simplified to: <programlisting><codeline><highlight class="normal">xcb_window_t<sp/>w;<sp/></highlight><highlight class="comment">//<sp/>some<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Xcb::Geometry<sp/>geo(w);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!geo.isNull())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>geo-&gt;x;<sp/></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>with<sp/>the<sp/>geometry</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><simplesect kind="see"><para><ref refid="xcbutils_8h_1a048bc0be61c5c8a39e37d45f8a1f3cd4" kindref="member">XCB_WRAPPER_DATA</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="xcbutils_8h_1a1e52a93aacd14474fc0a792e9f7354e3" kindref="member">XCB_WRAPPER</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_xcb_1_1_wrapper" kindref="compound">Wrapper</ref> </para>
</simplesect>
<simplesect kind="see"><para>WindowAttributes </para>
</simplesect>
<simplesect kind="see"><para>OverlayWindow </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_xcb_1_1_window_geometry" kindref="compound">WindowGeometry</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_xcb_1_1_tree" kindref="compound">Tree</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_xcb_1_1_current_input" kindref="compound">CurrentInput</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_xcb_1_1_transient_for" kindref="compound">TransientFor</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="kwin/src/utils/xcbutils.h" line="200" column="1" bodyfile="kwin/src/utils/xcbutils.h" bodystart="201" bodyend="228"/>
    <listofallmembers>
      <member refid="struct_k_win_1_1_xcb_1_1_wrapper_data_1ae17e84df5de545f827ba2a6573cdae66" prot="public" virt="non-virtual"><scope>KWin::Xcb::WrapperData</scope><name>argument_types</name></member>
      <member refid="struct_k_win_1_1_xcb_1_1_wrapper_data_1adbd15d7fccf15bceb04657debcdb0a32" prot="public" virt="non-virtual"><scope>KWin::Xcb::WrapperData</scope><name>argumentCount</name></member>
      <member refid="struct_k_win_1_1_xcb_1_1_wrapper_data_1a5cc365395476b56d3251124b48607264" prot="public" virt="non-virtual"><scope>KWin::Xcb::WrapperData</scope><name>cookie_type</name></member>
      <member refid="struct_k_win_1_1_xcb_1_1_wrapper_data_1a93fcfe893251b376ba275660f10651c8" prot="public" virt="non-virtual"><scope>KWin::Xcb::WrapperData</scope><name>reply_func</name></member>
      <member refid="struct_k_win_1_1_xcb_1_1_wrapper_data_1a76adacdf7a92ef164244aa5b8017de38" prot="public" virt="non-virtual"><scope>KWin::Xcb::WrapperData</scope><name>reply_type</name></member>
      <member refid="struct_k_win_1_1_xcb_1_1_wrapper_data_1ac4d3a69005818a9fa24030174446a97e" prot="public" virt="non-virtual"><scope>KWin::Xcb::WrapperData</scope><name>request_func</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
