<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_k_win_1_1_surface_interface" kind="class" language="C++" prot="public">
    <compoundname>KWin::SurfaceInterface</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QObject</basecompoundref>
    <includes refid="surface_8h" local="no">surface.h</includes>
    <sectiondef kind="property">
      <memberdef kind="property" id="class_k_win_1_1_surface_interface_1afe2b6c1fb2b1cc64ca1e349e39b90e20" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QRegion</type>
        <definition>QRegion KWin::SurfaceInterface::opaque</definition>
        <argsstring></argsstring>
        <name>opaque</name>
        <qualifiedname>KWin::SurfaceInterface::opaque</qualifiedname>
        <read>opaque</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The opaque region for a translucent buffer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="86" column="5" bodyfile="kwin/src/wayland/surface.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_surface_interface_1a2252ccfdaefae7974f9682cb5d190cda" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QRegion</type>
        <definition>QRegion KWin::SurfaceInterface::input</definition>
        <argsstring></argsstring>
        <name>input</name>
        <qualifiedname>KWin::SurfaceInterface::input</qualifiedname>
        <read>input</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The current input region. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="90" column="5" bodyfile="kwin/src/wayland/surface.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_k_win_1_1_surface_interface_1ad4b3c49e2e99aa0f949c85507850a6b6" prot="public" static="no" readable="yes" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>QSizeF</type>
        <definition>QSizeF KWin::SurfaceInterface::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <qualifiedname>KWin::SurfaceInterface::size</qualifiedname>
        <read>size</read>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="91" column="5" bodyfile="kwin/src/wayland/surface.h" bodystart="91" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_k_win_1_1_surface_interface_1ac48decf858e34952ff8f3841806c5830" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_surface_interface_private" kindref="compound">SurfaceInterfacePrivate</ref> &gt;</type>
        <definition>std::unique_ptr&lt;SurfaceInterfacePrivate&gt; KWin::SurfaceInterface::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <qualifiedname>KWin::SurfaceInterface::d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="461" column="21" bodyfile="kwin/src/wayland/surface.h" bodystart="461" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_k_win_1_1_surface_interface_1a190f6b81c407c3225216fc0b52b733e7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class SurfaceInterfacePrivate</definition>
        <argsstring></argsstring>
        <name>SurfaceInterfacePrivate</name>
        <qualifiedname>KWin::SurfaceInterface::SurfaceInterfacePrivate</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_surface_interface_private" kindref="compound">SurfaceInterfacePrivate</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="462" column="18" bodyfile="kwin/src/wayland/surface.h" bodystart="462" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a89a3676d287e67529ad85f250dbfbeb5" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::SurfaceInterface::SurfaceInterface</definition>
        <argsstring>(CompositorInterface *compositor, wl_resource *resource)</argsstring>
        <name>SurfaceInterface</name>
        <qualifiedname>KWin::SurfaceInterface::SurfaceInterface</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_compositor_interface" kindref="compound">CompositorInterface</ref> *</type>
          <declname>compositor</declname>
        </param>
        <param>
          <type>wl_resource *</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="93" column="14" bodyfile="kwin/src/wayland/surface.cpp" bodystart="453" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1aa82a45c4b56de81c67baf446a40a785e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KWin::SurfaceInterface::~SurfaceInterface</definition>
        <argsstring>() override</argsstring>
        <name>~SurfaceInterface</name>
        <qualifiedname>KWin::SurfaceInterface::~SurfaceInterface</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="94" column="5" bodyfile="kwin/src/wayland/surface.cpp" bodystart="468" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a8d8796005db45f1800be16df5ac04242" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t KWin::SurfaceInterface::id</definition>
        <argsstring>() const</argsstring>
        <name>id</name>
        <qualifiedname>KWin::SurfaceInterface::id</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the object id for this <ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref> surface. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="99" column="14" bodyfile="kwin/src/wayland/surface.cpp" bodystart="482" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a12f9073812125fc1dd668fe73fc0285a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> *</type>
        <definition>ClientConnection * KWin::SurfaceInterface::client</definition>
        <argsstring>() const</argsstring>
        <name>client</name>
        <qualifiedname>KWin::SurfaceInterface::client</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref> client that owns this <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="103" column="22" bodyfile="kwin/src/wayland/surface.cpp" bodystart="487" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a967a6d17b9be9b1ec2e6f3c3c60d667d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>wl_resource *</type>
        <definition>wl_resource * KWin::SurfaceInterface::resource</definition>
        <argsstring>() const</argsstring>
        <name>resource</name>
        <qualifiedname>KWin::SurfaceInterface::resource</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <ref refid="namespace_k_win_1_1_wayland" kindref="compound">Wayland</ref> resource corresponding to this <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="107" column="17" bodyfile="kwin/src/wayland/surface.cpp" bodystart="492" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1ab5ff7cfdde87bd781a4df782d3930245" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_compositor_interface" kindref="compound">CompositorInterface</ref> *</type>
        <definition>CompositorInterface * KWin::SurfaceInterface::compositor</definition>
        <argsstring>() const</argsstring>
        <name>compositor</name>
        <qualifiedname>KWin::SurfaceInterface::compositor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the compositor for this <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="111" column="25" bodyfile="kwin/src/wayland/surface.cpp" bodystart="497" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a74d8c5aef926651948ae88d70feb0ffe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_surface_role" kindref="compound">SurfaceRole</ref> *</type>
        <definition>SurfaceRole * KWin::SurfaceInterface::role</definition>
        <argsstring>() const</argsstring>
        <name>role</name>
        <qualifiedname>KWin::SurfaceInterface::role</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the role of this surface, or <computeroutput>null</computeroutput> if no role has been assigned to the surface.</para>
<para>Once a role is given to the surface, it is permanent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="118" column="17" bodyfile="kwin/src/wayland/surface.cpp" bodystart="472" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1af7fc1b7a86682bcd55e1195f471213e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::setRole</definition>
        <argsstring>(SurfaceRole *role)</argsstring>
        <name>setRole</name>
        <qualifiedname>KWin::SurfaceInterface::setRole</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_surface_role" kindref="compound">SurfaceRole</ref> *</type>
          <declname>role</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="119" column="10" bodyfile="kwin/src/wayland/surface.cpp" bodystart="477" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a5e267a0c51c75519a475004bd3437cef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::SurfaceInterface::mapToChild</definition>
        <argsstring>(SurfaceInterface *child, const QPointF &amp;point) const</argsstring>
        <name>mapToChild</name>
        <qualifiedname>KWin::SurfaceInterface::mapToChild</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
          <declname>child</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maps the specified <emphasis>point</emphasis> in this surface&apos;s coordinate system to the equivalent point within the <emphasis>child&apos;s</emphasis> coordinate system, and returns the mapped point.</para>
<para>If this surface is not an ancestor of the <emphasis>child</emphasis>, a null point is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="127" column="13" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1112" bodyend="1132"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1aa8db310a54de302b6528ea4ac0d1bd29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::frameRendered</definition>
        <argsstring>(quint32 msec)</argsstring>
        <name>frameRendered</name>
        <qualifiedname>KWin::SurfaceInterface::frameRendered</qualifiedname>
        <param>
          <type>quint32</type>
          <declname>msec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="129" column="10" bodyfile="kwin/src/wayland/surface.cpp" bodystart="502" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1afc16532a55ee920009490477944d014c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::SurfaceInterface::hasFrameCallbacks</definition>
        <argsstring>() const</argsstring>
        <name>hasFrameCallbacks</name>
        <qualifiedname>KWin::SurfaceInterface::hasFrameCallbacks</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="130" column="10" bodyfile="kwin/src/wayland/surface.cpp" bodystart="522" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a0de5f3bc96df584e06784cd3e1b302d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_k_win_1_1_presentation_feedback" kindref="compound">PresentationFeedback</ref> &gt;</type>
        <definition>std::unique_ptr&lt; PresentationFeedback &gt; KWin::SurfaceInterface::takePresentationFeedback</definition>
        <argsstring>(Output *output)</argsstring>
        <name>takePresentationFeedback</name>
        <qualifiedname>KWin::SurfaceInterface::takePresentationFeedback</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="132" column="21" bodyfile="kwin/src/wayland/surface.cpp" bodystart="514" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a2f78aaa341ac742630da6ffe7423fb1a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRegion</type>
        <definition>QRegion KWin::SurfaceInterface::opaque</definition>
        <argsstring>() const</argsstring>
        <name>opaque</name>
        <qualifiedname>KWin::SurfaceInterface::opaque</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="134" column="13" bodyfile="kwin/src/wayland/surface.cpp" bodystart="853" bodyend="856"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a44dddaf85bd2e3870549f6897b58b6cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRegion</type>
        <definition>QRegion KWin::SurfaceInterface::input</definition>
        <argsstring>() const</argsstring>
        <name>input</name>
        <qualifiedname>KWin::SurfaceInterface::input</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="135" column="13" bodyfile="kwin/src/wayland/surface.cpp" bodystart="858" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a45b8549b5bfff00c85812c836c975995" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRegion</type>
        <definition>QRegion KWin::SurfaceInterface::bufferDamage</definition>
        <argsstring>() const</argsstring>
        <name>bufferDamage</name>
        <qualifiedname>KWin::SurfaceInterface::bufferDamage</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="136" column="13" bodyfile="kwin/src/wayland/surface.cpp" bodystart="848" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a3ff230bfc9b49793c1493c306435eb03" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::SurfaceInterface::bufferSourceBox</definition>
        <argsstring>() const</argsstring>
        <name>bufferSourceBox</name>
        <qualifiedname>KWin::SurfaceInterface::bufferSourceBox</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="137" column="12" bodyfile="kwin/src/wayland/surface.cpp" bodystart="863" bodyend="866"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a651c492e0b9e149c49215562606f2f2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_output_transform" kindref="compound">OutputTransform</ref></type>
        <definition>OutputTransform KWin::SurfaceInterface::bufferTransform</definition>
        <argsstring>() const</argsstring>
        <name>bufferTransform</name>
        <qualifiedname>KWin::SurfaceInterface::bufferTransform</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the buffer transform that had been applied to the buffer to compensate for output rotation.</para>
<para>If the surface is on an output that is rotated 90 degrees clockwise, the buffer will be rotated 90 degrees counter clockwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="145" column="21" bodyfile="kwin/src/wayland/surface.cpp" bodystart="868" bodyend="871"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a6f53ff0fca97e468e7ccf6681f4a5030" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_graphics_buffer" kindref="compound">GraphicsBuffer</ref> *</type>
        <definition>GraphicsBuffer * KWin::SurfaceInterface::buffer</definition>
        <argsstring>() const</argsstring>
        <name>buffer</name>
        <qualifiedname>KWin::SurfaceInterface::buffer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the current <ref refid="class_k_win_1_1_graphics_buffer" kindref="compound">GraphicsBuffer</ref>, might be <computeroutput>nullptr</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="149" column="20" bodyfile="kwin/src/wayland/surface.cpp" bodystart="873" bodyend="876"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a5a6b83bbb0260f80c8b98c918cafcba3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QPoint</type>
        <definition>QPoint KWin::SurfaceInterface::offset</definition>
        <argsstring>() const</argsstring>
        <name>offset</name>
        <qualifiedname>KWin::SurfaceInterface::offset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="150" column="12" bodyfile="kwin/src/wayland/surface.cpp" bodystart="878" bodyend="881"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1ab2d82c9acbd58b19df8a81b66dfd6764" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QSizeF</type>
        <definition>QSizeF KWin::SurfaceInterface::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>KWin::SurfaceInterface::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the current size of the surface, in surface coordinates.</para>
<para>Note that there is no direct relationship between the surface size and the buffer size. In order to determine the size of the currently attached buffer, use <ref refid="class_k_win_1_1_surface_interface_1a6f53ff0fca97e468e7ccf6681f4a5030" kindref="member">buffer()</ref>-&gt;<ref refid="class_k_win_1_1_surface_interface_1ad4b3c49e2e99aa0f949c85507850a6b6" kindref="member">size()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="157" column="12" bodyfile="kwin/src/wayland/surface.cpp" bodystart="919" bodyend="922"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1ac312d3dd7257a9e1c7d5465a0c35fc2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF KWin::SurfaceInterface::boundingRect</definition>
        <argsstring>() const</argsstring>
        <name>boundingRect</name>
        <qualifiedname>KWin::SurfaceInterface::boundingRect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the rectangle that bounds this surface and all of its sub-surfaces.</para>
<para>QPoint(0, 0) corresponds to the upper left corner of this surface. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="163" column="12" bodyfile="kwin/src/wayland/surface.cpp" bodystart="924" bodyend="938"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a8c35c1fcb861e552405f054fc2386def" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_sub_surface_interface" kindref="compound">SubSurfaceInterface</ref> *</type>
        <definition>SubSurfaceInterface * KWin::SurfaceInterface::subSurface</definition>
        <argsstring>() const</argsstring>
        <name>subSurface</name>
        <qualifiedname>KWin::SurfaceInterface::subSurface</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The SubSurface for this Surface in case there is one. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="168" column="25" bodyfile="kwin/src/wayland/surface.cpp" bodystart="909" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_sub_surface_interface" kindref="compound">SubSurfaceInterface</ref> * &gt;</type>
        <definition>QList&lt; SubSurfaceInterface * &gt; KWin::SurfaceInterface::below</definition>
        <argsstring>() const</argsstring>
        <name>below</name>
        <qualifiedname>KWin::SurfaceInterface::below</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the sub-surfaces that are below this surface. The sub-surfaces are sorted from bottom to top. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="173" column="11" bodyfile="kwin/src/wayland/surface.cpp" bodystart="899" bodyend="902"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_sub_surface_interface" kindref="compound">SubSurfaceInterface</ref> * &gt;</type>
        <definition>QList&lt; SubSurfaceInterface * &gt; KWin::SurfaceInterface::above</definition>
        <argsstring>() const</argsstring>
        <name>above</name>
        <qualifiedname>KWin::SurfaceInterface::above</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the sub-surfaces that are above this surface. The sub-surfaces are sorted from bottom to top. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="178" column="11" bodyfile="kwin/src/wayland/surface.cpp" bodystart="904" bodyend="907"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a76a84d1cdeca1c0c219a863a1c1fa42c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_shadow_interface" kindref="compound">ShadowInterface</ref> *</type>
        <definition>ShadowInterface * KWin::SurfaceInterface::shadow</definition>
        <argsstring>() const</argsstring>
        <name>shadow</name>
        <qualifiedname>KWin::SurfaceInterface::shadow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The <ref refid="class_k_win_1_1_shadow" kindref="compound">Shadow</ref> for this Surface. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="183" column="21" bodyfile="kwin/src/wayland/surface.cpp" bodystart="940" bodyend="943"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a496b8ea7a9daee6fca45c95e80bb8a0c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_blur_interface" kindref="compound">BlurInterface</ref> *</type>
        <definition>BlurInterface * KWin::SurfaceInterface::blur</definition>
        <argsstring>() const</argsstring>
        <name>blur</name>
        <qualifiedname>KWin::SurfaceInterface::blur</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The Blur for this Surface. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="188" column="19" bodyfile="kwin/src/wayland/surface.cpp" bodystart="945" bodyend="948"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a03bedbd16808f5fde244cd1ecddabc5c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_slide_interface" kindref="compound">SlideInterface</ref> *</type>
        <definition>SlideInterface * KWin::SurfaceInterface::slideOnShowHide</definition>
        <argsstring>() const</argsstring>
        <name>slideOnShowHide</name>
        <qualifiedname>KWin::SurfaceInterface::slideOnShowHide</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The Slide for this Surface. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="193" column="20" bodyfile="kwin/src/wayland/surface.cpp" bodystart="955" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a8c228ce629146acad506722342999f26" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_contrast_interface" kindref="compound">ContrastInterface</ref> *</type>
        <definition>ContrastInterface * KWin::SurfaceInterface::contrast</definition>
        <argsstring>() const</argsstring>
        <name>contrast</name>
        <qualifiedname>KWin::SurfaceInterface::contrast</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The Contrast for this Surface. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="198" column="23" bodyfile="kwin/src/wayland/surface.cpp" bodystart="950" bodyend="953"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a5859a70ac95110b480eae0160b1b83f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::SurfaceInterface::isMapped</definition>
        <argsstring>() const</argsstring>
        <name>isMapped</name>
        <qualifiedname>KWin::SurfaceInterface::isMapped</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> is currently considered to be mapped. A <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> is mapped if it has a non-null <ref refid="class_k_win_1_1_graphics_buffer" kindref="compound">GraphicsBuffer</ref> attached. If the <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> references a <ref refid="class_k_win_1_1_sub_surface_interface" kindref="compound">SubSurfaceInterface</ref> it is only considered mapped if it has a <ref refid="class_k_win_1_1_graphics_buffer" kindref="compound">GraphicsBuffer</ref> attached and the parent <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> is mapped.</para>
<para><simplesect kind="return"><para>Whether the <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> is currently mapped </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="208" column="10" bodyfile="kwin/src/wayland/surface.cpp" bodystart="960" bodyend="963"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a121877c312e955cc43e6aa4d337a525d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
        <definition>SurfaceInterface * KWin::SurfaceInterface::surfaceAt</definition>
        <argsstring>(const QPointF &amp;position)</argsstring>
        <name>surfaceAt</name>
        <qualifiedname>KWin::SurfaceInterface::surfaceAt</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds the <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> at the given <computeroutput>position</computeroutput> in surface-local coordinates. This can be either a descendant <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> honoring the stacking order or the <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> itself if its geometry contains the given <computeroutput>position</computeroutput>.</para>
<para>If no such <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> is found, e.g. because the <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> is unmapped, <computeroutput>nullptr</computeroutput> is returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position in surface-local coordinates </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Child surface at the given <computeroutput>position</computeroutput> or surface itself at the position, might be <computeroutput>nullptr</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="221" column="22" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1026" bodyend="1053"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1af7a3a3ccbdff6ffd690e357fd02f2fcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
        <definition>SurfaceInterface * KWin::SurfaceInterface::inputSurfaceAt</definition>
        <argsstring>(const QPointF &amp;position)</argsstring>
        <name>inputSurfaceAt</name>
        <qualifiedname>KWin::SurfaceInterface::inputSurfaceAt</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds the input receiving <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> at the given <computeroutput>position</computeroutput> in surface-local coordinates. This can be either a descendant <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> honoring the stacking order or the <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> itself if its geometry contains the given <computeroutput>position</computeroutput>.</para>
<para>If no such <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> is found, e.g. because the <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> is unmapped or there is no input region containing the position, <computeroutput>nullptr</computeroutput> is returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position in surface-local coordinates </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Input receiving child surface at the given <computeroutput>position</computeroutput> or surface itself at the position, might be <computeroutput>nullptr</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="235" column="22" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1055" bodyend="1085"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1abad9449df6afe4574c7f48f3a31f53a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::setOutputs</definition>
        <argsstring>(const QList&lt; OutputInterface * &gt; &amp;outputs, OutputInterface *primaryOutput)</argsstring>
        <name>setOutputs</name>
        <qualifiedname>KWin::SurfaceInterface::setOutputs</qualifiedname>
        <param>
          <type>const QList&lt; <ref refid="class_k_win_1_1_output_interface" kindref="compound">OutputInterface</ref> * &gt; &amp;</type>
          <declname>outputs</declname>
        </param>
        <param>
          <type><ref refid="class_k_win_1_1_output_interface" kindref="compound">OutputInterface</ref> *</type>
          <declname>primaryOutput</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the <computeroutput>outputs</computeroutput> this <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> overlaps with, may be empty.</para>
<para>The compositor should update whenever the <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> becomes visible on an <ref refid="class_k_win_1_1_output_interface" kindref="compound">OutputInterface</ref> by e.g. getting (un)mapped, resized, moved, etc.</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_surface_interface_1a7715aa26db105726d096236a94df69d5" kindref="member">outputs</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="245" column="10" bodyfile="kwin/src/wayland/surface.cpp" bodystart="970" bodyend="1024"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a7715aa26db105726d096236a94df69d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_k_win_1_1_output_interface" kindref="compound">OutputInterface</ref> * &gt;</type>
        <definition>QList&lt; OutputInterface * &gt; KWin::SurfaceInterface::outputs</definition>
        <argsstring>() const</argsstring>
        <name>outputs</name>
        <qualifiedname>KWin::SurfaceInterface::outputs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>All OutputInterfaces the <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> is on. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_surface_interface_1abad9449df6afe4574c7f48f3a31f53a3" kindref="member">setOutputs</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="251" column="11" bodyfile="kwin/src/wayland/surface.cpp" bodystart="965" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1ab47d49e9938d4a0ffc6c04699827bca9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_confined_pointer_v1_interface" kindref="compound">ConfinedPointerV1Interface</ref> *</type>
        <definition>ConfinedPointerV1Interface * KWin::SurfaceInterface::confinedPointer</definition>
        <argsstring>() const</argsstring>
        <name>confinedPointer</name>
        <qualifiedname>KWin::SurfaceInterface::confinedPointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer confinement installed on this <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref>. <simplesect kind="see"><para><ref refid="class_k_win_1_1_surface_interface_1a5803fb462f3383b3e561f8a909c96af9" kindref="member">pointerConstraintsChanged</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="257" column="32" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1092" bodyend="1095"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1adcc92bcb7baae24e72f17d6891251db4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_locked_pointer_v1_interface" kindref="compound">LockedPointerV1Interface</ref> *</type>
        <definition>LockedPointerV1Interface * KWin::SurfaceInterface::lockedPointer</definition>
        <argsstring>() const</argsstring>
        <name>lockedPointer</name>
        <qualifiedname>KWin::SurfaceInterface::lockedPointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer lock installed on this <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref>. <simplesect kind="see"><para><ref refid="class_k_win_1_1_surface_interface_1a5803fb462f3383b3e561f8a909c96af9" kindref="member">pointerConstraintsChanged</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="263" column="30" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1087" bodyend="1090"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1ad04a4a624f04e1ea740924752a4229db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KWin::SurfaceInterface::inhibitsIdle</definition>
        <argsstring>() const</argsstring>
        <name>inhibitsIdle</name>
        <qualifiedname>KWin::SurfaceInterface::inhibitsIdle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether this <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> wants idle to be inhibited on the <ref refid="class_k_win_1_1_output" kindref="compound">Output</ref> it is shown </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_surface_interface_1a34ea306cdf0022c7eac856718d55caf0" kindref="member">inhibitsIdleChanged</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="269" column="10" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1097" bodyend="1100"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1aa70cfee0dba3485d83ab4fc95bd87b0c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_linux_dma_buf_v1_feedback" kindref="compound">LinuxDmaBufV1Feedback</ref> *</type>
        <definition>LinuxDmaBufV1Feedback * KWin::SurfaceInterface::dmabufFeedbackV1</definition>
        <argsstring>() const</argsstring>
        <name>dmabufFeedbackV1</name>
        <qualifiedname>KWin::SurfaceInterface::dmabufFeedbackV1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>dmabuf feedback installed on this <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="274" column="27" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1102" bodyend="1105"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a30d780e9ac910cb9b990b78778762b8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1ae822402a75b1dbd6c2afc72f87fa60a6" kindref="member">ContentType</ref></type>
        <definition>ContentType KWin::SurfaceInterface::contentType</definition>
        <argsstring>() const</argsstring>
        <name>contentType</name>
        <qualifiedname>KWin::SurfaceInterface::contentType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the current content type of this surface </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="279" column="17" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1107" bodyend="1110"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1aedcd504f5954c1ed715e34d868096a61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>qreal</type>
        <definition>qreal KWin::SurfaceInterface::scaleOverride</definition>
        <argsstring>() const</argsstring>
        <name>scaleOverride</name>
        <qualifiedname>KWin::SurfaceInterface::scaleOverride</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_client_connection_1a12b3837602c68f64c096301e195bd82c" kindref="member">ClientConnection::setScaleOverride</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="293" column="11" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1134" bodyend="1137"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a72be072046416f8e0c7e7689c76cdd77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QPoint</type>
        <definition>QPoint KWin::SurfaceInterface::toSurfaceLocal</definition>
        <argsstring>(const QPoint &amp;point) const</argsstring>
        <name>toSurfaceLocal</name>
        <qualifiedname>KWin::SurfaceInterface::toSurfaceLocal</qualifiedname>
        <param>
          <type>const QPoint &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a co-ordinate from kwin logical space to surface logical space </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="298" column="12" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1139" bodyend="1142"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1addc81521241e04558d1b4d576e6be1c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QPointF</type>
        <definition>QPointF KWin::SurfaceInterface::toSurfaceLocal</definition>
        <argsstring>(const QPointF &amp;point) const</argsstring>
        <name>toSurfaceLocal</name>
        <qualifiedname>KWin::SurfaceInterface::toSurfaceLocal</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a co-ordinate from kwin logical space to surface logical space </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="303" column="13" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1144" bodyend="1147"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a1d4a2ed7869d836e854c323c9ab6da15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1a9b2c7d76c9b9021af62d089e13e456d6" kindref="member">PresentationModeHint</ref></type>
        <definition>PresentationModeHint KWin::SurfaceInterface::presentationModeHint</definition>
        <argsstring>() const</argsstring>
        <name>presentationModeHint</name>
        <qualifiedname>KWin::SurfaceInterface::presentationModeHint</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if the client thinks the content of this surface is suitable for presentation with tearing </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="308" column="26" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1149" bodyend="1152"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a361edd675ef00ecf53b25cc0886993ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::setPreferredBufferScale</definition>
        <argsstring>(qreal scale)</argsstring>
        <name>setPreferredBufferScale</name>
        <qualifiedname>KWin::SurfaceInterface::setPreferredBufferScale</qualifiedname>
        <param>
          <type>qreal</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a preferred buffer scale that clients should provide buffers in <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="314" column="10" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1184" bodyend="1204"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a4d261ead21e8952d3b136fb17e60a0cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::setPreferredBufferTransform</definition>
        <argsstring>(OutputTransform transform)</argsstring>
        <name>setPreferredBufferTransform</name>
        <qualifiedname>KWin::SurfaceInterface::setPreferredBufferTransform</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output_transform" kindref="compound">OutputTransform</ref></type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the preferred buffer transform for this surface.</para>
<para>This indicates to the client the preferred buffer transform to use when attaching buffers to this surface. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="322" column="10" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1206" bodyend="1223"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1aa8823a4917971939e10f6bbaf33c08e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_transaction" kindref="compound">Transaction</ref> *</type>
        <definition>Transaction * KWin::SurfaceInterface::firstTransaction</definition>
        <argsstring>() const</argsstring>
        <name>firstTransaction</name>
        <qualifiedname>KWin::SurfaceInterface::firstTransaction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The first committed transaction that is scheduled to be applied to this surface. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="327" column="17" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1225" bodyend="1228"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a81e1ee5acae349923c0c72c4b8a51409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::setFirstTransaction</definition>
        <argsstring>(Transaction *transaction)</argsstring>
        <name>setFirstTransaction</name>
        <qualifiedname>KWin::SurfaceInterface::setFirstTransaction</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_transaction" kindref="compound">Transaction</ref> *</type>
          <declname>transaction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="328" column="10" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1230" bodyend="1233"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1afca7daaa7341bed830b250e84e3a8b43" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_transaction" kindref="compound">Transaction</ref> *</type>
        <definition>Transaction * KWin::SurfaceInterface::lastTransaction</definition>
        <argsstring>() const</argsstring>
        <name>lastTransaction</name>
        <qualifiedname>KWin::SurfaceInterface::lastTransaction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The last committed transaction that is scheduled to be applied to this surface. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="333" column="17" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1235" bodyend="1238"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a5f6f5f6c29fa8f1438b2cd2dfa1e8ef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::setLastTransaction</definition>
        <argsstring>(Transaction *transaction)</argsstring>
        <name>setLastTransaction</name>
        <qualifiedname>KWin::SurfaceInterface::setLastTransaction</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_transaction" kindref="compound">Transaction</ref> *</type>
          <declname>transaction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="334" column="10" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1240" bodyend="1243"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a0f4fc57574afca45ef63a20e004cb5c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_k_win_1_1_color_description" kindref="compound">ColorDescription</ref> &amp;</type>
        <definition>const ColorDescription &amp; KWin::SurfaceInterface::colorDescription</definition>
        <argsstring>() const</argsstring>
        <name>colorDescription</name>
        <qualifiedname>KWin::SurfaceInterface::colorDescription</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="336" column="28" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1154" bodyend="1157"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a608048fe714d1f56d16c3eab604a3ef5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_k_win_1a72b8a93022757874f9e6f85fcf9bc4e9" kindref="member">RenderingIntent</ref></type>
        <definition>RenderingIntent KWin::SurfaceInterface::renderingIntent</definition>
        <argsstring>() const</argsstring>
        <name>renderingIntent</name>
        <qualifiedname>KWin::SurfaceInterface::renderingIntent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="337" column="21" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1159" bodyend="1162"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1ac68a339a2abcc856493392bed36087e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::setPreferredColorDescription</definition>
        <argsstring>(const ColorDescription &amp;descr)</argsstring>
        <name>setPreferredColorDescription</name>
        <qualifiedname>KWin::SurfaceInterface::setPreferredColorDescription</qualifiedname>
        <param>
          <type>const <ref refid="class_k_win_1_1_color_description" kindref="compound">ColorDescription</ref> &amp;</type>
          <declname>descr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="339" column="10" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1164" bodyend="1182"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a8cf8570b2d56ec00d5b4f8612aee08eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double KWin::SurfaceInterface::alphaMultiplier</definition>
        <argsstring>() const</argsstring>
        <name>alphaMultiplier</name>
        <qualifiedname>KWin::SurfaceInterface::alphaMultiplier</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="341" column="12" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1262" bodyend="1265"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1abfedbb06b4fff6bad9515db700823d8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="class_k_win_1_1_sync_release_point" kindref="compound">SyncReleasePoint</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SyncReleasePoint &gt; KWin::SurfaceInterface::bufferReleasePoint</definition>
        <argsstring>() const</argsstring>
        <name>bufferReleasePoint</name>
        <qualifiedname>KWin::SurfaceInterface::bufferReleasePoint</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the current release point for the buffer on this surface. The buffer keeps the release point referenced as long as it&apos;s referenced itself; for synchronization on the GPU side, the compositor has to either keep the release point referenced as long as the GPU task is running, or add a fence for each GPU task to the release point </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="349" column="21" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1257" bodyend="1260"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a57406faaa8efaae58d1ed4428059b0b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::traverseTree</definition>
        <argsstring>(std::function&lt; void(SurfaceInterface *surface)&gt; callback)</argsstring>
        <name>traverseTree</name>
        <qualifiedname>KWin::SurfaceInterface::traverseTree</qualifiedname>
        <param>
          <type>std::function&lt; void(<ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *surface)&gt;</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Traverses the surface sub-tree with this surface as the root. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="354" column="10" bodyfile="kwin/src/wayland/surface.cpp" bodystart="1245" bodyend="1255"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a6b90cf6b6f8c6fbf42764d98d690c865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
        <definition>SurfaceInterface * KWin::SurfaceInterface::mainSurface</definition>
        <argsstring>()</argsstring>
        <name>mainSurface</name>
        <qualifiedname>KWin::SurfaceInterface::mainSurface</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the last surface found while traversing the subsurfaces parents </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="359" column="22" bodyfile="kwin/src/wayland/surface.cpp" bodystart="914" bodyend="917"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1a24ac16f7936d889771c2ab09d973175b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
        <definition>SurfaceInterface * KWin::SurfaceInterface::get</definition>
        <argsstring>(wl_resource *native)</argsstring>
        <name>get</name>
        <qualifiedname>KWin::SurfaceInterface::get</qualifiedname>
        <param>
          <type>wl_resource *</type>
          <declname>native</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> for the <computeroutput>native</computeroutput> resource. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="284" column="29" bodyfile="kwin/src/wayland/surface.cpp" bodystart="883" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="class_k_win_1_1_surface_interface_1afb65dc63f3864f15ef4a041f558d0220" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> *</type>
        <definition>SurfaceInterface * KWin::SurfaceInterface::get</definition>
        <argsstring>(quint32 id, const ClientConnection *client)</argsstring>
        <name>get</name>
        <qualifiedname>KWin::SurfaceInterface::get</qualifiedname>
        <param>
          <type>quint32</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="class_k_win_1_1_client_connection" kindref="compound">ClientConnection</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> with given <computeroutput>id</computeroutput> for <computeroutput>client</computeroutput>, if it exists, otherwise <computeroutput>nullptr</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="288" column="29" bodyfile="kwin/src/wayland/surface.cpp" bodystart="891" bodyend="897"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="signal">
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1a547a07eb856d80205eb584e50571d1ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::aboutToBeDestroyed</definition>
        <argsstring>()</argsstring>
        <name>aboutToBeDestroyed</name>
        <qualifiedname>KWin::SurfaceInterface::aboutToBeDestroyed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the underlying wl_surface resource is about to be freed.</para>
<para>The unbound() signal is emitted either when the client that owns the surface has been destroyed or if the surface has been destroyed due to a destructor request.</para>
<para>The <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> object and the associated wl_surface resource are valid when this signal is emitted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="371" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1a15e2a6742bca026a3031cc31e82bbe89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::damaged</definition>
        <argsstring>(const QRegion &amp;)</argsstring>
        <name>damaged</name>
        <qualifiedname>KWin::SurfaceInterface::damaged</qualifiedname>
        <param>
          <type>const QRegion &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted whenever the <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> got damaged. The signal is only emitted during the commit of state. A damage means that a new <ref refid="class_k_win_1_1_graphics_buffer" kindref="compound">GraphicsBuffer</ref> got attached.</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_surface_interface_1a6f53ff0fca97e468e7ccf6681f4a5030" kindref="member">buffer</ref> </para>
</simplesect>
<simplesect kind="see"><para>damage </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="380" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1a990be21e77584e95208a49d66353d821" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::opaqueChanged</definition>
        <argsstring>(const QRegion &amp;)</argsstring>
        <name>opaqueChanged</name>
        <qualifiedname>KWin::SurfaceInterface::opaqueChanged</qualifiedname>
        <param>
          <type>const QRegion &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="381" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1a4e06e3af734c27dccf5334428e21b993" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::inputChanged</definition>
        <argsstring>(const QRegion &amp;)</argsstring>
        <name>inputChanged</name>
        <qualifiedname>KWin::SurfaceInterface::inputChanged</qualifiedname>
        <param>
          <type>const QRegion &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="382" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1a7f24e07a7d774bfdb1d9f712c6ae7caa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::bufferTransformChanged</definition>
        <argsstring>(KWin::OutputTransform)</argsstring>
        <name>bufferTransformChanged</name>
        <qualifiedname>KWin::SurfaceInterface::bufferTransformChanged</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_output_transform" kindref="compound">KWin::OutputTransform</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the buffer transform has changed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="386" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1ad96d966bd10142622e779c02af8abd21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::bufferSourceBoxChanged</definition>
        <argsstring>()</argsstring>
        <name>bufferSourceBoxChanged</name>
        <qualifiedname>KWin::SurfaceInterface::bufferSourceBoxChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="387" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1a772968460eef93c5f8e6178f93aaebcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::bufferChanged</definition>
        <argsstring>()</argsstring>
        <name>bufferChanged</name>
        <qualifiedname>KWin::SurfaceInterface::bufferChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="388" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1a6c32a9d40e65dd4be9825da9f05058e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::mapped</definition>
        <argsstring>()</argsstring>
        <name>mapped</name>
        <qualifiedname>KWin::SurfaceInterface::mapped</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted when the Surface becomes visible, i.e. a non-null buffer has been attached. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="392" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1ab2512fea14715e29cd251d58774c29b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::unmapped</definition>
        <argsstring>()</argsstring>
        <name>unmapped</name>
        <qualifiedname>KWin::SurfaceInterface::unmapped</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted when the Surface removes its content </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="396" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1a2315d2fdbb80fbe41cfcc84feaab2d26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::sizeChanged</definition>
        <argsstring>()</argsstring>
        <name>sizeChanged</name>
        <qualifiedname>KWin::SurfaceInterface::sizeChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the surface size has changed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="400" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1a49924ca95caf16d4ad2c98e270f0dba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::shadowChanged</definition>
        <argsstring>()</argsstring>
        <name>shadowChanged</name>
        <qualifiedname>KWin::SurfaceInterface::shadowChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="401" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1a0df97396a64813308cc0153ba6c04523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::blurChanged</definition>
        <argsstring>()</argsstring>
        <name>blurChanged</name>
        <qualifiedname>KWin::SurfaceInterface::blurChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="402" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1a57836355f625e4d52c635422f74bcfbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::slideOnShowHideChanged</definition>
        <argsstring>()</argsstring>
        <name>slideOnShowHideChanged</name>
        <qualifiedname>KWin::SurfaceInterface::slideOnShowHideChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="403" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1acbc9e09b874fbf82fa04541d423223bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::contrastChanged</definition>
        <argsstring>()</argsstring>
        <name>contrastChanged</name>
        <qualifiedname>KWin::SurfaceInterface::contrastChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="404" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1aa08394431df363f71792548e7eb6e381" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::childSubSurfaceAdded</definition>
        <argsstring>(SubSurfaceInterface *subSurface)</argsstring>
        <name>childSubSurfaceAdded</name>
        <qualifiedname>KWin::SurfaceInterface::childSubSurfaceAdded</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_sub_surface_interface" kindref="compound">SubSurfaceInterface</ref> *</type>
          <declname>subSurface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted whenever a new child sub-surface <computeroutput>subSurface</computeroutput> is added. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="408" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1a56d6013e32b2614e4152b74fd6ff7dac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::childSubSurfaceRemoved</definition>
        <argsstring>(SubSurfaceInterface *subSurface)</argsstring>
        <name>childSubSurfaceRemoved</name>
        <qualifiedname>KWin::SurfaceInterface::childSubSurfaceRemoved</qualifiedname>
        <param>
          <type><ref refid="class_k_win_1_1_sub_surface_interface" kindref="compound">SubSurfaceInterface</ref> *</type>
          <declname>subSurface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted whenver the child sub-surface <computeroutput>subSurface</computeroutput> is removed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="412" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1a32a2a03ff78575bf79d52d443f734edd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::childSubSurfacesChanged</definition>
        <argsstring>()</argsstring>
        <name>childSubSurfacesChanged</name>
        <qualifiedname>KWin::SurfaceInterface::childSubSurfacesChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the list of child subsurfaces changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="416" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1a5803fb462f3383b3e561f8a909c96af9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::pointerConstraintsChanged</definition>
        <argsstring>()</argsstring>
        <name>pointerConstraintsChanged</name>
        <qualifiedname>KWin::SurfaceInterface::pointerConstraintsChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted whenever a pointer constraint get (un)installed on this <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref>.</para>
<para>The pointer constraint does not get activated, the compositor needs to activate the lock/confinement.</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_surface_interface_1ab47d49e9938d4a0ffc6c04699827bca9" kindref="member">confinedPointer</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_surface_interface_1adcc92bcb7baae24e72f17d6891251db4" kindref="member">lockedPointer</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="427" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1a34ea306cdf0022c7eac856718d55caf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::inhibitsIdleChanged</definition>
        <argsstring>()</argsstring>
        <name>inhibitsIdleChanged</name>
        <qualifiedname>KWin::SurfaceInterface::inhibitsIdleChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted whenever the <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> starts/ends to inhibit idle. <simplesect kind="see"><para><ref refid="class_k_win_1_1_surface_interface_1ad04a4a624f04e1ea740924752a4229db" kindref="member">inhibitsIdle</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="433" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1ac096152d38861a34171292c8f83e793e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::colorDescriptionChanged</definition>
        <argsstring>()</argsstring>
        <name>colorDescriptionChanged</name>
        <qualifiedname>KWin::SurfaceInterface::colorDescriptionChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="435" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1a95b7027fe568ed53eb86428499d74691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::presentationModeHintChanged</definition>
        <argsstring>()</argsstring>
        <name>presentationModeHintChanged</name>
        <qualifiedname>KWin::SurfaceInterface::presentationModeHintChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="436" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1a108132d4885a243efcfd7c1f9b1dcb79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::bufferReleasePointChanged</definition>
        <argsstring>()</argsstring>
        <name>bufferReleasePointChanged</name>
        <qualifiedname>KWin::SurfaceInterface::bufferReleasePointChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="437" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1aca39df0efda6a78d6e89937ab2e6436f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::alphaMultiplierChanged</definition>
        <argsstring>()</argsstring>
        <name>alphaMultiplierChanged</name>
        <qualifiedname>KWin::SurfaceInterface::alphaMultiplierChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="438" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1a0ef181bc149455033328ca56afc61697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::committed</definition>
        <argsstring>()</argsstring>
        <name>committed</name>
        <qualifiedname>KWin::SurfaceInterface::committed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emitted when the Surface has been committed.</para>
<para>This signal is emitted after all the relevant damage and xyzChanged signals for this commit are emitted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="446" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1ae854062d52a6f90fa795e287174f3d82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::stateStashed</definition>
        <argsstring>(quint32 serial)</argsstring>
        <name>stateStashed</name>
        <qualifiedname>KWin::SurfaceInterface::stateStashed</qualifiedname>
        <param>
          <type>quint32</type>
          <declname>serial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when a surface commit with the specified <emphasis>serial</emphasis> has been cached to be applied later. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="452" column="10"/>
      </memberdef>
      <memberdef kind="signal" id="class_k_win_1_1_surface_interface_1a3679d710107ea3aa2f6e17cd33aa436d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KWin::SurfaceInterface::stateApplied</definition>
        <argsstring>(quint32 serial)</argsstring>
        <name>stateApplied</name>
        <qualifiedname>KWin::SurfaceInterface::stateApplied</qualifiedname>
        <param>
          <type>quint32</type>
          <declname>serial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the state in a surface commit with the specified <emphasis>serial</emphasis> has been applied. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="kwin/src/wayland/surface.h" line="458" column="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Resource representing a wl_surface. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> gets created by the <ref refid="class_k_win_1_1_compositor_interface" kindref="compound">CompositorInterface</ref>. A <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> normally takes up a role by being &quot;attached&quot; to either a ShellSurfaceInterface, a <ref refid="class_k_win_1_1_sub_surface_interface" kindref="compound">SubSurfaceInterface</ref> or a <ref refid="class_k_win_1_1_cursor" kindref="compound">Cursor</ref>.</para>
<para>The implementation of the <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> does not only wrap the features exposed by wl_surface, but goes further by integrating the information added to a <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> by other interfaces. This should make interacting from the server easier, it only needs to monitor the <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> and does not need to track each specific interface.</para>
<para>The <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref> takes care of reference/unreferencing the <ref refid="class_k_win_1_1_graphics_buffer" kindref="compound">GraphicsBuffer</ref> attached to it. As long as a <ref refid="class_k_win_1_1_graphics_buffer" kindref="compound">GraphicsBuffer</ref> is attached, the released signal won&apos;t be sent. If the <ref refid="class_k_win_1_1_graphics_buffer" kindref="compound">GraphicsBuffer</ref> is no longer needed by the <ref refid="class_k_win_1_1_surface_interface" kindref="compound">SurfaceInterface</ref>, it will get unreferenced and might be automatically deleted (if it&apos;s no longer referenced).</para>
<para><simplesect kind="see"><para><ref refid="class_k_win_1_1_compositor_interface" kindref="compound">CompositorInterface</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_graphics_buffer" kindref="compound">GraphicsBuffer</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_sub_surface_interface" kindref="compound">SubSurfaceInterface</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_blur_interface" kindref="compound">BlurInterface</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_contrast_interface" kindref="compound">ContrastInterface</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_shadow_interface" kindref="compound">ShadowInterface</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_slide_interface" kindref="compound">SlideInterface</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_k_win_1_1_linux_dma_buf_v1_feedback" kindref="compound">LinuxDmaBufV1Feedback</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>KWin::SurfaceInterface</label>
        <link refid="class_k_win_1_1_surface_interface"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>KWin::SurfaceInterface</label>
        <link refid="class_k_win_1_1_surface_interface"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="kwin/src/wayland/surface.h" line="80" column="1" bodyfile="kwin/src/wayland/surface.h" bodystart="81" bodyend="463"/>
    <listofallmembers>
      <member refid="class_k_win_1_1_surface_interface_1a547a07eb856d80205eb584e50571d1ee" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>aboutToBeDestroyed</name></member>
      <member refid="class_k_win_1_1_surface_interface_1aa2e1595bf1af4314836b40d1e7063591" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>above</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a8cf8570b2d56ec00d5b4f8612aee08eb" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>alphaMultiplier</name></member>
      <member refid="class_k_win_1_1_surface_interface_1aca39df0efda6a78d6e89937ab2e6436f" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>alphaMultiplierChanged</name></member>
      <member refid="class_k_win_1_1_surface_interface_1abb75b79f52d1243adff87dafe40c82c3" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>below</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a496b8ea7a9daee6fca45c95e80bb8a0c" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>blur</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a0df97396a64813308cc0153ba6c04523" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>blurChanged</name></member>
      <member refid="class_k_win_1_1_surface_interface_1ac312d3dd7257a9e1c7d5465a0c35fc2e" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>boundingRect</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a6f53ff0fca97e468e7ccf6681f4a5030" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>buffer</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a772968460eef93c5f8e6178f93aaebcf" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>bufferChanged</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a45b8549b5bfff00c85812c836c975995" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>bufferDamage</name></member>
      <member refid="class_k_win_1_1_surface_interface_1abfedbb06b4fff6bad9515db700823d8f" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>bufferReleasePoint</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a108132d4885a243efcfd7c1f9b1dcb79" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>bufferReleasePointChanged</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a3ff230bfc9b49793c1493c306435eb03" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>bufferSourceBox</name></member>
      <member refid="class_k_win_1_1_surface_interface_1ad96d966bd10142622e779c02af8abd21" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>bufferSourceBoxChanged</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a651c492e0b9e149c49215562606f2f2e" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>bufferTransform</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a7f24e07a7d774bfdb1d9f712c6ae7caa" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>bufferTransformChanged</name></member>
      <member refid="class_k_win_1_1_surface_interface_1aa08394431df363f71792548e7eb6e381" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>childSubSurfaceAdded</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a56d6013e32b2614e4152b74fd6ff7dac" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>childSubSurfaceRemoved</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a32a2a03ff78575bf79d52d443f734edd" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>childSubSurfacesChanged</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a12f9073812125fc1dd668fe73fc0285a" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>client</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a0f4fc57574afca45ef63a20e004cb5c7" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>colorDescription</name></member>
      <member refid="class_k_win_1_1_surface_interface_1ac096152d38861a34171292c8f83e793e" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>colorDescriptionChanged</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a0ef181bc149455033328ca56afc61697" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>committed</name></member>
      <member refid="class_k_win_1_1_surface_interface_1ab5ff7cfdde87bd781a4df782d3930245" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>compositor</name></member>
      <member refid="class_k_win_1_1_surface_interface_1ab47d49e9938d4a0ffc6c04699827bca9" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>confinedPointer</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a30d780e9ac910cb9b990b78778762b8f" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>contentType</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a8c228ce629146acad506722342999f26" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>contrast</name></member>
      <member refid="class_k_win_1_1_surface_interface_1acbc9e09b874fbf82fa04541d423223bf" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>contrastChanged</name></member>
      <member refid="class_k_win_1_1_surface_interface_1ac48decf858e34952ff8f3841806c5830" prot="private" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>d</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a15e2a6742bca026a3031cc31e82bbe89" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>damaged</name></member>
      <member refid="class_k_win_1_1_surface_interface_1aa70cfee0dba3485d83ab4fc95bd87b0c" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>dmabufFeedbackV1</name></member>
      <member refid="class_k_win_1_1_surface_interface_1aa8823a4917971939e10f6bbaf33c08e2" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>firstTransaction</name></member>
      <member refid="class_k_win_1_1_surface_interface_1aa8db310a54de302b6528ea4ac0d1bd29" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>frameRendered</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a24ac16f7936d889771c2ab09d973175b" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>get</name></member>
      <member refid="class_k_win_1_1_surface_interface_1afb65dc63f3864f15ef4a041f558d0220" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>get</name></member>
      <member refid="class_k_win_1_1_surface_interface_1afc16532a55ee920009490477944d014c" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>hasFrameCallbacks</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a8d8796005db45f1800be16df5ac04242" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>id</name></member>
      <member refid="class_k_win_1_1_surface_interface_1ad04a4a624f04e1ea740924752a4229db" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>inhibitsIdle</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a34ea306cdf0022c7eac856718d55caf0" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>inhibitsIdleChanged</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a2252ccfdaefae7974f9682cb5d190cda" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>input</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a44dddaf85bd2e3870549f6897b58b6cd" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>input</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a4e06e3af734c27dccf5334428e21b993" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>inputChanged</name></member>
      <member refid="class_k_win_1_1_surface_interface_1af7a3a3ccbdff6ffd690e357fd02f2fcc" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>inputSurfaceAt</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a5859a70ac95110b480eae0160b1b83f0" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>isMapped</name></member>
      <member refid="class_k_win_1_1_surface_interface_1afca7daaa7341bed830b250e84e3a8b43" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>lastTransaction</name></member>
      <member refid="class_k_win_1_1_surface_interface_1adcc92bcb7baae24e72f17d6891251db4" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>lockedPointer</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a6b90cf6b6f8c6fbf42764d98d690c865" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>mainSurface</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a6c32a9d40e65dd4be9825da9f05058e3" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>mapped</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a5e267a0c51c75519a475004bd3437cef" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>mapToChild</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a5a6b83bbb0260f80c8b98c918cafcba3" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>offset</name></member>
      <member refid="class_k_win_1_1_surface_interface_1afe2b6c1fb2b1cc64ca1e349e39b90e20" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>opaque</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a2f78aaa341ac742630da6ffe7423fb1a" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>opaque</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a990be21e77584e95208a49d66353d821" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>opaqueChanged</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a7715aa26db105726d096236a94df69d5" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>outputs</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a5803fb462f3383b3e561f8a909c96af9" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>pointerConstraintsChanged</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a1d4a2ed7869d836e854c323c9ab6da15" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>presentationModeHint</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a95b7027fe568ed53eb86428499d74691" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>presentationModeHintChanged</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a608048fe714d1f56d16c3eab604a3ef5" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>renderingIntent</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a967a6d17b9be9b1ec2e6f3c3c60d667d" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>resource</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a74d8c5aef926651948ae88d70feb0ffe" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>role</name></member>
      <member refid="class_k_win_1_1_surface_interface_1aedcd504f5954c1ed715e34d868096a61" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>scaleOverride</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a81e1ee5acae349923c0c72c4b8a51409" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>setFirstTransaction</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a5f6f5f6c29fa8f1438b2cd2dfa1e8ef4" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>setLastTransaction</name></member>
      <member refid="class_k_win_1_1_surface_interface_1abad9449df6afe4574c7f48f3a31f53a3" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>setOutputs</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a361edd675ef00ecf53b25cc0886993ea" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>setPreferredBufferScale</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a4d261ead21e8952d3b136fb17e60a0cb" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>setPreferredBufferTransform</name></member>
      <member refid="class_k_win_1_1_surface_interface_1ac68a339a2abcc856493392bed36087e9" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>setPreferredColorDescription</name></member>
      <member refid="class_k_win_1_1_surface_interface_1af7fc1b7a86682bcd55e1195f471213e4" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>setRole</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a76a84d1cdeca1c0c219a863a1c1fa42c" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>shadow</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a49924ca95caf16d4ad2c98e270f0dba6" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>shadowChanged</name></member>
      <member refid="class_k_win_1_1_surface_interface_1ad4b3c49e2e99aa0f949c85507850a6b6" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>size</name></member>
      <member refid="class_k_win_1_1_surface_interface_1ab2d82c9acbd58b19df8a81b66dfd6764" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>size</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a2315d2fdbb80fbe41cfcc84feaab2d26" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>sizeChanged</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a03bedbd16808f5fde244cd1ecddabc5c" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>slideOnShowHide</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a57836355f625e4d52c635422f74bcfbf" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>slideOnShowHideChanged</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a3679d710107ea3aa2f6e17cd33aa436d" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>stateApplied</name></member>
      <member refid="class_k_win_1_1_surface_interface_1ae854062d52a6f90fa795e287174f3d82" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>stateStashed</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a8c35c1fcb861e552405f054fc2386def" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>subSurface</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a121877c312e955cc43e6aa4d337a525d" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>surfaceAt</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a89a3676d287e67529ad85f250dbfbeb5" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>SurfaceInterface</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a190f6b81c407c3225216fc0b52b733e7" prot="private" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>SurfaceInterfacePrivate</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a0de5f3bc96df584e06784cd3e1b302d0" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>takePresentationFeedback</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a72be072046416f8e0c7e7689c76cdd77" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>toSurfaceLocal</name></member>
      <member refid="class_k_win_1_1_surface_interface_1addc81521241e04558d1b4d576e6be1c9" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>toSurfaceLocal</name></member>
      <member refid="class_k_win_1_1_surface_interface_1a57406faaa8efaae58d1ed4428059b0b3" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>traverseTree</name></member>
      <member refid="class_k_win_1_1_surface_interface_1ab2512fea14715e29cd251d58774c29b3" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>unmapped</name></member>
      <member refid="class_k_win_1_1_surface_interface_1aa82a45c4b56de81c67baf446a40a785e" prot="public" virt="non-virtual"><scope>KWin::SurfaceInterface</scope><name>~SurfaceInterface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
